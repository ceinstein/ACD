Fix enable-zlib no-comp
Fix no-rc4
Move declaration of i into blocks where it is used
sctp requires dgram
RT4660: BIO_METHODs should be const
BIO_new etc. don't need a non-const BIO_METHOD This allows all the built-in method tables to live in .rodata
Downcase VMS config names
On VMS we downcase option names which means that config names are downcased as well so they need to be downcased in the target table to be found
Just like bio_out bio_err needs the linebuffer filter on VMS
Adds s2i function for ct_precert_poison X509 extension
Allows CONF files for certificate requests to specify that a pre- certificate should be created (see RFC6962)
Fix memory leak where fdlookup linked list is not freed during ASYNC_WAIT_CTX_free
Fix no-ts with --strict-warnings
Fix no-sock
Misc fixes for no-sock
Fix no-gost
Configure had the wrong name for the no-gost option
Don't use hardcoded values for types
In for loop values introduce a dummy to protect against empty list
In constructions such as 'for x in $(MAKEVAR); do ...' there's the possibility that $(MAKEVAR) is en empty value Some shells don't like that so introduce a dummy value that gets discarded:
for x in dummy $(MAKEVAR); do if [ "$$x" = "dummy" ]; then continue; fi
Closes RT#4459
Fix no-seed
Fix compilation with --strict-warnings and no-seed
Remove the no-rijndael option
Rijndael is an old name for AES
Fix no-scrypt
Fix the evp tests when no-scrypt is used
Skip the CMS tests if CMS is disabled
This fixes the no-cms compile time option
Fix no-dsa
Misc fixes for no-dsa
Build system: VC-WIN64I fixups
Configurations/windows-makefile.tmpl: respect no-makedepend
Windows build system: get uplink right
config: fix off-by-centimeter-to-the-right typo
Configurations/10-main.conf: freeze -std option in darwin*-ppc-cc
RT#4422
Remove mk1mf documentation
Remove the remainder of util/mk1mf.pl and companion scripts
This removes all scripts that deal with MINFO as well since that's only used by mk1mf
Remove generation of ms/version32.rc from Configure use util/mkrc.pl
utils/mkrc.pl was added a while ago as a better generator for the Windows DLL resource file Finalize the change by removing the ms/version32.rc generator from Configure and adding resource file support using mkrc.pl in Configurations/windows-makefile.pl
Remove the mk1mf VC-WIN* builds and its supporting scripts
The mk1mf build for the VC-WIN* targets is broken and the unified scheme works well enough so we clean out the old
Fix ALPN - more fixes
* Clear proposed along with selected before looking at ClientHello * Add test case for above * Clear NPN seen after selecting ALPN on server * Minor documentation updates
Add a comment on dane_verify() logic
Remove #error from include files
Don't have #error statements in header files but instead wrap the contents of that file in #ifndef OPENSSL_NO_xxx This means it is now always safe to include the header file
GH886: CONNECT should use HTTP/1.1
By default you get 0.9 which isn't widely available But we use HTTP/1.0 for now Courtesy beusink@users.github.com
Have makedepend output to stdout and redirect it
This gives us better control of what files are produced
ct_int.h only needed by crypto/ct
Merge ct_int.h into ct_locl.h
constify DSA_SIG_get0()
Move blake2_loclh to blake2 directory
Fixed language
Fixed a bunch of typos in the docs
constify ECDSA_SIG_get0()
PR#4436
If the asm file to be compiled isn't generated leave the ext alone
Closes RT#4447
make update
Don't let 'generate' target depend on generated files act directly instead
One of the 'generate' targets depended on $(SRCDIR)/apps/progs.h which depended on.. nothing This meant it never got regenerated once it existed regardless of need Of course we could have it depend on all the files checked to generate it but they also depend on progs.h so we'd end up getting cricular dependencies which makes make unhappy
Furthermore and this applies for the other generated files having them as targets means that they may be regenerated on the fly in some cases and since they get written to the source tree this isn't such a good idea if that tree is read-only (which is a possible situation in an out-of-tree build)
So we move all the actions to the 'generate' targets themselves thus making sure they get regenerated in a controlled manner and regardless of dependencies
apps/progs.pl: add back the INCLUDE_FUNCTION_TABLE wrapper
Revert "Ignore the generated apps/progs.h"
This reverts commit 91056e72693b4ee8cb5339d9091871ffc3b6f776
Revert "Generate apps/progs.h on the fly"
This reverts commit 04e2a527379ad12ca512aef4e838f94af22d7f79
Revert "Include progs.h directly in openssl.c instead of via apps.h"
This reverts commit a45d7d5388c6774a484cff4af13f188240d3d50b
GH36: Add casts to match the documentation
Correct faulty L<> links in .pods
Closes RT#4450
Add a few more quotes for Windows (install_ssldirs)
The command source are files not directories
Therefore they should be concatenated with the source directory using catfile() not catdir()
Replace sed command with perl
Some implementations of sed require a newline before an ending '}' The easier method is to replace that sed command with the corresponding perl command
Closes RT#4448
Clear the exit code from 'find' in 'make depend'
Depending on what has been built so far all .d files may not be present and 'find' will exit with non-zero exit code This isn't a bother for us but may break make so clear the exit code with an added 'exit 0'
Closes RT#4444
Shut find up about files not found
Some of the files in $(DEPS) might not exist We don't need to know
Don't free up EVP_MD_CTX
Don't free up passed EVP_MD_CTX in ASN1_item_sign_ctx() This simplifies handling and retains compatiblity with previous behaviour
PR#4446
Use the dependencies received in generatesrc()
generatesrc() did already receive dependency information but never used it and never really needed to.. until now
Ignore the generated apps/progs.h
Generate apps/progs.h on the fly
Include progs.h directly in openssl.c instead of via apps.h
Make apps/progs.pl more flexible
Make Configure write @disablables to configdata.pm and have apps/progs.pl use that data
Correct the export list when writing configdata.pm
Correct the check of files to depend on against known generated ones
The check was erroneously inversed
Don't perform tsa tests if configured "no-ts"
Correct incorrect path
In crypto buildinf.h depends on ../configdata.pm not ./configdata.pm
Better 'make depend' mechanism
Instead of relying on the '-nt' test operator which doesn't exist everywhere use find's '-newer' to find out if any of the known .d files is newer than Makefile
Closes RT#4444
make update
Implement support for no-ts
apps/progs.pl: more consistent output for digests
Fix no-des
Numerous fixes for no-des
Fix no-dgram
A few places in s_client needed some OPENSSL_NO_DTLS guards which fixes no-dgram
Fix no-deprecated
The no-deprecated build was failing because afalg was relying on a transitive include that does not exist in a no-deprecated build
Fix no-cmac
There were a couple of CMAC references without OPENSSL_NO_CMAC guards
Add a test to see that signals are caught as failures
Make OpenSSL::Test::run() sensitive to signals
$? in perl gets the status value from wait(2) which is a word with the exit code in the upper half and the number of a raised signal in the lower half OpenSSL::Test::run() ignored the signal half up until now
With this change we recalculate an exit code the same way the Unix shells do using this formula:
($? & 0x7f) ? ($? & 0x7f)|0x80 : ($? >> 8);
Remove more unused things
Moved doc/standards.txt to the web
Resolved unresolved symbols with no-hw
Compiling on Windows with no-hw was resulting in unresolved symbols in the padlock engine
Ensure that no-comp functions are flagged as such
mkdef.pl was not detecting no-comp functions This updates the header file so that mkdef.pl detects that no-comp applies and the functions are marked accordingly
Fix no-rc2 in the CMS test
The CMS test uses some RC2 keys which should be skipped if the RC2 is disabled
Mark OCB as an AEAD cipher
OCB is AEAD capable but was not marked as such with the EVP_CIPH_FLAG_AEAD_CIPHER flag
Ensure that memory allocated for the ticket is freed
If a call to EVP_DecryptUpdate fails then a memory leak could occur Ensure that the memory is freed appropriately
Issue reported by Guido Vranken
Fix a potential double free in EVP_DigestInit_ex
There is a potential double free in EVP_DigestInit_ex This is believed to be reached only as a result of programmer error - but we should fix it anyway
Issue reported by Guido Vranken
Fix build; CPP syntax error
Update EVP_CIPHER_CTX_set_padding documentation
Add note about when EVP_CIPHER_CTX_set_padding should be called
README: small fixups
Don't refer to INSTALL files that don't exist any more Make it clear that the libssl and libcrypto libraries may be named differently on different platforms
Make picker thread and combine standard config helper functions
Document them as well
Remove Netware and OS/2
Disallow --classic for Windows
With all the config changes mk1mf is broken on Windows
windows-makefile.tmpl: Stop keeping temporary files
Add install targets for Windows
On Windows we set INSTALLTOP to default as follows:
VC-WIN32:
PREFIX: %ProgramFiles(x86)%\OpenSSL OPENSSLDIR: %CommonProgramFiles(x86)%\SSL
VC-WIN64*:
PREFIX: %ProgramW6432%\OpenSSL OPENSSLDIR: %CommonProgramW6432%\SSL
Should those environment variables be missing the following is used as fallback:
PREFIX: %ProgramFiles%\OpenSSL OPENSSLDIR: %CommonProgramFiles%\SSL
Report TLS 1.0 as backwards-compatible TLSv1
The TLSv1.0 form is retained for reporting the first protocol version that supports a given cupher
Remove ultrix/mips support
Remove support for Borland C++
Borland C++ 4.5 is very old and our "support" for it is already non-existent we might as well remove it
Use correct C format for keysets.pl
Start documenting Configure internals
This is a living document everyone is encouraged to add to it Implementation details as well as broader implementation philosophy has a place here
I'm starting with documentation of the how conditions in build.info files are treated
Added build.info debugging capability to Configure
This is only enabled when the environment variable CONFIGURE_DEBUG_BUILDINFO is defined This will cause every line in every build.info file to be displayed along with the content of the skip stack before and after parsing This can be a very powerful tool to see that all conditions are working as expected
Simplify define as we don't support MS-DOS anymore
Don't define OPENSSL_ENGINES in test recipes do it in Makefiles instead
In most builds we can assume that engines live in the build tree subdirectory "engines" This was hard coded into the tests that use the engine ossltest
However that hard coding is tedious it would need to be done in every test recipe and it's an incorrect assumption in some cases
This change has us play it safe and let the build files tell the testing framework where the engines are
Have 'openssl version -a' output the default engines directory as well
Bugfix: Encode the requested length in s_cb.c:hexencode()
Sort cipher-list at runtime
Reduces #ifdef complexity
unix-Makefile template: use $(PERL) everywhere
There was one spot that had hard-coded 'perl'
Deal with DSA_SIG opaqueness
Prepare for 1.1.0-pre5-dev
Prepare for 1.1.0-pre4 release
Some platforms provide getcontext() but it does not work
Some platforms claim to be POSIX but their getcontext() implementation does not work Therefore we update the ASYNC_is_capable() function to test for this
RT#4366
When building DLLs hack the library name in the .def file
util/mkdef.pl assumes it knows what the resulting library name will be Really it shouldn't but changing it will break classic native Windows builds so we leave it for now and change the LIBRARY line externally when needed instead
DLL object files should not be built with /Zl"
When building the DLLs we depend on the correct default C RTL info
Appveyor - make sure to actually build "shared" in the shared configuration
Fix up CHANGES
- Remove duplicate entry - Add author for SSL_CIPHER query functions - Note HKDF support in CHANGES and NEWS
[ci skip]
We should use $SRCDIR in Makefiles
Normally we always refer to source files relative to $SRCDIR in Makefiles However the reference to unix-Makefile.tmpl was using a fully expanded absolute path This can cause problems for Mingw
Disable AFALG when cross-compiling
We don't currently support cross-compiling of the afalg engine However we were failing to explicitly mark it as disabled during Configure leading to a failed build
Fix a TLSProxy race condition
TLSProxy starts s_server and specifies the number of client connects it should expect After that s_server is supposed to close down automatically However if another test is then run then TLSProxy will start a new instance of s_server If the previous instance hasn't closed down yet then the new instance can fail to bind to the socket
poly1305/asm/poly1305-x86_64.pl: make it work with linux-x32
On Windows page walking is known as __chkstk
Explain *cough*-dows
Make the perl dependency post-processor into just one line
Make doesn't always treat multiline quoted strings as nicely as one would wish
Not all shells understand !
In unix-Makefile.tmpl this construction has been used a few times
if ! something; then ..
It seems though that some shells do not understand ! so these need to be changed
General verify options to openssl ts
This commit adds the general verify options of ocsp verify cms etc to the openssl timestamping app as suggested by Stephen N Henson in [openssl.org #4287] The conflicting "-policy" option of "openssl ts" has been renamed to "-tspolicy" Documentation and tests have been updated
CAVE: This will break code which currently uses the "-policy" option
Fix CRYPTO_THREAD_run_once return value checks
Cygwin configs were missing thread_scheme settings add them
Small typo
OPENSSL_INIT_ONCE and OPENSSL_INIT_ONCE_STATIC_INIT are really CRYPTO_ONCE and CRYPTO_ONCE_STATIC_INIT
static-engine is no longer an internal keyword remove it from %disabled
Clarify NOTES.WIN
Update and clarify ECDSA documentation
Disable afalg when engine is disabled
Also make it possible to disable afalg separately
we still need to update config again
Fix typo in manual missing ending '>'
Travis: build tests in BUILDONLY mode
config: fix HP-UX PA-RISC detection
s390x assembly pack: 32-bit fixups
build.info/Makefile.in: Itanium fixups
engines/Makefile.in: some [older] shell complain about 'for i ;' but not if there is reference to empty variable
Fix the init cleanup order
There are internal dependencies between the various cleanup functions This re-orders things to try and get that right
Add some missing cleanup calls to de-init
OBJ_cleanup() doesn't always get called from EVP_cleanup() so needs to be explicitly called in de-init Also BIO_sock_cleanup() also needs to be called
Fix freeze in config's interrupt trap with some shells
With bash and zsh the trap on the 5 second read does respond but doesn't break out of the read What's worse is that it takes away the 5 second timer and therefore has the read hang indefinitely and (almost) unbreakable
Having the trap do 'exit 0' after reseting the tty params has it break out of read and continue with the configuration
Other shells do not appear to have the issue described here but neither does the extra 'exit 0' appear to harm them
Enforce the demand for Perl 5.10.0 as a minimum
Fix a few Configure errors
Document X509_get_serialNumber and X509_set_serialNumber
Add EVP_PKEY documentation
Document EVP_PKEY_id() and EVP_PKEY_base_id()
Change an function macro for ERR match the function it's used in
Complete incomplete makefile variable referenses
A couple of '$(PERLASM_SCHEM' had sneaked in
Collect the names of generated files and clean them away at target clean:
Add $(LIB_CFLAGS) for any build.info generator that uses $(CFLAGS)
The reason to do so is that some of the generators detect PIC flags like -fPIC and -KPIC and those are normally delivered in LD_CFLAGS
Use single quotes rather than double quotes when needed
When passing down values to Makefile.shared do so with single quotes as much as possible to avoid having the shell create a mess of quotes
Harmonize Unix Makefile template with Windows dito
The variable SHARED_CFLAGS and SHARD_LDFLAGS were used in the Unix template because they normally contain options used when building "shared" The Windows template on the other hand uses LIB_CFLAGS to express the intended use of those flags rather than their content The Windows template still used SHARED_LDFLAGS which seems inconsistent
To harmonize the two any SHARED_CFLAGS gets renamed to LIB_CFLAGS and SHARED_LDFLAGS to LIB_LDFLAGS That makes the intent consistent along with BIN_{C,LD}FLAGS and DSO_{C,LD}FLAGS
Finally make sure to pass down $(LIB_CFLAGS) or $(DSO_CFLAGS) along with $(CFLAGS) when using Makefile.shared
Fix memory leak in library deinit
ENGINE_cleanup calls CRYPTO_free_ex_data and therefore CRYPTO_cleanup_all_ex_data - which cleans up the method pointers - must run after ENGINE_cleanup
Additionally don't needlessly initialize the EX_CALLBACKS stack during e.g CRYPTO_free_ex_data The only time this is actually needed is when reserving the first ex data index Specifically since sk_num returns -1 on NULL input the rest of the code already handles a NULL method stack correctly
Add doc on when to use SCT callback
With help from Viktor
Workaround for false -Warray-bounds in Travis
ccache + clang produces a false strcmp warning see https://llvm.org/bugs/show_bug.cgi?id=20144
Since this only happens with ccache and --strict-warnings and only with certain versions of glibc / clang disabling ccache is a reasonable short-term workaround
Fix no-comp build
Fix build break; add function declaration
When creating directory specs use srctop_dir rather than srctop_file
While insignificant on Unix like systems this is significant on systems like VMS
Avoid sed for dependency post-processing
It turns out that different sed implementations treat -i differently to cause issues make it simpler by avoiding it entirely and give perl the trust to be consistent enough
Because bn_expand2 is declared non-static it must not be static
That doesn't change even to make a dummy to hide its unavailability
Remove some dead code from 1999
Don't clobber the last error
On Windows we call WSAGetLastError() to find out the last error that happened on a socket operation We use this to find out whether we can retry the operation or not You are supposed to call this immediately however in a couple of places we logged an error first This can end up making other Windows system calls to get the thread local error state Sometimes that can clobber the error code so if you call WSAGetLastError() later on you get a spurious response and the socket operation looks like a fatal error
Really we shouldn't be logging an error anyway if its a retryable issue Otherwise we could end up with stale errors on the error queue
removed extra define
verified that build succeeds without the extra define
Fix no-blake2 for Windows classic build
Fix no-blake2 for Windows classic build
make update
Make X509_SIG opaque
Some sed implementations are not greedy enough use perl instead
The issue is demonstrated as follows:
On Linux:
$ echo ': foo.h /usr/include/stddef.h bar.h' | sed -e 's/ \/\(\\.\|[^ ]\)*//g' : foo.h bar.h
On MacOS X:
$ echo ': foo.h /usr/include/stddef.h bar.h' | sed -e 's/ \/\(\\.\|[^ ]\)*//g' : foo.husr/include/stddef.h bar.h
Perl is more consistent:
On Linux:
$ echo ': foo.h /usr/include/stddef.h bar.h' | perl -pe 's/ \/(\\.|[^ ])*//g;' : foo.h bar.h
On MacOS X:
$ echo ': foo.h /usr/include/stddef.h bar.h' | perl -pe 's/ \/(\\.|[^ ])*//g;' : foo.h bar.h
Make update to catch function renames
Use unsigned int instead of just unsigned
Save leaf_node and node_offset as character array
They are not numbers in the machine byte order
Review comments
Add blake2 support
move DSA_SIG definition into C source file
crypto/*/build.info: make it work on ARM platforms
crypto/*/build.info: SPARC-specific fixups
Configurations/unix-Makefile.tmpl: don't leave empty .s files behind
If pre-processor failed an empty .s file could be left behind which could get successfully compiled if one simply re-ran make and cause linking failures Not anymore Remove even intermediate .S in case of pre-processor failure
Configure: remove dependency on 'head'
constify CT_POLICY_EVAL_CTX getters
Surround ctx_set_ctlog_list_file() with #ifndef OPENSSL_NO_CT
Suppress CT warnings in test_ssl
Running test_ssl with HARNESS_VERBOSE results in lots of spurious warnings about an inability to load the CT config file This fixes it
Avoid getting unresolved referense to bn_expand2 in test/bntest.c
Issue identified on Solaris by Erik Forsberg <erik@efca.com>
Call CONF_modules_free() before ENGINE_cleanup() in auto-deinit
During auto de-init we were calling ENGINE_cleanup() and then later CONF_modules_free() However the latter function can end up calling engine code which can lead to a use of the global_engine_lock after it has already been freed Therefore we should swap the calling order of these two functions
Fix no-rmd160 classic Windows build
no-ripemd was unified a while ago but the change was not done in mk1mf.pl This commit changes the no-ripemd string to no-rmd160 which fixes the no-rmd160 classic build
Don't build dynamic engines unless configured "shared"
Experience has shown that dynamic engines with their own copy of libcrypto is problematic so we disable that possibility
Harmonise the two methods to generate dependency files
One of them didn't clean away .d.tmp files properly The other would overwrite the .d files unconditionally thereby causing a possibly unnecessary dependency rebuild which touches the date of Makefile which causes a possibly unnecessary rebuild of buildinf.h and everything that depends on that
More tweaks to the installation instructions
A few things were out of date and a few things were missing Also some formatting updates
Fix some assembler generating scripts for better unification
Some of these scripts would recognise an output parameter if it looks like a file path That works both in both the classic and new build schemes Some fo these scripts would only recognise it if it's a basename (i.e no directory component) Those need to be corrected as the output parameter in the new build scheme is more likely to contain a directory component than not
Add include directory options for assembler files that include from crypto/
A few were missed in the previous commit
Closes RT#4412
check reviewer --reviewer=emilia Use SSL_get_SSL_CTX instead of passing SSL_CTX to s_client.c:print_stuff
check reviewer --reviewer=emilia Pass entire CTLOG_STORE to SCT_print rather than just the SCT's CTLOG
SCT_print now looks up the correct CT log for you
check reviewer --reviewer=emilia Remove 'log' field from SCT and related accessors
In order to still have access to an SCT's CTLOG when calling SCT_print SSL_CTX_get0_ctlog_store has been added
Improved documentation for some CT functions in openssl/ssl.h
Add include directory options for assembler files that include from crypto/
Closes RT#4406
In the recipe using "makedepend" make sure the object file extension is there
Configure - don't trust $1 to stick around save its value away
Fix a memory leak in the afalg engine
The AFALG engine created a global EVP_CIPHER instance but was not freeing it up when the engine was destroyed
Harmonize the option processing in 'config' and 'config.com'
The help text for -d in 'config' was aged and the option processing in 'config.com' was just different This harmonizes 'config.com' with the instructions in INSTALL and both current reality
Add cleaning targets to Configurations/windows-makefile.tmpl
The typedef ECPARAMETERS is already defined don't define it anew
Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms
UEFI needs this too Don't keep it only in the Windows/DOS ifdef block
This is a fixed version of what was originally commit 963bb62195 and subsequently reverted in commit 37b1f8bd62 Somewhere along the way the Windows/DOS ifdef actually got removed leaving it just broken It should have been turned into an #elif not removed
This one correctly changes the logic from
# if WINDOWS|DOS # if OPENSSL_NO_SOCK .. no-sock .. # elif !DJGPP .. native windows ..
to
# if OPENSSL_NO_SOCK .. no-sock .. # elif WINDOWS|DOS # if !DJGPP .. native windows ..
Remove a missed item from the old thread API
A line from cryptlib.h was missed during the old Thread API removal This breaks no-deprecated builds
Mark SRP_VBASE_get_by_user() as deprecated
The function SRP_VBASE_get_by_user() is declared as deprecated but the implementation was not
No need to call EVP_CIPHER_CTX_init after EVP_CIPHER_CTX_new
The afalgtest was unnecessarily initing an EVP_CIPHER_CTX It is not needed and is deprecated
Pass down inclusion directories to source file generators
The source file generators sometimes use $(CC) to post-process generated source and getting the inclusion directories may be necessary at times so we pass them down
RT#4406
Travis - add missing semi-colon
Update .gitignore to ignore all cscope files
Signed-off-by: Rich Salz <rsalz@akamai.com>
remove ms/.rnd and add it to .gitignore
Signed-off-by: Rich Salz <rsalz@akamai.com>
RT3676 add: Export ASN.1 DHparams
Travis - don't use ccache with cross compiles
Although theoretically possible Configure doesn't treat CC variable set like this very well: CC="ccache i686-w64-mingw32-gcc" Also this Travis script doesn't recognise the possibility either
Avoid negative array index in BIO_debug_callback()
BIO_snprintf() can return -1 on truncation (and overflow as of commit 9cb177301fdab492e4cfef376b28339afe3ef663) Though neither can realistically occur while printing a pointer and short fixed string into a buffer of length 256 the analysis to confirm that this the case goes somewhat far up the call chain and not all static analyzers can successfully follow the chain of logic
It's easy enough to clamp the returned length to be nonnegative before continuing which appeases the static analyzer and does not harm the subsequent code
CT: check some GeneralizedTime return values
Some of the ASN.1 routines for the GeneralizedTime type can return errors; check for these and do not continue past failure so as to appease coverity
When configured "shared" don't build static libraries on Windows
The reason for this is that the static libraries and the DLL import libraries are named the same on Windows When configured "shared" the static libraries are unused anyway
Make util/mk1mf.pl recognise no-weak-ssl-ciphers
Avoid double-free in calleres to OCSP_parse_url
set pointers to NULL after OPENSSL_free before returning to caller to avoid possible double-free in caller
Signed-off-by: Rich Salz <rsalz@akamai.com>
Fix return type for CRYPTO_THREAD_run_once
return type should be int and not void
Signed-off-by: Rich Salz <rsalz@akamai.com>
Add X509_CHECK_FLAG_NEVER_CHECK_SUBJECT flag
Remove duplicate typedef of ECPKPARAMETERS in ec.h
Run make update
MR: #2296
Travis - the source directory is _srcdist not _srcdir
Correct slight logic error in processing IF in build.info
This corrects a fault where the inner IF in this example was still being acted upon:
IF[0] ...whatever.. IF[1] ...whatever more.. ENDIF ENDIF
With this change the inner IF is skipped over
When grepping something starting with a dash remember to use -e
Deprecate the use of version-specific methods
MR: #1824
Use version flexible method instead of fixed version
MR: #1824
Use minimum and maximum protocol version instead of version fixed methods
MR: #1824
Fix usage of OPENSSL_NO_*_METHOD
MR: #1824
Move disabling of RC4 for DTLS to the cipher list
MR: #1595
Remove DES cipher alias
MR: #1595
Update ciphers -s documentation
MR: #1595
Document SSL_get1_supported_ciphers
MR: #1595
IDEA is not supported in TLS 1.2
This currently seems to be the only cipher we still support that should get disabled
MR: #1595
Add support for minimum and maximum protocol version supported by a cipher
MR: #1595
Add ssl_get_client_min_max_version() function
Adjust ssl_set_client_hello_version to get both the minimum and maximum and then make ssl_set_client_hello_version use the maximum version
MR: #1595
Make SSL_CIPHER_get_version return a const char *
MR: #1595
Remove unused code
MR: #1595
Make function to convert version to string
MR: #1595
Constify security callbacks
MR: #1595
Documentation for ctx_set_ctlog_list_file()
Minor improvement to formatting of SCT output in s_client
Do not display a CT log error message if CT validation is disabled
RT3676: Expose ECgroup i2d functions
Comment away the extra checks in Configure
The "extra checks" is a debugging tool to check the config resolving mechanism It uses Perl's smart match which is experimental and therefore always causes Perl to give out a warning and it causes older Perl versions to fail entirely
So it gets commented away but stays otherwise in place as it may be useful again
Make ct_dir and certs_dir static in test/ct_test.c
Fix ct_test to not assume it's in the source directory
ct_test assumed it's run in the source directory and failed when built elsewhere It still defaults to that but can be told another story with the environment variables CT_DIR and CERTS_DIR
Test recipe updated to match
Document importance of CTLOG_STORE outliving SCT if SCT_set0_log is used
Make SCT literals into const variables in ct_test.c
Makes STACK_OF(SCT)* parameter of i2d_SCT_LIST const
Removes SCT_LIST_set_source and SCT_LIST_set0_logs
Both of these functions can easily be implemented by callers instead
Makes SCT_get0_log return const CTLOG*
Makes CTLOG_STORE_get0_log_by_id return const CTLOG*
Improved documentation of SCT_CTX_* functions
Updates ct_err.c
Remove unnecessary call to SCT_set1_extensions(sct "" 0) in ct_test.c
Reset SCT validation_status if the SCT is modified
Use SCT_VERSION_V1 in place of literal 0 in ct_test.c
Fixes "usuable" typo in ct_locl.h
Treat boolean functions as booleans
Use "!x" instead of "x <= 0" as these functions never return a negative value
Make parameters of CTLOG_get* const
Extensive application of __owur to CT functions that return a boolean
Also improves some documentation of those functions
Makes SCT_LIST_set_source return the number of successes
No longer terminates on first error but instead tries to set the source of every SCT regardless of whether an error occurs with some
Fix locking in ssl_cert_dup()
Properly check the return value of CRYPTO_THREAD_lock_new()
Signed-off-by: Rich Salz <rsalz@openssl.org>
Restore building out of source with the unified build scheme
CT test can't run without EC so skip it on that algo as well
Fix ct_test to not assume it's in the source directory
ct_test assumed it's run in the source directory and failed when built elsewhere It still defaults to that but can be told another story with the environment variables CT_DIR and CERTS_DIR
Test recipe updated to match
Update CHANGES and NEWS
Update the CHANGES and NEWS files with information about the recently added AFALG engine and pipelining
Fix classic build
The Thread API changes broke classic build This fixes it
In build.info an IF within a clause that's skipped over shouldn't apply
If we find an IF within a clause that's skipped over set it to be skipped as well
Add an entry in NEWS about the new threading API
Update CHANGES for the new threading API
Remove the old threading API
All OpenSSL code has now been transferred to use the new threading API so the old one is no longer used and can be removed We provide some compat macros for removed functions which are all no-ops
There is now no longer a need to set locking callbacks!!
Remove use of the old CRYPTO_LOCK_X5O9_STORE
The locking here is a bit strange and unclear Rather than refactor anything and possibly break stuff I have just moved to using the new thread API following as closely as possible what was there previously
Don't call ENGINE_cleanup when configured "no-engine"
Don't add engines if configured "no-engine"
Similarly don't add e_capi if configured "no-capieng"
Also indent a little deeper for clarity
Don't add afalg engine if configured "no-engine"
Also indent a little deeper for clarity
Don't check the conditions to build e_afalg if configured "no-engine"
Have Configure display the value of SHARED_CFLAG
Make sure the effect of "pic" / "no-pic" is used with assembler compilations
Before the 'Introduce the "pic" / "no-pic" config option' commit the shared_cflag value for the chosen config would be part of the make variable CFLAG which got replicated into CFLAGS and ASFLAGS
Since said commit the shared_cflag value has become a make variable of its own SHARED_CFLAG (which is left empty in a "no-pic" build)
However ASFLAGS was forgotten That's what's corrected with this change
Touch the correct variables for the system; shlib_wrap.sh on Solaris
If there is cause to think LD_LIBRARY_PATH_32 and LD_PRELOAD_32 are appropriate variables to touch do so Otherwise touch the usual LD_LIBRARY_PATH and LD_PRELOAD This covers for older installations that don't have a mix of 32-bit and 64-bit libs
Recognise 32-bit Solaris in util/shlib_wrap.sh
Submitted by Erik Forsberg <erik@efca.com>
Check gcc version to see if it supports -MM and friends
According to manuals found here: https://gcc.gnu.org/onlinedocs/ GNU C version 3 and on support the dependency generation options We therefore need to check the gcc version to see if we're going to use it or makedepend for dependency generation
Add extra include directory for includers of ppc_arch.h
crypto/evp/e_aes.c and crypto/modes/gcm128.c include ppc_arch.h which is located in crypto/ so add that as extra include directory for them
Issue reported by Jeffrey Walton <noloader@gmail.com>
Adapt INSTALL and related notes for Windows
Adapt appveyor.yml for the new unified build
Adapt the Windows makefile template to source generation
Don't run the TLSProxy based tests in native Windows
There are issues binding listening ports This may be analyzed more thoroughly later on
Unified - name native Windows shared libraries like MingW builds do
Unified - extract settings from util/pl/VC-32.pl and make the config settings
This introduces the settings loutflag and aroutflag because different Windows tools that do the same thing have different ways to specify the output file
The Borland C++ config is commented away for the monent perhaps permanently
Unified - a native Windows makefile template
ec/asm/ecp_nistz256-sparcv9.pl: get corner logic right
RT#4284
Adapt mk1mf.pl and companions to changed perlasm script semantics
Unified - adapt the generation of whirlpool assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/whrlpool/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of sha assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/sha/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of rc4 assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/rc4/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of rc5 assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/rc5/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of ripemd assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/ripemd/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of md5 assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/md5/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of modes assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/modes/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of poly1305 assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/poly1305/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of des assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/des/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of ec assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/ec/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of camellia assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/camellia/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of cast assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/cast/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of chacha assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/chacha/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Because crypto/build.info demands CFLAGS_Q descrip.mms.tmpl must deliver
Unified - adapt the generation of cpuid uplink and buildinf to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of aes assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/aes/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of blowfish assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/bf/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Convert the dynlocks in e_chil to the new Thread API locks
Remove another lock from e_chil
Always call ENGINE_cleanup() in de-init
Even if we haven't loaded an engine we might have set up the global_engine_lock so we should still clean up
Move chil engine to the new thread api
Move the chil engine to use the new thread API As I don't have access to the hardware I can't test this :-( I think its ok..
Move engine library over to using the new thread API
Remove usage of CRYPTO_LOCK_ENGINE
err_lcl.h is gone don't pretend it's there
Add missing semi
Counter mixed signedness with a cast
Fix names of the #define used for platform specific code
Add empty line after local variables
Fix error with wait set of fds for the select()
It also makes the call to select blocking to reduce CPU usage
Use correct function ID in error path
This fixes "make update"
Move variable declaration to the start of the function
Ensure CRYPTO_mem_leaks is the last thing we do
CRYPTO_mem_leaks de-inits the library so we must not do anything interesting after we've used it!
Fix memory leak in ssltest
The new Rand usage of Thread API exposed a bug in ssltest ssltest "cheats" and uses internal headers to directly call functions that normally you wouldn't be able to do This means that auto-init doesn't happen and therefore auto-deinit doesn't happen either meaning that the new rand locks don't get cleaned up properly
Convert rand code to new threading API
Replace the CRYPTO_LOCK_RAND and CRYPTO_LOCK_RAND2 locks with new thread API style locks
Adapt unix Makefile template to 'no-makedepend'
This change is a bit more complex as it involves several recipe variants
Also remove the $(CROSS_COMPILE) prefix for the makedepend program When we use the program "makedepend" this doesn't serve anything and when we use the compiler this value isn't even used
Adapt descrip.mms.tmpl to 'no-makedepend'
VMS doesn't have "makedepend" anyway so this is just a matter of using the right qualifiers when 'makedepend' is enabled
Add the configure option 'no-makedepend'
If no makedepend program or equaly capable compiler is present 'makedepend' gets disabled automatically
Fix SSL_CIPHER_get_auth_nid return
Copy/paste error between SSL_CIPHER_get_kx_nid() and SSL_CIPHER_get_auth_nid() wrong table was referenced
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fix a typo in dynamic_load()
Convert RSA blinding to new multi-threading API
Convert CRYPTO_LOCK_SSL_* to new multi-threading API
Remove the transfer of lock hooks from bind_engine
With the new threads API this is no longer needed
Engine API repair - memory management hooks
The Engine API lost the setting of memory management hooks in bind_engine Here's putting that back
EX_DATA and ERR functions need the same treatment
Redo the Unix source code generator
For assembler we want the final target to be foo.s (lowercase s) However the build.info may have lines like this (note upper case S):
GENERATE[foo.S]=foo.pl
This indicates that foo.s (lowercase s) is still to be produced but that producing it will take an extra step via $(CC) -E Therefore the following variants (simplified for display) can be generated:
GENERATE[foo.S]=foo.pl => foo.s: foo.pl $(PERL) $foo.pl $@.S; \ $(CC) $(CFLAGS) -E -P $@.S > $@ && \ rm -f $@.S
GENERATE[foo.s]=foo.pl => foo.s: foo.pl $(PERL) $foo.pl $@
GENERATE[foo.S]=foo.m4 => foo.s: foo.m4 m4 -B 8192 $foo.m4 > $@.S; \ $(CC) $(CFLAGS) -E -P $@.S > $@ && \ rm -f $@.S
GENERATE[foo.s]=foo.m4 => foo.s: foo.m4 m4 -B 8192 $foo.m4 > $@
Fix error in ssltest
Compiling ssltest with some compilers using --strict-warnings results in complaints about an unused result
Adapt e_capi to the DSA_SIG_get0() API
Convert mem_dbg and mem_sec to the new Thread API
Use new Thread API style locks and thread local storage for mem_dbg
OpenSSLDie --> OPENSSL_die
Also removed a bunch of unused define's from e_os.h
Remove the -n tar flag from osx dist creation
With the unified build scheme tar MUST recurse or the tarball will be empty
Remove some old ms/* files
Include e_os.h from ec_lcl.h
The EC code recently started using REF_PRINT_COUNT and REF_ASSERT_ISNT Those are defined in e_os.h
Fix cert leaks in s_server
Signed-off-by: Rich Salz <rsalz@openssl.org>
Reuse strndup() simplify code
Signed-off-by: Rich Salz <rsalz@openssl.org>
make update
Make DSA_SIG opaque
This adds a new accessor function DSA_SIG_get0 The customisation of DSA_SIG structure initialisation has been removed this means that the 'r' and 's' components are automatically allocated when DSA_SIG_new() is called Update documentation
Fix travis builds
Travis doesn't seem to know about 'expr'
make update
Convert CRYPTO_LOCK_X509_* to new multi-threading API
Convert CRYPTO_LOCK_UI to new multi-threading API
Convert CRYPTO_LOCK_EC_* to new multi-threading API
Convert CRYPTO_LOCK_EVP_PKEY to new multi-threading API
Convert CRYPTO_LOCK_BIO to new multi-threading API
Only enable ccache if it's available
Use ccache for the unified builds
This may speed up our builds considerably
For unified builds make a separate build directory and build there
SPARCv9 assembly pack: unify build rules and argument handling
Make all scripts produce .S make interpretation of $(CFLAGS) pre-processor's responsibility start accepting $(PERLASM_SCHEME) [$(PERLASM_SCHEME) is redundant in this case because there are no deviataions between Solaris and Linux assemblers This is purely to unify .pl->.S handling across all targets.]
Fix build; ssltest
Tweak some more information in INSTALL
The summary on how to add configs and how Makefile et al wasn't quite correct any more
GH787: Fix ALPN
* Perform ALPN after the SNI callback; the SSL_CTX may change due to that processing * Add flags to indicate that we actually sent ALPN to properly error out if unexpectedly received * clean up ssl3_free() no need to explicitly clear when doing memset * document ALPN functions
Signed-off-by: Rich Salz <rsalz@openssl.org>
Add an SSL_has_pending() function
This is similar to SSL_pending() but just returns a 1 if there is data pending in the internal OpenSSL buffers or 0 otherwise (as opposed to SSL_pending() which returns the number of bytes available) Unlike SSL_pending() this will work even if "read_ahead" is set (which is the case if you are using read pipelining or if you are doing DTLS) A 1 return value means that we have unprocessed data It does *not* necessarily indicate that there will be application data returned from a call to SSL_read() The unprocessed data may not be application data or there could be errors when we attempt to parse the records
Add an ability to set the SSL read buffer size
This capability is required for read pipelining We will only read in as many records as will fit in the read buffer (and the network can provide in one go) The bigger the buffer the more records we can process in parallel
Add cipher query functions
Add functions to determine authentication key-exchange FIPS and AEAD
Convert ERR_STRING_DATA to new multi-threading API
Convert ERR_STATE to new multi-threading API
Convert CRYPTO_LOCK_EX_DATA to new multi-threading API
Convert CRYPTO_LOCK_DSO to new multi-threading API
Convert CRYPTO_LOCK_{DH,DSA,RSA} to new multi-threading API
Convert CRYPTO_LOCK_GET*BYNAME to new multi-threading API
GH815: The ChaCha20/Poly1305 codepoints are official
CCA8 CCA9 CCAA CCAB CCAC CCAD and CCAE are now present in https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml so remove the "as per draft-ietf-tls-chacha20-poly1305-03" note accordingly
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH787: Fix ALPN
* Perform ALPN after the SNI callback; the SSL_CTX may change due to that processing * Add flags to indicate that we actually sent ALPN to properly error out if unexpectedly received * clean up ssl3_free() no need to explicitly clear when doing memset * document ALPN functions
Signed-off-by: Rich Salz <rsalz@openssl.org>
Make mk1mf recognise the --classic flag
Fix configurations such as 'dist' and tar building
For config targets such as 'dist' which doesn't have a BASE template we still need to have a default build scheme
Additionally the unified Makefile template's target 'tar' wasn't quite as flexible as the unixmake one
Finally .travis-create-release.sh can be somewhat simplified now that it builds with the unified build scheme
We've switch to unified build scheme by default reflect it in travis
We want to preserve a couple of classic builds still the quickest is to change all --unified to --classic
Fix engine/asm/e_padlock-x86.pl for newer semantics
Change the INSTALL documentation for unified builds
Because of the unified scheme building on different platforms is very similar We currently have Unix and OpenVMS on the unified scheme which means that a separate INSTALL.VMS is no longer needed
Make unified builds the default on Unix
Add the Configure option --classic to fall back on classic build schemes
Revert "unified build scheme: Try to nudge users to try the "unified" build"
This reverts commit 242ffb05a2e4aa3fc7ffc131037e077b7e242189
Fix building without multiblock support
Not all platforms support multiblock Building without it fails prior to this fix
RT#4396
Don't free NCONF obtained values
Bug reported by Michel Sales
Remove kinv/r fields from DSA structure
The kinv/r fields in the DSA structure are not used by OpenSSL internally and should not be used in general
GH812: Fix for no-ui build on Windows
Add UI to known algorithms in mkdef.pl
Signed-off-by: Rich Salz <rsalz@openssl.org>
AppVeyor: Only use the latest VS version
GH: #811
Rename the numpipes argument to ssl3_enc/tls1_enc
The numpipes argument to ssl3_enc/tls1_enc is actually the number of records passed in the array To make this clearer rename the argument to |n_recs|
Rename a function
Rename the have_whole_app_data_record_waiting() function to include the ssl3_record prefix...and make it a bit shorter
Refactor dasync cipher implementations to improve code reuse
Move out most of the boiler plate code that is common between aes128-cbc and aes128-cbc-hmac-sha1 into helper functions to improve code reuse
Move the _hidden_* static variables in dasync to be constructed in bind
The _hidden_* variables were being created on-the-fly It is better to create them once up front during bind to avoid any potential race conditions
Fix typo in SSL_pending docs
Rename EVP_CIPHER_CTX_cipher_data to EVP_CIPHER_CTX_get_cipher_data
We had the function EVP_CIPHER_CTX_cipher_data which is newly added for 1.1.0 As we now also need an EVP_CIPHER_CTX_set_cipher_data it makes more sense for the former to be called EVP_CIPHER_CTX_get_cipher_data
Fix s_server/s_client handling of the split_send_frag argument
Ensure that a value of 0 is correctly handled for the split_send_frag argument
Add documentation for the EVP_CIPHER_CTX_cipher_data functions
The new pipeline code added a new function EVP_CIPHER_CTX_set_cipher_data() Add documentation for this and the existing EVP_CIPHER_CTX_cipher_data() function
Remove the wrec record layer field
We used to use the wrec field in the record layer for keeping track of the current record that we are writing out As part of the pipelining changes this has been moved to stack allocated variables to do the same thing therefore the field is no longer needed
Update a comment
Update a comment that was out of date due to the pipelining changes
Add documentation for new s_server/s_client options
Document the new split_send_frag max_pipelines and read_buf options
Add documentation for SSL_has_pending()
A previous commit added the SSL_has_pending() function which provides a method for knowing whether OpenSSL has buffered but as yet unprocessed record data
Add pipelining documentation
Add some documentation for all of the SSL/SSL_CTX functions/ctrls for conrolling read and write pipelining
Fix erroneous fall thgrough in switch statement
Fix an erroenous fall through when setting the max_pipelines value
Ensure s_client and s_server work when read_ahead is set
Previously s_client and s_server relied on using SSL_pending() which does not take into account read_ahead For read pipelining to work read_ahead gets set automatically Therefore s_client and s_server have been converted to use SSL_has_pending() instead
Add an SSL_has_pending() function
This is similar to SSL_pending() but just returns a 1 if there is data pending in the internal OpenSSL buffers or 0 otherwise (as opposed to SSL_pending() which returns the number of bytes available) Unlike SSL_pending() this will work even if "read_ahead" is set (which is the case if you are using read pipelining or if you are doing DTLS) A 1 return value means that we have unprocessed data It does *not* necessarily indicate that there will be application data returned from a call to SSL_read() The unprocessed data may not be application data or there could be errors when we attempt to parse the records
Add an ability to set the SSL read buffer size
This capability is required for read pipelining We will only read in as many records as will fit in the read buffer (and the network can provide in one go) The bigger the buffer the more records we can process in parallel
Lazily initialise the compression buffer
With read pipelining we use multiple SSL3_RECORD structures for reading There are SSL_MAX_PIPELINES (32) of them defined (typically not all of these would be used) Each one has a 16k compression buffer allocated! This results in a significant amount of memory being consumed which most of the time is not needed This change swaps the allocation of the compression buffer to be lazy so that it is only done immediately before it is actually used
Implement read pipeline support in libssl
Read pipelining is controlled in a slightly different way than with write pipelining While reading we are constrained by the number of records that the peer (and the network) can provide to us in one go The more records we can get in one go the more opportunity we have to parallelise the processing
There are two parameters that affect this: * The number of pipelines that we are willing to process in one go This is controlled by max_pipelines (as for write pipelining) * The size of our read buffer A subsequent commit will provide an API for adjusting the size of the buffer
Another requirement for this to work is that "read_ahead" must be set The read_ahead parameter will attempt to read as much data into our read buffer as the network can provide Without this set data is read into the read buffer on demand Setting the max_pipelines parameter to a value greater than 1 will automatically also turn read_ahead on
Finally the read pipelining as currently implemented will only parallelise the processing of application data records This would only make a difference for renegotiation so is unlikely to have a significant impact
Add dummy pipeline support for aes128_cbc_hmac_sha1
Add dummy pipline support to dasync for the aes128_cbc_hmac_sha1 cipher This is treated as an AEAD cipher
Add pipeline support to s_server and s_client
Add the options min_send_frag and max_pipelines to s_server and s_client in order to control pipelining capabilities This will only have an effect if a pipeline capable cipher is used (such as the one provided by the dasync engine)
Implement write pipeline support in libssl
Use the new pipeline cipher capability to encrypt multiple records being written out all in one go Two new SSL/SSL_CTX parameters can be used to control how this works: max_pipelines and split_send_fragment
max_pipelines defines the maximum number of pipelines that can ever be used in one go for a single connection It must always be less than or equal to SSL_MAX_PIPELINES (currently defined to be 32) By default only one pipeline will be used (i.e normal non-parallel operation)
split_send_fragment defines how data is split up into pipelines The number of pipelines used will be determined by the amount of data provided to the SSL_write call divided by split_send_fragment For example if split_send_fragment is set to 2000 and max_pipelines is 4 then: SSL_write called with 0-2000 bytes == 1 pipeline used SSL_write called with 2001-4000 bytes == 2 pipelines used SSL_write called with 4001-6000 bytes == 3 pipelines used SSL_write_called with 6001+ bytes == 4 pipelines used
split_send_fragment must always be less than or equal to max_send_fragment By default it is set to be equal to max_send_fragment This will mean that the same number of records will always be created as would have been created in the non-parallel case although the data will be apportioned differently In the parallel case data will be spread equally between the pipelines
Update the dasync engine to add a pipeline cipher
Implement aes128-cbc as a pipeline capable cipher in the dasync engine As dasync is just a dummy engine it actually just performs the parallel encrypts/decrypts in serial
Add defines for pipeline capable ciphers
Add a flag to indicate that a cipher is capable of performing "pipelining" i.e multiple encrypts/decrypts in parallel Also add some new ctrls that ciphers will need to implement if they are pipeline capable
make update
Trim Travis config part 3
- Only build & test two configurations Make all the other build variants buildonly on gcc (clang on osx) - Don't build with default clang at all on linux - Only use gcc-5 and clang-3.6 for the sanitizer builds Re-running e.g CONFIG_OPTS="shared" with them seems redundant
Revert "Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms"
This reverts commit 963bb62195109fb863dc4d88c7470ce7f9af25ac
Fix pkeyutl to KDF lnks
Remove really old demo's
Elide OPENSSL_INIT_set_config_filename() for no-stdio build
Strictly speaking it isn't stdio and file access which offend me here; it's the fact that UEFI doesn't provide a strdup() function But the fact that it's pointless without file access is a good enough excuse for compiling it out
Elide DES_read_password() for no-ui build
Move declaration of X509_aux_print() out of #ifndef OPENSSL_NO_STDIO
This isn't a file access function; it's still present
Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms
UEFI needs this too Don't keep it only in the Windows/DOS ifdef block
ISSUE 43: Add BIO_sock_shutdown
This replaces SHUTDOWN/SHUTDOWN2 with BIO_closesocket
Minor update to includes and documentation for ct_test.c
Remove OPENSSL_NO_UNIT_TEST guard from ct_test.c
Use s->session->peer instead of calling SSL_get_peer_certificate(s)
Avoids modifying certificate reference count and thereby avoids locking
Lowercase name of SSL_validate_ct as it is an internal function
CT code now calls X509_free() after calling SSL_get_peer_certificate()
Without this the peer certificate would never be deleted resulting in a memory leak
Fixes memory leaks in CT code
Fix the build tree include directory for afalg engine
Make OpenSSL::Test::setup() a bit more forgiving
It was unexpected that OpenSSL::Test::setup() should be called twice by the same recipe However that may happen if a recipe combines OpenSSL::Test and OpenSSL::Test::Simple which can be a sensible thing to do Therefore we now allow it
Elide EVP_read_pw_string() and friends for no-ui
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH768: Minor grammar nits in CRYPTO_get_ex_new_index.pod
Signed-off-by: Rich Salz <rsalz@openssl.org>
Unified - adapt the generation of padlock assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in engines/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of bignum assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/bn/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - Add the build.info command OVERRIDE to avoid build file clashes
Should it be needed because the recipes within a RAW section might clash with those generated by Configure it's possible to tell it not to generate them with the use of OVERRIDES for example:
SOURCE[libfoo]=foo.c bar.c
OVERRIDES=bar.o BEGINRAW[Makefile(unix)] bar.o: bar.c $(CC) $(CFLAGS) -DSPECIAL -c -o $@ $< ENDRAW[Makefile(unix)]
Unified - Adapt the Unix and VMS templates to support GENERATE
Unified - Add the build.info command GENERATE to generate source files
In some cases one might want to generate some source files from others that's done as follows:
GENERATE[foo.s]=asm/something.pl $(CFLAGS) GENERATE[bar.s]=asm/bar.S
The value of each GENERATE line is a command line or part of it Configure places no rules on the command line except the the first item muct be the generator file It is however entirely up to the build file template to define exactly how those command lines should be handled how the output is captured and so on
Add a function to detect if we have async or not
Add the ASYNC_is_capable() function and use it in speed
GH804: Fix unused-result warnings in dasync
Signed-off-by: Rich Salz <rsalz@openssl.org>
documentation and duplicate goto statements
move ifdef statements
NIST SP800-56A co-factor ECDH KATs
Remove use of CRYPTO_LOCK_INIT in init code
Swap the use of CRYPTO_LOCK_INIT in the init code to use the new threading API mechanism for locking
Swap the init code to use the new Thread API thread locals
The init code was using its own thread local code Now we have a central API for it we should use that instead
Swap the init code to use CRYPTO_ONCE
The init code was using its own "once" implementation Now that we have the new thread API we should use that instead
make update
Update documentation
Make PKCS8_PRIV_KEY_INFO opaque
Make PKCS8_PRIV_KEY_INFO opaque Several accessor functions already exist for this structure Two new ones were added to handle attributes
The old handling of broken formats has been removed and the corresponding structures simplified
Add support to ASYNC_WAIT_CTX to speed
Remove unnecessary memset() to 0 and check for NULL before OPENSSL_free()
Fix the error with RSA and the daysnc engine in async mode
Move RSA struct in the job local struct The change is applied also to other crypto operations (e.g DSA) to make things consistent
Add support for async jobs in OpenSSL speed
Summary of the changes:
* Move the calls to the crypto operations inside wrapper functions This is required because ASYNC_start_job takes a function as an argument
* Add new function run_benchmark() that manages the jobs for all the operations In the POSIX case it uses a select() to receive the events from the engine and resume the jobs that are paused while in the WIN case it uses PeekNamedPipe()
* Add new option argument async_jobs to enable and specify the number of async jobs
Example: openssl speed -engine dasync -elapsed -async_jobs 32 rsa2048
Rework the default cipherlist
- Always prefer forward-secure handshakes - Consistently order ECDSA above RSA - Next always prefer AEADs to non-AEADs irrespective of strength - Within AEADs prefer GCM > CHACHA > CCM for a given strength - Prefer TLS v1.2 ciphers to legacy ciphers - Remove rarely used DSS IDEA SEED CAMELLIA CCM from the default list to reduce ClientHello bloat
Makefile.in: populate [PLIB_]LDFLAG even with $target{} settings
RT#4373
bn/asm/x86[_64]-mont*.pl: complement alloca with page-walking
Some OSes *cough*-dows insist on stack being "wired" to physical memory in strictly sequential manner i.e if stack allocation spans two pages then reference to farmost one can be punishable by SEGV But page walking can do good even on other OSes because it guarantees that villain thread hits the guard page before it can make damage to innocent one..
Restore some mingw builds
"no-pic" builds have in fact been green (and reasonably fast) so restore them while we figure out why tests without "no-pic" hang
perlasm/x86_64-xlate.pl: handle binary constants early
Not all assemblers of "gas" flavour handle binary constants e.g seasoned MacOS Xcode doesn't so give them a hand
Fix some clang warnings
The af_alg engine and associated test were creating warnings when compiled with clang This fixes it
Fix minor errors in the afalg test
The new afalg test should have a copyright date of 2016 Also an incorrect buffer was being sent to EVP_CipherFinal_ex when decrypting
Adding afalg test
Fix OPENSSL_INIT flags to avoid a clash
The 0x00010000L OPENSSL_INIT flag appeared twice
Misc afalg build fixes
Misc afalg build fixes as suggested by Richard Levitte for the latest Configure changes
Rework based on feedback: 1 Cleaned up eventfd handling 2 Reworked socket setup code to allow other algorithms to be added in future 3 Fixed compile errors for static build 4 Added error to error stack in all cases of ALG_PERR/ALG_ERR 5 Called afalg_aes_128_cbc() from bind() to avoid race conditions 6 Used MAX_INFLIGHT define in io_getevents system call 7 Coding style fixes
ALG: Add AFALG engine
Trim Travis config part 2
- Remove Win builds (temporarily) They're slow allowed to fail and therefore not useful as they are - Make the --unified part of the matrix build-only (This can be swapped if --unified becomes the default) - Only build 'no-engine' once don't run any tests but don't allow it to fail
Trim the Travis config
- Remove no-asm We've got to cut something and this is at least partially covered by the sanitizer builds - Remove enable-crypto-mdebug from sanitizer builds enable-crypto-mdebug has been shown to catch some static initialization bugs that the standard leak sanitizer can't so perhaps it has _some_ value; but we shouldn't let the two compete
GH616: Remove dead code
Signed-off-by: Rich Salz <rsalz@openssl.org>
No -fno-common for Darwin
When object files with common block symbols are added to static libraries on Darwin those symbols are invisible to the linker that tries to use them Our solution was to use -fno-common when compiling C source
Unfortunately there is assembler code that defines OPENSSL_ia32cap_P as a common block symbol unconditionally and in some cases there is no other definition -fno-common doesn't help in this case
However 'ranlib -c' adds common block symbols to the index of the static library which makes them visible to the linker using it and that solves the problem we've seen
The common conclusion is either use -fno-common or ranlib -c on Darwin Since we have common block symbols unconditionally choosing the method for our source is easy
New ordinal files recreated from scratch
Change names of ordinals and libs libeay => libcrypto and ssleay => libssl
Remove the old ordinals
use saner default parameters for scrypt
Thanks to Colin Percival for reporting this issue
Disable SSLv3 by default
MR: #2203
Don't mark the eNULL ciphers as non-default
They're not part of ALL so they're not part of COMPLEMENTOFDEFAULT
MR: #2202
Curve25519: fix const-initialization
Clang is permissive of this but gcc fails
Add ASN.1 ADB callback
Add support for application supplied any defined by callback An application can change the selector value if it wishes This is mainly intended for values which are only known at runtime for example dynamically created OIDs
GH784: Better variable name
Signed-off-by: Rich Salz <rsalz@openssl.org>
Make formatting consistent in apps/Makefile.in
Remove redundant semi-colons from apps/Makefile.in
Documentation for new CT s_client flags
Documentation for new SSL functions
Handle empty log name in "enable_logs" line of the CT log file
e.g "enabled_logs = foo,,bar"
Handle missing "enabled_logs" line in CT log file
If a CT log entry in CTLOG_FILE is invalid skip it and continue loading
Previously the remaining CT log entries would not be loaded Also CTLOG_STORE_load_file would return 1 even if a log entry was invalid resulting in no errors being shown
Extends s_client to allow a basic CT policy to be enabled
Change default CT log list filename to "ct_log_list.cnf"
Adds CT validation to SSL connections
Disabled by default but can be enabled by setting the ct_validation_callback on a SSL or SSL_CTX
Changes to DEFAULT curves
Change the ECC default curve list to be this in order: x25519 secp256r1 secp521r1 secp384r1 brainpoolP256r1 brainpoolP384r1 and brainpool512r1
Curve25519: avoid undefined behaviour
Appease the sanitizer: avoid left shifts of negative values
This could've been done entirely with casts to uint and back but using masks seemed slightly more readable
There are also implementation-defined signed right shifts in this code Those remain
chacha/asm/chacha-ppc.pl: fix typo
RT#4365
Don't build RC4 ciphersuites into libssl by default
RC4 based ciphersuites in libssl have been disabled by default They can be added back by building OpenSSL with the "enable-weak-ssl-ciphers" Configure option at compile time
Improved HKDF and TLS1-PRF documentation
Correction $disabled{shared} rather than $config{no_shared}
Restore the zlib / zlib-dynamic logic
The proper logic is that both zlib and zlib-dynamic are disabled by default and that enabling zlib-dynamic would enable zlib Somewhere along the way the logic got changed zlib-dynamic was enabled by default and zlib didn't get automatically enabled
This change restores the original logic
Sanity check PVK file fields
PVK files with abnormally large length or salt fields can cause an integer overflow which can result in an OOB read and heap corruption However this is an rarely used format and private key files do not normally come from untrusted sources the security implications not significant
Fix by limiting PVK length field to 100K and salt to 10K: these should be more than enough to cover any files encountered in practice
Issue reported by Guido Vranken
GH773: Possible leak on CRYPTO_THREAD_lock_new failure
Signed-off-by: Rich Salz <rsalz@akamai.com>
GH781: openssl.spec: use secure urls
Signed-off-by: Rich Salz <rsalz@akamai.com>
GH769: Reuse strndup()
Signed-off-by: Rich Salz <rsalz@akamai.com>
GH355: Implement HKDF
This patch implements the HMAC-based Extract-and-Expand Key Derivation Function (HKDF) as defined in RFC 5869
It is required to implement the QUIC and TLS 1.3 protocols (among others)
Signed-off-by: Rich Salz <rsalz@openssl.org>
Remove overzealous echoing
This construct in a Makefile is a bit overzealous:
@echo FOO @FOO
Cleaned up
Add KDF support to pkeyutl Update documentation
Clean up curve25519 build
- Remove OPENSSL_X25519_X86_64 which never worked because we don't have the assembly - Also remove OPENSSL_SMALL (which should have been OPENSSL_SMALL_FOOTPRINT) which isn't a priority at the moment
update NEWS
fix no-ec build
Refactor ClientHello extension parsing
1) Simplify code with better PACKET methods
2) Make broken SNI parsing explicit SNI was intended to be extensible to new name types but RFC 4366 defined the syntax inextensibly and OpenSSL has never parsed SNI in a way that would allow adding a new name type RFC 6066 fixed the definition but due to broken implementations being widespread it appears impossible to ever extend SNI
3) Annotate resumption behaviour OpenSSL doesn't currently handle all extensions correctly upon resumption Annotate for further clean-up
4) Send an alert on ALPN protocol mismatch
make update
add kdf.h to mkdef.pl
Add KDF error codes
make update
Generalise KDF test in evp_test.c
Convert PRF tests to use Ctrl
Add Ctrl keyword to KDF test in evp_test
Add string ctrl operations to TLS1 PRF update documentation
Use utility functions for HMAC and CMAC
EVP_PKEY_CTX utility functions
Utility functions to pass a string or hex string to EVP_PKEY_CTX_ctrl()
make errors
Handle KDF internally
Handle KDF in ECDH_compute_key instead of requiring each implementation support it This modifies the compute_key method: now it allocates and populates a buffer containing the shared secret
Document the changes in config settings
Don't copy from %target to %config so much see %config as a complement
We copied $target{cflags} $target{defines} and a few more to %config just to add to the entries Avoid doing so and let the build templates deal with combining the two
There are a few cases where we still fiddle with %target but that's acceptable
Configure - Get rid of the special thread_cflag replace with thread_scheme
The thread_cflag setting filled a double role as kinda sorta an indicator of thread scheme and as cflags Some configs also added lflags and ex_libs for multithreading regardless of if threading would be enabled or not
Instead of this add threading cflags among in the cflag setting threading lflags in the lflag setting and so on if and only if threads are enabled (which they are by default)
Also for configs where there are no special cflags for threading (the VMS configs are of that kind) this makes it possible to still clearly mention what thread scheme is used
The exact value of thread scheme is currently ignored except when it's "(unknown)" and thereby only serves as a flag to tell if we know how to build for multi-threading in a particular config Yet the currently used values are "(unknown)" "pthreads" "uithreads" (a.k.a solaris threads) and "winthreads"
Configure - get rid of the special debug_ and release_ settings
Instead make the build type ("debug" or "release") available through $config{build_type} and let the configs themselves figure out what the usual settings (such as "cflags" "lflags" and so on) should be accordingly
The benefit with this is that we can now have debug and release variants of any setting not just those Configure supports and may also involve other factors (the MSVC flags /MD[d] and /MT[d] involve both build type and whether threading is enabled or not)
Minimize copied config settings
$target{lflags} and $target{plib_flag} were copied to %config for no good reason
Configure - move the addition of the zlib / libz lib to configs
Configure had the Unix centric addition of -lz when linking with zlib is enabled which doesn't work on other platforms Therefore we move it to the BASE_unix config template and add corresponding ones in the other BASE_* config templates The Windows one is probably incomplete but that doesn't matter for the moment as mk1mf does it's own thing anyway
This required making the %withargs table global so perl snippets in the configs can use it
Configure - Rename BASE to DEFAULTS and add a few inheritable BASEs
These BASE templates are intended to hold values that are common for all configuration variants for whole families of configurations
So far three "families" are identified: Unix Windows and VMS mostly characterised by the build system they currently use
Configure - Allow CODErefs and ARRAYrefs in configuration setting arrays
This provides for more powerful lazy evaluation and buildup of the setting contents For example something like this becomes possible:
defines => [ sub { $config{thisorthat} ? "FOO" : () } ]
Any undefined result of such functions (such as 'undef' or the empty list) will be ignored
Ensure Async is deinited properly
The global thread local keys were not being deinited properly in async
Convert ASYNC code to use new Thread API
The async code uses thread local variables We should convert to using the new Thread API for doing this
Provide getters for default_passwd_cb and userdata
This patch provides getters for default_passwd_cb and userdata for SSL and SSL_CTX The getter functions are required to port Python's ssl module to OpenSSL 1.1.0
curve25519: add missing const-qualifier
Add a shared_target to the VC-common config
This has no real meaning except it gives Configure a hint that VC targets are indeed capable of producing shared objects
Configure - make the use of environment variables for overrides consistent
We allow some commands to be overriden but didn't handle that in a consistent manner
Make uplink auxiliary source separate from cpuid source
There are cases for example when configuring no-asm that the added uplink source files got in the way of the cpuid ones The best way to solve this is to separate the two
Make k25519Precomp const
MR: #2184
poly1305/asm/poly1305-*.pl: flip horizontal add and reduction
Formally only 32-bit AVX2 code path needs this but I choose to harmonize all vector code paths
RT#4346
Consistently use arm_arch.h constants in armcap assembly code
Most of the assembly uses constants from arm_arch.h but a few references to ARMV7_NEON don't Consistently use the macros everywhere
Signed-off-by: Andy Polyakov <appro@openssl.org>
remove old unused oneline name field
make errors
Add default operations to EC_METHOD
Replace overrides
Instead of overriding a default operation move default operation to a separate function which is then explicitly included in any EC_METHOD that uses it
CT policy validation
Specifies a callback that will in the future be used by the SSL code to decide whether to abort a connection on Certificate Transparency grounds
Fix -pkeyopt and fix error check
RT4347: Fix GCC unused-value warnings with HOST_c2l()
The HOST_c2l() macro assigns the value to the specified variable but also evaluates to the same value Which we ignore triggering a warning
To fix this just cast it to void like we did in commit 08e553644 ("Fix some clang warnings.") for a bunch of other instances
Signed-off-by: Rich Salz <rsalz@openssl.org>
Move macros for reading/writing integers into ct_locl.h
Addresses review comments from richsalz
Fixes potential double free and memory leak in ct_b64.c
Verify SCT signatures
Tests included in future commit which adds CT policy validation
Updates to CHANGES and NEWS for 1.0.2 and 1.0.1 release
bn/asm/x86_64-mont5.pl: unify gather procedure in hardly used path and reorganize/harmonize post-conditions
Additional hardening following on from CVE-2016-0702
crypto/bn/x86_64-mont5.pl: constant-time gather procedure
At the same time remove miniscule bias in final subtraction Performance penalty varies from platform to platform and even with key length For rsa2048 sign it was observed to be 4% for Sandy Bridge and 7% on Broadwell
CVE-2016-0702
bn/asm/rsaz-avx2.pl: constant-time gather procedure
Performance penalty is 2%
CVE-2016-0702
bn/asm/rsax-x86_64.pl: constant-time gather procedure
Performance penalty is 2% on Linux and 5% on Windows
CVE-2016-0702
bn/bn_exp.c: constant-time MOD_EXP_CTIME_COPY_FROM_PREBUF
Performance penalty varies from platform to platform and even key length For rsa2048 sign it was observed to reach almost 10%
CVE-2016-0702
Unified - have configdata.pm depend on a few more things
GH762: Reuse strdup()
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH764: s_server: trace option fall through
in s_server cmd: specifying -trace option falls through and turn-on security_debug
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH758: e_dasync_err.h: honor no-filenames option
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fix BN_hex2bn/BN_dec2bn NULL ptr/heap corruption
In the BN_hex2bn function the number of hex digits is calculated using an int value |i| Later |bn_expand| is called with a value of |i * 4| For large values of |i| this can result in |bn_expand| not allocating any memory because |i * 4| is negative This leaves ret->d as NULL leading to a subsequent NULL ptr deref For very large values of |i| the calculation |i * 4| could be a positive value smaller than |i| In this case memory is allocated to ret->d but it is insufficiently sized leading to heap corruption A similar issue exists in BN_dec2bn
This could have security consequences if BN_hex2bn/BN_dec2bn is ever called by user applications with very large untrusted hex/dec data This is anticipated to be a rare occurrence
All OpenSSL internal usage of this function uses data that is not expected to be untrusted e.g config file data or application command line arguments If user developed applications generate config file data based on untrusted data then it is possible that this could also lead to security consequences This is also anticipated to be a rare
Issue reported by Guido Vranken
CVE-2016-0797
remove unused variables
Fix use before init warnings in asynctest
If the tests fail early before an ASYNC_WAIT_CTX is created then there can be a use before init problem in asynctest
Clarify ASYNC_WAIT_CTX_clear_fd() docs
Clarify that the "cleanup" routing does not get called if you invoke ASYNC_WAIT_CTX_clear_fd() directly
Refactor the async wait fd logic
Implementation experience has shown that the original plan for async wait fds was too simplistic Originally the async logic created a pipe internally and user/engine code could then get access to it via API calls It is more flexible if the engine is able to create its own fd and provide it to the async code
Another issue is that there can be a lot of churn in the fd value within the context of (say) a single SSL connection leading to continually adding and removing fds from (say) epoll It is better if we can provide some stability of the fd value across a whole SSL connection This is problematic because an engine has no concept of an SSL connection
This commit refactors things to introduce an ASYNC_WAIT_CTX which acts as a proxy for an SSL connection down at the engine layer
Workaround for VisualStudio 2015 bug
VisualStudio 2015 has a bug where an internal compiler error was occurring By reordering the DEFINE_STACK_OF declarations for SSL_CIPHER and SSL_COMP until after the ssl3.h include everything seems ok again
Add forgotten change of check of disabled-dynamic-engine
Add CHANGES entry for X25519
make update
Remove unused code
Change BORINGSSL defines to OPENSSL
Initial adaptations for Curve25519 code
Fix "mixed declarations and code" warnings Use OpenSSL headers
Place under OpenSSL license
Add X25519 code from BoringSSL
TLS support for X25519
Add X25519 to TLS supported curve list Reject attempts to configure keys which cannot be used for signing
add ecdhx25519 option to speed
skip inappropriate X25519 tests
Add X25519 test vectors from RFC7748 6.1 Check sign/verify blocked with X25519
Add X25519 curve to list
Add no signing flag
Add a flag to EC_METHOD for curves which do not support signing New function EC_KEY_can_sign() returns 1 is key can be used for signing Return an explicit error is an attempt is made to sign with no signing curves
Add new EC_METHOD for X25519
Add group_order_bits to EC_METHOD
Add custom_data field for EC_POINT EC_KEY
In some cases the EC_POINT and EC_KEY BIGNUM components are suboptimal or inappropriate Add an "custom_data" field which curves can populate with a custom structure to suit their needs
Extract compression form in EC_KEY_oct2key()
Extract compression form in EC_KEY_oct2key() instead of manually in the ASN.1 code For custom curves do not assume the initial octet is the compression form: it isn't for X25519 et al
Extended EC_METHOD customisation support
Add support for optional overrides of various private key operations in EC_METHOD
EC_METHOD customisation operations
Extend EC_METHOD to permit additional customisation of private key and ECDH operations
Rename OIDs
Use standard X25519 and X448 names for OIDs Delete EdDSA OIDs: for now they wont be used and EdDSA may use a different format
GH715: Missed some null-check-removals follow commits 412bafdcf5 and 7c96dbcdab
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fix mk1mf build
Removing certs broke the mk1mf build
GH715: Missed some null-check-removals
RT4351: Update doc for OPENSSL_cleanse
VMS - don't exit out of a MMS recipe
Exiting out of a recipe more than necessary leaves an ugly message
Make generation of dependency files more efficient when possible
When building with GNU C clang or VMS C it's more efficient to generate dependency file and object file in one call rather than two Have the dependency output in a temporary file and compare it with the previous one if available to see if replacement is waranted thereby avoiding unnecessary reconstruction of Makefile / descrip.mms
Github issue #750
RT4354: Add some cross-refs
Stack Overflow has a number of questions related to mutual authentication the client and its certificate Those visiting the man pages for functions like SSL_CTX_use_certificate and SSL_CTX_load_verify_locations don't receive the benefit of a cross reference to SSL_CTX_set_client_CA_list
using macro inside the case
fix build with no-srtp
- srtp_profiles variable is defined when building with SRTP keeping the variable usage also under ifndef OPENSSL_NO_SRTP - alpn help option was kept under ifndef OPENSSL_NO_SRTP
ct_test.c doesn't need to include from source top only testutil.c does
The INCLUDE statement can handle setting extra include directories for individual object files let's use it
Remove last remains of old config strings
modes/asm/ghash-x86_64.pl: refine GNU assembler version detection
Even though AVX support was added in GAS 2.19 vpclmulqdq was apparently added in 2.20
chacha/asm/chacha-*.pl: fix typos in tail processing
RT#4323
Reformat and update EC_KEY_new manual page
Add some missing parentheses and reformat
Document EC_KEY_oct2key() EC_KEY_key2buf() EC_KEY_oct2priv() EC_KEY_priv2oct() and EC_KEY_priv2buf()
RT2275: use BIO_sock_nbio()
Now that BIO_sock_nbio is available use it in the apps
Remove some old files
I read the PROBLEMS and they're outdated; nothing I'd put in the online FAQ for example Test-builds work without using these files Had to remove the rehash.time stuff from Makefile.in
Keep a cache of files that already have a recipe in common.tmpl
We don't want recipes for the same files generated more than once
FreeBSD at least can restrict symbols in a shared library - so use the Linux target that does that
testutil.c includes e_os.h
GH753: More spelling fix
Signed-off-by: Rich Salz <rsalz@akamai.com>
Apply default after having checked the given config target is valid
Drop support for printing SSLv2 ciphers names
MR: #2083
Update and clarify EC_POINT documentation
Reformat EC_POINT_new.pod and add parentheses to function names Clarify the octet form Add documentation for EC_POINT_oct2buf()
Remove Ubsec engine
The ubsec engine is now considered obsolete and therefore has been removed
Moves SCT struct typedef into ossl_typ.h
Fix for potential deferencing of null pointer in o2i_SCT_signature
Public API for Certificate Transparency
GH752 ct_test uses testutil so include that
Signed-off-by: Rich Salz <rsalz@openssl.org>
Revert "EC_KEY_priv2buf (): check parameter sanity"
This reverts commit acae59bb29ddc769743ab4a8ae373b5ff2f42b57
Don't build sanitizer builds with --debug
They're too slow
Fix master compile error
Remove comments saying you must do 'make -f Makefile.in TABLE'
Since the configs were remade into hash tables this isn't needed any more
Make the table entry printer in Configure aware of ARRAYs
GH680: Reuse strnlen() in strndup()
Signed-off-by: Rich Salz <rsalz@openssl.org>
EC_KEY_priv2buf (): check parameter sanity
In EC_KEY_priv2buf() check for pbuf sanity If invoked with NULL gracefully returns the key length
Signed-off-by: Rich Salz <rsalz@openssl.org>
check with NULL
explicit check for NULL
Check method before access and release ctx in error paths
- In error paths EVP_MD_CTX allocated by the callee is not released - Checking method before accessing
RT4335: Fix UEFI build of OBJ_NAME_new_index()
We are using strcmp() as the cmp_func where in the EDK2 environment strcmp actually ends up being the external AsciiStrCmp() function — an EFI library function defined with the Microsoft ABI
This means that we can't just assign function pointers to it since in GCC-hosted builds the ABI of any function *not* explicitly marked EFIAPI is the native SysV ABI
Arguably this stupidity ought to be resolved on the UEFI side but in the general case that would mean that we need to provide ABI-compatible wrappers for *all* the "standard" functions just in case they're used like this
And in fact we already have a workaround here for DEC C So instead of playing games with casting function pointers it's nicer just to use a simple function to wrap the strcmp() call That cleans up the DEC C workaround *and* it works around the UEFI bogosity at the same time
Signed-off-by: Rich Salz <rsalz@openssl.org>
Forgotten change of add() call in Configure
Fix a mkdef.pl warning
mkdef.pl was issuing the following error:
Use of uninitialized value within %tag in numeric eq (==) at util/mkdef.pl line 560 <IN> line 92
This was because it was treating a __cplusplus "#ifdef" check as a "tag" but then skipping over the corresponding "#endif" Therefore after processing a file it still had "left over" tags from processing the previous file It was also getting confused by "#if" checks that didn't match is pre-defined styles
Unified on VMS - add %disabled in vmsconfig.pm (util/dofile.pl demands it)
Normalise the include directives in ct_test.c
build.info needed a slight update one more include directory
Implement new multi-threading API
Configure - neater looking add() and add_before()
They now default to " " as separator but that can be overridden by having a hash with parameters as last argument The only currently recognised parameter is `separator'
The special separator `undef' will force the result to become a list rather than a concatenated string
Update test build/run for unified
Fix memory issues in BIO_*printf functions
The internal |fmtstr| function used in processing a "%s" format string in the BIO_*printf functions could overflow while calculating the length of a string and cause an OOB read when printing very long strings
Additionally the internal |doapr_outch| function can attempt to write to an OOB memory location (at an offset from the NULL pointer) in the event of a memory allocation failure In 1.0.2 and below this could be caused where the size of a buffer to be allocated is greater than INT_MAX E.g this could be in processing a very long "%s" format string Memory leaks can also occur
These issues will only occur on certain platforms where sizeof(size_t) > sizeof(int) E.g many 64 bit systems The first issue may mask the second issue dependent on compiler behaviour
These problems could enable attacks where large amounts of untrusted data is passed to the BIO_*printf functions If applications use these functions in this way then they could be vulnerable OpenSSL itself uses these functions when printing out human-readable dumps of ASN.1 data Therefore applications that print this data could be vulnerable if the data is from untrusted sources OpenSSL command line applications could also be vulnerable where they print out ASN.1 data or if untrusted data is passed as command line arguments
Libssl is not considered directly vulnerable Additionally certificates etc received via remote connections via libssl are also unlikely to be able to trigger these issues because of message size limits enforced within libssl
CVE-2016-0799
Issue reported by Guido Vranken
fix "no-engine" build of test fixture
Add some 'no-engine' builds to travis for test
GH715: ENGINE_finish can take NULL
Simplifies calling code Also fixed up any !ptr tests that were nearby turning them into NULL tests
Fix unified build after CT reorg
Tests for parsing and printing certificates containing SCTs
Add more CT utility routines to be used as part of larger patch
GH463: Fix OPENSSL_NO_OCSP build
Fixes github issue 463 Building the app without OPENSSL_NO_SOCK isn't supported so only do OPENSSL_NO_OCSP
Fix indents
Build fix: remove cleanse_ctr
RT4116: Change cleanse to just memset
See also the discussion in https://github.com/openssl/openssl/pull/455
CVE-2016-0798: avoid memory leak in SRP
The SRP user database lookup method SRP_VBASE_get_by_user had confusing memory management semantics; the returned pointer was sometimes newly allocated and sometimes owned by the callee The calling code has no way of distinguishing these two cases
Specifically SRP servers that configure a secret seed to hide valid login information are vulnerable to a memory leak: an attacker connecting with an invalid username can cause a memory leak of around 300 bytes per connection
Servers that do not configure SRP or configure SRP but do not configure a seed are not vulnerable
In Apache the seed directive is known as SSLSRPUnknownUserSeed
To mitigate the memory leak the seed handling in SRP_VBASE_get_by_user is now disabled even if the user has configured a seed
Applications are advised to migrate to SRP_VBASE_get1_by_user However note that OpenSSL makes no strong guarantees about the indistinguishability of valid and invalid logins In particular computations are currently not carried out in constant time
Solaris DSOs were still named libFOO.so fixed
Make it possible to build even if dependency files can't be generated
If the local system doesn't have GNU C or clang and not even makedepend the build will stop because the call of 'makedepend' fails This changes so the build won't stop because of such failure The result will be empty .d files and that's ok
GH742: keep gost specific variable under macro
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH235: Set error status on malloc failure
GH480: Don't break statements with CPP stuff
This is also RT 4137
Signed-off-by: Rich Salz <rsalz@akamai.com>
Fix typo reformat comment
Remove unused parameter in ssl_set_masks()
The ssl_set_masks() function no longer depends on the cipher This also means there is no need to set the masks for each cipher in ssl3_choose_cipher
Update documentation of SSL METHODs and ciphers
correct name of GNU shared libraries
test/ectest.c: add regression test for RT#4284
ec/asm/ecp_nistz256-*.pl: get corner case logic right
RT#4284
ec/asm/ecp_nistz256-x86_64.pl: get corner case logic right
RT#4284
test/recipes/80-test_ca.t: remove_tree->rmtree to make it work with Perl 5.10
poly1305/asm/poly1305-armv4.pl: replace ambiguous instruction
Different assembler versions disagree on how to interpret #-1 as argument to vmov.i64 as 0xffffffffffffffff or 0x00000000ffffffff So replace it with something they can't disagree on
RT4339: Fix handling of <internal/bn_conf.h>
The entire contents of <internal/bn_conf.h> are unwanted in the UEFI build because we have to do it differently there To support building for both 32-bit and 64-bit platforms without re-running the OpenSSL Configure script the EDK2 environment defines THIRTY_TWO_BIT or SIXTY_FOUR_BIT for itself according to the target platform
The current setup is broken though It checks for OPENSSL_SYS_UEFI but before it's actually defined since opensslconf.h hasn't yet been included
Let's fix that by including opensslconf.h And also let's move the bn_conf.h doesn't even need to *exist* in the UEFI build environment
This is also GH PR736
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH735: remove unnecessary allocation
Removing code where memory was getting allocated for an unused variable
Signed-off-by: Rich Salz <rsalz@openssl.org>
Add PKCS7_NO_DUAL_CONTENT flag
Signed-off-by: Rich Salz <rsalz@openssl.org>
Remove all -march= from configs
These flags are limitting needlessly are often patched by packagers and should be specified on the configuration command line by anyone who desires for it to be specific rather than forced by us
This work was already done with mingw when those configs were worked on now it gets applied to the remaining configs
Add OPENSSL_PIC back
In the earlier change where static libraries get built with position independent code OPENSSL_PIC was removed by mistake This adds it back
Remove unused parameters from internal functions
Use $disabled{shared} in a safer manner
The build files use %disabled make sure to pass it to them
MemorySanitizer: address false positive
Explicitly unpoison the result of FD_ZERO
Tests now pass using -fsanitize=memory
GH678: Add a few more zalloc
Remove some duplicated NULL/zero init
Signed-off-by: Rich Salz <rsalz@openssl.org>
RT4334: Check UEFI before __STDC_VERSION__ for <inttypes.h>
Adding -nostdinc to the EDK2 showed that we were including <inttypes.h> for some UEFI builds because the check for __STDC_VERSION__ happens before the check for OPENSSL_SYS_UEFI Fix that
Signed-off-by: Rich Salz <rsalz@openssl.org>
Partial revert of 1288f26 and fix for no-async
The commit 1288f26 says that it fixes no-async but instead seems to break it Therefore revert that change and fix no-async
RT4309: Define PRIu64 for UEFI build
Provide an appropriate definition of PRIu64 for the EDK2 build since we don't have <inttypes.h> there
Signed-off-by: Rich Salz <rsalz@openssl.org>
RT4320/GH705: Fix PEM parsing bug
Also removing confusing pointer-alias variable
GH721: Duplicated flags in doc
Clean away $no_dso since with have $disabled{dso}
Clean away $no_asm since with have $disabled{asm}
Clean away $no_rfc3779 since we don't appear to use it at all
Clean away $zlib since with have $disabled{zlib}
Clean away $no_threads since we have $disabled{threads}
Clean away $config{no_shared} since we have $disabled{shared}
Expose %disables to the perl fragments in build.info files
This way we can use them as conditions instead of relying to more or less obscure aliases in %config or variables directly in Configure
Fix DSO name on HP/UX
If dlfcn is used the name was set to lib$(LIBNAME).so when it should have been just $(LIBNAME).so
Fix a few typos
Missed an experimental
Don't include all symbols from static libraries when building a DSO
When building a DSO there's no reason to include all symbols from static libraries it happens to link with whichever they may be
Get back "ssl2" as a deprecated disablable option
Preserved for now for those who have scripts with the option "no-ssl2" We warn that it's deprecated and ignore it otherwise
In response to RT#4330
Add a "no-pic" build for Travis
Rewrite CHANGES to add some commentary about the "pic" option
Introduce the "pic" / "no-pic" config option
Building shared libraries or not is not the same as building position independent code or not It's true that if you don't build PIC you can't build shared libraries However you may very well want to build only static libraries but still want PIC code
Therefore we introduce a new configuration option "pic" which is enabled by default or explicitely with "enable-pic" or disabled with "no-pic" or "disable-pic" Of course if "pic" is disabled "shared" and "dynamic-engine" are automatically disabled as well
Use $disabled{"dynamic-engine"} internally
We were kinda sorta using a mix of $disabled{"static-engine" and $disabled{"dynamic-engine"} in Configure Let's avoid confusion choose one of them and stick to it
Fix incorrect SO name on GNU platforms
An error was introduced with the setting of SHLIB in DO_GNU_SO A common DO_GNU_SO_COMMON that both DO_GNU_SO and DO_GNU_SO_NOCALC use makes things clearer
Don't use 'parent' in util/dofile.pl
Because we're requiring Perl 5.10.0 and the 'parent' didn't appear before Perl 5.10.1 we need to resort to the older parent module declaration style modifying @ISA
Check that any dependency file is newer than Makefile before concatenating
On slower file systems this makes a huge difference
Document the last configuration changes
Avoid GNU make re-exec when adding dependencies to Makefile
GNU make will re-exec if (it thinks that) the Makefile has changed Just having the target Makefile seems to make it think it has so we end up in a look where GNU make re-execs for ever
The fix is easy just remove the Makefile target and have the depend target run the recipe on its own instead of depending on Makefile
Work-around for proxy->s_server retry logic
Remove OBJ_EXT and friends
Missing extension on dependency .d file is not always made (e.g when input is a .s)
Unified on VMS - install dynamic engines if there are any
Don't check for no_shared
Run the TLSProxy based tests as long as dynamic engines are built
They depend on this feature because they use the engine ossltest which is only available as a dynamic engine
Build dynamic engines even if configured "no-shared"
Until now the engines in engines/ were only built as dynamicaly loadable ones if shared libraries were built
We not dissociate the two and can build dynamicaly loadable engines even if we only build static libcrypto and libssl This is controlled with the option (enable|disable|no)-static-engine defaulting to no-static-engine
Note that the engines in crypto/engine/ (dynamic and cryptodev) will always be built into libcrypto
Always build library object files with shared library cflags
This takes us away from the idea that we know exactly how our static libraries are going to get used Instead we make them available to build shareable things with be it other shared libraries or DSOs
On the other hand we also have greater control of when the shared library cflags They will never be used with object files meant got binaries such as apps/openssl or test/test*
With unified we take this a bit further and prepare for having to deal with extra cflags specifically to be used with DSOs (dynamic engines) libraries and binaries (applications)
Make crypto/buildinf.h depend on configdata.pm rather than Makefile
Depending on Makefile meant that a new attempt to rebuild the Makefile with "new" dependency data was done all the time uncontrolled Better to depend on configdata.pm which truly only changes with reconfiguration
argv was set but unused
Also gives an error message when you gave it a parameter it didn't expect
MR: #2009
apps_extra_src changed name to apps_aux_src rename everywhere
One spot was forgotten
VMS static libraries have the extension .OLB not .LIB
Object LiBrary
Unified 'make depend' has to cleanup after itself
It failed to remove lingering Makefile.new
Fix Configurations/unix-Makefile.tmpl
It was turning off output again in two place where it should have turned it on
Makefile.shared: limit .dll image base pinning to FIPS builds
Remove DSA negative integer workaround code
Remove DSA private key code which tolerates broken implementations which use negative integers
Remove broken DSA private key workarounds
Remove old code that handled various invalid DSA formats in ancient software
This also fixes a double free bug when parsing malformed DSA private keys
Thanks to Adam Langley (Google/BoringSSL) for discovering this bug using libFuzzer
CVE-2016-0705
TLS: reject duplicate extensions
Adapted from BoringSSL Added a test
The extension parsing code is already attempting to already handle this for some individual extensions but it is doing so inconsistently Duplicate efforts in individual extension parsing will be cleaned up in a follow-up
getaddrinfo: zero the hints structure
This silences the memory sanitizer All fields were already correctly initialized but the struct padding wasn't causing an uninitialized read warning
GH712: Missed some no-filenames cases
crypto.h: honor no-filenames config setting in missing cases
Signed-off-by: Rich Salz <rsalz@akamai.com>
Make sure the linked programs have the correct extension
Big rename fest of MingW shared libraries
So far MingW shared libraries were named like this
libeay32.dll + libeay32.dll.a ssleay32.dll + ssleay32.dll.a
That naming scheme is antiquated a reminicense of SSLeay We're therefore changing the scheme to something that's more like the rest of OpenSSL
There are two factors to remember:
- Windows libraries have no recorded SOvers which means that the shared library version must be encoded in the name According to some it's unwise to encode extra periods in a Windows file name so we convert version number periods to underscores - MingW has multilib ability However DLLs need to reside with the binaries that use them so to allow both 32-bit and 64-bit DLLs to reside in the same place we add '-x64' in the name of the 64-bit ones
The resulting name scheme (for SOver 1.1) is this:
on x86: libcrypto-1_1.dll + libcrypto.dll.a libssl-1_1.dll + libssl.dll.a
on x86_64: libcrypto-1_1-x64.dll + libcrypto.dll.a libssl-1_1-x64.dll + libssl.dll.a
An observation is that the import lib is the same for both architectures Not to worry though as they will be installed in PREFIX/lib/ for x86 and PREFIX/lib64/ for x86_64
As a side effect MingW got its own targets in Makefile.shared link_dso.mingw-shared and link_app.mingw-shared are aliases for the corresponding cygwin-shared targets link_shlib.mingw-shared is however a target separated from the cygwin one
Misc small fixes
Better libclean that removes the exact files that have been built nothing more and nothing less
Corrected typo
A couple of editorial changes
Try removing installation directories after having uninstalled files
Of course if there are remaining files in a directory it won't be removed
Small rename fest in unified obj2dynlib -> obj2dso
Since we're using the acronym DSO everywhere else and that's a common name for that kind of object we might as well do so here as well
Remake the installation of shared libraries in unix-Makefile.tmpl
Instead of having the installation recipe rely on special knowledge feed it with information including what shared library files belong together For Cygwin and Mingw that's the .dll and its import library .dll.a For Unixen it's the shared library file name with SO version and the one without
Big rename fest of engine DSO names from libFOO.so to FOO.so
The engine DSOs were named as if they were shared libraries and could end up having all sorts of fancy names:
Cygwin: cygFOO.dll Mingw: FOOeay32.dll Unix: libFOO.so / libFOO.sl / libFOO.dylib / ..
This may be confusing since they look like libraries one should link with at link time when they're just DSOs
It's therefore time to rename them and do it consistently on all platforms:
Cygwin & Mingw: FOO.dll Unix: FOO.{so,sl,dylib,...}
Interestingly enough the MSVC and VMS builds always did it this way
Simplify the generation of ld scripts for Linux and Solaris
Because we know for certain that the link_shlib targets are used exclusively for shared libraries (libcrypto and libssl) and that they must have an associated .num file we don't need to check the library name to produce an ld script Just do it unconditionally
link_shlib.linux-shared can be simplified further as most of it is exactly the same as $(DO_GNU_SO) with just one variable modification
Big rename fest in makefile.shared: link_a / link_o -> link_shlib / link_dso
Originally the Makefile.shared targets described what they used as input for a shared object be it a shared library or a DSO It turned out however that the link_o targets were used exclusively for engines and the link_a targets were for libcrypto and libssl
This rename fest turns and indication on the kind of input the targets get to the intention with using them
Centralise the shared library / dso name info in unix-Makefile.tmpl
Let Configure figure out the diverse shared library and DSO extensions
Then it can pass around the information where it belongs The Makefile templates pick it up along with other target data the DSO module gets to pick up the information through crypto/include/internal/dso_conf.h
VMS fixed in unified build
- install_sw had a display of text that belongs under the install target - previous layout installed architecture dependent files in dev:['prefix'.'arch'.LIB] dev:['prefix'.'arch'.EXE] and dev:['prefix'.'arch'.ENGINES] Changed to dev:['prefix'.LIB.'arch'] dev:['prefix'.EXE.'arch'] and dev:['prefix'.ENGINES.'arch'] instead
Unified - don't install the ossltest engine
This is done with a simple file name comparison We could think of something more elegant in the future
Unified - do a better job when uninstalling
Some directories weren't removed
Rethink the uplink / applink story
Adding uplink and applink to some builds was done by "magic" the configuration for "mingw" only had a macro definition the Configure would react to its presence by adding the uplink source files to cpuid_asm_src and crypto/build.info inherited dance to get it compiled and Makefile.shared made sure applink.o would be appropriately linked in That was a lot under the hood
To replace this we create a few template configurations in Configurations/00-base-templates.conf inherit one of them in the "mingw" configuration the rest is just about refering to the $target{apps_aux_src} / $target{apps_obj} in the right places
VMS: rather use a quick file comparison than DIFF
VMS DIFF tries to calculate all the differences which is slower than just reading the files and stopping at the first difference The latter doesn't exist as a command so the problem is solved with perl and File::Compare (has been in core perl since very early version 5)
VMS: produce dependency files just like you produce object files
We need to do the same dance as when object files are created
Fix casing on VMS
DCL may be in extended parsing style which makes it less case insensitive so when removing a string from another make sure to get casing correctly
Don't use config.timestamp we already have configdata.pm
The benefit with using configdata.pm is that Configure writes it for us
Automatic 'make depend' for the unified build scheme
This isn't the fully featured combination of compiler generated dependency files and Makefile include directives but a cheaper variant of the same
The dependency files are generated automatically but then we have the usual "depend" target However we depend on it in the bigger phony targets that are the most likely to be used That make this feature automatic enough
A side effect is that we can't use the build file's timestamp to check if reconfiguring might be in order In its place we use a flag file that depends on Configure and the build file template and depend on it in spots where it makes sense to check for the need to reconfigure
Fix uninstall_sw for the unixmake scheme
The uninstall_sw target tried to 'make uninstall' in all subdirs Change it to only go into $(INSTALL_SUBS) just like install_sw does
Set EXE_EXT environment variable when testing
When cross compiling we may end up with someting like apps/openssl.exe and a number of test/*.exe However util/shlib_wrap.sh doesn't know what the executable extension should be if any so we need to make sure it has access to that information when testing since OpenSSL::Test uses that script to execute all programs
Remove all special make depend flags as well as OPENSSL_DOING_MAKEDEPEND
All those flags existed because we had all the dependencies versioned in the repository and wanted to have it be consistent no matter what the local configuration was Now that the dependencies are gone from the versioned Makefile.ins it makes much more sense to use the exact same flags as when compiling the object files
Don't treat .d (depend) files separately from object files
.d (.MMS in the VMS world) files with just dependencies are built from exactly the same conditions as the object files Therefore the rules for them can be built at the same time as the rules for the corresponding object files
This removes the requirement for a src2dep function in the build file templates and for common.tmpl to call it In the end the existence of depend files is entirely up to the build file
Fix the makedepend constructor in unix-Makefile.tmpl
Fix {TLS,CIPHER}_DEBUG compiles
documentation: RSA_new_method argument
Remove outdated DEBUG flags
Add -DBIO_DEBUG to --strict-warnings Remove comments about outdated debugging ifdef guards Remove md_rand ifdef guarding an assert; it doesn't seem used Remove the conf guards in conf_api since we use OPENSSL_assert not assert For pkcs12 stuff put OPENSSL_ in front of the macro name Merge TLS_DEBUG into SSL_DEBUG Various things just turned on/off asserts mainly for checking non-NULL arguments which is now removed: camellia bn_ctx crypto/modes Remove some old debug code that basically just printed things to stderr: DEBUG_PRINT_UNKNOWN_CIPHERSUITES DEBUG_ZLIB OPENSSL_RI_DEBUG RL_DEBUG RSA_DEBUG SCRYPT_DEBUG Remove OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL
remove redundant opt* declarations
Fix typo in SSL_CTX_set_msg_callback docs
Change `SSL_get_msg_callback_arg` to `SSL_set_msg_callback_arg`
Signed-off-by: Rich Salz <rsalz@akamai.com>
GH681: More command help cleanup
enc: - typo in -base64 option - missing help opt text ocsp req rsautl s_client: - missing help opt text
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fix windows thread stop code
The windows thread stop code was erroneously not just deleting the thread local variable on thread stop but also deleting the thread local *key* (thus removing thread local data for *all* threads in one go!)
Fix OPENSSL_config with NULL parameter
Fix memory leaks in tls_decrypt_ticket
Certain code paths in tls_decrypt_ticket could return early without first freeing the HMAC_CTX or the EVP_CIPHER_CTX
GH706: Use NULL for pointer compare
As handshake_func is a function pointer it should compare to NULL
Signed-off-by: Rich Salz <rsalz@openssl.org>
typo
Remove "experimental" in code and comments too
Thanks to Viktor for additional review
In the unified scheme there is no $(TOP) use $(SRCDIR) instead
Fix spelling
Fix spelling
Add -lresolv to the Solaris ex_libs
The reason is that we use hstrerror() and other resolver functions
Reporter: Erik Forsberg <erik@efca.com>
Finish 02f7114a7fbb3f3ac171bae87be8c13bc69e4005
Get conditional priorities right
"or" has lower priority than "||" and works better to have Perl less confused
Be more verbose when debugging is on
It's near impossible to figure out what goes wrong with the execution of sub-commands otherwise
RT3628: Allow filenames to be eliminated from compiled library
Although I explicitly don't care about the tinfoil-hat reason given in the initial opening of RT#3628 that "paths usually contain private information" there *are* situations where it's useful to eliminate the filenames from the compiled binary
The two reasons we do care about in the context of firmware such as EDK2 are that it allows for a smaller footprint and it is also a necessary component of a binary-reproducible build
To that end introduce OPENSSL_FILE and OPENSSL_LINE macros defining them to __FILE__ and __LINE__ respectively in the normal case but to "" and 0 when OPENSSL_NO_FILENAMES is set
This is mostly a naïve invocation of $ sed 's/__\([FL]I[NL]E\)__/OPENSSL_\1/g' -i `git grep -l __LINE__` but with a few instances change to just print the function name instead (although those probably need to die anyway) and test cases left untouched
Signed-off-by: Rich Salz <rsalz@openssl.org>
When someone configures an out-of-source build switch to unified
For example this works instead of giving a big error message (note the lack of '--unified'):
mkdir ../_build (cd ../_build/; ../openssl-src/config; make)
Fix check of -DOPENSSL_USE_APPLINK in $config{cflags}
The previous fix wasn't right
Also change all (^|\s) and (\s|$) constructs to (?:^|\s) and (?:\s|$) Perl seems to like that better
RT4310: Fix varous no-XXX builds
When OPENSSL_NO_ASYNC is set make ASYNC_{un,}block_pause() do nothing This prevents md_rand.c from failing to build Probably better to do it this way than to wrap every instance in an explicit #ifdef
A bunch of new socket code got added to a new file crypto/bio/b_addr.c Make it all go away if OPENSSL_NO_SOCK is defined
Allow configuration with no-ripemd no-ts no-ui We use these for the UEFI build
Also remove the 'Really???' comment from no-err and no-locking We use those too
We need to drop the crypto/engine directory from the build too and also set OPENSSL_NO_ENGINE
Signed-off-by: Rich Salz <rsalz@openssl.org>
remove redundant code
RT4318: Fix OSSL_SSIZE_MAX for UEFI build
Commit e634b448c ("Defines OSSL_SSIZE_MAX") introduced a definition of OSSL_SSIZE_MAX which broke the UEFI build Fix that by making UEFI take the same definition as Ultrix (ssize_t == int)
Signed-off-by: Rich Salz <rsalz@openssl.org>
RT4315: Fix UEFI build in crypto/init.c
We don't have atexit() in the EDK2 environment Firmware never exits
Signed-off-by: Rich Salz <rsalz@openssl.org>
Remove JPAKE
RT4313: Fix build for !IMPLEMENTED code path in CRYPTO_secure_free()
Commit 05c7b1631 ("Implement the use of heap manipulator implementions") added 'file' and 'line' arguments to CRYPTO_free() and friends but neglected to fix up the !IMPLEMENTED case within CRYPTO_secure_free() Add the missing arguments there too
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fixup secmemtest for the change of CRYPTO_free() and friends
Switching it to use OPENSSL_free() et al when appropriate
Fix mismatched curly brace
Update the documentation on heap allocators / deallocators
Implement the use of heap manipulator implementions
- Make use of the functions given through CRYPTO_set_mem_functions() - CRYPTO_free() CRYPTO_clear_free() and CRYPTO_secure_free() now receive __FILE__ and __LINE__ - The API for CRYPTO_set_mem_functions() and CRYPTO_get_mem_functions() is slightly changed the implementation for free() now takes a couple of extra arguments taking __FILE__ and __LINE__ - The CRYPTO_ memory functions will *always* receive __FILE__ and __LINE__ from the corresponding OPENSSL_ macros regardless of if crypto-mdebug has been enabled or not The reason is that if someone swaps out the malloc() realloc() and free() implementations we can't know if they will use them or not
md_rand: FAQ URL to use https and follow a redirect
Signed-off-by: Rich Salz <rsalz@openssl.org>
OPENSSL_init_ssl.pod: fix minor typo
On solaris the variable name sun clashes use s_un instead
For orthogonality we change sin -> s_in and sin6 -> s_in6 as well
Check for OPENSSL_USE_APPLINK in $config{cflags} as well
Macro definitions "should" be found in $config{defines} but some configs haven't transfered macro definitions from their 'cflags' settings (which isn't mandatory anyway) so check both places
Don't check for gcc or clang on VMS
This check is meaningless on VMS and only produce an error because the underlying shell (DCL) doesn't understand sh syntax such as '2>&1'
Lowercase configuration arguments on VMS
Depending on user preferences Configure might get something like --PREFIX=blah just as well as --prefix=blah or "SHARED" just as well as "shared" On VMS let's therefore lowercase at least the portion of the argument before a possible equal sign
For good measure we lowercase the arguments to be checked in config.com as well The original argument is sent on to Configure however
Fix Solaris link_a and link_o
A long time ago Solaris cc didn't seem to handle -Wl linker options while gcc on Solaris required it Since then Solaris cc has developed to understand -Wl options and our little dance to figure out how to pass linker options to the C compiler that's used isn't needed any more
Simplify tls1_set_ec_id
Use nid_list table to lookup curve IDs
Add explanation and warning to TLS id table
Fix use of add() and add_before() in Configurations/*.conf
These two functions take a separator to concatenat the strings with as first argument
Prepare for 1.1.0-pre4-dev
Prepare for 1.1.0-pre3 release
Correct deprecation of OPENSSL_config
Reported in GH#684
Fix build-break
Combination of heartbeats and unit-tests
MANSUFFIX should be left empty
That variable isn't for us it's for any user distributor or package builder that wants one after the section number "ssl" seems to be popular..
Address comments
Tests depend on everything
Make the BIO_ADDR param optional
Misc fixes in util/mk1mf.pl
mk1mf was wondering about the options no-heartbeats and no-crypto-mdebug-backtrace so we add option hooks them They only need to become OPENSSL_NO_ macros in opensslconf.h so nothing additional needs to be done
Also add "-DOPENSSL_PIC" when shared libraries are produced
Don't call cpuid in test; done as init
Fixes to make no-deprecated work again
Configurations/00-base-templates.conf: typos in [chacha|poly1305]_asm_src
chacha/asm/chacha*: ensure that zero length is handled (without crash)
RT#4305
chacha/asm/chacha-x86[_64].pl: fix typos and logical errors
Thanks to: David Benjamin of Chromuim
RT#4305
make update
Don't use libcrypto private headers with mkdef.pl
Three header files from crypto/include/internal were used by util/mkdef.pl This should never be needed Some test program used these which made it a valid reason at the time to make the some internal symbols public in the shared libraries but that's not the case any more
However to be able to link libssl.so some symbols found in include/internal headers still need to be made public
Make sure to use unsigned char for is*() functions
On some platforms the implementation is such that a signed char triggers a warning when used with is*() functions On others the behavior is outright buggy when presented with a char that happens to get promoted to a negative integer
The safest thing is to cast the char that's used to an unsigned char
Make the use of mdebug backtrace a separate option
To force it on anyone using --strict-warnings was the wrong move as this is an option best left to those who know what they're doing
Use with care!
Declare DllMain internally
DllMain is a symbol that needs to be global but no one needs to know However some compilers will warn if there isn't a declaration before the function is defined Just add a declaration before the function definition
Don't test heartbeats when there aren't any
Make sure a socklen_t can compare with a sizeof() result
Most of the times it seems that socklen_t is unsigned Unfortunately this isn't always the case and it doesn't compare with a size_t without warning
A cast resolves the issue
Have dofile.pl say where it was run for real this time
Have dofile.pl say where it was run
Prefer IO::Socket::INET6 over IO::Socket::IP
While IO::Socket::IP is a core perl module (since Perl v5.19.8 or so says corelist) IO::Socket::INET6 has been around longer is said to be more widely deployed and most importantly seems to have less bugs hitting us We therefore prefer IO::Socket::INET6 and only fall back to IO::Socket::IP if the former doesn't exist on the local system
crypto/poly1305: add floating-point reference implementation
RT4304: Look for plaintext HTTP
GH675: make ssl3_ciphers static
Signed-off-by: Rich Salz <rsalz@openssl.org>
Pass $(CC) to perlasm scripts via the environment
It seems that on some platforms the perlasm scripts call the C compiler for certain checks These scripts need the environment variable CC to have the C compiler command
Reformat warn variables for easier editing
Don't build test programs by default add convenience targets for unified build
Test programs are now only built when running "make test" or "make build_tests"
Have the same installation directories in unified as in unixmake
unix-Makefile.tmpl was lagging behind on this point
Configurations: engage PPC ChaCha20 and Poly1305 modules
PPC assembly pack: add ChaCha20 and Poly1305 modules
Add SHARED_RCFLAGS in unified Makefile template
Also remove a spurious extra $(LDFLAGS)
async_win.c: remove unused variable
Silencing this: crypto/async/arch/async_win.c: In function 'async_fibre_init_dispatcher': crypto/async/arch/async_win.c:112:12: warning: unused variable 'dispatcher' [-Wunused-variable] LPVOID dispatcher; ^
Signed-off-by: Rich Salz <rsalz@openssl.org>
The unified build may delete installed manual files
The installation of man files and html files alike didn't properly check that file names with different casing could be the same on case-insensitive file systems This change fixes that
GH650: Minor tidying around the ocsp app
The ocsp utility is something of a jack-of-all-trades; most anything related to the OCSP can be done with it In particular the manual page calls out that it can be used as either a client or a server of the protocol but there are also a few things that it can do which do not quite fit into either role such as encoding an OCSP request but not sending it printing out a text form of an OCSP response (or request) from a file akin to the asn1parse utility or performing a lookup into the server-side revocation database without actually sending a request or response All three of these are documented as examples in the manual page but the documentation prior to this commit is somewhat misleading in that when printing the text form of an OCSP response the code also attempts to verify the response displaying an error message and returning failure if the response does not verify (It is possible that the response would be able to verify with the given example since the default trust roots are used for that verification but OCSP responses frequently have alternate certification authorities that would require passing -CAfile or -CApath for verification.)
Tidy up the documentation by passing -noverify for the case of converting from binary to textual representation and also change a few instances of -respin to -reqin as appropriate note that the -url option provides the same functionality as the -host and -path options clarify that the example that saves an OCSP response to a file will also perform verification on that response and fix a couple grammar nits in the manual page
Also remove an always-true conditional for rdb != NULL -- there are no codepaths in which it could be initialized at the time of this check
Signed-off-by: Rich Salz <rsalz@openssl.org>
Display the windres command
GH643: Cleanup header analysis
Signed-off-by: Rich Salz <rsalz@openssl.org>
Free and zero DH/ECDH temporary key after use
PR#4303
Rethink the method to place user cflags last
The previous method had some unfortunate consequences with --strict-warnings To counteract revert part of the previous change and move down the block of code that adds the user cflags and defines
Make sure the OPENSSL_INIT flags are 32 bits and document the ssl range
Remove 00-test_checkexes.t as it has lost its relevance
In the early stages of creating the new test framework 00-test_checkexes was a temporary check to ensure we had a recipe for every test program in test/ By now this test has fulfilled its purpose and we've learned how to make recipes properly It's time for this check to go away
In templates output_on() must be used the same way as output_off()
Otherwise there will be an unbalance
C64x+ assembly pack: add ChaCha20 and Poly1305 modules
Configurations: engage ARM ChaCha20 and Poly1305 modules
ARM assembly pack: add ChaCha20 and Poly1305 modules
apps/speed.c: initialize c[D_GHASH][i]
RT#4230
Defines OSSL_SSIZE_MAX
Removes SSIZE_MAX definition from bss_bio.c and changes that file to use OSSL_SSIZE_MAX
No need to account for OPENSSL_SYS_VXWORKS since that never actually gets defined anywhere It must be a historical artifact
Fix some issues near recent chomp changes
fix warnings on 32 bit builds
We need the linked utils after a full build
We really needs a better util/shlib_wrap.sh but will have to do for now
Unified build - fix make depend
There was a catch 22 where 'make depend' directly after configuring in an otherwise pristine build tree would fail because buildinf.h didn't exist yet
This change has the depend building targets depend on the same other targets as the object file building targets so the generation of buildinf.h and similar files would kick in during 'make depend'
Move brace outside #ifdef
evp/e_des[3].c: address compiler warnings fix formatting
RT#4210
modes/ctr128.c: pay attention to ecount_buf alignment in CRYPTO_ctr128_encrypt
It's never problem if CRYPTO_ctr128_encrypt is called from EVP because buffer in question is always aligned within EVP_CIPHER_CTX structure
RT#4218
Rename INSTALL_PREFIX to DESTDIR remove option --install_prefix
INSTALL_PREFIX is a confusing name as there's also --prefix Instead tag along with the rest of the open source world and adopt the Makefile variable DESTDIR to designate the desired staging directory
The Configure option --install_prefix is removed the only way to designate a staging directory is with the Makefile variable (this is also implemented for VMS' descrip.mms et al)
Update .gitignore
Not all git versions understand **/Makefile but all recognize that filename without any path applies to all directories
.travis.yml: exclude gcc from MacOS X CI builds
Contemporary Xcode gcc is a front-end to clang so that explicit gcc build is actually redundant on MacOS X
Put user flags last for priority
ec/asm/ecp_nistz256-armv8.pl: fix test_ssl spurious errors
RT#4237
Now that we have good verbosity turn it on for Travis
It's nearly impossible to determine what goes wrong in the tests running there without this
Document the changes in "make test" behavior
Let all TLSProxy based tests display debug text conditionally
If the environment variable HARNESS_ACTIVE isn't defined or HARNESS_VERBOSE is defined it's probable that lots of output is desired
Rethink logging of test recipes
The logging that was performed in OpenSSL::Test was initially set up as a means not to let messages that test programs write to STDERR get displayed when a test isn't running in verbose mode However the way it was implemented it meant that those messages were never displayed and you had to look in a test log This also meant that output to STDERR and output to STDOUT got broken apart which isn't optimal
So we remove the whole test log file implementation and instead we're sending STDERR to the null device unless one of these conditions apply:
- the test recipe already redirects stderr Just let it - the environment variable HARNESS_ACTIVE is undefined meaning the recipe is run directly as a perl script instead of being harnessed by Test::Harness - the environment variable HARNESS_VERBOSE is set
Getting a full log of the tests now becomes as simple as this:
HARNESS_VERBOSE=yes make test 2>&1 | tee tests.log
Better workaround for VMS getnameinfo() bug
The actual bug with current getnameinfo() on VMS is not that it puts gibberish in the service buffer but that it doesn't touch it at all The gibberish we dealt with before was simply stuff that happened to be on the stack
It's better to initialise the service buffer properly (with the empty string) and check if it's still an empty string after the getnameinfo() call and fill it with the direct numerical translation of the raw port if that's the case
Adjust transfer::Text::Template.pm for alternate directory name
On VMS periods in directory names weren't allowed To counter that unpackers such as VMSTAR convert periods in directory names to underscores We need to count that in and add an alternative library path for Text::Template
RT 3854: Update apps/req
Change the default keysize to 2048 bits and the minimum to 512 bits
Remove last chomps
In the previous commit to change all chomp to a more flexible regexp Configure was forgotten This completes the change
Fix the enable-ssl-trace config option
The recent removal of static ECDH broke the enable-ssl-trace compilation
make generate
Generate progs.h from a bunch of files instead of internal knowledge
apps/progs.pl counted on the caller to provide the exact command files The unified build doesn't have that knowledge and the easier and more flexible thing to do is to feed it all the apps/*.c files and let it figure out the command names by looking inside (looking for /int ([a-z0-9][a-z0-9_]*)_main\(int argc,/)
Also add it to the generate command since it's a versioned file
Typo: only return error if unrecognise bag type
State the minimum Perl version that our scripts will work with
Perl's chop / chomp considered bad use a regexp instead
Once upon a time there was chop which somply chopped off the last character of $_ or a given variable and it was used to take off the EOL character (\n) of strings
.. but then you had to check for the presence of such character
So came chomp the better chop which checks for \n before chopping it off And this worked well as long as Perl made internally sure that all EOLs were converted to \n
These days though there seems to be a mixture of perls so lines from files in the "wrong" environment might have \r\n as EOL or just \r (Mac OS unless I'm misinformed)
So it's time we went for the more generic variant and use s|\R$|| the better chomp which recognises all kinds of known EOLs and chops them off
A few chops were left alone as they are use as surgical tools to remove one last slash or one last comma
NOTE: \R came with perl 5.10.0 It means that from now on our scripts will fail with any older version
update ciphers manual page
Remove static ECDH support
Remove support for static ECDH ciphersuites They require ECDH keys in certificates and don't support forward secrecy
perlasm/x86_64-xlate.pl: pass pure constants verbatim
RT#3885
util/mk1mf.pl: use LINK_CMD instead of LINK variable
Trouble is that LINK variable assignment in make-file interferes with LINK environment variable which can be used to modify Microsoft's LINK.EXE behaviour
RT#4289
poly1305/asm/poly1305-x86_64.pl: MacOS X portability fix
poly1305/asm/poly1305-x86_64.pl: fix mingw64 build
Add the generate mechanism from unixmake to unix-Makefile.tmpl
Don't check self signed certificate signature security
Fix MacOS/X build warnings
Commit 7823d792d0cad3b44ad5389a8d3381becefe7f44 added DEFINE_LHASH_OF to a C source file DEFINE_LHASH_OF() and DEFINE_STACK_OF() must be used only in header files to avoid clang warnings for unused static-inline functions
Don't add filename comment
Remove TLS heartbeat disable DTLS heartbeat
To enable heartbeats for DTLS configure with enable-heartbeats Heartbeats for TLS have been completely removed
This addresses RT 3647
Move to REF_DEBUG for consistency
Add utility macros REF_ASSERT_NOT and REF_PRINT_COUNT This is also RT 4181
RT3495: Add a hash for faster dup detection
Updated for 1.1 by Rich Salz
Fix GH 327
Valgrind complains about using unitialized memory So call OPENSSL_zalloc not malloc
Make util/mkrc.pl location agnostic and adapt Makefile.shared
With this Cygwin and Mingw builds stand a much better chance to be able to build outside of the source tree with the unified build
Make shared library targets more consistent
On Windows POSIX layers two files are produced for a shared library there's {shlibname}.dll and there's the import library {libname}.dll.a
On some/most Unix platforms a {shlibname}.{sover}.so and a symlink {shlibname}.so are produced
For each of them unix-Makefile.tmpl was entirely consistent on which to have as a target when building a shared library or which to use as dependency
This change clears this up and makes it consistent we use the simplest form possible {lib}.dll.a on Windows POSIX layers and {shlibname}.so on Unix platforms No exception
Fix engine key support in cms and req utilities
PR#4246 and PR#4266
Test for and use AES CSP for RSA if present
Some keys are attached to the full RSA CSP which doesn't support SHA2 algorithms: uses the AES CSP if present
Add support for shared_rcflag useful for windres (Cygwin and Mingw)
Modernise the mingw cflags and ldflags
Unified build: Keep track of generated header files
If someone runs a mixed unixmake / unified environment (the unified build tree would obviously be out of the source tree) the unified build will pick up on the unixmake crypto/buildinf.h because of assumptions made around this sort of declaration (found in crypto/build.info):
DEPENDS[cversion.o]=buildinf.h
The assumption was that if such a header could be found in the source tree that was the one to depend on otherwise it would assume it should be in the build tree
This change makes sure that sort of mix-up won't happen again
Remove the "make depend" message
It's not necessary for a pristine source and a developer that makes changes usually knows what to do
Also there was this mechanism that would do a "make depend" automatically which hasn't been used for so many years Removed as well
Simplify ssl_cert_type() by taking advantage of X509_get0_pubkey
GH620: second diff from rt-2275 adds error code
clean up and apply patches from RT-2275
Signed-off-by: Rich Salz <rsalz@openssl.org>
Check malloc
Noticed by Claus Assmann <ca+ssl-dev@esmtp.org>
Missing header include
Hide OPENSSL_INIT_SETTINGS
Make OPENSSL_INIT_SETTINGS an opaque structure
Add inclusion directory crypto/include for BN compilations
Some files in crypto/bn depend on internal/bn_conf.h and so does test/bntest Therefore we add another inclusion directory
The protocol variable has lost its use remove it
Rework BIO_ADDRINFO_protocol() to return correct values
As noted already some platforms don't fill in ai_protocol as expected To circumvent that we have BIO_ADDRINFO_protocol() to compute a sensible answer in that case
Fix errstr error code parsing
Error codes are printed in hex and previous OpenSSL versions expected the error codes to be provided to errstr in hex In 1.1.0 for some reason it was expecting them to be decimal
Make comment match reality
use consistent error messages
Print out bad content octets
If asn1parse doesn't like a structure print out the content octets for diagnostic purposes
After auto init check that the deprecated functions exist before using
The functions that have been deprecated by the auto init changes are now guarded with deprecation checks so it's fairly easy to see if they can be used
In test/dtlsv1listentest we simply remove all init and cleanup code as they are call automatically when needed
Change the VMS perl pointer from SF file store to the project page
After renaming init update errors
BIO_PAIR_DEBUG did nothing; remove it
Use the protocol we know rather than BIO_ADDRINFO_protocol(res)
Because some platforms won't will in any value in ai_protocol there's no point using it if we already know what it should be
Don't assert protocol equality
It seems that some platforms' getaddrinfo don't fill in the ai_protocol field properly On those the assertion 'protocol == BIO_ADDRINFO_protocol(res)' will fail Best to remove it
Add CHACHA20 alias for ciphers
Update ciphers documentation as well (based on -04 rev of ID)
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
RT: #4206 GH: #642
Ensure allocation size fits into size_t
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
GH: #630
typo
Produce buildinf.h on Windows the same way as on Unix
Because ENGINESDIR and OPENSSLDIR typically contains backslashes they need to be escaped just right
Quote the CFLAG in Unixly Makefiles for buildinf.h
Because the command line definitions of OPENSSLDIR and ENGINESDIR contain quotes we need a variant of CFLAG where backslashes and quotes are escaped when we produce buildinf.h
Make sure to escape backslashes and single quotes for buildinf.h
Make it possible to get ENGINESDIR info from OpenSSL_versions
Have apps/openssl display the result along with OPENSSLDIR
As part of this add ENGINESDIR in util/mk1mf.pl
Add some documentation about init after deinit
Attempting to init after deinit is an error Update the documentation accordingly
Update CHANGES following init function renaming
Attempt to log an error if init failed
If init failed we'd like to set an error code to indicate that But if init failed then when the error system tries to load its strings its going to fail again We could get into an infinite loop Therefore we just set a single error the first time around After that no error is set
The new init functions can now fail so shouldn't be void
The new init functions can fail if the library has already been stopped We should be able to indicate failure with a 0 return value
Variable was declared static when it shouldn't be
The local variable tmp was declared static when it shouldn't be This is in the no-threads implementation and it was immediately initialised to something else on every invokation of the function so it doesn't break anything...but still shouldn't be there
Improve recent option help string additions
Make these more correct concise and less tautological
Deprecate the -issuer_checks debugging option
This was a developer debugging feature and was never a useful public interface
Added all missing X509 error codes to the verify(1) manpage but many still need a description beyond the associated text string
Sorted the errors in x509_txt.c by error number
The guard macro to be defined didn't match the guard macro checked
Update unified build after store removal
Rename INIT funtions deprecate old ones
Man there were a lot of renamings :)
No dynamic-init fix; merge goof
unified build system: add CHANGES & NEWS
unified build scheme: rewrite INSTALL.VMS
There is more to be added but this will at least tell people how to try
clean away old VMS cruft
The old building scripts get removed they are hopelessly gone in bit rot by now
Also remove the old symbol hacks They were needed needed to shorten some names to 31 characters and to resolve other symbol clashes Because we now compile with /NAMES=(AS_IS,SHORTENED) this is no longer required
unified build scheme: add a "unified" template for VMS descrip.mms
As part of this change util/mkdef.pl to stop adding libraries to depend on in its output mkdef.pl should ONLY output a symbol vector
Because symbol names can't be longer than 31 characters we use the compiler to shorten those that are longer down to 23 characters plus an 8 character CRC To make sure users of our header files will pick up on that automatically add the DEC C supported extra headers files __decc_include_prologue.h and __decc_include_epilogue.h
Furthermore we add a config.com so VMS people can configure just as comfortably as any Unix folks thusly:
@config
unified build scheme: add instructions for travis to build with --unified
unified build scheme: Try to nudge users to try the "unified" build
This commit SHALL be reverted before final release
unified build scheme: add the tweaks to build on Cygwin & Mingw
Cygwin and Mingw name their libraries a bit differently from the rest of the POSIXly universe we need to adapt to that
In Makefile.tmpl it means that some hunks will only be output conditionally
This also means that shared_extension for the Cygwin and Mingw configurations in Configurations/10-main.conf are changing from .dll.a to .dll Makefile.shared does a fine job without having them specified and it's much easier to work with tucking an extra .a at the end of files in the installation recipes than any amount of name rewrites especially with the support of the SHARED_NAME in the top build.info
unified build scheme: add a "unified" template for Unix Makefile
This also adds all the raw sections needed for some files
unified build scheme: give util/dofile.pl the possibility to output selectively
Under certain conditions one might not want to output certain sections of a template file This adds the functions output_off() and output_on() reachable inside the templates And example usage in a Makefile template could be this:
@ : {- output_off() if $config{no_shared}; "" -} .. lines dealing with shared libraries @ : {- output_on() -}
Configure et al: move the installation directory logic to Makefiles
The logic to figure out the combinations of --prefix and --openssldir has stayed in Configure so far with Unix paths as defaults
However since we're making Configure increasingly platform agnostic these defaults need to change and adapt to the platform along with the logic to combine them
The easiest to provide for this is to move the logic and the defaults away from Configure and into the build files
This also means that the definition of the macros ENGINESDIR and OPENSSLDIR move away from include/openssl/opensslconf.h and into the build files
Makefile.in is adapted accordingly
Configure et al: treat C defines separately
With some compilers C macros are defined differently on the command line than on Unix It could be that the flad to define them isn't -D it could also be that they need to be grouped together and not be mixed in with the other compiler flags (that's how it's done on VMS for example)
On Unix family platform configurations we can continue to have macro definitions mixed in with the rest of the flags so the changes in Configurations/*.conf are kept to an absolute minimum
Can't re-init after stop
Remoce DYANMIC once-init stuff After the library is stopped you can't restart it
Remove store
Rebased and merged by me with Ben's approval
If we've not been inited don't deinit
If you call an explicit deinit when we've not been inited then a seg fault can occur We should check that we've been inited before attempting to deinit
ms/uplink-x86.pl: make it work
chacha/asm/chacha-x86.pl: fix nasm compilation
Configurations: engage x86[_64] ChaCha20 and Poly1305 modules
poly1305/poly1305.c: work around -Wshadow warnings with POLY1305_ASM
x86[_64] assembly pack: add ChaCha20 and Poly1305 modules
VMS getnameinfo() seems to have a bug with returned service string
It seems like it gives back gibberish If we asked for a numeric service it's easy to check for a digit in the first position and if there isn't any rewrite it using older methods
Simplify the specification of include dirs in the build dir
In build.info files make the include directory in the build directory absolute or Configure will think it should be added to the source directory top Configure will turn it into a relative path if possible
Make the processing of build.info files more aware of absolute dirs
There were cases where some input was absolute and concatenating it to the diretory to the source or build top could fail spectacularly Let's check the input first to see if it's absolute
And while we're on the subject of checking if a file or dir spec is absolute using file_name_is_absolute() has its own quirks on VMS where a logical name is considered absolute under most circumstances This is perfectly correct from a VMS point of view but when parsing the build.info files we want single word file or directory names to only be checked syntactically A function isabsolute() that does the right thing is the solution
Make sure to always include string.h so memset gets declared
memset() is used by CRYPTO_secure_zalloc() which isn't hidden away behind IMPLEMENTED
Don't run RC4 test with no-rc4
Use NON_EMPTY_TRANSLATION_UNIT consistently
This also closes RT 4123
Make some global variables static
Make some global variables that are only ever accessed from one file static
NULL the thread_local_inits_st pointer after use
After the final use of the thread_local_inits_st we should ensure it is set to NULL just in case OPENSSL_INIT_thread_stop gets called again and it tries to use garbage
Stop library before checking for mem leaks
With the new init framework resources aren't released until the process exits This means checking for mem leaks before that point finds a lot of things! We should explicitly close down the library if we're checking for mem leaks
GH649: Fix: version32.rc was not created on Windows
version32.rc was not created on Windows The if condition has been corrected
Signed-off-by: Rich Salz <rsalz@openssl.org>
Portability fix
Configurations: engage s390x ChaCha20 and Poly1305 modules
s390x assembly pack: add ChaCha20 and Poly1305 modules
GH645: Fix typo: ctificates -> certificates
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH646: Update help for s_server command
* added missing help option messages * ecdh_single option is removed as it is a no-op and not an option supported in earlier versions * ssl_ctx_security_debug() was invoked before ctx check for NULL * trusted_first option can be removed as it is always enabled in 1.1 But not removed the option require confirmation
Signed-off-by: Rich Salz <rsalz@openssl.org>
Updates for auto init/deinit review comments
Fixes for the auto-init/deinit code based on review comments
Add a CHANGES entry for auto-init and de-init
Correct copyright date for internal header file
The newly added internal async.h header file had last years date in it
Update build.info files for auto-init/de-init
Various Makefile.in files have changes for auto-init/de-init Make the equivalent changes in build.info
Avoid a race condition in loading config settings
A race condition can occur when sending config settings to OPENSSL_INIT_crypto_library_start()
Provide documentation for auto-init/auto-deinit
Provide some man pages for auto-init/deinit Also update the INSTALL documentation for information on the new Configure options implemented as part of this
Add an OPENSSL_NO_AUTOERRINIT option
This option disables automatic loading of the crypto/ssl error strings in order to keep statically linked executable file size down
Provide a thread stop API
Add the OPENSSL_INIT_thread_stop() function
Clean up the tests for auto-init/de-init
Remove the need to explicitly initialise/deinitialise for the tests
Get the apps to use auto-init/de-init
Clean up the apps so that we make use of the new auto-init/de-init feature
Auto init/de-init libssl
Building on the pervious commit to auto initialise and de-initialise libssl
Auto init/deinit libcrypto
This builds on the previous commit to auto initialise/deinitialise libcrypto
Provide framework for auto initialise/deinitialise of the library
This commit provides the basis and core code for an auto initialisation and deinitialisation framework for libcrypto and libssl The intention is to remove the need (in many circumstances) to call explicit initialise and deinitialise functions Explicit initialisation will still be an option and if non-default initialisation is needed then it will be required Similarly for de-initialisation (although this will be a lot easier since it will bring all de-initialisation into a single function)
Fix 90-test_networking.t
The previous fix wasn't complete it was missing a 'use OpenSSL::Test::Utils'
Use rel2abs() on VMS rather than realpath()
It seems realpath() is quite buggy on VMS or will at least give quite surprising results On the other hand realpath() is the better on Unix to clean out clutter like foo/../bar on Unix
So we make out own function to get the absolute directory for a given input and use rel2abs() or realpath() depending on the platform Configure runs on
Issue reported by Steven M Schweda <sms@antinode.info>
Update 90-test-networking.t to do the same checks as other TLSProxy tests
unified build scheme: adjust test framework for out of source build tree
To be able to run tests when we've built in a directory other than the source tree the testing framework needs a few adjustments
test/testlib/OpenSSL/Test.pm needs to know where it can find shlib_wrap.sh and a number of other tests need to be told a different place to find engines than what they may be able to figure out on their own Relying to $TOP is not enough $SRCTOP and $BLDTOP can be used as an alternative
As part of this change top_file and top_dir are removed and srctop_file bldtop_file srctop_dir and bldtop_dir take their place
unified build scheme: adjust some scripts
util/mkdef.pl and Makefile.shared needs to know about the source and the build directories
Additionally Makefile.shared needs to know how to build shared libraries in a directory other than the current one
unified build scheme: add a design document
This documents describes the three steps from build.info files via the %unified_info database to the build-file templates along with some examples showing how the data gets processed along the way
unified build scheme: add and document the "unified" driving engine
common.tmpl will be used together with the template build file and is the engine that connects the information gathered from all the build.info files with making the build file itself
This file expects there to be a template section in the build file template that defines a number perl functions designed to return strings with appropriate lines for the build system at hand The exact functions what they can expect as arguments and what output they're expected to produce is documented in Configurations/README
Small fixes
- One typo fixed in crypto/bio/b_addr.c - Add a comment in doc/crypto/BIO_parse_hostserv.pod to explain the blank lines with one lonely space each
add missing file p12_lcl.h
Suppress DANE TLSA reflection when verification fails
As documented both SSL_get0_dane_authority() and SSL_get0_dane_tlsa() are expected to return a negative match depth and nothing else when verification fails However this only happened when verification failed during chain construction Errors in verification of the constructed chain did not have the intended effect on these functions
This commit updates the functions to check for verify_result == X509_V_OK and no longer erases any accumulated match information when chain construction fails Sophisticated developers can with care use SSL_set_verify_result(ssl X509_V_OK) to "peek" at TLSA info even when verification fail They must of course first check and save the real error and restore the original error as quickly as possible Hiding by default seems to be the safer interface
Introduced X509_V_ERR_DANE_NO_MATCH code to signal failure to find matching TLSA records Previously reported via X509_V_ERR_CERT_UNTRUSTED
This also changes the "-brief" output from s_client to include verification results and TLSA match information
Mentioned session resumption in code example in SSL_CTX_dane_enable(3) Also mentioned that depths returned are relative to the verified chain which is now available via SSL_get0_verified_chain(3)
Added a few more test-cases to danetest that exercise the new code
Resolved thread safety issue in use of static buffer in X509_verify_cert_error_string()
Fixed long-stating issue in apps/s_cb.c which always sets verify_error to either X509_V_OK or "chain to long" code elsewhere (e.g s_time.c) seems to expect the actual error [ The new chain construction code is expected to correctly generate "chain too long" errors so at some point we need to drop the work-arounds once SSL_set_verify_depth() is also fixed to propagate the depth to X509_STORE_CTX reliably ]
Following the PKCS#12 update update crypto/pkcs12/build.info as well
Remove ancient compatibility defines
make update
fix various formatting issues
Only use compatibility macros for < 1.1 API
rename old functions names in libeay.num
use new function names
Add p12_sbag.c to Makefile.in
Reorganise functions
Move all PKCS12_SAFEBAG functions into new file p12_sbag.c
Move MAC functions into p12_mutl.c
pkcs12.h header reorganisation
Use new names
Rename PKCS12 function
Rename ancient PKCS12 functions to use more logical names Include defines from old to new name
Use accessors in pkcs12 app
pkcs12 accessors
more PKCS12 opacity
New PKCS12 accessors change macros to functions
Make PKCS12 structures opaque
Deprecate undocumented SSL_cache_hit()
Deprecate undocumented SSL_cache_hit() Make SSL_session_reused() into a real function
GH641: Don't care openssl_zmalloc
Don't cast malloc-family return values Also found some places where (a) blank line was missing; and (b) the *wrong* return value was checked
Use File::Path::rmtree rather than File::Path::remove_tree
Just like File::Path::make_path File::Path::remove_tree didn't show up before File::Path 2.06 / perl v5.10.1 so we prefer the legacy function here as well
Use File::Path::mkpath rather than File::Path::make_path
File::Path::make_path didn't show up before File::Path 2.06 / perl v5.10.1 Because we're trying to stay compatible with perl v5.10.0 and up it's better to use the legacy interface
Fix engine key support in utilities
bio/b_sock.c: cleanup obsolete stuff
bn/Makefile.in: remove obsolete rules
Configurations/00-base-templates.conf: harmonize extensions
avoid crash if hostserv is with host part only
(if priority is set to host)
Signed-off-by: Richard Levitte <levitte@openssl.org>
GH322 revisited: remove unused function
Make TESTS= work with "nmake -f ms/ntdll.mak tests"
This works on Linux with Make already and allows running only specified tests
dtlsv1listentest includes e_os.h reflect that in include dirs
Handle SSL_shutdown while in init more appropriately #2
Previous commit 7bb196a71 attempted to "fix" a problem with the way SSL_shutdown() behaved whilst in mid-handshake The original behaviour had SSL_shutdown() return immediately having taken no action if called mid- handshake with a return value of 1 (meaning everything was shutdown successfully) In fact the shutdown has not been successful
Commit 7bb196a71 changed that to send a close_notify anyway and then return This seems to be causing some problems for some applications so perhaps a better (much simpler) approach is revert to the previous behaviour (no attempt at a shutdown) but return -1 (meaning the shutdown was not successful)
This also fixes a bug where SSL_shutdown always returns 0 when shutdown *very* early in the handshake (i.e we are still using SSLv23_method)
more doc fixes
dgst: using digest instead of specific digest commands the digest list specified in man dgst may be inaccurate hence using digest and referring to the list in digest-commands
'sha' as a digest name is no longer supported
dgst,pkeyutl cmds help cleanup - In dgst pkeyutl cmds some options help was missing - fixed a minor typo in openssl.pod that fixes make install - digest-commands was showing ‘sha’ which is not a supported digest anymore
Signed-off-by: Rich Salz <rsalz@openssl.org>
Clarify resumed sessions and NULL return
Fix memory leak in dtlsv1listentest
MR: #1879
Allocate bio_err before turning on memleak checks
Stack documentation
commands help cleanup
opt_valtype 0 is same as '-' while printing cmd usage asn1parse/ca/ciphers help cleanup
Signed-off-by: Rich Salz <rsalz@openssl.org>
if no comparison function set make sk_sort no op
make update
Add documenation for X509_chain_up_ref()
Add SSL_get0_verified_chain() to return verified chain of peer
Display the linking commands that are performed
Enhance and clear the support of linker flags
Some time ago we had a ex_libs configuration setting that could be divided into lflags and ex_libs These got divided in two settings lflags and ex_libs and the former was interpreted to be general linking flags
Unfortunately that conclusion wasn't entirely accurate Most of those linking were meant to end up in a very precise position on the linking command line just before the spec of libraries the linking depends on
Back to the drawing board we're diving things further now having lflags which are linking flags that aren't depending on command line position plib_lflags which are linking flags that should show up just before the spec of libraries to depend on and finally ex_libs which is the spec of extra libraries to depend on
Also documentation is changed in Configurations/README This was previously forgotten
GH587: Extend ECDH tests to more curves Add more ECDH KATs
squelch sign-compare warning
Signed-off-by: Rich Salz <rsalz@openssl.org>
Add BIO_ADDR_clear to libeay.num
MR: #1874
GH634: fix potential memory leak
Signed-off-by: Rich Salz <rsalz@openssl.org>
RT4194: Restore old engine parameter parsing
Allow initial engine names as first parameters before flags Also add engine param to help summary
Wrote manpage
Add build.info lines for dtlsv1listentest
Don't include sys/socket.h
It's not available on all OSs e_os.h already does the right thing
MR: #1870
Add missing static declarations in dtlsv1listentest.c
Clang rightly does not like extern symbols that are not declared in any header file as typically these are not intended for global visibility and are exposed in error This was indeed the case with various file-scope objects in dtlsv1listentest.c
Update DTLSv1_listen documentation
Make it clear that if we are unable to get hold of the peer address then *peer is cleared and the family set to AF_UNSPEC
Add tests for DTLSv1_listen
Adds a set of tests for the newly rewritten DTLSv1_listen function The test pokes various packets at the function and then checks the return value and the data written out to ensure it is what we would have expected
Provide partial support for fragmented DTLS ClientHellos
The recently rewriten DTLSv1_listen code does not support fragmented ClientHello messages because fragment reassembly requires server state which is against the whole point of DTLSv1_listen This change adds some partial support for fragmented ClientHellos It requires that the cookie must be within the initial fragment That way any non-initial ClientHello fragments can be dropped and fragment reassembly is not required
Add a BIO_ADDR_clear function
Adds a new function BIO_ADDR_clear to reset a BIO_ADDR back to an unitialised state and to set the family to AF_UNSPEC
GH601: Various spelling fixes
Signed-off-by: Rich Salz <rsalz@openssl.org>
RT4070: Improve struct/union regexp
Make DTLSv1_listen a first class function and change its type
The DTLSv1_listen function exposed details of the underlying BIO abstraction and did not properly allow for IPv6 This commit changes the "peer" argument to be a BIO_ADDR and makes it a first class function (rather than a ctrl) to ensure proper type checking
RT4292: Remove ===== line
Also remove two mistakenly checked-in files
RT1596: Add clarifying doc
GH628: Add -help to all apps docs
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH628: Add -help to all apps docs
Signed-off-by: Rich Salz <rsalz@openssl.org>
Ensure correct chain depth for policy checks with DANE bare key TA
Long overdue cleanup of X509 policy tree verification
Replace all magic numbers with #defined constants except in boolean functions that return 0 for failure and 1 for success Avoid a couple memory leaks in error recovery code paths Code style improvements
Various RT doc fixes
RT1556: doc/crypto/threads.pod RT2024: Missing pages mentioned in crypto.pod RT2890: Wrong size in ERR_string_error description RT3461: Better description of PEM Encryption (Jeffrey Walton <noloader@gmail.com>) Also fix up formatting and removed some code examples that encourage unsafe patterns like unencrypted private keys (Rich Salz) RT4240: Document some speed flags (Tomas Mraz <tmraz@redhat.com>) RT4260: Fix return value doc for X509_REQ_sign and X509_sign (Laetitia Baudoin <lbaudoin@google.com>)
enable leak checking for danetest
Fix return code in CRYPTO_mem_leaks_fp()
If memory debugging enabled return error on leaks
Restore -no_comp switch for backwards compatible behaviour
VMS lacks socklen_t give it one
Fortunately we only use socklen_t internally
Initialize variable
Don't export local symbols on Solaris
Following on from earlier commits to prevent local symbols from being exported in the shared libraries on Linux this makes the equivalent changes for Solaris
make update
Add EC_KEY_priv2buf()
Add new function EC_KEY_priv2buf() to allocated and encode private key octet in one call Update and simplify ASN.1 and print routines
Allocate ASN1_bn_print buffer internally
Don't require an application to work out the appropriate buffer size for ASN1_bn_print() which is unsafe Ignore the supplied buffer and allocate it internally instead
Use BN_bn2binpad
use enum type for do_EC_KEY_print
update EC ASN1 and print routines
Update EC ASN.1 and print routines to use EC_KEY_oct2priv and EC_KEY_priv2oct
Add EC_KEY_oct2priv and EC_KEY_priv2oct
New functions EC_KEY_oct2priv and EC_KEY_priv2oct These are private key equivalents of EC_POINT_oct2point and EC_POINT_point2oct which convert between the private key octet format and EC_KEY
Add ASN1_buf_print to print a buffer in ASN1_bn_print format
Don't use RDRAND if told not to
Ensure we respect OPENSSL_NO_RDRAND
Initialise with -1 rather than 1
A small typo crept in
Add new DTLS-SRTP protection profiles from RFC 7714
Add checks for IPv4 and IPv6 in OpenSSL::Test::Utils and use them
This uilds on the same way of checking for availability as we do in TLSProxy We use all IP factories we know of starting with those who know both IPv6 and IPv4 and ending with the one that only knows IPv4 and cache their possible success as foundation for checking the available of each IP domain
80-test_ssl.t has bigger chances of working on platforms that do not run both IP domains
Update crypto/bio/build.info
Fix pkeyutl inability to directly access keys on hardware tokens
Change the transfer perl module so the real module gets properly registered
This is an important move if scripts want to refer to the loaded module without having perl think it needs to be loaded (again)
Add option to disable async
Add no-async option to Configure that forces ASYNC_NULL Related to RT1979 An embedded system or replacement C library (e.g musl or uClibc) may not support the *context APIs that are needed for async operation
Compiles with musl Ran unit tests async tests skipped as expected
Signed-off-by: Rich Salz <rsalz@openssl.org>
Make sure getaddrinfo and getnameinfo works as intended on Windows
Both getaddrinfo() and getnameinfo() have to be preceeded with a call to BIO_sock_init()
Also make sure to give gai_strerror() the actual error code
If egd is disabled by default it should be possible to enable
Add ec -check option
Fix potential buffer overrun
Signed-off-by: Rich Salz <rsalz@openssl.org>
Use WSAGetLastError() on windows
Windows doesn't have h_error or hstrerror()
MR: #1848
Restore xmm7 from the correct address on win64
RT: #4288 MR: #1831
update OID tables
Add Curve OIDs from draft-josefsson-pkix-newcurves
RT2887: Add more packet and handshake types
Fix BN_gcd errors for some curves
Those even order that do not play nicely with Montgomery arithmetic
Signed-off-by: Rich Salz <rsalz@openssl.org>
RT3095: allow NULL key for single-shot HMAC
In HMAC_Init_ex NULL key signals reuse but in single-shot HMAC we can allow it to signal an empty key for convenience
bio_err.c: remove a reappeared filename comment
Make fallback addresses static so that we can initialize it
MR: #1841
Only use TLS1.2 when it's available
Have 70-test_clienthello.t be selective on when it can be run
The test program clienthello checks TLS extensions so there's no point running it when no TLS protocol is available
Have OpenSSL::Test::Utils::available_protocols load configdata as well
Otherwise it could typically always return an empty list since it's often called first if at all
RT2752: Add some EKU OID's
And some others found in the Internet
Handle localhost being either 127.0.0.1 or ::1
When connecting to "localhost" the Proxy's choice of client address family may not match the server's choice address family Without MultiHomed => 1 the proxy may try the wrong address family first and give up without trying the other
Use matching quotes
Make the mk1mf 'mv' command variable
Tweak opensslconf.h.in for style
Use BIO_snprintf() rather than snprintf()
Some platforms do not have the latter
Refactoring BIO: small test correction
GH614: Use memcpy()/strdup() when possible
Signed-off-by: Rich Salz <rsalz@openssl.org>
Refactoring BIO: Add a few lines in CHANGES & NEWS
Refactoring BIO: add a simple networking test of s_client and s_server
This makes use of TLSProxy which was expanded to use IO::Socket::IP (which is a core perl module) or IO::Socket::INET6 (which is said to be more popular) instead IO::Socket::INET if one of them is installed
Refactoring BIO: Adapt s_client and s_server
s_socket.c gets brutally cleaned out and now consists of only two functions one for client and the other for server They both handle AF_INET AF_INET6 and additionally AF_UNIX where supported The rest is just easy adaptation
Both s_client and s_server get the new flags -4 and -6 to force the use of IPv4 or IPv6 only
Also the default host "localhost" in s_client is removed It's not certain that this host is set up for both IPv4 and IPv6 For example Debian has "ip6-localhost" as the default hostname for [::1] The better way is to default |host| to NULL and rely on BIO_lookup() to return a BIO_ADDRINFO with the appropriate loopback address for IPv4 or IPv6 as indicated by the |family| parameter
Refactoring BIO: Adapt BIO_s_datagram and all that depends on it
The control commands that previously took a struct sockaddr * have been changed to take a BIO_ADDR * instead
Refactoring BIO: add a test using test/ssltest
This adds a couple of simple tests to see that SSL traffic using the reimplemented BIO_s_accept() and BIO_s_connect() works as expected both on IPv4 and on IPv6
make update
Refactoring BIO: adapt BIO_s_connect and BIO_s_accept
make update
Refactoring BIO: reimplement old socket handling functions with new ones
make update
Temporary pragma to have GCC quiet down about deprecated functions
Future commits will change our use to newer functions and the pragmas will go away at that time
Refactoring BIO: new socket-handling functions deprecate older ones
Added functions:
BIO_socket BIO_connect BIO_listen BIO_accept_ex BIO_closesocket BIO_sock_info
These get deprecated:
BIO_gethostbyname BIO_get_port BIO_get_host_ip BIO_get_accept_socket BIO_accept
Refactoring BIO: add error macros & text and make update
Refactoring BIO: Small adjustments
Because of the way bio_lcl.h is organised we must not include internal/cryptlib.h before it As a matter of fact bio_lcl.h includes internal/cryptlib.h on its own
Refactoring BIO: add wrappers around sockaddr et al
Because different platforms have different levels of support for IPv6 different kinds of sockaddr variants and some have getaddrinfo et al while others don't we could end up with a mess if ifdefs duplicate code and other maintainance nightmares
Instead we're introducing wrappers around the common form for socket communication: BIO_ADDR closely related to struct sockaddr and some of its variants BIO_ADDRINFO closely related to struct addrinfo
With that comes support routines both convenient creators and accessors plus a few utility functions:
BIO_parse_hostserv takes a string of the form host:service and splits it into host and service It checks for * in both parts and converts any [ipv6-address] syntax to ust the IPv6 address
BIO_lookup looks up information on a host
All routines handle IPv4 (AF_INET) and IPv6 (AF_INET6) addresses and there is support for local sockets (AF_UNIX) as well
RT4148
Accept leading 0-byte in PKCS1 type 1 padding Internally the byte is stripped by BN_bn2bin but external callers may have other expectations
[Configure] Make --with-zlib-* work with configdata.pm
RT3234: disable compression
CRIME protection: disable compression by default even if OpenSSL is compiled with zlib enabled Applications can still enable compression by calling SSL_CTX_clear_options(ctx SSL_OP_NO_COMPRESSION) or by using the SSL_CONF library to configure compression SSL_CONF continues to work as before:
SSL_CONF_cmd(ctx "Options" "Compression") enables compression
SSL_CONF_cmd(ctx "Options" "-Compression") disables compression (now no-op by default)
The command-line switch has changed from -no_comp to -comp
Fix pkeyutl/rsautl empty encrypt-input/decrypt-output handling
Also fix option processing in pkeyutl to allow use of (formerly) "out-of-order" switches that were needless implementation limitations
Handle documented "ENGINE" form with -keyform and -peerform
Better handling of OPENSSL_NO_ENGINE and OPENSSL_NO_RSA
RT2018
fix code indentation issue
.. related to engine_ref_debug macro
Signed-off-by: Rich Salz <rsalz@akamai.com>
RT2353: Add ipsec IKE OID
Use a simpler method to build a glob than splitpath and catpath
It turns out that the combination splitpath() could return an empty string for the directory part This doesn't play well with catdir()
make update
New BN functions
Add new function BN_bn2binpad() which checks the length of the output buffer and pads the result with zeroes if necessary
New functions BN_bn2lebinpad() and BN_lebin2bn() which use little endian format
GH608: Ensure 64-bit shift no matter sizeof(long)
Signed-off-by: Rich Salz <rsalz@openssl.org>
RT3854 Update docs
Remove ancient unused configuration file in crypto/conf
Style; add "!= NULL"
GH554: Improve pkeyutl doc
Signed-off-by: Rich Salz <rsalz@openssl.org>
constify PACKET
PACKET contents should be read-only To achieve this also - constify two user callbacks - constify BUF_reverse
update DSA docs
add option to exclude public key from EC keys
Fix memory leak and print out keygen errors
Better check for gcc/clang
Iteratively improved with Richard and Andy
Comment "secure memcmp" implementation
Signed-off-by: Rich Salz <rsalz@openssl.org>
Use PKCS#8 format EC key so test is skipped with no-ec
unified build scheme: add a personal configuration to test it
Nothing else will run the unified scheme for now
unified build scheme: add build.info files
Now that we have the foundation for the "unified" build scheme in place we add build.info files They have been generated from the Makefiles in the same directories Things that are platform specific will appear in later commits
unified build scheme: a first introduction
The "unified" build scheme revolves around small information files build.info which each describe their own bit of everything that needs to be built using a mini-language described in Configurations/README
The information in build.info file contain references to source files and final result Object files are not mentioned at all they are simply from source files Because of this all the *_obj items in Configurations/*.conf are renamed to *_asm_src and the files listed in the values are change from object files to their corresponding source files For the sake of the other build schemes Configure generates corresponding *_obj entries in %target
Furthermore the "unified" build scheme supports having a build directory tree separate from the source directry tree
All paths in a build.info file is assumed to be relative to its location either within the source tree or within the build tree
Add tests for non-ca trusted roots and intermediates
Compat self-signed trust with reject-only aux data
When auxiliary data contains only reject entries continue to trust self-signed objects just as when no auxiliary data is present
This makes it possible to reject specific uses without changing what's accepted (and thus overring the underlying EKU)
Added new supported certs and doubled test count from 38 to 76
Check chain extensions also for trusted certificates
This includes basic constraints key usages issuer EKUs and auxiliary trust OIDs (given a trust suitably related to the intended purpose)
Added tests and updated documentation
Zero newly allocated points
Remove redundant code
d2i_ECPrivateKey always caculates the public key so there is no need to caculate it again in eckey_priv_decode()
Add EC_GROUP_order_bits EC_GROUP_get0_order and EC_GROUP_get0_cofactor
New functions to return internal pointer for order and cofactor This avoids the need to allocate a new BIGNUM which to copy the value to Simplify code to use new functions
Engage poly1305-sparcv9 module
Add poly1305/asm/poly1305-sparcv9.pl
Configure: restore original logic for -DWHIRLPOOL_ASM
RT4129: BUF_new_mem_buf should take const void *
Signed-off-by: Rich Salz <rsalz@akamai.com>
Remove the extra checks for Intel's C compiler
When the target is {something}-icc we're doing some extra checks of the icc compiler However all such targets were cleaned away in March 2015 so this Configure section is dead code
RT3755: Remove duplicate #include
Don't go into dotted directories when copying Makefile.in to Makefile
GH102: Extra volatile avoids GCC bug
Remove extra level of indirection
Remove OPENSSL_IMPORT as its only purpose is to define OPENSSL_EXTERN
Move more BN internals to bn_lcl.h
There was an unused macro in ssl_locl.h that used an internal type so I removed it Move bio_st from bio.h to ossl_type.h
GH102: Add volatile to CRYPTO_memcmp
Can't hurt and seems to prevent problems from some over-aggressive (LTO?) compilers
When checking if there's a VMS directory spec don't forget the possible device
Fix test/recipes/25-test_verify.t
top_dir() are used to create directory names top_file() should be used for files In a Unixly environment that doesn't matter but..
handle "Ctrl" in separate function
Add test data for ECDH
Add support for EVP_PKEY_derive in evp_test
fix warning
Add function to return internal enoding of X509_NAME
PR#4280
Fix opt_imax() call
Not all architectures have a time_t defined the same way To make sure we get the same result we need to cast &checkoffset to (intmax_t *) and make sure that intmax_t is defined somehow
To make really sure we don't pass a variable with the wrong size down to opt_imax() we use a temporary intmax_t
Configure: Clarify the handling of $thread_cflags
Make opt_imax visible in all apps
Missed rc2_int from before
Also remove $Makefile variable :)
Fix invalid policy detection
As a side-effect of opaque x509 ex_flags were looked up too early before additional policy cache updates
Templatize util/domd
Better type for x509 -checkend argument
This is a time_t and can be zero or negative So use 'M' (maximal signed int) not 'p' (positive int)
Complete the lflags -> lflags/ex_libs transition
Some last lflags to convert to ex_libs or a combo of lflags and ex_libs
Configure et al: split up the lflags configuration item into two
The lflags configuration had a weird syntax with a % as separator If it was present whatever came before ended up as PEX_LIBS in Makefile (usually this is LDFLAGS) while whatever came after ended up as EX_LIBS
This change splits that item into lflags and ex_libs making their use more explicit
Also PEX_LIBS in all the Makefiles are renamed to LDFLAGS
Make use of add() and add_before() in Configurations/
A few more sub-joins could be replaced with calls to add() and add_before()
Revert "Don't replace cflags with thread_cflags only append the latter"
This reverts commit a450326ee040c6cbb262debdb1ed731e6700e1e0
Merge error wrong domd submitted
Don't replace cflags with thread_cflags only append the latter
Remove clean-depend
Remove depend hacks from demos/engines Remove clean-depend; just call makedepend (or $CC -M) and use that
Make it possible to check for explicit auxiliary trust
By default X509_check_trust() trusts self-signed certificates from the trust store that have no explicit local trust/reject oids encapsulated as a "TRUSTED CERTIFICATE" object (See the -addtrust and -trustout options of x509(1))
This commit adds a flag that makes it possible to distinguish between that implicit trust and explicit auxiliary settings
With flags |= X509_TRUST_NO_SS_COMPAT a certificate is only trusted via explicit trust settings
Always DPURIFY
The use of the uninitialized buffer in the RNG has no real security benefits and is only a nuisance when using memory sanitizers
Remove x86_gcc_des,x86_gcc_opts
This is a followin from !1738 we no longer need those variables
Add have_precompute_mult tests
Add tests for have_precompute_mult for the optimised curves (nistp224 nistp256 and nistp521) if present
Fix bug in nistp224/256/521 where have_precompute_mult always returns 0
During precomputation if the group given is well known then we memcpy a well known precomputation However we go the wrong label in the code and don't store the data properly Consequently if we call have_precompute_mult the data isn't there and we return 0
RT#3600
Add missing return value checks
The function DH_check_pub_key() was missing some return value checks in some calls to BN functions
RT#4278
Correct value of DH_CHECK_PUBKEY_INVALID
A new return value for DH_check_pub_key was recently added: DH_CHECK_PUBKEY_INVALID As this is a flag which can be ORed with other return values it should have been set to the value 4 not 3
RT#4278
Implement Async SSL_shutdown
This extends the existing async functionality to SSL_shutdown() i.e SSL_shutdown() can now casuse an SSL_ERROR_WANT_ASYNC error to be returned from SSL_get_error() if async mode has been enabled
Keep RC5 bit shifts in [0..31]
Use callback for DSAPublicKey
PR#4277
Remove extraneous output from util/mk scripts
Remove outdated tests
These tests are not built and only usable as hand-tests so not worth moving into our test framework This closes https://github.com/openssl/openssl/pull/561 and RT 4252
Add more components to build
Add enable-crypto-mdebug enable-rc5 enable-md2 to any target that was --strict-warnings
Missed part of b4f35e
Correct number of arguments in BIO_get_conn_int_port macro
CHANGES and NEWS updates for release
Add details about the latest issues fixed in the forthcoming release
Add a test for small subgroup attacks on DH/DHE
Following on from the previous commit add a test to ensure that DH_compute_key correctly fails if passed a bad y such that:
y^q (mod p) != 1
Prevent small subgroup attacks on DH/DHE
Historically OpenSSL only ever generated DH parameters based on "safe" primes More recently (in version 1.0.2) support was provided for generating X9.42 style parameter files such as those required for RFC 5114 support The primes used in such files may not be "safe" Where an application is using DH configured with parameters based on primes that are not "safe" then an attacker could use this fact to find a peer's private DH exponent This attack requires that the attacker complete multiple handshakes in which the peer uses the same DH exponent
A simple mitigation is to ensure that y^q (mod p) == 1
CVE-2016-0701
Issue reported by Antonio Sanso
Fix typo in md2.h
Restore NUMPRIMES as a numeric literal
This fixes clang compilation problem with size_t NUMPRIMES and int loop counters
Add CRYPTO_secure_zalloc
Also turn B<foo> into foo() in the pod page
Comment side-effect only calls of X509_check_purpose
Remove EIGHT_BIT and SIXTEEN_BIT
Also cleaned up bn_prime.pl to current coding style
Remove outdated legacy crypto options
Many options for supporting optimizations for legacy crypto on legacy platforms have been removed This simplifies the source code and does not really penalize anyone DES_PTR (always on) DES_RISC1 DES_RISC2 (always off) DES_INT (always 'unsigned int') DES_UNROLL (always on) BF_PTR (always on) BF_PTR2 (removed) MD2_CHAR MD2_LONG (always 'unsigned char') IDEA_SHORT IDEA_LONG (always 'unsigned int') RC2_SHORT RC2_LONG (always 'unsigned int') RC4_LONG (only int and char (for assembler) are supported) RC4_CHUNK (always long) RC_CHUNK_LL (removed) RC4_INDEX (always on) And also make D_ENCRYPT macro more clear (@appro)
This is done in consultation with Andy
Fix check of what makedepprog should be
A mistake was made and the setting of this config variable got reverted to an older behavior This restores the latest
Test all built-in curves and let the library choose the EC_METHOD
Complete the removal of /* foo.c */ comments
Some files that are automatically generated still had those comments added by the generating scripts
Skip all explicitely if the number of tests is 0
It seems that Test::More doesn't like 0 tests a line like this raises an error and stops the recipe entirely:
plan tests => 0;
So we need to check for 0 tests beforehand and skip the subtest explicitely in that case
Fix typos
cryptograpic => cryptographic
Signed-off-by: Rich Salz <rsalz@openssl.org>
Be careful when applying EXE_SHELL
$EXE_SHELL should only be used with out own programs not with surrounding programs such as the perl interpreter
Doc fixes suggested by Claus Assmann
RT4264 RT4268
Fix Custom Extension tests skip count
Remove /* foo.c */ comments
This was done by the following find  -name '*.[ch]' | /tmp/pl where /tmp/pl is the following three-line script: print unless $ == 1 && m@/\* .*\.[ch] \*/@; close ARGV if eof; # Close file to reset $
And then some hand-editing of other files
SHARED_LIBS_LINK_EXTS is no longer used remove it completely
Remove unused undocumented clean-shared target
Also removes the make variable SHARED_LIBS_LINK_EXTS only used by the clean-shared target
When shared library linking was moved to the separate Makefile.shared in commit 30afcc072acd4f70590fec68bf0590da4e4f1883 this target was skipped Prior to that commit clean-shared was invoked as a dependency of build-shared but afterward it was no longer referenced anywhere in the tree
Instead of porting the functionality over to Makefile.shared just remove it entirely as it appears to be unused
RT4272: Unit tests fail when DTLS disabled
Missing SKIP: block in SSL unit tests for DTLS and TLS version tests
80-test_ca.t is made to use the new perlapp()
Have OpenSSL::Test handle perl scripts like any program
Since we're building some of our perl scripts and the result might not end up in apps/ (*) we may need to treat them like the compile programs we use for testing
This introduces perlapp() and perltest() which behave like app() and test() but will add the perl executable in the command line
-----
(*) For example with a mk1mf build the result will end up in $(BIN_D)
Add SSL_up_ref() and SSL_CTX_up_ref()
The SSL and SSL_CTX structures are reference counted However since libssl was made opaque there is no way for users of the library to manipulate the reference counts This adds functions to enable that
Remove dirs from mkfiles.pl
Recent changes have removed some directories which is causing mkfiles.pl to fail
Use the new OpenSSL::Test::Utils routines
Use Configure's @disablables and %disabled through configdata.pm
Enhances the routines in OpenSSL::Test::Utils for checking disabled stuff to get their information directly from Configure instead of 'openssl list -disabled'
Configure first in travis create release
Base the tarfile list of files on git ls-files instead of find
Ask for tests in CONTRIBUTING
Small Makefile.in cleanup
engines_obj changed name to padlock_obj in Configure We need to do the corresponding ENGINES_ASM_OBJ -> PADLOCK_ASM_OBJ in appropriate Makefile.ins
Small cleanups in Configure
- Small rearrangement of the TABLE and HASH printouts and adding printout of the "build_scheme" item - Renamed "engines_obj" to "padlock_obj" - Moved the runs of dofile down.. it didn't quite make sense to have that in the middle of a printout
Generate warning text
Now that we're using templates we should warn people not to edit the resulting file We do it through util/dofile.pl which is enhanced with an option to tell what file it was called from We also change the calls so the template files are on the command line instead of being redirected through standard input That way we can display something like this (example taken from include/openssl/opensslconf.h):
/* WARNING: do not edit! */ /* Generated by Configure from include/openssl/opensslconf.h.in */
Misc fixups
The goal is Makefile not Makefile.new Remove the second generation of opensslconf.h
Revert merge error
There are two versions of print_table_entry() in Configure Remove the older
Add some info in CHANGES about what's happening so far with Configure et al
Remove GOST again
The config for the removed GOST engine reappeared by mistake Now removed again
Refactor file writing - Remake Makefile.org into a template
It is time for Makefile.org to fold into the new regime and have a run through util/dofile.pl This forces some information out of there and into Configure which isn't a bad thing it makes Configure increasingly the center of build information which is as it should be
A few extra defaults were needed in the BASE template to get rid of warnings about missing values
Now that Configure doesn't produce tools/c_rehash mk1mf has to do it
For every test in 80-test_ssl.t check that the protocol(s) used is enabled
Make tests use configdata.pm rather than parsing Makefile
Move & split opensslconf.h.in
Move opensslconf.h.in to include/openssl Split off DES,BN,RC4 stuff into separate header file templates in crypto/include/internal/*_conf.h.in
Fix OpenSSL::Test::Simple to take more than one algorithm
Some test programs may depend on more than just one TLS version for example
Move pqueue into ssl
This is an internal facility never documented not for public consumption Move it into ssl (where it's only used for DTLS)
I also made the typedef's for pqueue and pitem follow our style: they name structures not pointers
Make sure apps/Makefile builds apps/CA.pl by default
The rehash.time target should depend on build_tools as well
The explanation is that it falls back to using tools/c_rehash if 'apps/openssl rehash' isn't supported on the platform at hand
Fix two possible leaks
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
GH: #580
Fix possible memory leak on BUF_MEM_grow_clean failure
Simplify BUF_MEM init code
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
GH: #580
Refactor file writing - make configdata.pm the info center for "reconf"
Now that configdata.pm is the centre of information use that instead of Makefile to figure out reconfiguration parameters This will help future development with different Makefile file names
The code to read necessary configuration data from Makefile is retained for an easy transition to configdata.pm based information gathering It will be removed later on
This change includes moving the variable $cross_compile_prefix to %config
String configs are truly deprecated not even somewhat supported any more
Remove extra unused variable in util/dofile.pl
Fix store with opaque data
When experimental-store is enabled it does not compile due to the change to opaque data structures
Change CRYPTO_add() to EVP_PKEY_up_ref() as needed
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
RT: #4263 GH: #579
free item after sk_push fail
Signed-off-by: Rich Salz <rsalz@openssl.org>
Disable jpake if psk is disabled
Refactor file writing - rewrite crypto/opensslconf.h.in as template
The turn has come to have crypto/opensslconf.h.in get run through util/dofile.pl The consequence is that a large number of variables get moved to the %config table
Also the string variables $openssl_* which were populated with cpp lines all being of the form "#define SOMETHING" were converted into ARRAY refs in %config values containing just the list of macros to be defined
Refactor file writing - Adapt util/mkdef.pl to use configdata.pm
For this adaptation the variables $options and $version needed to move to %config in Configure and why not move all other variables holding diverse version numbers at the same time?
Refactor file writing - information on our use of Perl and Perl modules
This includes a start on how to install missing modules
Refactor file writing - adapt util/dofile.pl to use with_fallback
Bundle the non core Perl module Text::Template
Because we're using Text::Template and we know it's a non core Perl module we choose to bundle it into our source for convenience
external/perl/Downloaded.txt document what modules we choose to bundle this way and exactly where we downloaded it from
With this changes comes the transfer module for with_fallback
Refactor file writing - arrange for use of bundled Perl modules as fallback
For our own convenience we need a mechanism to be able to fall back on bundled Perl modules It's a minimal package that's called like this:
use with_fallback qw(Module1 Module2 ...);
For each module it will try to require them from the system installation and failing that it will temporarly add external/perl and try to require transfer::{ModuleName} It requires that each bundled Perl modules is accompanied by a small transfer module (external/perl/transfer/ModuleName.pm in our example) that knows exactly what to load
Refactor file writing - introduce template driven file writing
apps/CA.pl and tools/c_rehash are built from template files So far this was done by Configure which created its own problems as it forced everyone to reconfigure just because one of the template files had changed Instead have those files created as part of the normal build in apps/ and in tools/
Furthermore this prepares for a future where Configure may produce entirely other build files than Makefile and the latter can't be guaranteed to be the holder of all information for other scripts Instead configdata.pm (described below) becomes the center of configuration information
This introduces a few new things:
%config a hash table to hold all kinds of configuration data that can be used by any other script configdata.pm a perl module that Configure writes It currently holds the hash tables %config and %target util/dofile.pl a script that takes a template on STDIN and outputs the result after applying configuration data on it It's supposed to be called like this:
perl -I$(TOP) -Mconfigdata < template > result
or
perl -I$(TOP) -Mconfigdata templ1 templ2 .. > result
Note: util/dofile.pl requires Text::Template
As part of this changed remove a number of variables that are really just copies of entries in %target and use %target directly The exceptions are $target{cflags} and $target{lflags} they do get copied to $cflags and $lflags The reason for this is that those variable potentially go through a lot of changes and would rather deserve a place in %config That however is for another commit
Refactor config - consolidate and refresh print_table_entry
It's time for print_table_entry to get a bit of refreshment The way it was put together we needed to maintain the list of known configuration keys of interest twice in different shapes This is error prone so move the list of strings to a common list for all printing cases and use simple formatting of lines to do the actual printout based on that list
Fix quoting error in SRP printf
The code is trying to interpolate the value of the BASE_SECTION macro but due to excess escaping it instead prints the string "BASE_SECTION"
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fixed typo in the SSL_CTX_set_security_level
Signed-off-by: Rich Salz <rsalz@openssl.org>
Cleanup .gitignore
Some things to ignore need to be properly rooted and use a bit more precision on ignoring 'lib' as that maybe be a perfectly valid directory name to add into git elsewhere in the source tree
Configurations - no_asm_filler is long gone don't use it
Fix build failure with CIPHER_DEBUG
Signed-off-by: Rich Salz <rsalz@openssl.org>
isalist(1) is obsolete; use isainfo(1)
Signed-off-by: Rich Salz <rsalz@openssl.org>
Updated OSSL_DYNAMIC_VERSION/OSSL_DYNAMIC_OLDEST
Change to reflect changes in dynamic_fns
Signed-off-by: Rich Salz <rsalz@openssl.org>
dsatest: use the correct BIO to print the test error
Signed-off-by: Rich Salz <rsalz@openssl.org>
few typo fixes
Signed-off-by: Rich Salz <rsalz@openssl.org>
Remove outdated conftest.c
Refactor config - @MK1MF_Builds out general build scheme in
Time to get rid of @MK1MF_Builds and introduce a more flexible 'build_scheme' configuration key Its value may be a string or an array of strings meaning we need to teach resolve_config how to handle ARRAY referenses
The build scheme is a word that selects a function to create the appropriate result files for a certain configuration Currently valid build schemes aer "mk1mf" and "unixmake" the plan is however to add at least one other for a more universal build scheme
Incidently this also adds the functions 'add' and 'add_before' which can be used in a configuration so instead of having to repeatedly write a sub like this:
key1 => sub { join(" " @_ "myvalues"); } key2 => sub { join(" " "myvalues" @_); }
one could write this:
key1 => add(" " "myvalues") key2 => add_before(" " "myvalues")
The good point with 'add' and 'add_before' is that they handle inheritances where the values are a misture of scalars and ARRAYs If there are any ARRAY to be found the resulting value will be an ARRAY otherwise it will be a scalar with all the incoming valued joined together with the separator given as first argument to add/add_before
Refactor config - move templates and template docs to Configurations
Move the documentation of the target configuration form to Configurations/README
Move initial assembler object templates to Configurations/00-BASE-templates.conf
Furthermore remove all variables containing the names of the non-assembler object files and make a BASE template of them instead The values from this templates are used as defaults as is The remaining manipulation of data when assembler modules are used is done only when $no_asm is false
While doing this clean out some other related variables that aren't used anywhere
Also we had to move the resolution of the chosen target a bit or the function 'asm' would never catch a true $no_asm.. this hasn't mattered before we've moved it all to the BASE template but now it does
At the same time add the default for the 'unistd' key to the BASE template
Refresh the thinking of --prefix and --openssldir
--prefix is now exclusively used for software and manual installation --openssldir is not exclusively used as a default location for certs keys and the default openssl.cnf
This change is made to bring clarity to have the two less intertwined and to be more compatible with the usual ways of software installation
Please change your habits and scripts to use --prefix rather than --openssldir for installation location now
RT3863 ECC: Add missing NULL check Set a flag
Refactor config - throw away the last remains of '--test-sanity'
Refactor config - consolidate handling of disabled stuff
It's time to refactor the handling of %disabled so that all information of value is in the same place We have so far had a few cascading disable rules in form of code far away from %disabled Instead bring that information to the array @disable_cascade which is a list of pairs of the form 'test => descendents' The test part can be a string and it's simply checked if that string is a key in %disabled or it can be a CODEref to do a more complex test If the test comes true then all descendents are disabled This check is performed until there are no more things that need to be disabled
Also $default_depflags is constructed from the information in %disabled instead of being a separate string While a string of its own is visually appealing it's much too easy to forget to update it when something is changed in %disabled
Refactor config - rewrite handling of "reconf"
The way the "reconf"/"reconfigure" argument is handled is overly complicated Just grep for it first and if it is there in the current arguments get the old command line arguments from Makefile
While we're at it make the Makefile variable CONFIGURE_ARGS hold the value as a perl list of strings This makes things much safer in case one of the arguments would contain a space Since CONFIGURE_ARGS is used for nothing else there's no harm in this
Multiple -trusted/-untrusted/-CRLfile options in verify
It is sometimes useful (especially in automated tests) to supply multiple trusted or untrusted certificates via separate files rather than have to prepare a single file containing them all
To that end change verify(1) to accept these options zero or more times Also automatically set -no-CAfile and -no-CApath when -trusted is specified
Improve verify(1) documentation which could still use some work
Refactor apps load_certs/load_crls to work incrementally
More X509_verify_cert() tests via verify(1)
Still need tests for trusted-first and tests that probe construction of alternate chains
Reject when explicit trust EKU are set and none match
Returning untrusted is enough for for full chains that end in self-signed roots because when explicit trust is specified it suppresses the default blanket trust of self-signed objects
But for partial chains this is not enough because absent a similar trust-self-signed policy non matching EKUs are indistinguishable from lack of EKU constraints
Therefore failure to match any trusted purpose must trigger an explicit reject
Commit pre-generated test_verify certs
These can be re-generated via:
cd test/certs; ./setup.sh
if need be The keys are all RSA 2048-bit keys but it is possible to change that via environment variables
cd test/certs rm -f *-key.pem *-key2.pem OPENSSL_KEYALG=rsa OPENSSL_KEYBITS=3072 ./setup.sh
cd test/certs rm -f *-key.pem *-key2.pem OPENSSL_KEYALG=ecdsa OPENSSL_KEYBITS=secp384r1 ./setup.sh
..
Keys are re-used if already present so the environment variables are only used when generating any keys that are missing Hence the "rm -f"
Scripts to generate verify test certs
Check Suite-B constraints with EE DANE records
When DANE-EE(3) matches or either of DANE-EE/PKIX-EE fails we don't build a chain at all but rather succeed or fail with just the leaf certificate In either case also check for Suite-B violations
As unlikely as it may seem that anyone would enable both DANE and Suite-B we should do what the application asks
Took the opportunity to eliminate the "cb" variables in x509_vfy.c just call ctx->verify_cb(ok ctx)
Refactor config - split read_config into read_config and resolve_config
Split the read_config function into read_config that ONLY reads the configuration files but doesn't try to resolve any of the inheritances and resolve_config which resolves the inheritance chain of a given target Move them to the bottom of Configure with the rest of the helpers
Have a new small hash table %target which will hold the values for the target the user requested This also means that all access to the current target data can be reduced from '$table{$target}->{key}' to a mere '$target{key}'
While we're at it the old string formatted configurations are getting obsolete so they may as well get deprecated entirely
Refactor config - throw away '--test-sanity'
Get rid of the --test-sanity option Since we no longer have string based configurations we don't have the problem with miscounting colons any more
Refactor config - a small cosmetic touchup of Configure
Start simple removed some unused variables and change all '<<EOF' to '<<"EOF"' The latter is because some code colorizers (notably in emacs) cannot recognise the here document end marker unless it's quoted and therefore assume the rest of the file is part of the here document
Add an engine destructor to eng_cryptodev
Adapt BSD cryptodev engine to opaque EVP_MD_CTX EVP_CIPHER_CTX etc
Remove update tags
Also remove depend/local_depend
Consolidate "make update"
Rename 'update' to 'generate' Rather than recurse just explicitly call the three generate targets directly
Handle SSL_shutdown while in init more appropriately
Calling SSL_shutdown while in init previously gave a "1" response meaning everything was successfully closed down (even though it wasn't) Better is to send our close_notify but fail when trying to receive one
The problem with doing a shutdown while in the middle of a handshake is that once our close_notify is sent we shouldn't really do anything else (including process handshake/CCS messages) until we've received a close_notify back from the peer However the peer might send a CCS before acting on our close_notify - so we won't be able to read it because we're not acting on CCS messages!
make EVP_PKEY opaque
Remove the GOST engine
The GOST engine is now out of date and is removed by this commit An up to date GOST engine is now being maintained in an external repository
See: https://wiki.openssl.org/index.php/Binaries
Fix BSD -rpath parameter
For BSD systems Configure adds a shared_ldflags including a reference to the Makefile variable LIBRPATH but since it must be passed down to Makefile.shared care must be taken so the value of LIBRPATH doesn't get expanded too early or it ends up giving an empty string
API compat for SSLeay_add_ssl_algorithms
Validate ClientHello session_id field length and send alert on failure
RT#4080
prf redirection build fixes
Update license year range to 2016
Signed-off-by: Rich Salz <rsalz@openssl.org>
Support disabling any or all TLS or DTLS versions
Some users want to disable SSL 3.0/TLS 1.0/TLS 1.1 and enable just TLS 1.2 In the future they might want to disable TLS 1.2 and enable just TLS 1.3 ..
This commit makes it possible to disable any or all of the TLS or DTLS protocols It also considerably simplifies the SSL/TLS tests by auto-generating the min/max version tests based on the set of supported protocols (425 explicitly written out tests got replaced by two loops that generate all 425 tests if all protocols are enabled fewer otherwise)
Add documentation for EVP_PKEY_TLS1_PRF
add TLS1-PRF tests
Add TLS1-PRF test support to evp_test
use TLS PRF
Modify libssl to use EVP_PKEY TLS PRF
Add TLS PRF method
Add EVP_PKEY algorithm for TLS1 PRF
Fix GOST2012-NULL-GOST12
Fix a typo in the definition of the GOST2012-NULL-GOST12 ciphersuite
RT#4213
Drop cached certificate signature validity flag
It seems risky in the context of cross-signed certificates when the same certificate might have multiple potential issuers Also rarely used since chains in OpenSSL typically only employ self-signed trust-anchors whose self-signatures are not checked while untrusted certificates are generally ephemeral
Don't use "grep -q" "-q" is not POSIX and fails on Solaris
Add some extra Cygwin targets as aliases for Cygwin-x86
Cygwin was used for x86 before so let's keep it around for those who still use it (it make Configure reconf possible) Cygwin-i[3456]86 for those that might generate and pass a target name directly to Configure
Adjust the configuration target name from Cygwin-i686 to Cygwin-x86
This is to reflect that it's not limited to just i686
Fix configuration system to support different architectures on Cygwin
This patch allows to recognize the architectures supported by Cygwin and to choose the right configuration from there Drop -march to use default architecture on 32 bit x86
Drop pre-Cygwin-1.3 recognition since it's long gone and there's no valid configuration for this anymore
Signed-off-by: Corinna Vinschen <vinschen@redhat.com>
Don't strip object files on Cygwin
Building for the Cygwin distro requires to be able to build debuginfo files This in turn requires to build object files without stripping The stripping is performed by the next step after building which creates the debuginfo files
Signed-off-by: Corinna Vinschen <vinschen@redhat.com>
Use POSIX functions on Cygwin not Win32 function
Signed-off-by: Corinna Vinschen <vinschen@redhat.com>
Fix build break; restore missing target
Fix function declarations
Accessor update; fix API document one
Remove some old makefile targets
Remove lint tags dclean tests This is prep for a new makedepend scheme This is temporary pending unified makefile and might help it
Add some accessors
GH334: Add an OCSP_SINGLERESP_get0_id() accessor to the OCSP_CERTID of a OCSP_SINGLERESP It is possible to do it the other way around using OCSP_resp_find() but this is more efficient when you have a tree indexed by OCSP_CERTID like haproxy does (This is also RT4251)
GH556: OCSP_resp_get_produced_at() accessor to the producedAt of a OCSP_BASICRESP GH555: TS_STATUS_INFO_get_status() TS_STATUS_INFO_get_text() and TS_STATUS_INFO_get_failure_info() accessors for a TS_STATUS_INFO
Signed-off-by: Rich Salz <rsalz@openssl.org>
RT4247: Add missing patch
Missed the camellia EVP update
The TLSProxy tests can't run if no-engine has been configured
Make sure they detect that
fix no-engine build
Start a new line after each sentence-ending period
This avoids explicit double spaces between sentences
Make SSL_dane_enable() requirement more clear
Also s/s/ssl/ as appropriate in the code example
Suggested by Claus Assmann
Better invalid SNI name error handling
Also report an SSL_dane_enable error when the basedomain is an invalid SNI name Avoid side-effects when such a name is valid with X509_VERIFY_PARAM_set1_host() as e.g with an empty name by setting the SNI name first
Empty SNI names are not valid
While empty inputs to SSL_set1_host() clear the reference identifier list
RT4247: Fix EVP_CIPHER_CTX opaque on sparc
Via Rainer Jung
free up gost ciphers
Add lookup_certs for a trusted stack
NGX-2040 - fix wildcard match on punycode/IDNA DNS names
- bugfix: should not treat '--' as invalid domain substring - '-' should not be the first letter of a domain
Signed-off-by: Viktor Dukhovni <viktor@openssl.org>
Fix typo
Update Windows installation instructions
The windows installation instructions were very out of date Substantial update to the text Remove a lot of historical stuff that isn't relevant any more and merge the win64 and win32 instructions into one file
Rename INSTALL.W32 to INSTALL.WIN
Also remove the INSTALL.W64 file Next commit will update INSTALL.WIN to cover both
Small fixup an extra line slipped in
The previous 'Relax the requirements for a debug build' commit had an extra line of code that shouldn't have been there This fixes it
Cosmetic polish for last-resort depth 0 check
Avoid the r modifier for s/// (perl)
It seems that the r modifier for s/// is fairly new It's reported not to exist in perl 5.10.1 so it's better to avoid it when possible
Fix last-resort depth 0 check when the chain has multiple certificates
Add a no-egd option to disable EGD-related code
The entropy-gathering daemon is used only on a small number of machines Provide a configure knob so that EGD support can be disabled by default but re-enabled on those systems that do need it
Make SSL_set_debug deprecated in 1.1
Always initialize X509_STORE_CTX get_crl pointer
Editorial
In __cwd make sure the given directory is seen as such and not a file
On Unixly platforms this doesn't matter On VMS it does
Relax the requirements for a debug build
We required that a target be named 'debug-something' or to have at least one of the configuration items debug_cflags and debug_lflags for --debug to be accepted
However there are targets with no such markings but that will still have debugging capabilities This is particularly true for mk1mf builds where the extra flags for debugging are figured out later on by util/mk1mf.pl
RT4232: Extra space in help message
It turns out that -pause calls the undocumented function SSL_set_debug That just sets flag inside the SSL structure That flag despite the command is never used So remove the flag the field and the function
EDH >= 1024 bits even at security level 0
Prepare for 1.1.0-pre3-dev
Prepare for 1.1.0-pre2 release
Change the last copyright year to 2016 in README
VMS open() doesn't take O_BINARY but takes a context description
Tell open() O_BINARY on VMS doesn't make sense as it's possible to use more precise file attributes However if we're still going to fdopen() it in binary mode we must set the fd in binary context
Rename binmode into textmode and use it correctly
Do not use redirection on binary files
On some platforms the shell will determine what attributes a file will have so while the program might think it's safely outputting binary data it's not always true
For the sake of the tests it's therefore safer to use -out than to use redirection
Fall back to c_rehash if 'openssl rehash' fails
'openssl rehash' isn't implemented on all platforms and since 'make test' depends on a rehash of certs/demo being performed it becomes an effective block from running tests on any platform but Unix for the moment
It's better to fall back to c_rehash and let the tests perform everywhere
Call single parent free_comp routine
To avoid possible time_t overflow use X509_time_adj_ex()
Fix double-free bugs in EC group precomputation state
Add a directry spec for mcr if there is none
On VMS the command MCR will assume SYS$SYSTEM: when the first argument lacks a directory spec So for programs in the current directory we add [] to tell MCR it is in the current directory It's the same as having ./ at the start of a program on Unix so the shell doesn't start looking along $PATH
Fix verify(1) to report failure when verification fails
Regenerated expired test certificates good for the next 100 years
Fix nistp512 typos should be nistp521
Note this now compiles but fails tests so further remediation is required
Add missing #ifdef's to fix build break
For stro[ui]max require both C99 and UINTMAX_MAX/INTMAX_MAX
Fix test_ordinals
This used to work but somewhere along the line it broke and was failing to detect duplicate ordinals - which was the whole point of the test!
Reorder the ordinals in libeay.num
Remove spurious ;
Quick fix of debugging option for mk1mf.pl
util/mk1mf.pl was relying on the platform having the 'debug-' prefix for doing a debug build Since the setup of targets has changed this is no longer true However it can look for '--debug' in the command line options
VMS C doesn't provide intmax_t/uinmax_t use our own
Add CRYPTO_EX_DATA; remove EC_EXTRA_DATA
Add CRYPTO_EX_DATA add EndC_KEY_[gs]et_method From Roumen Petrov Had to add various exdata calls to init/copy/free the exdata Had to remove const from some EC functions because exdata isn't const-correct :( Also remove EC_EXTRA_DATA and use a union to hold the possible pre-computed values and an enum to tell which value is in the union (Rich Salz)
Remove test_probable_prime_coprime from test/bntest.c
This test relies on a private function which isn't exported This test would work better as a unit test in crypto/bn/bn_prime.c
Simplify the EXIT macrot for VMS
recognise no-crypto-mdebug
VMS perl doesn't implement fork() so don't run the TLSProxy tests there
Fix DES_LONG breakage
For some strange reason opensslconf.h was only defining DES_LONG when included via des.h but that's exceedingly fragile (as a result of include guards the include via des.h might not actually process the content again)
Ripped out the nesting constraint now always define OSSL_DES_LONG if not already defined Note this could just be DES_LONG but trying to avoid exposing DES_LONG in places where it has never been seen before so it is up to des.h to actually define DES_LONG as OSSL_DES_LONG
For stroimax need C99 inttypes.h
Don't return from main() use EXIT() instead
Have the VMS exit code follow POSIX conventions
It seems like the convention for VMS exit codes is to combine the VMS C facility code (0x35a000) with a recoded exit code as follows:
0 => 1 1-255 => 8*code + 2
We also add 0x10000000 which is the control bit that has DCL not report the error on the terminal That's just as well since it would be quite nonsensical for example:
%C-W-NOMSG Message number 0035A018
We could do all this by using the normal exit() function after having defined the macro _POSIX_EXIT Unfortunately this feature only exists in VMS C V7.1 and up
After EVP_CIPHER turned opaque e_rc5.c needs to include evp_int.h
We missed this one because rc5 is disabled by default
Notified by The Doctor <doctor@doctor.nl2k.ab.ca>
Pipes on VMS do not work well with binary data use an intermediary file
VMS being a record oriented operating system it's uncertain how the 'pipe' passes binary data from one process to another Experience shows that we get in trouble and it's probably due to the pipe in itself being opened in text mode (variable length records)
It's safer to pass data via an intermediary file instead
Fix test/recipes/80-test_ca.t to work on VMS
VMS uses a variant of openssl.cnf named openssl-vms.cnf
There's a Perl on VMS mystery where a open pipe will not SIGPIPE when the child process exits which means that a loop sending "y\n" to it will never stop Adding a counter helps fix this (set to 10 we know that none of the CA.pl commands will require more)
VMS will downcase all command parameters unless they're quoted
Fix missing casts for c++
Maximize time_t when intmax_t is available
Well I'm not actually changing time_t just changing how time_t valued opt values are converted from string to time_t
Fix typo in error message
Move Makefiles to Makefile.in
Create Makefile's from Makefile.in Rename Makefile.org to Makefile.in Rename Makefiles to Makefile.in Address review feedback from Viktor and Richard
STACK_OF(SSL_COMP) is a public type
fix jpaketest and correct comment
Correct a small typo in CHANGES
Add notes in CHANGES and NEWS
Remove unused internal macros
The M_EVP_* macros related to EVP_CIPHER / EVP_CIPHER_CTX are not public and are unused
make update
Document the new EVP_CIPHER and EVP_CIPHER_CTX functionality
Add back deprecated functions in macro form
Adapt all EVP_CIPHER users for it becoming opaque
EVP_CIPHER_CTX_new_cipher_data was a temporary measure not needed any more
Adapt all engines that need it to opaque EVP_CIPHER
Adapt builtin cipher implementations to opaque EVP_CIPHER
They all stop including evp_locl.h so we also take care of their adaptation to opaque EVP_CIPHER_CTX as was promised in an earlier commit
Adapt the internal EVP routines to opaque EVP_CIPHER
Make EVP_CIPHER opaque and add creator/destructor/accessor/writer functions
We follow the method used for EVP_MD Also move all the internal EVP_CIPHER building macros from evp_locl.h to evp_int.h This will benefit our builtin EVP_CIPHERs
Remove EVP_CIPHER_CTX_flags it's only confusing
EVP_CIPHER_CTX_flags was returning the flags of its associated EVP_CIPHER However EVP_CIPHER_CTX has flags of its own so this function is quite confusing and therefore error prone
Adapt all EVP_CIPHER_CTX users for it becoming opaque
Adapt cipher implementations to opaque EVP_CIPHER_CTX
Note: there's a larger number of implementations in crypto/evp/ that aren't affected because they include evp_locl.h They will be handled in a separate commit
Adapt the internal EVP routines to opaque EVP_CIPHER_CTX
Add accessors and writers for EVP_CIPHER_CTX
New functions:
- EVP_CIPHER_CTX_encrypting() - EVP_CIPHER_CTX_iv() - EVP_CIPHER_CTX_iv_noconst() - EVP_CIPHER_CTX_original_iv() - EVP_CIPHER_CTX_buf_noconst() - EVP_CIPHER_CTX_num() - EVP_CIPHER_CTX_set_num() - EVP_CIPHER_CTX_cipher_data() - EVP_CIPHER_CTX_new_cipher_data()
Note that the accessors / writers for iv buf and num may go away as those rather belong in the implementation's own structure (cipher_data) when the implementation would affect them (that would be the case when they are flagged EVP_CIPH_CUSTOM_IV or EVP_CIPH_FLAG_CUSTOM_CIPHER)
Make EVP_CIPHER_CTX opaque and renew the creator / destructor functions
Following the method used for EVP_MD_CTX and HMAC_CTX EVP_CIPHER_CTX_init and EVP_CIPHER_CTX_cleanup are joined together into one function EVP_CIPHER_CTX_reset with EVP_CIPHER_CTX_init kept as an alias EVP_CIPHER_CTX_cleanup fills no purpose of its own any more and is therefore removed
RT4227: Range-check in apps
Implement range-checking in all counts in apps Turns out only a couple of cases were missing And make the range-checking code more strict Replace almost all opt_ulong() calls with opt_long()
Yet another make update
Make sure to have both upper and mixed case symbols in SYMBOL_VECTOR
It was assumed that the syntax FOO/Foo=PROCEDURE would create both an upper case and mixed case symbol in the GST Not so it requires having both FOO/Foo=PROCEDURE (to create the upper case alias) and Foo=PROCEDURE (to create the mixed case slot)
We make sure that any symbol always occupies two slots (even those that don't exist) by filling up with SPARE when necessary That will assure that any changes will still have the same symbols in the same slots no matter what (save a complete rewrite of the ordinals files)
Use SPARE instead of PRIVATE_PROCEDURE to reserve unused SYMBOL_VECTOR slots
It was assumed that a dummy with the type PRIVATE_PROCEDURE would simply occupy a slot but otherwise ignore the symbol Not so but there is SPARE for that purpose
The limit per SYMBOL_VECTOR isn't the amount of symbols it's the line length
VMS INDENTIFICATION should only have the version number
GH528: "cipher -v" output is confusing
Fix the docs and refactor some common code
Have mkdef.pl use case sensitive symbols for shareable symbol vector
Function pop_info() returned a dangling pointer
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
update ordinals
Use ossl_inline and DEFINE_LHASH_OF
Remove mkstack.pl: it is no longer needed
Add lh_doall_arg inlining
Add lh_doall inlining
Add lh_new() inlining
Inline LHASH_OF
Make LHASH_OF use static inline functions
Add new lh_get_down_load and lh_set_down_load functions and their typesafe inline equivalents
Make lh_error a function instead of a macro
GH540: add casts to safestack.h
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fix jpaketest compilation error
Only run DANE tests when EC is supported
Since danetest is to test DANE rather than specific algorithms it's acceptable to require EC when testing it
Make SSL{_CTX,}_{get,set,clear}_options functions
These now take and return unsigned long and get is constified Updated related documentation and util/ssleay.num
Adjust $default_depflags to changes in Configure
We use $default_depflags to check if a 'make depend' is needed after configuring so it needs to be kept up to date
Fix NSS format session output
Commit 189ae368d91 (RT ticket 3352) provided the capability to output session key data in NSS format The big apps cleanup broke that capability This commit restores it
RT#4201
Update leak test to check return values
Add memory leak return value
Make CRYPTO_mem_leaks() and CRYPTO_mem_leaks_fp() return a status value Update documentation Don't abort() if there are leaks
Enable/disable crypto-mdebug just like other features
Also always abort() on leak failure
Disable some algorithms by default
Regenerate SSL record/statem error strings
fix shadow warning
File is about s_time not s_client
Allow disabling the min and max version
Future-proof deprecated declartion parsing
Support two-digest major/minor/micro numbers and die when the input fails to parse
RT41897: Add an CRYPTO_secure_actual_size
This is already documented I just forgot to include the code :)
Fix c++ compilation
Fixes https://github.com/openssl/openssl/issues/532
Signed-off-by: Rich Salz <rsalz@openssl.org>
Adds missing type casts
This fixes https://github.com/openssl/openssl/issues/534
Signed-off-by: Rich Salz <rsalz@openssl.org>
Adds crypto-mdebug as a valid option
Adds crypto-mdebug as a valid option Fixes https://github.com/openssl/openssl/issues/537
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fix build failure on Windows
Fixes https://github.com/openssl/openssl/issues/530
Signed-off-by: Rich Salz <rsalz@openssl.org>
update ordinals
Add DEPRECATEDIN support
Correct header defines
remove hard coded algorithms
Recognise disabled algorithms automatically
Fix no CRYPTO_MDEBUG build (windows)
In order for mkdep to find #ifdef'd functions they must be wrapped (in the header file) with #ifndef OPENSSL_NO_.. So do that for various CRYPTO_mem_debug.. things
Fixup actually update danetest.c
Another portability fix
Update comment as bn_dup_expand is gone
Simplify deprecated declaration exception
Portability fix for apps/s_client.c
Make some local variables and a table of them be static
DANE CHANGES
Fix some typos in comments
Backwards-compatibility subject to OPENSSL_API_COMPAT
Provide backwards-compatiblity for functions macros and include files if OPENSSL_API_COMPAT is either not defined or defined less than the version number of the release in which the feature was deprecated
DANE s_client support
Remove all remaining traces if PEM_Seal
Minor test update
* Remove extraneous test/Makefile.orig * Use basedomain instead of argv[1] in test/danetest.c
Fix another build break for no-mem-debug
Fix build-break; 'make update'
Commit bbd86bf5424a611cb6b77a3a17fc522931c4dcb8 broke certain builds Commit 0674427f71ca050e3c61a7ec9dc71b208c3b39f5 missing 'make update'
mem functions cleanup
Only two macros CRYPTO_MDEBUG and CRYPTO_MDEBUG_ABORT to control this If CRYPTO_MDEBUG is not set #ifdef out the whole debug machinery (Thanks to Jakob Bohm for the suggestion!) Make the "change wrapper functions" be the only paradigm Wrote documentation! Format the 'set func' functions so their paramlists are legible Format some multi-line comments Remove ability to get/set the "memory debug" functions at runtme Remove MemCheck_* and CRYPTO_malloc_debug_init macros Add CRYPTO_mem_debug(int flag) function Add test/memleaktest Rename CRYPTO_malloc_init to OPENSSL_malloc_init; remove needless calls
Remove the old VMS linker option file creator for shlibs
Enhance util/mkdef.pl to provide a VMS linker option file for shlibs
Remove crypto/pem/pem_seal.c
It's functionality appears unused If we're wrong we will revert
DANE support for X509_verify_cert()
use more descriptive name DEFINE_STACK_OF_CONST
Only declare stacks in headers
Don't define stacks in C source files: it causes warnings about unused functions in some compilers
Rename DECLARE*STACK_OF to DEFINE*STACK_OF
Applications wishing to include their own stacks now just need to include
DEFINE_STACK_OF(foo)
in a header file
remove unused PREDECLARE
Fix declarations and constification for inline stack
Change STACK_OF to use inline functions
Change DECLARE_STACK_OF into inline functions This avoids the need for auto generated mkstack.pl macros and now handles const properly
DANE make update
DANE documentation typos
Reported-by: Claus Assmann
Remove more (rest?) of FIPS build stuff
Remove some unused perl scripts
DANE support structures constructructors and accessors
Also tweak some of the code in demos/bio to enable interactive testing of BIO_s_accept's use of SSL_dup Changed the sconnect client to authenticate the server which now exercises the new SSL_set1_host() function
Fix X509_STORE_CTX_cleanup()
Drop incorrect id == -1 case from X509_check_trust
X509_verify_cert() cleanup
Cleanup of verify(1) failure output
Instead of a local hack implement SIZE_MAX in numbers.h if it's missing
Fix a possible memleak
If there's a failure allocating md_data the destination pctx will have a shared pointer with the source EVP_MD_CTX which will lead to problems when either the source or the destination is freed
Protocol version selection and negotiation rewrite
The protocol selection code is now consolidated in a few consecutive short functions in a single file and is table driven Protocol-specific constraints that influence negotiation are moved into the flags field of the method structure The same protocol version constraints are now applied in all code paths It is now much easier to add new protocol versions without reworking the protocol selection logic
In the presence of "holes" in the list of enabled client protocols we no longer select client protocols below the hole based on a subset of the constraints and then fail shortly after when it is found that these don't meet the remaining constraints (suiteb FIPS security level ...) Ideally with the new min/max controls users will be less likely to create "holes" in the first place
Refine and re-wrap Min/Max protocol docs
Add support for minimum and maximum protocol version
Fix no-dh
remove invalid free
Use X509_get0_pubkey where appropriate
Update to SHA256 for TSA signing digest
Fix faulty check in the VMS version of opt_progname
Remove the #ifndef OPENSSL_SYS_VMS around SSL_add_dir_cert_subjects_to_stack
It served a purpose but not any more
Correct missing prototype
SIZE_MAX doesn't exist everywhere supply an alternative
SIZE_MAX is a great macro and does unfortunately not exist everywhere Since we check against half of it using bitwise shift to calculate the value of half SIZE_MAX should be safe enough
Fix some missing or faulty header file inclusions
Check for missing DSA parameters
If DSA parameters are absent return -1 (for unknown) in DSA_security_bits
If parameters are absent when a certificate is set in an SSL/SSL_CTX structure this will reject the certificate by default This will cause DSA certificates which omit parameters to be rejected but that is never (?) done in practice
Thanks to Brian 'geeknik' Carpenter for reporting this issue
Convert RSA encrypt to use EVP_PKEY
Prefer ReuseAddr over Reuse with IO::Socket::INET
Reuse is deprecated and ReuseAddr is prefered according to documentation
Fix no-engine
RT4202: Update rt URL's
make a "missed make update" update
Increase the max size limit for a CertificateRequest message
Previous versions of OpenSSL had the max size limit for a CertificateRequest message as |s->max_cert_list| Previously master had it to be SSL3_RT_MAX_PLAIN_LENGTH However these messages can get quite long if a server is configured with a long list of acceptable CA names Therefore the size limit has been increased to be consistent with previous versions
RT#4198
Simplify calling of the OCSP callback
Move all calls of the OCSP callback into one place rather than repeating it in two different places
Add some documentation for the OCSP callback functions
Describe the usage of the OCSP callback functions on both the client and the server side
Ensure we don't call the OCSP callback if resuming a session
It makes no sense to call the OCSP status callback if we are resuming a session because no certificates will be sent
Fix error when server does not send CertificateStatus message
If a server sends the status_request extension then it may choose to send the CertificateStatus message However this is optional We were treating it as mandatory and the connection was failing
Thanks to BoringSSL for reporting this issue
RT#4120
Add test for missing CertificateStatus message
If the client sends a status_request extension in the ClientHello and the server responds with a status_request extension in the ServerHello then normally the server will also later send a CertificateStatus message However this message is *optional* even if the extensions were sent This adds a test to ensure that if the extensions are sent then we can still omit the message
fix no-ec
Server side EVP_PKEY DH support
utility function
EVP_PKEY DH client support
Always generate DH keys for ephemeral DH cipher suites
The functions take a SSL * not a SSL_CTX *
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
RT: #4192 MR: #1533
redundant redeclaration of 'OPENSSL_strlcpy'
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
MR: #1523
__STDC_VERSION__ is not defined for c89 compilers
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
MR: #1522
remove duplicates in util/libeay.num
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
RT: #4195 MR: #1521
Remove SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER and SSL_OP_TLS_D5_BUG support
Suggested by David Benjamin
MR: #1520
Avoid using a dangling pointer when removing the last item
When it's the last item that is removed int_thread_hash == hash and we would still call int_thread_release(&hash) while hash is already freed So int_thread_release would compare that dangling pointer to NULL which is undefined behaviour Instead do already what int_thread_release() would do and make the call do nothing instead
RT: #4155 MR: #1519
Memory leak in state machine in error path
When EC is disabled and an error occurs in ssl_generate_master_secret() or RAND_bytes() the error path does not free rsa_decrypt
RT#4197
Refactor DTLS cookie generation and verification
DTLS cookie generation and verification were exact copies of each other save the last few lines This refactors them to avoid code copying
Fix inline build failure
After the recent change to use ossl_inline builds were failing on some platforms due to a missing usage of "inline"
Add ossl_inline
Add macro ossl_inline for use in public headers where a portable inline is required Change existing inline to use ossl_inline
add -unref option to mkerr.pl
In mkerr.pl look in directories under ssl/
remove unused error code
make update
unload modules in ssltest
make errors
SSL configuration module docs
Demo server using SSL_CTX_config
Add ssl configuration support to s_server and s_client
Load module in SSL_library_init
Add ssl_mcnf.c to Makefile
SSL library configuration module
This adds support for SSL/TLS configuration using configuration modules Sets of command value pairs are store and can be replayed through an SSL_CTX or SSL structure using SSL_CTX_config or SSL_config
Cleanup CRYPTO_{push,pop}_info
Rename to OPENSSL_mem_debug_{push,pop} Remove simple calls; keep only calls used in recursive functions Ensure we always push to simplify so that we can always pop
Rename *_realloc_clean to *_clear_realloc
Just like *_clear_free routines Previously undocumented used a half-dozen times within OpenSSL source
Also change the non-debug versions to use size_t
MR: #1518
Fix memory leak in DSA redo case
Found by clang scan-build
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
RT: #4184 MR: #1496
Configure: refine 'reconf' logic
bn/asm/bn-c64xplus.asm: update commentary
sha/asm/sha256-armv4.pl: one of "universal" flags combination didn't compile (and unify table address calculation in ARMv8 code path)
Fix URLs mangled by reformat
Some URLs in the source code ended up getting mangled by indent This fixes it Based on a patch supplied by Arnaud Lacombe <al@aerilon.ca>
Fix the etags action line as etags doesn't take -R
Remove fixed DH ciphersuites
Remove all fixed DH ciphersuites and associated logic
delete unused context
Remove some L<asdf|asdf> which crept back in
Remove err and prime demo's
ERR is not really a public facility; remove the demo prime shows how to generate a prime See apps
Remove the "eay" c-file-style indicators
Since we don't use the eay style any more there's no point tryint to tell emacs to use it
Add SSL_CIPHER_description() for Chacha20/Poly1305
SSL_CIPHER_description() was returning "unknown" for the encryption in the new ChaCha20/Poly1305 TLS ciphersuites
RT#4183
Modify the lower level memory allocation routines to take size_t
We've been using int for the size for a long time it's about time..
mem-cleanup cont'd
Remove LEVITTE_DEBUG_MEM Remove {OPENSSL,CRYPTO}_remalloc
Rename sec_mem to mem_sec like other files
Fix typo
Provide better "make depend" warning
Fix no-dgram
Rename some BUF_xxx to OPENSSL_xxx
Rename BUF_{strdup,strlcat,strlcpy,memdup,strndup,strnlen} to OPENSSL_{strdup,strlcat,strlcpy,memdup,strndup,strnlen} Add #define's for the old names Add CRYPTO_{memdup,strndup} called by OPENSSL_{memdup,strndup} macros
fix for no-ec
make update
Use EVP_PKEY for client side EC
Use EVP_PKEY for server EC
Add ECDH/DH utility functions
remove unnecessary key copy
Constify EC_KEY in ECDH_compute_key
Remove ECDH client auth code
Remove incomplete non-functional ECDH client authentication code
Remove SSL_OP_SINGLE_ECDH_USE code
Since auto ecdh is now always used SSL_OP_SINGLE_ECDH_USE is redundant Simplify associated code
Use EC_KEY_key2buf and EC_oct2key in libssl
New EC functions
New functions EC_POINT_point2buf and EC_KEY_key2buf which encode a point and allocate a buffer in one call
New function EC_KEY_oct2key() which sets public key in an EC_KEY structure from an encoded point
Fix build on Solaris
Solaris builds were failing during async compilation because the .o files created from compiling the corresponding .c files held in async/arch were ending up in the top level async directory Consequently the link fails because it can't find the .o files
Thanks to Richard Levitte for pointing me in the right direction on this
Fix updating via mkdef.pl
The previous commit introduced a new file format for ssleay.num and libeay.num i.e the introduction of a version field Therefore the update capability in mkdef.pl needs updating to take account of the new format
Don't export internal symbols
On Linux when creating the .so file we were exporting all symbols We should only be exporting public symbols This commit fixes the issue It is only applicable to linux currently although the same technique may work for other platforms (e.g Solaris should work the same way)
This also adds symbol version information to our exported symbols
Better splitting regexp for test_ordinals
Remove GMP engine
Fix s_server problem with no-ec
s_server was trying to set the ECDH curve when no-ec was defined This also highlighted the fact that the -no_ecdhe option to s_server is broken and doesn't make any sense any more (ECDHE is on by default and the only way it can be disabled is through the cipherstring) Therefore this commit removes the option
Fix no-psk compile failure
Fix compile failure with no-srp
Update EVP_PKEY documentation
Add EVP_PKEY_up_ref() documentation and fix various typos
make update
New function X509_get0_pubkey
Add EVP_PKEY_get0_* functions
Extend EVP_PKEY_copy_parameters()
Make EVP_PKEY_copy_parameters() work if the destination has no type (e.g if obtained from EVP_PKEY_new()) or the underlying key is NULL This is useful where we want to copy the parameters from an existing key to a new key
Fix a ** 0 mod 1 = 0 for real this time
Commit 2b0180c37fa6ffc48ee40caa831ca398b828e680 attempted to do this but only hit one of many BN_mod_exp codepaths Fix remaining variants and add a test for each method
Thanks to Hanno Boeck for reporting this issue
crpyto/ppccpuid.pl: add FPU probe and fix OPENSSL_rdtsc
crypto/ppccap.c: add SIGILL-free processor capability detection code
add malloc fail check & fix memory leak
Signed-off-by: Hongze Zhu <hongze.zhu@gmail.com>
Fix erroneous SO suffix in darwin64-debug-test-64-clang target
Fix typo
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fix option value parsing in crl2pkcs7 -certfile
Avoid erroneous "assert(private)" failures
When processing a public key input via "-pubin" "private" was sometimes erroneously set or else not set and incorrectly asserted
x86_64 assembly pack: tune clang version detection even further
RT#4171
Configure: add framework for ChaCha and Poly1305 assembly
Configure: 'reconf' to respect CROSS_COMPILE and CC
Don't use EC when no-ec
Remove no longer existant structure member and direct references to EVP_MD_CTX internals
Fix (incorrect) uninitialised variable warning
fix warning
remove ancient SSLeay bug workaround
Allow ChaCha20-Poly1305 in DTLS
GCM and CCM are modes of operation for block ciphers only ChaCha20-Poly1305 operates in neither of them but it is AEAD This change also enables future AEAD ciphers to be available for use with DTLS
Signed-off-by: Rich Salz <rsalz@akamai.com>
Revert "Allow ChaCha20-Poly1305 in DTLS"
This reverts commit 777f482d993322d69025014bf1b99c270c978fc0 Author credit missing Reverting this and re-committing with an Author line
Use SHA256 not MD5 as default digest
(Documentation update was in the MR but not the commit Oops.)
Support ccache
Fix compile failure with no-threads
The async code was causing a compile failure if no-threads was used
Add extension utility documentation
add X509_up_ref() documentation
extension documentation
Use OPENSSL_NO_DTLS instead of OPENSSL_NO_DTLS1
Fix compile failure
Fix compile failure introduced by commit 94d61512360c due to a typo
evp/e_chacha20_poly1305.c: TLS interop fixes
Thanks to: David Benjamin of Chromuim
Configurations/10-main.conf: fix typos in mingw/cygwin configs
Allow ChaCha20-Poly1305 in DTLS
GCM and CCM are modes of operation for block ciphers only ChaCha20-Poly1305 operates in neither of them but it is AEAD This change also enables future AEAD ciphers to be available for use with DTLS
Signed-off-by: Rich Salz <rsalz@akamai.com>
Make no-dh work plus other no-dh problems found by Richard
make update missed file
Use SHA256 not MD5 as default digest
make update
Adapt EVP tests to the opaque EVP_ENCODE_CTX
Adapt PEM routines to the opaque EVP_ENCODE_CTX
Adapt BIO_f_base64 to the opaque EVP_ENCODE_CTX
Make EVP_ENCODE_CTX opaque
Fix OCB link
The link to the OCB patent pdf changed so the link in CHANGES needs to be updated
Support the TLS Feature (aka Must Staple) X.509v3 extension (RFC7633)
Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
GH: #495 MR: #1435
Restore full support for EVP_CTX_create() etc
Prepare for 1.1.0-pre2-dev
Prepare for 1.1.0-pre1 release
OpenSSL 1.1.0 is now in pre release
make update
Don't run rehash as part of building the openssl app
Update CHANGES and NEWS for alpha release
Misc updates to the CHANGES and NEWS files ready for the alpha release
Ensure |rwstate| is set correctly on BIO_flush
A BIO_flush call in the DTLS code was not correctly setting the |rwstate| variable to SSL_WRITING This means that SSL_get_error() will not return SSL_ERROR_WANT_WRITE in the event of an IO retry
Fix DTLS handshake fragment retries
If using DTLS and NBIO then if a second or subsequent handshake message fragment hits a retry then the retry attempt uses the wrong fragment offset value This commit restores the fragment offset from the last attempt
evp/e_aes.c: wire hardware-assisted block function to OCB
x86[_64] assembly pack: add optimized AES-NI OCB subroutines
Fix mkfiles for new directories
Add the new chacha and poly1305 directories to mkfiles.pl to enable proper building on windows
Add a return value check
If the call to OBJ_find_sigid_by_algs fails to find the relevant NID then we should set the NID to NID_undef
modes/ocb128.c: fix overstep
make update
Configure: make no-chacha and no-poly1305 work
Wire ChaCha20-Poly1305 to TLS
evp/c_allc.c: wire ChaCha20-Poly1305 and add tests
test/evp_test.c: allow generic AEAD ciphers to be tested
crypto/evp: add e_chacha20_poly1305.c
evp/evp_enc.c: allow EVP_CIPHER.ctx_size to be 0
In such case it would be EVP_CIPHER.cleanup's reponsibility to wipe EVP_CIPHEX_CTX.cipher_data
Add ChaCha20-Poly1305 and ChaCha20 NIDs
Add reference ChaCha20 and Poly1305 implementations
make default_ec_key_meth static
