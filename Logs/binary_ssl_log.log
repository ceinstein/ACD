Fix enable-zlib no-comp. Fix no-rc4. Build system: VC-WIN64I fixups. Configurations/windows-makefile.tmpl: respect no-makedepend. Windows build system: get uplink right. Configurations/10-main.conf: freeze -std option in darwin*-ppc-cc. RT#4422 "Remove generation of ms/version32.rc from Configure "Remove the mk1mf VC-WIN* builds and its supporting scripts The mk1mf build for the VC-WIN* targets is broken and the unified scheme works well enough "Remove #error from include files. Don't have #error statements in header files "Revert ""Generate apps/progs.h on the fly"" This reverts commit 04e2a527379ad12ca512aef4e838f94af22d7f79." Replace sed command with perl Some implementations of sed require a newline before an ending '}'. The easier method is to replace that sed command with the corresponding perl command. Closes RT#4448 Don't free up EVP_MD_CTX. Don't free up passed EVP_MD_CTX in ASN1_item_sign_ctx(). This simplifies handling and retains compatiblity with previous behaviour. PR#4446 Ignore the generated apps/progs.h Remove more unused things. Moved doc/standards.txt to the web. Ensure that memory allocated for the ticket is freed If a call to EVP_DecryptUpdate fails then a memory leak could occur. Ensure that the memory is freed appropriately. Issue reported by Guido Vranken. Fix a potential double free in EVP_DigestInit_ex There is a potential double free in EVP_DigestInit_ex. This is believed to be reached only as a result of programmer error - but we should fix it anyway. Issue reported by Guido Vranken. Update EVP_CIPHER_CTX_set_padding documentation. Add note about when EVP_CIPHER_CTX_set_padding should be called. README: small fixups Don't refer to INSTALL files that don't exist any more. Make it clear that the libssl and libcrypto libraries may be named differently on different platforms. windows-makefile.tmpl: Stop keeping temporary files "Start documenting Configure internals This is a living document Sort cipher-list at runtime. Reduces #ifdef complexity. Some platforms provide getcontext() but it does not work Some platforms claim to be POSIX but their getcontext() implementation does not work. Therefore we update the ASYNC_is_capable() function to test for this. RT#4366 Disable AFALG when cross-compiling We don't currently support cross-compiling of the afalg engine. However we were failing to explicitly mark it as disabled during Configure leading to a failed build. "Fix a TLSProxy race condition TLSProxy starts s_server and specifies the number of client connects it should expect. After that s_server is supposed to close down automatically. However poly1305/asm/poly1305-x86_64.pl: make it work with linux-x32. "Not all shells understand ! In unix-Makefile.tmpl "General verify options to openssl ts This commit adds the general verify options of ocsp Disable afalg when engine is disabled. Also make it possible to disable afalg separately. we still need to update config again "engines/Makefile.in: some [older] shell complain about 'for i ;' Fix the init cleanup order There are internal dependencies between the various cleanup functions. This re-orders things to try and get that right. Enforce the demand for Perl 5.10.0 as a minimum. Document X509_get_serialNumber and X509_set_serialNumber. Add EVP_PKEY documentation. Document EVP_PKEY_id() and EVP_PKEY_base_id(). Add doc on when to use SCT callback. With help from Viktor. Avoid sed for dependency post-processing It turns out that different sed implementations treat -i differently to cause issues.  make it simpler by avoiding it entirely and give perl the trust to be consistent enough. "Configurations/unix-Makefile.tmpl: don't leave empty .s files behind. If pre-processor failed Suppress CT warnings in test_ssl Running test_ssl with HARNESS_VERBOSE results in lots of spurious warnings about an inability to load the CT config file. This fixes it. remove ms/.rnd and add it to .gitignore Signed-off-by: Rich Salz <rsalz@akamai.com> Make util/mk1mf.pl recognise no-weak-ssl-ciphers "Comment away the extra checks in Configure The ""extra checks"" is a debugging tool to check the config resolving mechanism.  It uses Perl's smart match Fix classic build The Thread API changes broke classic build. This fixes it. "Don't add engines if configured ""no-engine"" Similarly "Make sure the effect of ""pic"" / ""no-pic"" is used with assembler compilations Before the 'Introduce the ""pic"" / ""no-pic"" config option' commit "Touch the correct variables for the system; shlib_wrap.sh on Solaris If there is cause to think LD_LIBRARY_PATH_32 and LD_PRELOAD_32 are appropriate variables to touch "Because crypto/build.info demands CFLAGS_Q "SPARCv9 assembly pack: unify build rules and argument handling. Make all scripts produce .S "Fix configurations such as 'dist' and tar building For config targets such as 'dist' Move the _hidden_* static variables in dasync to be constructed in bind The _hidden_* variables were being created on-the-fly. It is better to create them once up front during bind to avoid any potential race conditions. Rename EVP_CIPHER_CTX_cipher_data to EVP_CIPHER_CTX_get_cipher_data We had the function EVP_CIPHER_CTX_cipher_data which is newly added for 1.1.0. As we now also need an EVP_CIPHER_CTX_set_cipher_data it makes more sense for the former to be called EVP_CIPHER_CTX_get_cipher_data. Add documentation for the EVP_CIPHER_CTX_cipher_data functions The new pipeline code added a new function EVP_CIPHER_CTX_set_cipher_data(). Add documentation for this and the existing EVP_CIPHER_CTX_cipher_data() function. Add dummy pipeline support for aes128_cbc_hmac_sha1 Add dummy pipline support to dasync for the aes128_cbc_hmac_sha1 cipher. This is treated as an AEAD cipher. Fix pkeyutl to KDF lnks. "Make OpenSSL::Test::setup() a bit more forgiving It was unexpected that OpenSSL::Test::setup() should be called twice by the same recipe.  However Swap the init code to use the new Thread API thread locals The init code was using its own thread local code. Now we have a central API for it we should use that instead. "Swap the init code to use CRYPTO_ONCE The init code was using its own ""once"" implementation. Now that we have the new thread API we should use that instead." Make PKCS8_PRIV_KEY_INFO opaque. Make PKCS8_PRIV_KEY_INFO opaque. Several accessor functions already exist for this structure. Two new ones were added to handle attributes. The old handling of broken formats has been removed and the corresponding structures simplified. "perlasm/x86_64-xlate.pl: handle binary constants early. Not all assemblers of ""gas"" flavour handle binary constants Fix some clang warnings The af_alg engine and associated test were creating warnings when compiled with clang. This fixes it. Fix OPENSSL_INIT flags to avoid a clash. The 0x00010000L OPENSSL_INIT flag appeared twice. Make formatting consistent in apps/Makefile.in chacha/asm/chacha-ppc.pl: fix typo. RT#4365 Add KDF support to pkeyutl. Update documentation. EVP_PKEY_CTX utility functions. Utility functions to pass a string or hex string to EVP_PKEY_CTX_ctrl(). "Make uplink auxiliary source separate from cpuid source There are cases bn/asm/rsaz-avx2.pl: constant-time gather procedure. Performance penalty is 2%. CVE-2016-0702 bn/asm/rsax-x86_64.pl: constant-time gather procedure. Performance penalty is 2% on Linux and 5% on Windows. CVE-2016-0702 Place under OpenSSL license. Add X25519 code from BoringSSL. EC_METHOD customisation operations. Extend EC_METHOD to permit additional customisation of private key and ECDH operations. Rename OIDs. Use standard X25519 and X448 names for OIDs. Delete EdDSA OIDs: for now they wont be used and EdDSA may use a different format. "GH715: Missed some null-check-removals. follow commits 412bafdcf5 GH715: Missed some null-check-removals. "Make generation of dependency files more efficient when possible When building with GNU C using macro inside the case. chacha/asm/chacha-*.pl: fix typos in tail processing. RT#4323 "Reformat and update EC_KEY_new manual page. Add some missing parentheses and reformat. Document EC_KEY_oct2key() "Remove some old files. I read the PROBLEMS testutil.c includes e_os.h. "EC_KEY_priv2buf (): check parameter sanity In EC_KEY_priv2buf() "Normalise the include directives in ct_test.c build.info needed a slight update test/ectest.c: add regression test for RT#4284. ec/asm/ecp_nistz256-*.pl: get corner case logic right. RT#4284 "poly1305/asm/poly1305-armv4.pl: replace ambiguous instruction. Different assembler versions disagree on how to interpret #-1 as argument to vmov.i64 "Remove all -march= from configs These flags are limitting needlessly "Add OPENSSL_PIC back In the earlier change "RT4334: Check UEFI before __STDC_VERSION__ for <inttypes.h> Adding -nostdinc to the EDK2 showed that we were including <inttypes.h> for some UEFI builds Missed an experimental. Fix incorrect SO name on GNU platforms An error was introduced with the setting of SHLIB in DO_GNU_SO. A common DO_GNU_SO_COMMON that both DO_GNU_SO and DO_GNU_SO_NOCALC use makes things clearer. "Don't use 'parent' in util/dofile.pl Because we're requiring Perl 5.10.0 and the 'parent' didn't appear before Perl 5.10.1 "Make crypto/buildinf.h depend on configdata.pm rather than Makefile Depending on Makefile meant that a new attempt to rebuild the Makefile with ""new"" dependency data was done all the time "VMS static libraries have the extension .OLB Makefile.shared: limit .dll image base pinning to FIPS builds. "Misc small fixes. Better libclean that removes the exact files that have been built "Remake the installation of shared libraries in unix-Makefile.tmpl Instead of having the installation recipe rely on special knowledge "VMS fixed in unified build - install_sw had a display of text that belongs under the install target - previous layout installed architecture dependent files in dev:['prefix'.'arch'.LIB] Unified - do a better job when uninstalling Some directories weren't removed. "Set EXE_EXT environment variable when testing When cross compiling "Fix windows thread stop code The windows thread stop code was erroneously not just deleting the thread local variable on thread stop "Remove ""experimental"" in code and comments "When someone configures an out-of-source build "RT4310: Fix varous no-XXX builds When OPENSSL_NO_ASYNC is set Simplify tls1_set_ec_id. Use nid_list table to lookup curve IDs. Address comments. Tests depend on everything. Make the BIO_ADDR param optional. Configurations/00-base-templates.conf: typos in [chacha|poly1305]_asm_src. "Make the use of mdebug backtrace a separate option To force it on anyone using --strict-warnings was the wrong move "Declare DllMain internally DllMain is a symbol that needs to be global Don't test heartbeats when there aren't any. "Make sure a socklen_t can compare with a sizeof() result Most of the times "Don't build test programs by default Have the same installation directories in unified as in unixmake unix-Makefile.tmpl was lagging behind on this point. The unified build may delete installed manual files The installation of man files and html files alike didn't properly check that file names with different casing could be the same on case-insensitive file systems.  This change fixes that. apps/speed.c: initialize c[D_GHASH][i]. RT#4230 Fix some issues near recent chomp changes. "Update .gitignore. Not all git versions understand **/Makefile ec/asm/ecp_nistz256-armv8.pl: fix test_ssl spurious errors. RT#4237 "Remove last chomps In the previous commit to change all chomp to a more flexible regexp perlasm/x86_64-xlate.pl: pass pure constants verbatim. RT#3885 poly1305/asm/poly1305-x86_64.pl: MacOS X portability fix. Don't add filename comment. "Make util/mkrc.pl location agnostic and adapt Makefile.shared With this Hide OPENSSL_INIT_SETTINGS. Make OPENSSL_INIT_SETTINGS an opaque structure. Add some documentation about init after deinit Attempting to init after deinit is an error. Update the documentation accordingly. "Improve recent option help string additions Make these more correct "Configure et al: move the installation directory logic to Makefiles The logic to figure out the combinations of --prefix and --openssldir has stayed in Configure so far "Remove store. Rebased and merged by me ms/uplink-x86.pl: make it work. chacha/asm/chacha-x86.pl: fix nasm compilation. poly1305/poly1305.c: work around -Wshadow warnings with POLY1305_ASM. "Simplify the specification of include dirs in the build dir In build.info files "Make the processing of build.info files more aware of absolute dirs There were cases where some input was absolute "Make sure to always include string.h so memset gets declared. memset() is used by CRYPTO_secure_zalloc() GH649: Fix: version32.rc was not created on Windows version32.rc was not created on Windows. The if condition has been corrected. Signed-off-by: Rich Salz <rsalz@openssl.org> "GH646: Update help for s_server command. * added missing help option messages * ecdh_single option is removed as it is a no-op and not an option supported in earlier versions * ssl_ctx_security_debug() was invoked before ctx check for NULL * trusted_first option can be removed Update build.info files for auto-init/de-init Various Makefile.in files have changes for auto-init/de-init. Make the equivalent changes in build.info. "Fix 90-test_networking.t The previous fix wasn't complete Update 90-test-networking.t to do the same checks as other TLSProxy tests Small fixes - One typo fixed in crypto/bio/b_addr.c - Add a comment in doc/crypto/BIO_parse_hostserv.pod to explain the blank lines with one lonely space each. Only use compatibility macros for < 1.1 API. Reorganise functions. Move all PKCS12_SAFEBAG functions into new file p12_sbag.c. Move MAC functions into p12_mutl.c Rename PKCS12 function Rename ancient PKCS12 functions to use more logical names. Include defines from old to new name. GH641: Don't care openssl_zmalloc Don't cast malloc-family return values. Also found some places where (a) blank line was missing; and (b) the *wrong* return value was checked. bn/Makefile.in: remove obsolete rules. Configurations/00-base-templates.conf: harmonize extensions. Clarify resumed sessions and NULL return. GH587: Extend ECDH tests to more curves. Add more ECDH KATs. squelch sign-compare warning Signed-off-by: Rich Salz <rsalz@openssl.org> "Add missing static declarations in dtlsv1listentest.c Clang rightly does not like extern symbols that are not declared in any header file RT1596: Add clarifying doc. GH628: Add -help to all apps docs. Signed-off-by: Rich Salz <rsalz@openssl.org> "Various RT doc fixes RT1556: doc/crypto/threads.pod RT2024: Missing pages mentioned in crypto.pod RT2890: Wrong size in ERR_string_error description. RT3461: Better description of PEM Encryption (Jeffrey Walton <noloader@gmail.com>) Also Add ASN1_buf_print to print a buffer in ASN1_bn_print format. "Add checks for IPv4 and IPv6 in OpenSSL::Test::Utils and use them This uilds on the same way of checking for availability as we do in TLSProxy.  We use all IP factories we know of Update crypto/bio/build.info Change the transfer perl module so the real module gets properly registered This is an important move if scripts want to refer to the loaded module without having perl think it needs to be loaded (again). bio_err.c: remove a reappeared filename comment RT2752: Add some EKU OID's And some others found in the Internet. "Refactoring BIO: Small adjustments Because of the way bio_lcl.h is organised "Fix pkeyutl/rsautl empty encrypt-input/decrypt-output handling Also fix option processing in pkeyutl to allow use of (formerly) ""out-of-order"" switches that were needless implementation limitations. Handle documented ""ENGINE"" form with -keyform and -peerform. Better handling of OPENSSL_NO_ENGINE and OPENSSL_NO_RSA. RT2018" "Style; add ""!= NULL""" Better check for gcc/clang Iteratively improved with Richard and Andy. "Check chain extensions also for trusted certificates This includes basic constraints Engage poly1305-sparcv9 module. Add poly1305/asm/poly1305-sparcv9.pl. "Remove the extra checks for Intel's C compiler When the target is {something}-icc GH102: Add volatile to CRYPTO_memcmp Can't hurt and seems to prevent problems from some over-aggressive (LTO?) compilers. Remove clean-depend Remove depend hacks from demos/engines. Remove clean-depend; just call makedepend (or $CC -M) and use that. Fix check of what makedepprog should be A mistake was made and the setting of this config variable got reverted to an older behavior.  This restores the latest. 80-test_ca.t is made to use the new perlapp() Use the new OpenSSL::Test::Utils routines. Revert merge error There are two versions of print_table_entry() in Configure.  Remove the older. Remove GOST again The config for the removed GOST engine reappeared by mistake.  Now removed again. Make sure apps/Makefile builds apps/CA.pl by default Fix two possible leaks. Signed-off-by: Kurt Roeckx <kurt@roeckx.be> "Bundle the non core Perl module Text::Template Because we're using Text::Template and we know it's a non core Perl module "Cleanup .gitignore Some things to ignore need to be properly rooted More X509_verify_cert() tests via verify(1). Still need tests for trusted-first and tests that probe construction of alternate chains. "Consolidate ""make update"" Rename 'update' to 'generate'.  Rather than recurse Add TLS PRF method. Add EVP_PKEY algorithm for TLS1 PRF. Fix configuration system to support different architectures on Cygwin. This patch allows to recognize the architectures supported by Cygwin and to choose the right configuration from there.  Drop -march to use default architecture on 32 bit x86. Drop pre-Cygwin-1.3 recognition since it's long gone and there's no valid configuration for this anymore. Signed-off-by: Corinna Vinschen <vinschen@redhat.com> Make SSL_dane_enable() requirement more clear. Also s/s/ssl/ as appropriate in the code example. Suggested by Claus Assmann. Rename INSTALL.W32 to INSTALL.WIN Also remove the INSTALL.W64 file. Next commit will update INSTALL.WIN to cover both. "Small fixup "In __cwd "Relax the requirements for a debug build We required that a target be named 'debug-something' or to have at least one of the configuration items debug_cflags and debug_lflags for --debug to be accepted. However "RT4232: Extra space in help message. It turns out that -pause calls the undocumented function SSL_set_debug. That just sets flag inside the SSL structure.  That flag "VMS open() doesn't take O_BINARY Call single parent free_comp routine. "Remove EVP_CIPHER_CTX_flags Adapt cipher implementations to opaque EVP_CIPHER_CTX Note: there's a larger number of implementations in crypto/evp/ that aren't affected because they include evp_locl.h.  They will be handled in a separate commit. "GH528: ""cipher -v"" output is confusing. Fix the docs Inline LHASH_OF Make LHASH_OF use static inline functions. Add new lh_get_down_load and lh_set_down_load functions and their typesafe inline equivalents. Make lh_error a function instead of a macro. Fix jpaketest compilation error. Add memory leak return value. Make CRYPTO_mem_leaks() and CRYPTO_mem_leaks_fp() return a status value. Update documentation. Don't abort() if there are leaks. Change STACK_OF to use inline functions. Change DECLARE_STACK_OF into inline functions. This avoids the need for auto generated mkstack.pl macros and now handles const properly. Remove more (rest?) of FIPS build stuff. Fix no-engine. RT4202: Update rt URL's. Add test for missing CertificateStatus message If the client sends a status_request extension in the ClientHello and the server responds with a status_request extension in the ServerHello then normally the server will also later send a CertificateStatus message. However this message is *optional* even if the extensions were sent. This adds a test to ensure that if the extensions are sent then we can still omit the message. "Rename *_realloc_clean to *_clear_realloc Just like *_clear_free routines.  Previously undocumented Fix memory leak in DSA redo case. Found by clang scan-build. Signed-off-by: Kurt Roeckx <kurt@roeckx.be> bn/asm/bn-c64xplus.asm: update commentary. "sha/asm/sha256-armv4.pl: one of ""universal"" flags combination didn't compile. (and unify table address calculation in ARMv8 code path)." Fix URLs mangled by reformat Some URLs in the source code ended up getting mangled by indent. This fixes it. Based on a patch supplied by Arnaud Lacombe <al@aerilon.ca> Remove fixed DH ciphersuites. Remove all fixed DH ciphersuites and associated logic. Remove err and prime demo's ERR is not really a public facility; remove the demo. prime shows how to generate a prime.  See apps. Fix typo. "Provide better ""make depend"" warning." Fix no-dgram. Add ECDH/DH utility functions. Remove ECDH client auth code. Remove incomplete non-functional ECDH client authentication code. Remove SSL_OP_SINGLE_ECDH_USE code. Since auto ecdh is now always used SSL_OP_SINGLE_ECDH_USE is redundant. Simplify associated code. New EC functions. New functions EC_POINT_point2buf and EC_KEY_key2buf which encode a point and allocate a buffer in one call. New function EC_KEY_oct2key() which sets public key in an EC_KEY structure from an encoded point. Fix build on Solaris Solaris builds were failing during async compilation because the .o files created from compiling the corresponding .c files held in async/arch were ending up in the top level async directory. Consequently the link fails because it can't find the .o files. Thanks to Richard Levitte for pointing me in the right direction on this. "Fix updating via mkdef.pl The previous commit introduced a new file format for ssleay.num and libeay.num Remove GMP engine. Add EVP_PKEY_get0_* functions. crpyto/ppccpuid.pl: add FPU probe and fix OPENSSL_rdtsc. crypto/ppccap.c: add SIGILL-free processor capability detection code. Configure: 'reconf' to respect CROSS_COMPILE and CC. Don't use EC when no-ec. Support ccache. Add extension utility documentation. evp/e_chacha20_poly1305.c: TLS interop fixes. Thanks to: David Benjamin of Chromuim. Configurations/10-main.conf: fix typos in mingw/cygwin configs. "Make no-dh work modes/ocb128.c: fix overstep. make update. Configure: make no-chacha and no-poly1305 work. crypto/evp: add e_chacha20_poly1305.c. evp/evp_enc.c: allow EVP_CIPHER.ctx_size to be 0. In such case it would be EVP_CIPHER.cleanup's reponsibility to wipe EVP_CIPHEX_CTX.cipher_data. "Move the definitions of EC_KEY and EC_KEY_METHOD to ossl_typ.h Most of all EC_KEY_METHOD accessors. Set of accessors to set and get each field. Engine EC_KEY_METHOD functionality. Rename ENGINE _EC_KEY functions to _EC. Add support for EC_KEY_METHOD in ENGINE_set_default et al. Copy ec_meth. Support for EC_KEY_METHOD. Add EC_KEY_METHOD. This is part of the EC revision and will make EC behave more like other algorithms. Specifically: EC_KEY_METHOD is part of EC_KEY. It is part of ENGINE. Default or key specific implementations can be provided to redirect some or all operations. "Adapt the OS X build to use the OS X tar As part of this Extended master secret fixes and checks. Add new flag TLS1_FLAGS_RECEIVED_EXTMS which is set when the peer sends the extended master secret extension. Server now sends extms if and only if the client sent extms. Check consistency of extms extension when resuming sessions following (where practical) RFC7627. Fix merge error Commit 6140f0365 added some new ctrl constants. However due to a merge error one of these values was duplicated with an existing value. "Make the definition of HMAC_CTX opaque This moves the definition to crypto/hmac/hmac_lcl.h.  Constructor and destructor added Adjust all accesses to EVP_MD_CTX to use accessor functions. "Make the definition of EVP_MD_CTX opaque This moves the definitionto crypto/evp/evp_locl.h "Run test/run_tests.pl directly in the test_ordinals target Running 'make TEST=test_ordinals test' starts the whole build process bn/asm/x86_64-mont5.pl: fix carry propagating bug (CVE-2015-3193). perlasm/ppc-xlate.pl: comply with ABIs that specify vrsave as reserved. RT#4162 modes/ocb128.c: fix sanitizer warning. "Fix ./Configure reconf './Configure reconf' hasn't been working for a while Remove legacy sign/verify from EVP_MD. Remove sign/verify and required_pkey_type fields of EVP_MD: these are a legacy from when digests were linked to public key types. All signing is now handled by the corresponding EVP_PKEY_METHOD. Only allow supported digest types in RSA EVP_PKEY_METHOD: other algorithms already block unsupported types. Remove now obsolete EVP_dss1() and EVP_ecdsa(). Add backtrace to memory leak output This is an option for builds with gcc and --strict-warnings. crypto/sparcv9cap.c: add SIGILL-free feature detection for Solaris. "ex_data part 2: doc fixes and CRYPTO_free_ex_index. Add CRYPTO_free_ex_index (for shared libraries) Unify and complete the documentation for all ""ex_data"" API's and objects. Replace xxx_get_ex_new_index functions with a macro. Added an exdata test. Renamed the ex_data internal datatypes." Remove GOST special case: handled automatically now. Configuratons: add -DFILIO_H to harmonized Solaris targets. Triggered by RT#4144. Remove RSA exception when generating server key exchange. Remove RSA exception when processing server key exchange. """make update"" after async merge." "Fix a few missed ""if (!ptr)"" cleanups And a scalar !x --> x==0 test" e_os.h: __sun done right. RT #4144 "Fix a rebase error During rebasing of the async changes some error codes ended up being duplicated so that ""make errors"" fails. This removes the duplication." "Simplify async pool handling A lot of the pool handling code was in the arch specific files "Swap to using proper windows pipes We were using _pipe to create a pipe on windows. This uses the ""int"" type for its file descriptor for compatibility. However most windows functions expect to use a ""HANDLE"". Probably we could get away with just casting but it seems more robust to use the proper type and main stream windows functions." Rename some daysnc functions for consistency For some reason the dasync sha1 functions did not start with the dasync prefix like all of the other functions do. Changed for consistency. "Fix Linux crash If config'd without -d (--debug) Add s_client support for waiting for async s_server already had the ability to wait on an async file descriptor. This adds it to s_client too. Optimise ASYNC_CTX handling Don't recreate a new ASYNC_CTX every time we call ASYNC_start_job() - the same one can be used for the life of the thread. Instead we only free it up when we call ASYNC_free_pool(). "Fix s_server -WWW with -async The s_server option -WWW was not async aware Add async sub-library to libcrypto Provides support for running asynchronous jobs. Currently this is completely stand alone. Future commits will integrate this into libssl and s_server/ s_client. An asynchronous capable engine will be required to see any benefit from this capability. Ensure all EVP calls have their returns checked where appropriate There are lots of calls to EVP functions from within libssl There were various places where we should probably check the return value but don't. This adds these checks. e_os.h: bump minimal _WIN32_WINNT. Rename RSA_eay_xxx to rsa_ossl_xxx Final part of flushing out SSLEay API's. "bn/asm/ppc64-mont.pl: adapt for little-endian. The problem remained unnoticed so far "bn/asm/s390x.S: improve performance on z196 and z13 by up to 26%. [even z10 is couple percent faster]. Triggered by RT#4128 Don't alow TLS v1.0 ciphersuites for SSLv3 This disables some ciphersuites which aren't supported in SSL v3: specifically PSK ciphersuites which use SHA256 or SHA384 for the MAC. Thanks to the Open Crypto Audit Project for identifying this issue. "Make the match for previous cflags a bit more strict ./Configure [target] --strict-warnings -Wno-pedantic-ms-format would not add '-pedantic' because it matches '-Wno-pedantic-ms-format' "Don't finish the handshake twice We finish the handshake when we move into the TLS_ST_OK state. At various points we were also unnecessarily finishing it when we were reading/writing the Finished message. It's much simpler just to do it in TLS_ST_OK Remove a trivially true OPENSSL_assert This OPENSSL_assert in (d)tls1_hearbeat is trivially always going to be true because it is testing the sum of values that have been set as constants just a few lines above and nothing has changed them. Therefore remove this. "Add SRP and PSK to disallowed CertificateRequest ciphersuites There was a discrepancy between what ciphersuites we allowed to send a CertificateRequest Fix unitialised variable problem tls_process_client_hello() failed to initialise the |al| variable in some (error) scenarios. This could cause issues with creating the alert. Remove the old state defines Remove all the defines for the old state machines states. Mapping old to new is probably going to cause more problems than it solves so it is probably better to just remove them. Don't depend on SSL structure internals The macros SSL_in_connect_init() and SSL_in_accept_init() inadvertently depended on SSL structure internals. This fixes it to use public API calls instead. More state machine reorg Move some function definitions around within the state machine to make sure they are in the correct files. Also create a statem_locl.h header for stuff entirely local to the state machine code and move various definitions into it. "Remove the type variable The SSL structure contained a ""type"" variable that was set to either SSL_ST_ACCEPT or SSL_ST_CONNECT depending on whether we are the server or the client. This duplicates the capability of the ""server"" variable and was actually rarely used." Add initial state machine rewrite code This is the first drop of the new state machine code. The rewrite has the following objectives: - Remove duplication of state code between client and server - Remove duplication of state code between TLS and DTLS - Simplify transitions and bring the logic together in a single location so that it is easier to validate - Remove duplication of code between each of the message handling functions - Receive a message first and then work out whether that is a valid transition - not the other way around (the other way causes lots of issues where we are expecting one type of message next but actually get something else) - Separate message flow state from handshake state (in order to better understand each) - message flow state = when to flush buffers; handling restarts in the event of NBIO events; handling the common flow of steps for reading a message and the common flow of steps for writing a message etc - handshake state = what handshake message are we working on now - Control complexity: only the state machine can change state: keep all the state changes local to a file This builds on previous state machine related work: - Surface CCS processing in the state machine - Version negotiation rewrite "Remove SSLeay history Remove HAMC_cleanup Old API for use with OpenSSL-0.9.6.  Remove it. Improve make depend. Fix memory leak with -issuer option. Remove EVP_CHECK_DES_KEY Thanks to the OpenBSD community for bringing this to our attention. ct_locl.h: fix some comments "testlib/OpenSSL/Test.pm: remove redundant 'cmd /c' Typo. PR#4079 Fix no-ripemd on Windows mkdef.pl was getting confused by: # ifdef OPENSSL_NO_RMD160 #  error RIPEMD is disabled. # endif Changing RIPEMD to RMD160 solves it. Fix suggested by Steve Henson. "Don't advance PACKET in ssl_check_for_safari The function ssl_check_for_safari fingerprints the incoming extensions to see whether it is one of the broken versions of safari. However it was failing to reset the PACKET back to the same position it started in PACKETize and clean up ssl_bytes_to_cipher_list. Fix alerts. Remove BIO_s_file_internal macro. "Remove the hard coded -DOPENSSL_NO_DEPRECATED from DEPFLAG Any time you configure with enable-deprecated "bn/asm/armv4-mont.pl: boost NEON performance. Close difference gap on Cortex-A9 Add a test for duplicated ordinals Occaisionally we have had problems where there are duplicated ordinals in libeay.num or ssleay.num. This adds a test for this issue. Display brief help if no options for list. "asn1t.h: silence -Wmissing-prototype in Windows builds. On Windows OPENSSL_EXPORT_VAR_AS_FUNCTION is defined and in a sense this modification simply harmonizes it with ""VAR_AS_VAR""." Rationalize .gitignore and harmonize pair of Makefiles. "RT2772: accept empty SessionTicket RFC 5077 section 3.3 says: If the server determines that it does not want to include a ticket after it has included the SessionTicket extension in the ServerHello Update year in Windows builds. Harmonize util/mkrc.pl with header move. Fix typo in previous commit. Add ability to set default CA path and file locations individually Previously you could only set both the default path and file locations together. This adds the ability to set one without the other. Configurations: add linux-arm64ilp32 target. Remove remaining old listen code The old implementation of DTLSv1_listen which has now been replaced still had a few vestiges scattered throughout the code. This commit removes them. Add BIO_CTRL_DGRAM_SET_PEEK_MODE Add the ability to peek at a message from the DTLS read BIO. This is needed for the DTLSv1_listen rewrite. Move functions. Move various functions tagged onto t_x509.c to more appropriate places. Document X509_REVOKED functions. Document X509 sign and verify functions. Document X509 public key functions. Document X509 name get and set functions. Document X509 version functions. "Correct whirlpool test It depended on 'openssl no-wp' "Add more features that may be disabled After a grep of OPENSSL_NO_ in apps/*.c "Add more features that may be disabled I've tried to make this list as complete as possible Return shared OIDs when decoding. When an OID is decoded see if it exists in the registered OID table and if so return the shared OID instead of dynamically allocating an ASN1_OBJECT. "Check if test_rehash is run as root If test/recipes/40-test_rehash.t is executed as root Embed various signature algorithms. "Disentangle RSA premaster secret parsing Simplify encrypted premaster secret reading by using new methods in the PACKET API. Don't overwrite the packet buffer. RSA decrypt accepts truncated ciphertext with leading zeroes omitted "New ASN.1 embed macro. New ASN.1 macro ASN1_EMBED. This is the same as ASN1_SIMPLE except the structure is not allocated: it is part of the parent. That is instead of FOO *x; it must be: FOO x; This reduces memory fragmentation and make it impossible to accidentally set a mandatory field to NULL. This currently only works for SEQUENCE and since it is equivalent to ASN1_SIMPLE it cannot be tagged Constify ECDSA_METHOD_new. PR#3920. Fix zlib CMS compilation. Use default field separator. If the field separator isn't specified through -nameopt then use XN_FLAG_SEP_CPLUS_SPC instead of printing nothing and returing an error. PR#2397 EVP_PKEY_METHOD accessor functions. Functions to retrieve the function pointer of an existing method: this can be used to create a method which intercepts or modifies the behaviour of an existing method while retaining most of the existing behaviour. Fix warning about mixed declarations and code. "GH391: Apple port Also make internal functions consistently return values "Better method of skipping all the tests in 00-check_testexes.t Before trying to read MINFO "Rework 00-test_checkexes.t for VMS Unfortunately Have 'make clean' clean away the log files. "Remove old testing scripts out of the way. For now "Add recipes for misc other things we want to test Note that this required a change in constant_time_test.c "Add recipes for the larger protocols This covers the certificate authority commands Add recipes for tests related to certificates Some of them make use of recipes/tconversion.pl. Add asymetric cipher test recipes Some of them make use of recipes/tconversion.pl. "Make the verify_extra test location agnostic Depending on platform "Make TS structures opaque. Most of the accessors existed and were already used so it was easy. TS_VERIFY_CTX didn't have accessors/settors so I added the simple and obvious ones "RT3951: Add X509_V_FLAG_NO_CHECK_TIME to suppress time check In some environments Match SUITEB strings at start of cipher list. PR#4009. "RT3998: Allow scrypt to be disabled This does 64-bit division and multiplication "remove 0 assignments. After openssl_zalloc "PBE lookup test Add test to check PBE lookups: these can fail if the PBE table is not correctly orders. Add to ""make test""." Create DSA and ECDSA certificates. If supported create DSA and ECDSA certificates and test them. apps/speed.c: fix memory leak RT4002: check for NULL cipher in p12_crpt.c The NULL cipher case can't actually happen because we have no EVP_PBE_CTL combinations where cipher_nid is -1 and keygen is PKCS12_PBE_keyivgen. But make the code more obviously correct. "Ignore .dir-locals.el Because we recently encourage people to have a .dir-locals.el Add X509_up_ref function. "Add an example .dir-locals.el This file "Fix spurious bntest failures. BN_bntest_rand generates a single-word zero BIGNUM with quite a large probability. A zero BIGNUM in turn will end up having a NULL |d|-buffer "Remove the ""times"" directory." "GH367: Fix dsa keygen for too-short seed If the seed value for dsa key generation is too short (< qsize) Fix memory over-read Fix from David Baggett via tweet. Signed-off-by: Rich Salz <rsalz@openssl.org> PACKET: add methods for reading length-prefixed TLS vectors. Rewrite ssl3_get_client_hello to use the new methods. Ignore generated *.S ARM assembly files Signed-off-by: Rich Salz <rsalz@akamai.com> "Small cleanup of crypto.pod Came up on the mailing list Add DSA digest length checks. "Fix L<> content in manpages L<foo|foo> is sub-optimal  If the xref is the same as the title Move FAQ to the web. Best hope of keeping current. Fix session tickets Commit 9ceb2426b0 (PACKETise ClientHello) broke session tickets by failing to detect the session ticket extension in an incoming ClientHello. This commit fixes the bug. Update docs. Clarify and update documention for extra chain certificates. PR#3878. "Enhance PACKET readability Enhance the PACKET code readability Remove Gost94 signature algorithm. This was obsolete in 2001.  This is not the same as Gost94 digest. Thanks to Dmitry Belyavsky <beldmit@gmail.com> for review and advice. Fix build break. Find the right indent on *BSD. RT3990: Fix #include path. Signed-off-by: Rich Salz <rsalz@openssl.org> Fix make errors for the CCS changes The move of CCS into the state machine was causing make errors to fail. This fixes it. Fix refactoring breakage. Build with --strict-warnings on FreeBSD. Make BSD make happy with subdirectories. Clear BN-mont values when free'ing it. From a CloudFlare patch. PSK PRF correction. For SHA384 PRF PSK ciphersuites we have to switch to default PRF for TLS < 1.2 Document signature algorithm setting functions. Add some OCSP documentation. Allow any order for signature algorithm string. rsaz_exp.h: align license with the rest of the contribution Document shared sigalgs functions. SSL_CONF additions. Add support for loading verify and chain stores in SSL_CONF. Commands to set verify mode and client CA names. Add documentation. Use uint32_t consistently for flags. "Make ""oneline"" the default for nameopt There's no reason why we should default to a output format that is old Relax CCM tag check. In CCM mode don't require a tag before initialising decrypt: this allows the tag length to be set without requiring the tag. Fix windows build Move #include's inside the #ifdef. Fix PSK client handling. The PSK identity hint should be stored in the SSL_SESSION structure and not in the parent context (which will overwrite values used by other SSL structures with the same SSL_CTX). Avoid duplication. We always free the handshake buffer when digests are freed so move it into ssl_free_digest_list() "Add $! to errors Remove unnuecessary ifdefs. If RSA or DSA is disabled we will never use a ciphersuite with RSA/DSA authentication as it is already filtered out by the cipher list logic. "Fix ABI break with HMAC Recent HMAC changes broke ABI compatibility due to a new field in HMAC_CTX. This backs that change out e_aes_cbc_hmac_sha*.c: address linker warning about OPENSSL_ia32cap_P size mismatch. gcm.c: address linker warning about OPENSSL_ia32cap_P size mismatch. Correct type of RECORD_LAYER_get_rrec_length() The underlying field returned by RECORD_LAYER_get_rrec_length() is an unsigned int. The return type of the function should match that. "Tighten extension handling This adds additional checks to the processing of extensions in a ClientHello to ensure that either no extensions are present "Fix memory leaks in BIO_dup_chain() This fixes a memory leak that can occur whilst duplicating a BIO chain if the call to CRYPTO_dup_ex_data() fails. It also fixes a second memory leak where if a failure occurs after successfully creating the first BIO in the chain "Add and rearrange building of libraries There's a need for a target that will build all of libcrypto Use bio_err not stderr in apps. Except for VMS startup code. Explicitly mention PKCS5_PBKDF2_HMAC in EVP doc. Signed-off-by: Rich Salz <rsalz@openssl.org> Only allow a temporary rsa key exchange when they key is larger than 512. Update trace code. Add extension and ciphersuites to trace code. Clean premaster_secret for GOST Ensure OPENSSL_cleanse() is called on the premaster secret value calculated for GOST. With thanks to the Open Crypto Audit Project for reporting this issue. make update. Make update with manual edit so EVP_PKEY_asn1_set_item uses the same ordinal as 1.0.2. RT3230: Better test for C identifier objects.pl only looked for a space to see if the name could be used as a C identifier.  Improve the test to match the real C rules. Signed-off-by: Rich Salz <rsalz@akamai.com> "Standardize handling of #ifdef'd options. Here are the ""rules"" for handling flags that depend on #ifdef: - Do not ifdef the enum.  Only ifdef the OPTIONS table.  All ifdef'd entries appear at the end; by convention ""engine"" is last.  This ensures that at run-time "clear/cleanse cleanup Where we called openssl_cleanse Use enum for X509_LOOKUP_TYPE Using an enum with -Wswitch means all lookup routines handle all cases.  Remove X509_LU_PKEY which was never used. "Clarify that SSL3_RANDOM_SIZE is a constant scrypt in pkcs8 util Add support for PKCS#8 private key encryption using the scrypt algorithm in the pkcs8 utility. Update documentation. Error if memory limit exceeded. Set a specific error if the parameters are otherwise valid but exceed the memory limit. Fix memory leak. Add PBE tests. Add support for PKCS#12 and PBKDF2 password based encryption tests. Add additional test data. "RT3861: Mem/bio leak in req command The ""out"" variable is used for both key and csr.  Close it after writing the first one so it can be re-used when writing the other. Signed-off-by: Rich Salz <rsalz@openssl.org>" "Ignore files from other branches There are a number of files that are created on other branches that are not held in git and are not needed in master. When checking out master after working on another branch these files show up in ""git status"" Add scrypt PBE algorithm code. This adds support for the ASN.1 structures in draft-josefsson-scrypt-kdf-03 Private keys encrypted by scrypt can now be decrypted transparently as long as they don't exceed the memory limits. "Replace switch/assignments with table lookup Typedef STRINT_PAIR to be the same as OPT_PAIR Add functions to convert between uint64_t and ASN1_INTEGER. Add scrypt tests. Add scrypt test support to evp_test and add test values from from draft-josefsson-scrypt-kdf-03. Add scrypt support. Add scrypt algorithm as described in draft-josefsson-scrypt-kdf-03 Move signing digest out of CERT. ASN1 INTEGER refactor. Rewrite and tidy ASN1_INTEGER and ASN1_ENUMERATED handling. Remove code duplication. New functions to convert between int64_t and ASN.1 types without the quirks of the old long conversion functions. Add documentation. Version negotiation rewrite doc updates Update various documentation references to the new TLS_*_method names. Also add a CHANGES entry. Make up for a missed 'make update' update. Update mkdef for moved header file. crypto/cryptlib.h moved to crypto/include/internal; update the script. Identify and move common internal libcrypto header files There are header files in crypto/ that are used by a number of crypto/ submodules.  Move those to crypto/include/internal and adapt the affected source code and Makefiles. The header files that got moved are: crypto/cryptolib.h crypto/md32_common.h "Identify and move OpenSSL internal header files There are header files in crypto/ that are used by the rest of OpenSSL.  Move those to include/internal and adapt the affected source code RT1207: document SSL_COMP_free_compression_methods. "util/incore update. Support cross-compile platforms that don't support FINGERPRINT_premain bn/asm/armv8-mont.pl: boost performance. Configurations/10-main.conf: update iOS commentary. aes/asm/bsaes-armv7.pl: fix compilation with Xcode 6.3. aes/asm/aesni-sha256-x86_64.pl: fix Windows compilation failure with old assembler. "Fix for memcpy() and strcmp() being undefined. clang says: ""s_cb.c:958:9: error: implicitly declaring library function 'memcpy'""" Check sk_SSL_CIPHER_new_null return value If sk_SSL_CIPHER_new_null() returns NULL then ssl_bytes_to_cipher_list() should also return NULL. Based on an original patch by mrpre <mrpre@163.com>. Add SSL_use_certificate_chain_file function Add SSL_use_certiicate_chain file functions: this is works the same way as SSL_CTX_use_certificate_chain_file but for an SSL structure. Update SSL_CONF code to use the new function. Update docs. Update ordinals. SSL_CONF table reorganisation. Add command line switch entries to table and return SSL_CONF_TYPE_NONE for them in SSL_CONF_cmd_value_type. Update docs. "GH271: Warning on </dev/null to CA.pl If CA.pl is reading from /dev/null Clean all .o files. Fix uninitialized variable. Signed-off-by: Rich Salz <rsalz@openssl.org> Use BN_ULONG format. u_len may be unused. free NULL cleanup 11 Don't check for NULL before calling free functions. This gets: ERR_STATE_free ENGINE_free DSO_free CMAC_CTX_free COMP_CTX_free CONF_free NCONF_free NCONF_free_data _CONF_free_data A sk_free use within OBJ_sigid_free TS_TST_INFO_free (rest of TS_ API was okay) Doc update for UI_free (all uses were fine) X509V3_conf_free X509V3_section_free X509V3_string_free free NULL cleanup 5a Don't check for NULL before calling a free routine.  This gets X509_.*free: x509_name_ex_free X509_policy_tree_free X509_VERIFY_PARAM_free X509_STORE_free X509_STORE_CTX_free X509_PKEY_free X509_OBJECT_free_contents X509_LOOKUP_free X509_INFO_free "Rewrite parse_name Remove need for multiple arrays "Make ""make rehash"" quiet Don't complain about missing config file. (Got the right env var name this time)" NISTZ256: owur'ize. __owur'ize static methods to catch calling errors within the module. "Remove the special list-xxxx commands There's a new ""list"" command RT2962: add -keytab and -krb5svc flags. Add -nocommands to s_client. Add flag to disable the 'command letters' from s_client. Fix error checking and memory leaks in NISTZ256 precomputation. Thanks to Brian Smith for reporting these issues. Correctly set Z_is_one on the return value in the NISTZ256 implementation. Also add a few comments about constant-timeness. Thanks to Brian Smith for reporting this issue. Fix CRYPTO_strdup The function CRYPTO_strdup (aka OPENSSL_strdup) fails to check the return value from CRYPTO_malloc to see if it is NULL before attempting to use it. This patch adds a NULL check. RT3786 Signed-off-by: Matt Caswell <matt@openssl.org> (cherry picked from commit 37b0cf936744d9edb99b5dd82cae78a7eac6ad60) "ssltest output cleanup Make only errors go to stderr. Print count and size before the loop modes/asm/ghashv8-armx.pl: additional performance data. aes/asm/aesni-x86.pl: fix typo affecting Windows build. aes/asm/aesni-x86[_64].pl update. This addresses - request for improvement for faster key setup in RT#3576; - clearing registers and stack in RT#3554 (this is more of a gesture to see if there will be some traction from compiler side); - more commentary around input parameters handling and stack layout (desired when RT#3553 was reviewed); - minor size and single block performance optimization (was lying around); Add ecp_nistz256-armv8 module. Configure: add initial support for 64-bit Android. aes/asm/vpaes-armv8.pl: make it compile on iOS. free NULL cleanup 10 Avoid checking for NULL before calling free functions.  This gets ssl.*free: ssl_sess_cert_free ssl_free ssl_excert_free ssl_cert_free SSL_free SSL_SRP_CTX_free SSL_SESSION_free SSL_CTX_free SSL_CTX_SRP_CTX_free SSL_CONF_CTX_free Fix ECDH key identifier support. PR#3789 "Fix read_ahead issue Fix a ""&"" that should have been ""!"" when processing read_ahead. RT#3793" "consistent test-start logging Output a consistent ""start"" marker for each test. Remove ""2>/dev/null"" from Makefile command lines. Add OPENSSL_CONFIG=/dev/null for places where it's needed modes/asm/ghashv8-armx.pl: up to 90% performance improvement. perlasm/arm-xlate.pl update (fix end-less loop and prepare for 32-bit iOS). Configure: android-arm facelift. Clean up record layer Fix up various things that were missed during the record layer work. All instances where we are breaking the encapsulation rules. "Fix record layer ""make clean"" The ""clean"" target in libssl has been updated to handle the new record layer sub-directory." Remove duplicate code. Update code to use ASN1_TYPE_pack_sequence and ASN1_TYPE_unpack_sequence instead of performing the same operation manually. New ASN1_TYPE SEQUENCE functions. Add new functions ASN1_TYPE_pack_sequence and ASN1_TYPE_unpack_sequence: these encode and decode ASN.1 SEQUENCE using an ASN1_TYPE structure. Update ordinals. Rewrite X509_PKEY_new to avoid old ASN1. macros. sha/asm/sha512-armv4.pl: adapt for use in Linux kernel context. Follow-up to sha256-armv4.pl in cooperation with Ard Biesheuvel (Linaro) and Sami Tolvanen (Google). sha/asm/sha256-armv4.pl: fix compile issue in kernel and eliminate little-endian dependency. Remove d2i_X509_PKEY and i2d_X509_PKEY Remove partially implemented d2i_X509_PKEY and i2d_X509_PKEY: nothing uses them and they don't work properly. Update ordinals. ec/asm/ecp_nistz256-x86_64.pl: update commentary with before-after performance data. free NULL cleanup EVP_.*free; this gets: EVP_CIPHER_CTX_free EVP_PKEY_CTX_free EVP_PKEY_asn1_free EVP_PKEY_asn1_set_free EVP_PKEY_free EVP_PKEY_free_it EVP_PKEY_meth_free; and also EVP_CIPHER_CTX_cleanup Add vpaes-amrv8.pl module. "Make asn1_ex_i2c Remove combine option from ASN.1 code. Remove the combine option. This was used for compatibility with some non standard behaviour in ancient versions of OpenSSL: specifically the X509_ATTRIBUTE and DSAPublicKey handling. Since these have now been revised it is no longer needed. ASN1_TYPE documentation. Move last_write_sequence from s->d1 to s->rlayer.d. Also push some usage of last_write_sequence out of dtls1_retransmit_message and into the record layer. "Make rrec Tidy up rec_layer.h. Add some comments regarding which functions should be being used for what purpose. Create a RECORD_LAYER structure and move read_ahead into it. "Update ordinals Thanks to the change of mkdef.pl Fix verify algorithm. Disable loop checking when we retry verification with an alternative path. This fixes the case where an intermediate CA is explicitly trusted and part of the untrusted certificate list. By disabling loop checking for this case the untrusted CA can be replaced by the explicitly trusted case and verification will succeed. Configuration file examples. Make OCSP response verification more flexible. If a set of certificates is supplied to OCSP_basic_verify use those in addition to any present in the OCSP response as untrusted CAs when verifying a certificate chain. PR#3668 "free NULL cleanup Start ensuring all OpenSSL ""free"" routines allow NULL "Adjust include path Thanks to a -I.. Fix build. Remove x_exten.c and x_exten.o from crypto/asn1/Makefile: they've moved now. Fix missing return value checks Ensure that all functions have their return values checked where appropriate. This covers all functions defined and called from within libssl. Add -DDEBUG_UNUSED to --strict-warnings In order to receive warnings on unused function return values the flag -DDEBUG_UNUSED must be passed to the compiler. This change adds that for the --strict-warnings Configure option. sha/asm/sha256-armv4.pl: adapt for use in Linux kernel context. In cooperation with Ard Biesheuvel (Linaro) and Sami Tolvanen (Google). Fix memory leak. "Fix seg fault in s_time Passing a negative value for the ""-time"" option to s_time results in a seg fault. This commit fixes it so that time has to be greater than 0." Move malloc fail checks closer to malloc Move memory allocation failure checks closer to the site of the malloc in dgst app. Only a problem if the debug flag is set...but still should be fixed. Make X509_ATTRIBUTE opaque. Fix EVP_DigestInit_ex with NULL digest Calling EVP_DigestInit_ex which has already had the digest set up for it should be possible. You are supposed to be able to pass NULL for the type. However currently this seg faults. Harmonize return values in dtls1_buffer_record Ensure all malloc failures return -1. Reported by Adam Langley (Google). Cleanse PKCS#8 private key components. New function ASN1_STRING_clear_free which cleanses an ASN1_STRING structure before freeing it. Call ASN1_STRING_clear_free on PKCS#8 private key components. Catch up the VMS build. crypto/crypto-lib.com - catch up with the OCSP changes test/maketest.com and test/tests.com - catch up with the addition of test_evp_extra Make STACK_OF opaque. Make OCSP structures opaque. "Cleanup some doc files ACKNOWLEDGEMENTS is now spelled correctly :) README.ASN1 talked about 0.9.6 "Fix evp_extra_test.c with no-ec When OpenSSL is configured with no-ec Add flag to inhibit checking for alternate certificate chains. Setting this behaviour will force behaviour as per previous versions of OpenSSL "perlasm/x86masm.pl: make it work. Though this doesn't mean that masm becomes supported "sha/asm/sha1-586.pl: fix typo. The typo doesn't affect supported configuration Add additional EC documentation. Use named curve parameter encoding by default. Many applications require named curve parameter encoding instead of explicit parameter encoding (including the TLS library in OpenSSL itself). Set this encoding by default instead of requiring an explicit call to set it. Add OPENSSL_EC_EXPLICT_CURVE define. size_t for buffer functions. Change BUF_MEM_grow and BUF_MEM_grow_clean to return size_t. Engage ecp_nistz256-armv4 module. Add more Camellia OIDs. ec/asm/ecp_nistz256-x86.pl: fix typos (error shows in Windows build). New evp_test updates. Print usage message. Print expected and got values if mismatch. Add new test file. Remove some functions that are no longer used and break the build with: ./config --strict-warnings enable-deprecated Engage ecp_nistz256-x86 module. Support for alternative KDFs. Don't hard code NID_id_pbkdf2 in PBES2: look it up in PBE table. Bring objects.pl output even closer to new format. Harmonize objects.pl output with new format. Apache Traffic Server has a need to set the rbio without touching the wbio. There is no mechanism to do that at the moment - SSL_set_bio makes changes to the wbio even if you pass in SSL_get_wbio(). This commit introduces two new API functions SSL_set_rbio() and SSL_set_wbio(). These do the same job as SSL_set_bio() except they enable you to manage the rbio and wbio individually. Remove X509_PAIR Unused type; a pair X509 certificates. Intended for LDAP support. "Live code cleanup: remove #if 1 stuff For code bracketed by ""#if 1"" then remove the alternate ""#else .. #endif"" lines." Have mkdef.pl ignore APPLINK settings. Remove support for SSL_OP_NETSCAPE_CA_DN_BUG. This is an ancient bug workaround for Netscape clients. The documentation talks about versions 3.x and 4.x beta. Use memset in bn_mont Use memset() not inline code.  Compilers are smarter now. Updates to reformat script. Don't change files if they're unmodified. Indicate which files have changed and a summary. Remove unused variables. "Dead code: crypto/dh Add CHANGES entry. Ctrl to retrieve extms support. Add extms support to master key generation. Update master secret calculation to support extended master secret. TLS 1.2 client authentication adds a complication because we need to cache the handshake messages. This is simpllified however because the point at which the handshake hashes are calculated for extended master secret is identical to that required for TLS 1.2 client authentication (immediately after client key exchange which is also immediately before certificate verify). "Extended master secret extension support. Add and retrieve extended master secret extension "Add flags field to SSL_SESSION. Add a ""flags"" field to SSL_SESSION. This will contain various flags such as encrypt-then-mac and extended master secret support." "cms-test.pl: ""localize"" /dev/null even further [as follow-up to VMS]." Build correctly for me on FreeBSD 10. "modes/gcm128.c: harmonize ctx->ghash assignment "VMS adjustments: catch up with the Unix build. A number of new tests "OPENSSL_NO_xxx cleanup:  DEC-CBCM removed A DES algorithm mode Make DTLS always act as if read_ahead is set. The actual value of read_ahead is ignored for DTLS. RT#3657 Remove obsolete support for old code. "ifdef cleanup "Keep disclaiming 16-bit support. If you examine changes Add assembly support to ios64-cross. Fix typos in ios64-cross config line. sha256-armv4.pl: fix typo. Run util/openssl-format-source -v -c . crypto/ofb128.c: make it indent-friendly. modes/ctr128.c: make it indent-friendly. modes/cfb128.c: make it indent-friendly. bn/asm/x86_64-gcc.cL make it indent-friendly. "indent has problems with comments that are on the right hand side of a line. Sometimes it fails to format them very well modes/gcm128.c: make it indent-friendly. modes/cts128.c: make it indent-friendly. crypto/cryptlib.c: make it indent-friendly. bn/bntest.c: make it indent-friendly. apps/srp.c: make it indent-friendly. apps/speed.c: make it indent-friendly. Script fixes. Don't use double newline for headers. Don't interpret ASN1_PCTX as start of an ASN.1 module. More comments Conflicts: crypto/dsa/dsa_vrf.c crypto/ec/ec2_smpl.c crypto/ec/ecp_smpl.c Conflicts: demos/bio/saccept.c ssl/d1_clnt.c Conflicts: bugs/dggccbug.c demos/tunala/cb.c For master windows build dsa.h is now needed. Remove redundant DSO_METHOD_beos declaration in dso.h. BEOS support has been removed. Make build reproducible It contained a date on when it was build. Further windows specific .gitignore entries Update .gitignore with windows files to be excluded from git RT3662: Allow leading . in nameConstraints Change by SteveH from original by John Denker (in the RT) "Revert ""CHANGES: mention ""universal"" ARM support."" This reverts commit 4fec91506975f62a2f93be71a46acc7fae7eef45." "Remove inconsistency in ARM support. This facilitates ""universal"" builds ecp_nistz256-x86_64.pl: fix occasional failures. RT: 3607 Improves certificates HOWTO * adds links to various related documents. * fixes a few typos. * rewords a few sentences. Prepare for bn opaquify. Implement internal helper functions. Remove fips_constseg references. Remove FIPSCANISTERINTERNAL reference. New location on website for binaries. If we really get a situation where the underlying mtu is less than the minimum we will support then dtls1_do_write can go into an infinite loop. This commit fixes that. Remove all .cvsignore files "Improves the proxy certificates howto doc. The current documentation contains a bunch of spelling and grammar mistakes. I also found it hard to understand some paragraphs Updates to EVP_PKEY_encrypt.pod submitted by user Bernardh via the wiki Minor changes made by Matt Caswell. RT3488: Update doc for OPENSSL_config Fix CONF_load_modules to CONF_modules_load. Document that it calls exit. Advise against using it now. Add an error print to stderr. Do not resume a session if the negotiated protocol version does not match the session's version (server). See also BoringSSL's commit bdf5e72f50e25f0e45e825c156168766d8442dde. "Reset s->tlsext_ticket_expected in ssl_scan_serverhello_tlsext. This ensures that it's zeroed even if the SSL object is reused (as in ssltest.c). It also ensures that it applies to DTLS "Fix s_server -ssl2. Previously this reported ""Error setting EC curve""" "Fix cross reference table generator. If the hash or public key algorithm is ""undef"" the signature type will receive special handling and shouldn't be included in the cross reference table." ec/asm/ecp_nistz256-x86_64.pl: fix inconsistency in path handling. md32_common.h: address compiler warning in HOST_c2l. Configure: add ios64 target. Fix and improve SSL_MODE_SEND_FALLBACK_SCSV documentation. "Include ""constant_time_locl.h"" rather than ""../constant_time_locl.h"". The different -I compiler parameters will take care of the rest..." Fix SSL_R naming inconsistency. aesni-x86_64.pl: make ECB subroutine Windows ABI compliant. RT: 3553 Support TLS_FALLBACK_SCSV. crypto/cast/asm/cast-586.pl: +5% on PIII and remove obsolete readme. e_os.h: refine inline override logic (to address warnings in debug build). "Add additional DigestInfo checks. Reencode DigestInto in DER and check against the original: this will reject any improperly encoded DigestInfo structures. Note: this is a precautionary measure e_os.h: allow inline functions to be compiled by legacy compilers. crypto/bn/asm/x86_64-mont*.pl: add missing clang detection. Configure: engage ECP_NISTZ256. RT: 3149 perlasm/x86_64-xlate.pl: handle inter-bank movd. "RT3192: spurious error in DSA verify This is funny; Ben commented in the source "RT3271: Don't use ""if !"" in shell lines For portability don't use ""if ! expr""" RT2626: Change default_bits from 1K to 2K This is a more comprehensive fix.  It changes all keygen apps to use 2K keys. It also changes the default to use SHA256 not SHA1.  This is from Kurt's upstream Debian changes. RT2600: Change Win line-endings to Unix. For consistency. "RT2272: Add old-style hash to c_rehash In addition to Matthias's change "RT3140: Possibly-unit variable in pem_lib.c Can't really happen "Make the inline const-time functions static. ""inline"" without static is not correct as the compiler may choose to ignore it and will then either emit an external definition "RT1325 Configure: add configuration for crypto/ec/asm extensions. md5-x86_64.pl: work around warning. "RT2119 "RT1941: c_rehash.pod is missing Add the file written by James Westby apps/speed.c: add -misalign command-line argument. New option allows to perform benchmarks on misaligned data. "RT3102: Document -verify_error_return flag Also moved some options around so all the ""verify"" options. are clumped together." Custom extension documentation. Use consistent function naming. Instead of SSL_CTX_set_custom_cli_ext and SSL_CTX_set_custom_srv_ext use SSL_CTX_add_client_custom_ext and SSL_CTX_add_server_custom_ext. New function SSL_extension_supported(). "Callback revision. Use ""parse"" and ""add"" for function and callback names instead of ""first"" and ""second"". Change arguments to callback so the extension type is unsigned int and the buffer length is size_t. Note: this *will* break existing code." Remove serverinfo checks. Since sanity checks are performed for all custom extensions the serverinfo checks are no longer needed. RT 3060: amend patch Use existing error code SSL_R_RECORD_TOO_SMALL for too many empty records. For ease of backporting the patch to release branches. Improve EVP_PKEY_sign documentation Clarify the intended use of EVP_PKEY_sign. Make the code example compile. bn/asm/rsaz-*.pl: allow spaces in Perl path name. RT: 2835 sha1-mb-x86_64.pl: add commentary. sha1-mb-x86_64.pl: fix typo. RT2492: Remove extra NULL check. "RT2489: Remove extra ""sig"" local variable." PR 2580: dgst missing current SHA algorithms Update the dgst.pod page to include SHA224...512 algorithms. Update apps/progs.pl to add them to the digest command table. "RT 2517: Various typo's. Many of these were already fixed Test SRP authentication ciphersuites. Check SRP parameters early. Check SRP parameters when they are received so we can send back an appropriate alert. sha1-ppc.pl: shave off one cycle from BODY_20_39 and improve performance by 10% on POWER[78]. Windows build fixes. Add cmac.h to mkdef.pl Remove ENGINE_load_rsax from engine.h: no longer built. Update ordinals test/testutil.c test registry functions. These help standardize the structure of main() and result reporting. Make *Final work for key wrap again. Add GHASH for PowerISA 2.07. Fix typo. "Please Clang's sanitizer. PR: #3424 Improve X509_check_host() documentation. Based on feedback from Jeffrey Walton. sha512-x86_64.pl: fix typo. PR: #3431 s3_pkt.c: fix typo. apps/speed.c: add multi-block benchmark. "New peername element in X509_VERIFY_PARAM_ID Declaration Reduce casting nastiness. Reduce casting nastiness. Don't limit message sizes in ssl3_get_cert_verify. PR#319 (reoponed version). Add license info. Remove all RFC5878 code. Remove RFC5878 code. It is no longer needed for CT and has numerous bugs bn_exp.c: fix x86_64-specific crash with one-word modulus. PR: #3397 "Fix doc typo. ERR_get_error(3) references the non-existent ERR_get_last_error_line_data instead of the one that does exist perlasm/ppc-xlate.pl update. Add SHA256/512 for PowerISA 2.07. Windows build fixes. Fix warning. (cherry picked from commit c97ec5631bb08a2171a125008d2f0d2a75687aaa) Test copying of contexts in evp_test. Test EVP_CIPHER_CTX_copy in evp_test. This will catch any problems with copying in underlying ciphers. Make depend. More constification. Make EVP_CIPHER_CTX_copy work in GCM mode. PR#3272 Typo. PR#3173 Typo. PR#3107 bn/asm/rsaz-avx2.pl: fix occasional failures. "RT 487.  Mention that generated primes are ""at least"" B<bits> long." Clarify docs. Document that the certificate passed to SSL_CTX_add_extra_chain_cert() should not be freed by the application. PR#3409 Fix OID encoding for one component. OIDs with one component don't have an encoding. PR#2556 (Bug#1) "bn_exp.c: move check for AD*X to rsaz-avx2.pl. This ensures high performance is situations when assembler supports AVX2 aesp8-ppc.pl: rigid input verification in key setup. aesv8-armx.pl: rigid input verification in key setup. One more typo when changing !result to result <= 0 Implement sk_deep_copy. Drop hostlen from X509_VERIFY_PARAM_ID. Just store NUL-terminated strings.  This works better when we add support for multiple hostnames. "add description of missing options to verify man page The options related to policy used for verification Fix shadow declaration. aesp8-ppc.pl: add CTR mode. aesni-sha256-x86_64.pl: add missing rex in shaext. PR: 3405 "Revert ""Fixed incorrect return code handling in ssl3_final_finish_mac"" This reverts commit 2f1dffa88e1b120add4f0b3a794fbca65aa7768d. Missing attribution." ghash-x86_64.pl: optimize for upcoming Atom. aesni-mb-x86_64.pl: add Win64 SEH. "Add official extension value. Encrypt then MAC now has an official extension value ARM assembly pack: get ARMv7 instruction endianness right. Pointer out and suggested by: Ard Biesheuvel. sha[1|512]-armv8.pl: get instruction endianness right. Submitted by: Ard Biesheuvel. Add GHASH for ARMv8 Crypto Extension. Result of joint effort with Ard Biesheuvel. Update NEWS. aesp8-ppc.pl: fix typos. Free up s->d1->buffered_app_data.q properly. PR#3286 evp/e_aes.c: populate HWAES_* to remaning modes. Submitted by: Ard Biesheuvel. Recognise padding extension. Add SHA for ARMv8. Add linux-aarch64 taget. armcap.c is shared between 32- and 64-bit builds and features link-time detection of getauxval. Submitted by: Ard Biesheuvel. Credit to Felix. Closes #116. Zero prime doits. Remove unused BIGNUMs. Only count successful generations. Refactor the first prime index. "Add a method to generate a prime that is guaranteed not to be divisible by 3 or 5. Possibly some reduction in bias Tidy up speed.c a little. Add a new target to Configure for me. Allocate extra space when NETSCAPE_HANG_BUG defined. Make sure there is an extra 4 bytes for server done message when NETSCAPE_HANG_BUG is defined. PR#3361 "add description of -no_ecdhe option to s_server man page While the -help message references this option aesv8-armx.pl: add CTR implementation. Submitted by: Ard Biesheuvel. Fix cast of boolean where cast of LHS intended. Closes #74. Make it build. Closes #31. Modify the description of -noout to match the manpage. PR#3364 aesp8-ppc.pl: add optimized CBC decrypt. vpaes-ppc.pl: comply with ABI. Fixes to host checking. Fixes to host checking wild card support and add support for setting host checking flags when verifying a certificate chain. aesv8-armx.pl: fix typo. Don't allocate more than is needed in BUF_strndup(). For portability use BUF_strndup instead of strndup. Adding padding extension to trace code. Make it build/run. "Add ""teaser"" AES module for ARMv8. ""Teaser"" means that it's initial proof-of-concept to build EVP module upon." Have the .pc files depend on each other rather than duplicating the various link settings. PR#3332 Correct example. sha/asm/sha1-armv4-large.pl: add NEON and ARMv8 code paths. sha/asm/sha256-armv4.pl: add ARMv8 code path. crypto/armcap.c: detect ARMv8 capabilities [in 32-bit build]. Fix version documentation. Specify -f is for compilation flags. Add -d to synopsis section. Closes #77. util/mkerr.pl: fix perl warning Gets rid of this; defined(@array) is deprecated at ../util/mkerr.pl line 792. (Maybe you should just omit the defined()?) defined(@array) is deprecated at ../util/mkerr.pl line 800. (Maybe you should just omit the defined()?) Signed-off-by: Geoff Thorpe <geoff@openssl.org> aes/asm/bsaes-x86_64.pl: Atom-specific optimization. Fix double frees. Document -debug_decrypt option. Extension checking fixes. When looking for an extension we need to set the last found position to -1 to properly search all extensions. PR#3309. Clarify CMS_decrypt behaviour. Add new key fingerprint. crypto/modes/gcm128.c: more strict aliasing fixes. Update FAQ. Document new crl option. Add option to generate old hash format. New -hash_old to generate CRL hashes using old (before OpenSSL 1.0.0) algorithm. "Fix base64 decoding bug. A short PEM encoded sequence if passed to the BIO Add initial security framework docs. "Add functions returning security bits. Add functions to return the ""bits of security"" for various public key algorithms. Based on SP800-57." Update ordinals. Use a previously unused value as we will be updating multiple released branches. (cherry picked from commit 0737acd2a8cc688902b5151cab5dc6737b82fb96) dh_check.c: check BN_CTX_get's return value. test/Makefile: allow emulated test (e.g. under wine). Submitted by: Roumen Petrov "bss_dgram.c perlasm/x86asm.pl: recognize elf-1 denoting old ELF platforms. perlasm/x86gas.pl: limit special OPENSSL_ia32cap_P treatment to ELF. rc4/asm/rc4-586.pl: allow for 386-only build. des/asm/des-586.pl: shortcut reference to DES_SPtrans. sha/asm/sha512-x86_64.pl: fix compilation error on Solaris. Configure: blended processor target in solaris-x86-cc. BC-32.pl: refresh Borland C support. PR: 3251 Suggested by: Thorsten Sch\F6ning Only set current certificate to valid values. When setting the current certificate check that it has a corresponding private key. New chain building flags. New flags to build certificate chains. The can be used to rearrange the chain so all an application needs to do is add all certificates in arbitrary order and then build the chain to check and correct them. Add verify error code when building chain. Update docs. Make i2r_sctlist static. Don't use CRYPTO_AES_CTR if it isn't defined. Show the contents of the RFC6962 Signed Certificate Timestamp List Certificate/OCSP Extensions. Add the RFC6962 OIDs to the objects table. "Document pkcs12 -password behavior apps/pkcs12.c accepts -password as an argument.  The document author almost certainly meant to write ""-password "aes/asm/aesni-x86_64.pl: further optimization for Atom Silvermont. Improve CBC decrypt and CTR by ~13/16% evp/e_aes_cbc_hmac_sha*.c: improve cache locality. Fix warning. Build on MacOS. Return previous compression methods when setting them. Fix warnings. "Return per-certificate chain if extra chain is NULL. If an application calls the macro SSL_CTX_get_extra_chain_certs return either the old ""shared"" extra certificates or those associated with the current certificate. This means applications which call SSL_CTX_use_certificate_chain_file and retrieve the additional chain using SSL_CTX_get_extra_chain_certs will still work. An application which only wants to check the shared extra certificates can call the new macro SSL_CTX_get_extra_chain_certs_only" [aesni|sha*]-mb-x86_64.pl: add data prefetching. "s3_pkt.c: move ssl3_release_write_buffer to ssl3_write_bytes. If application has more data than maximum fragment modes/asm/ghash-s390x.pl: +15% performance improvement on z10. "crypto/sha/asm/sha1-x86_64.pl update: +5% on Atom Silvermont New function to set compression methods so they can be safely freed. Certificate callback doc. bn/asm/x86_64-mont5.pl: fix compilation error on Solaris. aes/asm/vpaes-ppc.pl: add little-endian support. sha/asm/sha256-armv4.pl: add NEON code path. (and shave off cycle even from integer-only code) "aesni-sha1-x86_64.pl: add stiched decrypt procedure Update curve list size. (cherry picked from commit cfa86987a8d9d2b8cc5e5fea2d3260c46542cdb9) Verify parameter retrieval functions. New functions to retrieve internal pointers to X509_VERIFY_PARAM for SSL_CTX and SSL structures. (cherry picked from commit be0c9270690ed9c1799900643cab91de146de857) x86_64-xlate.pl: minor update. bn/asm/x86_64-mont5.pl: add MULX/AD*X code path. This also eliminates code duplication between x86_64-mont and x86_64-mont and optimizes even original non-MULX code. bn/asm/armv4-mont.pl: add NEON code path. perlasm/ppc-xlate.pl: improve linux64le support. Suggested by: Marcello Cerri aes/asm/vpaes-ppc.pl: comply with ABI. bn/asm/x86_64-mont5.pl: comply with Win64 ABI. PR: 3189 Submitted by: Oscar Ciurana crypto/bn/asm/rsaz-x86_64.pl: make it work on Win64. bn/asm/rsaz-x86_64.pl: fix prototype. ppc64-mont.pl: eliminate dependency on GPRs' upper halves. Take vpaes-ppc module into loop. New functions to retrieve certificate from SSL_CTX New functions to retrieve current certificate or private key from an SSL_CTX. Constify SSL_get_private_key(). Constify. (cherry picked from commit 1abfa78a8ba714f7e47bd674db53dbe303cd1ce7) Allow match selecting of current certificate. If pointer comparison for current certificate fails check to see if a match using X509_cmp succeeds for the current certificate: this is useful for cases where the certificate pointer is not available. modes/asm/ghash-alpha.pl: fix typo. Make Makefiles OSF-make-friendly. PR: 3165 Add CMS_SignerInfo_get0_signature function. Add function to retrieve the signature from a CMS_SignerInfo structure: applications can then read or modify it. modes/asm/ghash-alpha.pl: make it work with older assembler for real. PR: 3165 engines/ccgost/gost89.h: make word32 defintion unconditional. Original definition depended on __LONG_MAX__ that is not guaranteed to be present. As we don't support platforms with int narrower that 32 bits it's appropriate to make defition inconditional. PR: 3165 modes/asm/ghash-alpha.pl: make it work with older assembler. PR: 3165 PBKDF2 should be efficient. Contributed by Christian Heimes <christian@python.org>. Fix warning. sha/asm/sha512-ppc.pl: fix typo. Submitted by: Marcelo Cerri perlas/ppc-xlate.pl: fix typo. aes/asm/aes-ppc.pl: add little-endian support. Submitted by: Marcelo Cerri perlasm/ppc-xlate.pl: add .quad directive sha/asm/sha512-ppc.pl: add little-endian support. Submitted by: Marcelo Cerri sha/asm/sha1-ppc.pl: add little-endian support. Submitted by: Marcelo Cerri bn/asm/x86_64-mont.pl: minor optimization [for Decoded ICache]. Fix argument processing. Constification. Fix various typos. Extend SSL_CONF Extend SSL_CONF to return command value types. Add certificate and key options. Update documentation. Typo. Time value for various platforms. The function gettimeofday() is not supported on all platforms. Use more portable versions. Adapted from FIPS code. Add clang debug target. PPC assembly pack: make new .size directives profiler-friendly. Suggested by: Anton Blanchard Fix warning. PPC assembly pack: add .size directives. aes/asm/bsaes-x86_64.pl: fix Windows-specific bug in XTS. PR: 3139 bn/asm/rsax-avx2.pl: minor optimization [for Decoded ICache]. Configure: recognize experimental-multiblock. evp/evp.h: add multi-block contstants and parameter type. sha/asm/sha*-mb-x86_64.pl: commentary update. Constification. aes/asm/bsaes-*.pl: improve decrypt performance. Improve decrypt performance by 10-20% depending on platform. Thanks to Jussi Kivilinna for providing valuable hint. Also thanks to Ard Biesheuvel. bn/asm/x86_64-mont*.pl: add MULX/ADCX/ADOX code path. rsaz-x86_64.pl: add MULX/ADCX/ADOX code path. x86_64-xlate.pl: fix jrcxz in nasm case. evp/e_aes_cbc_hmac_sha*.c: multi-block glue code. Configire: take multi-block modules into build loop. "evp/e_aes_cbc_hmac_sha256.c: enable is on all AES-NI platforms "aes-armv4.pl Add functions to set ECDSA_METHOD structure. Add various functions to allocate and set the fields of an ECDSA_METHOD structure. "Move change note for SSL_OP_SAFARI_ECDHE_ECDSA_BUG. (This went into 1.0.2 too crypto/armcap.c: fix typo in rdtsc subroutine. PR: 3125 Submitted by: Kyle McMartin bsaes-armv7.pl: remove partial register operations in CTR subroutine. Update CHANGES. Tidy up comments. crypto/modes/asm/aesni-gcm-x86_64.pl: minor optimization. Avoid occasional up to 8% performance drops. crypto/bn/asm/x86_64-mont.pl: minor optimization. Remove ancient PATENTS section and FAQ reference. Document extension clash. Experimental encrypt-then-mac support. Experimental support for encrypt then mac from draft-gutmann-tls-encrypt-then-mac-02.txt To enable it set the appropriate extension number (0x10 for the test server) using e.g. -DTLSEXT_TYPE_encrypt_then_mac=0x10 For non-compliant peers (i.e. just about everything) this should have no effect. Make it build. Document supported curve functions. Document -force_pubkey option. Correct ECDSA example. Fix compile errors. Make no-ec compilation work. Return 1 when setting ECDH auto mode. Fix for PEM_X509_INFO_read_bio. PR: 3028 Fix bug introduced in PEM_X509_INFO_bio which wouldn't process RSA keys correctly if they appeared first. Update cms docs. Enhance DH dup functions. Make DHparams_dup work properly with X9.42 DH parameters. crypto/bn/asm/rsax-x86_64.pl: make it work on Darwin. Various custom extension fixes. Force no SSL2 when custom extensions in use. Don't clear extension state when cert is set. Clear on renegotiate. Add tests for ALPN functionality. Conflicts: ssl/ssltest.c New CMS tests. Add some ECDH CMS tests. Custom key wrap option for cms utility. Return correct enveloped data type in ASN1 methods. For RSA and DSA keys return an appropriate RecipientInfo type. By setting CMS_RECIPINFO_NONE for DSA keys an appropriate error is returned if an attempt is made to use DSA with enveloped data. Typo. Avoid need to change function code. Keep original function names for nonce versions so we don't have to change error function codes. bn/asm/rsaz-avx2.pl: Windows-specific fix. Clarify FIXME. sha512-586.pl: fix typo. Submitted by: Gisle Vanem "Take RSAZ modules into build loop Fix multiple cosmetic typos. x86_64-xlate.pl: Windows fixes. aesni-sha256-x86_64.pl: fix typo in Windows SEH. Cosmetic touchups. Add new CMS tests. Add new tests to cms-test.pl covering PSS and OAEP. CMS public key parameter support. Add support for customisation of CMS handling of signed and enveloped data from custom public key parameters. This will provide support for RSA-PSS and RSA-OAEP but could also be applied to other algorithms. "Cleanup of custom extension stuff. serverinfo rejects non-empty extensions. Omit extension if no relevant serverinfo data. Improve error-handling in serverinfo callback. Cosmetic cleanups. s_client documentation. s_server documentation. SSL_CTX_serverinfo documentation. Cleaup -1 and NULL callback handling for custom extensions "Limit the number of empty records that will be processed consecutively in order to prevent ssl3_get_record from never returning. Reported by ""oftc_must_be_destroyed"" and George Kadianakis." Don't SEGFAULT when trying to export a public DSA key as a private key. Ignore one-makefile stuff. Typo. Add support for arbitrary TLS extensions. Contributed by Trevor Perrin. Add aesni-sha256-x86_64. aesni-sha1-x86_64.pl: update performance data. aesni-sha256-x86_64.pl: harmonize with latest sha512-x86_64.pl. sha1-x86_64.pl: add AVX2+BMI code path. sha512-x86_64.pl: upcoming-Atom-specific optimization. sha[256|512]-586.pl: add more SIMD code paths. ghash-x86_64.pl: add Haswell performance data. x86cpuid.pl: fix extended feature flags detection. Fix PSS signature printing. Fix PSS signature printing: consistently use 0x prefix for hex values for padding length and trailer fields. "Ensure that Remove added ;. Missing prototypes. aesni-x86_64.pl: optimize XTS. PR: 3042 aesni-sha1-x86_64.pl: Atom-specific optimization. sha512-x86_64.pl: +16% optimization for Atom. (and pending AVX2 changes). x86_64-xlate.pl: minor size/performance improvement. aesni-x86_64.pl: minor CTR performance improvement. Tests pass! bsaes-armv7.pl: add bsaes_cbc_encrypt and bsaes_ctr32_encrypt_blocks. Submitted by: Ard Biesheuvel <ard.biesheuvel@linaro.org> Contributor claims ~50% improvement in CTR and ~9% in CBC decrypt on Cortex-A15. bsaes-armv7.pl: take it into build loop. Typo. Always return errors in ssl3_get_client_hello If we successfully match a cookie don't set return value to 2 as this results in other error conditions returning 2 as well. Instead set return value to -2 which can be checked later if everything else is OK. Asm build portability. Don't use Win32 specific options in mk1mf.pl to build assembly language files. Missing semicolon. Fix non-copy builds. Only use -MMD and .sinclude in copy builds: other platforms don't support them. Missing file. Make executable. Fix test_ss. Add new asm target. Show start/end of tests. Avoid collisions. Make session ID test work. Make S/MIME test work. Make RSA test work. Make PKCS#7 test work. Make OCSP test work. More progress towards working tests. Get closer to a working single Makefile with test support. Fix warnings. e_aes.c: reserve for future extensions. dest4-sparcv9.pl: add clarification comment. des_enc.m4: add missing #include. Submitted by: David Miller aesni-x86_64.pl: fix typo and optimize small block performance. Call RAND_cleanup in openssl application. (cherry picked from commit 944bc29f9004cf8851427ebfa83ee70b8399da57) DTLS 1.2 cached record support. Add DTLS1.2 support for cached records when computing handshake macs instead of the MD5+SHA1 case for DTLS < 1.2 (this is a port of the equivalent TLS 1.2 code to DTLS). Make binary curve ASN.1 work in FIPS mode. Don't check for binary curves by checking methods: the values will be different in FIPS mode as they are redirected to the validated module version. Extend DTLS method macros. Extend DTLS method creation macros to support version numbers and encryption methods. Update existing code. Enable various DTLS extensions. Some TLS extensions were disabled for DTLS. Possibly because they caused problems with the old duplicated code. Enable them again. aesni-x86_64.pl: optimize CTR even further. Based on suggestions from Shay Gueron and Vlad Krasnov. PR: 3021 ghash-x86_64.pl: add AVX code path. aesni-x86_64.pl: optimize CTR even further. ghash-x86_64.pl: minor optimization. Typo. e_aes_cbc_hmac_sha1.c: fix rare bad record mac on AES-NI plaforms. PR: 3002 evptests.txt: additional GCM test vectors. ghash-x86_64.pl: fix length handling bug. Thanks to Shay Gueron & Vlad Krasnov for report. Initial CCM code. Simple example of CCM code use: translated from the FIPS self tests. Ignore mk1mf.pl output directories. Remove unused variable. x86cpuid.pl: make it work with older CPUs. PR: 3005 Handle assembler files. Missing MINFO generation. Allow variables to be overridden on the command line. Take the first definition of a variable. Preserve the C compiler. "Inherit CFLAGS when plaform is ""auto""." Include correctly. Spelling. Spelling. Add reallyclean target. x86_64-gf2m.pl: fix typo. x86_64-gf2m.pl: add missing Windows build fix for #2963. PR: 3004 Missing files target. Add function CMS_RecipientInfo_encrypt Add CMS_RecipientInfo_encrypt: this function encrypts an existing content encryption key to match the key in the RecipientInfo structure: this is useful if a new recpient is added to and existing enveloped data structure. Add documentation. Update SSL_CONF docs. Fix some typos and update version number first added: it has now been backported to OpenSSL 1.0.2. make depend. sha256-586.pl: code refresh. sha1-586.pl: code refresh. ghash-x86[_64].pl: code refresh. [aesni-]sha1-x86_64.pl: code refresh. sha512-x86_64.pl: add AVX2 code path. bn_nist.c: work around clang 3.0 bug. "Upate FAQ. Add description of ""allocate and encode"" operation for ASN1 routines. Document how versioning will for after the letter release reaches y." s3_cbc.c: make CBC_MAC_ROTATE_IN_PLACE universal. s3_cbc.c: get rid of expensive divisions. e_aes_cbc_hmac_sha1.c: align calculated MAC at cache line. It also ensures that valgring is happy. "ssl/*: revert ""remove SSL_RECORD->orig_len"" and merge ""fix IV"". Revert is appropriate because binary compatibility is not an issue in 1.1." e_aes_cbc_hmac_sha1.c: address the CBC decrypt timing issues. Address CBC decrypt timing issues and reenable the AESNI+SHA1 stitch. (cherry picked from commit 125093b59f3c2a2d33785b5563d929d0472f1721) x86_64 assembly pack: make Windows build more robust. PR: 2963 and a number of others bn/asm/mips.pl: hardwire local call to bn_div_words. sha512-ppc.pl: minimize stack frame. gost2814789t.c: portability fixes. Fix warnings. Don't include comp.h if no-comp set. More .gitignore adjustments. gost_crypt.c: add assertions. Submitted by: Seguei Leontiev PR: 2821 "Make ""make depend"" work on MacOS out of the box." .gitignore adjustments Fix warning. Initial .gitignore Fix tocsp: we don't need -trust_other any more. Fix typo. Make partial chain checking work if we only have the EE certificate in the trust store. gost_crypt.c: more intuitive ceiling. util/pl/VC-32.pl fix typo. "util/pl/VC-32.pl: refresh VC-32.pl: fix typo. Submitted by: Pierre Delaage Return success when the responder is active. Don't verify our own responses. Add support for '-' as input and output filenames in ocsp utility. Recognise verification arguments. fips/fipsld: improve cross-compile support. New verify flag to return success if we have any certificate in the trusted store instead of the default which is to return an error if we can't build the complete chain. Document -pubkey. Update ignores. Tabification. Remove accidental duplication. "Integrate host aes-s390x.pl: fix XTS bugs in z196-specific code path. "aesni-x86_64.pl: CTR face lift aes-s390x.pl: harmonize software-only code path [and minor optimization]. New functions to set lookup_crls callback and to retrieve internal X509_STORE from X509_STORE_CTX. Don't display messages about verify depth in s_server if -quiet it set. Add support for separate verify and chain stores in s_client. Reorganise parameters for OPENSSL_gmtime_diff. Make ASN1_UTCTIME_cmp_time_t more robust by using the new time functions. Submitted by: Florian Weimer <fweimer@redhat.com> PR: 2909 Update test cases to cover internal error return values. Remove IDNA wildcard filter. PR: 2909 Contributed by: Florian Weimer <fweimer@redhat.com> Fixes to X509 hostname and email address checking. Wildcard matching support. New test program and manual page. "aes-x86_64.pl: Atom-specific optimizations "aes-586.pl: Atom-specific optimization ppccap.c: fix typo. ppccap.c: restrict features on AIX 5. bn_word.c: fix overflow bug in BN_add_word. More strict aliasing fix. "e_camillia.c: remove copy-n-paste artifact ghash-sparcv9.pl: 22% improvement on T4. Remove unused static function. mk1mf.pl: correct flags. "e_os.h: keep stdin redifinitions to ""normal"" Windows." util/fipslink.pl: further adjustments. util/fipslink.pl: fix typo. e_os.h: skip redundant headers in fipscanister build. util/fipslink.pl: allow for single-step link. util/pl/VC-32.pl: make fipscanister.lib universally usable. test_t4: cover even Camellia. "SPARCv9 assembly pack: harmonize ABI handling (so that it's handled in one place at a time [aes|cmll]t4-sparcv9.pl: unify argument handling. ghash-sparcv9.pl: add VIS3 code path. New config module for string tables. This can be used to add new multi string components (as used in DN fields or request attributes) or change the values of existing ones. linux-pcc: make it more robust and recognize KERNEL_BITS variable. sparcv9_modes.pl: membars are reported as must-have. "md5-sparcv9.pl: avoid %asi modifications "perlasm/sparcv9_modes.pl: ""cooperative"" optimizations based on suggestions from David Miller." aest4-sparcv9.pl: split it to AES-specific and reusable part. Fix EC_KEY initialization race. Submitted by: Adam Langley md5-sparcv9.pl: add hardware SPARC T4 support. Submitted by: David Miller sparc_arch.h: add assembler helpers (and make it work on Solaris). Submitted by: David Miller md5-sparcv9.pl: more accurate performance result. Add md5-sparcv9.pl. sparcv9cap.c: add SPARC-T4 feature detection. Submitted by: David Miller * ssl/t1_enc.c (tls1_change_cipher_state): Stupid bug.  Fortunately in debugging code that's seldom used. Configure: allow for compiler options starting with double dash. Fix warning. Submitted by: Chromium Authors aes-mips.pl: interleave load and integer instructions for better performance. sha512-sparcv9.pl: fix binutils compilation error. Submitted by: David Miller e_aes.c: uninitialized variable in aes_ccm_init_key. PR: 2874 Submitted by: Tomas Mraz "bsaes-armv7.pl: closest shave. While 0.3 cpb improvement on S4 appears insignificant bsaes-armv7.pl: even closer shave. sha512-armv4.pl: optimize for Snapdragon S4. "bn_lcl.h: gcc removed support for ""h"" constraint Add linux-x32 target. sha1-armv4-large.pl: comply with ABI. Configure: add mips-mont to MIPS32 builds. "Enable message names for TLS 1.1 bss_dgram.c: fix compilation failure and warning on Windows with contemporary SDK. "gosthash.c: use memmove in circle_xor8 Rename Suite B functions for consistency. New function X509_chain_up_ref to dup and up the reference count of a STACK_OF(X509): replace equivalent functionality in several places by the equivalent call. wp-x86_64.pl: ~10% performance improvement. sha512-s390x.pl: lingering comment update. sha512-ia64.pl: 15-20% performance improvement. sha256-armv4.pl: 4% performance improvement. sha1-s390x.pl: lingering comment update. rc5.h: stop wasting space on 64-bit platforms [breaks binary compatibility!]. wp-mmx.pl: ~10% performance improvement. "sha512-586.pl: optimize SSE2 code path sha1-586.pl: let masm compile AVX code. x86gas.pl: treat OPENSSL_ia32cap_P accordingly to .hidden status. Fix memory leak. Always perform nexproto callback argument initialisation in s_server otherwise we use uninitialised data if -nocert is specified. bn_nist.c: compensate for VC bug [with optimization off!]. PR: 2837 crypto/bn/*.h: move PTR_SIZE_INT to private header. bss_dgram.c: fix typos in Windows code. sha256-586.pl: fix typos. Add certificate callback. If set this is called whenever a certificate is required by client or server. An application can decide which certificate chain to present based on arbitrary criteria: for example supported signature algorithms. Add very simple example to s_server. This fixes many of the problems and restrictions of the existing client certificate callback: for example you can now clear existing certificates and specify the whole chain. sha512-x86_64.pl: fix typo. sha512-x86_64.pl: add SIMD code paths. sha512-x86_64.pl: fix typo. sha256-586.pl: fix linking error. "Initial record tracing code. Print out all fields in SSL/TLS records for debugging purposes. Needs ""enable-ssl-trace"" configuration option." sha256-586.pl: add AVX and XOP code paths. bss_dgram.c: add BIO_CTRL_DGRAM_SET_DONT_FRAG. PR: 2830 Submitted by: Robin Seggelmann bss_dgram.c: make getsockopt work in cases when optlen is 64-bit value. Fix memory leak. b_sock.c: make getsockopt work in cases when optlen is 64-bit value. Fix memory leak. Parse authz correctly. Build on FreeBSD with gcc 4.6. "sha256-586.pl: full unroll to deliver additional ~16% sha512-x86_64.pl: >5% better performance. aesni-x86_64.pl: make it possibel to use in Linux kernel. sha256-586.pl: tune away regression on Nehalem core and incidentally improve performance on Atom and P4. sha256-586.pl optimization. s2_clnt.c: compensate for compiler bug. Fix warning. "Sanity check record length before skipping explicit IV in TLS 1.2 "s23_clnt.c: ensure interoperability by maitaining client ""version capability"" vector contiguous. PR: 2802" Add options to set additional type specific certificate chains to s_server. aes-armv4.pl: make it more foolproof [inspired by aes-s390x.pl in 1.0.1]. Update ordinals. CHANGES: harmonize with 1.0.0 and 1.0.1. modes_lcl.h: make it work on i386. PR: 2780 util/cygwin.sh update. PR: 2761 Submitted by: Corinna Vinschen modes/gcm128.c: fix self-test. "sha512-armv4.pl: optimize NEON code path by utilizing vbsl perlasm/x86masm.pl: fix last fix. Initial revision of ECC extension handling. Tidy some code up. Don't allocate a structure to handle ECC extensions when it is used for default values. Make supported curves configurable. Add ctrls to retrieve shared curves: not fully integrated with rest of ECC code yet. "eng_all.c: revert previous ""disable Padlock"" commit vpaes-x86_64.pl: out-of-date Apple assembler fails to calculate distance between local labels. PR: 2762 bsaes-x86_64.pl: optimize key conversion. bsaes-armv7.pl: optmize Sbox and key conversion. "x86_64-xlate.pl: remove old kludge. PR: 2435 bsaes-armv7.pl: change preferred contact. Fix memory leak cause by race condition when creating public keys. Thanks to Ivan Nestlerode <inestlerode@us.ibm.com> for reporting this bug. ABI compliance fixes. Move new structure fields to end of structures. bn_nist.c: make new optimized code dependent on BN_LLONG. ghash-x86.pl: engage original MMX version in no-sse2 builds. x86_64-xlate.pl: proper solution for RT#2620. sha512-sparcv9.pl: work around V8+ warning. "aes-ppc.pl "Sanitize usage of <ctype.h> functions. It's important that characters are passed zero-extended bn_nist.c: harmonize buf in BN_nist_mod_256 with other mod functions. Only allow one SGC handshake restart for SSL/TLS. (CVE-2011-4619) New ctrl values to clear or retrieve extra chain certs from an SSL_CTX. New function to retrieve compression method from SSL_SESSION structure. Delete SSL_SESSION_get_id_len and SSL_SESSION_get0_id functions as they duplicate functionality of SSL_SESSION_get_id. Note: these functions have never appeared in any release version of OpenSSL. update CHANGES. apps/speed.c: fix typo in last commit. vpaes-x86.pl: portability fix. PR: 2657 Fix warning. Make it possible to set a time for verification. modexp512-x86_64.pl: Solaris protability fix. PR: 2656 x86-mont.pl: fix bug in integer-only squaring path. PR: 2648 bn/asm/mips.pl: fix typos. Add DTLS-SRTP. Configure: reimplement commit#21695. "Configure "bsaes-x86_64.pl: add Win64 SEH and ""hadrware"" calls to aes-x86_64.pl." bn_nist.c: fix strict-aliasing compiler warning. e_aes.c: additional sanity check in aes_xts_cipher. arm_arch.h: allow to specify __ARM_ARCH__ elsewhere. x86cpuid.pl: compensate for imaginary virtual machines. Configure: harmonize darwin64-x86_64-cc line with assembler pack. Configure: initial support for iOS. Configure: allow ./config to pass compiler flags with white spaces. "fips_canister.c: add cross-compiler support for iOS (it applies even to MacOS X fips_premain.c: fix warning about _exit on MacOS X. e_aes.c: fold aesni_xts_cipher and [most importantly] fix aes_xts_cipher's return value after custom flag was rightly reverted. "armv4cpuid.S bsaes-x86_64.pl: add CBC decrypt and engage it in e_aes.c. "Add missing algorithms to disable bsaes-x86_64.pl: optimize InvMixColumns. e_aes.c: fold even aesni_ccm_cipher. e_aes.c: prevent potential DoS in aes_gcm_tls_cipher. "fips_canister.c: harmonize fingerprinting for all Windows x86gas.pl: relax .init segment alignment. fips.c: remove preprocessor artefact. fix (?) AVX clearing fips/fips_[canister|premain].c: make it work with VC6 and add sentinels even to code segments. sha1-mips.pl: fix typo. fips_canister.c: more cross-compiler platfroms verified. "arm_arch.h: add missing pre-defined macro Build fipscanister.o only by default. Utility build now needs make build_tests Recognise new option. Update premain fingerprint. fips_enc.c: assign minimal block size to bad_cipher [to avoid arithmetic exceptions in TLS layer]. engines/.cvsignore: stop whining about e_padlock-*.s. "x86_64-xlate.pl: make vpaes-x86_64.pl and rc4-md5-x86_64 work with ml64 bsaes-x86_64.pl: make it work with ml64. [bs|vp]aes-x86[_64].pl: typos and clarifications. c_allc.c: add aes-xts to loop. Do global replace to remove assembly language object files. bn_mont.c: get corner cases right in updated BN_from_montgomery_word. bn_exp.c: further optimizations using more ideas from http://eprint.iacr.org/2011/239. x86_64-mont.pl: minor optimization. bn_mont.c: simplify BN_from_montgomery_word. "bn_shift.c: minimize reallocations Add android-x86. Clarify usage message. Allow override of GCCVER and noexecstack checking from environment. Vxworks support. Add usage messages. e_aes.c: fix bug in aesni_gcm_tls_cipher. aesni-x86[_64].pl: fix bug in CCM code. Remove o_init.o special case from Makefile: this doesn't work. Update instructions. Fix warnings. Synv ordinals with 1.0.1-stable. Sync ordinals with 1.0.1-stable. Add fips/ecdh directory. New -force_pubkey option to x509 utility to supply a different public key to the one in a request. This is useful for cases where the public key cannot be used for signing e.g. DH. "? crypto/aes/aes-armv4.S ? crypto/aes/aesni-sha1-x86_64.s ? crypto/aes/aesni-x86_64.s ? crypto/aes/foo.pl ? crypto/aes/vpaes-x86_64.s ? crypto/bn/.bn_lib.c.swp ? crypto/bn/armv4-gf2m.S ? crypto/bn/diffs ? crypto/bn/modexp512-x86_64.s ? crypto/bn/x86_64-gf2m.s ? crypto/bn/x86_64-mont5.s ? crypto/ec/bc.txt ? crypto/ec/diffs ? crypto/modes/a.out ? crypto/modes/diffs ? crypto/modes/ghash-armv4.S ? crypto/modes/ghash-x86_64.s ? crypto/modes/op.h ? crypto/modes/tst.c ? crypto/modes/x.h ? crypto/objects/.obj_xref.txt.swp ? crypto/rand/diffs ? crypto/sha/sha-512 ? crypto/sha/sha1-armv4-large.S ? crypto/sha/sha256-armv4.S ? crypto/sha/sha512-armv4.S Index: crypto/objects/obj_xref.c =================================================================== RCS file: /v/openssl/cvs/openssl/crypto/objects/obj_xref.c e_padlock-x86_64.pl: fix typo. e_padlock-x86*.pl: Nano-related update. e_padlock-x86.pl: previous C3-specific fix was incomplete. e_padlock-x86.pl: make it work on VIA C3 (which doesn't support SSE2). Remove s = s * P deferral. bsaes-x86_64.pl: add due credit. Typo. Use function name FIPS_drbg_health_check() for health check function. Add explanatory comments to health check code. Remove unused variable. Revise DRBG to split between internal and external flags. One demand health check function. Perform generation test in fips_test_suite. Option to skip dh test if fips_test_suite. Make latest assembler additions (vpaes and e_padlock) work in Windows build. "sha256-586.pl: minor optimization "sha512-x86_64.pl: +15% better performance on Westmere and incidentally Atom. Other Intel processors +5% Make HMAC kat symbols static. Fix warning. Allow for dynamic base in Win64 FIPS module. More extensive DRBG health check. New function to call health check for all DRBG combinations. Delete strength parameter from FIPS_drbg_generate. It isn't very useful (strength can be queried using FIPS_drbg_get_strength ) and adds a substantial extra overhead to health check (need to check every combination of parameters). Check we recognise DRBG type in fips_drbgvs.c initialised DRBG_CTX if we don't set type in FIPS_drbg_new(). vpaes-x86[_64]*.pl: fix typo. Put quick DRBG selftest return after first generate operation. engines/asm/e_padlock-x86_64.pl: name it right and fix small bug. Fix d2i_SSL_SESSION. Fix expected DEFFLAG for default config. Update dependencies. Rename some more symbols for fips module. Sync ordinals with 1.0.1-stable. Stop warnings. bn_exp.c: improve portability. util/incore: fix typo. Fix warning. Don't use some object files in FIPS build. Rename sparc symbols. eng_rsax.c: improve portability. "Correct maximum request length. SP800-90 quotes maximum bits modexp512-x86_64.pl: make it work with ml64. Makefile.org: get commit#21249 right. bn_div.c: remove duplicate code by merging BN_div and BN_div_no_branch. x86_64-mont5.pl: add missing Win64 support. eng_rdrand.c: make it link in './config 386' case. armv4-mont.pl: profiler-assisted optimization gives 8%-14% improvement (more for longer keys) on RSA/DSA. x86_64-xlate.pl: fix movzw. alphacpuid.pl: fix alignment bug. alpha-mont.pl: fix typo. PR: 2577 x86_64-mont.pl: futher optimization resulting in up to 48% improvement (4096-bit RSA sign benchmark on Core2) in comparison to initial version from 2005. "Use ""resp"" for default directory name for .rsp files." "Initial support for tests for 2.0 module. Not complete and not all working yet. Allow test type to be determined by a regexp on the pathname. So tests like: DSA/SigVer aes/asm/aesni-*.pl: fix CCM and further optimize it. modes/ccm128.c: minor branch optimization. Fix warnings. Update CHANGES. util/incore: fix brown-bag bug. util/incore: make transition smoother. fips_canister.c: add support for embedded ppc linux. "aes-ppc.pl: minor optimization favoring embedded processors (performance of ""big"" processors is unaffected)." Add RSAX builtin engine. It optimizes RSA1024 sign benchmark. Add support for ECCCDH test format. fips/Makefile: HP-UX-specific update. ms/uplink.c: fix Visual Studio 2010 warning. perlasm/cbc.pl: fix tail processing bug. PR: 2557 Rename symbol. x86_64-mont.pl: add squaring procedure and improve RSA sign performance by up to 38% (4096-bit benchmark on Core2). "x86_64-xlate.pl: sha1 and md5 warnings made it to nasm 2.09 sha1-x86_64.pl: nasm 2.07 screws up labels if AVX path is compiled. s390x-gf2m.pl: commentary update (final performance numbers turned to be higher). sha1-x86_64.pl: fix win64-specific typos and add masm support. x86_64-xlate.pl: masm-specific update. Delete any EXARG value first. Add no-asm argument to Configure if needed. crypto/aes/Makefile: make it work on IRIX. rc4-586.pl: add Atom performance results. md5-x86_86.pl: remove redundant instructions. crypto/bn/Makefile: fix typo. rc4-x86_64.pl: commentary update. Add symbols for the parameters on a couple more functions. Correction. Strip CRs when installing fips_premain.c Correct compat library rule in FIPS mode. Give parameters names in prototypes. "Option ""fipscheck"" which checks to see if FIPS is autodetected in a build. Use this for WIN32 builds." Allow applications to specify alternative FIPS RAND methods if they are sure they are OK. API to retrieve FIPS rand method. rc4_skey.c: remove dead/redundant code (it's never compiled) and misleading/obsolete comment. x86_64cpuid.pl: fix typo. Typo. Remove FIPS RSA functions from crypto/rsa. Clone digest prototypes. e_aes.c: fix typo. e_aes.c: fix aes_cfb1_cipher. Add more cipher prototypes. sha1-586|x86_64.pl: add SSSE3 and AVX code paths. aes-ppc.pl: handle unaligned data on page boundaries. rc4-x86_64.pl: fix due credit. rc4-x86_64.pl: RC4_options fix-up. rc4-x86_64.pl: major optimization for contemporary Intel CPUs. rc4-586.pl: optimize even further... Typo. x86_64cpuid.pl: get AVX masking right. rc4-586.pl: optimize unused code path. e_padlock.c: last x86_64 commit didn't work with some optimizers. rc4-586.pl: 50% improvement on Core2 and 80% on Westmere. spacrv9cap.c: addenum to recent EC optimizations. x86_64-gf2m.pl: add Win64 SEH. ppccap.c: addenum to recent EC optimizations. "ec_cvt.c: ARM comparison results were wrong PR: 2295 Submitted by: Alexei Khlebnikov <alexei.khlebnikov@opera.com> Reviewed by: steve OOM checking. Leak in OOM fix. Fall-through comment. Duplicate code elimination. x86_64cpuid.pl: allow shared build to work without -Bsymbolic. PR: 2466 ppc-xlate.pl: get linux64 declaration right. cms-test.pl: make it work with not-so-latest perl. x86gas.pl: add palignr and move pclmulqdq. "x86_64-xlate.pl: allow ""base-less"" effective address Add SSL_INTERN definition. Sync ordinals. bn_nist.c: fix shadowing warnings. fips_canister.c: pick more neutral macro name. Reorder signature algorithms in strongest hash first order. Rename FIPS_mode_set and FIPS_mode. Theses symbols will be defined in the FIPS capable OpenSSL. Add NSA sublicense info. Update instructions. Typo. fips_canister.c: fix typo. "fips_canister.c: initial support for cross-compiling. ""Initial"" refers to the two-entry list of verified platforms in #ifndef FIPS_REF_POINT_IS_SAFE_TO_CROSS_COMPILE pre-processor section." Initialise rc. Remove gf2m modules from bn_asm if no-ec2m set. Remove FIXME comments. Fixes for WIN64 FIPS build. "Get OPENSSL_FIPSSYMS from environment in fipsas.pl Hide more symbols. ARM assembler pack. Add bn_GF2m_mul_2x2 implementation (see source code for details and performance data). Remove superfluous PRNG self tests. Print timer resolution. Update status. Remove debugging print. Explicitly use LINKDIRS for fipsdist links. Fix warning. Include fipssyms.h for ARM builds to translate symbols. Translate arm symbol to fips_*. Use faster curves for ECDSA self test. Use more portable clock_gettime() for fips_test_suite timing. Output times of each subtest. Two more symbol renames. Handle multiple CPUID_OBJ correctly. Rename some more symbols. Some changes to support VxWorks in the validted module. Update symbol translation table. Recognise invalid enable/disable options. Option to shut up bogus warnings. Clarification. Make sure overrides work for RSA/DSA. Add PRNG security strength checking. Rewrite OutputValue to avoid use of buffer when printing out hex values. Delete unused functions from fips_utl.h. Increase xts line buffer. Reconise no-ec-nistp224-64-gcc-128 option. Make fipscanisteronly auto detect work on WIN32. Update ordinals. "Add continuous RNG test to entropy source. Entropy callbacks now need to specify a ""block length""." perlasm/x86gas.pl: make OPENSSL_instrument_bus[2] compile. Typo. "Add ""post"" option to fips_test_suite to run the POST only and exit." Report each cipher used with CMAC tests. Only add one error to error queue if a specific test type fails. Remove several of the old obsolete FIPS_corrupt_*() functions. Remove duplicate flag. No need to disable leak checking for FIPS builds now we use internal memory callbacks. Update ECDSA selftest to use hard coded private keys. Include tests for prime and binary fields. Update fips_premain.c fingerprint. Update copyright year. Zero ciphertext and plaintext temporary buffers. Check FIPS_cipher() return value. Use correct version number. Fix warning. "Don't give dependency warning for fips builds. Give error for ""make depend"" in restricted tarball builds. Document how restricted tarballs work." New function to return security strength of PRNG. Only use fake rand once per operation. This stops the EC pairwise consistency test interfering with the test. Update CHANGES. Disable test fprintf. Make WIN32 static builds work again. restore .cvsignore "Only zeroise sensitive parts of DRBG context Add .cvsignore Corrections to the VMS build system. Submitted by Steven M. Schweda <sms@antinode.info> Add .cvsignore Remove unused function. Make some Unix builds work again. Typo. * fips/fipsalgtest.pl: Test the testvectors for all the CMAC ciphers we support. "* fips/cmac/fips_cmactest.c: Some say TDEA "Implement FIPS CMAC. * fips/fips_test_suite.c "make update (1.1.0-dev) This meant alarger renumbering in util/libeay.num due to symbols appearing in 1.0.0-stable and 1.0.1-stable.  However * crypto/crypto-lib.com: Add a few more missing modules. * util/mkdef.pl: Add crypto/o_str.h and crypto/o_time.h.  Maybe some more need to be added... Use a signed value to check return value of do_cipher(). * apps/makeapps.com: Add srp. * apps/makeapps.com: Forgot to end the check for /POINTER_SIZE=64=ARGV with turning trapping back on. * test/maketests.com: Do the same check for /POINTER_SIZE=64=ARGV here. * test/clean-test.com: A new script for cleaning up. Implement health checks needed by SP800-90. Fix warnings. Instantiate DRBGs at maximum strength. Fix Tom Wu's email. Fix warning. Check requested security strength in DRBG. Add function to retrieve the security strength. Update status. Make no-ec2m work again. Add a few more symbol renames. Update .cvsignore Typo. New SP 800-56A compliant version of DH_compute_key(). Uninstantiate and free functions for DRBG. Fix couple of bugs in CTR DRBG implementation. "Initial ia64-mont.pl: optimize short-key performance. ghash-x86.pl: optimize for Sandy Bridge. Update status information. Stop warnings. Make mkfiles.pl work with fipscanisteronly. Make fipscanisteronly work with WIN32 build system. Removing debugging print. "Make ""make links"" work in fipscanisteronly builds." Call Makefile.fips when making a fips tarball. Remove debugging option. Update dependencies. Need to link additional directories for fipscanisteronly build. tools and rehash not needed for fips build. AES GCM selftests. Make -DOPENSSL_FIPSSYMS work for assembly language builds. Remove debugging command. Reorder fipssyms.h to include assembly language symbols at the end. Include openssl/crypto.h first in several other files so FIPS renaming is picked up. Experimental symbol renaming to avoid clashes with regular OpenSSL. Make sure crypto.h is included first in any affected files. Ignore final '\n' when checking if hex line length is odd. Add .cvsignore. New function BN_nist_mod_func which returns an appropriate function if the passed prime is a NIST prime. "Remove dependency of dsa_sign.o and dsa_vrf.o: new functions FIPS_dsa_sig_new and FIPS_dsa_sig_free Make no-ec2m work on Win32 build. Add nexprotoneg support too. dso_dlfcn.c: make it work on Tru64 4.0. PR: 2316 gcm128.c: make it work with no-sse2. Add Makefile.fips. "New ""fispcanisteronly"" build option: only build fipscanister.o and associated utilities. This functionality will be used by the validated tarball." Make Windows build work with GCM. Return security strength for supported DSA parameters: will be used later. x86gas.pl: make data_short work on legacy systems. xts128.c: initial draft. Add GCM IV generator. Add some FIPS restrictions to GCM. Update fips_gcmtest. ccm128.c: initialize ctx->block (what I was smoking?). ccm128.c: initial draft. Sync with 1.0.1 branch. (CVE-2011-0014 OCSP stapling fix has been applied to HEAD as well.) Typo. Fix memory leak. Use default ASN1 if flag set. gcm128.c: allow multiple calls to CRYPTO_gcm128_aad. Fix target config errors. Make no-asm work in fips mode. Add android platform. Don't try to set pmd if it is NULL. Support more DSA2 tests. Tolerate mixed case and leading zeroes when comparing. "Provisional "Add fips option into Configure "Move all FIPSAPI renames into fips.h header file add .cvsignore Update source files to handle new FIPS_lock() location. Add FIPS_lock() definition. Remove stale function references from fips.h FIPS changes to test/Makefile: rules to build FIPS test applications. FIPS mode changes to make RNG compile (this will need updating later as we need a whole new PRNG for FIPS). 1. avoid use of ERR_peek(). 2. If compiling with FIPS use small FIPS EVP and disable ENGINE New function EC_KEY_set_affine_coordinates() this performs all the NIST PKV tests. Constify. Fix warning. Fix escaping code for string printing. If *any* escaping is enabled we must escape the escape character itself (backslash). Better method for creating SSLROOT:. Make sure to include the path to evptest.txt. TABLE update. VERY EXPERIMENTAL HMAC redirection example in OpenSSL ENGINE. Untested at this stage and probably wont work properly. "Don't define an empty CFLAGS Better way to build tests.  Taken from OpenSSL-1_0_1-stable sha512-mips.pl: add missing 64-bit byte swap. Add aes-mips.pl assembler module. "sha512-mips.pl: fix ""little-endian"" typos." PR: 2295 Submitted by: Alexei Khlebnikov <alexei.khlebnikov@opera.com> Reviewed by: steve OOM checking. Leak in OOM fix. Fall-through comment. Duplicate code elimination. x86_64-xlate.pl: fix LNK4078 and LNK4210 link warnings. PR 2356 sha512-mips.pl: add missing byte swap for little-endians. "sha1-mips.pl ghash-s390x.pl: reschedule instructions for better performance. VC-32.pl: default to nasm if neither nasm or nasmw is is found at the moment. PR: 2338 Add ghash-s390x.pl. modes/asm/ghash-*.pl: switch to [more reproducible] performance results collected with 'apps/openssl speed ghash'. ghash-ia64.pl: 50% performance improvement of gcm_ghash_4bit. NPN tests. Fix warnings. util/cygwin.sh: maintainer's update. Submitted by: Corinna Vinschen Makefile.share: fix brown-bag typo in link_o.darwin. crypto/modes/Makefile: fix typo in ghash-parisc.s rule. sha1-armv4-large.pl: reschedule instructions for dual-issue pipeline. rc5_locl.h: make inline assembler clang-friendly. md32_common.h: modify MD32_REG_T pre-processing logic [triggered by clang]. Make ctr mode behaviour consistent with other modes. Add Next Protocol Negotiation. alphacpuid.pl: fix brown-bag bug. Sign mismatch. Missing prototype. "aes-x86_64.pl: commit#19797 was overzealous sha1-alpha.pl: commentary update. rc4-s390x.pl: harmonize build rule with other similar rules. "ghash-ia64.pl: excuse myself from implementing ""528B"" variant." modes/Makefile: update clean rule. eng_aesni.c: switch to CRYPTO_ctr128_encrypt_ctr32. aes-x86_64.pl: remove redundant instructions. perlasm/x86_64-xlate.pl: extend SSE>2 to ml64. aesni-x86_64.pl: fix typos. perlasm/x86asm.pl: move aesni and pclmulqdq opcodes to aesni-x86.pl and ghash-x86.pl. #if out deleted function from headers so it isn't picked up by WIN32 build system. WIN32 build fix. Sync ordinals and update. Update symhacks. "oops Makefile.shared: link_o.darwin comment update. Makefile.shared: update link_o.dawrin rule. PR: 2306 sha1-armv4-large.pl: add performance data for Cortex A8 core. Configure: fix aes_ctr.o regexp. armv4-mont.pl: addenum to previous commit#19749. rand_nw.c: compensate for gcc bug (using %edx instead of %eax at -O3). PR: 2296 ghash-sparcv9.pl: fix Makefile rule and add performance data for T1. VC-32.pl: fix /Fd name generation. PR: 2284 ghash-x86.pl: commentary updates. "ghash-x86.pl: ""528B"" variant of gcm_ghash_4bit_mmx gives 20-40% improvement." "x86_64-xlate.pl: refine mingw support and regexps Configure: update mingw config-lines. "gcm128.c: P.-M. Hager has tipped about possibility to fold reductions in gcm_ghash_4bit. Taking the idea a step further I've added extra 256+16 bytes of per-key storage ghash-x86.pl: MMX optimization (+20-40%) and commentary update. gcm128.c: commentary update. "rc4-x86_64.pl: ""Westmere"" optimization." ghash-x86[_64].pl: add due credit. x86asm.pl: consistency imrovements. x86_64-xlate.pl: refine some regexp's and add support for OWORD/QWORD PTR. """Jumbo"" update for crypto/modes: - introduce common modes_lcl.h; - ctr128.c: implement additional CRYPTO_ctr128_encrypt_ctr32 interface; - gcm128.c: add omitted ARM initialization bss_file.c: refine UTF-8 logic on Windows. Add ghash-parisc.pl. bss_file.c: reserve for option to encode file name with UTF-8. md5-ia64.S: fix assembler warning. x86_64cpuid.pl: ml64 is allergic to db on label line. aes-ppc.pl: 10% performance improvement on Power6. perlasm/x86*: add support to SSE>2 and pclmulqdq. x86_64-xlate.pl provides correct solution to problem addressed in committ #19244. sha1-alpha.pl: addenum till commit #19547. Add ghash-alpha.pl assembler module. sha1-alpha.pl: engage it in build. alpha-mont.pl: comply with stack alignment requirements. Remove obsolete PRNG note. Add comment about use of SHA256 et al. rand_win.c: fix logical bug in readscreen. bss_file.c: fix MSC 6.0 warning. e_capi.c: fix typo. Fix UPLINK typo. "ghash-ia64.pl: new file Submitted by: Martin Kaiser Reject PSS signatures with unsupported trailer value. Algorithm specific ASN1 signing functions. Reserve for option to implement AES counter in assembler. PR: 2100 Submitted by: James Baker <jbaker@tableausoftware.com> et al. Workaround for slow Heap32Next on some versions of Windows. Use supplied ENGINE when initialising CMAC. Restore pctx setting. Make update. Make CMAC API similar to HMAC API. Add methods for CMAC. "PR: 2161 Submitted by: Doug Goldstein <cardoe@gentoo.org> Typo. Architecture specific header files need special handling. Have the VMS build system catch up with the 1.0.0-stable branch. Add flags functions which were added to 0.9.8 for fips but not 1.0.0 and later. rand_win.c: fix time limit logic. "x86_64-xlate.pl: refine sign extension logic when handling lea. PR: 2094 "ia64-mont.pl: add shorter vector support (""shorter"" refers to 512 bits and less)." Fix version handling so it can cope with a major version >3. Although it will be many years before TLS v2.0 or later appears old versions of servers have a habit of hanging around for a considerable time so best if we handle this properly now. Modify compression code so it avoids using ex_data free functions. This stops applications that call CRYPTO_free_all_ex_data() prematurely leaking memory. "Simplify RI+SCSV logic: 1. Send SCSV is not renegotiating ia64-mont.pl: addp4 is not needed when referring to stack (this is 32-bit HP-UX thing). Updates to conform with draft-ietf-tls-renegotiation-03.txt: 1. Add provisional SCSV value. 2. Don't send SCSV and RI at same time. 3. Fatal error is SCSV received when renegotiating. ppc64-mont.pl: commentary update. b_sock.c: correct indirect calls on WinSock platforms. PR: 2130 Submitted by: Eugeny Gostyukhin ppccap.c: fix compiler warning and perform sanity check outside signal masking. ppc64-mont.pl: clarify comment and fix spelling. Update RI to match latest spec. MCSV is now called SCSV. Don't send SCSV if renegotiating. Also note if RI is empty in debug messages. Update sha512-parisc.pl and add make rules. Switch to new uplink assembler. ppccap.c: tidy up. ppc64-mont.pl: missing predicate in commentary. Use properly local variables for thread-safety. Submitted by: Martin Rex Constify crypto/cast. Constify crypto/cast. Replace the broken SPKAC certification with the correct version. bss_dgram.c: re-fix BIO_CTRL_DGRAM_GET_PEER. PR: 2110 Add PBKFD2 prototype. cms-test.pl: use EXE_EXT. PR: 2107 OPENSSL_ia32cap.pod update. Add sha512-parisc.pl. aesni-x86.pl: eliminate development comments. Add missing functions to allow access to newer X509_STORE_CTX status information. Add more informative message to verify callback to indicate when CRL path validation is taking place. oops! Need to check <= 0 here. Use new X509_STORE_set_verify_cb function instead of old macro. Verification callback functions. Clarification. Add docs for X509_STORE_CTX_new() and related functions. Typo. Update ordinals. Revert extra changes from previous commit. cmll-x86_64.pl: small buglet in CBC subroutine. PR: 2035 Typo presumably.... Missing break. Stop unused variable warning on WIN32 et al. Update README with bug report and contribution details. "PR: 1999 Submitted by: ""Bayram Kurumahmut"" <kbayram@ubicom.com> Approved by: steve@openssl.org Don't use HAVE_FORK in apps/speed.c it can conflict with configured version." "PR: 2003 Make it possible to install OpenSSL in directories with name other than ""lib"" for example ""lib64"". Based on patch from Jeremy Utley." Update from 1.0.0-stable. Update from 1.0.0-stable. Update from 0.9.8-stable. Fix typos. Update from 1.0.0-stable. Use new time routines to avoid possible overflow. Update from 1.0.0-stable. Make update. Fix warnings. Update from 1.0.0-stable. Update from 0.9.8-stable. Fix from 0.9.8-stable. Update from 0.9.8-stable. Update from 1.0.0-stable. Update FAQ with note about online docs. Initialize outlen. Update from 1.0.0-stable. Update from 0.9.8-stable. Update from 1.0.0-stable. "Oops Update from 1.0.0-stable. Update from 1.0.0-stable. Update from 0.9.8-stable. Add CHANGES entries from 0.9.8-stable. Update from 1.0.0-stable. Update from 1.0.0-stable. Update from 1.0.0-stable. Update from 1.0.0 stable branch. Update from 1.0.0-stable. Update from 1.0.0-stable. "Functional VMS changes submitted by sms@antinode.info (Steven M. Schweda). Thank you\! (note: not tested for now Update from stable branch. Update from 1.0.0-stable. Update from stable branch. x86_64cpuid.pl: refine shared cache detection logic. x86_64-xlate.pl: small commentary update. "e_padlock.c: fix typo (missing #endif) and switch to __builtin_alloca (with introduction of 64-bit support alloca must be  declared and there is no standard way of doing that Typo. Typo. Update from 1.0.0-stable branch. Fix from 1.0.0-stable. libeay.num: add ENGINE_load_aesni. Make it possible to compile CAPI engine under mingw64. Make CAPI engine UNICODE aware (it didn't work on Win64). eng_aesni.c: win32 fix. ec_mult.c: fix C4334 win64 compiler warning. eng_aesni.c: fix assembler declarations. aesni-x86_64.pl: resolve LNK1223 error. Updates from 1.0.0 stable branch. Make the NULL definition of OPENSSL_ia32cap_loc() compatible with the declaration in crypto.h. Typo. Update from 1.0.0-stable. aesni-x86.pl: fix another typo and add test script. aesni-x86.pl: fix typos. Update from 1.0.0-stable. e_padlock: add support for x86_64 gcc. Minor shaX-s390x.pl update. AESNI perlasm update. Expand OPENSS_ia32cap to 64 bits. Merge from 1.0.0-stable branch. Updates from 1.0.0-stable branch. Updates from 1.0.0-stable. Update from 0.9.8-stable. Autogeneration seems to have changed slightly. Update version info. Merge from 1.0.0-stable branch. Update from 1.0.0-stable. Nothing to see here... move along.... Update from stable branch. Update CHANGES. Update FAQ. Update from stable branch. Update from stable branch. Update from stable branch. Typo in usage message. aes-390x.pl: commentary update. Make SPARC assembler modules *really* Purify-friendly. Use correct ctx name. Fix from stable branch. Update from stable branch. Update from stable branch. Update from stable branch. Update from stable branch. Update from stable branch. Update from stable branch. Typo. Update from stable branch. Use the right length (reported by Quanhong Wang). Fix memory leak. Make STORE an experimental feature. Make it possible to disable STORE. Reference bug. Data not initialised. Notified by Gerardo Ganis <gerardo.ganis@cern.ch> Make no-engine work again. Return correct exit code. rc4-s390x.pl: allow for older assembler and optimize character loop. RC4 for s390x. s390x-mont.pl: optimize prologue. sha1-sparcv9a.pl: fix bug in commentary section. s390x assembler pack update. "Reserve for ""multilib"" suffix Update from stable branch. Allow CC to be overridden. "Make PKCS#8 the standard write format for private keys Updatde from stable branch. Update FAQ. Add UltraSPARC VIS-powered SHA1 block procedure. Makefile.shared: improve portability of commit#17753. Document dead code. bn_lib.c: [re-]fix Win64 compiler warning. Die earlier if hash is NULL. (Coverity IDs 137 & 138). Reverse incorrect earlier fix. Die earlier if we have no hash function. Add standard .cvsignore file. "x86_64-xlate.pl: support for binary constants "Add modes/cts128.c cmll-x86_64.pl: fix bug in cbc tail processing and comply with Win64 ABI spec. Remove dead code. (Coverity ID 2) Remove misleading dead code. Constify. (Coverity ID 142) !a && !a->b is clearly wrong! Changed to !a || !a->b (Coverity ID 145). Patch the omission from prvious commit #17716. Engage crypto/modes. cmll-x86_64.pl: Win64 SEH section to handle pushf/popf in CBC routine. Optimize #undef DES_UNROLL for size. Incidentally http://cvs.openssl.org/chngview?cn=17710 also made it possible to build the library without -D_CRT_NONSTDC_NO_DEPRECATE. This commit expands it even to apps catalog and actually omits the macro in question from Configure. x86_64-xlate.pl: fix masm hexadecimal constants. Back out pointless change. Fix from stable branch. apps/speed.c: children should not inherit buffered I/O PR: 1787 Submitted by: Artur Klauser <aklauser@google.com> experimental-foo support for mk1mf.pl. Don't stop -cipher from working. Update from stable branch. Fix compilation with -DOPENSSL_NO_DEPRECATED. Update from stable-branch. Integrate J-PAKE and TLS-PSK. Increase PSK buffer size. Fix memory leaks. Ignore generated ASM. Ignore saved Makefile. Revert another size_t change. Update from stable branch. Update from stable branch. Update from stable branch. Make -DKSSL_DEBUG work again. Formatting. Add initial support for mingw64. PR: 1693 Submitted by: Alon Bar-Lev Fix prototypes. Fix warnings: printf format mismatches on 64 bit platforms. Change assert to OPENSSL_assert(). Fix e_padlock prototype. Fix asserts. Fix incorrect dependency. Fix warnings. Fix warning. Fix bss_log.c on Windows. More size_tification. size_tification. "size_t-fy EVP_CIPHER. Note that being size_t-fied it doesn't require underlying cipher to be size_t-fied randfile.c: .rnd can become orphaned on VMS. Submitted by: David North Fix typo in ./config. Submitted by: Sander Temme Fix crash in BN_rshift. PR: 1663 Win32 fixes... add new directory to build system. Fix warnings. Fix warnings and various issues. C++ style comments. Signed/unsigned warning in apps.c Missing targets in jpake/Makefile Add permanentIdentifier OID. Create function of the form OBJ_bsearch_xxx() in bsearch typesafe macros with the appropriate parameters which calls OBJ_bsearch(). A compiler will typically inline this. This avoids the need for cmp_xxx variables and fixes unchecked const issues with CHECKED_PTR_OF() Fix a shed load or warnings: Duplicate const. Use of ; outside function. Fix warning a different way. Optimize bn_correct_top. Type-safe OBJ_bsearch_ex. "Remove the DTLS1_BAD_VER thing from 0.9.9-dev. It is present in 0.9.8 but has been omitted from HEAD (0.9.9) Experimental new date handling routines. These fix issues with X509_time_adj() and should avoid any OS date limitations such as the year 2038 bug. Make sure that SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG can't enable disabled ciphersuites. Update FAQ. "Really get rid of unsafe double-checked locking. Also Fix warning. Fix from stable branch. Make no-tlsext compile. Support for policy mappings extension. Delete X509_POLICY_REF code. Fix handling of invalid policy extensions to return the correct error. Add command line option to inhibit policy mappings. Initial support for name constraints certificate extension. TODO: robustness checking on name forms. sha1-armv4-large cosmetics. "sha1-armv4-large.pl performance improvement. On PXA255 it gives +10% on 8KB block Make explicit_policy handling match expected RFC3280 behaviour. "x86_64-xlate.pl: implement indirect jump/calls Remove junk argument to function_begin in sha/asm/*-586.pl. PR: 1681 x86_64cpuid.pl cosmetics: harmonize $dir treatment with other modules. x86masm.pl cosmetics. Update from stable branch. Update from stable branch. Fix from stable branch. Update from stable branch. Update from stable branch. Update from stable branch. Add acknowledgement. Sync ordinals. Fix memory leak. The canonical X509_NAME_ENTRY STACK is reallocated rather than referencing existing X509_NAME_ENTRY structures so needs to be completely freed. Update from stable branch. Update CHANGES. Update from stable branch. Update from stable branch. Update from stable branch. Remove test fprintf. Remove old non-safestack code. Tidy up and add comments to selection code. Make DSO WIN32 compile again. Update ordinals. Remove store from Windows build. More type-checking. Avoid name clash. Add support for client cert engine setting in s_client app. Add appropriate #ifdefs round client cert functions in headers. Update year. #undef OCSP_RESPONSE: CryptoAPI uses this too. Fix indentation. Free old store name (if any). "Allow ENGINE client cert callback to specify a set of other certs Update from stable branch. Update from stable branch. Stop const mismatch warning. Stop warning about extra ';' outside of function. Everyone's had a few years to port their favorite additions to 0.9.7 to HEAD (and the 0.9.8 branch).  Remove the reminder. Fix from stable branch. LHASH revamp. make depend. Add README about removed root CA certificates. Typo. Typo. Update ordinals. Update from stable branch. Fix from stable branch. Typo. (From 0.9.8-stable/S. Henson) PR: 1672 Clarifying comment. New function CMS_add1_crl(). Typo. Update from stable branch. Oops! Update from stable branch. Update from stable branch. Fix auto-discovery of ENGINEs. See the CHANGES entry for details (and/or ticket #1668). PR: 1668 Submitted by: Ian Lister Reviewed by: Geoff Thorpe Don't send zero length session ID if stateless session resupmtion is successful. Check be seeing if there is a cache hit. Disable debugging fprintf. Correct argument order for CMS_decrypt() in docs. Make CMS_uncompress() argument order consistent with other functions. Typo. Add docs for CMS_final() and BIO_new_CMS(). Spellcheck CMS docs. Correct references to smime in cms app. Update docs. Add CMS_uncompress manual page. Clarifying comment. "Do BN_nist_mod_384 by the book Implement CMS_NOCRL. Give consistent return value and add error code for duplicate certificates. Delete nonexistant function from pkcs7.h header file. WIN32 build fix from stable branch. Sync and update ordinals. Make mk1mf.pl recognize no-cms. Update CHANGES. Since OID NIDs with 0.9.8. Avoid warnings. Fix it properly this time.... Fix macro. Update dependencies. Update docs. Signed receipt generation code. Update dependencies. Make 3DES default cipher in cms utility. Fixes for S/MIME consistency checker and flexibility enhancements. Partial support for KEKRecipientInfo type. Fix some warnings. Initial support for enveloped data decrypt. Extent runex.pl to cover these examples. All RFC4134 examples can now be processed. Return error if no cipher set for encrypted data type. Update CHANGES. Delete temp files. Typos. Encrypted Data type processing. Add options to cms utility and run section 7 tests in RFC4134. New utility functions for encryptedData content type which will also be used by envelopedData. Use PRE and not POST when freeing up RecipientInfo. Only call free once in CHOICE type. .cvignore file for cms And so it begins... Initial support for CMS. Add zlib compression BIO. Add AES key wrap implementation. Generalize S/MIME MIME code to support CMS and/or PKCS7. Update year. Avoid warnings. Make x86_64-mont.pl work with debug Win64 build. Typo. Ad-hockery for Platform SDK ml64. ppc64-mont optimization. Clarify FAQ. Clarify BITLIST format and include an example. rc5/asm/rc5-586.pl was erroneously omitted from last perlasm unification. Unify ppc assembler make rules. Allow to specify filename on sha1-ia64.pl command line. Make all x86_64 modules independent on current working directory. Missing headers. Unify x86 perlasm make rules. engine/ccgost Win32 portability fixes. Make aes-x86_64 work with debug Win64 build. Make AES_T[ed] private to aes-586 module. Add extra SHA2 defines. x86gas.pl update. Add sha2 defines. Move CHANGES entry. Revert include file install line. Netware support. Submitted by: Guenter Knauf <eflash@gmx.net> ppc-xlate.pl update. x86 perlasm overhaul. Fix from stable branch. Avoid warning. Update debug-steve targets. "Submitted by: ""Victor B. Wagner"" <vitus@cryptocom.ru> Make {d2i Rebuild object cross reference table. Commit #16325 fixed one thing but broke DH with certain moduli. Fix from stable branch. GOST ENGINE information. Bunch of constifications. DTLS fixes from 0.9.8-stable. Update CHANGES. Keep ordinals consistent. New release. size_t-fy crypto/buffer. Make it possible to link VC static lib with either /MT or /MD application. PR: 1230 Fix from fips branch. Off by one fix from stable branch. Oops! This was erroneously left out commit #16632. Make ChangeCipherSpec compliant with DTLS RFC4347. Typo. Yet another ARM update. It appears to be more appropriate to make developers responsible for -march choice. Move -march=armv4t to ./config. Minor ARMv4 update. ARMv4 assembler pack. Make sha512-armv4.pl byte-order neutral. Fix dependencies. Make depend. The other half of make errors. make errors. "Addenum to ""Constify obj_dat.[ch].""" "Constify obj_dat.[ch] Update from stable branch. Minor fix in link_[oa].hpux. BSD run-time linkers apparently demand RPATH on .so objects. PR: 1381 Engage new x86 assembler modules. SHA512 for ARMv4. SHA256/512 for x86. "Typo? Why did this work Offer darwin64-x86_64-cc as option. Add darwin64-x86_64-cc target. Make naming more consistent. Make room for Camellia assembler. Add Google sponsorship note. Update from stable branch. Fix for asm/no-asm on WIN32. OPENSSL_NO_TLS1 WIN32 build support. Fix so normal build works again. Typo. Fix warnings. Typos in ./config. PR: 1563 Make preprocessor logic more fail-safe. Respect ISO aliasing rules. PR: 1296 ia64cpuid update. Configure update from 098. md32_common.h update. shlib_wrap.sh update. gas -g doesn't tolerate unpadded .bytes in code segment. Fix warning. Typo in x86_64-mont.pl. PR: 1549 Optimize OPENSSL_cleanse. bn_asm for s390x. SPARC Solaris and Linux assemblers treat .align directive differently. PR: 1547 Update .cvsignore WIN32 fixes. Finish gcc 4.2 changes. Avoid use of function pointer casts in pem library. Modify safestack to always use inline functions. Fix for GOST engine on platforms where sizeof(size_t) != sizeof(int). s390x gas can't handle .align 128. Update ordinals. Fix X509_REQ_print_ex() to process extension options. Revert broken change to ccgost. Initialize context properly for HMAC pkey method. SHA256 for ARMv4. Typo in aes-ppc.pl. sparccpuid.s update. Add .cvsignore to seed dir. New function EVP_PKEY_asn1_copy(). Use default MD if type param is NULL. Change C++ style comments. "Profiling revealed that OPENSSL_cleanse consumes *more* CPU time than sha1_block_data_order when hashing short messages. Move OPENSSL_cleanse to ""cpuid"" assembler module and gain 2x." Make sha*-ia64 modules alignment neutral. Document streaming options. Detect UltraSPARC T1 in ./config. SHA for sparcv9. Fix bug introduced in cn#16195. Fix s390x bugs and correct performance coefficients. Typo in commit #16187. Typo in s390x_asm. Bug in apps/dgst.c. Engage s390x assembler modules. s390x assembler pack. Add SEED encryption algorithm. PR: 1503 Submitted by: KISA Reviewed by: Bodo Moeller Add a bunch of S/MIME sample programs and data. Flush b64 BIO. PKCS7_sign_add_signer() docs. More docs for streaming functions. Typo. d2i_PKCS7_bio_stream() docs. Update docs. Update docs. Copy update callback across when copying EVP_MD_CTX. Remove unnecessary reference to EVP_MD_CTX in HMAC pkey method. New -mac and -macopt options to dgst utility. Reimplement -hmac option in terms of new API. Update CHANGES. Constification. "Don't ignore config_name parameter passed to OPENSSL_config(). Use ""openssl_conf"" in config file if config_name variable is missing." Fix from stable branch. New -sigopt option for dgst utility. Yet another resource leak. Coverity ID 123. Don't copy from a nonexistent next. Coverity ID 47. Errors should actually be errors. Don't dereference NULL argument. Coverity ID 52. Don't use a negative number as a length. Coverity ID 57. Avoid overrun. Coverity ID 60. Free memory. Coverity ID 62. Handle bad content type. Coverity ID 99. Fix buffer overrun. Coverity ID 106. Die if serial number is invalid. Make sure we detect corruption. Fix warning. Stage 1 GOST ciphersuite support. Submitted by: ran@cryptocom.ru Reviewed by: steve@openssl.org Fixes for aix-shared rules. nasm fixes. "Win32 fixes. Add GOST algorithm to mkdef Fix from stable branch. "Include ""!eNULL"" in SSL_DEFAULT_CIPHER_LIST to make sure that a ciphersuite string such as ""DEFAULT:RSA"" cannot enable authentication-only ciphersuites. Also Minor touch to aes-armv4.pl. AES for ARMv4. Update from 0.9.7-stable. SHA1 for ARMv4 and Thumb. Constify version strings and some structures. Montgomery multiplication for MIPS III/IV. Not engaged. Move eng_padlock.c to ./engines. Submitted by: Michal Ludvig <michal@logix.cz> "Fix for ""strange errors"" exposed by ccgost engine. The fix is two extra insructions in sqradd loop at line #503." Oops! New prototype code creeped through... "Make sha.h more ""portable.""" Engage alpha-mont module. Actually verified on Tru64 only. alpha-mont.pl: gcc portability fix and make-rule. Update from 0.9.7-stable branch. "Camellia portability fixes. Submitted by: Masashi Fujita Update dependencies. Minor optimizations based on intruction level profiler feedback. Modulo-schedule loops in sparcv9a-mont.pl. Overall improvement factor over 0.9.8 is up to 3x on USI&II cores and up to 80% - on USIII&IV. "This is ""informational"" commit. Its mere purpose is to expose ""modulo factor"" in inner loops." "Non-SSE2 path to bn_mul_mont. But it's disabled Add RFC 3779 support. Avoid shadow warning. Typo. Typo. Add v3 ref to see also sections. OPENSSL_ia32cap.pod update. Allow for mingw cross-compile configuration. "Make c_rehash more platform neutral and make it work in mixed environment Align data payload for better performance. Fix bug in big-endian path and optimize it for size. Typo in perlasm/x86asm.pl. bn/asm/ppc.pl to use ppc-xlate.pl. Support for .asciz directive in perlasm modules. Re-implement md32_common.h [make it simpler!] and eliminate code rendered redundant as result. Typo. "Place standard CRL behaviour in default X509_CRL_METHOD new functions to create Complete the change for VMS. Updated file. Make int_rsa_sign function match prototype. PR: 1383 Do CRL method init after other operations. "Tidy up CRL handling by checking for critical extensions when it is loaded. Add new function X509_CRL_get0_by_serial() to lookup a revoked entry to avoid the need to access the structure directly. Add new X509_CRL_METHOD to allow common CRL operations (verify Remove x86ms.pl and reimplement x86*.pl. Support for AKID in CRLs and partial support for IDP. Overhaul of CRL handling to support this. Update docs. Add verify callback functions to lookup a STACK of matching certs or CRLs based on subject name. New thread safe functions to retrieve matching STACK from X509_STORE. Cache some IDP components. Fix bug in aes-586.pl. Fix bug in x86unix.pl introduced in latest update. PR: 1380 Make things static that should be. Declare stuff in headers that should be. Fix warnings. Correct punctuation. PR: 1367 Switch to compact S-box when generating AES key schedule. perlasm/x86unix.pl update. Avoid warning. Avoid warnings. Use correct pointer types for various functions. Update .cvsignore again. New non-blocking OCSP functionality. "Add option for ""compact"" rounds to aes_x86core.c. ""Compact"" rounds are those referencing compact Typo. "New docs for EVP_Digest{Sign Add docs for pkeyparam. Update some existing docs. Update some usage messages. Allow digests to supply S/MIME micalg values from a ctrl. Send ctrls to EVP_PKEY_METHOD during signing of PKCS7 structure so customisation is possible. New functions to add and free up application defined signature OIDs. EVP_PKEY_get_default_digest() manual page. EVP_PKEY_CTX_ctrl() docs. Update docs. New functions to enumerate digests and ciphers. Keygen docs. EVP_PKEY_derive() docs. Add some examples. EVP_PKEY_verify() docs. New docs. Update docs. Add some EVP_PKEY_METHOD docs. Update docs with algorithm options. Typo. Initial docs for pkeyutl. Docs for new utilities. Typos(?) in HEAD/crypto/evp/p_lib.c. Make return value from EVP_PKEY_cmp() and EVP_PKEY_cmp_parameters() consistent. Fix obvious typo. Clarify comment and add #ifdef. Sync aes.h with http://cvs.openssl.org/chngview?cn=15336. Reimplement AES_ofb128_encrypt. Minor ppc-xlate.pl update. Add sha512-ppc.pl module. Minor sha1-ppc.pl update. A few more ENGINE strings that need shortening. Initial public key ASN1 method engine support. Not integrated yet. Extend default method string to include public key methods. Add missing prototypes. Fix engine method lookup. Typo. Synchronise with the Unixly build. Add missing prototype. Extend engine utility to print public key algorithms. Add engine table for EVP_PKEY_METHOD. Doesn't do much yet. New pkey functions for keygen callbacks and retrieving operation type. Fix warnings. New function to dup EVP_PKEY_CTX. This will be needed to make new signing functions and EVP_MD_CTX_copy work properly. New functions for enchanced digest sign/verify. Fix warnings. Fix smime -pk7out. Code tidy. Typo. More S/MIME tidy. Place some common attribute operations in utility functions. Reformat smime.c utility. HMAC OIDs from RFC4231. Gather keygen options in req and only use them after all other options have been processed. This allows any ENGINE changing operations to be processed first (for example a config file). Typo. Stop warnings about deprecated -mcpu option. "Someone made a mistake Typo. New functions to get key types without dereferncing EVP_PKEY. More error checking for RSA pmeth. Add support for default public key digest type ctrl. Fix from stable branch. bug fix. PR: 1326 Submitted by: John Skodon Update from stable branch. Update FAQ. Typo in linux-ppc line. Update from stable branch. Bug fix. PR: 1307 Submitted by: Oliver Tappe <zooey@hirschkaefer.de> Fix from stable branch. Replace RSA specific PKCS7_RECIP_INFO set up with an public key algorithm ctrl. Code tidy. New function to extract AlgorithmIdentifier for PKCS7_RECIP_INFO. Don't free up parameter. The public key ASN1 method can do that if it needs to. "Remove link between digests and signature algorithms. Use cross reference table in ASN1_item_sign() "Synchronise with Unixly build. (Geez SHA-1 for x86_64. Fix from 0.9.7-stable branch. Add functions to allow setting and adding external EVP_PKEY_METHOD. Update dependencies. Add key derivation support. Typo. Fix leak. Compare parameters when comparing public keys. Write parameters if -genparam option include. Change operation values so they can be used as a mask. Fix rsa_pkey_method. Implementation of pkey_rsa_verify. Some constification. Store digests as EVP_MD instead of a NID. Add digest size sanity checks. Constification. Add checking to padding ctrl. Fix typo. Add EVP_PKEY_CTX control function for later use by command line utilities. Update dependencies. Initial functions for RSA EVP_PKEY_METHOD. Update dependencies. New utility 'pkeyutl' a general purpose version of 'rsautl'. Initial functions for main EVP_PKEY_METHOD operations. No method implementations yet. New function to add dynamic alias. Typos in a few OID names. Typo. Fix dynamic public key method lookup. New function to retrieve ASN1 info on public key algorithms. New command line option to print out info. Stop warning. Update and add last (?) set of GOST OIDs. Initialize pval. Fix gost OIDs. Fix typo. Add some GOST OIDs. Typo. New utility pkeyparam. Enhance and bugfix algorithm specific parameter functions to support it. New general public key utility 'pkey'. "Small bug.  apps/CA.sh and apps/CA.com look at SSLEAY_CONFIG Initial support for generalized public key parameters. Typo. Add information and pem strings. Update dependencies. Make EVP_PKEY_ASN1_METHOD opaque. Add application level functions to initialize it. Initial support for application added public key ASN1. Keep up with the changes in the Unix build system. "DH EVP_PKEY_ASN1_METHOD Stop compiler warnings. Break out deltree in its' own command procedure. Fix warnings. Add FAQ about AKID. Document the building macros. Update from 0.9.7-stable. Typo. Update from stable branch. signed vs. unsigned clash. "Avoid contradictive error code assignments. ""make errors""." "Detect more errors. Change assignment strategy: rathern than using max+r for new codes include max. codes in debug output Fix signed/unsigned char clashes. Typo in win32_globallookup. Make b_sock.c IPv6 savvy. util/mkerr.pl update to address various mkerr.pl problems [such as failure to handle multi-line comments and endless loop while parsing overloaded gnu-ish __attribute__]. Oops! Remove junk... Add DSO_global_lookup_func implementation. See commentary in dso_lib.c for further details. Typo in sparcv8cap.c. Keep disclaiming 16-bit platform support. For now remove WIN16 references from .h files... Unify sparcv9 assembler naming and build rules among 32- and 64-bit builds. Engage run-time switch between bn_mul_mont_fpu and bn_mul_mont_int. Make framework for Whirlpool assembler flexible. Make room for Whirlpool assembler in Configure. "Allow for warning-free passing of -Wl options on config command line. One possible usage is to pass -Wl sparccpuid module update. Add IALU-only bn_mul_mont for SPARCv9. See commentary section for details. Update from 0.9.8-stable. Update from stable branch. Make mk1mf.pl and friends recognize Whirlpool. Make ZLIB without ZLIB_SHARED compiled again. x86cpuid.pl update. New functions to support opaque EVP_CIPHER_CTX handling. "Whirlpool was added to EVP Whirlpool for x86_64. Mention Whirlpool in dgst -help. Remove development leftover from whrlpool/asm/wp-mmx.pl. "Whirlpool hash implementation. The fact that subdirectory and .h file are called whrlpool is not a typo Synchronise with the Unix build. Tidying up WinCE support. Update docs. Update from stable branch. "First draft for WCE PortSDK support. Once again! It's *draft* which requires more work Update from stable branch. The typos never stop. Fix one in apps/apps.c. x86_64-xlate.pl commentary section update. Fix newly introduced typos and warnings in ./apps. Eliminate crypto/tmdiff.[ch]. Eliminate remaining calls to stat in apps/apps.c and unify WIN32_rename for all Windows targets. Make cygwin work in directories mounted with 'text' attribute. Add -install_name in link_a.darwin rule. PR: 1218 Integrate sparcv9a-mont.pl into UltraSPARC builds. bn_asm.c update. Change bn_mul_mont declaration and BN_MONT_CTX. Update CHANGES. Add rudimentary aix64-gcc target. Submitted by: Stefan Neis "util/pl/OS2-EMX.pl sync. Submitted by: Stefan Neis Fix bug in SMALL_FOOTPRINT path and clarify comment. "Throw in bn/asm/x86-mont.pl Montgomery multiplication ""teaser""." New option SSL_OP_NO_COMP to disable compression. New ctrls to set maximum send fragment size. Allocate I/O buffers accordingly. x86_64-mont.pl readability improvement. Reserve for SMALL_FOOTPRINT bn_asm.c. Currently OPENSSL_SMALL_FOOTPRINT is defined on Windows CE targets. Make OPENSSL_NO_COMP work under Win32. Fix typo. Update from stable branch. "Fix typo: ""powepc"" vs ""powerpc."" G-r-r-r-r. PR: 1198" Mention BN_sqr failure on x86 platforms in ./RPOBLEMS. PR: 1176 [and others] Missing space in VC-32.pl. Oops-type typo. PR: 1195 Fix for Win32. Update to ASN1 printing code. Two new verify flags functions. Synchronise with Unixly build. Last synchronisationn with Unixly build.  I hope... Fix warnings. Synchronise with Unix changes. Fix warning. Use correct date and filename. Command line support for RSAPublicKey format. Update from stable branch. Remove ASN1_METHOD code replace with new ASN1 alternative. Eliminate reference to removed platform line. "Suppress ""deprecated"" warnings introduced in VC8." Final(?) WinCE update. "3-4 times better RSA/DSA performance on WIN64A target. Well WCE-specific update for VC-32.pl. WCE-specific fix for cryptlib.c. Keep disclaiming 16-bit support. Optimize for space on embedded WCE. Type in OSF1 platform name. Silence two more generated files. add a .cvsignore Allow setting of all fields in CRLDP. Few cosmetic changes to output. Commentary section update in sha512-x86_64.pl. Pull up mkdef.pl from 0.9.8. Print out previously unsupported fields in CRLDP by i2r instead of i2v. Cosmetic changes to IDP printout. Typo in version number. MD5 IA-64 assembler implementation. Original copy for reference purposes. Submitted by: David Mosberger Obtained from: http://www.hpl.hp.com/research/linux/crypto/ "This update implements following improvements. 1. Original submission required minor modification to RC4_set_key Fix unwind directives in IA-64 assembler modules. This helps symbolic debugging and doesn't affect functionality. Submitted by: David Mosberger Obtained from: http://www.hpl.hp.com/research/linux/crypto/ Changes from the 0.9.8 branch. Pull up Win64 support from 0.9.8. "More elegant solution to ""sparse decimal printout on PPC"" problem." Fix warnings. "There are a few showstoppers.  Unfortunately Minor (final?) Makefiles polish. Add Argen root CAs. Missed -c in IRIX rules. Typo in bn-mips3 rule. "Rename mips3.o to bn-mips3.o [it's better in long run] and adjust the rule to accomodate gcc4 TABLE was out-of-sync. Typo. Fix extension ordering. "Check for 'usage' and 'Usage'. Submitted by Tim Rice <tim@multitalents.net>.  His comment is: I noticed ""make report"" didn't show the cc version on most of my System V platforms. This patch corrects this." Show what the offending target was. PR: 1108 """Liberate"" dtls from BN dependency. Fix bug in replay/update." Pass INSTALL_PREFIX in BUILDENV. PR: 1100 Update from 0.9.8-stable. Document the change and update the version number (d'oh!). Remove the incorrect installation of '%{openssldir}/lib'. PR: 1074 ./PROBLEMS to mention workarounds for ULTRIX build problems. PR: 1092 Typo. Update CHANGES. Fix inconsistensy between 8 and HEAD. Mention more GCC bugs in ./PROBLEMS. Missing sparcv8.o rule. PR: 1082 Fix typo in ./config. Platform update from 8-stable. Platform update from 8-stable. Merge from 0.9.8-stable. Merge in the new news from 0.9.8-stable. DJGPP changes.  Contributed by Doug Kaufman <dkaufman@rahul.net> "pqueue and dtls uses 64-bit values.  Unfortunately Change the source and output paths for 'chil' and '4758cca' engines so that dynamic loading is consistent with respect to engine ids. Update from 0.9.7-stable. Also repatch and rebuild error codes. Use BN_with_flags() in a cleaner way. Be more consistent with OPENSSL_NO_SHA256. Still SEGV trouble in .init segment under Solaris x86... "When _XOPEN_SOURCE is defined Move _WIN32_WINNT definition from command line to e_os.h. The change is inspired by VC6 failure report. In addition abstain from taking screen snapshots when running in NT service context. Don't emit SSE2 instructions unless were asked to. PR: 1073 Version changes where needed. Keep disclaming 16-bit support. Disclaim 16-bit support. Move cryptlib.h prior bio.h. Actually it makes sense to include cryptlib.h first everywhere in crypto and skip stdio.h and string.h [because it includes them]. Make update. Make -CSP option work again in pkcs12 utility by checking for attribute in EVP_PKEY structure. Some C compilers produce warnings or compilation errors if an attempt is made to directly cast a function of one type to what it considers and incompatible type. In particular gcc 3.4.2. Add new openssl_fcast macro to place functions into a form where the compiler will allow them to be cast. The current version achives this by casting to: void function(void). Avoid warnings. Fix from stable branch. Typo. There must be an explicit way to build the .o! use 'p' as conversion specifier for printf to avoid truncation of pointers on 64 bit platforms. Patch supplied by Daniel Gryniewicz via Mike Frysinger <vapier@gentoo.org>. PR: 1064 "I was incorrect about VMS/Alpha.  Defining BN_LLONG with SIXTY_FOUR_BIT could cause havoc Fix constants. PR: 1059 "Since BN_LLONG will only be defined for Alpha/VMS and not VAX/VMS "Actually Commentary update. Add prototype. Support for smime-type MIME parameter. Cygwin/mingw sync with stable. Allow for ./config no-sha0 [from stable]. Typo. "Remove a bunch of false positives Synchronise with Unix build system. "Lots of Win32 fixes for DTLS. 1. ""unsigned long long"" isn't portable changed: to BN_ULLONG. 2. The LL prefix isn't allowed in VC++ but it isn't needed where it is used. 2. Avoid lots of compiler warnings about signed/unsigned mismatches. 3. Include new library directory pqueue in mk1mf build system. 4. Update symbols." Stop unused variable warning. Port from stable branch. False positive removed. make depend. "Sort out changes in FIPS and other changes "Flag changes in Configure and config Add prototypes. Avoid aliasing between stack frames and S-boxes. Compress prefetch code. "Provide a default OPENSSL_ia32cap_loc for non-Intel platforms where util/libeay.num is important when building shared libraries Don't use standard kerberos library locations in MK1MF builds. Fix typo in mk1mf.pl Handle similar mk1mf.pl options with a hash table. signed vs. unsigned. signed vs. unsigned. "New ""algorithm define"" OPENSSL_NO_GMP. Update mkdef.pl and Configure script to use it." Update year. Fix from stable branch. Synchronise with ec/Makefile. "Mitigate cache-timing attack in CBC mode. This is done by implementing compressed tables (2x compression factor) and by pre-fetching them into processor cache prior every CBC en-/decryption pass. One can argue why just CBC? Well Final touch to mingw shared. Final(?) touches to mingw shared support. Update FAQ. include limits.h for UINT_MAX etc. Add emacs cache files to .cvsignore. Move allow_proxy_certs declaration to start of function. "Added restrictions on the use of proxy certificates "Give everything prototypes (well Make tags target useful. Don't debug. Constification. There are cases when there are no files left to verify.  Make sure to handle that properly. """make depend"".  This takes into account the algorithms that are now disabled by default (MDC2 and RC5) "Change ./Configure so that certain algorithms can be disabled by default. This is now the case for RC5. As a side effect Remove unused assembler modules. Reliable BSD-x86-elf detection in ./config. Make util/shlib_wrap.sh [Open]BSD-friendly. linux-arm target update. PR: 991 PKCS7_verify() performance optimization. When the content is large and a memory BIO (for example from SMIME_read_PKCS7 and detached data) avoid lots of slow memory copies from the memory BIO by saving the content in a temporary read only memory BIO. INSTALL.DJGPP sync. PR: 989 """Monolithic"" x86 assembler replacement for aes_core.c. Up to +15% better performance on recent microarchitectures." "Fix an ""oops"" typo! Well "Correct a faulty address assignment DJGPP update. PR: 989 Submitted by: Doug Kaufman Fix Win32 test-suit. Remove naming conflict between variable and label. "AES-CFB[18] 2x optimization. Well Oops-kind typos in aes-ia64.S... Forgot to synchronise the VMS build scripts. Add functionality needed to process proxy certificates. Minor cygwin update. PR: 949 Don't use multiple storage types. Fix typos in the ecparam doc. Submitted by: Nils Larsch Fix s_client so it works without a certificate again. Solaris x86 perlasm update. Add -passin argument to dgst command. Fix rc4-ia64.S to pass more exhaustive regression tests. Add couple of OIDs. Resync NIDs for consistency with 0.9.7. "I've introduced a bug to i386 RC4 assembler "Final touches to rc4/asm/rc4-596.pl Document the change. Summarize recent RC4 tune-ups. Typo. Allow alternative manual sections to be embedded in .pod file comments. Update docs. Typo. Fix memory leak. Update X509v3 doc. Update X509v3 docs. "Some find it confusing that environment variables are set when shared libraries aren't built or used.  I can see the point "Because libraries on Windows lack useful version information Oops! SHA1 asm Pentium tune-up. Performance loss is not as bad anymore. sha256_block advances the input pointer double as fast sometimes. Fix the bug and test that it's actually gone. PR: 950 Remove distracting comments and code. Thanks to Nils for picking up on the outstanding ticket. PR: 926 Synchronise with Unix build. Don't use 'explicit' for variable name. New X509_VERIFY_PARAM structure and associated functionality. This tidies up verify parameters and adds support for integrated policy checking. Add support for policy related command line options. Currently only in smime application. WARNING: experimental code subject to change. Stop compiler warnings. Make aes_ctr.c 64-bit savvy. Make ASN1_INTEGER_cmp() work as expected with negative integers. Call setup_engine after autoconfig. Make a note of the new engine. Avoid a.out name table pollition. "VIA C3 processor extends IA-32 instruction set with instuctions performing AES encryption in hardware OpenBSD fix-up for new a.out targets. OpenBSD .s.o rule is busted... "DLLEntryPoint is a collective name Make bio_ok.c Microsoft compiler savvy. Make bio_ok.c 64-bit savvy. 'apps/openssl dgst -help' update and minor apps/speed.c update. Make SHA-256/-512 optional. Note that no-sha switches off *all* SHA. "Minor HP-UX make update. IA-64-based HP-UX favor .so extension for shared libraries. Old .sl extension works just fine TABLE update. Add licensing terms. "IA-64 is intolerant to misaligned access. It was a problem on Win64 as we were mislead by _MSC_VER macro Quick fix. Submitted by: Nils Larsch "o_str.c: Windows doesn't have <strings.h> PKCS#8 fixes from stable branch. Don't try to parse non string types. "New scalable bn_mul_add_words loop Minor change to group like functions together. "BN_div_word() was breaking when called from BN_bn2dec() (actually "Minimal work-around for ./engine shared builds. ""Minimal"" means that I think that proper Makefile clean-up is required." Mention new SHA algorithms in CHANGES. This completes the integration. EVP bindings to new SHA algorithms. Typo in commentary section. Typo in linux-ppc64 target. gcc -Wcast-qual clean-up. Unified hpux-shared rule. Verified with both 32- and 64-bit builds and both vendor and GNU compilers. ./engine shared build are still busted. I mean always were... Attempt to unify hpux-shared rules. More adjustments might be required after more tests... Move some COMP functions to be inside the #ifndef OPENSSL_NO_COMP wrapping preprocessor directive.  This also removes a duplicate declaration. Delete obsolete and unimplemented function. Synchronise o_str.c between 0.9.8-dev and 0.9.7-stable. Let's make life easier and have the VMS version of the configuration be generated from the Unixly configuration file. CHANGES to mention improved PowerPC platform support. Oops! Typo in ./config... Reformat/tidy some of the ASN1 code. Fix leak. PR:870 New option to 'x509' -next_serial. This outputs the certificate serial number plus 1 to the output file. Its purpose is to allow serial number files to be initialized when random serial numbers are used. """make update"" noticed a new function." "When generating dependencies in the makefiles Add some root CAs. Don't use C++ reserved word. Oops forgot CHANGES entry. Add symbol hacks for some long names. make update Remove obsolete files. Allow CRLs to be passed into X509_STORE_CTX. This is useful when the verified structure can contain its own CRLs (such as PKCS#7 signedData). Tidy up some of the verify code. RAND_add() wants a double as it's last argument. "Only build the PKCS#7 test applications if ""pkcs7"" is present in SDIRS." Remove a warning for conversion double->long.  This has impacts on Windows. PR: 849 "Note my bignum hijinx in case app maintainers are using CHANGES for their porting efforts. Also Avoid warnings. "Constify d2i "Make sure we use unsigned constants Support for inhibitAnyPolicy extension. Call autoconfig code in pkcs7 utility. Typos. Reported by: Jose Castejon-Amenedo <Jose.Castejon-Amenedo@hp.com> Config docs. Documentation of the KISS autoconfig functions. More autoconfig docs. Make sure the given EVP_PKEY is updated in the PEM_STRING_PKCS8INF case also. PR: 833 Typo in PA-RISC 2 rules in crypto/bn/Makefile.ssl Add the missing parts for DES CFB1 and CFB8. Add the corresponding AES parts while I'm at it. make update unintptr_t and <inttypes.h> are not strictly portable with respect to ANSI C 89. Undo change to maintain compatibility. "Avoid including cryptlib.h "Check if a random ""file"" is really a device file "It was pointed out to me that if the requested size is 0 Make sure the documentation matches reality. PR: 755 Notified by: Jakub Bogusz <qboosh@pld-linux.org> "Damnit "1024 is the export key bits limit according to current regulations "hpux64-parisc2-gcc target added. Once it is verified "Geoff suggested a more succinct description for ""top""." Put more debug screening in BN_div() and correct a comment. "This is a revert of my previous commit to ""improve"" the declaration of constant BIGNUMs. It turns out that this trips up different but equally useful compiler warnings to -Wcast-qual Tighten up my compiler settings. remove accidentally committed debugging cruft. Update any code that was using deprecated functions so that everything builds and links with OPENSSL_NO_DEPRECATED defined. Ignore derived file. Simplify cipher and digest lookup in PKCS#7 code. New function to initialize a PKCS7 structure of type other. "Retrieve correct content to sign when the type is ""other""." "Setting the ex_data index is unsafe in a threaded environment Check for errors from SSL_COMP_add_compression_method(). Notified by Andrew Marlow <AMARLOW1@bloomberg.net> Synchronise util/libeay.num with the 0.9.7-stable one. make update "Include the instance in the Kerberos ticket information. In s_server Typos. "Generalise the definition of strcasecmp() and strncasecmp() for platforms that don't (necessarely) have it.  In the case of VMS Inclusion of openssl/engine.h should always be wrapped with a check that OPENSSL_NO_ENGINE is not defined. Replace CCITT with ITU-T.  Keep CCITT around as an alias. make update PR: 80 "Implement missing functions. Have the f parameter to _ctrl functions have the prototype (*)(void) rather than (*)() Document the last change. PR: 587 Typo. Implement CRL numbers. Contributed in whole by Laurent Genier <Laurent.Genier@intrinsec.com> PR: 644 Unsigned vs. signed fixed. "EXIT() should mainly be exit(n) Add the application data type to the README. Missing string and potential memory leaks. Notified by Goetz Babin-Ebell <goetz@shomitefo.de> Typo. PR: 584 Handle des_modes.pod properly. PR: 634 Make sure that size_t matches size_t. Make sure debug-solaris-sparcv9-gcc is consistent with solaris-sparcv9-gcc. Stop checking for CRLF when start of buffer is reached. Add rest of long line fix which got missed before Make sure to compare unsigned against unsigned. Fix sign bugs. PR: 621 Misspelled functions. Some misspelled function names. Make the function STORE_new_engine() public. Fix docs. Add correct DN entry for serialNumber. Add the possibility to hand execution parameters (for example authentication material) to the STORE functions. Suggested by Gtz Babin-Ebell <babin-ebell@trustcenter.de>. /usr/lib/pkgconfig/openssl.pc was never installed in the RPM. Notified by Bennett Todd <bet@rahul.net>. Add the possibility to store arbitrary data in a STORE. Suggested by Gtz Babin-Ebell <babin-ebell@trustcenter.de>. "Yeah Make DER option work again. Fix typo. "STORE was created 2003 Provide some extra comments about the STORE_Memory STORE method. Add STORE support in ENGINE. Define a STORE lock (the STORE type will be committed later). Define the OPENSSL_ITEM structure. Explicitely tell the compiler we're mips3 for the target irix-mips3-cc. Typo. "Correct a few typos. It seems that svr3 and svr5 differ I forgot to continuation mark. "We seem to carry some rests of the 0.9.6 [engine] ENGINE framework "Correct a typo. Have EVP_PKEY_cmp() call EVP_PKEY_cmp_parameters() One more debug line to conditionalise. "Implement self-signing in 'openssl ca'.  This makes it easier to have the CA certificate part of the CA database Add functionality to help making self-signed certificate. Remove unused variable. Reset the version number of the issuer certificate?  I believe this hasn't been tested in a long while... Make it possible to have multiple active certificates with the same subject. OpenUNIX 8 has some problems using -G with gcc.  Maybe using gnu-shared works better (will be tested tonight). Let's limit the extent of the definition of _XOPEN_SOURCE. Missed a few dollars. PR: 528 Name Constraints OID. Support for policy constraints. "Sometimes Make sure we get the definition of OPENSSL_NO_RSA. Make sure we get the definition of OPENSSL_NO_HMAC and OPENSSL_NO_SHA. Make sure we get the definition of OPENSSL_NO_SHA. Make sure we get the definition of OPENSSL_NO_RIPEMD. Make sure we get the definition of OPENSSL_NO_MDC2. Make sure we get the definition of OPENSSL_NO_MD5. Make sure we get the definition of OPENSSL_NO_MD4. Make sure we get the definition of OPENSSL_NO_MD2. Make sure we get the definition of OPENSSL_NO_DES. Make sure we get the definition of OPENSSL_NO_RC5. Make sure we get the definition of OPENSSL_NO_RC4. Make sure we get the definition of OPENSSL_NO_RC2. Make sure we get the definition of OPENSSL_NO_IDEA. Make sure we get the definition of OPENSSL_NO_CAST. Make sure we get the definition of OPENSSL_NO_BF. Make sure we get the definition of OPENSSL_NO_AES. Make sure we get the definition of a number of OPENSSL_NO_* macros. Make sure we get the definition of OPENSSL_NO_BIO. Include e_os.h correctly. Make sure we get the definition of OPENSSL_NO_MD2. Make sure we get the definition of OPENSSL_NO_FP_API. Make sure we get the definition of OPENSSL_NO_IDEA and IDEA_INT. Make sure we get the definition of OPENSSL_NO_HMAC. Make sure we get the definition of OPENSSL_NO_ECDSA. Make sure we get the definition of OPENSSL_NO_ECDH. Make sure we get the definition of OPENSSL_NO_EC. Make sure we get the definition of OPENSSL_NO_DSA and OPENSSL_NO_SHA. Make sure we get the definition of OPENSSL_NO_DH. "Make sure we get the definition of OPENSSL_EXTERN Make sure we get the definition of OPENSSL_NO_CAST. Make sure we get the definition of OPENSSL_NO_ERR. Make sure we get the definition of OPENSSL_NO_SOCK. Make sure we get the definition of OPENSSL_NO_FP_API. Make sure we get the definition of OPENSSL_NO_BF. Make sure we get the definition of OPENSSL_NO_BIO and OPENSSL_NO_RSA. Make sure we get the definition of OPENSSL_NO_AES. "Because it may be needed in public header files New ASN1 macros to just implement and declare the new and free functions and changes to mkdef.pl so it recognises them. Use these in policyMappings extension. Don't give an error if response reason absent in OCSP HTTP. "Encryption BIOs misbehave when used with non blocking I/O. Two fixes: 1. If BIO_write() fails inside enc_write() it should return the total number of bytes successfully written. 2. If BIO_write() fails during BIO_flush() it should return immediately with the error code: previously it would fall through to the final encrypt Typo. Support for dirName from config files in GeneralName extensions. Fix indefinite length encoding so EOC correctly updates the buffer pointer. Rename PKCS7_PARTSIGN to PKCS7_STREAM. Guess what that's for :-) clean up MinGW build. MinGW make now supports the Windows path name conventions. Re enable the read side non blocking test BIO code. For some reason it was disabled... Security fix: Vaudenay timing attack on CBC. An advisory will be posted to the web.  Expect a release within the hour. Update debub-steve* entries. Typo. Update docs. Make sure memcpy() is properly declared by including string.h. Fix warning. Add the possibility to build without the ENGINE framework. PR: 287 The patch speaks for itself. Oops! Missed closing quote... Didn't have time to verify before a snapshot was cut... SCO target missed .so suffix. Caldera/SCO targets erroneously limit themselves to 386. See RT#464. Ingore the correct flag file. """!Cname surname"" has now become redundant ..." Just an extra comment. Add better support for FreeBSD on non-x86 machines. Add specific support for FreeBSD on sparc64. PR: 427 "Finalizing asm support for UnixWare "This is the first step in allowing RSA_METHODs to implement their own key generation. This prototype matches the new API function RSA_generate_key_ex() Fix leak. Fix a typo. Oops! I've toasted Cygwin! Fixed now. Redundant now as it's moved to ./Makefile.org. "Unified targets for ELF assembler modules. Tested on Linux "pa-risc2.s was not PIC Complete integration of SPARC assembler DES implementation. Tested on Solaris only. I'll keep my eyes open for Linux and OpenBSD targets. "I implemented this when troubleshooting performance problem on SPARC Solaris. As there is an apparent interest for optimization for footprint Merge in changes from 0.9.7-stable. Merge in changes from 0.9.7-stable. "OS/2 does binary by default Merge from 0.9.7-stable. "UltraSPARC performance ""tune-up.""" FAQ addenum as discussed in RT#417. Kenneth R. Robinette just told me the latest snapshot works well with MIT Kerberos. "Cygwin needs the library locatin for .DLLs to be set in PATH.  Unfortunately "Fix for ""shift count too large"" when compiling for hpux-parisc2 and irix-mips. The bug was introduced with accelerated support for x86_64. My fault! Fixed now." More accurate comments. A little debugging. Be consistent with capitalisation of object names. Be consistent with capitalisation of object names. Small tweaks for code consistency. Better wording? Bring des_locl.h at the same level as in the 0.9.7 branch. Don't define macros in terms of asm() when __STRICT_ANSI is defined. Ooops! No ROTATE on some platforms after x86_64 performance patch... "Solaris shared build fix-ups. See RT#238 New DETECT_GNU_LD procedure. x86_64 performance patch. DES PIC-ification. Windows companion. IA-32 assembler modules (primarily DES) PIC-ification. Idea is to keep shared libraries shared. BIO_new_bio_pair() was unnecessarily described in it's own page as well as in BIO_s_bio.pod.  The most logical is to move everything needed from BIO_new_bio_pair.pod to BIO_s_bio.pod (including the nice example) and toss BIO_new_bio_pair.pod.  I hope I got all the info over properly. PR: 370 Make 'tunala' link with zlib if possible (so it works if openssl was configured with zlib support). "sk_*_push() returns the number of items on the stack This stops a compiler warning from -Wmissing-prototypes. (Noticed by Nils Larsch) "Hmm Forgot one. Workaround for GCC-ia64 compiler bug. Submitted by: <appro> Reviewed by: PR: Declare another general file. A gcc 3.0 bug is triggered by our code.  Add a section about it in PROBLEMS. PR: 375 "EXIT() may mean return().  That's confusing Make some names consistent. Make sure EXIT() can always be used as one statement. Unused variable removed. Extra ; removed. "The logic in the main signing and verifying functions to check lengths was incorrect.  Fortunately "Heimdal isn't really supported right now.  Say so "Heimdal isn't really supported right now.  Say so "Typo.  OPENSSL_NO_ECDH Fix an unsigned/signed mismatch. Document the addition of certificate pairs. Make it possible to build for more than one CPU. Clarify what the CE tests do. "Ignore openssl.pc.  This way Fix buggy #! magic and update ssleay->openssl Submitted by: Reviewed by: PR: 305 "The pointer to the cipher object is not yet set Close the implicitely opened registry key. PR: 264 Handle last lines that aren't properly terminated. PR: 308 Make internal functions static. Depend on OPENSSL_NO_STATIC_ENGINE rather than OPENSSL_NO_DYNAMIC_ENGINE. Make sure to include openssl/opensslconf.h to make sure we get the definition of those macros. "Add the command procedure to build external engines on VMS. Currently "New files have appeared Plug potential memory leak. Identified by Goetz Babin-Ebell <babinebell@trustcenter.de> "synchronise util/libeay.num with the 0.9.7-stable variant (guys "External engines aren't in crypto/engine/ any more New docs. Make pod2man happier. "- Remo Inverardi noticed that ENGINEs don't have an ""up_ref"" function in the normal 'structural' case (ENGINE_init() satisfies this in the less normal 'functional' case). This change provides such a function. - Correct some ""read"" locks that should actually be ""write"" locks. - make update." Typos. PR: 189 "Targeting the solaris platform for specific tests.  Something is going wrong Add more commentary.  Check that *num is smaller than the block size. "Step 14 of move of engines:  Final step make update. "And if the path has a space Step 13 of move of engines:  Remove old files. Step 8 of move of engines: Remove the last little quirks. DECIMAL_SIZE is copied from crypto/cryptlib.h. Typo. Step 5 of move of engines: Add a makefile (and a .cvsignore). Step 4 of move of engines: Split e.ec into individual files for each engine. "Make sure it's properly detected when there's no version information at all "BN_bn2hex() returns ""0"" instead of ""00"" for zero.  This disrputs the requirement that the serial number always be an even amount of characters. PR: 248" "Add a suffix for Darwin's sake "Add a few more target platforms More docs. Typo. Update docs. PKCS12_parse manual page. More docs. "Document ""0"" and ""1"" naming convention." Update docs. Update docs. It makes more sense to refer to specific function manuals than the concept manual when the specific function is refered to in the current manual text. This correction was originally introduced in OpenBSD's tracking of OpenSSL. It makes more sense to refer to specific function manuals than the concept manual when the specific function is refered to in the current manual text. This correction was originally introduced in OpenBSD's tracking of OpenSSL. "1. switch from ""-newkey ecdsa:..."" to ""-newkey ec:..."" 2. automatically create required sub-directories Submitted by: Vipul Gupta <Vipul.Gupta@sun.com>" Fix typos in PKCS#12 ASN1 code. Make PKCS7_set_detached work again. Fix ASN1_STRING_to_UTF8: remove non sensical !*out test. It seems like sun4u doesn't always have a sparcv9 inside.  Trust isalist. PR: 220 Remove clashes between symbols that have the same name except for casing. mem* functions are declared in string.h. Synchronise tests with Unix. A new header. Synchronise with Unix. (I expect the next run will generate lots of errors on VMS :-)). .cvsignore for crypto/ecdh Change BN_mod_sqrt() so that it verifies that the input value is really the square of the return value. Typo. Submitted by: Jeffrey Altman <jaltman@columbia.edu> Reviewed by: PR: 169 0.9.6e and 0.9.7-beta3 are out. "Only use DSA-functions if available. Submitted by: ""Hellan Some older code (never committed) wasn't converted to the new format. Corrected. Do not define crypt() on OpenBSD.  Notified by Bob Beck of OpenBSD. Use underscores instead of dashes in temporary file names. This is due to weird Borland compilers. Part of PR 123 "Implement handling of EC parameter seeds (new functions EC_GROUP_set_seed() Add support for DJGPP. PR: 75 The new ASN1 code automatically allocates structures for fields that are not OPTIONAL. However in the AUTHORITY_INFO_ACCESS case the 'location' field was set to NULL in the old code. So in 0.9.7+ we should free up the field before overwriting it in v2i_AUTHORITY_INFO_ACCESS. Handle read errors. Fix warnings. The correct PERL interpreter is passed via commandline. Document the AES changes. Make it possible to give vectors only for decryption or encryption. "For CFB and OFB modes "Reformat the CFLAG string so it can be made part of a C string. Incidently Support the newly release gcc 3.1 on 64-bit Solaris.  Not automatic. PR: 57 Check the return values where memory allocation failures may happen. PR: 49 Cygnus correction. (I thought I had tested that...) Fix incorrect =over 4 location. Submitted by: David Waitzman <djw@bbn.com> Reviewed by: Lutz Jaenicke PR: [openssl.org #38] values were reset for no reason. updated Mingw32 instructions. Small documentation fix for EVP_CipherFinal or EVP_CipherFinal_ex. Notified by Stella Power <snpower@maths.tcd.ie>. PR: 24 Generate an error if rewinding wasn't possible. Notified by Ken Hirsch <kenhirsch@myself.com>. PR: 23 Synchronise with 0.9.7-stable. Make sure ec and ecdsa is properly handled in Windows. Notified by Bernd Matthes <bernd.matthes@gemplus.com> Some more OID enhancements. Synchronize with 0.9.7-stable. Allow longer program names (VMS allows up to 39 characters). Submitted by Compaq. Allow longer program names (VMS allows up to 39 characters). Submitted by Compaq. Recognise DEC C++ as equivalent to DEC C for the definitions of OPENSSL_EXTERN and OPENSSL_GLOBAL. Submitted by Compaq. Make shared libraries resolve global symbols within themselves first. Currently only on GNUish linkers... Submitted by Steven Bade <sbade@austin.ibm.com> Make short names of objects RFC2256-compliant. Fix typo. Submitted by: Nils Larsch Fix bugs and typos. Add some WTLS curves. New function EC_GROUP_check() (this will probably be implemented differently soon). Submitted by: Nils Larsch Reviewed by: Bodo Moeller Rename 'cray-t90-cc' into 'cray-j90'. Add to 'config'. Fixes for 'no-hw' combined with 'no-SOME_CIPHER'. Fix dsaparam usage output. Submitted by: Nils Larsch asm/mips3.o problems "ENGINE module additions. Add ""init"" command to control ENGINE initialization. Call ENGINE_finish on initialized ENGINEs on exit. Reorder shutdown in apps.c: modules should be shut down first. Add test private key loader to openssl ENGINE: this just loads a private key in PEM format. Fix print format for dh length parameter." "Make sure the type accessed by the LONG and ZLONG ASN1 type is really a long "Typo.  In DCL Always init ctx_tmp in PKCS7_dataFinal since it is always cleaned up. Updates from stable branch. Fix for AIX. Submitted by Dawn Whiteside <dwhitesi@tiercel.uwaterloo.ca> "Stop assuming the IV is 8 bytes long Update the status on 64-bit thingy. "Make the ""ungunk"" logic a little more robust." Cygwin target name has been changed! Give the linux-sparv9 target shared capability. Submitted by Ian Marsh <mushypea@dominion.net.uk> "make update The Cygwin shared extension was shifted. Modify the main trunk version to 0.9.8-dev. 0.9.7 now lives in the branch OpenSSL_0_9_7-stable. "Make link-shard a little bit more efficient.  If there are no extensions to link together Make removal from session cache more robust. Do not store unneeded data. Remove an unused variable. "If the intended header file doesn't exist GCC uses __i386__. "I got a request to make the ""old des"" symbols more closely tied to OpenSSL.  Adding '_ossl' in the name seems to be a good way to do this." Add -keyform.  Document -engine. Document the current behaviour of the DES interface. Make no config file not an error. Move /dev/crypto config to ctrl. Constification. default_algorithms option in ENGINE config. Bring VMS up to date with development. Fix memory leak. Correct for the recent prototype changes. Add client_cert_cb prototype. Return value could be undefined. "Experimental configuration code. Incomplete Implement speed measurement for AES. Submitted by Stephen Sprunk <stephen@sprunk.org> as part of his AES integration patch. The block size may be something other than 8! Allow verification of other types than DATA. Submitted by Leonard Janke <leonard@votehere.net> "On Solaris64 Security fix. Cygwin patch. Submitted by Michael Kobar <mkobar@lymeware.com> Improve back compatibility. "UID was never a lable for uniqueIdentifier.  However EVP_BytesToKey documentation. Make EVP_SealInit() return the correct value. Add -pubkey option to req command. For future portability reasons MIT is moving all macros to function calls.  This patch allows compilation either way. Submitted by: Jeffrey Altman <jaltman@columbia.edu> "The ""openssl"" ENGINE is no longer used except as a testing/debugging device. This change enables it for building as a self-contained ""dynamic"" ENGINE Build dynamic rsaref engine on VMS.  Tested on VAX so far. Make sure evp_locl.h can be included (hw_openbsd_dev_crypto.c needs that). comments etc. Improve EC efficiency. "Add MD digests. And this finishes this engine Make it possible to give digest names as -evp arguments. Add DES functions. Restructure the code and comment it a bit. Prepare for the presence of digests. 'make update' + some touches. make update perl util/mkerr.pl -recurse -write -rebuild Exclude .out files Win32 fixes. Fix email address delete code. "Bugfixes for noemailDN option. Make it use the correct name (instead of NULL) if nomailDN is not set Stop compiler warnings. "Make sure openssl speed is compilable on systems where fork() doesn't exist.  For now Fix warning. Remove DES_random_seed() but retain des_random_seed() for now.  Change the docs to reflect this change and correct libeay.num. Have the removal warnings very high up in the source. Deprecate the macro MAC_OS_pre_X. Correction of the id-pda OID's. Submitted by Frederic.Giudicelli@INTRINsec.com Sanitize CHANGES entry. Fix memory leak. Typo. The EVP_*Init_ex() functions take one extra argument.  Let's default it to NULL. Update docs. Flush buffers to prevent mixed output (Adam Back <adam@cypherspace.org>). Update docs. make sure .rnd exists Add support for md4WithRSAEncryption. "It seems like gcc does canonicalisation of file names.  More specifically makedepend sometimes produces duplicates.  Remove them. evp_test.c and evptests.txt both need to be linked in the test/ directory however for different reasons. This separation should prevent the win32 build from interpreting evptests.txt as source code. "Change some EVP prototypes to use ""cipher"" rather than ""type"" as a variable name. The implementations already use this anyway." "Make sure the ""ENGINE_TABLE"" cleanup callbacks have correct prototypes." Missing pointer in the eng_table_register function. Reported by Martin Szotkowski. SSL_add_dir_cert_subjects_to_stack for Win32 finally implemented. Submitted by Massimo Santin <msantin@santineassociati.com>. Make EVP_DecryptUpdate work again. "The STACK macros take care of casting to and from the designated item type of the stack "Make an (overdue) note about the recent ENGINE restructuring. Apart from a few items however Change HZ in speed to rely on sysconf() if the clock tick is available that way.  Synchronise s_time with these changes. Fixes. Fix warning. Make update to bring in all the cipher/digest-related ENGINE changes. NB: It looks like mkdef.pl is causing certain cvs wars by continually flipping the order of some definitions ... Fiddling. This change puts the original OpenBSD /dev/crypto support that was in crypto/evp/ into the corresponding ENGINE. This code is currently untested. This changes EVP's cipher and digest code to hook via the ENGINE support. See crypto/engine/README for details. - it also removes openbsd_hw.c from the build (that functionality is going to be available in the openbsd ENGINE in a upcoming commit) - evp_test has had the extra initialisation added so it will use (if possible) any ENGINEs supporting the algorithms required. indentation. """make update""." Make necessary tweaks to apps/ files due to recent ENGINE surgery. See crypto/engine/README for details. "In case of memory problems New function SSL_renegotiate_pending(). New option SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION. Another demo. Get rid of junk (deleted/renamed function) by rebuilding based on 0.9.6 tree. Typo. One more manual page. "Make maximum certifcate chain size accepted from the peer application settable (proposed by ""Douglas E. Engert"" <deengert@anl.gov>)." The various hash #includes in rand_lcl.h *are* needed despite <openssl/evp.h> is now used (MD_DIGEST_LENGTH definitions!). No need to include such headers directly in md_rand.c. Look up MD5 by name. Remove duplication. Now need sha.h for some reason. Redo type-safety fix. ENGINEs can now perform structural cleanup. "Oops^2: It was the correct line """DH_up"" had been changed to ""DH_up_ref"" in libeay.num but the function declaration and implementation had not. So a recent update recreated the original definition in libeay.num ... this corrects it and changes the ""dh"" code to the ""up_ref"" variant." "Note the ""ERR_unload_strings"" function." "Add a new ERR function Correct a typo. "Note the ""ex_data"" changes." Test digests. Add digests. Tidy up some code formatting. "Note the ""ERR"" changes." "Make a note of the ""up"" functions." "Changes crypto/evp/ and ssl/ code from directly incrementing reference counts in DH More docs. -passin argument not used when actually loading the key (found by Massimiliano Pala <madwolf@hackmasters.net>). More manual pages. Constify. As discussed recently on openssl-users. typo. More tests. "Documentation on how to handle compression methods. Hopefully it is clear enough Add AES tests. Add first cut symmetric crypto support. One more function documented. "Make sure evil file name characters Add CRL utility functions to allow CRLs to be built up without accessing structures directly. Update ca.c to use new functions. Fix ca.c so it now build CRLs correctly again. "Bugfixes provided by ""Stephen Hinton"" <shinton@netopia.com>." "Better description of the behaviour of SSL_shutdown() as it is now Fix memory leak. Remove extra whitespace. Sorry. Reinstate accidentally deleted code. "Oops Make /dev/crypto work with new EVP structures. Mention removed option. "Make sure the source file is included among the dependencies.  This is the norm for 'gcc -M' but not for 'makedepend' Document DES changes better. Indent. "Vade retro C++ comments! (Latin for ""comments"" Make as sure as possible that gethostname() will be properly declared. Remove //. Only set the verify callback if there's one to set! Enhanced support for IA-64 Linux and HP-UX (as well as better support for HP-UX in common in ./config). Note that for the moment of this writing none of 64-bit platforms pass bntest. I'm committing this anyway as it's too frustrating to patch snapshots over and over while 0.9.6 is known to work. ANSIfication. Typo in stty command lines. Make sure *outl is always initialized in EVP_EncryptUpdate(). Fix problem occuring when used from OpenSSH on Solaris 8. "Tidy up ""cvs update"" output a bit." Updated explanation. Some more documentation bits. Allow OCSP server to handle multiple requests. Document new OCSP options. Clarify actual state. Some of the Kerberos code had dissapeared.  Reapply. Document the recent Kerberos SSL changes. "make update Note that since some private kssl functions were exported What is an '-engine' version? Clarify! (based on recent mailing-list discussions) One forgotten function. EVP_Digest() takes one more parameter. "In version numbers A better compromise between encrypt and decrypt (but why isn't it as fast for encrypt?). Use & instead of % - worth about 4% for 8 byte blocks. "Don't update argc Correct const-ness. Constification. Use one address consistently. Change info to correct values. Make an extra note about shared libraries and backward compatibility. "Make better use of load_cert "Make better use of load_cert Make sure we don't return 0 on error. "Use the new UI features "Make use of new features in UI's.  Among others "Oops Document recent changes. "For the UI functions that return an int Fix hwcrhk_insert_card. "This fixes ""Spurious test failures on IRIX?"" reported in April. Apparently I was wrong in conclusions about when addition starts overflowing in combaX routines." Update my status. Fix memory leaks. "Do a proof of concept.  ""openssl genrsa"" will make the name of the file part of the password prompt unless it's standard input... More will be added..." Initialize UI ex_data. "A good use of the UI interface is as a password callback replacement (for new functions...).  One might still want to be able to pass down a user-data pointer to be used by the UI.  However Confusion between algorithms resolved. "nCipher callbacks shall return 0 on success "Add a few more details on what one might need.  make and a development environment were a part of a Unix operating systems Increase ENTROPY_NEEDED to support Rijndael's larger key size. Make sure memset() is properly declared. Typos. Document the addition. "A randomizer for OpenVMS "Move the password reading functions completely away from the DES section. Add ui_compat.h for inclusion by those who want the old functions and provide all of them "Put back a removed ""extern"" Clarify behaviour with respect to SSL/TLS records. Typo. Purpose and trust setting functions for X509_STORE. Tidy existing code. Allow various X509_STORE_CTX properties to be inherited from X509_STORE. Add CRL checking options to other applications. .rnd issues "A method to create shared libraries on AIX Make proper use of all disabling variables. Make notes about ENGINE changes. Linux shared libraries can be linked with debug symbols. Tru64 shared libraries can be linked with static libraries. Provide the possibility to clean up internal ENGINE structures.  This takes care of what would otherwise be seen as a memory leak. Fix ASN1 bug when decoding OTHER type. Various S/MIME DSA related fixes. VMS was behind when it comes to OCSP. Add notes about the new ENGINE functionality. Make a note of the recent ENGINE developments. "Some more tweaks to ENGINE code. ENGINE handler functions should take the ENGINE structure as a parameter - this is because ENGINE structures can be copied Clarify request of client certificates. This is a FAQ. Fix warning. Add -keyform. Show an example of moving the emailAddress object from the subkect DN to subjectAltName when signing a certificate. Make it possible to move the emailAddress object to the subjectAltName extension instead of just copying it.  That makes a certificate comply even more with PKIX recommendations according to RFC 2459. Add information on 0.9.6a (in a form such that the list can be verified by looking at 'diff -u ../openssl-0.9.6a/CHANGES CHANGES') Some clarifications about $RANDFILE usage. Resize a local buffer to accomodate the size requirements of AES. Protect against future mistakes with an assert(). Add the possibility to have AES removed in Windows as well. Spotted by Harald Koch <chk@pobox.com> Correct a typo.  linux != linus. "OpenVMS/Alpha should use 64 bits.  If nothing else "Plug a memory leak.  Spotted by ""Shijin"" <shijin@comex.com>" Reports on VMS. A few more reports. Note reports. this time *really* fix the /../ check ... The IRIX fix. Asm recap and corresponding declation. Submitted by: Reviewed by: PR: "ln on Solaris expects -f to come before -s. The linux-shared method is actually gcc-specific A lot of reports. Update docs. "Since they aren't implemented yet Table for window sizes. Update. "New cofiguration for Unixwre and SCO "Explicitly ignore the exit code of ./bctest.  Usually the shell ignores it anyway in command substitution Correct a typo which might have lead to a dump. Noted by Martin Kraemer <Martin.Kraemer@Fujitsu-Siemens.com> An enhanced bctest submitted by Tim Rice <tim@multitalents.net>. It now looks along $PATH for a working bc and returns the absolute path to one that does work. Add copy_extensions option to 'ca' utility. Minimise the amount of -L. when linking the shared libraries.  It seems like some Unixen (SCO) have opinions about too many -L. "For AIX 4.3 or above It is a good thing to prepare the .def files. make update. Document the change. "For some experiments Typo. "Use 32bit longs on Alpha as well Update docs. "Consistently use 'void *' for SSL read Change the EVP_somecipher() and EVP_somedigest() functions to return constant EVP_MD and EVP_CIPHER pointers. Update docs. Bug fixes. Fix ec_GFp_simple_cmp. Use example group from Annex I of X9.62 in ectest.c. Add newly learned knowledge from yesterday's discussion. Some EC function names are really long.  Make aliases for VMS on VAX. Hide BN_CTX structure details. Incease the number of BIGNUMs in a BN_CTX. VMS catches up on the EC modifications. "Make EVP_Digest*() routines return a value. TODO: update docs "Integrate ec_err.[co]. ""make depend""" "Throw out *all* absolute pathnames More method functions for EC_GFp_simple_method. More method functions. The next bunch of vaporware. extra_data 'mixin'. (This will be used for Lim/Lee precomputation data.) Implement dispatcher for EC_GROUP and EC_POINT method functions. Initial EC_GROUP_new_curve_GFp implementation. New function declarations. Change comments. New option '-subj arg' for 'openssl req' and 'openssl ca'.  This sets the subject name for a new request or supersedes the subject name in a given request. Add options '-batch' and '-verbose' to 'openssl req'. Submitted by: Massimiliano Pala <madwolf@hackmasters.net> Reviewed by: Bodo Moeller "Sort platforms lexicographically as well.  Also Spelling corrected. make update Note that all *_it variables are suddenly non-existant according to libeay.num.  This is a bug that will be corrected.  Please be patient. New function and options to check OCSP response validity. Print out OID of unknown signature or public key algorithms. "Oops "Since RAND_file_name() uses strlen "I forgot there was a reason why the inclusions and definition of u_int was made in a certain sequence.  This change restores the earlier ""chain of command""." OpenVMS catches up. Get the right cast for lhash callback functions. Fix typo. Let VMS catch up. "Use new-style system-id macros everywhere possible.  I hope I haven't missed any. This compiles and runs on Linux Use new-style system-id macros. Fix warning. note OPENSSL_issetugid(). Temporary fix for build break. It's still inconsistent - probably better to undo the whole OPENSSL_NO_* thing. Make sure time() is properly declared. Use the new-style system-identity macros. Remove temporary files when done. New -set_serial options to 'req' and 'x509'. Remove the old broken bio read of serial numbers in the 'ca' index file. This would choke if a revoked certificate was specified with a negative serial number. Fix typo in uid.c "Make the choice of ""makedepend"" program choosable through a switch." VMS follows suit. "Add uid.{c Make it possible to use gcc to generate the dependency tables. New options to 'ca' utility to support CRL entry extensions. Add revelant new X509V3 extensions. Add OIDs. Fix ASN1 memory leak code to pop info if external allocation used. Don't forget to mention minor change. Option to disable standard block padding with EVP API. Add -nopad option to enc command. Update docs. New function OPENSSL_issetugid(). Needs more work. Update of linux-ppc.  Contributed by MATSUURA Takanori <t-matsuu@protein.osaka-u.ac.jp> New function OCSP_parse_url() and -url option for ocsp utility. Doesn't handle SSL URLs yet. More about session caching. Include information that automatic query is a new feature. Allow various options to be included for signing and verify of OCSP responses. Documentation to follow... Urgh.. this conflicted with the -VAfile patch I hope I haven't broken it. "The check for request including a nonce and response not having it was inversed.  Corrected.  Hopefully Another comment change.  (Previous comment does not apply for range = 11000000... or range = 100000...) Fix AES code. Update Rijndael source to v3.0 Add AES OIDs. Change most references of Rijndael to AES. Add new draft AES ciphersuites. Improve the state machine. Fix a memory leak in BIO_get_accept_socket().  This leak was small and only happened when the port number wasn't parsable ot the host wasn't possible to convert to an IP address. Contributed by Niko Baric <Niko.Baric@epost.de> New function to copy nonce values from OCSP request to response. Make depend. Fix a warning. Various OCSP responder utility functions. Delete obsolete OCSP functions. Largely untested at present... Document the change. Remove serial number file during 'make clean'. Add debugging info to new ASN1 code to trace memory leaks. Fix PKCS7 and PKCS12 memory leaks. Initialise encapsulated content type properly. Use the correct number of arguments in the example. Mention the ./config script fixes. Documentation about SSL_get_ex_data_X509_STORE_CTX_idx and SSL_get_ex_new_index() functionality. Extended verify_callback() example to show the usage. Additional functionality in ocsp utility: print summary of status info. Check nonce values. Option to disable verify. Update usage message. Rename status to string functions and make them global. Don't shadow. Make the change log on the RAND_poll change a bit more explicit.  Suggested by Bodo Moeller. link to the new manpage. New '-extfile' option for 'openssl ca'. This allows keeping extensions in a separate configuration file. Submitted by: Massimiliano Pala <madwolf@comune.modena.it> Preliminary ocsp utility documentation. Fix ocsp usage message. New 'openssl ca -status <serial>' and 'openssl ca -updatedb' commands. Submitted by: Massimiliano Pala <madwolf@comune.modena.it> "Remove ""AVAILABLE PATCH"" that has now been applied. Move ex_data.c entry from ""NEEDS PATCH"" to ""OPEN ISSUES""." New -newreq-nodes option to CA.pl. Submitted by: Damien Miller <djm@mindrot.org> Add SSLEAY_DIR argument code for SSLeay_version. Add '-d' option for 'openssl version' (included in '-a'). "As response to a user request to be able to use external memory handling routines that need file name and line number information "Don't cheat: when only getting several bytes from each source "Move all the existing function pointer casts associated with LHASH's two ""doall"" functions to using type-safe wrappers. As and where required Keep up with Unix code.  It's beginning to be  time to rethink the VMS build system... "Because /dev/urandom has a better chance of giving us a good and quick answer Add prototypes for new OCSP functions. Fix bug in OCSP_find_status(). "Add set of OCSP client functions. All experimental and subject to addition Keep up with the Unixly changes. Fix the S/MIME code so it now works again and uses the new ASN1 code. Make the DSO code for VMS work again.  First attempt. "Look for no-krb5 and add the definition of NO_KRB5 if it's there. I've no idea were the KRB5 header files and libraries are placed on Win32.  When there's better knowledge "Temporary measure: if no KRB5 is defined Rewrite PKCS#12 code and remove some of the old horrible macros. Fix two evil ASN1 bugs. Attempt to use 'ctx' when NULL if input is indefinite length constructed in asn1_check_tlen() and invalid pointer to ASN1_TYPE when reusing existing structure (this took *ages* to find because the new PKCS#12 code triggered it). Remove RSAref-related things. Document. Define OPENSSL_EXPORT and OPENSSL_IMPORT and give OPENSSL_EXTERN the default value OPENSSL_IMPORT.  Explain the use of all those macros. """make update"" plus a rewrite of both .num files." "Enhancements to mkdef.pl: * detect ""unknown"" algorithms (any C macro starting with NO_ that is not explicitely mentioned in mkdef.pl as a known algorithm) and report. * add a number of algorithms that can be deselected. * look in ssl/kssl.h as well. * accept multiple whitespace (not just one SPC) in preprocessor lines." New OCSP extension functions. X509V3_add_i2d() needs to be able to allocate a STACK_OF(X509_EXTENSION) so it should be passed STACK_OF(X509_EXTENSION) ** in the first argument. Modify wrappers appropriately. Fix SSL_peek and SSL_pending. "New function X509V3_add_i2d() this is used for encoding "Stop build when an error occurs. ""Peter 'Luna' Runestig"" <peter+openssl-dev@runestig.com>" Fixes to OCSP print code. Don't try to print request certificates if signature is not present. Remove unnecessary test for certificates being NULL. Fix typos in printed output. Tidy up output. Fix for typo in OCSP_SERVICELOC ASN1 template. Also give a bit more info in CHANGES about the ASN1 revision. Comment correction. Add OCSP service locator extension. "Do not poll DEVRANDOM if were building without an file pointer API. Spotted by ""David Schwartz"" <davids@webmaster.com>." Make sure each FAQ item has an index entry. Add a couple of FAQs. Locking issues. Make a note of the new engine. New function X509V3_extensions_print() this removes extension duplication from the print routines. Reorganisation of OCSP code: initial print routines in ocsp_prn.c. Doesn't work fully because OCSP extensions aren't reimplemented yet. Implement some ASN1 functions needed to compile OCSP code. Update. "New function X509_signature_print() to remove some duplicate code from certificate "Constification of the data of a hash table.  This means the callback functions need to be constified "In bn_mul_recursive() Stop extension creation code core dumping. This was caused by no initialising the buffer to NULL when using the auto allocating version if i2d. "Make TYPE_RSA the default type instead of just setting it when -new is given.  That also allows the arguments to come in any order (-new last bn_part_sub_word prototype. TEST_MUL and TEST_SQR added. Add a comment. Update the internal docs. Typo and additional information about cert-chain building. PERLASM - the wierdest programming language since Intercal. add debug output facilities. Use assert as in the rest of the BN library. Improve formatting. Make a note of the LHASH changes. Make the remaining LHASH macro changes. This should leave no remaining cases of function pointer casting in lh_new() calls - and leave only the lh_doall and lh_doall_arg cases to be finished. Fix warnings. Don't allow BIGNUMs to become so large that computations with dmax might overflow. Add a comment to explain the purpose of bn_cmp_part_words(). last commit was wrong. Now it works. :) Note the bntest change. The *_part_words functions are not static. "New function BN_bntest_rand() to detect more BN library bugs. The bn_cmp_part_words bug was only caught in the BN_mod_mul() test Fix bn_cmp_part_words() and move it to bn_lib.c. Write a first HOWTO on how to create certificates.  This is currently a draft. Document the addition of Kerberos stuff. Typo corrected. GPL FAQ. I hope this adequately summarizes the results of all those disussions. "Recognise Darwin as well.  For now Remove randomness from the test. These constants give me a segment violation in test_kron on a 32 bit system. A few bug fixes for Windows. Changes to Lenka's Montgomery implementation. Submitted by: Lenka Fibikova Corrections to the comments in BN_mod_inverse. "Do to DH and DSA what has already been done to RSA. This involves moving the initialisation and cleanup of ""ex_data"" elements to before an init() handler and after a finish() handler respectively." Log security relevant change. "A typo and a couple of logic errors fixed. I think there may still be one or two kinks lurking around Correct a bug in BN_kronecker. Sketch the test for BN_kronecker. "Fix BN_is_... macros. Fix BN_gcd. Analyze BN_mod_inverse. Add BN_kronecker. ""make update""." "Change submitted files so that they compile (in particular "Ensure that the ""ex_data"" member of an RSA structure is initialised before the RSA_METHOD's ""init()"" handler is called More BN_mod_... functions. Add bn_mod.c (should have happend in the previous commit ...). BN_swap manual page. "Remove RSAREF (not used). You can still get the code using tag ""rsaref""." Oops! Read a full buffer instead of some spurious number from elswhere. "Better handling of EVP names Make the definition of bn_add_words() match the definition. "Oops Two OCSP functions that aren't yet implemented. Get the Rijndael function declarations. "Some platforms (namely HP-UX) require the 'x' bit set for shared libraries. For performance reasons Additional explanations for SSL_ERROR_WANT_READ/WRITE. Make Rijndael work! Those long flights have some good points. Make this stuff compile. Remove references to RSAref.  The glue library is but a memory to fade away now... "Constification of LHASH.  Contributed by ""Paul D. Smith"" <psmith@gnu.org> I didn't apply all his patches yet Constify DH-related code. Constify DSA-related code. Make sure ERR_get_error() is declared. A few more constifications of some RSA routines that I forgot yesterday. "When ENGINE_by_id() couldn't find the given engine id "shl_load() also needs to load along a path given through an environment variable Document recent constifications. Constify the RSAref glue code. "Constify the RSA parts of the ASN.1 library.  Note some ugly casts that are needed in the ASN.1 macros.  Hopefully Constify the RSA library. Constify the RSA library. Make all engines available in the openssl application. "Richard moved hw_nuron.c over to DSO-land recently "Instead of just STACK "-t is supported This is a demo that performs SSL tunneling (client and/or server) and is built using an abstracted state machine with a non-blocking IP wrapper around it. README will follow in the next commit. Document the change. Document the OCSP addition. The majority of the OCSP code from CertCo. . Add a note about the recent DSO changes in CHANGES. "On HP-UX There's no reason why app_RAND_load_file() should return 0 when RAND_status() hasn't. Reported by Dale Stimson <dale@accentre.com>. "FreeBSD-elf can do threads.  However "Add what's needed to get shared libraries on HP-UX. N.B.: This has not been tested at all Document the change to NCONF. Fix for bug (?) in assembly language routines for SHA1. This causes MASM to complain and not produce valid debug info. Hopefully this wont break anything else... Also fix typo in e_rd.c Two questions have been asked quite often lately. Update test server certificate in apps/server.pem (it was expired). Always return a value. Submitted by: Reviewed by: PR: Fix for typo in certificate directory lookup code. The experimental Rijndael code moved to the main trunk. make update done. "Make the new conf implementatoin bug-compatible with the old one. Actually New docs and new facts in older docs. Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> Make sure ranlib is only used on .a libraries. Linux on Alpha with gcc knows about shared libraries. More SSL functions documented.  Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> The des_modes manpage is in section 7. A compiler warning removed.  Thanks to the folks at HP! Verbose output when installing manual pages so that you see that something is going on (and what). Add BUGS section. Fix SSL_CTX_set_read_ahead macro. Submitted by: Anders Gertz <gertz@epact.se> "When creating a .def file "'ranlib' doesn't always run on some systems.  That's actually acceptable Make the algorithm implementations depend on the corresponding selection macros. Update the status and version number to 0.9.7-dev. Time to build the release.  Bump the version info accordingly. Change the Windows building scripts to enable DSO_WIN32. more manpage links. Only use the new informational verify codes if we specifically ask for them. Fix typo in docs. Catch V_ASN1_NULL. More reports. Tests so far. Tests so far. Time to build beta 3.  Bump the version numbers accordingly. Changes by Jeffrey Altman <jaltman@columbia.edu> to make RAND_poll() work better in Win32.  Verified by zhu qun-ying <qyzhu@krdl.org.sg>. Clarifications and new documents. Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> New documents.  Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> Additions for 0.9.6. Reports about a few old systems. Reported by Bernhard Simon <bs@bsws.zid.tuwien.ac.at> ispell. Add docs for X509_get_ext_d2i() function. Add some major changes to NEWS... A few more HP-UX reports.  Reported by Kevin Steves <stevesk@sweden.hp.com> Clarify the BIO_seek() mess and related issues. Buffering BIO docs. A couple more reports. New documentation about things related to SSL_CIPHER.  Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> No engine stuff in the main trunk. Work around for Netscape PKCS#7 signedData bug. Typo in the added hpux targets.  -ldl should be -ldld. A new beta is being released.  Change the version numbers accordingly. A patch from HP for better performance. Submitted by Kevin Steves <ks@hp.se> 3 months ago... New macro BIO_set_shutdown_wr(). Update docs. Clarification. add links to the new BIO and SSL manpages to make them visible on the web. BIO_f_ssl() docs. Make sure dso_vms.c compiles on other operating systems as well. Accept BIO docs. Add a flag for OpenVMS. "Later Some small clarifications. "BIO_seed() and BIO_tell() were documented in two other documents "BIO_s_bio() manual page detailing BIO pair. This combines several manual pages provided by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> BIO_s_fd() manual page. Point to Peter Gutmann's revised paper. The copy at www.usenix.org is the old version. 3 changes: - Make sure PCURSORINFO is defined even on systems that do not provide it. - Change the reference to Peter Gutmann's paper. - Make sure we don't walk the whole heap lists for performance reasons. Jeffrey Altman suggests following Peter Gutmann's advice to keep it to 50 heap entries per heap list. "The other log message should have read ""Note the DSA change""." A few more systems reported successfull. bug: RAND_poll(). Holger Reif reports a few more Solaris successes. "mkdef.pl still needed better logic.  Also Document an old change. "mkdef.pl has erroneous conditions to check if a symbol is excluded from the given target.  Fixed "I started with a make update A cast is needed or Borland C will complain. Synchronise the VMS build with the Unix one. Two places where I forgot to change vms_idhacks to symhacks. Update verify docs. New option to verify program to print out diagnostics. Two new PKCS#12 demo programs. Update PKCS12_parse(). Make the keyid in certificate aux info more usable. Add docs for BIO_find_type() and friends. Added function BIO_next() otherwise you can't traverse a chain without accessing BIO internals. *.num rewitten to include the extra information. It's not just VMS that needs some symbols to be hacked.  Let's centralise those hacks in crypto/symhacks.h and use it everywhere it's needed. "Get rid of ASN1_UTCTIME_get "Another round of indentation changes: Position braces consistently Fix X509_STORE_CTX_init.  Make indentation more consistent.  Dump core less often. Add OAEP. Seed the PRNG. Add rsautl. Ignore executable. "Fix for BN_mul_word(a -Wall insists that main return an int. Tell CVS to ignore 'lib'. Add 'rsautl' low level RSA utility. Add DER public key routines. Add -passin argument to 'ca' utility. Document sign and verify options to dgst. Add demo state machine. Add support for 'other' PKCS#7 content types. Add more diversity to the possible log levels.  Now we have full coverage for all syslog level. "New option 'ctestall' for mkdef.pl Document the reconfiguratoin option for Configure. "Allow reconfiguration.  This can be useful if some source update requires that you configure again Correct the title.  This also fooled the automatic documentation builder that this was actually the pkcs7 document... The pkcs12 had no way of getting a CA file or path to be used when building a complete chain.  Now added through the -CAfile and -CApath arguments. It's probably a good idea to make the shared libraries depend in EX_LIBS. "A few corrections with the shared library support: 1. make sure libssl.so becomes dependent on libcrypto.so 2. correct a number of silly bugs in the solaris-shared target Remove casts that are no longer needed. "If a ip address is successfully parsed Document the new DN printing options. Change a few names to be more meaningful. Fix typos in CA.pl docs. "Looks like Win32 builds do not define THREADS.  However "Add the possibility to get hexdumps of unprintable data when using 'openssl asn1parse'.  As a side effect "There's a deadlock when ssleay_rand_bytes is called the first time Fix warnings. In crypto/err/err.c need to initialise p to NULL in case thread_hash is NULL. Otherwise p will be uninitialized. Make NEG_PUBKEY_BUG on by default. ASN1_TIME fixes. New function c2i_ASN1_OBJECT(). "Avoid loops Show the running line count and definition cont in debug mode.  That has helped me a bit when I ran into trouble. crypto/err.c bugfix Document -purpose option in usage string. Make req seed the PRNG if signing with an already existing DSA key. Document the new smime options. "FAQ about ar ""missing"" on Solaris." "Change the FAQ entry a bit Document the change. Update STATUS. Return bignum '0' when BN_rand is asked for a 0 bit random number. Use up-to-date functions. "Undo the changes I just made.  I'm not sure what I was thinking of. The message to everyone is ""Do not hack OpenSSL when stressed""..." "Make it possible for users of the openssl applications to specify the EGD should be used as seeding input Make it possible for people to tell where the EGD socket is through the RANDEGD environment variable. BSD-style MD5-based password algorithm in 'openssl passwd'. (Still needs to be tested against the original using sample passwords of different length.) Document the change in req. Forgot the self-documentation within req. Document the change in req. "Add the missing callback pointer handling functions. Also "The dynamic thread API changed Add OPENSSL_free at the end of CRYPTO_destroy_dynlockid. Modifications for VMS. "First of all "Using speaking ""variable"" names in macros so that e.g. grepping for sk_whatever_insert and sk_whatever_set immediately reveals the subtle difference in parameter order. Change mkstack.pl so that safestack.h is not rewritten when nothing has changed." "Change to have a single library that works on both Win9x and WinNT. As far as I understand There are compilers that complain if a variable has the same name as a label. (Reported by Alexei Bakharevski.) "The atalla functionality doesn't work with the ""word"" version of BN_mod_exp. Call the regular atalla mod_exp operation instead." Fix evp_locl.h macros. Documentation correction. Make EVP_SealInit() and EVP_OpenInit() check EVP_EncryptInit() and EVP_DecryptInit() return values. Update docs. Document EVP routines. Change EVP_SealInit() and EVP_OpenInit() to support multiple calls. New function to retrieve email address from certificates and requests. Comment about bcopy on SunOS 4.x. Comment for increased code clarity. Another attempt to allow compiling on SunOS 4.*. Harmonize indentation. Add entry that Richard forgot. Speed up DH with small generator. No need to abort if c_rehash fails here (e.g. because Perl is not where it is expected). CygWin32 support. Submitted by: John Jarvie <jjarvie@newsguy.com> EVP constification. Use NO_FP_API. "Don't include <stdlib.h>. In the NO_FP_API case is needed. Move Windows seeding functions into a separate file. They have nothing to do with the particular PRNG (md_rand.c). "Add ""FIXME"" comment." Improve PRNG robustness. More EVP cipher revision. Change EVP_SealInit() and EVP_OpenInit() to handle cipher parameters. Make it possible to set RC2 and RC5 params. Make RC2 ASN1 code use the effective key bits and not the key length. TODO: document how new API works. another warning. oops. Third phase of EVP cipher overhaul. Remove duplicated code in EVP. Second phase of EVP cipher overhaul. Change functions like EVP_EncryptUpdate() so they now return a value. These normally have software only implementations which cannot fail so this was acceptable. However ciphers can be implemented in hardware and these could return errors. Fix Blowfish URL. Submitted by: Arnaud De Timmerman <Arnaud.De.Timmerman@branchur.fr> Avoid sprintf. "Remove extra comma (creates a unnessecary null element Add required cast. Typesafety Thought Police last part. Typesafety Thought Police part 5. Typesafe Thought Police part 4. Typesafety Thought Police part 3. Typesafety Thought Police Part 2. Typesafety thought police. prototype. Allow UTCTIME objects to be retrieved. Check for imminent cert expiry. Make PKCS#12 code handle missing passwords. Add a couple of FAQs. Note apps/x509.c bugfixes. Initialise. Warn about truncation also in the case when a single password is read using the password prompt. "The handling of DSA_METHOD and DH_METHOD wasn't quite as problematic as with RSA_METHOD (the **_get_default_methods do set the default value if it's not set). However "This change facilitates name translation for shared libraries. The technique used is far from perfect and alternatives are welcome. Basically if the translation flag is set Correction. Ignore lib and Makefile.save. New function ERR_error_string_n. Minor corrections. """make update"" for DSO additions." Avoid memory leak. Extend entry on ERR_print_errors. "Release done Add a couple of FAQs. Add a default banner.  Contributed by Joon Radley <jradley@vps.co.za> Comments for SSL_get_peer_cert_chain inconsistency. Fix for HMAC. NeXT workaround. Beautifying code. "List ""no-..."" option first because it's the most frequently needed one." Update for new hpux-parisc-cc-o4 entry. another one done. A couple of corrections concerning HPUX 10 and shared libraries. Contributed by Lutz Jaenicke. Test results. OpenBSD complains. Document pseudo-commands. I just got a not very pleasant report. There are a few new features in 0.9.5a...  And I've probably forgotten a few. "Tagging done Beta 1 of 0.9.5a building. "oops. don't use ""entropy"" directly." cleanup. "libdes manpage. This may still contain a few errors from the old documentation e_os.h: don't do double work with status codes. openssl.c: make damn sure e_os.h knows about OPENSSL_C Make sure to complete the cleanup of names. Typo corrected. "Point out the PRNG usage bug affecting openssl rsa. (Should we point to snapshots Avoid a warning. SSL_ALLOW_ADH no longer has a meaning. Typos corrected. Make it possible top build just a part of the crypto library. Target added. Make V_ASN1_APP_CHOOSE work again. Clarifications for 'no-XXX'. """openssl no-..."" commands for avoiding the need to grep ""openssl list-standard-commands""." Include a timing test that works without RSA. "Corrections. In testss Synchronise with Unix. Correct a potential bug. Don't try to test the RSA command if it is not available. Remove Win32 assembler files.  They are always rebuilt (with some choice of parameters) when they are needed. "Repair bss_log. Curiously enough Mention -ign_eof. Add the possibility (with -ign_eof) to ignore end of file on input but still not be quiet.  Also make it clear that -quiet implicitely means -ign_eof as well. clarify. "bug fix. Submitted by: ""Yoram Meroz"" <yoram@mail.idrive.com>" Don't Free() password if it was read from config file. Clarification. New compatability trust and purpose settings. Fix the PKCS#8 DSA code so it works again. All the broken formats worked but the valid didn't :-( "Beautifying.  Sorry "Let's care about the compiler warnings for both cases Get definition of ssize_t. Add an #include. Make name_funcs_stack static. Update comment. Change comment. "It started with finding a misplaced #endif.  Then I wanted to see the structure better.  I hope noone minds add comment. Bug fix. Document the 'rand' application. Keep the references to other INSTALL files short. These are the Unix instructions. "Check BN_rand return value. ""make update""." Fix for non-monolithic build. Submitted by: Andrew Gray <agray@iconsinc.com> Ouch! PKCS7_encrypt() was heading MIME text headers twice because it added them manually and as part of SMIME_crlf_copy(). Removed the manual add. Typo corrected. Short is always promoted to int when passed as a function argument. This is especially true when it's part of a '...'. "MacOS tidbits. Add new files to the project Works with gcc 2.8.0 as well. "No Declare memset. Typo. One test passed for VMS. "A new beta has been released OpenVMS often has problems with files with more than on period in it. Here's instructions on what to do if you get into trouble because of that. Change version string to reflect the release of beta 2. "New ""target"": CONFIG.  This will build the opensslconf.h file from what is known about VAX and Alpha running VMS Add and change docs for the changes that have been made. put function names in the title. Bug fix! Fix so Win32 assembly language works with MASM. Add info about where to get MASM. BN_div_recp fix. I've ran divtest for 10 mins and it didn't exhibit a single fault:-) Needless to mention that bnbug.c posted couple of days ago passes as well... More get0 et al. changes.  Also provide fgrep targets in CHANGES where the new functions are mentioned. "Make sure that all test files are gone before starting the tests Typo corrected. Don't include sys/types.h if NO_SYS_TYPES_H is defined. Add support for Unixware 7.  Thanks to Ron Record <rr@sco.com> for the patch. Make clear which naming convention is meant. Fix shadow warning. Rename functions for new convention. Compile rand_egd.c on VMS as well. Adjust all the old scripts to deal with the new location. New script to compile on systems that already have pthreads in the system. "Changes to synchronise with Unix. (actually The main() return value is a program's exit code. Gets around VC++ compiler pickiness. (long != double) PR: "Ignore files that Use threads for linux-ppc. Clarification. "Yet another ""unixware"" spelling." "Don't define platform-dependent preprocessor symbols for OPENSSL_THREAD_DEFINES. ""make update""." "remove some (apparently) obsolete entries. please put them back in if they're still valid Correct a couple of command errors. yet another faq. "Avoid saving any macros starting with a _ correct macro. add missing names. threads mapage. "Make pkcs8 work again. Make EVP_CIPHER_type() return NID_undef if the cipher has no ASN1 OID Update docs. warning. "Check tlen size in all padding_check functions. As called within the rsa library More news. Blowfish docs. Change the 'other' structure in certificate aux info. Allow for higher granularity of entropy estimates by using 'double' instead of 'unsigned' counters. Seed PRNG in MacOS/GetHTTPS.src/GetHTTPS.cpp. Partially submitted by Yoram Meroz <yoram@mail.idrive.com>. Make excluded cipher entry in opensslconf.h a bit more descriptive. Change the example to show apr1 with an 8-character salt. "Make Configure add the configuration options that it was copmiled with. Currently "Cosmetic change.  No New functions and option to use NEW in certificate requests. Reflect API changes. Add -pass argument to 'enc'. Fix to make Win32 compile work again. Pass phrase reorganisation. Move primes to read-only segment. Install manpages below OPENSSLDIR (I think it was meant to be this way?). New variable for man directory. Move initial key to read-only segment. Move CAST_S_tables to read-only segment. New NO_INLINE_ASM macro. Primary target for the moment is Solaris x86 which can't stand GNU C assembler templates. "Fix for Netscape ""hang"" bug." Modernise 'selfsign.c' to use new X509_NAME code and add example of extension aliasing. Also fix the extension aliasing because it didn't work :-) Make pkcs12 and smime applications seed random number generator (otherwise they don't work) and add -rand option. Update docs. Corrections. Update. "Implement MD5-based ""apr1"" password hash." Fix shadow. Add compilation of the new passwd utility. 'passwd' tool. Update docs. Rename the X509V3_*_d2i functions to X509_get_ext_d2i() etc. This better reflects their behaviour. """print"" is GNU bc specific." A proposed freeze and release time has come up. BN_div bugfix. The q-- loop should not be entered in the n0==d0 case. Add support for some broken PKCS#8 formats. "New functions BN_CTX_start() md2 is documented in the md5 page. lets see if this works... Document RC4. Rename SSLeay_add_all_algorithms() et al to OpenSSL_add_all_algorithms(). Move these into separate files so they work properly. Report progress as in dsatest.c when creating a DHE key. "Use correct "Add new -notext option to 'ca' Some 'const's for BNs. Include OpenSSL license. Update docs. Correct one link. Pointer to important manual page that should be written. Change log entry completed. Document ERR library. Print a reassuring message when Configure is done. Reference for SHA-1. Checked in some junk. Sorry. Note changes. Typos. Update docs. Reimplement so only one synchronous stack is used.  The benefit is that function pointers are nicely tucker in their structure. Fix CRL encoding bug. Update all links so they will be rendered better. New news. Increase the year by one. Small correction. New manpage. Run ispell. Clean up bn_mont.c. Update all links so they will be rendered better. Clarification. New manual page. Avoid a race condition. Improve clarity. "The des_xcbc_encrypt apparently always fails. Workaround so that ""make test"" continues anyway." "Let's make all the example formated the same Tidy up CRYPTO_EX_DATA structures. Document the BN library. "Make s_server Minor patch: check only match @STRENGTH and remove eNULL comment. Add documentation for the ciphers command including a full description of cipher lists. Add new program dhparam and update docs. Gets Lutz Jaenicke's name right this time :-) Apologies to both concerned. Avoid integer overflow in entropy counter. Slightly clarify the RAND_... documentation. "In RAND_write_file "add ERR_print_errors after ""end"" label." Make -CAcreateserial start from 1 instead of 0 for serial numbers. Change the 'man' directory to 'apps'. Yes I wish cvs could rename too :-( Some more ifdefs for no-xxx options. Don't build the testapps automatically because the openssl program now has s/mime functionality. Define WINDOWS. "Compaq C 6.2 for VMS will complain when we want to convert non-function pointers to function pointers and vice versa. The current solution is to have unions that describe the conversion we want to do "SOCKETSHR is showing bad declarations again.  However Beautification and a few entries added. "SSL_R_UNSUPPORTED_PROTOCOL (as in s23_clnt.c) for SSL 2 when NO_SSL2 is defined Tell the truth about list separators. "Delete ""random"" file .rnd in ""make clean""." PKCS#1 signatures don't use randomness. Add a note about the padding functions. Added a comment about Win32. Add more info to the memory allocation change log. Suggested by Bodo. Clean up some of the SSL server code. Update docs. "New function X509_CTX_rget_chain() s_client and s_server now have their own man pages. Man page for s_server. Make NO_RSA compile with pedantic. Add -prexit command to s_client and patch some BIO functions so it doesn't crash. Document s_client. superseded by doc/man/openssl.pod Use basename instead of complicated sed line. Install man pages. Minor format changes. make no-des and no-rc2 work. Honor the no-xxx Configure options when creating .DEF files. #undef PKCS7_SIGNER_INFO for Win32 to avoid clashes. Fix so CRLDistributionPoints relativeName option uses the correct type. Remove obsolete SSLeay instructions. ispell. "New functions SSL_get_finished Use prototypes. Further work on MacOS port. See INSTALL.MacOS for details. "Rename CA.pl to CA.pl.in (no actual changes) Alpha Linux update companion. Enhanced support for Alpha Linux. See CHANGES for details. "Fix some of the command line password stuff. New function that can automatically determine the type of a DER encoded ""traditional"" format private key and change some of the d2i functions to use it instead of requiring the application to work out the key type." Allow passwords to be included on command line for a few more utilities. Fixes so NO_RSA works again. Minor documentation update. Avoid shadowing p to make the compiler happy. Point out that openssl-bugs is public. Add a comment. Fix the S/MIME code to use canonical MIME format for encrypted mail. Also update the smime docs. Various S/MIME fixes. "Fix for crashing INTEGERs Make the PKCS#7 S/MIME functions check for passed NULL pointers. Fix the usage message of smime utility and sanitise the return codes. Add some documentation. CORE SDI proposed patch doesn't make any sense. Undo. Oops! "Fix a bug in the modified purpose code: it wasn't updated to use the new purpose getting function. Update the ca-cert.pem and pca-cert.pem ""CA"" certificates so they really are CA certificate: that is they have the appropriate extensions." Modify the X509 V3 extension lookup code. Make salting the default. Fail gracefully if the input is not salted. Document the extension tests performed by the -purpose test in the x509 utility. "Remainder of SSL purpose and trust code: trust and purpose setting in SSL_CTX and SSL Add trust setting support to the verify code. It now checks the trust settings of the root CA. After a few fixes it seems to work OK. Still need to add support to SSL and S/MIME code though. Oops! Commit died on me :-( New options to the -verify program which can be used for chain verification. Extend the X509_PURPOSE structure to include shortnames for purposed and default trust ids. Still need some extendable trust checking code and integration with the SSL and S/MIME code. Support for authority information access extension. Fix so EVP_PKEY_rset_*() check return codes. Transparent support for PKCS#8 private keys in RSA/DSA. New universal public key format. Fix CRL+cert load problem in by_file.c Make verify report errors when loading files or dirs Update dependencies. Fix warning. Fix for a bug in PKCS#7 code and non-detached data. Remove rc4-64 from ciphers since it doesn't exist... New function X509_cmp(). Add some examples to the enc man page. "The info removal code was overcomplicated Avoid deadlock. "Two changes have been made: 1. Added code to the memory leak detecting code to give the user the possibility to add information Adjust to changes in apps/Makefile.ssl adjust to changes in test/Makefile.ssl Oops forgot the S/MIME v3 RFC. Oops. The pkcs8 man page wasn't finished: this is an updated version "Allow additional information to be attached to a certificate: currently this includes trust settings and a ""friendly name""." Make md_rand.c more robust. New file app_rand.c with some functionality used in various openssl applications. More multibyte character support. Functions to get keys from EVP_PKEY structures. Constification. New function ASN1_mbstring_copy() to handle ASN1 string copying. Ultimately this will be used to clear up the horrible DN mess. New functions to parse and get extensions. More patches. RC4 tune-up featuring 30-40% performance improvement on most RISC platforms. See crypto/rc4/rc4_enc.c for further details. "New option -dhparam to s_server to allow the DH parameter file to be set explicitly. Previously it couldn't be changed because it was hard coded as ""server.pem""." Fix warnings. Cosmetic changes. "Generate obj_dat.h in ""make update""." RC4 tune-up. See comments in the code (after #if defined(RC4_CHUNK)) for more details. Fix warnings. More patches. (Are there any others that have been submitted but not yet reviewed/integrated?) Document -startdate and -enddate in usage summary. Fix typo. Update dependencies. Correct warnings. Correct address in a comment. Check the as version on Solaris x86. People don't read INSTALL anyway. :) Fix warnings. New UTF8 utility functions to parse/generate UTF8 strings. Fix server behaviour when facing backwards-compatible client hellos. Make DH_free() free up any ex_data and also call the finish method. RIPEMD160 shape-up. Final touch. RIPEMD160 shape-up. Major news are that it's operational on all platforms now and I'm putting it back to 'make test' later today. make testapps after the library. "Allow the 1.OU=""my OU"" syntax in 'ca' for SPKACs." make update. Minor MIPS III/IV tune-up. Fix for a bug which meant encrypting BIOs sometimes wouldn't read the final block. Initial support for DH_METHOD. Also added a DH lock. A few changes made to DSA_METHOD to make it more consistent with RSA_METHOD. "Fix horrible (and hard to track down) bug in ssl23_get_client_hello: In case of a restart Return 0 for succesful exit when -noout is used. Disable the text about foo.h => openssl/foo.h. Everyone should have got it by now. Remove -DWINDOWS in debug configuration. Submitted by: Erik Johannisson <erik@johannisson.se> Fix typo. "Updates. Prototypes and constant declarations for non-copying reads and writes for BIO pairs (which is totally untested as of now -crlf option. "Bump after tarball rolling. Friends Comments. A few more ``#ifndef NO_FP_API / #endif'' pairs for consistency. Hint from: Andrija Antonijevic <TheAntony2@bigfoot.com> Fix -startdate and -enddate arguments to 'ca' program. Also update NEWS file with some 0.9.4 changes. "New function DSA_dup_DH Add a wish. Change all the -'s to _'s. Make it compile under -pedantic. Revert erroneous change. automatically use no-mdc2 if no-des is requested. Bignum division tune-up. Idea is to move multiplications in front of loop body and replace 'em with addition/subtraction. Tidy up pkcs12 application. close files. Use correct CFLAG definition for makefile.one builds. Remove obsolete files. crypto/bn/asm/mips3.s is obsolete. I'm moving it to crypto/bn/asm/obsolete in order to replace it with a new version. New compile time option -DCRYPTO_MDEBUG_THREAD. "Have CRYPTO_MDEBUG_TIME automatically set CRYPTO_MDEBUG NO_HMAC. Fix option processing. Submitted by: Sam Tetherow Continues NASM support. This might work now. Its still experimental but it passes all the tests. Added documentation in INSTALL.W32. Fix memory checking. Obsolete/experimental code. "Updated to reflect recent ""Configure"" modification." Broken HPUX cc. Fix no-hmac and no-ripemd. New functions to allow RSA_METHODs to be changed without poking round in RSA structure internals. Fix comments. Submitted by: Anonymous Memory leak checks. "Don't use inline assembler when configured for ""no-asm""." "New function PKCS7_signatureVerify to allow the signing certificate to be explicitly stated with PKCS#7 verify. Also fix for util/mkerr.pl: if the -nostatic option is being used this will be for an external library so the autogenerated C file should include the header file as: #include ""any/path/to/header.h"" rather than the internal library form: #include <openssl/header.h>" Change the PEM_* function prototypes to use DECLARE_PEM macros and change util/mkdef.pl to handle this. Also do a 'make update'. Clarification. New function CRYPTO_num_locks. Typo. Don't try to use zero-byte buffers. Obsolete. Bugfix. BIO pairs. Fix warnings. hpux-cc (HPUX 9.x) does not work with BN_LLONG (floating point exceptions). Submitted by: Andreas Ley <andy@rz.uni-karlsruhe.de Two new functions to write out PKCS#8 private keys. Also fixes for some of the the PBE code and a new constant PKCS5_DEFAULT_ITER for the default iteration count if it is passed as zero. Avoid warnings. Repair PEM_write_PrivateKey and PEM_write_bio_PrivateKey. "Oops Update dependencies. """extern"" is a C++ reserved word. Pointed out by: Janez Jere <jj@void.si>" """make update"" (added to top Makefile Mention unistd.h. Some pre-POSIX systems don't have unistd.h (but e.g. lib.c). Allow configuring the name of that header file. Oops. Get rid of now incorrect comment. I keep forgetting to fix this: update the IV! Most important! The des app. Survive pedanticism. "crypt() Call our crypt implementation des_crypt(). crypt() now is a wrapper if there is no system crypt() available. Casts. Warnings and casts. Fix to compile the des app. Prevent name conflicts. Submitted by: Janez Jere <jj@void.si> Fix for BIO pairs. Use locking in a way that makes more sense. Use the same path to perl in all #! lines in util. Don't mix real tabs with tabs expanded as 8 spaces -- that's a pain to read when using 4-space tabs. Mention mkdir-p.pl. Comments added. """linux-sparc"" configuration. Submitted by: Christian Forster <fo@hawo.stw.uni-erlangen.de>" More PKCS#8 stuff. Support for unencrypted forms of private key. const/type fixes. Update. Aha! That's how pkcs12 got missed from stackification. Some constification and stacks that slipped through the cracks (how?). Test apps. Hint about unresolved symbols when mixing compilers. Make samples compile. stack. Stack. Remove redundant line. stack. Stack. """BTW More stack. Another stack. Another safe stack. Another safe stack. Puhhh... today is a very hot day. Oops! sco5-gcc configuration. Submitted by: David Greaves Include <stdio.h>. Free up 'out' before exiting pkcs12 application. Submitted by: Wu Zhigang <zhigangwu@yahoo.com> der_chop is now generated from der_chop.in. Set #!... path to Perl in apps/der_chop automatically. Update for 0.9.3. Final version for 0.9.3. Move on to 0.9.4. Here we go: prepare to roll 0.9.3. Prepare for final(?) beta. Comment about bug. Move the Win32 #undefs of X509_NAME and PKCS7_ISSUER_AND_SERIAL so they will always get included with the relevant files. "It was a very bad idea to use #include ""../e_os.h"" -- when this occurs in cryptlib.h (which is often included as ""../cryptlib.h"") Don't include top-level CVS directory. Bring VMS in sync with the recent changes. Submitted by: Richard Levitte <levitte@stacken.kth.se> Revert. Avoid a warning. Submitted by: Sylvain Robitaille <syl@alcor.concordia.ca> Change self-description (mklink.pl is not just faster than the last released version of mklink.sh -- the latter couldn't even handle the ../../include/openssl case). "Bignum library bug fix. IRIX 6 passes ""make test"" now! This also avoids the problems with SC4.2 and unpatched SC5. Submitted by: Andy Polyakov <appro@fy.chalmers.se>" Typos. Oops. Small corrections. Switch to new version numbering scheme. "New functions sk_set no-xxx options. BSD alpha config. Submitted by: Rich Bud <rbud@fortean.com> Substitute spaces for tab. "Make MD5 work on Alpha Clarification. Oops! Get the pmatch test the right way round. Keep text lines less than 80 characters wide. Typo. DES changes. "Don't run ""make depend"" automatically." Get rid of casts. Get rid of another cast. e_os* corrections. Comment. Bugfix (set shutdown only when we should). Submitted by: Oleg Girko Get rid of the cast. Comment. A comment. Fix cryptlib.c. Submitted by: Reviewed by: PR: "Change cast in function calls to that which is Missed one line. Update dependencies. Oops. Close the file. "Avoid shadowing VMS support. Submitted by: Richard Levitte <richard@levitte.org> "First tiny changes in preparation of changing of ""sess_cert"" handling. Also I've subsituted real tabs for 8-spaces sequences in some lines so that things don't look that weird with a tab-width of 4." Add new -out option to asn1parse to allow the parsed data to be output. Fixed -strparse option: it didn't work if used more than once (this was due to the d2i_ASN1_TYPE call parsing a freed buffer). On Win32 the file wincrypt.h #define's X509_NAME and PKCS7_SIGNER_INFO causing clashes so these are #undef'ed Missing argument in prototype. Submitted by: Andreas Ley <ley@rz.uni-karlsruhe.de> Comment. Submitted by: Reviewed by: PR: Move openssl.cnf out of lib/. Update. "Ok Changed a comment. Submitted by: Reviewed by: PR: Create a duplicate of the SSL_CTX's CERT in SSL_new instead of copying pointers.  The cert_st handling is changed by this in various ways. Submitted by: Reviewed by: PR: Allows PKCS#12 password to be placed on command line and add allow config file name for 'ca' to come from the environment. GeneralizedTime setting fixes. The libssl32.dll definition file is called ssleay32.def. (why?) Mingw32. pass $PERL on make files. Superseded by sparcv8.S and sparcv8plus.s. Get the Mingw32 makefiles right. Make -pedantic work again. "Restored path names that were changed by a previous ""Configure"" run. (Rather than changing the files in places Remove unreachable return statements. v8plus must be specified. Use ANSI stdarg. C++ bug fix. Submitted by: Franco Papacella <franco@arpage.ch> solaris64 entry. Submitted by: Andy Polyakov <appro@fy.chalmers.se> "Typo. (You ought to trademark ""Configurion"". :)" Yet another stack. Annotate a bug. Submitted by: Reviewed by: PR: Another stack. New function SSL_CTX_use_certificate_chain_file. Submitted by: Reviewed by: PR: Better to not have blanks in .cvsignore files New function SSL_CTX_set_session_id_context. Submitted by: Reviewed by: PR: Typo. Superseded by mklink.pl. Submitted by: Reviewed by: PR: OAEP bug fix. Close files. "New Configure options ""threads"" and ""no-threads"". For Solaris and Linux exptest dumps core. Optimizer bug? "Missing ""else""." Obey $(PERL) when running util/mklink.pl. Submitted by: Reviewed by: PR: Use util/mklink.pl instead of util/mklink.sh. Submitted by: Reviewed by: PR: Ignore autogenerated assembler files. Pass $PERL on make dclean. Linux shared libraries. Do make rehash automatically at make test. Don't shadow. Remove autogenerated file. Typo. Pointed out by Nick Boyce <nick.boyce@eds.com>. Undo. Message digest stuff. "New Configure option no-<cipher> (rsa "New Configure option no-<cipher> (rsa Remove NOPROTO-related macros. Various header consistency fixes. Fix mkerr.pl to find functions returning function pointers (thanks Ulf!) also add a few missing prototypes. New Configure option --openssldir to replace util/ssldir.pl. Some instructions for how to handle the <foo.h>  =>  <openssl/foo.h> transition. Submitted by: Reviewed by: PR: C indentation style definition for Emacs. Submitted by: Reviewed by: PR: Remove header files from .cvsignore. Pass the $PROCESSOR variable through. Set the 386 flag automatically when building on i386. Ultrix compatibility. Submitted by: Bernhard Simon <simon@zid.tuwien.ac.at> Oops! Fixup CHANGES. Suppport for CRL distribution points extension. Also document some of this stuff. Move all autogenerated header file parts to crypto/opensslconf.h. Remove some unnecessary(?) casting. Fix DES export ciphersuites. -Wall implies -Wuninitialized. Arguments are des_cblock. Update dependencies. const correctness. Missing #endif. Document additional Configure flags. Error in comment. Fix const declarations. Update dependencies. Massive constification. Fix some warnings. Contributed by Anonymous. Another bug. Add new experimental ciphersuites. Bring naming into line with RFC. /* Just some comments. */ Submitted by: Reviewed by: PR: Delete all the old X509V3 pack and unpack stuff and various structures and files associated with them. This stuff is all obsoleted by the new X509V3 code. Don#t auto-generate crypto/pem/pem.h -- a fixed file is fine for it. Submitted by: Reviewed by: PR: "Obsoleted by new openssl command ""list-cipher-commands"". Submitted by: Reviewed by: PR:" Adjust renegotiation slightly. Fix a typo in the X.509v3 docs: cRLSign instead of cRLCertSign is correct according to the sources.... found by Steffen Dettmer <steffen@tfh-berlin.de>. Rid the world of more evil casts. recent changes. Separate DSA functionality from ASN.1 encoding. New functions DSA_do_sign and DSA_do_verify to provide access to the raw DSA values. Preprocessor file to allow testenc to test only those ciphers that are available. Submitted by: Reviewed by: PR: Bugs. "New ""open issue"" (ERR_...). Submitted by: Reviewed by: PR:" Bug fix for X.509 two-digit year. Pointed out by Alexander Tyshlek <tyshlek@fuib.com> and Peter Gutmann <pgut001@cs.auckland.ac.nz> Don't shadow. Update dependencies. Remove obsolete files. pre-0.9.3 development version. Add .cvsignore in new pkcs12 directory New option to generate 80386 code. Typo. PR: Include pkcs12 program as part of openssl. This completes most of the PKCS#12 integration. Remove confusing hint to non-existing file.  Instead make it clear that one shouldn't change it manually just here. The util/ssldir.pl script does more and has to be used for this.  Pointed out by Jacques Supcik <supcik@inf.ethz.ch>. Comment out the lines that generated by mk1mf.pl include three separate rules that are equivalent to $(OUT_D). This was what was causing the 'too many rules' warning under VC++. Update dependencies. Allow bsdi-gcc - see if it gets anyone anywhere. Solaris shared library support. Use the right compiler for ctx_size. Fix for RSA private key encryption if p < q. This took ***ages*** to track down. Let util/clean-depend.pl work also with older Perl 5.00x versions. Submitted by: Matthias Loepfe <Matthias.Loepfe@adnovum.ch> Reviewed by: Ralf S. Engelschall Fix quad checksum bug. Go faster. Correct English. test. Solaris 2.6 makes still problems. Details were posted. "Fix Win32 symbol export lists for BIO functions: Added BIO_get_ex_new_index Two more .cvsignore files for the assembler stuff Fix perl assembler. Fix DWP when only given three parameters. Always make links. Fix a typo. Disable new TLS1 ciphersuites. Fix names of cert stack functions. Put the dependencies back. Reshape the README file out of the existing README stuff into a single file. Need more cleanup for final release IMHO. Permit null ciphers. Supper's cooking. More truth in declarations. Experiment with doxygen documentation. Update dependencies. "Ops BN_RECURSION causes the stuff in bn_mont.c to fall over for large keys. For now change it to BN_RECURSION_MONT so it isn't compiled in. "Perhaps if I do a tiny bit of docco Move s_server -dcert and -dkey options out of the undocumented feature area because they are useful for the DSA situation and should be recognized by the users. Thanks to Steve for the original hint. Don't hard-code path to Perl interpreter on shebang line of Configure script. Instead use the usual Shell->Perl transition trick. Remove debugging fprintf from req.c and fix the code so it properly skips over the first leading XXX. in the DN. Code for reliable BIO. Add reliable BIO. Add syslogging BIO. Undo a couple of kludges. Fix warning. Fix a warning. Oops! Remeber to include the other patches this time... Oops... add other changes this time too. Finally(?) fix DES stuff. Update dependencies. Some cleanup. Tidy up asm stuff. Remove one more totally bogus source file. This one is exactly the same as ssl_sess.c. Thanks to Adam Goodman <adam@a-domain.com> for hint. Update dependencies. More exactitude with function arguments. Minor tweaks to keep Perl 5.001 happy. Slightly improved diagnostics. Process extensions when they are there. Diagnose errors. Typo in arguments. Rename v3_bitstr.c to v3_bitst.c to fit in 8+3. Rebuild MINFO to reflect change. Oops! Restore ssleay.num: it got overwritten with libeay.num :-( Break circular dependency between pem and err. Update dependencies. Add dependencies. Fixed ms/32all.bat script: `no_asm' -> `no-asm' Submitted by: Rainer W. Gerling <gerling@mpg-gv.mpg.de> Reviewed by: Ralf S. Engelschall "Allow the -certfile argument to be used multiple times in crl2pkcs7. Also fix typos in the usage messages: ""inout"" instead of ""input""." Add a few extended key usage OIDs. Still more X509 V3 stuff. Modify ca.c to work with the new code and modify openssl.cnf for the new syntax. Oops. One header too many. Update dependencies. Add file x509v3.err. Make sure people know when they need to rebuild the Makefile. Minor constification. "This time Finally lay dependencies to rest (I hope!). New err_code.pl script to retain old error codes. This should allow the use of 'make errors' without causing huge re-organisations of files when a new code is added. Ignore auto-generated programs. Dispose of generated programs. Correct Linux 1 recognition. Contributed by: Ulf Mller <ulf@fitug.de> More prototypes. More prototypes. More prototypes. More prototypes. More prototypes. More prototypes. Fix comment. Sort openssl functions by name. Fix DH key generation. Contributed by: Anonymous <nobody@replay.com> "Make the world a safer place (if people object to this kind of change Oops! update CHANGES file properly. Free the right thing. Only free if it ain't NULL. Remove the bugfix that was really a bug. Submitted by: Arne Ansper <arne@ats.cyber.ee> More .cvsignore stuff to make CVS quiet on our generated files. Remove one EVP_PKEY_free() that shouldn't be there. "Reflect change from ""ssleay"" to ""openssl"" as the main binary name. Also document ""sh config"" as an easier alternative to ""./Configure system""." Some more changes for renaming the binary from ssleay to openssl. I wonder what eay.c is? Make GCC happy by removing an unused variable defintion. ssldir.pl did not correctly set the directory in utils/mk1mk.pl when perl5 was used. Fix pem/err ordering. More structuring and sorting of the SSL API documentation. And the first steps to descriptions in prosa. Add prototypes. Make Montgomery stuff explicitly for that purpose. Make Configure work again after eliminating files. Deal with generated files. Require Perl 5. Fix option listing. Typo. Autodetect FreeBSD 3. 
Move declaration of i into blocks where it is used. sctp requires dgram. "RT4660: BIO_METHODs should be const. BIO_new "Downcase VMS config names On VMS Adds s2i function for ct_precert_poison X509 extension Allows CONF files for certificate requests to specify that a pre- certificate should be created (see RFC6962). Fix no-gost Configure had the wrong name for the no-gost option. "In for loop values Remove the no-rijndael option Rijndael is an old name for AES. Fix no-scrypt Fix the evp tests when no-scrypt is used. Skip the CMS tests if CMS is disabled This fixes the no-cms compile time option. Fix no-dsa Misc fixes for no-dsa. config: fix off-by-centimeter-to-the-right typo. "Remove the remainder of util/mk1mf.pl and companion scripts This removes all scripts that deal with MINFO as well GH886: CONNECT should use HTTP/1.1 By default you get 0.9 which isn't widely available. But we use HTTP/1.0 for now. Courtesy beusink@users.github.com Have makedepend output to stdout and redirect it This gives us better control of what files are produced. "Don't let 'generate' target depend on generated files "Revert ""Ignore the generated apps/progs.h"" This reverts commit 91056e72693b4ee8cb5339d9091871ffc3b6f776." "Revert ""Include progs.h directly in openssl.c instead of via apps.h"" This reverts commit a45d7d5388c6774a484cff4af13f188240d3d50b." Correct faulty L<> links in .pods Closes RT#4450 "Clear the exit code from 'find' in 'make depend' Depending on what has been built so far Shut find up about files not found Some of the files in $(DEPS) might not exist.  We don't need to know. "Use the dependencies received in generatesrc() generatesrc() did already receive dependency information Generate apps/progs.h on the fly Make apps/progs.pl more flexible Make Configure write @disablables to configdata.pm and have apps/progs.pl use that data. "Correct incorrect path In crypto "Better 'make depend' mechanism Instead of relying on the '-nt' test operator apps/progs.pl: more consistent output for digests Fix no-des Numerous fixes for no-des. Fix no-dgram A few places in s_client needed some OPENSSL_NO_DTLS guards which fixes no-dgram. Fix no-deprecated The no-deprecated build was failing because afalg was relying on a transitive include that does not exist in a no-deprecated build. Fix no-cmac There were a couple of CMAC references without OPENSSL_NO_CMAC guards. "Make OpenSSL::Test::run() sensitive to signals $? in perl gets the status value from wait(2) Resolved unresolved symbols with no-hw Compiling on Windows with no-hw was resulting in unresolved symbols in the padlock engine. "Ensure that no-comp functions are flagged as such mkdef.pl was not detecting no-comp functions. This updates the header file so that mkdef.pl detects that no-comp applies Fix no-rc2 in the CMS test The CMS test uses some RC2 keys which should be skipped if the RC2 is disabled. Mark OCB as an AEAD cipher OCB is AEAD capable but was not marked as such with the EVP_CIPH_FLAG_AEAD_CIPHER flag. Fix build; CPP syntax error. "Disallow --classic for Windows With all the config changes Report TLS 1.0 as backwards-compatible TLSv1 The TLSv1.0 form is retained for reporting the first protocol version that supports a given cupher. Remove ultrix/mips support. "Remove support for Borland C++ Borland C++ 4.5 is very old and our ""support"" for it is already non-existent "Added build.info debugging capability to Configure This is only enabled when the environment variable CONFIGURE_DEBUG_BUILDINFO is defined.  This will cause every line in every build.info file to be displayed Simplify define as we don't support MS-DOS anymore. "Don't define OPENSSL_ENGINES in test recipes Bugfix: Encode the requested length in s_cb.c:hexencode() Deal with DSA_SIG opaqueness. "When building DLLs "DLL object files should not be built with /Zl"" When building the DLLs We should use $SRCDIR in Makefiles Normally we always refer to source files relative to $SRCDIR in Makefiles. However the reference to unix-Makefile.tmpl was using a fully expanded absolute path. This can cause problems for Mingw. "On Windows Make the perl dependency post-processor into just one line Make doesn't always treat multiline quoted strings as nicely as one would wish. Small typo OPENSSL_INIT_ONCE and OPENSSL_INIT_ONCE_STATIC_INIT are really CRYPTO_ONCE and CRYPTO_ONCE_STATIC_INIT. Clarify NOTES.WIN. Update and clarify ECDSA documentation. config: fix HP-UX PA-RISC detection. s390x assembly pack: 32-bit fixups. build.info/Makefile.in: Itanium fixups. Add some missing cleanup calls to de-init OBJ_cleanup() doesn't always get called from EVP_cleanup() so needs to be explicitly called in de-init. Also BIO_sock_cleanup() also needs to be called. "Fix freeze in config's interrupt trap with some shells With bash and zsh Change an function macro for ERR match the function it's used in. Complete incomplete makefile variable referenses A couple of '$(PERLASM_SCHEM' had sneaked in. "Add $(LIB_CFLAGS) for any build.info generator that uses $(CFLAGS) The reason to do so is that some of the generators detect PIC flags like -fPIC and -KPIC "Use single quotes rather than double quotes when needed When passing down values to Makefile.shared "Harmonize Unix Makefile template with Windows dito The variable SHARED_CFLAGS and SHARD_LDFLAGS were used in the Unix template because they normally contain options used when building ""shared"".  The Windows template "Fix memory leak in library deinit ENGINE_cleanup calls CRYPTO_free_ex_data and therefore "Workaround for false -Warray-bounds in Travis ccache + clang produces a false strcmp warning "When creating directory specs "Because bn_expand2 is declared non-static "Don't clobber the last error On Windows we call WSAGetLastError() to find out the last error that happened on a socket operation. We use this to find out whether we can retry the operation or not. You are supposed to call this immediately however in a couple of places we logged an error first. This can end up making other Windows system calls to get the thread local error state. Sometimes that can clobber the error code Make X509_SIG opaque. "Some sed implementations are not greedy enough Make update to catch function renames. Use unsigned int instead of just unsigned. Save leaf_node and node_offset as character array They are not numbers in the machine byte order. Add blake2 support. crypto/*/build.info: make it work on ARM platforms. crypto/*/build.info: SPARC-specific fixups. Configure: remove dependency on 'head'. Avoid getting unresolved referense to bn_expand2 in test/bntest.c Issue identified on Solaris by Erik Forsberg <erik@efca.com> "Call CONF_modules_free() before ENGINE_cleanup() in auto-deinit During auto de-init we were calling ENGINE_cleanup() Fix no-rmd160 classic Windows build no-ripemd was unified a while ago but the change was not done in mk1mf.pl. This commit changes the no-ripemd string to no-rmd160 which fixes the no-rmd160 classic build. "Don't build dynamic engines unless configured ""shared"" Experience has shown that dynamic engines with their own copy of libcrypto is problematic "Harmonise the two methods to generate dependency files One of them didn't clean away .d.tmp files properly. The other would overwrite the .d files unconditionally More tweaks to the installation instructions A few things were out of date and a few things were missing. Also some formatting updates. "Fix some assembler generating scripts for better unification Some of these scripts would recognise an output parameter if it looks like a file path.  That works both in both the classic and new build schemes.  Some fo these scripts would only recognise it if it's a basename (i.e. no directory component).  Those need to be corrected Add include directory options for assembler files that include from crypto/ A few were missed in the previous commit. Closes RT#4412 check reviewer --reviewer=emilia Use SSL_get_SSL_CTX instead of passing SSL_CTX to s_client.c:print_stuff "check reviewer --reviewer=emilia Pass entire CTLOG_STORE to SCT_print "check reviewer --reviewer=emilia Remove 'log' field from SCT and related accessors In order to still have access to an SCT's CTLOG when calling SCT_print Fix a memory leak in the afalg engine The AFALG engine created a global EVP_CIPHER instance but was not freeing it up when the engine was destroyed. "Harmonize the option processing in 'config' and 'config.com' The help text for -d in 'config' was aged Add cleaning targets to Configurations/windows-makefile.tmpl "Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms UEFI needs this too. Don't keep it only in the Windows/DOS ifdef block. This is a fixed version of what was originally commit 963bb62195 and subsequently reverted in commit 37b1f8bd62. Somewhere along the way Remove a missed item from the old thread API A line from cryptlib.h was missed during the old Thread API removal. This breaks no-deprecated builds. Mark SRP_VBASE_get_by_user() as deprecated The function SRP_VBASE_get_by_user() is declared as deprecated but the implementation was not. No need to call EVP_CIPHER_CTX_init after EVP_CIPHER_CTX_new The afalgtest was unnecessarily initing an EVP_CIPHER_CTX. It is not needed and is deprecated. "Pass down inclusion directories to source file generators The source file generators sometimes use $(CC) to post-process generated source Update .gitignore to ignore all cscope files Signed-off-by: Rich Salz <rsalz@akamai.com> "Travis - don't use ccache with cross compiles Although theoretically possible "Avoid negative array index in BIO_debug_callback() BIO_snprintf() can return -1 on truncation (and overflow as of commit 9cb177301fdab492e4cfef376b28339afe3ef663).  Though neither can realistically occur while printing a pointer and short fixed string into a buffer of length 256 "CT: check some GeneralizedTime return values Some of the ASN.1 routines for the GeneralizedTime type can return errors; check for these and do not continue past failure "When configured ""shared"" "Correct slight logic error in processing IF in build.info This corrects a fault where the inner IF in this example was still being acted upon: IF[0] ...whatever... IF[1] ...whatever more... ENDIF ENDIF With this change Move disabling of RC4 for DTLS to the cipher list. IDEA is not supported in TLS 1.2 This currently seems to be the only cipher we still support that should get disabled. Add ssl_get_client_min_max_version() function Adjust ssl_set_client_hello_version to get both the minimum and maximum and then make ssl_set_client_hello_version use the maximum version. "Fix ct_test to not assume it's in the source directory ct_test assumed it's run in the source directory and failed when built elsewhere.  It still defaults to that Removes SCT_LIST_set_source and SCT_LIST_set0_logs Both of these functions can easily be implemented by callers instead. "Treat boolean functions as booleans Use ""!x"" instead of ""x <= 0"" Extensive application of __owur to CT functions that return a boolean Also improves some documentation of those functions. "Makes SCT_LIST_set_source return the number of successes No longer terminates on first error "Fix ct_test to not assume it's in the source directory ct_test assumed it's run in the source directory and failed when built elsewhere.  It still defaults to that Update CHANGES and NEWS Update the CHANGES and NEWS files with information about the recently added AFALG engine and pipelining. "In build.info "Remove the old threading API All OpenSSL code has now been transferred to use the new threading API Remove use of the old CRYPTO_LOCK_X5O9_STORE The locking here is a bit strange and unclear. Rather than refactor anything and possibly break stuff I have just moved to using the new thread API following as closely as possible what was there previously. "Don't add afalg engine if configured ""no-engine"" Also "Check gcc version to see if it supports -MM and friends According to manuals found here: https://gcc.gnu.org/onlinedocs/ "Add extra include directory for includers of ppc_arch.h crypto/evp/e_aes.c and crypto/modes/gcm128.c include ppc_arch.h Don't run the TLSProxy based tests in native Windows There are issues binding listening ports.  This may be analyzed more thoroughly later on. "Unified - extract settings from util/pl/VC-32.pl and make the config settings This introduces the settings loutflag and aroutflag ec/asm/ecp_nistz256-sparcv9.pl: get corner logic right. RT#4284 "Unified - adapt the generation of whirlpool assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/whrlpool/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of sha assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/sha/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of rc4 assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/rc4/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of rc5 assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/rc5/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of ripemd assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/ripemd/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of md5 assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/md5/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of modes assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/modes/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of poly1305 assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/poly1305/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of des assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/des/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of ec assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/ec/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of camellia assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/camellia/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of cast assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/cast/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of chacha assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/chacha/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of cpuid "Unified - adapt the generation of aes assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/aes/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of blowfish assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/bf/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Always call ENGINE_cleanup() in de-init Even if we haven't loaded an engine Move chil engine to the new thread api Move the chil engine to use the new thread API. As I don't have access to the hardware I can't test this :-(. I think its ok... "Use correct function ID in error path This fixes ""make update""." "Ensure CRYPTO_mem_leaks is the last thing we do CRYPTO_mem_leaks de-inits the library "Fix memory leak in ssltest The new Rand usage of Thread API exposed a bug in ssltest. ssltest ""cheats"" and uses internal headers to directly call functions that normally you wouldn't be able to do. This means that auto-init doesn't happen Convert rand code to new threading API Replace the CRYPTO_LOCK_RAND and CRYPTO_LOCK_RAND2 locks with new thread API style locks. "Adapt unix Makefile template to 'no-makedepend' This change is a bit more complex "Adapt descrip.mms.tmpl to 'no-makedepend' VMS doesn't have ""makedepend"" anyway "Add the configure option 'no-makedepend' If no makedepend program or equaly capable compiler is present "Remove the transfer of lock hooks from bind_engine With the new threads API Engine API repair - memory management hooks The Engine API lost the setting of memory management hooks in bind_engine.  Here's putting that back. EX_DATA and ERR functions need the same treatment. "Redo the Unix source code generator For assembler Fix error in ssltest Compiling ssltest with some compilers using --strict-warnings results in complaints about an unused result. "Remove the -n tar flag from osx dist creation With the unified build scheme Include e_os.h from ec_lcl.h The EC code recently started using REF_PRINT_COUNT and REF_ASSERT_ISNT. Those are defined in e_os.h. Make DSA_SIG opaque. This adds a new accessor function DSA_SIG_get0. The customisation of DSA_SIG structure initialisation has been removed this means that the 'r' and 's' components are automatically allocated when DSA_SIG_new() is called. Update documentation. Tweak some more information in INSTALL The summary on how to add configs and how Makefile et al wasn't quite correct any more. "GH787: Fix ALPN * Perform ALPN after the SNI callback; the SSL_CTX may change due to that processing * Add flags to indicate that we actually sent ALPN "Add an SSL_has_pending() function This is similar to SSL_pending() but just returns a 1 if there is data pending in the internal OpenSSL buffers or 0 otherwise (as opposed to SSL_pending() which returns the number of bytes available). Unlike SSL_pending() this will work even if ""read_ahead"" is set (which is the case if you are using read pipelining Add an ability to set the SSL read buffer size This capability is required for read pipelining. We will only read in as many records as will fit in the read buffer (and the network can provide in one go). The bigger the buffer the more records we can process in parallel. "Add cipher query functions Add functions to determine authentication "GH815: The ChaCha20/Poly1305 codepoints are official CCA8 "GH787: Fix ALPN * Perform ALPN after the SNI callback; the SSL_CTX may change due to that processing * Add flags to indicate that we actually sent ALPN "Change the INSTALL documentation for unified builds Because of the unified scheme "Revert ""unified build scheme: Try to nudge users to try the ""unified"" build"" This reverts commit 242ffb05a2e4aa3fc7ffc131037e077b7e242189." Fix building without multiblock support Not all platforms support multiblock. Building without it fails prior to this fix. RT#4396 Don't free NCONF obtained values Bug reported by Michel Sales. Remove kinv/r fields from DSA structure. The kinv/r fields in the DSA structure are not used by OpenSSL internally and should not be used in general. Rename the numpipes argument to ssl3_enc/tls1_enc The numpipes argument to ssl3_enc/tls1_enc is actually the number of records passed in the array. To make this clearer rename the argument to |n_recs|. Rename a function Rename the have_whole_app_data_record_waiting() function to include the ssl3_record prefix...and make it a bit shorter. Refactor dasync cipher implementations to improve code reuse Move out most of the boiler plate code that is common between aes128-cbc and aes128-cbc-hmac-sha1 into helper functions to improve code reuse. Fix s_server/s_client handling of the split_send_frag argument Ensure that a value of 0 is correctly handled for the split_send_frag argument. "Remove the wrec record layer field We used to use the wrec field in the record layer for keeping track of the current record that we are writing out. As part of the pipelining changes this has been moved to stack allocated variables to do the same thing "Add documentation for new s_server/s_client options Document the new split_send_frag "Add documentation for SSL_has_pending() A previous commit added the SSL_has_pending() function which provides a method for knowing whether OpenSSL has buffered Add pipelining documentation Add some documentation for all of the SSL/SSL_CTX functions/ctrls for conrolling read and write pipelining. Fix erroneous fall thgrough in switch statement Fix an erroenous fall through when setting the max_pipelines value. "Ensure s_client and s_server work when read_ahead is set Previously s_client and s_server relied on using SSL_pending() which does not take into account read_ahead. For read pipelining to work "Add an SSL_has_pending() function This is similar to SSL_pending() but just returns a 1 if there is data pending in the internal OpenSSL buffers or 0 otherwise (as opposed to SSL_pending() which returns the number of bytes available). Unlike SSL_pending() this will work even if ""read_ahead"" is set (which is the case if you are using read pipelining Add an ability to set the SSL read buffer size This capability is required for read pipelining. We will only read in as many records as will fit in the read buffer (and the network can provide in one go). The bigger the buffer the more records we can process in parallel. "Lazily initialise the compression buffer With read pipelining we use multiple SSL3_RECORD structures for reading. There are SSL_MAX_PIPELINES (32) of them defined (typically not all of these would be used). Each one has a 16k compression buffer allocated! This results in a significant amount of memory being consumed which "Implement read pipeline support in libssl Read pipelining is controlled in a slightly different way than with write pipelining. While reading we are constrained by the number of records that the peer (and the network) can provide to us in one go. The more records we can get in one go the more opportunity we have to parallelise the processing. There are two parameters that affect this: * The number of pipelines that we are willing to process in one go. This is controlled by max_pipelines (as for write pipelining) * The size of our read buffer. A subsequent commit will provide an API for adjusting the size of the buffer. Another requirement for this to work is that ""read_ahead"" must be set. The read_ahead parameter will attempt to read as much data into our read buffer as the network can provide. Without this set Add pipeline support to s_server and s_client Add the options min_send_frag and max_pipelines to s_server and s_client in order to control pipelining capabilities. This will only have an effect if a pipeline capable cipher is used (such as the one provided by the dasync engine). "Implement write pipeline support in libssl Use the new pipeline cipher capability to encrypt multiple records being written out all in one go. Two new SSL/SSL_CTX parameters can be used to control how this works: max_pipelines and split_send_fragment. max_pipelines defines the maximum number of pipelines that can ever be used in one go for a single connection. It must always be less than or equal to SSL_MAX_PIPELINES (currently defined to be 32). By default only one pipeline will be used (i.e. normal non-parallel operation). split_send_fragment defines how data is split up into pipelines. The number of pipelines used will be determined by the amount of data provided to the SSL_write call divided by split_send_fragment. For example if split_send_fragment is set to 2000 and max_pipelines is 4 then: SSL_write called with 0-2000 bytes == 1 pipeline used SSL_write called with 2001-4000 bytes == 2 pipelines used SSL_write called with 4001-6000 bytes == 3 pipelines used SSL_write_called with 6001+ bytes == 4 pipelines used split_send_fragment must always be less than or equal to max_send_fragment. By default it is set to be equal to max_send_fragment. This will mean that the same number of records will always be created as would have been created in the non-parallel case "Update the dasync engine to add a pipeline cipher Implement aes128-cbc as a pipeline capable cipher in the dasync engine. As dasync is just a dummy engine "Add defines for pipeline capable ciphers Add a flag to indicate that a cipher is capable of performing ""pipelining"" "Trim Travis config part 3 - Only build & test two configurations. Make all the other build variants buildonly on gcc (clang on osx). - Don't build with default clang at all on linux. - Only use gcc-5 and clang-3.6 for the sanitizer builds. Re-running e.g. CONFIG_OPTS=""shared"" with them seems redundant." "Revert ""Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms"" This reverts commit 963bb62195109fb863dc4d88c7470ce7f9af25ac." "Elide OPENSSL_INIT_set_config_filename() for no-stdio build Strictly speaking Move declaration of X509_aux_print() out of #ifndef OPENSSL_NO_STDIO This isn't a file access function; it's still present. Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms UEFI needs this too. Don't keep it only in the Windows/DOS ifdef block. ISSUE 43: Add BIO_sock_shutdown This replaces SHUTDOWN/SHUTDOWN2 with BIO_closesocket. "Use s->session->peer instead of calling SSL_get_peer_certificate(s) Avoids modifying certificate reference count "CT code now calls X509_free() after calling SSL_get_peer_certificate() Without this GH768: Minor grammar nits in CRYPTO_get_ex_new_index.pod Signed-off-by: Rich Salz <rsalz@openssl.org> "Unified - adapt the generation of padlock assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in engines/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - adapt the generation of bignum assembler to use GENERATE This gets rid of the BEGINRAW..ENDRAW sections in crypto/bn/build.info. This also moves the assembler generating perl scripts to take the output file name as last command line argument "Unified - Add the build.info command GENERATE Add a function to detect if we have async or not Add the ASYNC_is_capable() function and use it in speed. Remove use of CRYPTO_LOCK_INIT in init code Swap the use of CRYPTO_LOCK_INIT in the init code to use the new threading API mechanism for locking. Fix the error with RSA and the daysnc engine in async mode. Move RSA struct in the job local struct. The change is applied also to other crypto operations (e.g. DSA) to make things consistent. "Add support for async jobs in OpenSSL speed Summary of the changes: * Move the calls to the crypto operations inside wrapper functions. This is required because ASYNC_start_job takes a function as an argument. * Add new function run_benchmark() that manages the jobs for all the operations. In the POSIX case it uses a select() to receive the events from the engine and resume the jobs that are paused "Rework the default cipherlist. - Always prefer forward-secure handshakes. - Consistently order ECDSA above RSA. - Next Makefile.in: populate [PLIB_]LDFLAG even with $target{} settings. RT#4373 "bn/asm/x86[_64]-mont*.pl: complement alloca with page-walking. Some OSes "Restore some mingw builds ""no-pic"" builds have in fact been green (and reasonably fast) Fix minor errors in the afalg test The new afalg test should have a copyright date of 2016. Also an incorrect buffer was being sent to EVP_CipherFinal_ex when decrypting. Misc afalg build fixes Misc afalg build fixes as suggested by Richard Levitte for the latest Configure changes. Rework based on feedback: 1. Cleaned up eventfd handling 2. Reworked socket setup code to allow other algorithms to be added in future 3. Fixed compile errors for static build 4. Added error to error stack in all cases of ALG_PERR/ALG_ERR 5. Called afalg_aes_128_cbc() from bind() to avoid race conditions 6. Used MAX_INFLIGHT define in io_getevents system call 7. Coding style fixes "Trim Travis config part 2 - Remove Win builds (temporarily). They're slow "Trim the Travis config - Remove no-asm. We've got to cut something "No -fno-common for Darwin When object files with common block symbols are added to static libraries on Darwin use saner default parameters for scrypt Thanks to Colin Percival for reporting this issue. "Don't mark the eNULL ciphers as non-default. They're not part of ALL "Curve25519: fix const-initialization Clang is permissive of this "Add ASN.1 ADB callback. Add support for application supplied any defined by callback. An application can change the selector value if it wishes. This is mainly intended for values which are only known at runtime Remove redundant semi-colons from apps/Makefile.in "If a CT log entry in CTLOG_FILE is invalid "Change default CT log list filename to ""ct_log_list.cnf""" "Adds CT validation to SSL connections Disabled by default "Changes to DEFAULT curves Change the ECC default curve list to be this "Curve25519: avoid undefined behaviour Appease the sanitizer: avoid left shifts of negative values. This could've been done entirely with casts to uint and back "Don't build RC4 ciphersuites into libssl by default RC4 based ciphersuites in libssl have been disabled by default. They can be added back by building OpenSSL with the ""enable-weak-ssl-ciphers"" Configure option at compile time." "Restore the zlib / zlib-dynamic logic The proper logic is that both zlib and zlib-dynamic are disabled by default and that enabling zlib-dynamic would enable zlib.  Somewhere along the way Sanity check PVK file fields. PVK files with abnormally large length or salt fields can cause an integer overflow which can result in an OOB read and heap corruption. However this is an rarely used format and private key files do not normally come from untrusted sources the security implications not significant. Fix by limiting PVK length field to 100K and salt to 10K: these should be more than enough to cover any files encountered in practice. Issue reported by Guido Vranken. GH355: Implement HKDF This patch implements the HMAC-based Extract-and-Expand Key Derivation Function (HKDF) as defined in RFC 5869. It is required to implement the QUIC and TLS 1.3 protocols (among others). Signed-off-by: Rich Salz <rsalz@openssl.org> Remove overzealous echoing This construct in a Makefile is a bit overzealous: @echo FOO @FOO Cleaned up. "Clean up curve25519 build - Remove OPENSSL_X25519_X86_64 which never worked "Refactor ClientHello extension parsing 1) Simplify code with better PACKET methods. 2) Make broken SNI parsing explicit. SNI was intended to be extensible to new name types but RFC 4366 defined the syntax inextensibly "Add string ctrl operations to TLS1 PRF Use utility functions for HMAC and CMAC. Handle KDF internally. Handle KDF in ECDH_compute_key instead of requiring each implementation support it. This modifies the compute_key method: now it allocates and populates a buffer containing the shared secret. "Don't copy from %target to %config so much "Configure - Get rid of the special thread_cflag "Configure - get rid of the special debug_ and release_ settings Instead Minimize copied config settings $target{lflags} and $target{plib_flag} were copied to %config for no good reason. "Configure - move the addition of the zlib / libz lib to configs Configure had the Unix centric addition of -lz when linking with zlib is enabled "Configure - Rename BASE to DEFAULTS and add a few inheritable BASEs These BASE templates are intended to hold values that are common for all configuration variants for whole families of configurations. So far "Configure - Allow CODErefs and ARRAYrefs in configuration setting arrays This provides for more powerful lazy evaluation and buildup of the setting contents.  For example Ensure Async is deinited properly The global thread local keys were not being deinited properly in async. Convert ASYNC code to use new Thread API The async code uses thread local variables. We should convert to using the new Thread API for doing this. Provide getters for default_passwd_cb and userdata This patch provides getters for default_passwd_cb and userdata for SSL and SSL_CTX. The getter functions are required to port Python's ssl module to OpenSSL 1.1.0. "Add a shared_target to the VC-common config This has no real meaning "Configure - make the use of environment variables for overrides consistent We allow some commands to be overriden "poly1305/asm/poly1305-*.pl: flip horizontal add and reduction. Formally only 32-bit AVX2 code path needs this "Consistently use arm_arch.h constants in armcap assembly code. Most of the assembly uses constants from arm_arch.h Replace overrides. Instead of overriding a default operation move default operation to a separate function which is then explicitly included in any EC_METHOD that uses it. "CT policy validation Specifies a callback that will Fix -pkeyopt and fix error check. "RT4347: Fix GCC unused-value warnings with HOST_c2l() The HOST_c2l() macro assigns the value to the specified variable "Verify SCT signatures Tests included in future commit bn/asm/x86_64-mont5.pl: unify gather procedure in hardly used path and reorganize/harmonize post-conditions. Additional hardening following on from CVE-2016-0702 "crypto/bn/x86_64-mont5.pl: constant-time gather procedure. At the same time remove miniscule bias in final subtraction. Performance penalty varies from platform to platform "bn/bn_exp.c: constant-time MOD_EXP_CTIME_COPY_FROM_PREBUF. Performance penalty varies from platform to platform GH758: e_dasync_err.h: honor no-filenames option Signed-off-by: Rich Salz <rsalz@openssl.org> "Fix BN_hex2bn/BN_dec2bn NULL ptr/heap corruption In the BN_hex2bn function the number of hex digits is calculated using an int value |i|. Later |bn_expand| is called with a value of |i * 4|. For large values of |i| this can result in |bn_expand| not allocating any memory because |i * 4| is negative. This leaves ret->d as NULL leading to a subsequent NULL ptr deref. For very large values of |i| Fix use before init warnings in asynctest If the tests fail early before an ASYNC_WAIT_CTX is created then there can be a use before init problem in asynctest. "Clarify ASYNC_WAIT_CTX_clear_fd() docs Clarify that the ""cleanup"" routing does not get called if you invoke ASYNC_WAIT_CTX_clear_fd() directly." Refactor the async wait fd logic Implementation experience has shown that the original plan for async wait fds was too simplistic. Originally the async logic created a pipe internally and user/engine code could then get access to it via API calls. It is more flexible if the engine is able to create its own fd and provide it to the async code. Another issue is that there can be a lot of churn in the fd value within the context of (say) a single SSL connection leading to continually adding and removing fds from (say) epoll. It is better if we can provide some stability of the fd value across a whole SSL connection. This is problematic because an engine has no concept of an SSL connection. This commit refactors things to introduce an ASYNC_WAIT_CTX which acts as a proxy for an SSL connection down at the engine layer. Workaround for VisualStudio 2015 bug VisualStudio 2015 has a bug where an internal compiler error was occurring. By reordering the DEFINE_STACK_OF declarations for SSL_CIPHER and SSL_COMP until after the ssl3.h include everything seems ok again. Remove unused code. "Initial adaptations for Curve25519 code. Fix ""mixed declarations and code"" warnings. Use OpenSSL headers." TLS support for X25519 Add X25519 to TLS supported curve list. Reject attempts to configure keys which cannot be used for signing. Add no signing flag. Add a flag to EC_METHOD for curves which do not support signing. New function EC_KEY_can_sign() returns 1 is key can be used for signing. Return an explicit error is an attempt is made to sign with no signing curves. Add new EC_METHOD for X25519. Add group_order_bits to EC_METHOD. "Add custom_data field for EC_POINT Extract compression form in EC_KEY_oct2key(). Extract compression form in EC_KEY_oct2key() instead of manually in the ASN.1 code. For custom curves do not assume the initial octet is the compression form: it isn't for X25519 et al. Extended EC_METHOD customisation support. Add support for optional overrides of various private key operations in EC_METHOD. Fix mk1mf build Removing certs broke the mk1mf build. VMS - don't exit out of a MMS recipe Exiting out of a recipe more than necessary leaves an ugly message. "RT4354: Add some cross-refs Stack Overflow has a number of questions related to mutual authentication "ct_test.c doesn't need to include from source top modes/asm/ghash-x86_64.pl: refine GNU assembler version detection. Even though AVX support was added in GAS 2.19 vpclmulqdq was apparently added in 2.20. "RT2275: use BIO_sock_nbio() Now that BIO_sock_nbio is available "FreeBSD Drop support for printing SSLv2 ciphers names. Update and clarify EC_POINT documentation. Reformat EC_POINT_new.pod and add parentheses to function names. Clarify the octet form. Add documentation for EC_POINT_oct2buf(). Remove Ubsec engine The ubsec engine is now considered obsolete and therefore has been removed. "Revert ""EC_KEY_priv2buf (): check parameter sanity"" This reverts commit acae59bb29ddc769743ab4a8ae373b5ff2f42b57." Don't build sanitizer builds with --debug They're too slow. "Remove comments saying you must do 'make -f Makefile.in TABLE' Since the configs were remade into hash tables "Check method before access and release ctx in error paths - In error paths "RT4335: Fix UEFI build of OBJ_NAME_new_index() We are using strcmp() as the cmp_func "Fix a mkdef.pl warning mkdef.pl was issuing the following error: Use of uninitialized value within %tag in numeric eq (==) at util/mkdef.pl line 560 Unified on VMS - add %disabled in vmsconfig.pm (util/dofile.pl demands it) "Configure - neater looking add() and add_before() They now default to "" "" as separator "Fix memory issues in BIO_*printf functions The internal |fmtstr| function used in processing a ""%s"" format string in the BIO_*printf functions could overflow while calculating the length of a string and cause an OOB read when printing very long strings. Additionally the internal |doapr_outch| function can attempt to write to an OOB memory location (at an offset from the NULL pointer) in the event of a memory allocation failure. In 1.0.2 and below this could be caused where the size of a buffer to be allocated is greater than INT_MAX. E.g. this could be in processing a very long ""%s"" format string. Memory leaks can also occur. These issues will only occur on certain platforms where sizeof(size_t) > sizeof(int). E.g. many 64 bit systems. The first issue may mask the second issue dependent on compiler behaviour. These problems could enable attacks where large amounts of untrusted data is passed to the BIO_*printf functions. If applications use these functions in this way then they could be vulnerable. OpenSSL itself uses these functions when printing out human-readable dumps of ASN.1 data. Therefore applications that print this data could be vulnerable if the data is from untrusted sources. OpenSSL command line applications could also be vulnerable where they print out ASN.1 data "GH715: ENGINE_finish can take NULL Simplifies calling code.  Also fixed up any !ptr tests that were nearby Add more CT utility routines to be used as part of larger patch. "GH463: Fix OPENSSL_NO_OCSP build Fixes github issue 463.  Building the app without OPENSSL_NO_SOCK isn't supported "CVE-2016-0798: avoid memory leak in SRP The SRP user database lookup method SRP_VBASE_get_by_user had confusing memory management semantics; the returned pointer was sometimes newly allocated "Make it possible to build even if dependency files can't be generated If the local system doesn't have GNU C or clang GH480: Don't break statements with CPP stuff. This is also RT 4137 Signed-off-by: Rich Salz <rsalz@akamai.com> "Fix typo Remove unused parameter in ssl_set_masks(). The ssl_set_masks() function no longer depends on the cipher. This also means there is no need to set the masks for each cipher in ssl3_choose_cipher. ec/asm/ecp_nistz256-x86_64.pl: get corner case logic right. RT#4284 test/recipes/80-test_ca.t: remove_tree->rmtree to make it work with Perl 5.10. "RT4339: Fix handling of <internal/bn_conf.h> The entire contents of <internal/bn_conf.h> are unwanted in the UEFI build because we have to do it differently there. To support building for both 32-bit and 64-bit platforms without re-running the OpenSSL Configure script GH678: Add a few more zalloc Remove some duplicated NULL/zero init. Signed-off-by: Rich Salz <rsalz@openssl.org> "Partial revert of 1288f26 and fix for no-async The commit 1288f26 says that it fixes no-async "RT4309: Define PRIu64 for UEFI build Provide an appropriate definition of PRIu64 for the EDK2 build RT4320/GH705: Fix PEM parsing bug. Also removing confusing pointer-alias variable. "Expose %disables to the perl fragments in build.info files. This way "Fix DSO name on HP/UX If dlfcn is used "Don't include all symbols from static libraries when building a DSO When building a DSO "Get back ""ssl2"" as a deprecated disablable option Preserved for now for those who have scripts with the option ""no-ssl2"".  We warn that it's deprecated "Introduce the ""pic"" / ""no-pic"" config option Building shared libraries or not is not the same as building position independent code or not.  It's true that if you don't build PIC "Use $disabled{""dynamic-engine""} internally We were kinda sorta using a mix of $disabled{""static-engine"" and $disabled{""dynamic-engine""} in Configure.  Let's avoid confusion "Avoid GNU make re-exec when adding dependencies to Makefile GNU make will re-exec if (it thinks that) the Makefile has changed. Just having the target Makefile seems to make it think it has Remove OBJ_EXT and friends. "Missing extension on dependency "Run the TLSProxy based tests as long as dynamic engines are built. They depend on this feature because they use the engine ossltest "Build dynamic engines even if configured ""no-shared"" Until now "Always build library object files with shared library cflags This takes us away from the idea that we know exactly how our static libraries are going to get used.  Instead argv was set but unused Also gives an error message when you gave it a parameter it didn't expect. "apps_extra_src changed name to apps_aux_src Fix Configurations/unix-Makefile.tmpl It was turning off output again in two place where it should have turned it on. Remove DSA negative integer workaround code. Remove DSA private key code which tolerates broken implementations which use negative integers. Remove broken DSA private key workarounds. Remove old code that handled various invalid DSA formats in ancient software. This also fixes a double free bug when parsing malformed DSA private keys. Thanks to Adam Langley (Google/BoringSSL) for discovering this bug using libFuzzer. CVE-2016-0705 "TLS: reject duplicate extensions Adapted from BoringSSL. Added a test. The extension parsing code is already attempting to already handle this for some individual extensions "getaddrinfo: zero the hints structure This silences the memory sanitizer. All fields were already correctly initialized but the struct padding wasn't "Big rename fest of MingW shared libraries So far "Try removing installation directories after having uninstalled files Of course "Small rename fest in unified "Big rename fest of engine DSO names "Simplify the generation of ld scripts for Linux and Solaris Because we know for certain that the link_shlib targets are used exclusively for shared libraries (libcrypto and libssl) and that they must have an associated .num file "Big rename fest in makefile.shared: link_a / link_o -> link_shlib / link_dso Originally Centralise the shared library / dso name info in unix-Makefile.tmpl "Let Configure figure out the diverse shared library and DSO extensions Then it can pass around the information where it belongs.  The Makefile templates pick it up along with other target data Unified - don't install the ossltest engine This is done with a simple file name comparison.  We could think of something more elegant in the future. "Rethink the uplink / applink story Adding uplink and applink to some builds was done by ""magic"" "VMS: rather use a quick file comparison than DIFF VMS DIFF tries to calculate all the differences VMS: produce dependency files just like you produce object files We need to do the same dance as when object files are created. "Fix casing on VMS DCL may be in extended parsing style "Don't use config.timestamp "Automatic 'make depend' for the unified build scheme This isn't the fully featured combination of compiler generated dependency files and Makefile include directives "Fix uninstall_sw for the unixmake scheme The uninstall_sw target tried to 'make uninstall' in all subdirs. Change it to only go into $(INSTALL_SUBS) "Remove all special make depend flags "Don't treat .d (depend) files separately from object files .d (.MMS in the VMS world) files with just dependencies are built from exactly the same conditions as the object files.  Therefore Fix the makedepend constructor in unix-Makefile.tmpl "Fix {TLS "Remove outdated DEBUG flags. Add -DBIO_DEBUG to --strict-warnings. Remove comments about outdated debugging ifdef guards. Remove md_rand ifdef guarding an assert; it doesn't seem used. Remove the conf guards in conf_api since we use OPENSSL_assert Fix memory leaks in tls_decrypt_ticket Certain code paths in tls_decrypt_ticket could return early without first freeing the HMAC_CTX or the EVP_CIPHER_CTX. "GH706: Use NULL for pointer compare. As handshake_func is a function pointer Add -lresolv to the Solaris ex_libs The reason is that we use hstrerror() and other resolver functions. Reporter: Erik Forsberg <erik@efca.com> "Get conditional priorities right ""or"" has lower priority than ""||"" and works better to have Perl less confused." Be more verbose when debugging is on It's near impossible to figure out what goes wrong with the execution of sub-commands otherwise. "RT3628: Allow filenames to be eliminated from compiled library Although I explicitly don't care about the tinfoil-hat reason given in the initial opening of RT#3628 "Fix check of -DOPENSSL_USE_APPLINK in $config{cflags} The previous fix wasn't right. Also "RT4318: Fix OSSL_SSIZE_MAX for UEFI build Commit e634b448c (""Defines OSSL_SSIZE_MAX"") introduced a definition of OSSL_SSIZE_MAX which broke the UEFI build. Fix that by making UEFI take the same definition as Ultrix (ssize_t == int). Signed-off-by: Rich Salz <rsalz@openssl.org>" RT4315: Fix UEFI build in crypto/init.c We don't have atexit() in the EDK2 environment. Firmware never exits. Signed-off-by: Rich Salz <rsalz@openssl.org> "RT4313: Fix build for !IMPLEMENTED code path in CRYPTO_secure_free() Commit 05c7b1631 (""Implement the use of heap manipulator implementions"") added 'file' and 'line' arguments to CRYPTO_free() and friends Fixup secmemtest for the change of CRYPTO_free() and friends Switching it to use OPENSSL_free() et al when appropriate. "Implement the use of heap manipulator implementions - Make use of the functions given through CRYPTO_set_mem_functions(). - CRYPTO_free() OPENSSL_init_ssl.pod: fix minor typo "On solaris "Check for OPENSSL_USE_APPLINK in $config{cflags} as well Macro definitions ""should"" be found in $config{defines} Don't check for gcc or clang on VMS This check is meaningless on VMS and only produce an error because the underlying shell (DCL) doesn't understand sh syntax such as '2>&1'. "Lowercase configuration arguments on VMS Depending on user preferences "Fix Solaris link_a and link_o A long time ago Add explanation and warning to TLS id table. Fix use of add() and add_before() in Configurations/*.conf These two functions take a separator to concatenat the strings with as first argument. Fix build-break Combination of heartbeats and unit-tests. "MANSUFFIX should be left empty That variable isn't for us "Misc fixes in util/mk1mf.pl mk1mf was wondering about the options no-heartbeats and no-crypto-mdebug-backtrace Don't call cpuid in test; done as init. chacha/asm/chacha*: ensure that zero length is handled (without crash). RT#4305 chacha/asm/chacha-x86[_64].pl: fix typos and logical errors. Thanks to: David Benjamin of Chromuim. RT#4305 "Don't use libcrypto private headers with mkdef.pl Three header files from crypto/include/internal were used by util/mkdef.pl.  This should never be needed.  Some test program used these "Make sure to use unsigned char for is*() functions On some platforms "Prefer IO::Socket::INET6 over IO::Socket::IP While IO::Socket::IP is a core perl module (since Perl v5.19.8 crypto/poly1305: add floating-point reference implementation. "Pass $(CC) to perlasm scripts via the environment It seems that on some platforms Reformat warn variables for easier editing. Configurations: engage PPC ChaCha20 and Poly1305 modules. PPC assembly pack: add ChaCha20 and Poly1305 modules. async_win.c: remove unused variable Silencing this: crypto/async/arch/async_win.c: In function 'async_fibre_init_dispatcher': crypto/async/arch/async_win.c:112:12: warning: unused variable 'dispatcher' [-Wunused-variable] LPVOID dispatcher; ^ Signed-off-by: Rich Salz <rsalz@openssl.org> "GH650: Minor tidying around the ocsp app The ocsp utility is something of a jack-of-all-trades; most anything related to the OCSP can be done with it.  In particular Free and zero DH/ECDH temporary key after use. PR#4303 "Rethink the method to place user cflags last The previous method had some unfortunate consequences with --strict-warnings.  To counteract "Remove 00-test_checkexes.t "In templates C64x+ assembly pack: add ChaCha20 and Poly1305 modules. Configurations: engage ARM ChaCha20 and Poly1305 modules. ARM assembly pack: add ChaCha20 and Poly1305 modules. "Defines OSSL_SSIZE_MAX Removes SSIZE_MAX definition from bss_bio.c and changes that file to use OSSL_SSIZE_MAX. No need to account for OPENSSL_SYS_VXWORKS "We need the linked utils after a full build. We really needs a better util/shlib_wrap.sh "Unified build - fix make depend There was a catch 22 "evp/e_des[3].c: address compiler warnings "modes/ctr128.c: pay attention to ecount_buf alignment in CRYPTO_ctr128_encrypt. It's never problem if CRYPTO_ctr128_encrypt is called from EVP "Rename INSTALL_PREFIX to DESTDIR ".travis.yml: exclude gcc from MacOS X CI builds. Contemporary Xcode gcc is a front-end to clang Put user flags last for priority. "Now that we have good verbosity "Let all TLSProxy based tests display debug text conditionally If the environment variable HARNESS_ACTIVE isn't defined or HARNESS_VERBOSE is defined "Rethink logging of test recipes The logging that was performed in OpenSSL::Test was initially set up as a means not to let messages that test programs write to STDERR get displayed when a test isn't running in verbose mode.  However "Better workaround for VMS getnameinfo() bug The actual bug with current getnameinfo() on VMS is not that it puts gibberish in the service buffer "Adjust transfer::Text::Template.pm for alternate directory name On VMS "RT 3854: Update apps/req Change the default keysize to 2048 bits Fix the enable-ssl-trace config option The recent removal of static ECDH broke the enable-ssl-trace compilation. "Generate progs.h from a bunch of files instead of internal knowledge apps/progs.pl counted on the caller to provide the exact command files.  The unified build doesn't have that knowledge Typo: only return error if unrecognise bag type. "Perl's chop / chomp considered bad Remove static ECDH support. Remove support for static ECDH ciphersuites. They require ECDH keys in certificates and don't support forward secrecy. "util/mk1mf.pl: use LINK_CMD instead of LINK variable. Trouble is that LINK variable assignment in make-file interferes with LINK environment variable poly1305/asm/poly1305-x86_64.pl: fix mingw64 build. Add the generate mechanism from unixmake to unix-Makefile.tmpl Don't check self signed certificate signature security. Fix MacOS/X build warnings Commit 7823d792d0cad3b44ad5389a8d3381becefe7f44 added DEFINE_LHASH_OF to a C source file.  DEFINE_LHASH_OF() and DEFINE_STACK_OF() must be used only in header files to avoid clang warnings for unused static-inline functions. "Remove TLS heartbeat "Move to REF_DEBUG RT3495: Add a hash for faster dup detection. Updated for 1.1 by Rich Salz "Fix GH 327. Valgrind complains about using unitialized memory.  So call OPENSSL_zalloc "Make shared library targets more consistent On Windows POSIX layers Fix engine key support in cms and req utilities. PR#4246 and PR#4266 Test for and use AES CSP for RSA if present. Some keys are attached to the full RSA CSP which doesn't support SHA2 algorithms: uses the AES CSP if present. "Unified build: Keep track of generated header files If someone runs a mixed unixmake / unified environment (the unified build tree would obviously be out of the source tree) "Remove the ""make depend"" message It's not necessary for a pristine source Missing header include. "Add inclusion directory crypto/include for BN compilations Some files in crypto/bn depend on internal/bn_conf.h "Rework BIO_ADDRINFO_protocol() to return correct values As noted already "Fix errstr error code parsing Error codes are printed in hex Print out bad content octets. If asn1parse doesn't like a structure print out the content octets for diagnostic purposes. "After auto init "After renaming init BIO_PAIR_DEBUG did nothing; remove it. "Use the protocol we know rather than BIO_ADDRINFO_protocol(res) Because some platforms won't will in any value in ai_protocol "Don't assert protocol equality It seems that some platforms' getaddrinfo don't fill in the ai_protocol field properly.  On those Add CHACHA20 alias for ciphers. Update ciphers documentation as well (based on -04 rev of ID). Signed-off-by: Kurt Roeckx <kurt@roeckx.be> "Produce buildinf.h on Windows the same way as on Unix Because ENGINESDIR and OPENSSLDIR typically contains backslashes "Make it possible to get ENGINESDIR info from OpenSSL_versions Have apps/openssl display the result along with OPENSSLDIR As part of this Attempt to log an error if init failed If init failed we'd like to set an error code to indicate that. But if init failed then when the error system tries to load its strings its going to fail again. We could get into an infinite loop. Therefore we just set a single error the first time around. After that no error is set. The new init functions can now fail so shouldn't be void The new init functions can fail if the library has already been stopped. We should be able to indicate failure with a 0 return value. "Variable was declared static when it shouldn't be The local variable tmp was declared static when it shouldn't be. This is in the no-threads implementation "Deprecate the -issuer_checks debugging option This was a developer debugging feature and was never a useful public interface. Added all missing X509 error codes to the verify(1) manpage "Rename INIT funtions No dynamic-init fix; merge goof. "unified build scheme: rewrite INSTALL.VMS There is more to be added "clean away old VMS cruft The old building scripts get removed "unified build scheme: add a ""unified"" template for VMS descrip.mms As part of this "unified build scheme: Try to nudge users to try the ""unified"" build This commit SHALL be reverted before final release." "unified build scheme: add the tweaks to build on Cygwin & Mingw Cygwin and Mingw name their libraries a bit differently from the rest of the POSIXly universe "unified build scheme: add a ""unified"" template for Unix Makefile This also adds all the raw sections needed for some files." "unified build scheme: give util/dofile.pl the possibility to output selectively Under certain conditions "Configure et al: treat C defines separately With some compilers "Can't re-init after stop. Remoce DYANMIC once-init stuff. After the library is stopped If we've not been inited don't deinit If you call an explicit deinit when we've not been inited then a seg fault can occur. We should check that we've been inited before attempting to deinit. Configurations: engage x86[_64] ChaCha20 and Poly1305 modules. x86[_64] assembly pack: add ChaCha20 and Poly1305 modules. "VMS getnameinfo() seems to have a bug with returned service string It seems like it gives back gibberish.  If we asked for a numeric service "Use NON_EMPTY_TRANSLATION_UNIT Make some global variables static Make some global variables that are only ever accessed from one file static. "NULL the thread_local_inits_st pointer after use After the final use of the thread_local_inits_st we should ensure it is set to NULL Stop library before checking for mem leaks With the new init framework resources aren't released until the process exits. This means checking for mem leaks before that point finds a lot of things! We should explicitly close down the library if we're checking for mem leaks. Configurations: engage s390x ChaCha20 and Poly1305 modules. s390x assembly pack: add ChaCha20 and Poly1305 modules. Correct copyright date for internal header file The newly added internal async.h header file had last years date in it. Provide documentation for auto-init/auto-deinit Provide some man pages for auto-init/deinit. Also update the INSTALL documentation for information on the new Configure options implemented as part of this. Provide a thread stop API Add the OPENSSL_INIT_thread_stop() function. Get the apps to use auto-init/de-init Clean up the apps so that we make use of the new auto-init/de-init feature. Auto init/deinit libcrypto This builds on the previous commit to auto initialise/deinitialise libcrypto. "Provide framework for auto initialise/deinitialise of the library This commit provides the basis and core code for an auto initialisation and deinitialisation framework for libcrypto and libssl. The intention is to remove the need (in many circumstances) to call explicit initialise and deinitialise functions. Explicit initialisation will still be an option "Use rel2abs() on VMS "unified build scheme: adjust test framework for out of source build tree To be able to run tests when we've built in a directory other than the source tree "unified build scheme: adjust some scripts util/mkdef.pl and Makefile.shared needs to know about the source and the build directories. Additionally "unified build scheme: add a design document This documents describes the three steps from build.info files via the %unified_info database to the build-file templates "unified build scheme: add and document the ""unified"" driving engine common.tmpl will be used together with the template build file "Suppress DANE TLSA reflection when verification fails As documented both SSL_get0_dane_authority() and SSL_get0_dane_tlsa() are expected to return a negative match depth and nothing else when verification fails.  However "Following the PKCS#12 update Remove ancient compatibility defines. pkcs12.h header reorganisation. Use accessors in pkcs12 app. "New PKCS12 accessors Deprecate undocumented SSL_cache_hit(). Deprecate undocumented SSL_cache_hit(). Make SSL_session_reused() into a real function. "Use File::Path::rmtree rather than File::Path::remove_tree Just like File::Path::make_path "Use File::Path::mkpath rather than File::Path::make_path File::Path::make_path didn't show up before File::Path 2.06 / perl v5.10.1. Because we're trying to stay compatible with perl v5.10.0 and up Fix engine key support in utilities. bio/b_sock.c: cleanup obsolete stuff. GH322 revisited: remove unused function. "Make TESTS= work with ""nmake -f ms/ntdll.mak tests"" This works on Linux with Make already "Handle SSL_shutdown while in init more appropriately #2 Previous commit 7bb196a71 attempted to ""fix"" a problem with the way SSL_shutdown() behaved whilst in mid-handshake. The original behaviour had SSL_shutdown() return immediately having taken no action if called mid- handshake with a return value of 1 (meaning everything was shutdown successfully). In fact the shutdown has not been successful. Commit 7bb196a71 changed that to send a close_notify anyway and then return. This seems to be causing some problems for some applications so perhaps a better (much simpler) approach is revert to the previous behaviour (no attempt at a shutdown) "more doc fixes dgst: using digest instead of specific digest commands the digest list specified in man dgst may be inaccurate Stack documentation. "Enhance and clear the support of linker flags Some time ago RT4194: Restore old engine parameter parsing. Allow initial engine names as first parameters before flags. Also add engine param to help summary Wrote manpage "Don't include sys/socket.h It's not available on all OSs Update DTLSv1_listen documentation Make it clear that if we are unable to get hold of the peer address then *peer is cleared and the family set to AF_UNSPEC. Add tests for DTLSv1_listen Adds a set of tests for the newly rewritten DTLSv1_listen function. The test pokes various packets at the function and then checks the return value and the data written out to ensure it is what we would have expected. Provide partial support for fragmented DTLS ClientHellos The recently rewriten DTLSv1_listen code does not support fragmented ClientHello messages because fragment reassembly requires server state which is against the whole point of DTLSv1_listen. This change adds some partial support for fragmented ClientHellos. It requires that the cookie must be within the initial fragment. That way any non-initial ClientHello fragments can be dropped and fragment reassembly is not required. "Add a BIO_ADDR_clear function Adds a new function BIO_ADDR_clear to reset a BIO_ADDR back to an unitialised state GH601: Various spelling fixes. Signed-off-by: Rich Salz <rsalz@openssl.org> "Make DTLSv1_listen a first class function and change its type The DTLSv1_listen function exposed details of the underlying BIO abstraction and did not properly allow for IPv6. This commit changes the ""peer"" argument to be a BIO_ADDR and makes it a first class function (rather than a ctrl) to ensure proper type checking." RT4292: Remove ===== line Also remove two mistakenly checked-in files. Long overdue cleanup of X509 policy tree verification Replace all magic numbers with #defined constants except in boolean functions that return 0 for failure and 1 for success.  Avoid a couple memory leaks in error recovery code paths.  Code style improvements. If memory debugging enabled return error on leaks. "Don't export local symbols on Solaris Following on from earlier commits to prevent local symbols from being exported in the shared libraries on Linux Add EC_KEY_priv2buf() Add new function EC_KEY_priv2buf() to allocated and encode private key octet in one call. Update and simplify ASN.1 and print routines. "Allocate ASN1_bn_print buffer internally. Don't require an application to work out the appropriate buffer size for ASN1_bn_print() update EC ASN1 and print routines Update EC ASN.1 and print routines to use EC_KEY_oct2priv and EC_KEY_priv2oct. Add EC_KEY_oct2priv and EC_KEY_priv2oct New functions EC_KEY_oct2priv and EC_KEY_priv2oct. These are private key equivalents of EC_POINT_oct2point and EC_POINT_point2oct which convert between the private key octet format and EC_KEY. Initialise with -1 rather than 1 A small typo crept in. "Add option to disable async Add no-async option to Configure that forces ASYNC_NULL. Related to RT1979 An embedded system or replacement C library (e.g. musl or uClibc) may not support the *context APIs that are needed for async operation. Compiles with musl. Ran unit tests "Make sure getaddrinfo and getnameinfo works as intended on Windows Both getaddrinfo() and getnameinfo() have to be preceeded with a call to BIO_sock_init(). Also "RT3095: allow NULL key for single-shot HMAC In HMAC_Init_ex "Have 70-test_clienthello.t be selective on when it can be run The test program clienthello checks TLS extensions "Have OpenSSL::Test::Utils::available_protocols load configdata as well Otherwise "Handle localhost being either 127.0.0.1 or ::1 When connecting to ""localhost"" the Proxy's choice of client address family may not match the server's choice address family.  Without MultiHomed => 1 Use BIO_snprintf() rather than snprintf() Some platforms do not have the latter. "Refactoring BIO: add a simple networking test of s_client and s_server This makes use of TLSProxy "Refactoring BIO: Adapt s_client and s_server s_socket.c gets brutally cleaned out and now consists of only two functions Refactoring BIO: Adapt BIO_s_datagram and all that depends on it The control commands that previously took a struct sockaddr * have been changed to take a BIO_ADDR * instead. "Refactoring BIO: add a test Temporary pragma to have GCC quiet down about deprecated functions Future commits will change our use to newer functions and the pragmas will go away at that time. "Refactoring BIO: add wrappers around sockaddr et al Because different platforms have different levels of support for IPv6 "RT4148 Accept leading 0-byte in PKCS1 type 1 padding. Internally "RT3234: disable compression CRIME protection: disable compression by default fix code indentation issue ... related to engine_ref_debug macro. Signed-off-by: Rich Salz <rsalz@akamai.com> Use a simpler method to build a glob than splitpath and catpath It turns out that the combination splitpath() could return an empty string for the directory part.  This doesn't play well with catdir(). New BN functions. Add new function BN_bn2binpad() which checks the length of the output buffer and pads the result with zeroes if necessary. New functions BN_bn2lebinpad() and BN_lebin2bn() which use little endian format. RT3854 Update docs. Remove ancient unused configuration file in crypto/conf. "constify PACKET PACKET contents should be read-only. To achieve this Fix memory leak and print out keygen errors. unified build scheme: add a personal configuration to test it Nothing else will run the unified scheme for now. "unified build scheme: add build.info files Now that we have the foundation for the ""unified"" build scheme in place "unified build scheme: a first introduction The ""unified"" build scheme revolves around small information files "Compat self-signed trust with reject-only aux data When auxiliary data contains only reject entries Remove redundant code. d2i_ECPrivateKey always caculates the public key so there is no need to caculate it again in eckey_priv_decode(). "Add EC_GROUP_order_bits Configure: restore original logic for -DWHIRLPOOL_ASM. Remove extra level of indirection. Remove OPENSSL_IMPORT as its only purpose is to define OPENSSL_EXTERN. "Move more BN internals to bn_lcl.h There was an unused macro in ssl_locl.h that used an internal type "Fix test/recipes/25-test_verify.t top_dir() are used to create directory names Add function to return internal enoding of X509_NAME. PR#4280 "Fix opt_imax() call Not all architectures have a time_t defined the same way.  To make sure we get the same result Missed rc2_int from before. Also remove $Makefile variable :) "Fix invalid policy detection As a side-effect of opaque x509 Better type for x509 -checkend argument This is a time_t and can be zero or negative.  So use 'M' (maximal signed int) not 'p' (positive int). "Configure et al: split up the lflags configuration item into two The lflags configuration had a weird syntax with a % as separator.  If it was present "Revert ""Don't replace cflags with thread_cflags "Merge error "Make it possible to check for explicit auxiliary trust By default X509_check_trust() trusts self-signed certificates from the trust store that have no explicit local trust/reject oids encapsulated as a ""TRUSTED CERTIFICATE"" object.  (See the -addtrust and -trustout options of x509(1)). This commit adds a flag that makes it possible to distinguish between that implicit trust Always DPURIFY The use of the uninitialized buffer in the RNG has no real security benefits and is only a nuisance when using memory sanitizers. "Remove x86_gcc_des Fix bug in nistp224/256/521 where have_precompute_mult always returns 0 During precomputation if the group given is well known then we memcpy a well known precomputation. However we go the wrong label in the code and don't store the data properly. Consequently if we call have_precompute_mult the data isn't there and we return 0. RT#3600 Add missing return value checks The function DH_check_pub_key() was missing some return value checks in some calls to BN functions. RT#4278 Correct value of DH_CHECK_PUBKEY_INVALID A new return value for DH_check_pub_key was recently added: DH_CHECK_PUBKEY_INVALID. As this is a flag which can be ORed with other return values it should have been set to the value 4 not 3. RT#4278 "Implement Async SSL_shutdown This extends the existing async functionality to SSL_shutdown() Keep RC5 bit shifts in [0..31] "Remove outdated tests These tests are not built Add more components to build. Add enable-crypto-mdebug enable-rc5 enable-md2 to any target that was --strict-warnings. CHANGES and NEWS updates for release Add details about the latest issues fixed in the forthcoming release. "Add a test for small subgroup attacks on DH/DHE Following on from the previous commit "Prevent small subgroup attacks on DH/DHE Historically OpenSSL only ever generated DH parameters based on ""safe"" primes. More recently (in version 1.0.2) support was provided for generating X9.42 style parameter files such as those required for RFC 5114 support. The primes used in such files may not be ""safe"". Where an application is using DH configured with parameters based on primes that are not ""safe"" then an attacker could use this fact to find a peer's private DH exponent. This attack requires that the attacker complete multiple handshakes in which the peer uses the same DH exponent. A simple mitigation is to ensure that y^q (mod p) == 1 CVE-2016-0701 Issue reported by Antonio Sanso." Restore NUMPRIMES as a numeric literal This fixes clang compilation problem with size_t NUMPRIMES and int loop counters. Add CRYPTO_secure_zalloc Also turn B<foo> into foo() in the pod page. Remove EIGHT_BIT and SIXTEEN_BIT Also cleaned up bn_prime.pl to current coding style. "Remove outdated legacy crypto options Many options for supporting optimizations for legacy crypto on legacy platforms have been removed.  This simplifies the source code and does not really penalize anyone. DES_PTR (always on) DES_RISC1 Complete the removal of /* foo.c */ comments Some files that are automatically generated still had those comments added by the generating scripts. "Skip all explicitely if the number of tests is 0 It seems that Test::More doesn't like 0 tests "Be careful when applying EXE_SHELL $EXE_SHELL should only be used with out own programs Remove /* foo.c */ comments This was done by the following find . -name '*.[ch]' | /tmp/pl where /tmp/pl is the following three-line script: print unless $. == 1 && m@/\* .*\.[ch] \*/@; close ARGV if eof; # Close file to reset $. And then some hand-editing of other files. "Remove unused RT4272: Unit tests fail when DTLS disabled Missing SKIP: block in SSL unit tests for DTLS and TLS version tests. "Have OpenSSL::Test handle perl scripts like any program Since we're building some of our perl scripts and the result might not end up in apps/ (*) Add SSL_up_ref() and SSL_CTX_up_ref() The SSL and SSL_CTX structures are reference counted. However since libssl was made opaque there is no way for users of the library to manipulate the reference counts. This adds functions to enable that. Remove dirs from mkfiles.pl Recent changes have removed some directories which is causing mkfiles.pl to fail. Use Configure's @disablables and %disabled through configdata.pm Enhances the routines in OpenSSL::Test::Utils for checking disabled stuff to get their information directly from Configure instead of 'openssl list -disabled'. Small Makefile.in cleanup engines_obj changed name to padlock_obj in Configure.  We need to do the corresponding ENGINES_ASM_OBJ -> PADLOCK_ASM_OBJ in appropriate Makefile.ins. "Generate warning text Now that we're using templates "Refactor file writing - Remake Makefile.org into a template It is time for Makefile.org to fold into the new regime and have a run through util/dofile.pl.  This forces some information out of there and into Configure "For every test in 80-test_ssl.t "Move & split opensslconf.h.in Move opensslconf.h.in to include/openssl. Split off DES "Fix OpenSSL::Test::Simple to take more than one algorithm Some test programs may depend on more than just one TLS version "Move pqueue into ssl This is an internal facility The rehash.time target should depend on build_tools as well The explanation is that it falls back to using tools/c_rehash if 'apps/openssl rehash' isn't supported on the platform at hand. Fix possible memory leak on BUF_MEM_grow_clean failure Simplify BUF_MEM init. code Signed-off-by: Kurt Roeckx <kurt@roeckx.be> "Refactor file writing - make configdata.pm the info center for ""reconf"" Now that configdata.pm is the centre of information Remove extra unused variable in util/dofile.pl "Fix store with opaque data When experimental-store is enabled Disable jpake if psk is disabled. "Refactor file writing - rewrite crypto/opensslconf.h.in as template The turn has come to have crypto/opensslconf.h.in get run through util/dofile.pl.  The consequence is that a large number of variables get moved to the %config table. Also "Refactor file writing - Adapt util/mkdef.pl to use configdata.pm For this adaptation Refactor file writing - information on our use of Perl and Perl modules This includes a start on how to install missing modules. Refactor file writing - adapt util/dofile.pl to use with_fallback "Refactor file writing - arrange for use of bundled Perl modules as fallback For our own convenience "Refactor file writing - introduce template driven file writing apps/CA.pl and tools/c_rehash are built from template files.  So far "Refactor config - consolidate and refresh print_table_entry It's time for print_table_entry to get a bit of refreshment.  The way it was put together "Fix quoting error in SRP printf The code is trying to interpolate the value of the BASE_SECTION macro "Refactor config - @MK1MF_Builds out "Refactor config - move templates and template docs to Configurations Move the documentation of the target configuration form to Configurations/README. Move initial assembler object templates to Configurations/00-BASE-templates.conf. Furthermore "Refresh the thinking of --prefix and --openssldir --prefix is now exclusively used for software and manual installation. --openssldir is not exclusively used as a default location for certs RT3863 ECC: Add missing NULL check. Set a flag "Refactor config - consolidate handling of disabled stuff It's time to refactor the handling of %disabled so that all information of value is in the same place.  We have so far had a few cascading disable rules in form of code "Refactor config - rewrite handling of ""reconf"" The way the ""reconf""/""reconfigure"" argument is handled is overly complicated.  Just grep for it first "Multiple -trusted/-untrusted/-CRLfile options in verify It is sometimes useful (especially in automated tests) to supply multiple trusted or untrusted certificates via separate files rather than have to prepare a single file containing them all. To that end "Reject when explicit trust EKU are set and none match. Returning untrusted is enough for for full chains that end in self-signed roots "Commit pre-generated test_verify certs These can be re-generated via: cd test/certs; ./setup.sh if need be.  The keys are all RSA 2048-bit keys "Check Suite-B constraints with EE DANE records When DANE-EE(3) matches or either of DANE-EE/PKIX-EE fails "Refactor config - split read_config into read_config and resolve_config Split the read_config function into read_config that ONLY reads the configuration files but doesn't try to resolve any of the inheritances "Refactor config - throw away '--test-sanity' Get rid of the --test-sanity option.  Since we no longer have string based configurations "Refactor config - a small cosmetic touchup of Configure Start simple Add an engine destructor to eng_cryptodev. Remove update tags Also remove depend/local_depend. "Handle SSL_shutdown while in init more appropriately Calling SSL_shutdown while in init previously gave a ""1"" response Remove the GOST engine The GOST engine is now out of date and is removed by this commit. An up to date GOST engine is now being maintained in an external repository. See: https://wiki.openssl.org/index.php/Binaries "Fix BSD -rpath parameter For BSD systems "Support disabling any or all TLS or DTLS versions Some users want to disable SSL 3.0/TLS 1.0/TLS 1.1 use TLS PRF Modify libssl to use EVP_PKEY TLS PRF. Fix GOST2012-NULL-GOST12 Fix a typo in the definition of the GOST2012-NULL-GOST12 ciphersuite. RT#4213 "Drop cached certificate signature validity flag It seems risky in the context of cross-signed certificates when the same certificate might have multiple potential issuers.  Also rarely used "Don't use ""grep -q"" "Add some extra Cygwin targets as aliases for Cygwin-x86 Cygwin was used for x86 before Adjust the configuration target name from Cygwin-i686 to Cygwin-x86 This is to reflect that it's not limited to just i686. Don't strip object files on Cygwin Building for the Cygwin distro requires to be able to build debuginfo files.  This in turn requires to build object files without stripping. The stripping is performed by the next step after building which creates the debuginfo files. Signed-off-by: Corinna Vinschen <vinschen@redhat.com> Fix function declarations. "Accessor update; fix API "Remove some old makefile targets Remove lint "Add some accessors. Author: Remi Gacogne <rgacogne-github@coredump.fr> GH334: Add an OCSP_SINGLERESP_get0_id() accessor to the OCSP_CERTID of a OCSP_SINGLERESP. It is possible to do it the other way around using OCSP_resp_find() RT4247: Add missing patch Missed the camellia EVP update. The TLSProxy tests can't run if no-engine has been configured Make sure they detect that. Start a new line after each sentence-ending period. This avoids explicit double spaces between sentences. "Better invalid SNI name error handling Also report an SSL_dane_enable error when the basedomain is an invalid SNI name.  Avoid side-effects when such a name is valid with X509_VERIFY_PARAM_set1_host() Empty SNI names are not valid While empty inputs to SSL_set1_host() clear the reference identifier list. Add lookup_certs for a trusted stack. NGX-2040 - fix wildcard match on punycode/IDNA DNS names - bugfix: should not treat '--' as invalid domain substring. - '-' should not be the first letter of a domain Signed-off-by: Viktor Dukhovni <viktor@openssl.org> "Update Windows installation instructions The windows installation instructions were very out of date. Substantial update to the text. Remove a lot of historical stuff that isn't relevant any more "Avoid the r modifier for s/// (perl) It seems that the r modifier for s/// is fairly new.  It's reported not to exist in perl 5.10.1 Add a no-egd option to disable EGD-related code The entropy-gathering daemon is used only on a small number of machines. Provide a configure knob so that EGD support can be disabled by default but re-enabled on those systems that do need it. "Do not use redirection on binary files On some platforms "Fall back to c_rehash if 'openssl rehash' fails 'openssl rehash' isn't implemented on all platforms "Add a directry spec for mcr if there is none On VMS "Fix verify(1) to report failure when verification fails Regenerated expired test certificates "Fix nistp512 typos Fix test_ordinals This used to work but somewhere along the line it broke and was failing to detect duplicate ordinals - which was the whole point of the test! "Quick fix of debugging option for mk1mf.pl. util/mk1mf.pl was relying on the platform having the 'debug-' prefix for doing a debug build.  Since the setup of targets has changed "Add CRYPTO_EX_DATA; remove EC_EXTRA_DATA Add CRYPTO_EX_DATA add EndC_KEY_[gs]et_method "Remove test_probable_prime_coprime from test/bntest.c This test relies on a private function "Fix DES_LONG breakage For some strange reason opensslconf.h was only defining DES_LONG when included via des.h "Have the VMS exit code follow POSIX conventions It seems like the convention for VMS exit codes is to combine the VMS C facility code (0x35a000) with a recoded exit code as follows: 0     => 1 1-255 => 8*code + 2 We also add 0x10000000 "After EVP_CIPHER turned opaque "Pipes on VMS do not work well with binary data "Fix test/recipes/80-test_ca.t to work on VMS VMS uses a variant of openssl.cnf named openssl-vms.cnf. There's a Perl on VMS mystery where a open pipe will not SIGPIPE when the child process exits "Maximize time_t when intmax_t is available Well "Remove unused internal macros The M_EVP_* macros related to EVP_CIPHER / EVP_CIPHER_CTX are not public "Adapt builtin cipher implementations to opaque EVP_CIPHER They all stop including evp_locl.h "Make EVP_CIPHER opaque and add creator/destructor/accessor/writer functions We follow the method used for EVP_MD. Also "Add accessors and writers for EVP_CIPHER_CTX New functions: - EVP_CIPHER_CTX_encrypting() - EVP_CIPHER_CTX_iv() - EVP_CIPHER_CTX_iv_noconst() - EVP_CIPHER_CTX_original_iv() - EVP_CIPHER_CTX_buf_noconst() - EVP_CIPHER_CTX_num() - EVP_CIPHER_CTX_set_num() - EVP_CIPHER_CTX_cipher_data() - EVP_CIPHER_CTX_new_cipher_data() Note that the accessors / writers for iv "Make EVP_CIPHER_CTX opaque and renew the creator / destructor functions Following the method used for EVP_MD_CTX and HMAC_CTX RT4227: Range-check in apps. Implement range-checking in all counts in apps.  Turns out only a couple of cases were missing.  And make the range-checking code more strict. Replace almost all opt_ulong() calls with opt_long() Yet another make update. "Make sure to have both upper and mixed case symbols in SYMBOL_VECTOR It was assumed that the syntax FOO/Foo=PROCEDURE would create both an upper case and mixed case symbol in the GST.  Not so "Use SPARE instead of PRIVATE_PROCEDURE to reserve unused SYMBOL_VECTOR slots It was assumed that a dummy with the type PRIVATE_PROCEDURE would simply occupy a slot but otherwise ignore the symbol.  Not so Remove mkstack.pl: it is no longer needed. "Only run DANE tests when EC is supported Since danetest is to test DANE rather than specific algorithms "Make SSL{_CTX "Adjust $default_depflags to changes in Configure We use $default_depflags to check if a 'make depend' is needed after configuring Fix NSS format session output Commit 189ae368d91 (RT ticket 3352) provided the capability to output session key data in NSS format. The big apps cleanup broke that capability. This commit restores it. RT#4201 Update leak test to check return values. Enable/disable crypto-mdebug just like other features Also always abort() on leak failure. Adds crypto-mdebug as a valid option Adds crypto-mdebug as a valid option. Fixes https://github.com/openssl/openssl/issues/537 Signed-off-by: Rich Salz <rsalz@openssl.org> Add DEPRECATEDIN support. Recognise disabled algorithms automatically. "Fix no CRYPTO_MDEBUG build (windows) In order for mkdep to find #ifdef'd functions Another portability fix. Portability fix for apps/s_client.c Make some local variables and a table of them be static. "Backwards-compatibility subject to OPENSSL_API_COMPAT Provide backwards-compatiblity for functions Minor test update * Remove extraneous test/Makefile.orig * Use basedomain instead of argv[1] in test/danetest.c Fix build-break; 'make update' Commit bbd86bf5424a611cb6b77a3a17fc522931c4dcb8 broke certain builds. Commit 0674427f71ca050e3c61a7ec9dc71b208c3b39f5 missing 'make update' "mem functions cleanup Only two macros CRYPTO_MDEBUG and CRYPTO_MDEBUG_ABORT to control this. If CRYPTO_MDEBUG is not set Enhance util/mkdef.pl to provide a VMS linker option file for shlibs "Remove crypto/pem/pem_seal.c It's functionality appears unused.  If we're wrong Only declare stacks in headers Don't define stacks in C source files: it causes warnings about unused functions in some compilers. Rename DECLARE*STACK_OF to DEFINE*STACK_OF Applications wishing to include their own stacks now just need to include DEFINE_STACK_OF(foo) in a header file. Fix declarations and constification for inline stack. "DANE support structures "Fix a possible memleak If there's a failure allocating md_data "Protocol version selection and negotiation rewrite The protocol selection code is now consolidated in a few consecutive short functions in a single file and is table driven.  Protocol-specific constraints that influence negotiation are moved into the flags field of the method structure.  The same protocol version constraints are now applied in all code paths.  It is now much easier to add new protocol versions without reworking the protocol selection logic. In the presence of ""holes"" in the list of enabled client protocols we no longer select client protocols below the hole based on a subset of the constraints and then fail shortly after when it is found that these don't meet the remaining constraints (suiteb Fix no-dh. Update to SHA256 for TSA signing digest. "Remove the #ifndef OPENSSL_SYS_VMS around SSL_add_dir_cert_subjects_to_stack It served a purpose "SIZE_MAX doesn't exist everywhere Check for missing DSA parameters. If DSA parameters are absent return -1 (for unknown) in DSA_security_bits. If parameters are absent when a certificate is set in an SSL/SSL_CTX structure this will reject the certificate by default. This will cause DSA certificates which omit parameters to be rejected but that is never (?) done in practice. Thanks to Brian 'geeknik' Carpenter for reporting this issue. "Prefer ReuseAddr over Reuse Increase the max size limit for a CertificateRequest message Previous versions of OpenSSL had the max size limit for a CertificateRequest message as |s->max_cert_list|. Previously master had it to be SSL3_RT_MAX_PLAIN_LENGTH. However these messages can get quite long if a server is configured with a long list of acceptable CA names. Therefore the size limit has been increased to be consistent with previous versions. RT#4198 "Simplify calling of the OCSP callback Move all calls of the OCSP callback into one place Add some documentation for the OCSP callback functions Describe the usage of the OCSP callback functions on both the client and the server side. Ensure we don't call the OCSP callback if resuming a session It makes no sense to call the OCSP status callback if we are resuming a session because no certificates will be sent. Fix error when server does not send CertificateStatus message If a server sends the status_request extension then it may choose to send the CertificateStatus message. However this is optional. We were treating it as mandatory and the connection was failing. Thanks to BoringSSL for reporting this issue. RT#4120 EVP_PKEY DH client support. Always generate DH keys for ephemeral DH cipher suites. remove duplicates in util/libeay.num Signed-off-by: Kurt Roeckx <kurt@roeckx.be> Remove SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER and SSL_OP_TLS_D5_BUG support. Suggested by David Benjamin "Avoid using a dangling pointer when removing the last item When it's the last item that is removed int_thread_hash == hash and we would still call int_thread_release(&hash) while hash is already freed.  So int_thread_release would compare that dangling pointer to NULL which is undefined behaviour.  Instead do already what int_thread_release() would do "Memory leak in state machine in error path When EC is disabled Refactor DTLS cookie generation and verification DTLS cookie generation and verification were exact copies of each other save the last few lines.  This refactors them to avoid code copying. "Fix inline build failure After the recent change to use ossl_inline Add ossl_inline Add macro ossl_inline for use in public headers where a portable inline is required. Change existing inline to use ossl_inline SSL library configuration module. This adds support for SSL/TLS configuration using configuration modules. Sets of command value pairs are store and can be replayed through an SSL_CTX or SSL structure using SSL_CTX_config or SSL_config. "Cleanup CRYPTO_{push Configure: refine 'reconf' logic. Remove some L<asdf|asdf> which crept back in. "Remove the ""eay"" c-file-style indicators Since we don't use the eay style any more "Add SSL_CIPHER_description() for Chacha20/Poly1305 SSL_CIPHER_description() was returning ""unknown"" for the encryption in the new ChaCha20/Poly1305 TLS ciphersuites. RT#4183" "mem-cleanup "Rename sec_mem to mem_sec "Rename some BUF_xxx to OPENSSL_xxx Rename BUF_{strdup Use EVP_PKEY for client side EC. Use EVP_PKEY for server EC. Constify EC_KEY in ECDH_compute_key. Use EC_KEY_key2buf and EC_oct2key in libssl. Don't export internal symbols On Linux when creating the .so file we were exporting all symbols. We should only be exporting public symbols. This commit fixes the issue. It is only applicable to linux currently although the same technique may work for other platforms (e.g. Solaris should work the same way). This also adds symbol version information to our exported symbols. "Fix s_server problem with no-ec s_server was trying to set the ECDH curve when no-ec was defined. This also highlighted the fact that the -no_ecdhe option to s_server is broken Update EVP_PKEY documentation. Add EVP_PKEY_up_ref() documentation and fix various typos. Extend EVP_PKEY_copy_parameters() Make EVP_PKEY_copy_parameters() work if the destination has no type (e.g. if obtained from EVP_PKEY_new()) or the underlying key is NULL. This is useful where we want to copy the parameters from an existing key to a new key. Fix a ** 0 mod 1 = 0 for real this time. Commit 2b0180c37fa6ffc48ee40caa831ca398b828e680 attempted to do this but only hit one of many BN_mod_exp codepaths. Fix remaining variants and add a test for each method. Thanks to Hanno Boeck for reporting this issue. "Avoid erroneous ""assert(private)"" failures. When processing a public key input via ""-pubin"" x86_64 assembly pack: tune clang version detection even further. RT#4171 Configure: add framework for ChaCha and Poly1305 assembly. Remove no longer existant structure member and direct references to EVP_MD_CTX internals. Fix (incorrect) uninitialised variable warning. Allow ChaCha20-Poly1305 in DTLS GCM and CCM are modes of operation for block ciphers only. ChaCha20-Poly1305 operates in neither of them but it is AEAD. This change also enables future AEAD ciphers to be available for use with DTLS. Signed-off-by: Rich Salz <rsalz@akamai.com> "Revert ""Allow ChaCha20-Poly1305 in DTLS"" This reverts commit 777f482d993322d69025014bf1b99c270c978fc0. Author credit missing.  Reverting this and re-committing with an Author line." Use SHA256 not MD5 as default digest. (Documentation update was in the MR but not the commit.  Oops.) Fix compile failure with no-threads The async code was causing a compile failure if no-threads was used. Fix compile failure Fix compile failure introduced by commit 94d61512360c due to a typo. Allow ChaCha20-Poly1305 in DTLS GCM and CCM are modes of operation for block ciphers only. ChaCha20-Poly1305 operates in neither of them but it is AEAD. This change also enables future AEAD ciphers to be available for use with DTLS. Signed-off-by: Rich Salz <rsalz@akamai.com> Use SHA256 not MD5 as default digest. "Fix OCB link The link to the OCB patent pdf changed Support the TLS Feature (aka Must Staple) X.509v3 extension (RFC7633). Signed-off-by: Kurt Roeckx <kurt@roeckx.be> Restore full support for EVP_CTX_create() etc. Update CHANGES and NEWS for alpha release Misc updates to the CHANGES and NEWS files ready for the alpha release. Ensure |rwstate| is set correctly on BIO_flush A BIO_flush call in the DTLS code was not correctly setting the |rwstate| variable to SSL_WRITING. This means that SSL_get_error() will not return SSL_ERROR_WANT_WRITE in the event of an IO retry. "Fix DTLS handshake fragment retries If using DTLS and NBIO then if a second or subsequent handshake message fragment hits a retry evp/e_aes.c: wire hardware-assisted block function to OCB. x86[_64] assembly pack: add optimized AES-NI OCB subroutines. Fix mkfiles for new directories Add the new chacha and poly1305 directories to mkfiles.pl to enable proper building on windows. Add a return value check If the call to OBJ_find_sigid_by_algs fails to find the relevant NID then we should set the NID to NID_undef. Wire ChaCha20-Poly1305 to TLS. evp/c_allc.c: wire ChaCha20-Poly1305 and add tests. test/evp_test.c: allow generic AEAD ciphers to be tested. Add ChaCha20-Poly1305 and ChaCha20 NIDs. Add reference ChaCha20 and Poly1305 implementations. Fix warnings about unused variables when EC is disabled. add CHANGES and NEWS entry Todo: update documentation. remove ecdsa.h header references. Top level ECDSA sign/verify redirection. Remove reference to ECDSA_OpenSSL. Move and adapt ECDSA sign and verify functions. Add ECDSA_SIG accessor. "Add set methods. Add set_group remove ecdh.h header Remove redundant ecdh.h header and any references to it. Adapt ecdh_compute_key Rename ecdh_compute_key into ossl_ecdh_compute_key and modify it to use EC error codes. Remove superfluous old ECDH functions. EC_KEY_METHOD keygen support. Add keygen to EC_KEY_METHOD. Redirect EC_KEY_generate_key through method and set the current EC key generation function as the default. Refer to website for acknowledgements. Make it possible to affect the way dists are made Introducing DISTTARVARS to propagate changed variables down to the tar-making target. Extended master secret test script. TLSProxy update Add function to delete extensions and fix ClientHello repacking. "Remove double semi (;) When in the middle of declarations Remove typedef of HMAC_CTX from crypto/hmac/hmac_lcl.h This is already defined in include/openssl/ossl_typ.h. Fix clang complaints about uninitialised variables. "Change tar owner and group to just 0 It seems like some tar versions don't like the name:id form for --owner and --group.  The closest known anonymous user being 0 (root) "Cleanup: rename EVP_MD_CTX_(create|init|destroy) to EVP_MD_CTX_(new|reset|free) Looking over names "Cleanup: Remove M_EVP_MD_* macros These macros were only meant for crypto/evp Remove HMAC_CTX_cleanup and combine its functionality into EVP_MD_CTX_init This follows the same idea as the combination of EVP_MD_CTX_cleanup and EVP_MD_CTX_init into one function. "Remove EVP_MD_CTX_cleanup and put its functionality into EVP_MD_CTX_init The idea is that with EVP_MD_CTX_create() and EVP_MD_CTX_destroy() Add inclusion of internal/evp_int.h to all crypto/ files that need it These are the files that add new EVP_MDs. "Make the definition of EVP_MD opaque This moves the definition to crypto/include/internal/evp_int.h and defines all the necessary method creators Document the changed HMAC API. "Adapt HMAC to the EVP_MD_CTX changes This change required some special treatment Have other crypto/evp files include evp_locl.h Note: this does not include the files in crypto/evp that are just instanciations of EVP_MD. "Small changes to creating dists Make TARFILE include ../ instead of having that hard coded all over the place. When transforming file names in TAR_COMMAND "ARMv4 assembly pack: allow Thumb2 even in iOS build Remove support for all 40 and 56 bit ciphers. "Make SSL_{CTX}_set_tmp_ecdh() call SSL_{CTX_}set1_curves() SSL_{CTX}_set_tmp_ecdh() allows to set 1 EC curve and then tries to use it.  On the other hand SSL_{CTX_}set1_curves() allows you to set a list of curves Remove support for SSL_{CTX_}set_tmp_ecdh_callback(). This only gets used to set a specific curve without actually checking that the peer supports it or not and can therefor result in handshake failures that can be avoided by selecting a different cipher. Fix EAP FAST in the new state machine The new state machine code missed an allowed transition when resuming a session via EAP FAST. This commits adds the missing check for the transition. Remove RSA_FLAG_SIGN_VER flag. Remove RSA_FLAG_SIGN_VER: this was origininally used to retain binary compatibility after RSA_METHOD was extended to include rsa_sign and rsa_verify fields. It is no longer needed. Move the backtrace memleak options to a separate variable The contents of this variable ($memleak_devteam_backtrace) is added to $cflags unless we build for a platform we know doesn't support gcc's -rdynamic och backtrace() and friends. Run test_ordinals after update Catch a common 'make update' failure: conflicting ordinals. "_BSD_SOURCE is deprecated "modes/ocb128.c: split fixed block xors to aligned and misaligned. Main goal was to improve performance on RISC platforms modes/ocb128.c: ocb_lookup_l to allow non-contiguous lookup and CRYPTO_ocb128_encrypt to handle in==out. Remove BN_init Rename it to be an internal function bn_init. Use digest indices for signature algorithms. Don't hard code EVP_sha* etc for signature algorithms: use table indices instead. Add SHA224 and SHA512 to tables. Use digest tables for defaults. PRF and handshake hash revision. Change handshake hash array into a single digest context simplifying the handhake hash code. Use EVP_md5_sha1() if needed for handshake hashes in TLS 1.1 and earlier. Simplify PRF code to also use a single digest and treat EVP_md5_sha1() as a special case. Modify algorithm2 field of ciphers to use a single index value for handshake hash and PRF instead of a bitmap. Updates to GOST2012 Various updates following feedback from the recent commit of the new GOST2012 code. Remove X509_VERIFY_PARAM_ID Now that X509_VERIFY_PARAM is opaque X509_VERIFY_PARAM_ID is no longer needed. Fix a NULL deref in an error path The SRP_create_verifier_BN function goes to the |err| label if the |salt| value passed to it is NULL. It is then deref'd. Add documentation for BN_with_flags Following on from the previous commit this adds some documentation for the BN_with_flags function which is easy to misuse. "Tighten up BN_with_flags usage and avoid a reachable assert The function rsa_ossl_mod_exp uses the function BN_with_flags to create a temporary copy (local_r1) of a BIGNUM (r1) with modified flags. This temporary copy shares some state with the original r1. If the state of r1 gets updated then local_r1's state will be stale. This was occurring in the function so that when local_r1 was freed a call to bn_check_top was made which failed an assert due to the stale state. To resolve this we must free local_r1 immediately after we have finished using it and not wait until the end of the function. This problem prompted a review of all BN_with_flag usage within the codebase. All other usage appears to be correct Remove useless locking code Follow-up to 070c233. Signed-off-by: Kurt Roeckx <kurt@roeckx.be> "ssl3_free(): Return if it wasn't created If somewhere in SSL_new() there is a memory allocation failure Add ctrl for SHA1 and SSLv3 Add SSLv3 ctrl to EVP_sha1() this is only needed if SSLv3 client authentication is used with DSA/ECDSA. Add EVP_MD_CTX_ctrl function. Add ssl3 ctrl to EVP_md5_sha1(). Add a ctrl to EVP_md5_sha1() to handle the additional operations needed to handle SSL v3 client authentication and finished message. Use MD5+SHA1 for default digest if appropriate. Add MD5+SHA1 Add digest combining MD5 and SHA1. This is used by RSA signatures for TLS 1.1 and earlier. Fix uninitialised p error. Limit depth of ASN1 parse printing. Thanks to Guido Vranken <guidovranken@gmail.com> for reporting this issue. Drop the old perl start magic and replace it with a normal shebang perlrun(1) leads the way. Add perl modeline to Configure scripts Encourages GitHub to perform proper syntax highlighting. Patch containing TLS implementation for GOST 2012 This patch contains the necessary changes to provide GOST 2012 ciphersuites in TLS. It requires the use of an external GOST 2012 engine. x86_64 assembly pack: tune clang version detection. RT#4142 Makefile.org: add LC_ALL=C to unify error [and other] messages. RT#4138 "Async error handling and MacOS/X fixes In the async code for MacOS/X define _XOPEN_SOURCE (if not already defined) as early as possible.  We must do this before including any header files Add initial AppVeyor configuration Original patch by Frank Morgner. Signed-off-by: Kurt Roeckx <kurt@roeckx.be> Minor correction to comment. Signed-off-by: Kurt Roeckx <kurt@roeckx.be> "Good hygiene with size_t output argument. Though the callers check the function return value and ignore the size_t output argument on failure Implement windows async thread local variable support Implements Thread Local Storage in the windows async port. This also has some knock on effects to the posix and null implementations. Convert __thread to pthreads for Thread Local Storage In theory the pthreads approach for Thread Local Storage should be more portable. This also changes some APIs in order to accommodate this change. In particular ASYNC_init_pool is renamed ASYNC_init_thread and ASYNC_free_pool is renamed ASYNC_cleanup_thread. Also introduced ASYNC_init and ASYNC_cleanup. Fix some style issues There were a number of places where the async code did not conform to the OpenSSL coding style. "Fix async deadlock problem The rand code can aquire locks and then attempt crypto operations. This can end up in a deadlock if we are using an async engine "Add ASYNC_block_pause and ASYNC_unblock_pause There are potential deadlock situations that can occur if code executing within the context of a job aquires a lock "Remove ASYNC NOEXIST functions from libeay.num During development some functions got added and then later taken away. Since these will never appear in a production version there is no reason for them to appear in libeay.num flagged as ""NOEXIST""." "Further OS-X deprecated warnings tweak Even with _XOPEN_SOURCE defined OS-X still displays warnings that makecontext and friends are deprecated. This isn't a problem until you try and build with --strict-warnings Fix bug in async_fibre_makecontext for POSIX async_fibre_makecontext was initialise the fibre first and then calling getcontext(). It should be the other way around because the getcontext call may overwrite some of the things we just initialised. This didn't cause an issue on Linux and so the problem went unnoticed. On OS-X it causes a crash. Rename start_async_job to ssl_start_async_job Make it clear that this function is ssl specific. Add clarification to docs on ASYNC_free_pool() Clarify that you must only call this after all async jobs have completed - otherwise you could get memory leaks. Fix compilation error on OS-X OS-X complains if we don't have _XOPEN_SOURCE defined. Swap to using _longjmp/_setjmp instead of longjmp/setjmp _longjmp/_setjmp do not manipulate the signal mask whilst longjmp/setjmp may do. Online sources suggest this could result in a significant speed up in the context switching. Tweak async documentation based on feedback Add some clarifications to the async documentation. Also changed ASYNC_pause_job() so that it returns success if you are not within the context of a job. This is so that engines can be used either asynchronously or synchronously and can treat an error from ASYNC_pause_job() as a real error. Clean up libssl async calls Tidy up the libssl async calls and make sure all IO functions are covered. Add ASYNC error codes Add ASYNCerr support to give some meaningful error message in the event of a failure. Update CHANGES Add a CHANGES entry for the new async code. Fix the error code for SSL_get_async_wait_fd() 0 is a valid file descriptor so SSL_get_async_wait_fd should instead return -1 on error. More async documentation Document the libssl and command line application aspects of async. Fix windows compilation warnings Fix some warnings in the async code when compiling on windows. Fix ASYNC null implementation The ASYNC null implementation has not kept pace with the rest of the async development and so was failing to compile. Remove ASYNC_in_job() The ASYNC_in_job() function is redundant. The same effect can be achieved by using ASYNC_get_current_job(). Implement windows async pool and notify support Port the async pool and notify code to windows. Fix pools for s_client s_client was not freeing up the async pool if async mode was enabled. "Fix s_server bug If an async event occurs during a renegotiation in SSL_read then s_server was looping around Implement local thread pools Implement the ASYNC_JOB as a local thread pool. Remove the API support for global pools. "Initial Async notify code changes Initial API implemented for notifying applications that an ASYNC_JOB has completed. Currently only s_server is using this. The Dummy Async engine ""cheats"" in that it notifies that it has completed *before* it pauses the job. A normal async engine would not do that. Only the posix version of this has been implemented so far "Add ASYNC_JOB pools It is expensive to create the ASYNC_JOB objects due to the ""makecontext"" call. This change adds support for pools of ASYNC_JOB objects so that we don't have to create a new ASYNC_JOB every time we want to use one." Use longjmp at setjmp where possible Where we can we should use longjmp and setjmp in preference to swapcontext/ setcontext as they seem to be more performant. "Async clean ups Removed the function ASYNC_job_is_waiting() as it was redundant. The only time user code has a handle on a job is when one is waiting "Increase stack size Some assembler code puts a lot of stuff on the stack "Add null async implementation Create a ""null"" async implementation for platforms that lack support. This just does nothing when called and therefore performs synchronously." Add s_server and s_client async support A new -async option is added which activates SSL_MODE_ASYNC. Also SSL_WANT_ASYNC errors are handled appropriately. "Make libssl async aware The following entry points have been made async aware: SSL_accept SSL_read SSL_write Also added is a new mode - SSL_MODE_ASYNC. Calling the above functions with the async mode enabled will initiate a new async job. If an async pause is encountered whilst executing the job (such as for example if using SHA1/RSA with the Dummy Async engine) "Add the Dummy Async engine (dasync) This engine is for developers of async aware applications. It simulates asynchronous activity with external hardware. This initial version supports SHA1 and RSA. Certain operations using those algorithms have async job ""pauses"" in them - using the new libcrypto async capability." Add pthread support The forthcoming async code needs to use pthread thread local variables. This updates the various Configurations to add the necessary flags. In many cases this is an educated guess as I don't have access to most of these environments! There is likely to be some tweaking needed. Fix uninitialised variable The al variable could be uninitialised in an error path. Use better defaults for TSA. Use SHA256 for TSA and setted permitted digests to a sensible value. Based on PR#4141 Add support for signer_digest option in TS. Based on PR#2145 aes/asm/vpaes-ppc.pl: eliminate overhung stores in misaligned cases. Check error return from sysconf in secure memory code We use the sysconf function to provide details about the page size in the secure memory code. This function can return -1 on error so we should check for this before proceeding. Add comment explaining why we don't check a return value A call to X509_verify_cert() is used to build a chain of certs for the server to send back to the client. It isn't *actually* used for verifying the cert at all - just building the chain. Therefore the return value is ignored. Remove an NULL ptr deref in an error path The |passwd| variable in the code can be NULL if it goes to the err label. Therefore we cannot call strlen on it without first checking that it is non NULL. crypto/sec_mem.c: fix anonymous mmap on legacy systems. "aesni-sha256-x86_64.pl: fix crash on AMD Jaguar. It was also found that stich performs suboptimally on AMD Jaguar Use accessors for X509_print_ex(). Print certificate details using accessor functions. Since X509_CERT_AUX_print is only used in one place and can't be used by applications (it uses an internal X509_CERT_AUX structure) this has been removed and replaced by a function X509_aux_print which takes an X509 pointer instead. Update and clarify ciphers documentation. "Add ""TLSv1.0"" cipher alias. This adds a TLSv1.0 cipher alias for ciphersuites requiring at least TLSv1.0: currently only PSK ciphersuites using SHA256 or SHA384 MAC (SSLv3 only supports SHA1 and MD5 MAC)." Use SSL_TLSV1 only if at least TLS v1.0 is needed. modes/asm/ghash-armv4.pl: extend Apple fix to all clang cases. Triggered by RT#3989. "Fix SSL_use_certificate_chain_file The new function SSL_use_certificate_chain_file was always crashing in the internal function use_certificate_chain_file because it would pass a NULL value for SSL_CTX * Remove redundant check from tls1_get_curvelist The function tls1_get_curvelist() has an explicit check to see if s->cert is NULL or not. However the check appears *after* calling the tls1_suiteb macro which derefs s->cert. In reality s->cert can never be NULL because it is created in SSL_new(). If the malloc fails then the SSL_new call fails and no SSL object is created. Continue malloc standardisation in engines Continuing from previous work standardise use of malloc in the engine code. Continue standardising malloc style for libcrypto Continuing from previous commit ensure our style is consistent for malloc return checks. Standardise our style for checking malloc failures if we have a malloc |x = OPENSSL_malloc(...)| sometimes we check |x| for NULL and sometimes we treat it as a boolean |if(!x) ...|. Standardise the approach in libssl. Remove redundant check from SSL_shutdown The SSL object was being deref'd and then there was a later redundant check to see if it is NULL. We assume all SSL_foo functions pass a non NULL SSL object and do not check it. Use uint32_t and int32_t for SSL_CIPHER structure. Fix compilation problems with SCTP The SCTP code is not compiled by default. This fixes some compilation problems in that code. Remove some redundant assignments We were setting |s->renegotiate| and |s->new_session| to 0 twice in tls_finish_handshake. This is redundant so now we just do it once! Rebuild error source files. Rebuild error source files: the new mkerr.pl functionality will now pick up and translate static function names properly. Read function names from C source files. In mkerr.pl read parse functions names in C source files and use them for translation and sanity checks. "Ensure the dtls1_get_*_methods work with DTLS_ANY_VERSION The various dtls1_get*_methods did not handle the DTLS_ANY_VERSION case "Minor EVP_SignInit_ex doc fix EVP_SignInit_ex was missing from the NAME section of its man page so typing ""man EVP_SignInit_ex"" failed to load the page." "Remove the state parameter from BIO_ctrl_set_connected The actual implementation has the state of the connection being controlled with the peer parameter Document how BIO_get_conn_ip and BIO_get_conn_int_port actually work No dummy arguments. Have BIO_get_conn_int_port use BIO_ctrl instead BIO_int_ctrl BIO_int_ctrl isn't made for the purpose BIO_get_conn_int_port used it for. This also changes BIO_C_GET_CONNECT to actually return the port instead of assigning it to a pointer that was never returned back to the caller. Clarify the preferred way of creating patch files Clarify that git format-patch output is preferred for creating patch files. Remove a reachable assert from ssl3_write_bytes A buggy application that call SSL_write with a different length after a NBIO event could cause an OPENSSL_assert to be reached. The assert is not actually necessary because there was an explicit check a little further down that would catch this scenario. Therefore remove the assert an move the check a little higher up. Remove an OPENSSL_assert which could fail An OPENSSL_assert was being used which could fail (e.g. on a malloc failure). Remove des_ver.h; broke build. "Replace ""SSLeay"" in API with OpenSSL All instances of SSLeay (any combination of case) were replaced with the case-equivalent OpenSSL." Remove some SSLv2 references There were a few remaining references to SSLv2 support which are no longer relevant now that it has been removed. "Remove the inline keyword Some functions were marked as inline in statem_srvr.c where they probably didn't need to be "Remove superfluous check |tls_process_finished| was checking that |peer_finish_md_len| was non-negative. However neither |tls1_final_finish_mac| or |ssl3_final_finish_mac| can ever return a negative value Change SSL_state_string return strings to start with a T Due the rest of the state machine changes it makes sense to change the SSL_state_string return strings from 3* to T*. They are not SSL3 specific Change snprintf to memcpy There was a few uses of snprintf in the DTLS SCTP code which made more sense to be a memcpy. Add ossl_statem prefix to various functions Add the ossl_statem prefix to various funtions to avoid name clashes. Convert enums to typedefs Various enums were introduced as part of the state machine rewrite. As a matter of style it is preferred for these to be typedefs. Make dtls1_link_min_mtu static The function dtls1_link_min_mtu() was only used within d1_lib.c so make it static. "Fix a bogus clang warning Clang with --strict-warnings was complaining about an uninitalised variable. In reality it will never be used uninitialised but clang can't figure out the logic "Fix empty NewSessionTicket processing Rebasing the state machine code introduced a problem with empty NewSessionTicket processing. The return value from the tls_process_new_session_ticket() is supposed to be an enum Fix uninitialised variable Fix another instance of |al| being unitialised in certain error scenarios. Fix various error codes A number of error codes were wrong due to a rebase of the state machine code. Move in_handshake into STATEM The SSL variable |in_handshake| seems misplaced. It would be better to have it in the STATEM structure. Fix DTLSv1_listen following state machine changes Adding the new state machine broke the DTLSv1_listen code because calling SSL_in_before() was erroneously returning true after DTLSv1_listen had successfully completed. This change ensures that SSL_in_before returns false. Add a function to get the info_callback Remove repeated blocks of checking SSL and then SSL_CTX for the info_callback. Remove SSL_state and SSL_set_state SSL_state has been replaced by SSL_get_state and SSL_set_state is no longer supported. Change statem prefix to ossl_statem Change various state machine functions to use the prefix ossl_statem instead. "Change HANDSHAKE_STATE to OSSL_HANDSHAKE_STATE Rename the enum HANDSHAKE_STATE to OSSL_HANDSHAKE_STATE to ensure there are no namespace clashes Fix some client side transition logic Fixed some issues in the logic for determining whether an SKE should be expected or not. In particular only allow an SKE for RSA if its export and the key size is not allowed. Also fix the ephemeral ciphersuite checks and add in a missing call to ssl3_check_cert_and_algorithm(). Minor documentation tweak Update the return type for SSL_state in the documentation. "Remove a call to SSL_set_state from s_server s_server was (ab)using SSL_set_state to force a renegotiation. This is a bad way to do things and does not work with the new state machine code Remove some unused variables The next_state variable is no longer needed in the new state machine. Add a state machine README Add some documentation on the thinking behind the state machine. Reorganise state machine files Pull out the state machine into a separate sub directory. Also moved some functions which were nothing to do with the state machine but were in state machine files. Pulled all the SSL_METHOD definitions into one place...most of those files had very little left in them any more. Move PACKET creation into the state machine Previously each message specific process function would create its own PACKET structure. Rather than duplicate all of this code lots of times we should create it in the state machine itself. "Remove the SSL state variable The SSL structure contained a ""state"" variable that kept track of the state machine in the old code. The new state machine does not use this so it can be removed." Convert DTLSv1_listen to use new state machine code The DTLSv1_listen code set the state value explicitly to move into init. Change to use state_set_in_init() instead. "Redefine old state values ssl.h and ssl3.h have a number of defines for the various states in the old state machine code. Since this is public API it is not desirable to just remove them. Instead redefine them to the closest equivalent state in the new state machine code. If an application calls SSL_state then the return value can still be compared against these old values if necessary. However not all values have an equivalent state in the new code Remove redundant code Clean up and remove lots of code that is now no longer needed due to the move to the new state machine. Move server side DTLS to new state machine Implement all of the necessary changes to make DTLS on the server work with the new state machine code. Move server side TLS to new state machine Implement all of the necessary changes for moving TLS server side processing into the new state machine code. Split TLS server functions Split the TLS server ssl3_get_* and ssl3_send_* functions into two ready for the migration to the new state machine code. Delete unused functions Remove all the functions and dead code that is now no longer required as a result of the DTLS client move into the new state machine code. Implement DTLS client move to new state machine Move all DTLS client side processing into the new state machine code. A subsequent commit will clean up the old dead code. dtls_get_message changes for state machine move Create a dtls_get_message function similar to the old dtls1_get_message but in the format required for the new state machine code. The old function will eventually be deleted in later commits. Client TLS state machine rewrite cleanup Remove redundant code following moving client side TLS handling to the new state machine implementation. Implement Client TLS state machine This swaps the implementation of the client TLS state machine to use the new state machine code instead. "Split client message reading and writing functions The new state machine code will split up the reading and writing of hanshake messages into discrete phases. In order to facilitate that the existing ""get"" type functions will be split into two halves: one to get the message and one to process it. The ""send"" type functions will also have all work relating to constructing the message split out into a separate function just for that. For some functions there will also be separate pre and post ""work"" phases to prepare or update state." Split ssl3_get_message The function ssl3_get_message gets a whole message from the underlying bio and returns it to the state machine code. The new state machine code will split this into two discrete steps: get the message header and get the message body. This commit splits the existing function into these two sub steps to facilitate the state machine implementation. Probably fix travis (wine build). Fix undeclared variable warnings. Do not treat 0 return value from BIO_get_fd() as error 0 is a valid file descriptor. RT#4068 Clarify return values for EVP_DigestVerifyFinal. Previous language was unclear.  New language isn't pretty but I believe it is more accurate. Signed-off-by: Rich Salz <rsalz@openssl.org> "Add an explicit list of options that can be disabled "Handle CT error macros separately Because the default error macro generator assumes the header file with error macros is in include/openssl and therefore generates a C file with error texts that include <openssl/{name}.h> Don't use SSLv23_server_method in an example The function SSLv23_server_method() is an old name. New code should use TLS_server_method() instead. Therefore don't use SSLv23_server_method() in an example in the docs. "Avoid undefined behaviour in PACKET_buf_init Change the sanity check in PACKET_buf_init to check for excessive length buffers Move auto Host adding to query_responder Check for Host header in query_responder instead of process_responder. This also fixes a memory leak in the old code if the headers was NULL. Fix error message when loading engines from config When using command line applications errors occur when trying to load engines specified in a config file. Introduced by commit a0a82324f96 RT#4093 "Remove Obsolete engines There are a number of engines in the OpenSSL source code which are now obsolete. The following engines have been removed: 4758cca Fix self signed handling. Don't mark a certificate as self signed if keyUsage is present and certificate signing not asserted. PR#3979 Handle embed flag in ASN1_STRING_copy(). Appease gcc's Wmaybe-uninitialized False positive: gcc (4.8) can't figure out the SSL_IS_DTLS logic. RFC5753 compliance. RFC5753 requires that we omit parameters for AES key wrap and set them to NULL for 3DES wrap. OpenSSL decrypt uses the received algorithm parameters so can transparently handle either form. Add Clang 3.6 and additional GCC 5 builds to travis Follow-up to f386742. Signed-off-by: Rich Salz <rsalz@openssl.org> Harmonize do_rehash_rule with updated test/recipies/25-test_verify.t. Test suite: chomp->s/\R// to harmonize with mingw 'make test'. Test suite: minimal required to get mingw 'make test' work under Linux. (part by Alessandro Ghedini) "Rename -set-serial command to req Previous OpenSSL versions used -set_serial "Centralise loading default apps config file Loading the config file after processing command line options can cause problems Fix option name discrepancy There used to be options -macopt and -sigopt in <=1.0.2 for the dgst command line app. These were incorrectly spelled as -macop and -sigop in master. RT#4072 Configurations: move -Wno-pedantic-ms-format to .travis.yml. The option is not available in older toolchains and would cause breakage. Embed various OCSP fields. Make no-psk compile without warnings. PR#4035 "DTLS: remove unused cookie field Note that this commit constifies a user callback parameter and therefore will break compilation for applications using this callback. But unless they are abusing write access to the buffer "Don't treat a bare OCTETSTRING as DigestInfo in int_rsa_verify The function int_rsa_verify is an internal function used for verifying an RSA signature. It takes an argument |dtype| which indicates the digest type that was used. Dependant on that digest type the processing of the signature data will vary. In particular if |dtype == NID_mdc2| and the signature data is a bare OCTETSTRING then it is treated differently to the default case where the signature data is treated as a DigestInfo (X509_SIG). Due to a missing ""else"" keyword the logic actually correctly processes the OCTETSTRING format signature first "Don't check pointer we just freed Move BN_CTX_start() call so the error case can always call BN_CTX_end(). Signed-off-by: Kurt Roeckx <kurt@roeckx.be> "Properly check return type of DH_compute_key() It returns -1 on error Set flags to 0 before calling BN_with_flags() BN_with_flags() will read the dest->flags to keep the BN_FLG_MALLOCED but overwrites everything else. Signed-off-by: Kurt Roeckx <kurt@roeckx.be> Fix travis builds on master -Allow mingw debug builds to fail on Travis CI -Fix Travis email notifications config -Rename a variable to avoid a bogus warning with old GCC error: declaration of ``dup'' shadows a global declaration [-Werror=shadow] -Disable pedantic ms-format warnings with mingw -Properly define const DH parameters -Restore --debug flag in Travis CI builds; -d would get incorrectly passed to ./Configure in mingw debug builds. Signed-off-by: Rich Salz <rsalz@openssl.org> Don't try and parse boolean type. Address more Windows warnings illuminated by mingw. "ssl_sess.c: grab a copy of the session ID The user callback takes a non-const pointer "ssl3_get_client_hello: rearrange logic Move all packet parsing to the beginning of the method. This limits the SSLv2 compatibility soup to the parsing "Fix make depend for things being built in subdirectories Some makedepend mechanisms remove all directory information in the target Harmonize pointer printing and size_t-fy casts. bio/bss_log.c: harmonize format string to silence -Wformat. Address Windows warnings in apps/. "Explicitly cast INVALID_SOCKET to (int) to address warnings on Windows. Even though SOCKET is effectively declared as (void *) on Windows Free up ASN.1 structures at top level only. When a decoding error in ASN.1 occurs only free up the partial structure at the top level. This simplifies embedded handling and fixes freeing up of structures when presented with malformed input. Fix more d2i cases to properly update the input pointer Thanks to David Benjamin <davidben@google.com> for pointing them out. "Revert ""Custom cipher constants"" This reverts commit 3aabc1dd1c969e60bdea8f827d6645ff04c56b67." Custom cipher constants Add some custom ctrls for Engine specific use. "Change the DEFAULT ciphersuites to exclude DES "Make update / libeay.num fix Looks like someone forgot to do a ""make update"" since crypto/ts/Makefile keeps changing.  So include that. Second is that the declare_dh_bn macro fools the libeay.num script. The declarations are only needed in one file (dh_rfc5114) so remove them from the header and put the ""raw"" declarations directly into that file." Add GOST12 cms/smime capabilities Add additional NID references in the CMS/SMIME capabilities code to cater for GOST12. Patch supplied by Dmitry Belyavsky <beldmit@gmail.com> "Fix no-stdio build Much related/similar work also done by Ivan Nestlerode <ivan.nestlerode@sonos.com> +Replace FILE BIO's with dummy ops that fail. +Include <stdio.h> for sscanf() even with no-stdio (since the declaration is there). We rely on sscanf() to parse the OPENSSL_ia32cap environment variable engine/e_capi.c: fix various warnings. Fix -Wshadow warnings in mingw builds. Fix pedantic warnings in mingw builds. "Fix prototypes in e_ossttest.c. Problem was exposed in mingw64 build RT3948: Some structs have confusing names. Signed-off-by: Rich Salz <rsalz@akamai.com> Skylake performance results. "GH408 follow-on: update buflen Some builds break Change --debug to -d for compat with old releases. Change ossltest engine to manually allocate cipher_data The ossltest engine wraps the built-in implementation of aes128-cbc. Normally in an engine the cipher_data structure is automatically allocated by the EVP layer. However this relies on the engine specifying up front the size of that cipher_data structure. In the case of ossltest this value isn't available at compile time. This change makes the ossltest engine allocate its own cipher_data structure instead of leaving it to the EVP layer. Properly format linux-arm64ilp32 target config Otherwise the ./config script fails with errors like: > Operating system: x86_64-whatever-linux2 > This system (linux-x86_64) is not supported. See file INSTALL for details. The failure was introduced by a93d3e0. RT#4062 "Fix the OCSP test on Windows The windows test uses the pseudo file ""nul"" to indicate no file for the -CApath option. This does not work on all versions of Windows. Instead use the new -no-CApath option." Document -no-CApath and -no-CAfile Add documentation to all the appropriate apps for the new -no-CApath and -no-CAfile options. "Add support for -no-CApath and -no-CAfile options For those command line options that take the verification options -CApath and -CAfile Allow ILP32 compilation in AArch64 assembly pack. "ARMv4 assembly pack: implement support for Thumb2. As some of ARM processors Restore the old interactive prompt. Sanity check cookie_len Add a sanity check that the cookie_len returned by app_gen_cookie_cb is valid. Clarify DTLSv1_listen documentation Clarify that user code is required to allocate sufficient space for the addressing scheme in use in the call to DTLSv1_listen. Fix s_server DTLSv1_listen issues Use sockaddr_storage not sockaddr for the client IP address to allow for IPv6. Also fixed a section of code which was conditional on OPENSSL_NO_DTLS1 which should not have been. Add DTLSv1_listen documentation Adds a new man page to cover the DTLSv1_listen() function. "Add -listen documentation This commit adds documentation for the new -listen option to s_server. Along the way it also adds documentation for -dtls Add support for DTLSv1_listen in s_server DTLSv1_listen is a commonly used function within DTLS solutions for listening for new incoming connections. This commit adds support to s_server for using it. "DTLSv1_listen rewrite The existing implementation of DTLSv1_listen() is fundamentally flawed. This function is used in DTLS solutions to listen for new incoming connections from DTLS clients. A client will send an initial ClientHello. The server will respond with a HelloVerifyRequest containing a unique cookie. The client the responds with a second ClientHello - which this time contains the cookie. Once the cookie has been verified then DTLSv1_listen() returns to user code Fix the rehash test on Windows The openssl rehash command is not available on some platforms including Windows. This change skips the associated tests if rehash is not available. PACKET: simplify Get rid of the third field that is no longer needed. "Remove ssl_put_cipher_by_char Since SSLv3 "Make BUF_strndup() read-safe on arbitrary inputs BUF_strndup was calling strlen through BUF_strlcpy "GH398: Add mingw cross-compile Move certificate request and CRL routines to x509 dir. Update SEE ALSO sections. Document signature accessors. Extension parsing and encoding docs. Document i2d_re_X509_REQ_tbs() and i2d_re_X509_CRL_tbs(). Use accessors in X509_REQ_print(). Use accessor functions in X509_CRL_print(). Additional X509_CRL accessors. Add accessors for X509_REVOKED. "Remove ""noise"" comments from TS files." "RT3479: Add UTF8 support to BIO_read_filename() If we use BIO_new_file() "RT3823: Improve the robustness of event logging There are a couple of minor fixes here: 1) Handle the case when RegisterEventSource() fails (which it may for various reasons) and do the work of logging the event only if it succeeds. 2) Handle the case when ReportEvent() fails and do our best in debug builds to at least attempt somehow indicate that something has gone wrong. The typical situation would be someone running tools like DbMon Add GOST extensions to PKCS#5 GOST extends PKCS5 PBES2/PBKDF2 with some additional GOST specific PRFs. Based on a patch provided by Dmitry Belyavsky <beldmit@gmail.com> Fix SRP memory leaks There were some memory leaks in the creation of an SRP verifier (both on successful completion and also on some error paths). "Fix -srpvfile option in srp command line The -srpvfile option was broken in the srp command line app. Using it would always result in ""-dbfile and -configfile cannot be specified together."" The error message is also wrong because the option is ""-srpvfile"" not ""-dbfile"" Move EVP_PKEY_METHOD into private headers. "Correct sha tests These tests were checking for specific sha variants "Add more features that may be disabled Have a look at the directories in crypto/ Add more features that may be disabled A grep of OPENSSL_NO_ in the rest of the source tree revealed a few more features to check. NOTE: there are some of those macros that I ignore because a check of them doesn't seem useful to external apps.  This might change later on. Add Utils.pm Add Utils.pm for test utilities. This currently just contains one function: disabled which checks if a feature is disabled based on the output of openssl list -disabled "Make sure to actually use @smime_cms_comp_test when testing it... Obvious typo Fix some test failures when Configured with zlib TLSProxy was failing if we are Configured with compression because it doesn't support it. This fix simply switches compression off for the purposes of the test. "Print out a list of disabled features. New option ""openssl list -disabled"" this lists a set of disabled features in a form which can be conveniently parsed by the test framework so it knows which tests to skip." "Remove PACKET_back It's unused "Make sure OPENSSL_cleanse checks for NULL In master we have the function OPENSSL_clear_free(x "base64 decode: check for high bit Previously "RT3757: base64 encoding bugs Rewrite EVP_DecodeUpdate. In particular: reject extra trailing padding Remove PACKET_(get|goto)_bookmark The bookmark API results in a lot of boilerplate error checking that can be much more easily achieved with a simple struct copy. It also lays the path for removing the third PACKET field. RT4047: Set reference count earlier Make sure it's valid very early. Signed-off-by: Rich Salz <rsalz@openssl.org> Change X509_VAL in X509 structure to embedded. "Fix build on mingw When OPENSSL_EXPORT_VAR_AS_FUNCTION is defined Fix return values when adding serverinfo fails. Extend the notes on how to do testing These notes include the use of HARNESS_VERBOSE (see the manual for Test::Harness) and the method to enumerate specific tests to run. Fix PSK identity hint handling. For server use a PSK identity hint value in the CERT structure which is inherited when SSL_new is called and which allows applications to set hints on a per-SSL basis. The previous version of SSL_use_psk_identity_hint tried (wrongly) to use the SSL_SESSION structure. PR#4039 "Fix ""defined but not used"" warnings." Enable -Wmissing-variable-declarations and -Wincompatible-pointer-types-discards-qualifiers (the latter did not require any code changes). Unwriteable directories are errors Make the script and app match the documentation. "RT3754: check for NULL pointer Fix both the caller to error out on malloc failure Restore SSLerr on PACKET_strndup failure. "RT3992: Make SCT #ifdeffable. This code does open-coded division on 64-bit quantities and thus when building with GCC on 32-bit platforms will require functions such as __umoddi3 and __udivdi3 from libgcc. In constrained environments such as firmware "Make sure the temporary error log resides in a well defined location If a test recipe does something like this: indir ""foo.$$"" => sub { chmod 0500 PACKET: add PACKET_memdup and PACKET_strndup Use each once in s3_srvr.c to show how they work. Also fix a bug introduced in c3fc7eeab884b6876a1b4006163f190d325aa047 and made apparent by this change: ssl3_get_next_proto wasn't updating next_proto_negotiated_len "RT3993: Fix error found by VS2008 Cast and then negate "RT3969: Add OPENSSL_SYS_UEFI This provides support for building in the EDK II reference implementation of UEFI. Most UEFI firmware in existence uses OpenSSL for implementing the core cryptographic functionality needed for Secure Boot. This has always previously been handled with external patches to OpenSSL but we are now making a concerted effort to eliminate those. In this mode Fix rehash/c_rehash doc and behavior. Both now warn once if directory isn't writeable. Both now warn on file-write errors (multiple times). Update manpage to describe both program and script correctly. Fix uninit warning. Remove unnecessary casts. Nothing to add is an error. Fix a few tests that depended on the wrong algorithm check test_ecdh and test_ecdsa are made to depend on no-ec being false. test_hmac is made not to depend on algorithm at all. Based on a contribution by Alessandro Ghedini <alessandro@ghedini.me> "Adjust the general fill-column in doc/dir-locals.example.el Having a general fill-column of 78 may look nice at first sight Adjust the verify_extra test recipe to its executable The verify_extra_test was recently changed to take its parameters as arguments instead of having them hardcoded. "Make sure that 80-test_ca.t finds all the config files This recipe counted too much on being called with test/ as its current working directory.  That's a mistake on Remake the testsslproxy tests The testsslproxy tests turned out to be useless as they were.  They were really just for show and the results were ignore.  Now they are changed into a more veerifiable test "Small fix in OpenSSL::Test Be careful when shifting in a function argument "Correct test name Some tests were copied from test_jpake Remake test/sslsessionticktest.pl into a recipe Adapt the libssl test harness testing scripts to new testing framework This involves adding $TOP/util as perl library in test/run_tests.pl. "Check the validity of MINFO MINFO may be an old file lying around "Remove special x509 test conversions Following the commit from July 2 that removed netscape formated certs "Push the line buffer filter on the out BIO on VMS VMS files are normally record oriented rather than stream oriented. This means that every write() will create a new record "Document OpenSSL::Test and OpenSSL::Test::Simple For OpenSSL::Test "Change OpenSSL::Test to be an extension of Test::More It became tedious as well as error prone to have all recipes use Test::More as well as OpenSSL::Test.  The easier way is to make OpenSSL::Test an extension of Test::More "New feature: STOPTEST When the environment variable STOPTEST is defined (with any value other than the empty string) Add version numbers on some modules we use. "Tone down the requirements of a test that will go away. 00-check_testexes.t was a way for me to check that I didn't forget a compiled test app.  The way it worked was to require MINFO to be present. Considering the need for this test has diminished considerably at this point "Adapt mk1mf.pl and helpers to the new testing framework. With the new testing framework "Simplify very simple test recipes further. Very simple test recipes easily become tedious "Remove test targets from Makefile Ignore the log files The new test framework produces a lot of log files (one for each test).  Git doesn't need to know. Add engine and evp test recipes. "Add a helper script for key file format conversion tests As tests are done until now Add the encryption test recipe This tests all available openssl cipher commands. "Add recipes for individual block ciphers "Add math tests recipes The math recipes are among the heavier "Groundwork for a perl based testing framework The idea with this perl based testing framework is to make use of what's delivered with perl and exists on all sorts of platforms. The choice came to using Test::More and Test::Harness Updates for NumericString support Ensure that EBCDIC support works and update a comment. Add NumericString support GOST requires improved NumericString support. Fix build break due to rehash command The build was breaking due to a Makefile recipe expecting an openssl version to be on the PATH with support for the rehash command. "Add rehash command to openssl On Unix/Linux platforms Small fix: make istext static This takes away a build failure in some cases. Fix enc so it properly treats BASE64 as text To set both the incoming and outgoing data when 'encrypting' or 'decrypting' to FORMAT_BASE64 wasn't quite the right thing to do. Fixup merge conflicts in util/libeay.num "Change the treatment of stdin and stdout to allow binary data If the output to stdout or the input from stdin is meant to be binary "Have binary mode when the format is binary "Have the test executables output in text mode The test executables use standard output and standard error for text output "Change the way apps open their input and output files The different apps had the liberty to decide whether they would open their input and output files in binary mode or not Cleanup testtsa script Add RUN function; remove single-use functions and use their body inline. RT3955: Reduce some stack usage Use malloc/free instead of big onstack buffers. "Use the shlib wrapper when running nptest Since there seems to be no way to avoid linking to libssl and libcrypto "Supply a build rule for the recently added nptest Commit d4ab70f27cb7e518e6a9d6323c996cc3feb7496b added a test program to check that the NULL pointer is represented as all zero bits "Test for NULL ptr == 0 Add a test to ensure that ""char *p = NULL"" is equivalent to all-bytes-zero." "Revert ""OPENSSL_NO_xxx cleanup: RFC3779"" This reverts the non-cleanup parts of commit c73ad69017. We do actually have a reasonable use case for OPENSSL_NO_RFC3779 in the EDK2 UEFI build Win32 build fix: include internal/numbers.h to get UIN32_MAX RT3674: Make no-cms build work. Also has changes from from David Woodhouse <David.Woodhouse@intel.com> and some tweaks from me. Signed-off-by: Rich Salz <rsalz@openssl.org> Two changes at ones lead to a confused libeay.num.  Fix Check OPENSSL_gmtime_diff It's test code that only runs on 64bit time_t machines. Move it to a standalone test/gmdifftest Add and use OPENSSL_zalloc There are many places (nearly 50) where we malloc and then memset. Add an OPENSSL_zalloc routine to encapsulate that. (Missed one conversion; thanks Richard) Also fixes GH328 Extend ciphersuite test coverage. Add support for testing ECDSA and DSA ciphersuites. "Update ssltest certificate handling. Use SSL_CONF for certificate handling is ssltest.c Move OPENSSL_ITEM to store.h The only place that uses it. "Cleaner handling of ""cnid"" in do_x509_check Avoid using cnid = 0 "Better handling of verify param id peername field Initialize pointers in param id by the book (explicit NULL assignment "RT3984: Fix clang compiler warning on Mac OS X where %ld is used for uint64_t. clang suggests %llu instead RT 3493: fix RSA test - Pass in the right ciphertext length to ensure we're indeed testing ciphertext corruption (and not truncation). - Only test one mutation per byte to not make the test too slow. - Add a separate test for truncated ciphertexts. "RT3767: openssl_button.gif should be PNG No check bn_new return value Slightly modified from the original PR. Signed-off-by: Rich Salz <rsalz@akamai.com> Remove asn1-kludge option. Remove asn1-kludge option from the req utility. It was a decade old workaround for CAs and software which required an invalid encoding of PKCS#10 certificate requests: omitting the attributes field even though it is not OPTIONAL. BN_mod_exp_mont_consttime: check for zero modulus. Don't dereference |d| when |top| is zero. Also test that various BIGNUM methods behave correctly on zero/even inputs. Follow-up to b11980d79a52ec08844f08bea0e66c04b691840b Add emacs CC mode style for OpenSSL This hopefully conforms closely enough to the current code style. Fix 4c42ebd; forgot to inutil util/libeay.num "GH354: Memory leak fixes Fix more potential leaks in X509_verify_cert() Fix memory leak in ClientHello test Fix memory leak in gost2814789 test Fix potential memory leak in PKCS7_verify() Fix potential memory leaks in X509_add1_reject_object() Refactor to use ""goto err"" in cleanup. Signed-off-by: Rich Salz <rsalz@akamai.com>" "Various doc fixes. Make all mention of digest algorithm use ""any supported algorithm"" RT2071 "Clean up reset of read/write sequences Use sizeof instead of an explicit size "Fix SSLv2-compatible ClientHello processing. If the client challenge is less than 32 bytes "PACKET: constify where possible The PACKET should hold a 'const unsigned char*' underneath as well but the legacy code passes the record buffer around as 'unsigned char*' (to callbacks "Remove _locked memory functions. Undocumented "BN_bin2bn handle leading zero's If a binary sequence is all zero's Add NewSessionTicket test suite Add a set of tests for checking that NewSessionTicket messages are behaving as expected. "Fix TLSProxy end of test detection Previously TLSProxy would detect a successful handshake once it saw the server Finished message. This causes problems with abbreviated handshakes "Fix DTLS session ticket renewal A DTLS client will abort a handshake if the server attempts to renew the session ticket. This is caused by a state machine discrepancy between DTLS and TLS discovered during the state machine rewrite work. The bug can be demonstrated as follows: Start a DTLS s_server instance: openssl s_server -dtls Start a client and obtain a session but no ticket: openssl s_client -dtls -sess_out session.pem -no_ticket Now start a client reusing the session More test cases. Add DSA tests. Add tests to verify signatures against public keys. This will also check that a public key is read in correctly. Restore previous behaviour of only running one algorithm when -evp alg is used. Submitted by: Eric Young <eay@pobox.com> CCM support. Fix FAQ formatting for new website. Add missing return check for PACKET_buf_init The new ClientHello PACKET code is missing a return value check. "GH364: Free memory on an error path Part of RT 3997 Per Ben PACKETise Server Certificate processing Use the PACKET API to process an incoming server Certificate message. Return error for unsupported modes. PR#3974 PR#3975 Fix memory leak if setup fails. Err isn't always malloc failure. "Fix ""make test"" seg fault with SCTP enabled When config'd with ""sctp"" running ""make test"" causes a seg fault. This is actually due to the way ssltest works - it dives under the covers and frees up BIOs manually and so some BIOs are NULL when the SCTP code does not expect it. The simplest fix is just to add some sanity checks to make sure the BIOs aren't NULL before we use them. This problem occurs in master and 1.0.2. The fix has also been applied to 1.0.1 to keep the code in sync." "Fix missing return value checks in SCTP There are some missing return value checks in the SCTP code. In master this was causing a compilation failure when config'd with ""--strict-warnings sctp""." Use dynamic engine for libssl test harness Use a dynamic engine for ossltest engine so that we can build it without subsequently deploying it during install. We do not want people accidentally using this engine. Extend TLSProxy capabilities Add ServerHello parsing to TLSProxy. Also add some (very) limited ServerKeyExchange parsing. Add the capability to set client and server cipher lists Fix a bug with fragment lengths Add some libssl tests Two tests are added: one is a simple version tolerance test; the second is a test to ensure that OpenSSL operates correctly in the case of a zero length extensions block. The latter was broken inadvertently (now fixed) and it would have been helpful to have a test case for it. "Add a libssl test harness This commit provides a set of perl modules that support the testing of libssl. The test harness operates as a man-in-the-middle proxy between s_server and s_client. Both s_server and s_client must be started using the ""-testmode"" option which loads the new OSSLTEST engine. The test harness enables scripts to be written that can examine the packets sent during a handshake Add OSSLTest Engine This engine is for testing purposes only. It provides crippled crypto implementations and therefore must not be used in any instance where security is required. This will be used by the forthcoming libssl test harness which will operate as a man-in-the-middle proxy. The test harness will be able to modify TLS packets and read their contents. By using this test engine packets are not encrypted and MAC codes always verify. Check for 0 modulus in BN_MONT_CTX_set The function BN_MONT_CTX_set was assuming that the modulus was non-zero and therefore that |mod->top| > 0. In an error situation that may not be the case and could cause a seg fault. This is a follow on from CVE-2015-1794. "Fix seg fault with 0 p val in SKE If a client receives a ServerKeyExchange for an anon DH ciphersuite with the value of p set to 0 then a seg fault can occur. This commits adds a test to reject p Normalise make errors output make errors wants things in a different order to the way things are currently defined in the header files. The easiest fix is to just let it reorder it. GH365: Missing #ifdef rename. RT3999: Remove sub-component version strings Especially since after the #ifdef cleanups this is not useful. RT3998: fix X509_check_host.pod release to 1.0.2 Signed-off-by: Rich Salz <rsalz@akamai.com> "Fix clang uninitialized variable warning. We could just initialize it "Revert ""Fix uninitalised warning."" This reverts commit 704563f04a8401781b359906c1f88a30e12af69c. Reverting in favour of the next commit which removes the underlying cause of the warning." Change error reason to match previous behaviour. Fix unhandled error condition in sslv2 client hello parsing. --strict-warnings started showing warnings for this today... Surely an error should be raised if these reads fail? Fix SRTP s_client/s_server options The -use_srtp s_client/s_server option is supposed to take a colon separated string as an argument. In master this was incorrectly set to expect a filename. PACKETise NextProto Change NextProto message processing to use the PACKET API. PACKETise CertificateVerify processing Modify CertificateVerify processing to use the new PACKET API. Fix a bug in the new PACKET implementation Some of the PACKET functions were returning incorrect data. An unfortunate choice of test data in the unit test was masking the failure. Fix warning when compiling with no-ec2m EC_KEY_set_public_key_affine_coordinates was using some variables that only apply if OPENSSL_NO_EC2M is not defined. "Fix ssl3_read_bytes handshake fragment bug The move of CCS into the state machine introduced a bug in ssl3_read_bytes. The value of |recvd_type| was not being set if we are satisfying the request from handshake fragment storage. This can occur Move DTLS CCS processing into the state machine Continuing on from the previous commit this moves the processing of DTLS CCS messages out of the record layer and into the state machine. "Move TLS CCS processing into the state machine The handling of incoming CCS records is a little strange. Since CCS is not a handshake message it is handled differently to normal handshake messages. Unfortunately whilst technically it is not a handhshake message the reality is that it must be processed in accordance with the state of the handshake. Currently CCS records are processed entirely within the record layer. In order to ensure that it is handled in accordance with the handshake state a flag is used to indicate that it is an acceptable time to receive a CCS. Previously this flag did not exist (see CVE-2014-0224) PACKETise ClientHello processing Uses the new PACKET code to process the incoming ClientHello including all extensions etc. "Add initial packet parsing code Provide more robust (inline) functions to replace n2s Add -Wconditional-uninitialized to clang strict warnings. Only define PAGE_SIZE if not already defined. Remove erroneous server_random filling Commit e481f9b90b164 removed OPENSSL_NO_TLSEXT from the code. Previously if OPENSSL_NO_TLSEXT *was not* defined then the server random was filled during getting of the ClientHello. If it *was* defined then the server random would be filled in ssl3_send_server_hello(). Unfortunately in commit e481f9b90b164 the OPENSSL_NO_TLSEXT guards were removed but *both* server random fillings were left in. This could cause problems for session ticket callbacks. RT3742: Add xmpp_server to s_client. "Add RFC4279 PSK premaster secret derivation. Move PSK premaster secret algorithm to ssl_generate_master secret so existing key exchange code can be used and modified slightly to add the PSK wrapping structure. "Extended PSK server support. Add support for RSAPSK "Extended PSK client support. Add support for RSAPSK Check for kECDH with extensions. Enable PSK if corresponding mask set. Disable all PSK if no callback. New PSK aliases. Fix write failure handling in DTLS1.2 The DTLS code is supposed to drop packets if we try to write them out but the underlying BIO write buffers are full. ssl3_write_pending() contains an incorrect test for DTLS that controls this. The test only checks for DTLS1 so DTLS1.2 does not correctly clear the internal OpenSSL buffer which can later cause an assert to be hit. This commit changes the test to cover all DTLS versions. RT#3967 Tweak README about rt and bug reporting. Add test for SSL_set_session_ticket_ext The function SSL_set_session_ticket_ext sets the ticket data to be sent in the ClientHello. This is useful for EAP-FAST. This commit adds a test to ensure that when this function is called the expected ticket data actually appears in the ClientHello. "Remove support for SSL3_FLAGS_DELAY_CLIENT_FINISHED This flag was not set anywhere within the codebase (only read). It could only be set by an app reaching directly into s->s3->flags and setting it directly. However that method became impossible when libssl was opaquified. Even in 1.0.2/1.0.1 if an app set the flag directly it is only relevant to ssl3_connect() "Some cleanups for crypto/bn Create bn_free_d utility routine and use it. Fix RT3950 Also a missing cleanse Update demo. Use new SSL_CONF options in demo. Add intermediate and root CAs and update all to use SHA256. "Rewrite crypto/ex_data Removed ability to set ex_data impl at runtime.  This removed these three functions: const CRYPTO_EX_DATA_IMPL *CRYPTO_get_ex_data_implementation(void); int CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL *i); int CRYPTO_ex_data_new_class(void); It is no longer possible to change the ex_data implementation at runtime.  (Luckily those functions were never documented :) Also removed the ability to add new exdata ""classes.""  We don't believe this received much (if any) use Remove obsolete key formats. Remove support for RSA_NET and Netscape key format (-keyform n). Also removed documentation of SGC. "Revert ""Missing perldoc markup around < literal"" This reverts commit e5c0bc6cc49a23b50a272801c4bd53639c25fca4." GH322: Fix typo in generated comment. "Conversion to UTF-8 where needed This leaves behind files with names ending with '.iso-8859-1'.  These should be safe to remove.  If something went wrong when re-encoding Small script to re-encode files that need it to UTF-8 This requires 'iconv' and that 'file' can take the options '-b' and '-i'. "Stop using tardy Instead of piping through tardy Sort @sstacklst correctly. "Extend -show_chain option to verify to show more info The -show_chain flag to the verify command line app shows information about the chain that has been built. This commit adds the text ""untrusted"" against those certificates that have been used from the untrusted list." Add help text for some verify options Fills in the help text for a number of options to verify that were blank. Add documentation for some missing verify options Fills in a couple of verify options that were lacking documentation. "Reject calls to X509_verify_cert that have not been reinitialised The function X509_verify_cert checks the value of |ctx->chain| at the beginning "Add test for CVE-2015-1793 This adds a test for CVE-2015-1793. This adds a new test file verify_extra_test.c "Fix alternate chains certificate forgery issue During certificate verfification Use single master secret generation function. Check dgram_sctp_write() return value. Add docs for ssl verification parameter functions. PSK trace keyex fixes. "Tidy up ssl3_digest_cached_records logic. Rewrite ssl3_digest_cached_records handling. Only digest cached records if digest array is NULL: this means it is safe to call ssl3_digest_cached_records multiple times (subsequent calls are no op). Remove flag TLS1_FLAGS_KEEP_HANDSHAKE instead only update handshake buffer if digest array is NULL. Add additional ""keep"" parameter to ssl3_digest_cached_records to indicate if the handshake buffer should be retained after digesting cached records (needed for TLS 1.2 client authentication)." "More secure storage of key material. Add secure heap for storage of private keys (when possible). Add BIO_s_secmem() GH297: Fix NAME section of SSL_CTX_use_serverinfo.pod Signed-off-by: Rich Salz <rsalz@akamai.com> RT3682: Avoid double-free on OCSP parse error Found by Kurt Cancemi. "Rearrange rsaz A small rearrangement so the inclusion of rsaz_exp.h would be unconditional RT3907-fix Typo in local variable name; introduced by previous fix. Remove SESS_CERT entirely. Move peer chain to SSL_SESSION structure. Remove certificates from sess_cert As numerous comments indicate the certificate and key array is not an appopriate structure to store the peers certificate: so remove it and just the s->session->peer instead. "Cleanup mttest.c : use BIO_free only "Cleanup mttest.c : modernise output Construct bio_err and bio_stdout from file handles instead of FILE pointers "Revert ""Avoid duplication."" This reverts commit d480e182fe20fcaeca7817a4693eeaf594bb1a32. Commit broke TLS handshakes due to fragility of digest caching: that will be fixed separately." "RT2547: Tighten perms on generated privkey files When generating a private key Refactor into clear_ciphers; RT3588 While closing RT3588 (Remove obsolete comment) Kurt and I saw that a few lines to completely clear the SSL cipher state could be moved into a common function. Fix argument processing error from the option parsing change over. Fix argument processing error from the option parsing change over. Encode b == NULL or blen == 0 as zero. PR#3904 "Allow a zero length extension block It is valid for an extension block to be present in a ClientHello Update CHANGES and NEWS Updates to CHANGES and NEWS to take account of the latest security fixes. bn/bn_gf2m.c: avoid infinite loop wich malformed ECParamters. CVE-2015-1788 PKCS#7: Fix NULL dereference with missing EncryptedContent. CVE-2015-1790 Fix length checks in X509_cmp_time to avoid out-of-bounds reads. Also tighten X509_cmp_time to reject more than three fractional seconds in the time; and to reject trailing garbage after the offset. CVE-2015-1789 "More ssl_session_dup fixes Fix error handling in ssl_session_dup Tidy disabled algorithm handling. Determine disabled algorithm masks when algorithms are loaded instead of recalculating them each time. Restore GOST mac setup. Restore GOST mac setup which was accidentally removed during cipher refactor. Remove SSL_OP_TLS_BLOCK_PADDING_BUG This is a workaround so old that nobody remembers what buggy clients it was for. It's also been broken in stable branches for two years and nobody noticed (see https://boringssl-review.googlesource.com/#/c/1694/). "DTLS handshake message fragments musn't span packets It should not be possible for DTLS message fragments to span multiple packets. However previously if the message header fitted exactly into one packet "Fix leak in HMAC error path In the event of an error in the HMAC function "EC_POINT_is_on_curve does not return a boolean The function EC_POINT_is_on_curve does not return a boolean value. It returns 1 if the point is on the curve Change BIO_number_read and BIO_number_written() to be 64 bit The return type of BIO_number_read() and BIO_number_written() as well as the corresponding num_read and num_write members in the BIO structure has been changed from unsigned long to uint64_t. On platforms where an unsigned long is 32 bits (e.g. Windows) these counters could overflow if >4Gb is transferred. With thanks to the Open Crypto Audit Project for reporting this issue. "Replace memset with OPENSSL_clear_free() BUF_MEM_free() attempts to cleanse memory using memset immediately prior to a free. This is at risk of being optimised away by the compiler Make sure test/gost2814789test.c can see configuration macros test/gost2814789test.c needs to include openssl/e_os2.h or it wouldn't see the defined OPENSSL_NO_* macros. "When making libcrypto from apps or test "No fprintf in the txt_db component Also removed a source file that isn't built Properly check certificate in case of export ciphers. Use CRYPTO_memcmp when comparing authenticators Pointed out by Victor Vasiliev (vasilvv@mit.edu) via Adam Langley (Google). Check ASN1_INTEGER_get for errors. Check return value when calling ASN1_INTEGER_get to retrieve a certificate serial number. If an error occurs (which will be caused by the value being out of range) revert to hex dump of serial number. "Set error code GH293: Typo in CHANGES file. Allow all curves when the client doesn't send an supported elliptic curves extension At least in the case of SSLv3 we can't send an extention. Remove misleading comment Remove a comment that suggested further clean up was required. DH_free() performs the necessary cleanup. With thanks to the Open Crypto Audit Project for reporting this issue. "Fix off-by-one error in BN_bn2hex A BIGNUM can have the value of -0. The function BN_bn2hex fails to account for this and can allocate a buffer one byte too short in the event of -0 being used Fix DTLS session resumption The session object on the client side is initially created during construction of the ClientHello. If the client is DTLS1.2 capable then it will store 1.2 as the version for the session. However if the server is only DTLS1.0 capable then when the ServerHello comes back the client switches to using DTLS1.0 from then on. However the session version does not get updated. Therefore when the client attempts to resume that session the server throws an alert because of an incorrect protocol version. "Fix compilation failure for some tool chains Some tool chains (e.g. android) do not define IP_PMTUDISC_PROBE RT832: Use REUSEADDR in ocsp responder I also re-ordered some of #ifdef's. "Add the macro OPENSSL_SYS_WIN64 This is for consistency. Additionally GH249: Fix bad regexp in arg parsing. Signed-off-by: Rich Salz <rsalz@akamai.com> Fix race condition in NewSessionTicket If a NewSessionTicket is received by a multi-threaded client when attempting to reuse a previous ticket then a race condition can occur potentially leading to a double free of the ticket data. CVE-2015-1791 This also fixes RT#3808 where a session ID is changed for a session already in the client session cache. Since the session ID is the key to the cache this breaks the cache access. Parts of this patch were inspired by this Akamai change: https://github.com/akamai/openssl/commit/c0bf69a791239ceec64509f9f19fcafb2461b0d3 "Check the message type requested is the type received in DTLS dtls1_get_message has an |mt| variable which is the type of the message that is being requested. If it is negative then any message type is allowed. However the value of |mt| is not checked in one of the main code paths Remove struct ccs_header_st struct ccs_header_st is not used so it should be removed. "Remove OPENSSL_CONF=/dev/null from tests Almost two months ago "Restore module loading The module loading feature got broken a while ago "RT3876: Only load config when needed Create app_load_config() "Change return type of the new accessors The new accessors SSL_get_client_random "Change the new functions to use size_t Change the new SSL_get_client_random() "Add new functions to extract {client "Add SSL_get_client_ciphers() to return ciphers from ClientHello On the server side "Enable DH tests In master Add function PKCS8_set0_pbe This adds a new function which will encrypt a private key using PKCS#8 based on an X509_ALGOR structure and reimplements PKCS8_encrypt to use it. Update pkcs8 utlity to use PKCS8_set0_pbe. "Fix ssltest to use 1024-bit DHE parameters Also add more ciphersuite test coverage Don't check for a negative SRP extension size The size of the SRP extension can never be negative (the variable |size| is unsigned). Therefore don't check if it is less than zero. RT#3862 Fix error check in GOST engine The return value of i2d functions can be negative if an error occurs. Therefore don't assign the return value to an unsigned type and *then* check if it is negative. RT#3862 Handle unsigned struct timeval members The members of struct timeval on OpenVMS are unsigned. The logic for calculating timeouts needs adjusting to deal with this. RT#3862 Configure: replace -mv8 with -mcpu=v8 in SPARC config lines. RT#3860 bn/bn_lcl.h: fix MIPS-specific gcc version check. RT#3859 Fix segfault in ec command Thanks to Brian Carpenter <brian.carpenter@gmail.com> for finding this. "Don't send an alert if we've just received one If the record received is for a version that we don't support fix s_client crash The 'http proxy' commit broke s_client default host/port value. Thanks to Matt for the simplest fix. "Set first_packet for TLS clients Version negotiation was broken (one of the late changes in the review process broke it). The problem is that TLS clients do not set first_packet bn/asm/x86_64-mont5.pl: fix valgrind error. bn_get_bits5 was overstepping array boundary by 1 byte. It was exclusively read overstep and data could not have been used. The only potential problem would be if array happens to end on the very edge of last accesible page. "bn/bn_gf2m.c: appease STACK Fix update and depend in engines/ The update: target in engines/ didn't recurse into engines/ccgost. The update: and depend: targets in engines/ccgost needed a fixup. Fix typo setting up certificate masks The certificate masks are used to select which ciphersuite we are going to use. The variables |emask_k| and |emask_a| relate to export grade key exchange and authentication respecitively. The variables |mask_k| and |mask_a| are the equivalent versions for non-export grade. This fixes an instance where the two usages of export/non-export were mixed up. In practice it makes little difference since it still works! "Remove export static DH ciphersuites Remove support for the two export grade static DH ciphersuites. These two ciphersuites were newly added (along with a number of other static DH ciphersuites) to 1.0.2. However the two export ones have *never* worked since they were introduced. It seems strange in any case to be adding new export ciphersuites "Fix off-by-one in BN_rand If BN_rand is called with |bits| set to 1 and |top| set to 1 then a 1 byte buffer overflow can occur. There are no such instances within the OpenSSL at the moment. Thanks to Mateusz Kocielski (LogicalTrust) "Reject negative shifts for BN_rshift and BN_lshift The functions BN_rshift and BN_lshift shift their arguments to the right or left by a specified number of bits. Unpredicatable results (including crashes) can occur if a negative number is supplied for the shift value. Thanks to Mateusz Kocielski (LogicalTrust) Remove support for OPENSSL_NO_TLSEXT Given the pervasive nature of TLS extensions it is inadvisable to run OpenSSL without support for them. It also means that maintaining the OPENSSL_NO_TLSEXT option within the code is very invasive (and probably not well tested). Therefore it is being removed. "Fix the update target and remove duplicate file updates We had updates of certain header files in both Makefile.org and the Makefile in the directory the header file lived in.  This is error prone and also sometimes generates slightly different results (usually just a comment that differs) depending on which way the update was done. This removes the file update targets from the top level Makefile Lost alert in DTLS If a client receives a bad hello request in DTLS then the alert is not sent correctly. RT#2801 Signed-off-by: Matt Caswell <matt@openssl.org> Fix various OPENSSL_NO_* options This fixes compilation with various OPENSSL_NO_* options that got broken during the big apps cleanup. "Fix a memory leak in compression The function RECORD_LAYER_clear() is supposed to clear the contents of the RECORD_LAYER structure "Correctly check for export size limit 40 bit ciphers are limited to 512 bit RSA "Only support >= 256-bit elliptic curves with ecdh_auto (server) or by default (client). Also reorder preferences to prefer prime curves to binary curves "Update documentation with Diffie-Hellman best practices. - Do not advise generation of DH parameters with dsaparam to save computation time. - Promote use of custom parameters more dhparam: fix documentation The default bitlength is now 2048. Also clarify that either the number of bits or the generator must be present: $ openssl dhparam -2 and $ openssl dhparam 2048 generate parameters but $ openssl dhparam does not. GitHub284: Fix typo in xx-32.pl scripts. "bn/asm/vis3-mont.pl: fix intermittent EC failures on SPARC T3. BLKINIT optimization worked on T4 Move certificate validity flags out of CERT. "CERT tidy Move per-connection state out of the CERT structure: which should just be for shared configuration data (e.g. certificates to use). In particular move temporary premaster secret Further version negotiation updates More miscellaneous updates to version negotiation following feedback. "Move SSLv3_*method() functions Move these functions into t1_clnt.c Updates following review comments Miscellaneous updates following review comments on the version negotiation rewrite patches. Version negotiation rewrite cleanup Following the version negotiation rewrite all of the previous code that was dedicated to version negotiation can now be deleted - all six source files of it!! "Client side version negotiation rewrite Continuing from the previous commit this changes the way we do client side version negotiation. Similarly all of the s23* ""up front"" state machine code has been avoided and again things now work much the same way as they already did for DTLS "Server side version negotiation rewrite This commit changes the way that we do server side protocol version negotiation. Previously we had a whole set of code that had an ""up front"" state machine dedicated to the negotiating the protocol version. This adds significant complexity to the state machine. Historically the justification for doing this was the support of SSLv2 which works quite differently to SSLv3+. However "Remove unused #ifdef's from header files And remove a duplicate comment "Use #error in openssl/srp.h Follow the same convention the other OPENSSL_NO_xxx header files do Add -Iinclude to crypto/ compiles The move of headers from crypto/ to crypto/include/internal/ needs this extra inclusion directory or the build fails. Adjust unixly mk1mf after introduction of tkey Added depencies on the public variants of some keys in test to Makefile. Added the newly introduced key files from test/ in the list of files to copy in util/pl/unix.pl. "Move definition of INTxx_MIN et al to internal header Having the INTxx_MIN et al macros defined in a public header is unnecessary and risky.  Also "Allow use of standard integer types. Include appropriate headers for standard integer types in e_os2.h This should use stdint.h "Fix ocsp bugs Various bugs found by Viktor "RT3841: memset() cipher_data when allocated If an EVP implementation (such as an engine) fails out early Remove some outdated #defines. bn/Makefile: give MacOS X hand to compiler armv8-mont module. "Call of memcmp with null pointers in obj_cmp() The function obj_cmp() (file crypto/objects/obj_dat.c) can in some situations call memcmp() with a null pointer and a zero length. This is invalid behaviour. When compiling openssl with undefined behaviour sanitizer (add -fsanitize=undefined to compile flags) this can be seen. One example that triggers this behaviour is the pkcs7 command (but there are others Remove remaining Kerberos references Following on from the removal of libcrypto and libssl support for Kerberos this commit removes all remaining references to Kerberos. Remove Kerberos support from libcrypto Remove libcrypto support for Kerberos following on from the previous commit which removed it from libssl. Remove Kerberos support from libssl Remove RFC2712 Kerberos support from libssl. This code and the associated standard is no longer considered fit-for-purpose. Remove Kerberos support from apps Remove Kerberos related options from the apps to prepare for the subsequent commits which will remove libcrypto and libssl support for Kerberos. "Don't allow a CCS when expecting a CertificateVerify Currently we set change_cipher_spec_ok to 1 before calling ssl3_get_cert_verify(). This is because this message is optional and if it is not sent then the next thing we would expect to get is the CCS. However "Fix the heap corruption in libeay32!OBJ_add_object. Original 'sizeof(ADDED_OBJ)' was replaced with 'sizeof(*ao)'. However Fix cipherlist order. "Make COMP_CTX and COMP_METHOD opaque Since COMP_METHOD is now defined in comp_lcl.h "Use p==NULL not !p (in if statements Add missing NULL check in X509V3_parse_list() Matt's note: I added a call to X509V3err to Kurt's original patch. RT#3840 Signed-off-by: Matt Caswell <matt@openssl.org> Add missing terminating NULL to speed_options table. This would cause memory corruption in opt_init() because it relies on the terminating NULL. RT#3842 "Use ""==0"" instead of ""!strcmp"" etc For the various string-compare routines (strcmp "Digest cached records if not sending a certificate. If server requests a certificate "Make -CAserial a type 's' option The file name given to -CAserial might not exist yet.  The -CAcreateserial option decides if this is ok or not. Previous to this change "Add a -CAserial argument for signing the user cert request This is just to make sure that option is tested on a Unix build.  This option is already present in ms/testss.bat "Initialize potentially uninitialized local variables Compiling OpenSSL code with MSVC and /W4 results in a number of warnings. One category of warnings is particularly interesting - C4701 (potentially uninitialized local variable 'name' used). This warning pretty much means that there's a code path which results in uninitialized variables being used or returned. Depending on compiler Fix s_server version specific methods A copy&paste error as a result of the big apps cleanup broke the version specific methods in s_server. "memset ZLIB compression deserves a better comment What could be better than to refer to the RFC that defines it? Fix windows build Fix error in WIN32_rename() introduced by commit b4faea50c35. Add more error state transitions (DTLS) Ensure all fatal errors transition into the new error state for DTLS. Add more error state transitions (client) Ensure all fatal errors transition into the new error state on the client side. Add more error state transitions Ensure all fatal errors transition into the new error state on the server side. Add Error state Reusing an SSL object when it has encountered a fatal error can have bad consequences. This is a bug in application code not libssl but libssl should be more forgiving and not crash. ssl/kssl.c: include missing header to complete SSL structure's defn. Signed-off-by: mancha security <mancha1@zoho.com> Signed-off-by: Matt Caswell <matt@openssl.org> Remove the fake RLE compression method. RLE is a no-op only for testing.  Remove it. "Use safer sizeof variant in malloc For a local variable: TYPE *p; Allocations like this are ""risky"": p = OPENSSL_malloc(sizeof(TYPE)); if the type of p changes "RT2943: Check sizes if -iv and -K arguments RT2943 only complains about the incorrect check of -K argument size Fix cut/paste error Was memset with wrong sizeof. "RT1369: don't do ""helpful"" access check. Don't do access check on destination directory; it breaks when euid/egid is different from real uid/gid." Return an error in ASN1_TYPE_unpack_sequence if argument is NULL Thanks to Brian Carpenter for reporting this issue. ssl/s3_srvr.c: Fix typo introduced via 69f682374868b. Incorrect name used for SSL_AD_INTERNAL_ERROR. Signed-off-by: mancha security <mancha1@zoho.com> Signed-off-by: Matt Caswell <matt@openssl.org> Add OSSL_NELEM macro. Add OSSL_NELEM macro to e_os.h to determine the number of elements in an array. "Remove obsolete make variables ONEDIRS "Remove shlib/ Cleanup of files that haven't been used "RT3776: Wrong size for malloc Use sizeof *foo parameter "free NULL cleanup -- coda After the finale Fix build on MacOS. "Fix some typo's "Rewrite CA.pl.in Reformat CA.pl.in to follow coding style. Also add ""use strict"" and ""use warnings"" Also modify it to exit properly and report only when succeeded. And some perl tweaks via Richard." free NULL cleanup 7 This gets BN_.*free: BN_BLINDING_free BN_CTX_free BN_FLG_FREE BN_GENCB_free BN_MONT_CTX_free BN_RECP_CTX_free BN_clear_free BN_free BUF_MEM_free Also fix a call to DSA_SIG_free to ccgost engine and remove some #ifdef'd dead code in engines/e_ubsec. "Fix buffer overrun in RSA signing The problem occurs in EVP_PKEY_sign() when using RSA with X931 padding. It is only triggered if the RSA key size is smaller than the digest length. So with SHA512 you can trigger the overflow with anything less than an RSA 512 bit key. I managed to trigger a 62 byte overflow when using a 16 bit RSA key. This wasn't sufficient to cause a crash Add sanity check to print_bin function Add a sanity check to the print_bin function to ensure that the |off| argument is positive. Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue. Add sanity check to ssl_get_prev_session Sanity check the |len| parameter to ensure it is positive. Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue. Sanity check the return from final_finish_mac The return value is checked for 0. This is currently safe but we should really check for <= 0 since -1 is frequently used for error conditions. Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue. "Add sanity check in ssl3_cbc_digest_record For SSLv3 the code assumes that |header_length| > |md_block_size|. Whilst this is true for all SSLv3 ciphersuites "Clarify logic in BIO_*printf functions The static function dynamically allocates an output buffer if the output grows larger than the static buffer that is normally used. The original logic implied that |currlen| could be greater than |maxlen| which is incorrect (and if so would cause a buffer overrun). Also the original logic would call OPENSSL_malloc to create a dynamic buffer equal to the size of the static buffer Sanity check EVP_EncodeUpdate buffer len There was already a sanity check to ensure the passed buffer length is not zero. Extend this to ensure that it also not negative. Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue. Sanity check EVP_CTRL_AEAD_TLS_AAD The various implementations of EVP_CTRL_AEAD_TLS_AAD expect a buffer of at least 13 bytes long. Add sanity checks to ensure that the length is at least that. Also add a new constant (EVP_AEAD_TLS1_AAD_LEN) to evp.h to represent this length. Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue. Sanity check DES_enc_write buffer length Add a sanity check to DES_enc_write to ensure the buffer length provided is not negative. Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue. free cleanup 12 Don't check for NULL before calling free function.  This gets: NAME_CONSTRAINTS_free GENERAL_SUBTREE_free ECDSA_METHOD_free JPAKE_CTX_free OCSP_REQ_CTX_free SCT_free SRP_VBASE_free SRP_gN_free SRP_user_pwd_free TXT_DB_free make update Run make update following previous header file changes. "free cleanup almost the finale Add OPENSSL_clear_free which merges cleanse and free. (Names was picked to be similar to BN_clear_free "In apps free NULL cleanup 8 Do not check for NULL before calling a free routine.  This addresses: ASN1_BIT_STRING_free ASN1_GENERALIZEDTIME_free ASN1_INTEGER_free ASN1_OBJECT_free ASN1_OCTET_STRING_free ASN1_PCTX_free ASN1_SCTX_free ASN1_STRING_clear_free ASN1_STRING_free ASN1_TYPE_free ASN1_UTCTIME_free M_ASN1_free_of "Fix bug Fix windows build The big apps cleanup broke the windows build. This commit fixes some miscellaneous issues so that it builds again. "Remove redundant includes from dtls1.h There were a set of includes in dtls1.h which are now redundant due to the libssl opaque work. This commit removes those includes use isxdigit and apps_tohex Replace ad-hoc ascii->hex with isxdigit and new app_tohex. "Remove needless bio_err argument Many functions had a BIO* parameter "realloc of NULL is like malloc ANSI C "remove malloc casts Following ANSI C rules "ERR_ cleanup Remove ERR_[gs]et_implementation as they were not undocumented and useless (the data structure was opaque). Halve the number of lock/unlock calls in almost all ERR_ functions by letting the caller of get_hash or int_thread_set able to lock.  Very useful when looping "Allow for types with leading underscore when checking error macros. We have an increasing number of function declarations starting with '__owur'.  Unfortunately NISTZ256: use EC_POINT API and check errors. CRYPTO_mem_leaks should ignore it's BIO argument. CRYPTO_mem_leaks takes a BIO* argument.  It's not a leak if that argument hasn't been free'd. "NISTZ256: set Z_is_one to boolean 0/1 as is customary. Cosmetic Error checking and memory leak fixes in NISTZ256. "Fix the check of test apps in util/mk1mf.pl The previous check assumed that the variables for each test app "Small fixes after the Big apps cleanup This fixes util/mk1mf.pl Add readline (etc) support Compile with -DREADLINE and the appropriate library. "Fix main build breakage. A variable declaration got dropped during a merge. And if a compiler inlines strcmp() and you put a strcmp in an assert message Free malloc data on encoding errors. Remove EFENCE support. RT2451: Add telnet to s_client -starttls Also add -xmpphost and -smtphost flags. "fewer NO_ENGINE #ifdef's Make setup_engine be a dummy if NO_ENGINE is enabled. The option is not enabled if NO_ENGINE is enabled "Big apps cleanup (option-parsing SSL_CIPHER lookup functions. Add tables to convert between SSL_CIPHER fields and indices for ciphers and MACs. Reorganise ssl_ciph.c to use tables to lookup values and load them. New functions SSL_CIPHER_get_cipher_nid and SSL_CIPHER_get_digest_nid. Add documentation. "Avoid ""no config file"" warning message Set config to /dev/null when doing make rehash." "test/Makefile dclean cleans out a few files too many. The files removed are the ones that were symbolic links before "Repair EAP-FAST session resumption EAP-FAST session resumption relies on handshake message lookahead to determine server intentions. Commits 980bc1ec6114f5511b20c2e6ca741e61a39b99d6 and 7b3ba508af5c86afe43e28174aa3c53a0a24f4d9 removed the lookahead so broke session resumption. This change partially reverts the commits and brings the lookahead back in reduced capacity for TLS + EAP-FAST only. Since EAP-FAST does not support regular session tickets Engage ec/asm/ecp_nistz256-sparcv9 module. Add ec/asm/ecp_nistz256-sparcv9.pl. Add assembly support for 32-bit iOS. Configure: Engage ecp_nistz256-armv8 module. crypto/ec/ecp_nistp[224|521].c: fix formatting. ec/ecp_nistp*.c: fix SEGVs. Configure: engage ARMv8 Montgomery multiplication module. Add ARMv8 Montgomery multiplication module. Fix encoding bug in i2c_ASN1_INTEGER Fix bug where i2c_ASN1_INTEGER mishandles zero if it is marked as negative. Thanks to Huzaifa Sidhpurwala <huzaifas@redhat.com> and Hanno Bck <hanno@hboeck.de> for reporting this issue. "Error out immediately on empty ciphers list. A 0-length ciphers list is never permitted. The old code only used to reject an empty ciphers list for connections with a session ID. It would later error out on a NULL structure Use -Wall -Wextra with clang The disabled set of -Weverything is hard to maintain across versions. Use -Wall -Wextra but also document other useful warnings that currently trigger. Reject empty generation strings. Reported by Hanno Bck <hanno@hboeck.de> Add -Wtype-limits to strict warnings. Initialize variable newsig may be used (freed) uninitialized on a malloc error. Fix ssl_get_prev_session overrun If OpenSSL is configured with no-tlsext then ssl_get_prev_session can read past the end of the ClientHello message if the session_id length in the ClientHello is invalid. This should not cause any security issues since the underlying buffer is 16k in size. It should never be possible to overrun by that many bytes. This is probably made redundant by the previous commit - but you can never be too careful. With thanks to Qinghao Tang for reporting this issue. Check for ClientHello message overruns The ClientHello processing is insufficiently rigorous in its checks to make sure that we don't read past the end of the message. This does not have security implications due to the size of the underlying buffer - but still needs to be fixed. With thanks to Qinghao Tang for reporting this issue. free NULL cleanup 9 Ongoing work to skip NULL check before calling free routine.  This gets: ecp_nistz256_pre_comp_free nistp224_pre_comp_free nistp256_pre_comp_free nistp521_pre_comp_free PKCS7_free PKCS7_RECIP_INFO_free PKCS7_SIGNER_INFO_free sk_PKCS7_pop_free PKCS8_PRIV_KEY_INFO_free PKCS12_free PKCS12_SAFEBAG_free PKCS12_free sk_PKCS12_SAFEBAG_pop_free SSL_CONF_CTX_free SSL_CTX_free SSL_SESSION_free SSL_free ssl_cert_free ssl_sess_cert_free "Fix memory leak It should have freed them when != NULL do_dirname: Don't change gen on failures It would set gen->d.dirn to a freed pointer in case X509V3_NAME_from_section failed. Don't set *pval to NULL in ASN1_item_ex_new. While *pval is usually a pointer in rare circumstances it can be a long value. One some platforms (e.g. WIN64) where sizeof(long) < sizeof(ASN1_VALUE *) this will write past the field. *pval is initialised correctly in the rest of ASN1_item_ex_new so setting it to NULL is unecessary anyway. Thanks to Julien Kauffmann for reporting this issue. "Fix ECDH detection "Polish shell script to avoid needless complexity. No need for here documents "fix to ""test script cleanup"" Fix commit 30f54ad295d58ff8c6d28c1fd612d23c2c343d19 which used non-portable syntax for checking exit status." "test script cleanup Removed commented-out tests Standardize on doing cmd ... || exit 1 instead of cmd ... if [ $? != 0] ; then exit 1 fi where that if statement has ben one "Have mkerr.pl treat already existing multiline string defs properly Since source reformat "Drop CA.sh for CA.pl Remove CA.sh script and use CA.pl for testing "Appease clang -Wshadow The macros BSWAP4 and BSWAP8 have statetemnt expressions implementations that use local variable names that shadow variables outside the macro call "Appease clang -Wgnu-statement-expression We use GNU statement expressions in crypto/md32_common.h Appease clang -Wempty-translation-unit ebcdic.c:284:7: warning: ISO C requires a translation unit to contain at least one declaration [-Wempty-translation-unit] ^ 1 warning generated. Remove old ASN.1 functions. Rewrite ssl_asn1.c using new ASN.1 code. Complete reimplementation of d2i_SSL_SESSION and i2d_SSL_SESSION using new ASN.1 code and eliminating use of old ASN.1 macros. Add macro to implement static encode functions. "Fewer newlines in comp method output Print ""supported compression methods"" all on one line." sha/asm/sha*-armv8.pl: add Denver and X-Gene esults. "aes/asm/aesv8-armx.pl: optimize for Cortex-A5x. ARM has optimized Cortex-A5x pipeline to favour pairs of complementary AES instructions. While modified code improves performance of post-r0p0 Cortex-A53 performance by >40% (for CBC decrypt and CTR) "Remove SSL_TASK "Remove SSL_TASK Remove old ASN.1 code from evp_asn1.c Rewrite ASN1_TYPE_set_int_octetstring and ASN1_TYPE_get_int_octetstring to use the new ASN.1 code instead of the old macros. "Now that we've removed the need for symlinks "Remove remaining variables for symlinked/copied headers and tests GitConfigure:   no more 'no-symlinks' util/bat.sh "Remove EXHEADER "Stop symlinking Ensure EC private keys retain leading zeros RFC5915 requires the use of the I2OSP primitive as defined in RFC3447 for storing an EC Private Key. This converts the private key into an OCTETSTRING and retains any leading zeros. This commit ensures that those leading zeros are present if required. "Fix some faults in util/mk1mf.pl When building on Unix Remove unnecessary asn1_mac.h includes. "Initialised 'ok' and redo the logic. The logic with how 'ok' was calculated didn't quite convey what's ""ok"" "Have a shared library version thats reasonable with our version scheme The FAQ says this: After the release of OpenSSL 1.0.0 the versioning scheme changed. Letter releases (e.g. 1.0.1a) can only contain bug and security fixes and no new features. Minor releases change the last number (e.g. 1.0.2) and can contain new features that retain binary compatibility. Changes to the middle number are considered major releases and neither source nor binary compatibility is guaranteed. With such a scheme (and with the thinking that it's nice if the shared library version stays on track with the OpenSSL version) Engage vpaes-armv8 module. Configure: remove unused variables. "Simplify DSA public key handling. DSA public keys could exist in two forms: a single Integer type or a SEQUENCE containing the parameters and public key with a field called ""write_params"" deciding which form to use. These forms are non standard and were only used by functions containing ""DSAPublicKey"" in the name. Simplify code to only use the parameter form and encode the public key component directly in the DSA public key method." Add Record Layer documentation Add some design documentation on how the record layer works to aid future maintenance. Fix formatting oddities Fix some formatting oddities in rec_layer_d1.c. Fix record.h formatting Fix some strange formatting in record.h. This was probably originally introduced as part of the reformat work. Define SEQ_NUM_SIZE Replace the hard coded value 8 (the size of the sequence number) with a constant defined in a macro. Move bitmap and next_bitmap from s->d1 to s->rlayer.d. Create dtls_bitmap.h and dtls_bitmap.c "Introduce the functions RECORD_LAYER_release Create RECORD_LAYER_clear function. "Moved s3_pkt.c Split out non record layer functions out of s3_pkt.c and d1_pkt.c into the new files s3_msg.c and s1_msg.c respectively. Encapsulate SSL3_BUFFER and all access to s->s3->rbuf. "free NULL cleanup. This gets EC_GROUP_clear_free EC_GROUP_free "Resolve swallowed returns codes The recent updates to libssl to enforce stricter return code checking Remove X509_ATTRIBUTE hack. The X509_ATTRIBUTE structure includes a hack to tolerate malformed attributes that encode as the type instead of SET OF type. This form is never created by OpenSSL and shouldn't be needed any more. Support key loading from certificate file Support loading of key and certificate from the same file if SSL_CONF_FLAG_REQUIRE_PRIVATE is set. This is done by remembering the filename used for each certificate type and attempting to load a private key from the file when SSL_CONF_CTX_finish is called. Update docs. Fix bug in s_client. Previously default verify locations would only be loaded if CAfile or CApath were also supplied and successfully loaded first. SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG was disabled in 0.9.8q and 1.0.0c. This commit sets the value of SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG to zero. "Deprecate RAND_pseudo_bytes The justification for RAND_pseudo_bytes is somewhat dubious "RAND_bytes updates Ensure RAND_bytes return value is checked correctly "Fix return checks in GOST engine Filled in lots of return value checks that were missing the GOST engine Fix misc NULL derefs in sureware engine Fix miscellaneous NULL pointer derefs in the sureware engine. "Add ticket length before buffering DTLS message In ssl3_send_new_session_ticket the message to be sent is constructed. We skip adding the length of the session ticket initially "Ensure last_write_sequence is saved in DTLS1.2 In DTLS "free NULL cleanup Start ensuring all OpenSSL ""free"" routines allow NULL "Teach mkdef.pl to handle multiline declarations. For the moment "Move some ASN.1 internals to asn1_int.h Move ASN.1 internals used across multiple directories into new internal header file asn1_int.h remove crypto/Makefile hack which allowed other directories to include ""asn1_locl.h""" Fix malloc define typo Fix compilation failure when SCTP is compiled due to incorrect define. Reported-by: Conrad Kostecki <ck+gentoobugzilla@bl4ckb0x.de> URL: https://bugs.gentoo.org/543828 RT#3758 Signed-off-by: Matt Caswell <matt@openssl.org> Fix eng_cryptodev to not depend on BN internals. "Remove old style ASN.1 support. Remove old ASN.1 COMPAT type. This was meant as a temporary measure so older ASN.1 code (from OpenSSL 0.9.6) still worked. It's a hack which breaks constification and hopefully nothing uses it now Don't send a for ServerKeyExchange for kDHr and kDHd The certificate already contains the DH parameters in that case. ssl3_send_server_key_exchange() would fail in that case anyway. Fix SSL_clear unused return Fix missing return value check in dtls1_listen when calling SSL_clear(). "ssl3_set_handshake_header returns Change ssl_set_handshake_header from return void to returning int apps return value checks Ensure that all libssl functions called from within the apps have their return values checked where appropriate. Check libssl function returns Mark most functions returning a result defined in any libssl header file with __owur to warn if they are used without checking the return value. Use -DUNUSED_RETURN compiler flag with gcc to activate these warnings. Some functions returning a result are skipped if it is common and valid to use these functions without checking the return value. "Remove PREFIX "Actually remove TABLE from version control Follow up on the earlier ""Do not keep TABLE in version control"". Actually removing TABLE from version control was forgotten." "Don't check curves that haven't been sent Don't check that the curve appears in the list of acceptable curves for the peer "Remove deleted functions "Remove {i2d "Remove old ASN.1 code. Remove old M_ASN1_ macros and replace any occurences with the corresponding function. Remove d2i_ASN1_bytes Refer to $table{$target} rather than $table{$t}. Using $t is an artifact from the earlier changes in Configure and was unfortunately forgotten as is. Add AES unwrap test with invalid key. This tests the unwrap algorithm with an invalid key. The result should be rejected without returning any plaintext. "CRYPTO_128_unwrap(): Fix refactoring damage crypto/modes/wrap128.c was heavily refactored to support AES Key Wrap with Padding Add DTLS tests to make test Updated test/testssl script to include the new DTLS capability in ssltest. Fix a failure to NULL a pointer freed on error. Reported by the LibreSSL project as a follow on to CVE-2015-0209 Update CHANGES Resync CHANGES with the latest version from 1.0.2. "PKCS#7: avoid NULL pointer dereferences with missing content In PKCS#7 Fix ASN1_TYPE_cmp Fix segmentation violation when ASN1_TYPE_cmp is passed a boolean type. This can be triggered during certificate verification so could be a DoS attack against a client or a server enabling client authentication. CVE-2015-0286 Fix DHE Null CKE vulnerability If client auth is used then a server can seg fault in the event of a DHE cipher being used and a zero length ClientKeyExchange message being sent by the client. This could be exploited in a DoS attack. CVE-2015-1787 Fix for CVE-2015-0291 If a client renegotiates using an invalid signature algorithms extension it will crash a server with a NULL pointer dereference. Thanks to David Ramos of Stanford University for reporting this bug. CVE-2015-0291 Reject invalid PSS parameters. Fix a bug where invalid PSS parameters are not rejected resulting in a NULL pointer exception. This can be triggered during certificate verification so could be a DoS attack against a client or a server enabling client authentication. Thanks to Brian Carpenter for reporting this issues. CVE-2015-0208 Free up ADB and CHOICE if already initialised. CVE-2015-0287 Fix Seg fault in DTLSv1_listen The DTLSv1_listen function is intended to be stateless and processes the initial ClientHello from many peers. It is common for user code to loop over the call to DTLSv1_listen until a valid ClientHello is received with an associated cookie. A defect in the implementation of DTLSv1_listen means that state is preserved in the SSL object from one invokation to the next that can lead to a segmentation fault. Erorrs processing the initial ClientHello can trigger this scenario. An example of such an error could be that a DTLS1.0 only client is attempting to connect to a DTLS1.2 only server. CVE-2015-0207 "Multiblock corrupted pointer fix OpenSSL 1.0.2 introduced the ""multiblock"" performance improvement. This feature only applies on 64 bit x86 architecture platforms that support AES NI instructions. A defect in the implementation of ""multiblock"" can cause OpenSSL's internal write buffer to become incorrectly set to NULL when using non-blocking IO. Typically Configure: fold related configurations more aggressively and clean-up. "Correct the request of debug builds ./config would translate -d into having the target get a 'debug-' prefix Dead code removal from apps Some miscellaneous removal of dead code from apps. Also fix an issue with error handling with pkcs7. Remove dead code from crypto Some miscellaneous removal of dead code from lib crypto. "Fix probable_prime over large shift In the probable_prime() function we behave slightly different if the number of bits we are interested in is <= BN_BITS2 (the num of bits in a BN_ULONG). As part of the calculation we work out a size_limit as follows: size_limit = (((BN_ULONG)1) << bits) - BN_get_word(rnd) - 1; There is a problem though if bits == BN_BITS2. Shifting by that much causes undefined behaviour. I did some tests. On my system BN_BITS2 == 64. So I set bits to 64 and calculated the result of: (((BN_ULONG)1) << bits) I was expecting to get the result 0. I actually got 1! Strangely this... (((BN_ULONG)0) << BN_BITS2) ...does equal 0! This means that "Fix unintended sign extension The function CRYPTO_128_unwrap_pad uses an 8 byte AIV (Alternative Initial Value). The least significant 4 bytes of this is placed into the local variable |ptext_len|. This is done as follows: ptext_len = (aiv[4] << 24) | (aiv[5] << 16) | (aiv[6] << 8) | aiv[7]; aiv[4] is an unsigned char "Add sanity check to PRF The function tls1_PRF counts the number of digests in use and partitions security evenly between them. There always needs to be at least one digest in use "Fix memset call in stack.c The function sk_zero is supposed to zero the elements held within a stack. It uses memset to do this. However it calculates the size of each element as being sizeof(char **) instead of sizeof(char *). This probably doesn't make much practical difference in most cases Add malloc failure checks Add some missing checks for memory allocation failures in ca app. "Do not keep TABLE in version control. TABLE was always a debugging tool Configuration cleanup: personal configs Move obviously personal configurations to personal files. Note: those files should really not be in the main repo at all "Change all the main configurations to the new format. As part of this "Rethink templates. Because base templates express inheritance of values "Add base template processing. Base templates are templates that are used to inherit from.  They can loosely be compared with parent class inheritance in object orientation. They can be used for the same purpose as the variables with multi-field strings are used in old-style string configurations. Base templates are declared with the base_templates configuration attribute "Add template reference processing. Template references are words with double brackets "Rewrite Configure to handle the target values as hash tables. The reasoning is that configuration strings are hard to read and error prone "Fix regression in ASN1_UTCTIME_cmp_time_t Previously OPENSSL_NO_EC* merge; missed one file Missed one file in the #ifdef merge; thanks Kurt. "Update ordinals "Remove ssl_cert_inst() It created the cert structure in SSL_CTX or SSL if it was NULL Avoid reading an unused byte after the buffer Other curves don't have this problem. "Fix undefined behaviour in shifts. Td4 and Te4 are arrays of u8. A u8 << int promotes the u8 to an int first then shifts. If the mathematical result of a shift (as modelled by lhs * 2^{rhs}) is not representable in an integer Allocate string types directly. Allocate and free ASN.1 string types directly instead of going through the ASN.1 item code. "Fix key wrapping mode with padding to conform to RFC 5649. According to RFC 5649 section 4.1 step 1) we should not add padding if plaintext length is multiply of 8 ockets. This matches pseudo-code in http://dx.doi.org/10.6028/NIST.SP.800-38F on page 15 Remove obsolete declarations. Remove DECLARE_ASN1_SET_OF and DECLARE_PKCS12_STACK_OF these haven't been used internally in OpenSSL for some time. ASN.1 print fix. When printing out an ASN.1 structure if the type is an item template don't fall thru and attempt to interpret as a primitive type. "Fix RSA_X931_derive_ex In the RSA_X931_derive_ex a call to BN_CTX_new is made. This can return NULL on error. However the return value is not tested until *after* it is derefed! Also at the top of the function a test is made to ensure that |rsa| is not NULL. If it is we go to the ""err"" label. Unfortunately the error handling code deref's rsa." "SSL_check_chain fix If SSL_check_chain is called with a NULL X509 object or a NULL EVP_PKEY or the type of the public key is unrecognised then the local variable |cpk| in tls1_check_chain does not get initialised. Subsequently an attempt is made to deref it (after the ""end"" label) Fix dsa_pub_encode The return value from ASN1_STRING_new() was not being checked which could lead to a NULL deref in the event of a malloc failure. Also fixed a mem leak in the error path. Fix dh_pub_encode The return value from ASN1_STRING_new() was not being checked which could lead to a NULL deref in the event of a malloc failure. Also fixed a mem leak in the error path. "Fix asn1_item_print_ctx The call to asn1_do_adb can return NULL on error "ASN1_primitive_new NULL param handling ASN1_primitive_new takes an ASN1_ITEM * param |it|. There are a couple of conditional code paths that check whether |it| is NULL or not - but later |it| is deref'd unconditionally. If |it| was ever really NULL then this would seg fault. In practice ASN1_primitive_new is marked as an internal function in the public header file. The only places it is ever used internally always pass a non NULL parameter for |it|. Therefore Fix error handling in bn_exp In the event of an error |rr| could be NULL. Therefore don't assume you can use |rr| in the error handling code. ssl/s3_clnt.c: fix intermittent failures. [and respect error return value in ssltest.c] "Merge OPENSSL_NO_EC{DH "Move Configurations* out of the way and rename them. Configure would load the glob ""Configurations*"".  The problem with this is that it also loads all kinds of backups of those configurations that some editors do Cleanse buffers Cleanse various intermediate buffers used by the PRF. BIO_debug_callback: Fix output on 64-bit machines BIO_debug_callback() no longer assumes the hexadecimal representation of a pointer fits in 8 characters. Signed-off-by: Richard Levitte <levitte@openssl.org> "Prevent handshake with unseeded PRNG Fix security issue where under certain conditions a client can complete a handshake with an unseeded PRNG. The conditions are: - Client is on a platform where the PRNG has not been seeded "Wrong SSL version in DTLS1_BAD_VER ClientHello Since commit 741c9959 (""DTLS revision."") "Fix DTLS1_BAD_VER regression Commit 9cf0f187 in HEAD Additional CMS documentation. ARMv4 assembly pack: add Cortex-A15 performance data. Update mkerr.pl for new format Make the output from mkerr.pl consistent with the newly reformatted code. Unchecked malloc fixes Miscellaneous unchecked malloc fixes. Also fixed some mem leaks on error paths as I spotted them along the way. add RIPEMD160 whirlpool tests Add RIPEMD160 and whirlpool test data. Add Count keyword to repeatedly call EVP_DigestUpate. Check public key is not NULL. CVE-2015-0288 PR#3708 Fix format script. The format script didn't correctly recognise some ASN.1 macros and didn't reformat some files as a result. Fix script and reformat affected files. Fix d2i_SSL_SESSION for DTLS1_BAD_VER Some Cisco appliances use a pre-standard version number for DTLS. We support this as DTLS1_BAD_VER within the code. This change fixes d2i_SSL_SESSION for that DTLS version. Based on an original patch by David Woodhouse <dwmw2@infradead.org> RT#3704 Fixed missing return value checks. Added various missing return value checks in tls1_change_cipher_state. Fix missing return value checks. Fixed various missing return value checks in ssl3_send_newsession_ticket. Also a mem leak on error. Add OCB support and test vectors for evp_test. Skip unsupported ciphers in evp_test. Add algorithm skip support. Add support for skipping disabled algorithms: if an attempt to load a public or private key results in an unknown algorithm error then any test using that key is automatically skipped. "Remove NETSCAPE_HANG_BUG NETSCAPE_HANG_BUG is a workaround for a browser bug from many years ago (2000). It predates DTLS "Removed support for SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG. Also removed the ""-hack"" option from s_server that set this option." "Update the SHA* documentation Updates to include SHA224 Fix NAME section of d2i_ECPKParameters to prevent broken symlinks when using the extract-names.pl script. RT#3718 "Add dire warnings about the ""reuse"" capability of the d2i_* functions." Fix a failure to NULL a pointer freed on error. Inspired by BoringSSL commit 517073cd4b by Eric Roman <eroman@chromium.org> CVE-2015-0209 "Import evp_test.c from BoringSSL. Unfortunately we already have a file called evp_test.c "Add documentation for the -no_alt_chains option for various apps "Add -no_alt_chains option to apps to implement the new X509_V_FLAG_NO_ALT_CHAINS flag. Using this option means that when building certificate chains "In certain situations the server provided certificate chain may no longer be valid. However the issuer of the leaf "Move build config table to separate files. Move the build configuration table into separate files.  The Configurations file is standard configs Fix crash in SPARC T4 XTS. aes/asm/bsaes-armv7: fix kernel-side XTS and harmonize with Linux. XTS bug spotted and fix suggested by Adrian Kotelba. Don't set no_protocol if -tls1 selected. evp/evp_test.c: avoid crashes when referencing uninitialized pointers. For some reason failure surfaced on ARM platforms. Avoid a double-free in an error path. Signed-off-by: Kurt Roeckx <kurt@roeckx.be> "Restore -DTERMIO/-DTERMIOS on Windows platforms. The previous defaulting to TERMIOS took away -DTERMIOS / -DTERMIO a bit too enthusiastically.  Windows/DOSish platforms of all sorts get identified as OPENSSL_SYS_MSDOS "Assume TERMIOS is default More RSA tests. "Add leak detection Add EVP_PKEY test data. Add some EVP_PKEY test data for sign and verify tests including failure cases. "EVP_PKEY support for evp_test Add two new keywords ""PublicKey"" and ""PrivateKey"". These will load a key in PEM format from the lines immediately following the keyword and assign it a name according to the value. These will be used later for public and private key testing operations. Add tests for Sign Add CMAC test data. Add HMAC test data. New macro to set mac key. Return error code is any tests fail. evp/evp.h: add missing camellia-ctr declarations. RT3684: rand_egd needs stddef.h And remove backup definition of offsetof. Missing OPENSSL_free on error path. Add ec/asm/ecp_nistz256-armv4.pl module. Add Camellia CTR mode. Add SSL_SESSION_get0_ticket API function. "Correct reading back of tlsext_tick_lifetime_hint from ASN1. When writing out the hint "Provide the API functions SSL_SESSION_has_ticket and SSL_SESSION_get_ticket_lifetime_hint. The latter has been reported as required to fix Qt for OpenSSL 1.1.0. I have also added the former in order to determine whether a ticket is present or not - otherwise it is difficult to know whether a zero lifetime hint is because the server set it to 0 "Make tlsext_tick_lifetime_hint an unsigned long (from signed long). From RFC4507: ""The ticket_lifetime_hint field contains a hint from the server about how long the ticket should be stored.  The value indicates the lifetime in seconds as a 32-bit unsigned integer in network byte order.""" ec/ecp_nistz256.c: fix compiler warnings. Configure: disable warning C4090 in Windows builds. Initial version of new evp_test program. "Fix hostname validation in the command-line tool to honour negative return values. Specifically "HMAC_cleanup Remove -DOPENSSL_NO_DEPRECATED from --strict-warnings flags. In master OPENSSL_NO_DEPRECATED is the default anyway. By including it in --strict-warnings as well this means you cannot combine enable-deprecated with --strict-warnings. Add ec/asm/ecp_nistz256-x86.pl module. bn/bn_add.c: fix dead code elimination that went bad. Fix memory leak reporting. Free up bio_err after memory leak data has been printed to it. In int_free_ex_data if ex_data is NULL there is nothing to free up so return immediately and don't reallocate it. "Remove stray ""=back"". This was causing newer versions of pod2man to choke." des/asm/des_enc.m4: fix brown-bag typo in last commit. "Final (for me ui_compat cleanup; makefiles and vms Remove ui_compat.h from Makefile dependencies And from two VMS build/install scripts. Remove ui_compat This is the last of the old DES API. "dead code cleanup: #if 0 in ssl I left many ""#if 0"" lines "util/mkstack.pl now generates entire safestack.h The mkstack.pl script now generates the entire safestack.h file. It generates output that follows the coding style. Also Remove OPENSSL_NO_HMAC Disabling HMAC doesn't work. If it did it would end up disabling a lot of OpenSSL functionality (it is required for all versions of TLS for example). "Live code cleanup; #if 1 removal A few minor cleanups to remove pre-processor ""#if 1"" stuff." Fixed bad formatting in crypto/des/spr.h Fix various build breaks TABLE wasn't updated from a previous Configure change Missed an RMD160/RIPE/RIPEMD unification in mkdef.pl Makefile install_sw referenced file doc/openssl-shared.txt (RT3686) Needed to run 'make update' because - Various old code has been removed - Varous old #ifdef tests were removed More unused FIPS module code. Remove fips_algvs.c Remove unused fips module build code from Configure and Makefile.org Preliminary ASN1_TIME documentation. Add SSL_get_extms_support documentation. Document SSL_get_extms_support(). Modify behaviour of SSL_get_extms_support() so it returns -1 if the master secret support of the peer is not known (e.g. handshake in progress). Rewrite ssl3_send_client_key_exchange to support extms. Rewrite ssl3_send_client_key_exchange to retain the premaster secret instead of using it immediately. This is needed because the premaster secret is used after the client key exchange message has been sent to compute the extended master secret. Utility function to retrieve handshake hashes. Retrieve handshake hashes in a separate function. This tidies the existing code and will be used for extended master secret generation. Check PKCS#8 pkey field is valid before cleansing. PR:3683 "old_des fix windows build Remove old DES API Includes VMS fixes from Richard. Includes Kurt's destest fixes (RT 1290). Closes tickets 1290 and 1291 Dead code: if 0 removal from crypto/evp and an unused file. "Dead code cleanup: crypto/*.c Make libssl opaque. Move all structures that were previously protected by OPENSSL_NO_SSL_INTERN into internal header files. "Dead code removal: #if 0 asn1 "Dead code removal: #if 0 conf "modes/gcm128.c: fix OPENSSL_SMALL_FOOTPRINT compile failure on affected platforms (PowerPC and AArch64). For reference VMS exit codes weren't handled well enough and were unclear Making a specific variable $failure_code and a bit of commenting in the VMS section should help clear things up. VMS adjustments: Add missing crypto modules and files to copy to crypto/install-crypto.com VMS adjustments: test/cms-test.pl adjusted to handle NL: instead of /dev/null on VMS "VMS build changes crypto/crypto-lib.com: Remove all APPS building "VMS adjustments: Add new symbols that are longer than 31 chars to symhacks. VMS doesn't have <sys/un.h> dso_vms needs to add the .EXE extension if there is none already "Dead code removal: #if 0 bio "Make output consistency: remove blank line When you use ""-s"" in the make flag clang on Linux x86_64 complains about unreachable code. "Remove support for opaque-prf An expired IETF Internet-Draft (seven years old) that nobody implements Rename index to idx to avoid symbol conflicts. Picky compilers with old index() string functions. "Dead code removal: Fortezza identifiers Not interested in helping the NSA in the slightest. And anyway """#if 0"" removal: header files Remove all ""#if 0"" blocks from header files." "OPENSSL_NO_XXX cleanup: OPENSSL_NO_BUF_FREELISTS Remove OPENSSL_NO_BUF_FREELISTS. This was turned on by default "OPENSSL_NO_XXX cleanup: NO_TLS "OPENSSL_NO_xxx cleanup: SHA Remove support for SHA0 and DSS0 (they were broken) "OPENSSL_NO_xxx cleanup: RFC3779 Remove OPENSSL_NO_RFCF3779. Also OPENSSL_NO_xxx cleanup: many removals The following compile options (#ifdef's) are removed: OPENSSL_NO_BIO OPENSSL_NO_BUFFER OPENSSL_NO_CHAIN_VERIFY OPENSSL_NO_EVP OPENSSL_NO_FIPS_ERR OPENSSL_NO_HASH_COMP OPENSSL_NO_LHASH OPENSSL_NO_OBJECT OPENSSL_NO_SPEED OPENSSL_NO_STACK OPENSSL_NO_X509 OPENSSL_NO_X509_VERIFY This diff is big because of updating the indents on preprocessor lines. Provide documentation for all SSL(_CTX)?_(get|set)(_default)?_read_ahead functions. Remove explicit setting of read_ahead for DTLS. It never makes sense not to use read_ahead with DTLS because it doesn't work. Therefore read_ahead needs to be the default. Configure: addendum to OPENSSL_NO_[RMD160|RIPEMD] harmonization. "des/asm/des_enc.m4: strip #ifdef OPENSSL_SYS_ULTRASPARC as part of pre-processor controls cleanup. It doesn't mean that it no longer works on UltraSPARC "Make OPENSSL_config truly ignore errors. Per discussion: should not exit. Should not print to stderr. Errors are ignored.  Updated doc to reflect that Fix segfault with empty fields as last in the config. Replace exit() with error return. ifdef cleanup part 3: OPENSSL_SYSNAME Rename OPENSSL_SYSNAME_xxx to OPENSSL_SYS_xxx Remove MS_STATIC; it's a relic from platforms <32 bits. "ifdef cleanup "Cleanup old doc/*; remove CHANGES.SSLeay Removed CHANGES.SSLeay Udpate README to be current. Updated fignerprints.txt to list only current release signers and to explain that is what it's used for. Removed the following: c-indentation.el -- doesn't go with our coding style openssl-shared.txt -- old info about shared library aides openssl.txt -- old info about X509v3 extension support/syntax ssleay.txt -- old info about OpenSSL's predecessor Use inner algorithm when printing certificate. Drop redundant and outdated __CYGWIN32__ tests. Change OPENSSL_SYSNAME_CYGWIN32 to OPENSSL_SYSNAME_CYGWIN. Drop outdated Cygwin targets. RT#3605 Signed-off-by: Corinna Vinschen <vinschen@redhat.com> Fix macosx-ppc build (and typos in unwind info). Re-align some comments after running the reformat script. This should be a one off operation (subsequent invokation of the script should not move them) Rerun util/openssl-format-source -v -c . More tweaks for comments due indent issues Conflicts: ssl/ssl_ciph.c ssl/ssl_locl.h Conflicts: ssl/s2_srvr.c ssl/ssl.h Tweaks for comments due to indent's inability to handle them Conflicts: demos/tunala/tunala.h engines/e_padlock.c ssl/s2_clnt.c ssl/s2_lib.c ssl/s2_srvr.c ssl/s3_srvr.c Delete trailing whitespace from output. Add -d debug option to save preprocessed files. Test option -nc Add option -nc which sets COMMENTS=true but disables all indent comment reformatting options. ec/ecp_nistz256.c: further harmonization with latest rules. ec/ecp_nistz256.c: harmonize with latest indent script. bn/bn_const.c: make it indent-friendly. bn/bn_asm.c: make it indent-friendly. bn/bn_exp.c: make it indent-friendly. modes/modes_lcl.h: make it indent-friendly. crypto/mem_dbg.c: make it indent-friendly. bn/bn_recp.c: make it indent-friendly. engines/e_ubsec.c: make it indent-friendly. bn/rsaz_exp.c: make it indent-friendly. Provide script for filtering data initialisers for structs/unions. indent just can't handle it. "Provide source reformating script. Requires GNU indent to be available. Script written by Tim Hudson Add Broadwell performance results. "Remove use of BN_init Fix warning where BIO_FLAGS_UPLINK was being redefined. This warning breaks the build in 1.0.0 and 0.9.8 "RT3548: Remove unsupported platforms This last one for this ticket.  Removes WIN16. So long "Allow multiple IDN xn-- indicators Update the X509v3 name parsing to allow multiple xn-- international domain name indicators in a name.  Previously "RT3548: Remove some unsupported platforms. This commit removes NCR "RT478: Add uninstall make target Add INSTALLDIRS variable "A memory leak can occur in dtls1_buffer_record if either of the calls to ssl3_setup_buffers or pqueue_insert fail. The former will fail if there is a malloc failure Unauthenticated DH client certificate fix. Fix to prevent use of DH client certificates without sending certificate verify message. If we've used a client certificate to generate the premaster secret ssl3_get_client_key_exchange returns 2 and ssl3_get_cert_verify is never called. We can only skip the certificate verify message in ssl3_get_cert_verify if the client didn't send a certificate. Thanks to Karthikeyan Bhargavan for reporting this issue. CVE-2015-0205 Fix for CVE-2014-3570 (with minor bn_asm.c revamp). Follow on from CVE-2014-3571. This fixes the code that was the original source of the crash due to p being NULL. Steve's fix prevents this situation from occuring - however this is by no means obvious by looking at the code for dtls1_get_record. This fix just makes things look a bit more sane. Fix crash in dtls1_get_record whilst in the listen state where you get two separate reads performed - one for the header and one for the body of the handshake record. CVE-2014-3571 Fix irix-cc build. Only inherit the session ID context in SSL_set_SSL_CTX if the existing context was also inherited (matches that of the existing SSL_CTX). "Some cleanup of L<> markup in pod files Show only the #define Fix memory leak. Fix memory leak by freeing up saved_message.data if it is not NULL. PR#3489 "CHANGES: mention ""universal"" ARM support. This is re-commit without unrelated modification." Only allow ephemeral RSA keys in export ciphersuites. OpenSSL clients would tolerate temporary RSA keys in non-export ciphersuites. It also had an option SSL_OP_EPHEMERAL_RSA which enabled this server side. Remove both options as they are a protocol violation. Thanks to Karthikeyan Bhargavan for reporting this issue. (CVE-2015-0204) ECDH downgrade bug fix. Fix bug where an OpenSSL client would accept a handshake using an ephemeral ECDH ciphersuites with the server key exchange message omitted. Thanks to Karthikeyan Bhargavan for reporting this issue. CVE-2014-3572 Ensure that the session ID context of an SSL* is updated when its SSL_CTX is updated. From BoringSSL commit https://boringssl.googlesource.com/boringssl/+/a5dc545bbcffd9c24cebe65e9ab5ce72d4535e3a Constify ASN1_TYPE_cmp add X509_ALGOR_cmp. Fix various certificate fingerprint issues. By using non-DER or invalid encodings outside the signed portion of a certificate the fingerprint can be changed without breaking the signature. Although no details of the signed portion of the certificate can be changed this can cause problems with some applications: e.g. those using the certificate fingerprint for blacklists. 1. Reject signatures with non zero unused bits. If the BIT STRING containing the signature has non zero unused bits reject the signature. All current signature algorithms require zero unused bits. 2. Check certificate algorithm consistency. Check the AlgorithmIdentifier inside TBS matches the one in the certificate signature. NB: this will result in signature failure errors for some broken certificates. 3. Check DSA/ECDSA signatures use DER. Reencode DSA/ECDSA signatures and compare with the original received signature. Return an error if there is a mismatch. This will reject various cases including garbage after signature (thanks to Antti Karjalainen and Tuomo Untinen from the Codenomicon CROSS program for discovering this case) and use of BER or invalid ASN.1 INTEGERs (negative or with leading zeroes). CVE-2014-8275 "Add a clang build target for linux-x86_64 This change documents the world as-is Remove SGC restart flag. Remove MS SGC MS Server gated cryptography is obsolete and dates from the time of export restrictions on strong encryption and is only used by ancient versions of MSIE. Clear existing extension state. When parsing ClientHello clear any existing extension state from SRP login and SRTP profile. Thanks to Karthikeyan Bhargavan for reporting this issue. constify tls 1.2 lookup tables. None of this should live in writable memory Signed-off-by: Kurt Roeckx <kurt@roeckx.be> Add missing include of sys/time.h gettimeofday was undefined dlfcn: always define _GNU_SOURCE We need this for the freebsd kernel with glibc as used in the Debian kfreebsd ports.  There shouldn't be a problem defining this on systems not using glibc. Fix memory leak in the apps The BIO_free() allocated ex_data again that we already freed. RT3548: Remove unsupported platforms This commit removes DG-UX. It also flushes out some left-behinds in config. And regenerates TABLE from Configure (hadn't been done in awhile). RT3548: Remove unsupported platforms. This commit removes MPE/iX RT3548: Remvoe unsupported platforms This commit removes SunOS (a sentimental favorite of mine). Fix incorrect OPENSSL_assert() usage. Return an error code for I/O errors instead of an assertion failure. PR#3470 RT3548: Remove outdated platforms This commit removes all mention of NeXT and NextStep. Fix a problem if CFLAGS is too long cversion.c fails to compile when config is run with --strict-warnings. Turn on OPENSSL_NO_DEPRECATED by default. Also introduce OPENSSL_USE_DEPRECATED. If OPENSSL_NO_DEPRECATED is defined at config stage then OPENSSL_USE_DEPRECATED has no effect - deprecated functions are not available. If OPENSSL_NO_DEPRECATED is not defined at config stage then applications must define OPENSSL_USE_DEPRECATED in order to access deprecated functions. Also introduce compiler warnings for gcc for applications using deprecated functions Fix yet anoither 'make clean' breakage. RT3548: Remove some obsolete platforms This commit removes BEOS. "Reject invalid constructed encodings. According to X6.90 null Add a comment noting the padding oracle. "Revert ""RT3425: constant-time evp_enc"" Causes more problems than it fixes: even though error codes are not part of the stable API "Build fixes Various build fixes Premaster secret handling fixes From BoringSSL - Send an alert when the client key exchange isn't correctly formatted. - Reject overly short RSA ciphertexts to avoid a (benign) out-of-bounds memory access. Check for invalid divisors in BN_div. Invalid zero-padding in the divisor could cause a division by 0. "Don't set client_version to the ServerHello version. The client_version needs to be preserved for the RSA key exchange. This change also means that renegotiation will "Rename gost2814789t.c to gost2814789test.c. The old name caused problems for dummytest if gost is compiled out "RT3497: The ticket that keeps on giving. Don't remove c_rehash that wasn't created by make; this script is created by configure. This fix brought to you by the letter ""f"" and" Allow using -SSLv2 again when setting Protocol in the config. RT#3625 RT3497: Fix; don't remove header files Doing 'config ; make clean' broke because clean removed header files that normal build didn't create.  So don't remove those files.  Hopefully will be better addressed by Geoff's no-symlinks patch. "Fix unused variable warning The temporary variable causes unused variable warnings in opt mode with clang Minor doc fixes. In EVP_EncryptInit remove duplicate mention of EVP_idea_cbc() In EVP_PKEY_CTX_ctrl.pod remove EVP_PKEY_get_default_digest_nid since it is documented elsewhere. "RT3497: Clean up ""dclean"" targets Some Makefiles had actions for ""dclean"" that really belonged to the ""clean"" target.  This is wrong because clean ends up RT3543: Remove #ifdef LINT I also replaced some exit/return wrappers in various programs (from main) to standardize on return. "Include <openssl/foo.h> instead of ""foo.h"" Exported headers shouldn't be included as ""foo.h"" by code from the same module Fix memory leak in SSL_new if errors occur. Remove fips.h reference. Remove OPENSSL_FIPSCANISTER code. OPENSSL_FIPSCANISTER is only set if the fips module is being built (as opposed to being used). Since the fips module wont be built in master this is redundant. Remove fips utility build rules from test/Makefile The fips test utilities are only build if an FIPS module is being built from source. As this isn't done in master these are redundant. Remove fipscanister build functionality from makefiles. Remove some unnecessary OPENSSL_FIPS references FIPS_mode() exists in all versions of OpenSSL but always returns 0 if OpenSSL is not FIPS capable. Clarify the return values for SSL_get_shared_curve. "Add extra checks for odd-length EC curve lists. Odd-length lists should be rejected everywhere upon parsing. Nevertheless "Reject elliptic curve lists of odd lengths. The Supported Elliptic Curves extension contains a vector of NamedCurves of 2 bytes each Remove incorrect code inadvertently introduced through commit 59669b6ab. Remove SSLv2 support The only support for SSLv2 left is receiving a SSLv2 compatible client hello. Updates to s_client and s_server to remove the constant 28 (for IPv4 header and UDP header) when setting an mtu. This constant is not always correct (e.g. if using IPv6). Use the new DTLS_CTRL functions instead. "Fix dtls_query_mtu so that it will always either complete with an mtu that is at least the minimum or it will fail. There were some instances in dtls1_query_mtu where the final mtu can end up being less than the minimum Remove instances in libssl of the constant 28 (for size of IPv4 header + UDP) and instead use the value provided by the underlying BIO. Also provide some new DTLS_CTRLs so that the library user can set the mtu without needing to know this constant. These new DTLS_CTRLs provide the capability to set the link level mtu to be used (i.e. including this IP/UDP overhead). The previous DTLS_CTRLs required the library user to subtract this overhead first. "There are a number of instances throughout the code where the constant 28 is used with no explanation. Some of this was introduced as part of RT#1929. The value 28 is the length of the IP header (20 bytes) plus the UDP header (8 bytes). However use of this constant is incorrect because there may be instances where a different value is needed "The first call to query the mtu in dtls1_do_write correctly checks that the mtu that we have received is not less than the minimum. If its less it uses the minimum instead. The second call to query the mtu does not do that "The SSL_OP_NO_QUERY_MTU option is supposed to stop the mtu from being automatically updated Verify that we have a sensible message len and fail if not RT#3592 provides an instance where the OPENSSL_assert that this commit replaces can be hit. I was able to recreate this issue by forcing the underlying BIO to misbehave and come back with very small mtu values. This happens the second time around the while loop after we have detected that the MTU has been exceeded following the call to dtls1_write_bytes. Use the SSLv23 method by default If SSLv2 and SSLv3 are both disabled we still support SSL/TLS. "[PR3597] Advance to the next state variant when reusing messages. Previously "Correct some layout issues Add checks to the return value of EVP_Cipher to prevent silent encryption failure. PR#1767 Remove redundant checks in ssl_cert_dup. This was causing spurious error messages when using GOST PR#3613 NetWare compilation fix. Workaround for NetWare CodeWarrior compiler which doesn't properly lookup includes when in same directory as the C file which includes it. PR#3569 Updates to X509_NAME_get_index_by_NID.pod submitted by user Bernardh via the wiki Minor changes made by Matt Caswell Updates to X509_NAME_add_entry_by_txt.pod submitted by user Bernardh via the wiki Minor changes made by Matt Caswell. "Print out Suite B status. When using the -xcert option to test certificate validity print out if we pass Suite B compliance. We print out ""not tested"" if we aren't in Suite B mode." Fix SuiteB chain checking logic. "RT2679: Fix error if keysize too short In keygen "When using EVP_PKEY_derive with a KDF set "Ensure SSL3_FLAGS_CCS_OK (or d1->change_cipher_spec_ok for DTLS) is reset once the ChangeCipherSpec message is received. Previously "Always require an advertised NewSessionTicket message. The server must send a NewSessionTicket message if it advertised one in the ServerHello "Remove ssl3_check_finished. The client sends a session ID with the session ticket "Set s->hit when resuming from external pre-shared secret. The same change was independently made in BoringSSL "Fix excert logic. If no keyfile has been specified use the certificate file instead. Fix typo: we need to check the chain is not NULL "New option no-ssl3-method which removes SSLv3_*method When no-ssl3 is set only make SSLv3 disabled by default. Retain -ssl3 options for s_client/s_server/ssltest. When no-ssl3-method is set SSLv3_*method() is removed and all -ssl3 options. We should document this somewhere Only handle RI extension for SSLv3 Don't send or parse any extensions other than RI (which is needed to handle secure renegotation) for SSLv3. Process signature algorithms before deciding on certificate. The supported signature algorithms extension needs to be processed before the certificate to use is decided and before a cipher is selected (as the set of shared signature algorithms supported may impact the choice). Don't use msg on error. Don't attempt to access msg structure if recvmsg returns an error. PR#3483 Add whrlpool and camellia .s files to perlasm list Change-Id: I626d751f19f24df6b967c17498d6189cc0acb96c Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org> Add missing SRC variable This is the only Makefile without SRC defined. This change enables a standard Makefile include directive to cover crypto/jpake/*.d files. This was automatically applied by AddSrcVarIfNeeded() in: https://code.google.com/p/mike-bland/source/browse/openssl/update_makefiles.py Change-Id: I030204a1bc873b5de5b06c8ddc0b94bb224c6650 Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org> Remove redundant test targets outside of test/ These correspond to targets of the same name in test/Makefile that clash when using the single-makefile build method using GitConfigure and GitMake. Change-Id: If7e900c75f4341b446608b6916a3d76f202026ea Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org> "Improve variable parsing when generating MINFO Before this change "{ Emit PERLASM_SCHEME to fix GitMake on OS X This fixes the errors when trying to assemble .s files using GitMake on OS X. Change-Id: I2221f558619302d22e0c57d7203173d634155678 Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org> Add cscope.out and .d files to .gitignore cscope.out is generated by cscope as described in: http://wiki.openssl.org/index.php/Testing_and_Development_Tools_and_Tips .d files are compiler-generated Makefile dependency files (e.g. using 'gcc -MMD -MP foo.c'). Change-Id: I2338858a6b6ee0527837d10a8b55cff1689023fd Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org> "Additional output for ssltest. Print out more details of the conection in ssltest specifically: server certificate curve name for EC Add SSL_CONF support to ssltest. Add command line support for SSL_CONF: server side arguments are prefixed by -s_ (e.g. -s_no_ssl3) and client side with -c_. Fixes a minor typo in the EVP docs. Out is the buffer which needs to contain at least inl + cipher_block_size - 1 bytes. Outl is just an int*. Fix free of garbage pointer. PR#3595 "Fix datarace reported by valgrind/helgrind This doesn't really fix the datarace but changes it so it can only happens once. This isn't really a problem since we always just set it to the same value. We now just stop writing it after the first time. PR3584 armv4cpuid.S: fix compilation error in pre-ARMv7 build. PR: 3474 Fix WIN32 build by disabling bn* calls. The trial division and probable prime with coprime tests are disabled on WIN32 builds because they use internal functions not exported from the WIN32 DLLs. "Tighten session ticket handling Tighten client-side session ticket handling during renegotiation: ensure that the client only accepts a session ticket if the server sends the extension anew in the ServerHello. Previously Fix ssltest logic when some protocols are compiled out. "Copy negotiated parameters in SSL_set_SSL_CTX. SSL_set_SSL_CTX is used to change the SSL_CTX for SNI Process signature algorithms in ClientHello late. "ecp_nistz256 update. Facilitate switch to custom scatter-gather routines. This modification does not change algorithms Add missing credit. "When processing ClientHello.cipher_suites "Keep old method in case of an unsupported protocol When we're configured with no-ssl3 and we receive an SSL v3 Client Hello "Add constant_time_locl.h to HEADERS Fix for session tickets memory leak. CVE-2014-3567 "Fix for SRTP Memory Leak CVE-2014-3513 This issue was reported to OpenSSL on 26th September 2014 "Add TLS_FALLBACK_SCSV documentation Disable encrypt them mac for SSL 3.0 and stream ciphers (RC4 only). "Removed duplicate definition of PKCS7_type_is_encrypted Patch supplied by Matthieu Patou <mat@matws.net> Fix single makefile. "RT3462: Document actions when data==NULL If data is NULL DTLS 1.2 support has been added to 1.0.2. Parse custom extensions after internal extensions. crypto/bn/bn_nist.c: bring original failing code back for reference. RT: 3541 Add additional explanation to CHANGES entry. RT3544: Must update TABLE after Configure change Also add comment to Configure reminding people to do that. crypto/bn/bn_nist.c: work around MSC ARM compiler bug. RT: 3541 RT3425: constant-time evp_enc Do the final padding check in EVP_DecryptFinal_ex in constant time to avoid a timing leak from padding failure. "RT3066: rewrite RSA padding checks to be slightly more constant time. Also tweak s3_cbc.c to use new constant-time methods. Also fix memory leaks from internal errors in RSA_padding_check_PKCS1_OAEP_mgf1 This patch is based on the original RT submission by Adam Langley <agl@chromium.org> CHANGES: mention ECP_NISTZ256. crypto/rsa/rsa_chk.c: harmonize error codes. crypto/ecp_nistz256.c: harmonize error codes. Fixed error introduced in commit f2be92b94dad3c6cbdf79d99a324804094cf1617 that fixed PR#3450 where an existing cast masked an issue when i was changed from int to long in that commit Picked up on z/linux (s390) where sizeof(int)!=sizeof(long) "Harmonize Tru64 and Linux make rules. RT: 3333 Fix warning. "RT2301: GetDIBits "Add ECP_NISTZ256 by Shay Gueron "Reserve option to use BN_mod_exp_mont_consttime in ECDSA. Submitted by Shay Gueron "RT2772 update: c_rehash was broken Move the readdir() lines out of the if statement "RT2560: missing NULL check in ocsp_req_find_signer If we don't find a signer in the internal list RT2196: Clear up some README wording Say where to email bug reports. Mention general RT tracker info in a separate paragraph. "RT1909: Omit version for v1 certificates When calling X509_set_version to set v1 certificate "RT671: export(i2s|s2i|i2v|v2i)_ASN1_(IA5|BIT)STRING The EXT_BITSTRING and EXT_IA5STRING are defined in x509v3.h RT468: SSL_CTX_sess_set_cache_size wrong The documentation is wrong about what happens when the session cache fills up. RT3291: Add -crl and -revoke options to CA.pl I added some error-checking while integrating this patch. RT2518: fix pod2man errors pod2man now complains when item tags are not sequential. Also complains about missing =back and other tags. Silence the warnings; most were already done. "RT992: RSA_check_key should have a callback arg The original RT request included a patch.  By the time we got around to doing it "RT2849: Redundant check of ""dsa"" variable. In the current code "RT2842: Remove spurious close-comment marker. Also Merge branch 'master' of git.openssl.org:openssl empty merge; script hiccup. "RT1834: Fix PKCS7_verify return value The function returns 0 or 1 "RT1832: Fix PKCS7_verify return value The function returns 0 or 1 RT1771: Add string.h include. "RT1325 Add i2d_re_X509_tbs i2d_re_X509_tbs re-encodes the TBS portion of the certificate. Add CHANGES entry for SCT viewer code. "psk_client_callback Followup on RT3334 fix: make sure that a directory that's the empty string returns 0 with errno = ENOENT. "RT3511: doc fix; req default serial is random RT842 x86[_64] assembly pack: add Silvermont performance data. "Remove some outdated README files "RT2820: case-insensitive filenames on Darwin Andy pointed out there is also darwin64 "RT2379: Additional typo fix Andy found an additional typo ""can be can be"". Now I have that silly ""Que sera sera"" song stuck in my head." "RT2379: Bug in BIO_set_accept_port.pod The doc says that port can be ""*"" to mean any port. That's wrong." "RT2880: HFS is case-insensitive filenames Add Darwin to list of case-insensitive filenames when installing manapges.  When doing this RT3246: req command prints version number wrong Make X509_REQ_print_ex do the same thing that X509_REQ_print does. "RT1665 RT2193: #ifdef errors in bss_dgram.c Problem with #ifdef in the BIO_CTRL_DGRAM_MTU_DISCOVER case that is different from the BIO_CTRL_DGRAM_QUERY_MTU one which seems correct. "Fix comments "Rename some callbacks New extension callback features. Support separate parse and add callback arguments. Add new callback so an application can free extension data. Change return value for send functions so < 0 is an error 0 omits extension and > 0 includes it. This is more consistent with the behaviour of other functions in OpenSSL. Modify parse_cb handling so <= 0 is an error. Make SSL_CTX_set_custom_cli_ext and SSL_CTX_set_custom_cli_ext argument order consistent. NOTE: these changes WILL break existing code. Remove (now inaccurate) in line documentation. Add custom extension sanity checks. Reject attempts to use extensions handled internally. Add flags to each extension structure to indicate if an extension has been sent or received. Enforce RFC5246 compliance by rejecting duplicate extensions and unsolicited extensions and only send a server extension if we have sent the corresponding client extension. Custom extension revision. Use the same structure for client and server custom extensions. Add utility functions in new file t1_ext.c. Use new utility functions to handle custom server and client extensions and remove a lot of code duplication. "Constant-time utilities Pull constant-time methods out to a separate header "Merge branch 'master' of git.openssl.org:openssl Gah "RT2308: Add extern ""C"" { ... } wrapper Add the wrapper to all public header files (Configure generates one).  Don't bother for those that are just lists of #define's that do renaming." Explicitly check for empty ASN.1 strings in d2i_ECPrivateKey The old code implicitly relies on the ASN.1 code returning a \0-prefixed buffer when the buffer length is 0. Change this to verify explicitly that the ASN.1 string has positive length. "RT3065: automatically generate a missing EC public key When d2i_ECPrivateKey reads a private key with a missing (optional) public key "RT3065: ec_private_key_dont_crash This change saves several EC routines from crashing when an EC_KEY is missing a public key. The public key is optional in the EC private key format and "RT2210: Add missing EVP_cleanup to example I also removed some trailing whitespace and cleaned up the ""see also"" list." RT1744: SSL_CTX_set_dump_dh() doc feedback The description of when the server creates a DH key is confusing.  This cleans it up. (rsalz: also removed trailing whitespace.) RT1804: fix EXAMPLE in EVP_EncryptInit.pod The EXAMPLE that used FILE and RC2 doesn't compile due to a few minor errors.  Tweak to use IDEA and AES-128. Remove examples about RC2 and RC5. "Typo fixes to evp documentation. This patch was submitted by user ""Kox"" via the wiki" RT3142: Extra initialization in state_machine Remove extra initialization calls in the sample program. crypto/evp/e_aes_cbc_hmac_sha[1|256].c: fix compiler warnings. "RT2847: Don't ""check"" uninitialized memory Don't check err variable until after it's been set." RT2848: Remove extra NULL check Don't need to check auth for NULL since we did when we assigned to it. RT2513: Fix typo's paramter-->parameter I also found a couple of others (padlock and signinit) and fixed them. PR2401: Typos in FAQ Also rewrite section on compiler bugs; Matt pointed out that it has some grammatical issues. PR2401: Typos in FAQ Also rewrite section on compiler bugs; Matt pointed out that it has some grammatical issues. RT2724: Remove extra declaration Extra SSL_get_selected_srtp_profile() declaration in ssl/srtp.h causes -Werror builds to fail. "RT2163: Remove some unneeded #include's Several files #include stdio.h and don't need it. Also "RT1815: More const'ness improvements Add a dozen more const declarations where appropriate. These are from Justin; while adding his patch "Add support for Camellia HMAC-Based cipher suites from RFC6367 While RFC6367 focuses on Camellia-GCM cipher suites Fixed out-of-bounds read errors in ssl3_get_key_exchange. PR#3450 RT2751: Declare get_issuer_sk() earlier. Add a declaration for get_issuer_sk() so that other functions in x509_vf.c could use it.  (Planned work around cross-certification chains.) Fix use after free bug. RT783: Minor optimization to ASN1_INTEGER_set Remove local variable and avoid extra assignment. "RT2465: Silence some gcc warnings ""Another machine RT3268: Fix spelling errors in CHANGES file. Fix a bunch of typo's and speling (sic) errors in the CHANGES file. Revision of custom extension code. Move custom extension structures from SSL_CTX to CERT structure. This change means the form can be revised in future without binary compatibility issues. Also since CERT is part of SSL structures so per-SSL custom extensions could be supported in future as well as per SSL_CTX. Include error messages on extension check failure. Further improve/fix ec_GFp_simple_points_make_affine (ecp_smpl.c) and group_order_tests (ectest.c).  Also fix the EC_POINTs_mul documentation (ec.h). "RT1665: Fix podpath to get xref's right In Makefile "RT3239: Extra comma in NAME lines of two manpages In two OpenSSL manual pages "PR 719: Configure not exiting with child status If subcommand fails "PR 718: Configure not exiting with child status If subcommand fails "Revert ""RT 2820: Case-insensitive filenames on Darwin"" This reverts commit 691edc997a35682eb7fa29445036182d2c9eb1de." RT 2820: Case-insensitive filenames on Darwin Add darwin-*-cc as one of the systems for case-insensitive filenames.  Fixes the manpage install so it doesn't create looping symlinks. RT 2517: Various typo's. Add README.md A small markdown README for GitHub users; points them to the right README and the website and RT tracker. Fix SRP authentication ciphersuites. The addition of SRP authentication needs to be checked in various places to work properly. Specifically: A certificate is not sent. A certificate request must not be sent. Server key exchange message must not contain a signature. If appropriate SRP authentication ciphersuites should be chosen. "RT 1988: Add ""const"" to SSL_use_RSAPrivateKey_ASN1 The ""unsigned char *d"" should be const." "RT 1505: Use SSL3_AL_FATAL not ""2"" Use SSL3_AL_FATAL instead of the literal constant ""2"" Every bit of cleanup helps." "Remove DJGPP (and therefore WATT32) #ifdef's. DJGPP is no longer a supported platform.  Remove all #ifdef "Fix SRP buffer overrun vulnerability. Invalid parameters passed to the SRP code can be overrun an internal buffer. Add sanity check that g Fix SRP ciphersuite DoS vulnerability. If a client attempted to use an SRP ciphersuite and it had not been set up correctly it would crash with a null pointer read. A malicious server could exploit this in a DoS attack. Thanks to Joonas Kuorilehto and Riku Hietamki from Codenomicon for reporting this issue. CVE-2014-2970 "Fix OID handling: - Upon parsing "Remove some duplicate DTLS code. In a couple of functions "Applying same fix as in dtls1_process_out_of_seq_message. A truncated DTLS fragment would cause *ok to be clear "Fix return code for truncated DTLS fragment. Previously "Fix memory leak from zero-length DTLS fragments. The |pqueue_insert| function can fail if one attempts to insert a duplicate sequence number. When handling a fragment of an out of sequence message "Fix DTLS handshake message size checks. In |dtls1_reassemble_fragment| "Avoid double free when processing DTLS packets. The |item| variable Update $default_depflags to match current defaults. "Sync with clean-up 1.0.2 CHANGES file. (If a change is already present in 1.0.1f or 1.0.1h Sync with current 1.0.2 CHANGES file. Simplify and fix ec_GFp_simple_points_make_affine (which didn't always handle value 0 correctly). "Add conditional unit testing interface. Don't call internal functions directly call them through SSL_test_functions(). This also makes unit testing work on Windows and platforms that don't export internal functions from shared libraries. By default unit testing is not enabled: it requires the compile time option ""enable-unit-test""." Don't call setenv in gost2814789t.c The call to setenv in gost2814789t.c is not portable and may not reflect the location of the GOST ENGINE on all platforms anyway. Instead set OPENSSL_ENGINES in test/Makefile "Remove demos/tunala This has been unmaintained for a long time. If it's still of interest to anyone CHANGES: mention new platforms. """EC_POINT_invert"" was checking ""dbl"" function pointer instead of ""invert"". PR#2569" Remove old unused and unmaintained demonstration code. "Minor documentation update removing ""really"" and a statement of opinion rather than a fact." Engage GHASH for PowerISA 2.0.7. [and split ppccap.c to ppccap.c and ppc_arch.h] Add GHASH for PowerISA 2.0.7. "Update heartbeat_test #includes ssl/ssl_locl.h now comes first to ensure that it will compile standalone. test/testutil.h is considered to be in the same directory as the test file RFC 5649 support. Add support for RFC5649 key wrapping with padding. Add RFC5649 tests to evptests.txt Based on PR#3434 contribution by Petr Spacek <pspacek@redhat.com>. EVP support and minor changes added by Stephen Henson. Doxygen comment block updates by Tim Hudson. Sanity check lengths for AES wrap algorithm. "Fix typo "Revert ""Add GHASH for PowerISA 2.07."" This reverts commit 927f2e5dea1da17bcc2c3d2baf7258318b57515c." "Revert ""Engage GHASH for PowerISA 2.07."" This reverts commit 14aaf883d93fb2e321ef1fe25f687fb7b62ef8fe." Clarify -Verify and PSK. PR#3452 Fix DTLS certificate requesting code. Use same logic when determining when to expect a client certificate for both TLS and DTLS. PR#3452 Don't allow -www etc options with DTLS. The options which emulate a web server don't make sense when doing DTLS. Exit with an error if an attempt is made to use them. PR#3453 Use case insensitive compare for servername. PR#3445 document -nextprotoneg option in man pages Add description of the option to advertise support of Next Protocol Negotiation extension (-nextprotoneg) to man pages of s_client and s_server. PR#3444 Use more common name for GOST key exchange. "Fixed valgrind complaint due to BN_consttime_swap reading uninitialised data. This is actually ok for this function Add names of GOST algorithms. PR#3440 * crypto/ui/ui_lib.c: misplaced brace in switch statement. Detected by dcruette@qualitesys.com Don't clean up uninitialised EVP_CIPHER_CTX on error (CID 483259). Fix memory leak in BIO_free if there is no destroy function. Based on an original patch by Neitrino Photonov <neitrinoph@gmail.com> PR#3439 x86_64 assembly pack: improve masm support. "Please Clang's sanitizer apps/speed.c: fix compiler warnings in multiblock_speed(). sha[1|512]-x86_64.pl: fix logical errors with $shaext=0. Prevent infinite loop loading config files. PR#2985 "Update API to use (char *) for email addresses and hostnames Reduces number of silly casts in OpenSSL code and likely most applications.  Consistent with (char *) for ""peername"" value from X509_check_host() and X509_VERIFY_PARAM_get0_peername()." Document certificate status request options. Sanity check keylength in PVK files. PR#2277 Return smaller of ret and f. PR#3418. Set optional peername when X509_check_host() succeeds. Pass address of X509_VERIFY_PARAM_ID peername to X509_check_host(). Document modified interface. Update ticket callback docs. RT 1638; EVP_*Final() should mention they no longer cleanup the ctx. e_os.h: limit _MSC_VER trickery to older compilers. PR: #3390 Make disabling last cipher work. ASN1 sanity check. Primitive encodings shouldn't use indefinite length constructed form. PR#2438 (partial). Add support for SHA2 in CAPI ENGINE. PR#2706 though patch is from PR#3366. Fix possible buffer overrun. (cherry picked from commit 2db3ea29298bdc347f15fbfab6d5746022f05101) Conflicts: ssl/t1_lib.c Engage SHA256/512 for PowerISA 2.07. Fix RT 2567; typo in pkeyutl page. sha512-x86_64.pl: fix linking problem under Windows. Make NO_SYS_UN_H compile. "Fix copy for CCM Don't core dump when using CMAC with dgst. We can't unfortunately print the CMAC cipher used without extending the API. PR#2579 "Clarified that the signature's buffer size Constification - mostly originally from Chromium. Fix memory leak. PR#2531 Show errors on CSR verification failure. If CSR verify fails in ca utility print out error messages. Otherwise some errors give misleading output: for example if the key size exceeds the library limit. PR#2875 Make no-ssl3 no-ssl2 do more sensible things. Clarify protocols supported. Update protocols supported and note that SSLv2 is effectively disabled by default. PR#3184 Handle BER length encoding. Tolerate BER length encoding which may include leading zeroes. PR#2746 x86_64 assembly pack: refine clang detection. Don't disable state strings with no-ssl2 Some state strings were erronously not compiled when no-ssl2 was set. PR#3295 Remove redundant check. PR#3174 Fix for EVP_PBE_alg_add(). In EVP_PBE_alg_add don't use the underlying NID for the cipher as it may have a non-standard key size. PR#3206 Tolerate critical AKID in CRLs. PR#3014 Handle IPv6 addresses in OCSP_parse_url. PR#2783 Don't advertise ECC ciphersuits in SSLv2 compatible client hello. PR#3374 Rebuild OID table. Memory leak and NULL dereference fixes. PR#3403 Make sure BN_sqr can never return a negative value. PR#3410 Remove ancient obsolete files under pkcs7. x86_64 assembly pack: addendum to last clang commit. x86_64 assembly pack: allow clang to compile AVX code. aesv8-armx.pl: inclrease interleave factor. This is to compensate for higher aes* instruction latency on Cortex-A57. ARMv8 assembly pack: add Cortex performance numbers. Multiple verifier reference identities. Implemented as STACK_OF(OPENSSL_STRING). More complete X509_check_host documentation. "Fix off-by-one errors in ssl_cipher_get_evp() In the ssl_cipher_get_evp() function "Revert ""Fix off-by-one errors in ssl_cipher_get_evp()"" This reverts commit abfb989fe0b749ad61f1aa4cdb0ea4f952fc13e0. Incorrect attribution" "add references to verify(1) man page for args_verify() options cms Document -trusted_first option in man pages and help. Add -trusted_first description to help messages and man pages of tools that deal with certificate verification. Added custom PBKDF2 iteration count to PKCS8 tool. Fix signed/unsigned comparisons. aesni-sha[1|256]-x86_64.pl: fix logical error and MacOS X build. Accept CCS after sending finished. Allow CCS after finished has been sent by client: at this point keys have been correctly set up so it is OK to accept CCS from server. Without this renegotiation can sometimes fail. PR#3400 evp/e_aes_cbc_sha[1|256].c: fix -DPEDANTIC build. sha1-x86_64.pl: add missing rex prefix in shaext. PR: 3405 Fixed incorrect return code handling in ssl3_final_finish_mac. Based on an original patch by Joel Sing (OpenBSD) who also originally identified the issue. "Client-side namecheck wildcards. A client reference identity of "".example.com"" matches a server certificate presented identity that is any sub-domain of ""example.com"" (e.g. ""www.sub.example.com). With the X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS flag "Fix off-by-one errors in ssl_cipher_get_evp() In the ssl_cipher_get_evp() function Facilitate back-porting of AESNI and SHA modules. Fix SEH and stack handling in Win64 build. Fix Windows build. (cherry picked from commit 5f4c5a902b0508eab235adecb34b236cdc0048a5) Enable multi-block support by default. Add support for Intel SHA extension. "add ECC strings to ciphers(1) "Create test/testutil.h for unit test helper macros Defines SETUP_TEST_FIXTURE and EXECUTE_TEST Fix null pointer errors. PR#3394 SRP ciphersuite correction. SRP ciphersuites do not have no authentication. They have authentication based on SRP. Add new SRP authentication flag and cipher string. Update strength_bits for 3DES. Fix strength_bits to 112 for 3DES. Link heartbeat_test with the static version of the libraries It's using an internal API that that might not be available in the shared library. Create ~/.rnd with mode 0600 instead of 0666 Because of a missing include <fcntl.h> we don't have O_CREATE and don't create the file with open() using mode 0600 but fall back to using fopen() with the default umask followed by a chmod(). Problem found by Jakub Wilk <jwilk@debian.org>. Make tls_session_secret_cb work with CVE-2014-0224 fix. If application uses tls_session_secret_cb for session resumption set the CCS_OK flag. Engage GHASH for ARMv8. Update value to use a free bit. Fix for CVE-2014-0195 A buffer overrun attack can be triggered by sending invalid DTLS fragments to an OpenSSL DTLS client or server. This is potentially exploitable to run arbitrary code on a vulnerable client or server. Fixed by adding consistency check for DTLS fragments. Thanks to Jri Aedla for reporting this issue. (cherry picked from commit 1632ef744872edc2aa2a53d487d3e79c965a4ad3) Fix for CVE-2014-0224 Only accept change cipher spec when it is expected instead of at any time. This prevents premature setting of session keys before the master secret is determined which an attacker could use as a MITM attack. Thanks to KIKUCHI Masashi (Lepidum Co. Ltd.) for reporting this issue and providing the initial fix this patch is based on. (cherry picked from commit bc8923b1ec9c467755cd86f7848c50ee8812e441) Additional CVE-2014-0224 protection. Return a fatal error if an attempt is made to use a zero length master secret. (cherry picked from commit 006cd7083f76ed5cb0d9a914857e9231ef1bc317) Fix CVE-2014-0221 Unnecessary recursion when receiving a DTLS hello request can be used to crash a DTLS client. Fixed by handling DTLS hello request without recursion. Thanks to Imre Rad (Search-Lab Ltd.) for discovering this issue. (cherry picked from commit d3152655d5319ce883c8e3ac4b99f8de4c59d846) Fix CVE-2014-3470 Check session_cert is not NULL before dereferencing it. (cherry picked from commit 8011cd56e39a433b1837465259a9bd24a38727fb) Corrected OPENSSL_NO_EC_NISTP_64_GCC_128 usage in ec_lcl.h. PR#3370 Check there is enough room for extension. Allow reordering of certificates when signing. Add certificates if -nocerts and -certfile specified when signing in smime application. This can be used this to specify the order certificates appear in the PKCS#7 structure: some broken applications require a certain ordering. PR#3316 Typo: set i to -1 before goto. PR#3302 Engage POWER8 AES support. Delays the queue insertion until after the ssl3_setup_buffers() call due to use-after-free bug. PR#3362 armv4cpuid.S: switch to CNTVCT tick counter. sha[1|256]-armv4: harmonize with arm_arch.h. Engage ARMv8 AES support. "Option to disable padding extension. Add TLS padding extension to SSL_OP_ALL so it is used with other ""bugs"" options and can be turned off. This replaces SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG which is an ancient option referring to SSLv2 and SSLREF. PR#3336" linux-aarch64: engage SHA modules. "Tidy up Constify and reduce coprime random bits to allow for multiplier. Add option to run all prime tests. Add a test to check we're really generating probable primes. "Try skipping over the adding and just picking a new random number. Generates a number coprime to 2 Remove editor barf on updating copyright. Add python script to generate the bits needed for the prime generator. "Generate safe primes not divisible by 3 Run the prime speed tests for 10 seconds. Add speed test for prime trial division. Remove static from probable_prime_dh. Remove indentation from the goto targets. Strip trailing whitespace from Configure. Set default global mask to UTF8 only. Initialise alg. PR#3313 Use correct digest when exporting keying material. PR#3319 Don't compile heartbeat test code on Windows (for now). add description of -attime to man page the verify app man page didn't describe the usage of attime option even though it was listed as a valid option in the -help message. This patch fixes this omission. Set version number correctly. PR#3249 Fix memory leak. PR#3278 aesp8-ppc.pl: optimize CBC decrypt even further. 10-19% improvement depending on key length and endianness. Fix for test_bn regular expression to work on Windows using MSYS. PR#3346 "Don't use expired certificates if possible. When looking for the issuer of a certificate Only copy opensslconf.h at init time. Add an NSS output format to sess_id to export to export the session id and the master key in NSS keylog format. PR#3352 "OpenSSL is able to generate a certificate with name constraints with any possible subjectAltName field. The Name Contraint example in x509v3_config(5) even use IP as an example: nameConstraints=permitted;IP:192.168.0.0/255.255.0.0 However Fix heartbeat_test for -DOPENSSL_NO_HEARTBEATS Replaces the entire test with a trivial implementation when OPENSSL_NO_HEARTBEATS is defined. Check length first in BUF_strnlen(). Remove redundant test. Implement BUF_strnlen() and use it instead of strlen(). Fix for PKCS12_create if no-rc2 specified. Use triple DES for certificate encryption if no-rc2 is specified. PR#3357 Change default cipher in smime app to des3. PR#3357 aesv8-armx.pl: optimize by adding 128-bit code paths. Fix bug in signature algorithm copy. Fixup for ancient compilers. "Zero-initialize heartbeat test write buffer The previous calls to memset() were added to tear_down() when I noticed the test spuriously failing in opt mode More through error checks in set_up Checks the return values of ssl_init_wbio_buffer() and ssl3_setup_buffers(). Unit/regression test for TLS heartbeats. Regression test against CVE-2014-0160 (Heartbleed). More info: http://mike-bland.com/tags/heartbleed.html Enc doesn't support AEAD ciphers. (cherry picked from commit 09184dddead165901700b31eb39d540ba30f93c5) Fix grammar error in verify pod. PR#3355 Add information to BUGS section of enc documentation. PR#3354 Corrected POD syntax errors. PR#3353 Check sk_SSL_CIPHER_num() after assigning sk. Correct the return type on the signature for X509_STORE_CTX_get_ex_data given in the pod file. Replace manual ASN1 decoder with ASN1_get_object Replace manual ASN.1 decoder with ASN1_get object. This will decode the tag and length properly and check against it does not exceed the supplied buffer length. PR#3335 "Add ""teaser"" AES module for PowerISA 2.07. ""Teaser"" means that it's not integrated yet and purpose of this commit is primarily informational Fixed NULL pointer dereference. See PR#3321 Set authkey to NULL and check malloc return value. Fix infinite loop. PR#3347 Move length check earlier to ensure we don't go beyond the end of the user's buffer. PR#3320 Return an error if no recipient type matches. If the key type does not match any CMS recipient type return an error instead of using a random key (MMA mitigation). This does not leak any useful information to an attacker. PR#3348 "s_client/s_server: support unix domain sockets The ""-unix <path>"" argument allows s_server and s_client to use a unix domain socket in the filesystem instead of IPv4 (""-connect"" "evp: prevent underflow in base64 decoding This patch resolves RT ticket #2608. Thanks to Robert Dugal for originally spotting this "bignum: allow concurrent BN_MONT_CTX_set_locked() The lazy-initialisation of BN_MONT_CTX was serialising all threads Initialize num properly. PR#3289 PR#3345 Set Enveloped data version to 2 if ktri version not zero. "md5/asm/md5-[586|x86_64].pl: +15% on Atom. [MD5 is hardly relevant C64x+ assembply pack: add RC4 module. C64x+ assembly pack: make it work with older toolchain. "dso: eliminate VMS code on non-VMS systems Even though the meat of dso_vms.c is compiled out on non-VMS builds Fixed spelling error in error message. Fix supplied by Marcos Marado "bignum: fix boundary condition in montgomery logic It's not clear whether this inconsistency could lead to an actual computation error More warnings. doc: Add missing =back directive. Signed-off-by: Chris Rorvick <chris@rorvick.com> Fix eckey_priv_encode() Fix eckey_priv_encode to return an error on failure of i2d_ECPrivateKey. "apps: constify some string parameters There are certainly many more constifiable strings in the various interfaces "Remove latest version "util/mkdef.pl: o_time.h doesn't exist any more o_time.h was removed in commit ff49a94 "bn/asm/armv4-gf2m.pl Fix use after free. "Fix SSL_CTX_get{first "Fix free errors in ocsp utility. Keep copy of any host Return if ssleay_rand_add called with zero num. Treat a zero length passed to ssleay_rand_add a no op: the existing logic zeroes the md value which is very bad. OpenSSL itself never does this internally and the actual call doesn't make sense as it would be passing zero bytes of entropy. Thanks to Marcus Meissner <meissner@suse.de> for reporting this bug. (cherry picked from commit 5be1ae28ef3c4bdec95b94f14e0e939157be550a) Add heartbeat extension bounds check. A missing bounds check in the handling of the TLS heartbeat extension can be used to reveal up to 64k of memory to a connected client or server. Thanks for Neel Mehta of Google Security for discovering this bug and to Adam Langley <agl@chromium.org> and Bodo Moeller <bmoeller@acm.org> for preparing the fix (CVE-2014-0160) (cherry picked from commit 96db9023b881d7cd9f379b0c154650d6c108e9a3) Document -verify_return_error option. "vpaes-[x86_64|ppc].pl: fix typo Set TLS padding extension value. Enable TLS padding extension using official value from: http://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml Update security framework docs. "Use correct length when prompting for password. Use bufsiz - 1 not BUFSIZ - 1 when prompting for a password in the openssl utility. Thanks to Rob Mackinnon Don't try and verify signatures if key is NULL (CVE-2013-0166) Add additional check to catch this in ASN1_item_verify too. (cherry picked from commit 66e8211c0b1347970096e04b18aa52567c325200) Fix warning. Set security level in cipher string. Allow setting of security level in cipher string using the @SECLEVEL=N syntax. Set security level to zero is ssltest Since ssltest needs to test low security ciphersuites and keys set security level to zero so they aren't rejected. Security callback debug print out. Add a debugging security callback option to s_client/s_server. This will print out each security parameter as it is accepted or rejected. "Security framework. Security callback: selects which parameters are permitted including sensible defaults based on bits of security. The ""parameters"" which can be selected include: ciphersuites Allow return of supported ciphers. New function ssl_cipher_disabled. Check for disabled client ciphers using ssl_cipher_disabled. New function to return only supported ciphers. New option to ciphers utility to print only supported ciphers. "Auto DH support. Add auto DH parameter support. This is roughly equivalent to the ECDH auto curve selection but for DH. An application can just call SSL_CTX_set_auto_dh(ctx Fix memory leak with client auth. (cherry picked from commit bc5ec653ba65fedb1619c8182088497de8a97a70) Add -no_resumption_on_reneg to SSL_CONF. (cherry picked from commit 1f44dac24d1cb752b1a06be9091bb03a88a8598e) Update chain building function. Don't clear verification errors from the error queue unless SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR is set. If errors occur during verification and SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR is set return 2 so applications can issue warnings. (cherry picked from commit 2dd6976f6d02f98b30c376951ac38f780a86b3b5) Workaround for some CMS signature formats. Some CMS SignedData structure use a signature algorithm OID such as SHA1WithRSA instead of the RSA algorithm OID. Workaround this case by tolerating the signature if we recognise the OID. Retry callback only after ClientHello received. "Fix for CVE-2014-0076 Fix for the attack described in the paper ""Recovering OpenSSL ECDSA Nonces Using the FLUSH+RELOAD Cache Side-channel Attack"" by Yuval Yarom and Naomi Benger. Details can be obtained from: http://eprint.iacr.org/2014/140 Thanks to Yuval Yarom and Naomi Benger for discovering this flaw and to Yuval Yarom for supplying a fix. (cherry picked from commit 2198be3483259de374f91e57d247d0fc667aef29) Conflicts: CHANGES" Simplify ssl_add_cert_chain logic. engines/ccgost/gosthash.c: simplify and avoid SEGV. PR: 3275 "SPARC T4 assembly pack: treat zero input length in CBC. The problem is that OpenSSH calls EVP_Cipher For self signed root only indicate one error. (cherry picked from commit bdfc0e284c89dd5781259cc19aa264aded538492) PKCS#8 support for alternative PRFs. Add option to set an alternative to the default hmacWithSHA1 PRF for PKCS#8 private key encryptions. This is used automatically by PKCS8_encrypt if the nid specified is a PRF. Add option to pkcs8 utility. Update docs. (cherry picked from commit b60272b01fcb4f69201b3e1659b4f7e9e9298dfb) Fix memory leak. (cherry picked from commit 124d218889dfca33d277404612f1319afe04107e) Add function to free compression methods. Although the memory allocated by compression methods is fixed and cannot grow over time it can cause warnings in some leak checking tools. The function SSL_COMP_free_compression_methods() will free and zero the list of supported compression methods. This should *only* be called in a single threaded context when an application is shutting down to avoid interfering with existing contexts attempting to look up compression methods. (cherry picked from commit 976c58302b13d085edb3ab822f5eac4b2f1bff95) Makefile.org: fix syntax error on Solaris. PR: 3271 Configure: mark unixware target as elf-1. CABForum EV OIDs for Subject Jurisdiction of Incorporation or Registration. sha/asm/sha256-586.pl: don't try to compile SIMD with no-sse2. ssl/t1_enc.c: check EVP_MD_CTX_copy return value. PR: 3201 aes/asm/vpaes-ppc.pl: fix traceback info. Don't use BN_ULLONG in n2l8 use SCTS_TIMESTAMP. (cherry picked from commit 3678161d717d0f46c5b5b052a6d6a33438b1df00) Fix for v3_scts.c Not all platforms define BN_ULLONG. Define SCTS_TIMESTAMP as a type which should work on all platforms. (cherry picked from commit 6634416732b94627eba1c47de3c3a6321a5458f0) Add -show_chain option to print out verified chain. Avoid Windows 8 Getversion deprecated errors. Windows 8 SDKs complain that GetVersion() is deprecated. We only use GetVersion like this: (GetVersion() < 0x80000000) which checks if the Windows version is NT based. Use a macro check_winnt() which uses GetVersion() on older SDK versions and true otherwise. Parse non-v1 SCTs less awkwardly. "ms/do_win64a.bat: forward to NUL x509/by_dir.c: fix run-away pointer (and potential SEGV) when adding duplicates in add_cert_dir. PR: 3261 Reported by: Marian Done config: recognize ARMv8/AArch64 target. Option to set current cert to server certificate. aes/asm/aesni-x86[_64].pl: minor Atom-specific performance tweak. Move gmtime functions to crypto.h. Reverse export of o_time.h. "Move the SCT List extension parser into libssl. Add the extension parser in the s_client Restore SSL_OP_MSIE_SSLV2_RSA_PADDING The flag SSL_OP_MSIE_SSLV2_RSA_PADDING hasn't done anything since OpenSSL 0.9.7h but deleting it will break source compatibility with any software that references it. Restore it but #define to zero. (cherry picked from commit b17d6b8d1d49fa4732deff17cfd1833616af0d9c) Don't use getcwd in non-copy builds. Remove duplicate statement. "Add support for aes-128/192/256-ctr to the cryptodev engine. This can be used to speed up SRTP with libsrtp "Use defaults bits in req when not given If you use ""-newkey rsa"" it's supposed to read the default number of bits from the config file.  However the value isn't used to generate the key Fix additional pod errors with numbered items. ssl/s3_pkt.c: detect RAND_bytes error in multi-block. x86[_64]cpuid.pl: add low-level RDSEED. Include TA in checks/callback with partial chains. When a chain is complete and ends in a trusted root checks are also performed on the TA and the callback notified with ok==1. For consistency do the same for chains where the TA is not self signed. Don't do loop detection for self signed check. Add suppot for ASCII with CRLF canonicalisation. ghash-x86[_64].pl: ~15% improvement on Atom Silvermont (other processors unaffected). "Oops "Fix whitespace "Update custom TLS extension and supplemental data 'generate' callbacks to support sending an alert. If multiple TLS extensions are expected but not received e_aes_cbc_hmac_sha[1|256].c: fix compiler warning. "ssl/s3_pkt.c: move multi-block processing to ssl3_write_bytes. This allows to process multiple fragmets of maximum fragment size evp/e_aes_cbc_hmac_sha*.c: additional CTRL to query buffer requirements. Add quotes as CC can contain spaces. PR#3253 New ctrl to set current certificate. New ctrl sets current certificate based on certain criteria. Currently two options: set the first valid certificate as current and set the next valid certificate as current. Using these an application can iterate over all certificates in an SSL_CTX or SSL structure. Demo of use of errors in applications. "crypto/aes/asm/aesni-x86[_64].pl update Clarify docs. Remove reference to ERR_TXT_MALLOCED in the error library as that is only used internally. Indicate that returned error data must not be freed. (cherry picked from commit f2d678e6e89b6508147086610e985d4e8416e867) Check i before r[i]. PR#3244 (cherry picked from commit 9614d2c676ffe74ce0c919d9e5c0d622a011cbed) Fix demo comment: 0.9.9 never released. "Add loaded dynamic ENGINEs to list. Always add a dynamically loaded ENGINE to list. Otherwise it can cause problems when multiply loaded Compare encodings in X509_cmp as well as hash. Add cert callback retry test. Add new function SSL_CTX_get_ssl_method(). Partial fix for PR#3183. Omit initial status request callback check. PR#3178 Use rdrand as additional entropy source. If available rdrand is used as an additional entropy source for the PRNG and for additional input in FIPS mode. Fix bug in X509_V_FLAG_IGNORE_CRITICAL CRL handling. "Replace EDH-RSA-DES-CBC-SHA "change SSL3_CK_EDH_* to SSL_CK_DHE_* (with backward-compatibility) This change normalizes the SSL_CK_DHE_ #defines to use the common term ""DHE"" "use SSL_kDHE throughout instead of SSL_kEDH DHE is the standard term used by the RFCs and by other TLS implementations.  It's useful to have the internal variables use the standard terminology. This patch leaves a synonym SSL_kEDH in place "emit ""DHE"" instead of ""edh"" for kX packet trace output other parts of packet tracing emit the standard ""DHE"" label instead of ""edh"".  This change brings the output of ssl_print_client_keyex() and ssl_print_server_keyex() into accordance with the standard term." "Allow ""DHE"" and ""kDHE"" as synonyms of ""EDH"" and ""kEDH"" when specifiying ciphers The standard terminology in https://tools.ietf.org/html/rfc5426 is ""DHE"".  ""openssl ciphers"" outputs ""DHE"" (for the most part).  But users of the library currently cannot specify ""DHE"" "use SSL_kECDHE throughout instead of SSL_kEECDH ECDHE is the standard term used by the RFCs and by other TLS implementations.  It's useful to have the internal variables use the standard terminology. This patch leaves a synonym SSL_kEECDH in place "emit ""ECDHE"" instead of ""EECDH"" for kX packet trace output other parts of packet tracing emit the standard ""ECDHE"" label instead of ""EECDH"".  This change brings the output of ssl_print_client_keyex() and ssl_print_server_keyex() into accordance with the standard term." "Allow ""ECDHE"" as a synonym of ""EECDH"" when specifiying ciphers The standard terminology in https://tools.ietf.org/html/rfc4492 is ECDHE.  ""openssl ciphers"" outputs ECDHE.  But users of the library currently cannot specify ECDHE PPC assembly pack: relax 64-bit requirement for little-endian support. Sync NEWS. "aesni-sha1-x86_64.pl: refine Atom-specific optimization. (and update performance data "Add ServerInfoFile to SSL_CONF Use algorithm specific chains for certificates. Fix a limitation in SSL_CTX_use_certificate_chain_file(): use algorithm specific chains instead of the shared chain. Update docs. ssl/t1_enc.c: optimize PRF (suggested by Intel). Don't change version number if session established When sending an invalid version number alert don't change the version number to the client version if a session is already established. Thanks to Marek Majkowski for additional analysis of this issue. PR#3191 sparcv9cap.c: omit random detection. PR: 3202 FAQ: why SIGILL? ARM assembly pack: make it work with older toolchain. Canonicalise input in CMS_verify. If content is detached and not binary mode translate the input to CRLF format. Before this change the input was verified verbatim which lead to a discrepancy between sign and verify. Fix DTLS retransmission from previous session. For DTLS we might need to retransmit messages from the previous session so keep a copy of write context in DTLS retransmission buffers instead of replacing it after sending CCS. CVE-2013-6450. (cherry picked from commit 34628967f1e65dc8f34e000f0f5518e21afbfc7b) Ignore NULL parameter in EVP_MD_CTX_destroy. (cherry picked from commit a6c62f0c25a756c263a80ce52afbae888028e986) sha1-x86_64.pl: harmonize Win64 SE handlers for SIMD code pathes. (and ensure stack alignment in the process) evp/e_[aes|camellia].c: fix typo in CBC subroutine. It worked because it was never called. PPC assembly pack update addendum. sha512.c: fullfull implicit API contract in SHA512_Transform. SHA512_Transform was initially added rather as tribute to tradition than for practucal reasons. But use was recently found in ssl/s3_cbc.c and it turned to be problematic on platforms that don't tolerate misasligned references to memory and lack assembly subroutine. PPC assembly pack: improve AIX support (enable vpaes-ppc). Check EVP errors for handshake digests. Partial mitigation of PR#3200 (cherry picked from commit 0294b2be5f4c11e60620c0018674ff0e17b14238) Update demo. "Add opaque ID structure. Move the IP Update to pad extension. Fix padding calculation for different SSL_METHOD types. Use the standard name as used in draft-agl-tls-padding-02 Fix for partial chain notification. For consistency with other cases if we are performing partial chain verification with just one certificate notify the callback with ok==1. (cherry picked from commit 852553d9005e13aed7feb986a5d71cb885b994c7) Don't use rdrand engine as default unless explicitly requested. (cherry picked from commit 16898401bd47a153fbf799127ff57fdcfcbd324f) perlasm/ppc-xlate.pl: add support for AltiVec/VMX and VSX. Suggested by: Marcello Cerri "Configure: remove vpaes-ppc from aix targets. AIX assembler doesn't hanle .align crypto/bn/rsaz*: fix licensing note. rsaz_exp.c: harmonize line terminating; asm/rsaz-*.pl: minor optimizations. vpaes-ppc.pl: fix bug in IV handling and comply with ABI. Add Vector Permutation AES for PPC. Fix compilation with no-nextprotoneg. PR#3106 Flag to disable automatic copying of contexts. Some functions such as EVP_VerifyFinal only finalise a copy of the passed context in case an application wants to digest more data. Doing this when it is not needed is inefficient and many applications don't require it. For compatibility the default is to still finalise a copy unless the flag EVP_MD_CTX_FLAG_FINALISE is set in which case the passed context is finalised an *no* further data can be digested after finalisation. "Additional ""chain_cert"" functions. PR#3169 This patch Delete duplicate entry. PR#3172 Configure: add linux-ppc64le target. Submitted by: Marcelo Cerri srp/srp_grps.h: make it Compaq C-friendly. PR: 3165 Submitted by: Daniel Richard G. Fix memory leak. "Support setting of ""no purpose"" for trust. If the oid parameter is set to NULL in X509_add1_trust_object create an empty list of trusted purposes corresponding to ""no purpose"" if trust is checked." Makfile.org: make FIPS build work with BSD make. Update FAQ with PGP note. "Fix for some platforms where ""char"" is unsigned." "Document RSAPublicKey_{in Check for missing components in RSA_check. "Experimental workaround TLS filler (WTF) extension. Based on a suggested workaround for the ""TLS hang bug"" (see FAQ and PR#2771): if the TLS Client Hello record length value would otherwise be > 255 and less that 512 pad with a dummy extension containing zeroes so it is at least 512. To enable it use an unused extension number (for example 0x4242) using e.g. -DTLSEXT_TYPE_wtf=0x4242 WARNING: EXPERIMENTAL Enable PSK in FIPS mode. Enable PSK ciphersuites with AES or DES3 in FIPS mode. Initialise context before using it. (cherry picked from commit a4947e4e064d2d5bb622ac64cf13edc4a46ed196) Add brainpool curves to trace output. (cherry picked from commit bd80d0229c9a154f569b046365bc85d76b59cfc5) "DTLS/SCTP struct authchunks Bug PR: 2809 DTLS/SCTP requires DATA and FORWARD-TSN chunks to be protected with SCTP-AUTH.  It is checked if this has been activated successfully for the local and remote peer. Due to a bug "DTLS/SCTP Finished Auth Bug PR: 2808 With DTLS/SCTP the SCTP extension SCTP-AUTH is used to protect DATA and FORWARD-TSN chunks. The key for this extension is derived from the master secret and changed with the next ChangeCipherSpec Fix SSL_OP_SINGLE_ECDH_USE Don't require a public key in tls1_set_ec_id if compression status is not needed. This fixes a bug where SSL_OP_SINGLE_ECDH_USE wouldn't work. (cherry picked from commit 5ff68e8f6dac3b0d8997b8bc379f9111c2bab74f) Add -ecdh_single option. Add -ecdh_single option to set SSL_OP_SINGLE_ECDH_USE on the command line. (cherry picked from commit f14a4a861d2d221ed565a75441a218f85b8db530) Fix warning. "engines/e_aep.c: make it BN_ULONG-size and endian ""neutral""." POD: Fix list termination This fixes problems in POD list formatting: extra or missing =back sequences. doc/ssl/SSL_CTX_set1_curves.pod around line 90: =back without =over doc/ssl/SSL_CTX_set1_verify_cert_store.pod around line 73: =back without =over doc/ssl/SSL_CTX_add1_chain_cert.pod around line 82: =back without =over doc/crypto/evp.pod around line 40: '=item' outside of any '=over' crypto/des/des.pod around line 184: You forgot a '=back' before '=head1' PR#3147 "POD: Fix item numbering Newer pod2man considers =item [1-9] part of a numbered list Update test server details. Add SSL_CONF command to set DH Parameters. Remove unused variable. "Do not include a timestamp in the Client/ServerHello Random field. Instead Add demo for SSL server using SSL_CONF. Prevent use of RSA+MD5 in TLS 1.2 by default. Removing RSA+MD5 from the default signature algorithm list prevents its use by default. If a broken implementation attempts to use RSA+MD5 anyway the sanity checking of signature algorithms will cause a fatal alert. Add brainpool curves to NID table too. RFC7027 (Brainpool for TLS) support. Sync OID numbers with 1.0.2 branch. bn/asm/*x86_64*.pl: correct assembler requirement for ad*x. Initial aarch64 bits. MIPS assembly pack: get rid of deprecated instructions. Latest MIPS ISA specification declared 'branch likely' instructions obsolete. To makes code future-proof replace them with equivalent. evp/e_aes_cbc_hmac_sha*.c: limit multi-block fragmentation to 1KB. Excessive fragmentation put additional burden (of addtional MAC calculations) on the other size and limiting fragments it to 1KB limits the overhead to ~6%. bn/bn_exp.c: prefer MULX/AD*X over AVX2. ssl/s3_pkt.c: add initial multi-block encrypt. "evp/e_aes_cbc_hmac_sha*.c: harmonize names Support new asm files. evp/e_des3.c: fix typo with potential integer overflow on 32-bit platforms. Submitted by: Yuriy Kaminskiy perlasm/sparcv9_modes.pl: make it work even with seasoned perl. PR: 3130 "x86_64 assembly pack: add multi-block AES-NI aes/asm/*-armv*.pl: compensate for inconsistencies in tool-chains. Suggested by: Ard Biesheuvel Produce PEM we would consume. Show useful errors. Conflicts: apps/s_server.c Mix time into the pool to avoid repetition of the Android duplicated PID problem. More diagnostics for invalid OIDs. Fix error code clashes. "DTLS version usage fixes. Make DTLS behave like TLS when negotiating version: record layer has DTLS 1.0 "Move the change note for partial chain verification: this is code from the main branch (http://cvs.openssl.org/chngview?cn=19322) later added to the 1.0.2 branch (http://cvs.openssl.org/chngview?cn=23113) Redo deletion of some serverinfo code that supplemental data code mistakenly reinstated. Sync CHANGES and NEWS files. (Various changes from the master branch are now in the 1.0.2 branch too.) "Fix overly lenient comparisons: - EC_GROUP_cmp shouldn't consider curves equal just because the curve name is the same. (They really *should* be the same in this case Add support for Cygwin-x86_64. PR: 3110 Submitted by Corinna Vinschen. bsaes-armv7.pl: remove byte order dependency and minor optimization. "Update docs to mention ""BEGIN SERVERINFO FOR ""." Redo deletion of some serverinfo code that supplemental data code mistakenly reinstated. Use TLS version supplied by client when fingerprinting Safari. Fix compilation with no-ec and/or no-tlsext. Constification. Partial path fix. When verifying a partial path always check to see if the EE certificate is explicitly trusted: the path could contain other untrusted certificates. Set TLS v1.2 disabled mask properly. Const fix. More cleanup. "Add callbacks supporting generation and retrieval of supplemental data entries Clean up layout. "Add an ""-xmpphost"" option to s_client * Many XMPP servers are configured with multiple domains (virtual hosts) * In order to establish successfully the TLS connection you have to specify which virtual host you are trying to connect. * Test this Fix XMPP code detection on s_client starttls xmpp * Some XMPP Servers (OpenFire) use double quotes. * This makes s_client starttls work with this servers. * Tested with OpenFire servers from http://xmpp.net/ :: openssl s_client -connect coderollers.com:5222 -starttls xmpp Don't prefer ECDHE-ECDSA ciphers when the client appears to be Safari on OS X. OS X 10.8..10.8.3 has broken support for ECDHE-ECDSA ciphers. Correctly test for no-ec. Typo: don't call RAND_cleanup during app startup. (cherry picked from commit 90e7f983b573c3f3c722a02db4491a1b1cd87e8c) Add documentation. Preliminary documentation for chain and verify stores and certificate chain setting functions. Don't run ECDH CMS tests if EC disabled. "DTLS message_sequence number wrong in rehandshake ServerHello This fix ensures that * A HelloRequest is retransmitted if not responded by a ClientHello * The HelloRequest ""consumes"" the sequence number 0. The subsequent ServerHello uses the sequence number 1. * The client also expects the sequence number of the ServerHello to be 1 if a HelloRequest was received earlier. This patch fixes the RFC violation." DTLS handshake fix. Reported by: Prashant Jaikumar <rmstar@gmail.com> Fix handling of application data received before a handshake. Add X9.42 DH test. CMS RFC2631 X9.42 DH enveloped data support. Add KDF for DH. Add X9.42 DH KDF. Move sharedinfo generation code to CMS library as the same structure is used by DH and ECDH. Move ASN1_OBJECT typedef to ossl_typ.h so it can be picked up by dh headers without the need to use ASN1. Extend DH parameter generation support. Add support for DH parameter generation using DSA methods including FIPS 186-3. Minor optimisation to KDF algorithm. Don't need to use temporary buffer if remaining length equals digest length. Algorithm parameter support. Check and set AlgorithmIdenfier parameters for key wrap algorithms. Currently these just set parameters to NULL. crypto/evp/e_aes.c: fix logical pre-processor bug and formatting. Bug would emerge when XTS is added to bsaes-armv7.pl. Pointed out by Ard Biesheuvel of Linaro. crypto/sha/asm/sha*-x86_64.pl: comply with Win64 ABI. Add a no-opt 64-bit target. Support ALPN. This change adds support for ALPN[1] in OpenSSL. ALPN is the IETF blessed version of NPN and we'll be supporting both ALPN and NPN for some time yet. [1] https://tools.ietf.org/html/draft-ietf-tls-applayerprotoneg-00 Conflicts: ssl/ssl3.h ssl/t1_lib.c "Make ecdsatest work with nonces. Update ecdsatest to use ECDSA_sign_setup and ECDSA_sign_ex Temporarily disable ECDSA test. Disable ECDSA test temporarily: it is incompatible with ECDSA nonces. Scripts to recreate S/MIME test certificates. Add a script to generate keys and certificates for the S/MIME and CMS tests. Update certificates and add EC examples. Add support for ECDH KARI. Add support for ECDH in enveloped data. The CMS ctrls for the EC ASN1 method decode/encode the appropriate parameters from the CMS ASN1 data and send appropriate data to the EC public key method. Add support for X9.62 KDF. Add X9.62 KDF to EC EVP_PKEY_METHOD. Add new OIDs from RFC5753 Add OIDs for KDF schemes from RFC5753 and add cross references for each type and the appropriate digest to use. CMS support for key agreeement recipient info. Add hooks to support key agreement recipient info type (KARI) using algorithm specific code in the relevant public key ASN1 method. Set CMS EnvelopedData version correctly. "EVP support for wrapping algorithms. Add support for key wrap algorithms via EVP interface. Generalise AES wrap algorithm and add to modes "Make `safe' (EC)DSA nonces the default. This change updates 8a99cb29 to make the generation of (EC)DSA nonces using the message digest the default. It also reverts the changes to (EC)DSA_METHOD structure. In addition to making it the default Fix verify loop with CRL checking. PR #3090 Reported by: Franck Youssef <fry@open.ch> If no new reason codes are obtained after checking a CRL exit with an error to avoid repeatedly checking the same CRL. This will only happen if verify errors such as invalid CRL scope are overridden in a callback. Note non-export of CC. Support new rsaz asm stuff. s/rsaz_eligible/rsaz_avx2_eligible/. "Remove RSAX engine "Add RSAZ assembly modules. RT: 2582 bn/asm/x86_86-mont.pl: optimize reduction for Intel Core family. bn/bn_exp.c: harmonize. Initialise CMS signature buffer length properly. config: fix executable format detection on latest FreeBSD. Submitted by: Bryan Drewery PR: 3075 "bn/bn_exp.c: Solaris-specific fix Fix duplicate error code. Update cms docs. Document use of -keyopt to use RSA-PSS and RSA-OAEP modes. Add -keyopt option to cms utility. Add support for custom public key parameters in the cms utility using the -keyopt switch. Works for -sign and also -encrypt if -recip is used. CMS RSA-OAEP and RSA-PSS support. Extend RSA ASN1 method to support CMS PSS signatures for both sign and verify. For signing the EVP_PKEY_CTX parameters are read and the appropriate CMS structures set up. For verification the CMS structures are analysed and the corresponding parameters in the EVP_PKEY_CTX set. Also add RSA-OAEP support. For encrypt the EVP_PKEY_CTX parameters are used. For decrypt the CMS structure is uses to set the appropriate EVP_PKEY_CTX parameters. Update to OAEP support. Add OAEP ctrls to retrieve MD and label. Return errors if an attempt is made to set or retrieve OAEP parameters when padding mode is not OAEP. Add control to retrieve signature MD. SPARC T4 DES support: fix typo. Optimize SPARC T4 MONTMUL support. Improve RSA sing performance by 20-30% by: - switching from floating-point to integer conditional moves; - daisy-chaining sqr-sqr-sqr-sqr-sqr-mul sequences; - using MONTMUL even during powers table setup; PA-RISC assembler pack: switch to bve in 64-bit builds. PR: 3074 Add secure DSA nonce flag. This change adds the option to calculate (EC)DSA nonces by hashing the message and private key along with entropy to avoid leaking the private key if the PRNG fails. "This change alters the processing of invalid "Document updates from wiki. PR#3071 The primary changes made are: - Updates to the ""NAME"" section of many pages to correctly reflect the functions defined on those pages. This section is automatically parsed by the util/extract-names.pl script Exetended OAEP support. Extend OAEP support. Generalise the OAEP padding functions to support arbitrary digests. Extend EVP_PKEY RSA method to handle the new OAEP padding functions and add ctrls to set the additional parameters. Reencode with X509_CRL_ctx_sign too. Ensure that x**0 mod 1 = 0. "Add volatile qualifications to two blocks of inline asm to stop GCC from eliminating them as dead code. Both volatile and ""memory"" are used because of some concern that the compiler may still cache values across the asm block without it crypto/bn/bn_exp.c: SPARC portability fix. vpaes-x86[_64].pl: minor Atom-specific optimization. Add AES-SHA256 stitch. Ugly hack to avoid recompiling the same thing multiple times in parallel. Reencode certificates in X509_sign_ctx. Reencode certificates in X509_sign_ctx as well as X509_sign. This was causing a problem in the x509 application when it modified an existing certificate. Fix Windows linking error in GOST test case. "crypto/modes/modes_lcl.h: let STRICT_ALIGNMENT be on ARMv7. While ARMv7 in general is capable of unaligned access Suite B support for DTLS 1.2 Check for Suite B support using method flags instead of version numbers: anything supporting TLS 1.2 cipher suites will also support Suite B. Return an error if an attempt to use DTLS 1.0 is made in Suite B mode. Dual DTLS version methods. Add new methods DTLS_*_method() which support both DTLS 1.0 and DTLS 1.2 and pick the highest version the peer supports during negotiation. As with SSL/TLS options can change this behaviour specifically SSL_OP_NO_DTLSv1 and SSL_OP_NO_DTLSv1_2. Set s->d1 to NULL after freeing it. "Make sure all tests are actually run Use original alltests target for definitive test list. Helper scripts for one makefile build. "Merge Make TLS 1.2 ciphers work again. Since s->method does not reflect the final client version when a client hello is sent for SSLv23_client_method it can't be relied on to indicate if TLS 1.2 ciphers should be used. So use the client version instead. cryptlib.c: fix typo in OPENSSL_showfatal. aesni-x86_64.pl: optimize CBC decrypt. Give CBC decrypt approximately same treatment as to CTR and collect 25%. gcm128.c: fix linking problems in 32-bit Windows build. Typo. Add support for SPARC T4 DES opcode. Add AES-NI GCM stitch. Enable TLS 1.2 ciphers in DTLS 1.2. Port TLS 1.2 GCM code to DTLS. Enable use of TLS 1.2 only ciphers when in DTLS 1.2 mode too. Update fixed DH requirements. The relaxed signing requirements for fixed DH certificates apply to DTLS 1.2 too. "Provisional DTLS 1.2 support. Add correct flags for DTLS 1.2 Remove versions test from dtls1_buffer_message Since this is always called from DTLS code it is safe to assume the header length should be the DTLS value. This avoids the need to check the version number and should work with any version of DTLS (not just 1.0). Disable compression for DTLS. The only standard compression method is stateful and is incompatible with DTLS. "Use enc_flags when deciding protocol variations. Use the enc_flags field to determine whether we should use explicit IV "DTLS revision. Revise DTLS code. There was a *lot* of code duplication in the DTLS code that generates records. This makes it harder to maintain and sometimes a TLS update is omitted by accident from the DTLS code. Specifically almost all of the record generation functions have code like this: some_pointer = buffer + HANDSHAKE_HEADER_LENGTH; ... Record creation stuff ... set_handshake_header(ssl Avoid unnecessary fragmentation. Encode INTEGER correctly. If an ASN1_INTEGER structure is allocated but not explicitly set encode it as zero: don't generate an invalid zero length INTEGER. (cherry picked from commit 1643edc63c3e15b6db5a15a728bc288f2cc2bbc7) Typo. (cherry picked from commit 1546fb780bc11556a18d70c5fb29af4a9d5beaff) "DTLS trace support. Add DTLS record header parsing GCM and CCM test support Add code to support GCM an CCM modes in evp_test. On encrypt this will compare the expected ciphertext and tag. On decrypt it will compare the expected plaintext: tag comparison is done internally. Add a simple CCM test case and convert all tests from crypto/modes/gcm128.c Add CCM ciphers to tables. Use CFLAG for LFLAGS instead of the nonexistent CFLAGS. Actually comment out the cpuid asm! Merge branch 'master' of openssl.net:openssl Conflicts: util/mk1mf.pl "Fix WIN32 build. Make assembly language handling conditional on the ""copy"" platform as Windows does its own thing here." Only copy headers if they've changed. Don't make CPUID stuff twice. Override local vars for MINFO build. "Use ""copy"" instead of ""auto""." Remove pointless diagnostic. Remove empty command. Add dependency on destination directory. Ignore MINFO. Fix error codes. Demo code for SSL_CONF API Two example programs one for command line argument processing and one for configuration file processing. Fix ignored return value warnings. Not sure why I am getting these now and not before. "Fix POD errors to stop make install_docs dying with pod2man 2.5.0+ podlators 2.5.0 has switched to dying on POD syntax errors. This means that a bunch of long-standing erroneous POD in the openssl documentation now leads to fatal errors from pod2man "Check DTLS_BAD_VER for version number. The version check for DTLS1_VERSION was redundant as DTLS1_VERSION > TLS1_1_VERSION sparccpuid.S: work around emulator bug on T1. s3_cbc.c: fix warning [in Windows build]. Fix for EXP-RC2-CBC-MD5 MD5 should use little endian order. Fortunately the only ciphersuite affected is EXP-RC2-CBC-MD5 (TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5) which is a rarely used export grade ciphersuite. (cherry picked from commit f306b87d766e6ecf30824635c7c395b67cff9dbc) e_aes_cbc_hmac_sha1.c: cleanse temporary copy of HMAC secret. (cherry picked from commit 529d27ea472fc2c7ba9190a15a58cb84012d4ec6) "ssl/*: remove SSL3_RECORD->orig_len to restore binary compatibility. Kludge alert. This is arranged by passing padding length in unused bits of SSL3_RECORD->type Don't access EVP_MD_CTX internals directly. (cherry picked from commit 04e45b52ee3be81121359cc1198fd01e38096e9f) s3/s3_cbc.c: allow for compilations with NO_SHA256|512. (cherry picked from commit d5371324d978e4096bf99b9d0fe71b2cb65d9dc8) ssl/s3_cbc.c: md_state alignment portability fix. RISCs are picky and alignment granted by compiler for md_state can be insufficient for SHA512. (cherry picked from commit 36260233e7e3396feed884d3f501283e0453c04f) "ssl/s3_cbc.c: uint64_t portability fix. Break dependency on uint64_t. It's possible to declare bits as unsigned int typo. (cherry picked from commit 34ab3c8c711ff79c2b768f0b17e4b2a78fd1df5d) "Add ordinal for CRYPTO_memcmp: since this will affect multiple branches it needs to be in a ""gap"". (cherry picked from commit 81ce0e14e72e8e255ad1bd9c7cfaa47a6291919c)" Timing fix mitigation for FIPS mode. We have to use EVP in FIPS mode so we can only partially mitigate timing differences. Make an extra call to EVP_DigestSignUpdate to hash additonal blocks to cover any timing differences caused by removal of padding. (cherry picked from commit b908e88ec15aa0a74805e3f2236fc4f83f2789c2) Oops. Add missing file. (cherry picked from commit 014265eb02e26f35c8db58e2ccbf100b0b2f0072) Update DTLS code to match CBC decoding in TLS. This change updates the DTLS code to match the constant-time CBC behaviour in the TLS. (cherry picked from commit 9f27de170d1b7bef3d46d41382dc4dafde8b3900) "Don't crash when processing a zero-length "Make CBC decoding constant time. This patch makes the decoding of SSLv3 and TLS CBC records constant time. Without this "Add and use a constant-time memcmp. This change adds CRYPTO_memcmp Fix for trace code: SSL3 doesn't include a length value for encrypted premaster secret value. x86_64 assembly pack: keep making Windows build more robust. PR: 2963 and a number of others Don't use C++ style comments. Fix warning: lenmax isn't used any more. TABLE update. Configure: update linux-mips* lines. Improve WINCE support. Submitted by: Pierre Delaage Remove kludge to use RC4 asm. Build/test cleanly on MacOS. engines/ccgost: add test case. Submitted by: Serguei Leontiev PR: 2821 "sha512-ppc.pl: add PPC32 code Remove extraneous brackets (clang doesn't like them). Can't check a size_t for < 0. Typo (PR2959). Fix some clang warnings. Correct EVP_PKEY_verifyrecover to EVP_PKEY_verify_recover (RT 2955). "Add some missing files "Update test OCSP script ""tocsp"" to use shell functions and to use December 17th as check date to avoid certificate expiry errors." engines/cchost/gost_crypt.c: fix typo. engines/e_capi.c: fix typo. Submitted by: Pierre Delaage "engine/cchost: fix bugs. PR: 2821 Submitted by: Dmitry Belyavsky dso/dso_win32.c: fix compiler warning. Use client version when deciding which cipher suites to disable. "d1_lib.c Check chain is not NULL before assuming we have a validated chain. The modification to the OCSP helper purpose breaks normal OCSP verification. It is no longer needed now we can trust partial chains. apps/ocsp.c Documentation improvements by Chris Palmer (Google). Use new partial chain flag instead of modifying input parameters. Improve my 64-bit debug target. Make openssl verify return errors. add -badsig option to ocsp utility too. Fix OCSP checking. "Add code to download CRLs based on CRLDP extension. Just a sample Fix two bugs which affect delta CRL handling: Use -1 to check all extensions in CRLs. Always set flag for freshest CRL. "ghash-sparcv9.pl: shave off one more xmulx New option to add CRLs for s_client and s_server. return error if Suite B mode is selected and TLS 1.2 can't be used. Correct error coded cryptlib.c: fix logical error. Add new test option set the version in generated certificates: this is needed to test some profiles/protocols which reject certificates with unsupported versions. PR: 2803 Submitted by: jean-etienne.schwartz@bull.net In OCSP_basic_varify return an error if X509_STORE_CTX_init fails. Generalise OCSP I/O functions to support dowloading of other ASN1 structures using HTTP. Add wrapper function to handle CRL download. C64x+ assembly pack: improve EABI support. Update support for Intel compiler: add linux-x86_64-icc and fix problems. Print out point format list for clients too. "Use default point formats extension for server side as well as client side "AES for SPARC T4: add XTS Add support for printing out and retrieving EC point formats extension. PR: 2908 Submitted by: Dmitry Belyavsky <beldmit@gmail.com> Fix DH double free if parameter generation fails. x86_64-gcc.c: resore early clobber constraint. Submitted by: Florian Weimer "PR: 2880 Submitted by: ""Florian Rchel"" <florian.ruechel@ruhr-uni-bochum.de> Correctly handle local machine keys in the capi ENGINE." cryptlib.c: revert typo. Extend OPENSSL_ia32cap_P with extra word to accomodate AVX2 capability. perlasm/sparcv9_modes.pl: addendum to commit#22966. "Delegate command line handling for many common options in s_client/s_server to the SSL_CONF APIs. This is complicated a little because the SSL_CTX structure is not available when the command line is processed: so just check syntax of commands initially and store them "Support for SPARC T4 MONT[MUL|SQR] instructions. Submitted by: David Miller crypto/modes: even more strict aliasing fixes [and fix bug in cbc128.c from previous cbc128.c commit]. cbc128.c: fix strict aliasing warning. Fix gcc 4.8 warning (strict aliasing violation). perlasm/sparcv9_modes.pl: fix typo in IV save code and switch to less aggressive ASI. Add VIS3-capable sparcv9-gf2m module. Add VIS3 Montgomery multiplication. aix[64]-cc: get MT support right (gcc targets are not affected). "[md5|sha1|sha512]-sparcv9.pl: ""cooperative"" optimizations based on suggestions from David Miller." [aes|cmll]t4-sparcv9.pl: addendum to previous sparcv9_modes.pl commit. Add SPARC T4 Camellia support. Submitted by: David Miller "New functions to check a hostname email or IP address against a certificate. Add options to s_client Add SPARC T4 AES support. Submitted by: David Miller "If OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL is set allow the use of ""SCSV"" as a ciphersuite to position the SCSV value in different places for testing purposes." sha[1|512]-sparcv9.pl: add hardware SPARC T4 support. Submitted by: David Miller Fix Valgrind warning. Submitted by: Adam Langley "* Configure: make the debug-levitte-linux{elf config: detect linux-mips* targets. MIPS assembly pack: add support for SmartMIPS ASE. Configure: add MIPS targets. MIPS assembly pack: add MIPS[32|64]R2 code. Add -rev test option to s_server to just reverse order of characters received by client and send back to server. Also prints an abbreviated summary of the connection parameters. Add -brief option to s_client and s_server to summarise connection details. New option -verify_quiet to shut up the verify callback unless there is an error. Add ctrl and utility functions to retrieve raw cipher list sent by client in client hello message. Previously this could only be retrieved on an initial connection and it was impossible to determine the cipher IDs of any uknown ciphersuites. Minor enhancement to PR#2836 fix. Instead of modifying SSL_get_certificate change the current certificate (in s->cert->key) to the one used and then SSL_get_certificate and SSL_get_privatekey will automatically work. "Call OCSP Stapling callback after ciphersuite has been chosen Extend certificate creation examples to include CRL generation and sample scripts running the test OCSP responder. bsaes-armv7.pl: minor performance squeeze on Snapdragon S4. Don't load GOST ENGINE if it is already loaded. Multiple copies of the ENGINE will cause problems when it is cleaned up as the methods are stored in static structures which will be overwritten and freed up more than once. Set static methods to NULL when the ENGINE is freed so it can be reloaded. x86cpuid.pl: hide symbols [backport from x86_64]. TABLE update addendum to commit#22775. Harmonize CHANGES in HEAD. "Add compilation flag to disable certain protocol checks and allow use of some invalid operations for testing purposes. Currently this can be used to sign using digests the peer doesn't support "New compile time option OPENSSL_SSL_TRACE_CRYPTO PR: 2786 Reported by: Tomas Mraz <tmraz@redhat.com> Treat a NULL value passed to drbg_free_entropy callback as non-op. This can happen if the call to fips_get_entropy fails. MIPS assembly pack: assign default value to $flavour. "Add three Suite B modes to TLS code ./Configure: libcrypto.a can grow to many GB because of ar bug. PR: 2838 gcm128.c: fix AAD-only case with AAD length not divisible by 16. PR: 2859 Submitted by: John Foley sha512-x86_64.pl: revert previous change and solve the problem through perlasm/x86_64-xlate.pl instead. sha512-x86_64.pl: minimum gas requirement for AMD XOP. Make tls1_check_chain return a set of flags indicating checks passed by a certificate chain. Add additional tests to handle client certificates: checks for matching certificate type and issuer name comparison. Print out results of checks for each candidate chain tested in s_server/s_client. Abort handshake if signature algorithm used not supported by peer. Add support for certificate stores in CERT structure. This makes it possible to have different stores per SSL structure or one store in the parent SSL_CTX. Include distint stores for certificate chain verification and chain building. New ctrl SSL_CTRL_BUILD_CERT_CHAIN to build and store a certificate chain in CERT structure: returing an error if the chain cannot be built: this will allow applications to test if a chain is correctly configured. Note: if the CERT based stores are not set then the parent SSL_CTX store is used to retain compatibility with existing behaviour. Don't ignore (\!) reference count in X509_STORE_free New function ssl_set_client_disabled to set masks for any ciphersuites that are disabled for this session (as opposed to always disabled by configuration). "sha1-[586|x86_64].pl: shave off one instruction from body_40_59 mk1mf.pl: replace chop to make it work in mixture of perls for Windows. test_aesni: harmonize with AES-NI support at EVP layer. "Add new ctrl to retrieve client certificate types Add d1_srtp and t1_trce. "Add the missing modules for Camellia Harmonise symhacks.h in this branch with lower versions. Add aliases for SSL_CTX_set_not_resumable_session_callback and SSL_set_not_resumable_session_callback on top of that. PR: 2840 Reported by: David McCullough <david_mccullough@mcafee.com> Restore fips configuration module from 0.9.8. Separate client and server permitted signature algorithm support: by default the permitted signature algorithms for server and client authentication are the same but it is now possible to set different algorithms for client authentication only. Fix Win32 build. Function tls1_check_ec_server_key is now redundant as we make appropriate checks in tls1_check_chain. "Add new ""valid_flags"" field to CERT_PKEY structure which determines what the certificate can be used for (if anything). Set valid_flags field in new tls1_check_chain function. Simplify ssl_set_cert_masks which used to have similar checks in it. Add new ""cert_flags"" field to CERT structure and include a ""strict mode"". This enforces some TLS certificate requirements (such as only permitting certificate signature algorithms contained in the supported algorithms extension) which some implementations ignore: this option should be used with caution as it could cause interoperability issues." x86_64 assembly pack: make it possible to compile with Perl located on path with spaces. PR: 2835 Reorganise supported signature algorithm extension processing. Only store encoded versions of peer and configured signature algorithms. Determine shared signature algorithms and cache the result along with NID equivalents of each algorithm. "Add support for application defined signature algorithms for use with TLS v1.2. These are sent as an extension for clients and during a certificate request for servers. TODO: add support for shared signature algorithms Make it possible to delete all certificates from an SSL structure. New functions to retrieve certificate signatures and signature OID NID. sha256t.c: make sure unrolled loop is tested. "sha256-586.pl: squeeze some more x86[_64] assembly pack: update benchmark results. Rearrange and test authz extension. Revert random changes from commit#22606. Version skew reduction: trivia (I hope). RFC 5878 support. ppccap.c: assume no features under 32-bit AIX kernel. PR: 2810 PR: 2813 Reported by: Constantine Sapuntzakis <csapuntz@gmail.com> Fix possible deadlock when decoding public keys. "PR: 2811 Reported by: Phil Pennock <openssl-dev@spodhuis.org> Make renegotiation work for TLS 1.2 Padlock doesn't build. I don't even know what it is. PR: 2806 Submitted by: PK <runningdoglackey@yahoo.com> Correct ciphersuite signature algorithm definitions. Reported by: Solar Designer of Openwall Make sure tkeylen is initialised properly when encrypting CMS messages. Correct environment variable is OPENSSL_ALLOW_PROXY_CERTS. "perlasm: fix symptom-less bugs "ppccpuid.pl: branch hints in OPENSSL_cleanse impact small block performance of digest algorithms CHANGES: clarify. CHANGES: fix typos and clarify. Change value of SSL_OP_NO_TLSv1_1 to avoid clash with SSL_OP_ALL and OpenSSL 1.0.0. Add CHANGES entry noting the consequences. Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Reviewed by: steve Improved localisation of TLS extension handling and code tidy. objxref.pl: improve portability. PR: 2239 Submitted by: Dominik Oepen <oepen@informatik.hu-berlin.de> Add Brainpool curves from RFC5639. Original patch by Annie Yousar <a.yousar@informatik.hu-berlin.de> e_rc4_hmac_md5.c: last commit was inappropriate for non-x86[_64] platforms. PR: 2792 "Check for potentially exploitable overflows in asn1_d2i_read_bio BUF_mem_grow and BUF_mem_grow_clean. Refuse attempts to shrink buffer in CRYPTO_realloc_clean. Thanks to Tavis Ormandy Makefile.org: clear yet another environment variable. PR: 2793 e_rc4_hmac_md5.c: harmonize zero-length fragment handling with e_aes_cbc_hmac_sha1.c (mostly for aesthetic reasons). "e_rc4_hmac_md5.c: oops "C64x+ assembler pack. linux-c64xplus build is *not* tested nor can it be tested "Disable SHA-2 ciphersuites in < TLS 1.2 connections. (TLS 1.2 clients could end up negotiating these with an OpenSSL server with TLS 1.2 disabled Additional workaround for PR#2771 If OPENSSL_MAX_TLS1_2_CIPHER_LENGTH is set then limit the size of client ciphersuites to this value. A value of 50 should be sufficient. Document workarounds in CHANGES. Partial workaround for PR#2771. Some servers hang when presented with a client hello record length exceeding 255 bytes but will work with longer client hellos if the TLS record version in client hello does not exceed TLS v1.0. Unfortunately this doesn't fix all cases... OPENSSL_NO_SOCK fixes. PR: 2791 Submitted by: Ben Noordhuis Minor compatibility fixes. PR: 2790 Submitted by: Alexei Khlebnikov s3_srvr.c: fix typo. PR: 2538 e_aes_cbc_hmac_sha1.c: handle zero-length payload and engage empty frag countermeasure. PR: 2778 ghash-s390x.pl: fix typo [that can induce SEGV in 31-bit build]. aes-s390x.pl: fix crash in AES_set_decrypt_key in linux32-s390x build. Add support for automatic ECDH temporary key parameter selection. When enabled instead of requiring an application to hard code a (possibly inappropriate) parameter set and delve into EC internals we just automatically use the preferred curve. aes-s390x.pl: make it more foolproof [inspired by 1.0.1]. ssl/ssl_ciph.c: interim solution for assertion in d1_pkt.c(444). PR: 2778 Tidy up EC parameter check code: instead of accessing internal structures add utility functions to t1_lib.c to check if EC certificates and parameters are consistent with peer. "PR: 2778(part) Submitted by: John Fitzgibbon <john_fitzgibbon@yahoo.com> Time is always encoded as 4 bytes vpaes-x86[_64].pl: handle zero length in vpaes_cbc_encrypt. PR: 2775 bn/bn_gf2m.c: make new BN_GF2m_mod_inv work with BN_DEBUG_RAND. ans1/tasn_prn.c: avoid bool in variable names. PR: 2776 Submitted by: Markus Friedl <mfriedl@gmail.com> Fix memory leaks in 'goto err' cases. e_padlock-x86[_64].pl: better understanding of prefetch errata and proper workaround. "Always use SSLv23_{client ghash-x86.pl: omit unreferenced rem_8bit from no-sse2 build. ssl/t1_enc.c: pay attention to EVP_CIPH_FLAG_CUSTOM_CIPHER. Fix for CMS/PKCS7 MMA. If RSA decryption fails use a random key and continue with symmetric decryption process to avoid leaking timing information to an attacker. Thanks to Ivan Nestlerode <inestlerode@us.ibm.com> for discovering this issue. (CVE-2012-0884) Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Add more extension names in s_cb.c extension printing code. PR: 2756 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Fix DTLS timeout handling. New ctrls to retrieve supported signature algorithms and curves and extensions to s_client and s_server to print out retrieved valued. Extend CERT structure to cache supported signature algorithm data. PR: 2755 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reduce MTU after failed transmissions. PR: 2748 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Fix possible DTLS timer deadlock. Configure: make no-whirlpool work. "Add bit-sliced AES for ARM NEON. This initial version is effectively reference implementation PR: 2743 Reported by: Dmitry Belyavsky <beldmit@gmail.com> Fix memory leak if invalid GOST MAC key given. PR: 2742 Reported by: Dmitry Belyavsky <beldmit@gmail.com> If resigning with detached content in CMS just copy data across. x86cpuid.pl: fix processor capability detection on pre-586. PR: 2736 Reported by: Remi Gacogne <rgacogne-bugs@coredump.fr> Preserve unused bits value in non-canonicalised ASN1_STRING structures by using ASN1_STRING_copy which preseves flags. PR: 2737 Submitted by: Remi Gacogne <rgacogne-bugs@coredump.fr> Fix double free in PKCS12_parse if we run out of memory. PR: 2739 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Fix padding bugs in Heartbeat support. PR: 2735 Make cryptodev digests work. Thanks to Nikos Mavrogiannopoulos for this fix. Detect symmetric crypto errors in PKCS7_decrypt. Thanks to Ivan Nestlerode <inestlerode@us.ibm.com> for reporting this bug. "seed.c: incredibly enough seed.c can fail to compile on Solaris with certain flags PR: 2730 Submitted by: Arpadffy Zoltan <Zoltan.Arpadffy@scientificgames.se> VMS fixes: disable SCTP by default. PR: 2711 Submitted by: Tomas Mraz <tmraz@redhat.com> Tolerate bad MIME headers in parser. PR: 2696 Submitted by: Rob Austein <sra@hactrn.net> Fix inverted range problem in RFC3779 code. Thanks to Andrew Chi for generating test cases for this bug. PR: 2727 Submitted by: Bruce Stephens <bruce.stephens@isode.com> Use same construct for EXHEADER in srp/Makefile as other makefiles to cope with possibly empty EXHEADER. "Add new APIs EC_curve_nist2nid and EC_curve_nid2nist which convert between NIDs and the more common NIST names such as ""P-256"". Enhance ecparam utility and ECC method to recognise the NIST names for curves." Fix bug in CVE-2011-4619: check we have really received a client hello before rejecting multiple SGC restarts. Additional compatibility fix for MDC2 signature format. Update RSA EVP_PKEY_METHOD to use the OCTET STRING form of MDC2 signature: this will make all versions of MDC2 signature equivalent. An incompatibility has always existed between the format used for RSA signatures and MDC2 using EVP or RSA_sign. This has become more apparent when the dgst utility in OpenSSL 1.0.0 and later switched to using the EVP_DigestSign functions which call RSA_sign. This means that the signature format OpenSSL 1.0.0 and later used with dgst -sign and MDC2 is incompatible with previous versions. Add detection in RSA_verify so either format works. Note: MDC2 is disabled by default in OpenSSL and very rarely used in practice. PR: 2713 Submitted by: Tomas Mraz <tmraz@redhat.com> Move libraries that are not needed for dynamic linking to Libs.private in the .pc files "PR: 2716 Submitted by: Adam Langley <agl@google.com> Fix handling of exporter return value and use OpenSSL indentation in s_client PR: 2703 Submitted by: Alexey Melnikov <alexey.melnikov@isode.com> Fix some memory and resource leaks in CAPI ENGINE. PR: 2705 Submitted by: Alexey Melnikov <alexey.melnikov@isode.com> Only create ex_data indices once for CAPI engine. Submitted by: Eric Rescorla <ekr@rtfm.com> Further fixes for use_srtp extension. apps/s_cb.c: recognized latest TLS version. PR: 2704 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Fix srp extension. PR: 2710 Submitted by: Tomas Mraz <tmraz@redhat.com> Check return codes for load_certs_crls. PR: 2714 Submitted by: Tomas Mraz <tmraz@redhat.com> Make no-srp work. Modify client hello version when renegotiating to enhance interop with some servers. hpux-parisc2-*: engage assembler. Add support for distinct certificate chains per key type and per SSL structure. Before this the only way to add a custom chain was in the parent SSL_CTX (which is shared by all key types and SSL structures) or rely on auto chain building (which is performed on each handshake) from the trust store. Revise ssl code to use a CERT_PKEY structure when outputting a certificate chain instead of an X509 structure. This makes it easier to enhance code in future and the chain output functions have access to the CERT_PKEY structure being used. Tidy/enhance certificate chain output code. New function ssl_add_cert_chain which adds a certificate chain to SSL internal BUF_MEM. Use this function in ssl3_output_cert_chain and dtls1_output_cert_chain instead of partly duplicating code. "Fix for DTLS DoS issue introduced by fix for CVE-2011-4109. Thanks to Antonio Martin Support for fixed DH ciphersuites. The cipher definitions of these ciphersuites have been around since SSLeay but were always disabled. Now OpenSSL supports DH certificates they can be finally enabled. Various additional changes were needed to make them work properly: many unused fixed DH sections of code were untested. cryptlib.c: sscanf warning. Fix OPNESSL vs. OPENSSL typos. PR: 2613 Submitted by: Leena Heino "cryptlib.c: make even non-Windows builds ""strtoull-agnostic""." ec_pmeth.c: fix typo in commentary. PR: 2677 Submitted by: Annue Yousar doc/apps: formatting fixes. PR: 2683 Submitted by: Annie Yousar speed.c: typo in pkey_print_message. PR: 2681 Submitted by: Annie Yousar ecdsa.pod: typo. PR: 2678 Submitted by: Annie Yousar "asn1/t_x509.c: fix serial number print aes-sparcv9.pl: clean up regexp PR: 2685 cmac.c: optimize make_kn and move zero_iv to const segment. "Update for 0.9.8s and 1.0.0f Fix for builds without DTLS support. Submitted by: Brian Carlstrom PR: 2671 Submitted by: steve Update maximum message size for certifiate verify messages to support 4096 bit RSA keys again as TLS v1.2 messages is two bytes longer. Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Send fatal alert if heartbeat extension has an illegal value. "Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Clear bytes used for block padding of SSL 3.0 records. (CVE-2011-4576) Submitted by: Adam Langley <agl@chromium.org> Reviewed by: steve Fix memory leaks. PR: 2658 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Support for TLS/DTLS heartbeats. PR: 1794 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Reviewed by: steve - remove some unncessary SSL_err and permit an srp user callback to allow a worker to obtain a user verifier. - cleanup and comments in s_server and demonstration for asynchronous srp user lookup PR: 2326 Submitted by: Tianjie Mao <tjmao@tjmao.net> Reviewed by: steve Fix incorrect comma expressions and goto f_err as alert has been set. PR: 2535 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Add SCTP support for DTLS (RFC 6083). PR: 2563 Submitted by: Paul Green <Paul.Green@stratus.com> Reviewed by: steve Improved PRNG seeding for VOS. apps/speed.c: Cygwin alarm() fails sometimes. PR: 2655 vpaes-x86.pl: revert previous commit and solve the problem through x86masm.pl. PR: 2657 PR: 1794 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Reviewed by: steve Remove unnecessary code for srp and to add some comments to s_client. - the callback to provide a user during client connect is no longer necessary since rfc 5054 a connection attempt with an srp cipher and no user is terminated when the cipher is acceptable - comments to indicate in s_client the (non-)usefulness of th primalaty tests for non known group parameters. Add private keys and generation scripts for test certificates in apps directory. Remove redundant TLS exporter. "Padlock engine doesn't build (the asm parts are not built for some reason) Back out redundant verification time change. "Updates from fips2 branch: close streams in test utilities perlasm/x86gas.pl: give a hand old assemblers assembling loop instruction. Replace expired test server and client certificates with new ones. "Document RFC5114 ""generation"" options." Initial experimental support for X9.42 DH parameter format to handle RFC5114 parameters and X9.42 DH public and private keys. The default CN prompt message can be confusing when often the CN needs to be the server FQDN: change it. [Reported by PSW Group] "Resolve a stack set-up race condition (if the list of compression methods isn't presorted Fix ecdsatest.c. Submitted by: Emilia Kasper Update HEAD CHANGES file. Fix BIO_f_buffer(). Submitted by: Adam Langley Reviewed by: Bodo Moeller Update DH_check() to peform sensible checks when q parameter is present. Correct some parameter values. PR: 1794 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Reviewed by: steve Make SRP conformant to rfc 5054. Changes are: - removal of the addition state after client hello - removal of all pre-rfc srp alert ids - sending a fatal alert when there is no srp extension but when the server wants SRP - removal of unnecessary code in the client. Fix NPN implementation for renegotiation. (Problem pointed out by Ben Murphy.) Submitted by: Adam Langley bsaes-x86_64.pl: fix buffer overrun in tail processing. Add TLS exporter. Fix some warnings caused by __owur. Temporarily (I hope) remove the more aspirational __owur annotations. Add RFC5114 DH parameters to OpenSSL. Add test data to dhtest. rc4test.c: commit#21684 broke x86_64 shared Linux build. This is temporary solution so that one can build rc4test... "cryptlib.c "Configure "engines/: get rid of cvs warnings on MacOS X bsaes-x86_64.pl: add bsaes_xts_[en|de]crypt. config: KERNEL_BITS envrionment variable to control choice between 32- and 64-bit Solaris builds. config: KERNEL_BITS envrionment variable to control choice between 32- and 64-bit darwin builds. "fipsld Update fips_test_suite to take multiple command line options and an induced error checking function. "x86cpuid.pl: don't punish ""last-year"" OSes on ""this-year"" CPUs. PR: 2633" ppc.pl: fix bug in bn_mul_comba4. PR: 2636 Submitted by: Charles Bryant Add single call public key sign and verify functions. Add support for memory leak checking in fips_algvs. Fix many memory leaks in algorithm test utilities. Remove duplicate test from health check. Fix memory leaks by uninstantiating DRBG before reinitialising it. "Print out an error for ""make test"" in FIPS builds. (from FIPS stable)" Add fips_algvs utility (from FIPS 2.0 stable branch). bn_exp.c: fix corner case in new constant-time code. Submitted by: Emilia Kasper bsaes-x86_64.pl: add decryption procedure (with unoptimized reference InvMixColumns). PR: 2628 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Send alert instead of assertion failure for incorrectly formatted DTLS fragments. PR: 2628 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Fix for ECC keys and DTLS. PR: 2632 Submitted by: emmanuel.azencot@bull.net Reviewed by: steve Return -1 immediately if not affine coordinates as BN_CTX has not been set up. Use correct tag for SRP username. cryptlib.c: remove stdio dependency in Windows fipscanister.lib. No need for custom flag in XTS mode: block length is 1. "config: in cross-compile case interrogate cross-compiler Check for selftest failure in various places. mk1mk.pl: cleanup engines' handling and make fips build work on WIN64I. Update error codes. Check for uninitialised DRBG_CTX and don't free up default DRBG_CTX. fips.c: x86[_64] capability masking. armcap.c: auto-setup processor capability vector. Fix error codes. Drain unused MacOS directory. "Add ""nopass"" for empty password too." vxworks-mips: unify and add assembler. Remove superseded MIPS assembler modules. BN_BLINDING multi-threading fix. Submitted by: Emilia Kasper (Google) Typo (?) "Fix warnings. Also "Improve optional 64-bit NIST-P224 implementation fipssyms.h: assign alias to newly introduced bn_gather5. fips/*: extend fipsro segmenting to all _MSC_VER builds (including WinCE). "evp/e_aes.c: fold AES-NI modes that heavily rely on indirect calls (trade 2% small-block performance) "Engage bsaes-x86_64.pl "L=3072 Don't use TPREFIX shell variable for minimal script. Remove eng_aesni.c as AES-NI support is integrated directly at EVP. "In ssl3_clear Fix OPENSSL_BN_ASM_MONT5 for corner cases; add a test. Submitted by: Emilia Kasper Print curve type for signature tests. Update README.FIPS for new FIPS 2.0 testvectors. Skip ECDH sanity check. Add --compare-all to run comparison tests on all files instead of sanity checks. Handle partial test where H is absent: needed to check g generation. Updates to handle some verification of v2 tests. Now enable v2 by default and require a --disable-v2 option to run the old v1 tests. Handle broken test on verify too. ECDH POST selftest failure inducing support. Only include one ECDH selftest. e_padlock-x86[_64].pl: protection against prefetch errata. def_rsa_finish not used any more. Don't disable TLS v1.2 by default now. e_padlock-x86_64.pl: brown-bag bug in stack pointer handling. "PR: 2482 Submitted by: Rob Austein <sra@hactrn.net> Reviewed by: steve Don't allow inverted ranges in RFC3779 code "e_padlock-x86[_64].pl: SHA fixes e_padlock: add CTR mode. Make fips algorithm test utilities use RESP_EOL for end of line character(s). This should be CRLF even under *nix. Never echo Num lines for PQGGen DSA2 test. Add FIPS selftests for ECDH algorithm. Check return codes properly. Fix output format for DSA2 parameter generation. Add a --disable-all option to disable all tests. Handle provable prime parameters for canonical g generation which are sometimes erroneously included. "Add bit-sliced AES x86_64 assembler PR: 2606 Submitted by: Christoph Viethen <cv@kawo2.rwth-aachen.de> Reviewed by: steve Handle timezones correctly in UTCTime. PR: 2347 Submitted by: Tomas Mraz <tmraz@redhat.com> Reviewed by: steve Fix usage message. Run PQGVer test before DSA2 tests. Don't print out errors in cases where errors are expected: testing DSA parameter validity and EC public key validity. Perform health check on all reseed operations not associated with prediction resistance requests. Although SP 800-90 is arguably unclear on whether this is necessary adding an additional check has minimal penalty (very few applications will make an explicit reseed request). Update error codes. Allow reseed interval to be set. Sync error codes with 1.0.1-stable. Don't use vpaes in fips builds and exclude from restricted tarball. Integrate Vector Permutation AES into build system. Update CMAC/HMAC sefltests to use NIDs instead of function pointers. Simplify HMAC selftest as each test currently uses the same key and hash data. Remove fipsdso target: it isn't supported in the 2.0 module. Check length of additional input in DRBG generate function. "Add so called Vector Permutation AES x86[_64] assembler Fix 3DES Monte Carlo test file output which previously outputted extra bogus lines. Update fipsalgtest.pl to tolerate the old format. Add support for Dual EC DRBG from SP800-90. Include updates to algorithm tests and POST code. Add /fixed option to linker with fips builds. Add error codes for DRBG KAT failures. Add abbreviated DRBG KAT for POST which only performs a single generate operations instead of four. Padlock engine: make it independent of inline assembler. Update FAQ. config: don't add -Wa options with no-asm. crypto/bn/bn_gf2m.c: make it work with BN_DEBUG. Check reseed interval before generating output. Place DRBG in error state if health check fails. Fix session handling. (EC)DH memory handling fixes. Submitted by: Adam Langley Fix memory leak on bad inputs. Fix error codes. Synchronize with 1.0.1 CHANGES file. "Don't perform full DRBG health check on all DRBG types on power up Add header to Makefile. Extension of DRBG selftests using new data. Test PR and no PR and test initial generate before the reseed too. Move selftest data to separate fips_drbg_selftest.h header file. Don't use *from++ in tolower as this is implemented as a macro on some platforms. Thanks to Shayne Murray <Shayne.Murray@Polycom.com> for reporting this issue. PR: 2576 Submitted by: Doug Goldstein <cardoe@gentoo.org> Reviewed by: steve Include header file stdlib.h which is needed on some platforms to get getenv() declaration. "PR: 2340 Submitted by: ""Mauro H. Leggieri"" <mxmauro@caiman.com.ar> Reviewed by: steve Stop warnings if OPENSSL_NO_DGRAM is defined." PR: 2573 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Fix DTLS buffering and decryption bug. PR: 2589 Submitted by: Thomas Jarosch <thomas.jarosch@intra2net.com> Reviewed by: steve Initialise p pointer. PR: 2588 Submitted by: Thomas Jarosch <thomas.jarosch@intra2net.com> Reviewed by: steve Close file pointer. PR: 2586 Submitted by: Thomas Jarosch <thomas.jarosch@intra2net.com> Reviewed by: steve Zero structure fields properly. PR: 2586 Submitted by: Thomas Jarosch <thomas.jarosch@intra2net.com> Reviewed by: steve Fix brace mismatch. Print private key component is -exout parameter is given. Fix ecdh primitives test command line. Add support for DSA2 PQG generation of g parameter. Add support for canonical generation of DSA parameter g. Modify fips_dssvs to support appropriate file format. "Add RC4-MD5 and AESNI-SHA1 ""stitched"" implementations." Fix fipsalgtest.pl to still work with old test vectors. Update instructions to recommend use of included incore script. Delete library install from Makefile.fips: it isn't used. Revert change to Makefile.org: it breaks install. Enable rsa-pss0 for non-v2 tests. Remove hard coded ecdsaWithSHA1 hack in ssl routines and check for RSA using OBJ xref utilities instead of string comparison with OID name. This removes the arbitrary restriction on using SHA1 only with some ECC ciphersuites. SPARC assembler pack: fix FIPS linking errors. "This commit completes recent modular exponentiation optimizations on x86_64 platform. It targets specifically RSA1024 sign (using ideas from http://eprint.iacr.org/2011/239) and adds more than 10% on most platforms. Overall performance improvement relative to 1.0.0 is ~40% in average Include armcap.c in fips tarball. Remove redundant assignment. Add provisory support for RDRAND instruction. Fix DSA to skip EOL test when parsing mod line. Expand range of ctrls for AES GCM to support retrieval and setting of invocation field. Add complete support for AES GCM ciphersuites including all those in RFC5288 and RFC5289. Add HMAC ECC ciphersuites from RFC5289. Include SHA384 PRF support and prohibit use of these ciphersuites for TLS < 1.2 cryptlib.c: OPENSSL_ia32cap environment variable to interpret ~ as cpuid mask. More symbol renaming. Make sure OPENSSL_FIPSCANISTER is visible to ARM assembly language files. Rename another symbol. sha512-sparcv9.pl: minor optimization of sha256. ARM assembler pack: add platform run-time detection. PR: 2556 (partial) Reported by: Daniel Marschall <daniel-marschall@viathinksoft.de> Reviewed by: steve Fix OID routines. Check on encoding leading zero rejection should start at beginning of encoding. Allow for initial digit when testing when to use BIGNUMs which can increase first value by 2 * 40. config: detect if assembler supports --noexecstack and pass it down. "ssl/ssl_ciph.c: allow to switch to predefined ""composite"" cipher/mac combos that can be implemented as AEAD ciphers." ssl/t1_enc.c: initial support for AEAD ciphers. Fix typo. Submitted by: Jim Morrison Add a tool that (semi)automatically created the API documentation required for FIPS. Add functions to return FIPS module version. If make clean fails it is not a fatal error. Additional error checking. Recognise fipscheck option and call fipsas for WIN64 builds. crypto/whrlpool/wp_block.c: harmonize OPENSSL_ia32cap_P. crypto/sha/asm/sha[1|512]-mips.pl: minor updates. Configure: clean up linux32-s390x line. s390x assembler pack: add s390x-gf2m.pl and harmonize AES_xts_[en|de]crypt. Minor x86_64 perlasm update. Fix CPRNG test for Hash DRBG. Add stub for HMAC DRBG. Add sparcv9cap.c to restricted tarball. Add a symbol for the first parameter to OPENSSL_showfatal(). PR: 2470 Submitted by: Corinna Vinschen <vinschen@redhat.com> Reviewed by: steve Don't call ERR_remove_state from DllMain. PR: 2540 Submitted by: emmanuel.azencot@bull.net Reviewed by: steve Prevent infinite loop in BN_GF2m_mod_inv(). Now the FIPS capable OpenSSL is available simplify the various FIPS test build options. All fispcanisterbuild builds only build fipscanister.o and include symbol renaming. Move all renamed symbols to fipssyms.h Update README.FIPS Don't set FIPS rand method at same time as RAND method as this can cause the FIPS library to fail. Applications that want to set the FIPS rand method can do so explicitly and presumably they know what they are doing... Add prototype for null cipher. Don't include des.h any more: it is not needed. Update to mk1mf.pl and ms\do_fips.bat to install relevant files for WIN32 FIPS builds. "Fix the version history: changes going into 1.1.0 that are also going into 1.0.1 should not be listed as ""changes between 1.0.1 and 1.0.0"". This makes the OpenSSL_1_0_1-stable and HEAD versions of this file consistent with each other (the HEAD version has the additional 1.1.0 section Don't export functions marked as FIPSCAPABLE. Use FIPSCAPABLE for FIPS module functions used in FIPS capable OpenSSL. CMAC FIPS prototypes. #undef bn_div_words as it is defined for FIPS builds. Update dependencies for m_dss.c too. "Remove x509.h from SHA1 clone digests Install FIPS module in FIPSDIR if set. Add more prototypes. Add flags for DH FIPS method. Update/fix prototypes in fips.h Set flags in ECDH and ECDSA methods for FIPS. Add prototypes for some FIPS EC functions. Set SSL_FIPS flag in ECC ciphersuites. e_aes.c: move AES-NI run-time switch and implement the switch for remaining modes. x86[_64]cpuid.pl: add function accessing rdrand instruction. "Add ""OPENSSL_FIPSCAPABLE"" define for a version of OpenSSL which is FIPS capable: i.e. FIPS module is supplied externally." Constify RSA signature buffer. Move FIPS RSA function definitions to fips.h New function to lookup digests by NID in module. Minor optimisation: if supplied hash is NULL to FIPS RSA functions and we are using PKCS padding get digest NID from otherwise unused saltlen parameter instead. Simple automated certificate creation demo. "Add DSA and ECDSA ""clone digests"" to module for compatibility with old applications." Fake CPU caps so fips_standalone_sha1 compiles. Initialise update function for bad digest inits. Don't round up partitioned premaster secret length if there is only one digest in use: this caused the PRF to fail for an odd premaster secret length. Output supported curves in preference order instead of numerically. e_aes.c: integrate AESNI directly into EVP. aesni-x86[_64].pl: relax alignment requirement. Prototypes for more FIPS functions for use in FIPS capable OpenSSL. Various mingw64 fixes. sha1-586|x86_64.pl: minor portability fix. x86cpuid.pl: last commit broke platforms with perl with 64-bit integer. Add FIPS_digestinit prototype for FIPS capable OpenSSL. Add prototypes for FIPS EVP implementations: for use in FIPS capable OpenSSL. Rename many internal only module functions from FIPS_* to fips_*. x86[_64]cpuid.pl: harmonize usage of reserved bits #20 and #30. "PPC assembler pack: adhere closer to ABI specs Use FIPSLD_LIBCRYPTO for consistency with other env variables in fipsld. Use current directory for fips_premain_dso "In fipsld use FIPSLIBCRYPTO environment variable to specify an alternative location for libcrypto.a Install fips_standalone_sha1 and make use of it in fipsld script. Only install FIPS related files for fipscanisteronly build. More symbol renaming. "PR: 2533 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Setting SSL_MODE_RELEASE_BUFFERS should be ignored for DTLS PR: 2529 Submitted by: Marcus Meissner <meissner@suse.de> Reviewed by: steve Call ssl_new() to reallocate SSL BIO internals if we want to replace the existing internal SSL structure. PR: 2527 Submitted by: Marcus Meissner <meissner@suse.de> Reviewed by: steve Set cnf to NULL to avoid possible double free. Fix the ECDSA timing attack mentioned in the paper at: http://eprint.iacr.org/2011/232.pdf Thanks to the original authors Billy Bob Brumley and Nicola Tuveri for bringing this to our attention. Fix the ECDSA timing attack mentioned in the paper at: http://eprint.iacr.org/2011/232.pdf Thanks to the original authors Billy Bob Brumley and Nicola Tuveri for bringing this to our attention. PR: 2512 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Fix BIO_accept so it can be bound to IPv4 or IPv6 sockets consistently. PR: 2506 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Fully implement SSL_clear for DTLS. PR: 2505 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Fix DTLS session resumption timer bug. e_padlock.c: fix typo. PR: 2522 Submitted by: Henrik Grindal Bakken <henribak@cisco.com> Don't compare past end of buffer. aesni-x86[_64].pl: optimize for Sandy Bridge and add XTS mode. ec_cvt.c: avoid EC_GFp_nist_method on platforms with bn_mul_mont [see commentary for details]. aesni-x86_64.pl: make it compile on MacOS X. x86gas.pl: don't omit .comm OPENSSL_ia32cap_P on MacOS X. "x86_64-xlate.pl: add inter-register movq and make x86_64-gfm.s compile on Solaris e_padlock.c: make it compile on MacOS X. x86[_64]cpuid.pl: handle new extensions. x86_64 assembler pack: add x86_64-gf2m module. Typo. Enter FIPS mode by calling FIPS_module_mode_set in openssl.c until FIPS_mode_set is implemented. Provisional support for TLS v1.2 client authentication: client side only. Parse certificate request message and set digests appropriately. Generate new TLS v1.2 format certificate verify message. Keep handshake caches around for longer as they are needed for client auth. Process signature algorithms during TLS v1.2 client authentication. Make sure message is long enough for signature algorithms. Fix error discrepancy. Set FIPS mode for values other than 1. The only current effect is to return a consistent value. So calling FIPS_module_mode_set(n) for n != 0 will result in FIPS_module_mode() returning n. This will support future expansion of more FIPS modes e.g. a Suite B mode. Inlcude README.ECC in FIPS restricted tarball. Initial TLS v1.2 client support. Include a default supported signature algorithms extension (including everything we support). Swicth to new signature format where needed and relax ECC restrictions. Not TLS v1.2 client certifcate support yet but client will handle case where a certificate is requested and we don't have one. Call fipsas.pl directly for pa-risc targets. "Optimized bn_nist.c. Performance improvement varies from one benchmark and platform to another. It was measured to deliver 20-30% better performance on x86 platforms and 30-40% on x86_64 Don't include GF2m source files is NOEC2M set. IA-64 assembler pack: fix typos and make it work on HP-UX. x86 assembler pack: add bn_GF2m_mul_2x2 implementations (see x86-gf2m.pl for details and performance data). Don't fail WIN32 builds on warnings. Return error codes for selftest failure instead of hard assertion errors. Continuing TLS v1.2 support: add support for server parsing of signature algorithms extension and correct signature format for server key exchange. All ciphersuites should now work on the server but no client support and no client certificate support yet. ARM assembler pack: engage newly introduced armv4-gf2m module. Fix warning of signed/unsigned comparison. xts128.c: minor optimizaton. "bn_gf2m.c: optimized BN_GF2m_mod_inv delivers sometimes 2x of ECDSA sign. Exact improvement coefficients vary from one benchmark and platform to another Remove useless setting. "PR: 2499 Submitted by: ""James 'J.C.' Jones"" <james.jc.jones@gmail.com> Typos." Fix do_fips script. Stop warning in VxWorks. Quick hack to time POST. Add ppc_cap.c to restricted tarball. For FIPS algorithm test utilities use our own version of strcasecmp and strncasecmp to cover cases where platforms don't support them. Disable SHA256 if not supported. "Initial incomplete TLS v1.2 support. New ciphersuites added "Initial ""opaque SSL"" framework. If an application defines OPENSSL_NO_SSL_INTERN all ssl related structures are opaque and internals cannot be directly accessed. Many applications will need some modification to support this and most likely some additional functions added to OpenSSL. The advantage of this option is that any application supporting it will still be binary compatible if SSL structures change." Don't assume version of rm supports -rf: use RM instead. Stop warnings about undefined _exit on Android. Additional script output options to fipsalgtest.pl Fix warning. gcm128.c: minor optimization. ccm128.c: add CRYPTO_ccm128_[en|de]crypt_ccm64 and minor optimization. fips_check_dsa_prng() should only be built when OPENSSL_FIPS is defined. Error discrepancy corrected. More fixes for DSA FIPS overrides. "Always return multiple of block length bytes from default DRBG seed callback. Handle case where no multiple of the block size is in the interval [min_len xts128.c: fix bug introduced in commit#20704. Bug affected encryption of vectors whose lenght was not multiples of 16 bytes. Return errors instead of aborting when selftest fails. Initial do_fips.bat build script for WIN32 fipscanister. Fix WIN32 warning. Update DRBG to use new POST scheme. Add periodic DRBG health checks as required by SP800-90. Warn if lines are truncated in algorithm test utilities. Support for new test files: DRBG and CCM. xts128.c: minor optimization and clarified prototype. Add AES CCM selftest. Use 0 for tbslen to perform strlen. Add fips/cmac directory to WIN32 build. Fix EVP CCM decrypt. Add decrypt support to algorithm test program. ccm128.c: fix Win32 compiler warning. perlasm/x86[nm]asm.pl: make OPENSSL_instrument_bus[2] compile. ccm128.c: fix STRICT_ALIGNMENT another bug in CRYPTO_ccm128_decrypt. Override flag for XTS length limit. CCM encrypt algorithm test support. Initial untested CCM support via EVP. "Compile ccm128.c Don't need separate tag buffer for GCM mode: use EVP_CIPHER_CTX buf field which is not unused for custom ciphers. Remove shlib_wrap.sh as it is not needed (all algorithm tests are staticly linked to fipscanister.o). Add option to generate a shell script to run all tests: this is useful for platforms that don't have perl. Multiple assembler packs: add experimental memory bus instrumentation. Remove PSS salt length detection hack from fipslagtest.pl by allowing a regexp search of the file to determine its type. This will be needed for other tests later... ccm128.c: minor optimization and bugfix in CRYPTO_ccm128_[en|de]crypt. Add length limitation from SP800-38E. "Add XTS selftest Add algorithm driver for XTS mode. Fix several bugs in EVP XTS implementation. Add new POST support to X9.31 PRNG. Revise fips_test_suite to use table of IDs for human readable strings. Modify HMAC selftest callbacks to notify each digest type used. "Update CMAC Initial incomplete POST overhaul: add support for POST callback to allow status of POST to be monitored and/or failures induced. Use consistent FIPS tarball name. Add XTS to FIPS build. Hide XTS symbol names. Provisional AES XTS support. Update fips_pkey_signature_test: use fixed string if supplies tbs is NULL. Always allocate signature buffer. Update ECDSA selftest to use fips_pkey_signature_test. Add copyright notice to file. Complete rewrite of FIPS_selftest_dsa(). Use hardcoded 2048 bit DSA key and SHA384. Use fips_pkey_signature_test(). Fix memory leaks: uninstantiate DRBG during health checks. Cleanup md_ctx when performing ECDSA selftest. Stop warning and fix memory leaks. Add mem_clr.c explicity for no-asm builds. Set length to 41 (40 hex characters + null). Reorder headers to get definitions before they are used. Typo: fix duplicate call. Auto detect no-ec2m add option to make no-ec2m tarball. Clarify README.FIPS. Auto configure for fips is from restricted tarball. Remove more unnecessary files form fips tarball. "Remove unused build targets from Makefile.fips Add error for health check failure. Rebuild all FIPS error codes to clean out old obsolete codes. Before initalising a live DRBG (i.e. not in test mode) run a complete health check on a DRBG of the same type. DH keys have an (until now) unused 'q' parameter. When creating from DSA copy q across and if q present generate DH key in the correct range. Add fips hmac key to dgst utility. Update OpenSSL DRBG support code. Use date time vector as additional data. Set FIPS RAND_METHOD at same time as OpenSSL RAND_METHOD. Add missing error code strings. "Update fipssyms.h to keep all symbols in FIPS "Extensive reorganisation of PRNG handling in FIPS module: all calls now use an internal RAND_METHOD. All dependencies to OpenSSL standard PRNG are now removed: it is the applications resposibility to setup the FIPS PRNG and initalise it. Initial OpenSSL RAND_init_fips() function that will setup the DRBG for the ""FIPS capable OpenSSL""." Rename deprecated FIPS_rand functions to FIPS_x931. These shouldn't be used by applications directly and the X9.31 PRNG is deprecated by new FIPS140-2 rules anyway. FIPS mode support for openssl utility: doesn't work properly yet due to missing DRBG support in libcrypto. Updated error codes for FIPS library. Set error code is additional data callback fails. Use environment when builds libcrypto shared library so CC value is picked up in FIPS builds. Change FIPS locking functions to macros so we get useful line information. Set fips_thread_set properly. gcm128.c: fix shadow warnings. "Change RNG test to block oriented instead of request oriented PR: 2458 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Don't change state when answering DTLS ClientHello. PR: 2457 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve Fix DTLS fragment reassembly bug. ARM assembler pack: add missing arm_arch.h. ARM assembler pack: profiler-assisted optimizations and NEON support. "gcm128.c: tidy up temporarily update .cvsignore Allow FIPS malloc callback setting. Automatically set some callbacks in OPENSSL_init(). Add additional OPENSSL_init() handling add dummy call to (hopefully) ensure OPENSSL_init() is always linked into an application. Provisional support for auto called OPENSSL_init() function. This can be used to set up any appropriate functions such as FIPS callbacks without requiring an explicit application call. Initial switch to DRBG base PRNG in FIPS mode. Include bogus seeding for test applications. "Unused Remove redundant definitions. Give error code if DRBG sefltest fails. Reorganise DRBG API so the entropy and nonce callbacks can return a pointer to a buffer instead of copying to a fixed length buffer. This removes the entropy and nonce length restrictions. Update .cvsignore "Have all algorithm test programs call fips_algtest_init() at startup: this will perform all standalone operations such as setting error callbacks Disable cmac tests by default so the old algorithm test vectors work. Allow setting of get_entropy and get_nonce callbacks outside test mode. Test mode is now set when a DRBG context is initialised. Fix compiler warnings. "For VMS "* Configure "* fips/cmac/fips_cmac_selftest.c: Because the examples in SP_800-38B aren't trustworthy (see examples 13 and 14 * Makefile.fips: Update and add details about cmac. "Implement FIPS CMAC. * fips/cmac/*: Implement the basis for FIPS CMAC Free DRBG context in self tests. "* apps/openssl.c: For VMS A few more long symbols need shortening. "Add missing source.  Also Typo. Implement continuous RNG test for SP800-90 DRBGs. Fix warnings about ignored return values. Fix broken SRP error/function code assignment. Add extensive DRBG selftest data and option to corrupt it in fips_test_suite. Missing SRP files. PR: 2469 Submitted by: Jim Studt <jim@studt.net> Reviewed by: steve Check mac is present before trying to retrieve mac iteration count. "Fix warnings: signed/unisgned comparison Remove redundant check to stop compiler warning. Note SRP support. Add SRP support. Add ECDH to validated module. Enter FIPS mode in fips_dhvs. Support file I/O in fips_ecdsavs. Update fips_dhvs to handle functional test by generating keys. New initial DH algorithm test driver. Add meaningful error codes to DRBG. Add file I/O to fips_drbgvs program. Support I/O with files in new fips_gcmtest program. Remove redirection from fipsalgtest.pl script. Remove need for redirection on RNG and DSS algorithm test programs: some platforms don't support it. Updates to DRBG: fix bugs in infrastructure. Add initial experimental algorithm test generator. xts128.c: minor optimization. s390x assembler pack: tune-up and support for new z196 hardware. Add DllMain to fips symbols: will need to call this in FIPS capable OpenSSL. "Make -DOPENSSL_FIPSSYMS work under WIN32: run perl script when WIN32 assembly language files are created Include ms directory for fips distribution. Remove duplicate test rule. Add modes_lcl.h to header list. Don't try and update c_rehash for fipscanisteronly builds. Initial perl script to filter out unneeded files for a fips tarball. Remove unnecessary link directories. Create fips links even if not compiling in fips mode. Remove unnecessary dependencies. x509v3.h header file not needed in fips algorithm test utilities. Make fipscanisteronly build only required files. Move gcm128_context definition to modes_lcl.h (along with some related definitions) so we can use it in EVP GCM code avoiding need to allocate it. "Experimental perl script to edit assembly language source files Correct fipssyms.h for more assembly language symbols. Update auto generated comment. Experimental FIPS symbol renaming. Fixups under fips/ to make symbol renaming work. Add pairwise consistency test to EC. Use SHA-256 in fips_test_suite. Update pairwise consistency checks to use SHA-256. Add non-FIPS algorithm blocking and selftest checking. Add FIPS flags to AES ciphers and SHA* digests. Add support for SigGen and KeyPair tests. Update ECDSA test program to handle ECDSA2 format files. Correctly handle hex strings with an odd number of digits. Add ECDSA functionality to fips module. Initial very incomplete version of algorithm test program. Include support for an add_lock callback to tiny FIPS locking API. "Reorganise ECC code for inclusion in FIPS module. Move compression Use BN_nist_mod_func to avoid need to peek error queue. "Change FIPS source and utilities to use the ""FIPS_"" names directly instead of using regular OpenSSL API names." New option to disable characteristic two fields in EC code. Configure: engage assembler in Android target. "In FIPS mode only use ""Generation by Testing Candidates"" equivalent." Free keys if DSA pairwise error. Disable FIPS restrictions when doing GCM testing. Equally experimental encrypt side for fips_gcmtest. Currently this uses IVs in the request file need to update it to generate IVs once we have an IV generator in place. Set values to NULL after freeing them. Experimental incomplete AES GCM algorithm test program. Link GCM into FIPS module. Check return value in EVP gcm. gcm128.c: add boundary condition checks. Initial *very* experimental EVP support for AES-GCM. Note: probably very broken and subject to change. Add CRYPTO_gcm128_tag() function to retrieve the tag. Use 0 not -1 (since type is size_t) for finalisation argument to do_cipher: the NULL value for the input buffer is sufficient to notice this case. New flags EVP_CIPH_FLAG_CUSTOM_CIPHER in cipher structures if an underlying cipher handles all cipher symantics itself. gcm128.c: fix bug in OPENSSL_SMALL_FOOTPRINT decrypt. PR: 2432 Submitted by: Michael Heyman Fix duplicate code and typo. "Remove unneeded functions Add FIPS support to the WIN32 build system. "Transfer error redirection to fips.h Include fips header file in err_all.c if needed. Add FIPS error codes. Add Windows FIPS build utilities. For now disable EC_GFp_nistp224_method() for WIN32 so the WIN32 build completes without linker errors. "Add FIPS support to mkdef.pl script Use single X931 key generation source file for FIPS and non-FIPS builds. Fix error codes. Cope with new DSA2 file format where some p/q only tests are made. Add sign/verify digest API to handle an explicit digest instead of finalising a context. Remove DSA parameter generation from DSA selftest. It is unnecessary and can be very slow on embedded platforms. Hard code DSA parameters instead. Add DSA2 support to final algorithm tests: keypair and keyver. Since FIPS 186-3 specifies we use the leftmost bits of the digest we shouldn't reject digest lengths larger than SHA256: the FIPS algorithm tests include SHA384 and SHA512 tests. Add preliminary FIPS information. "Redirect FIPS memory allocation to FIPS_malloc() routine Change OPENSSL_FIPSEVP to OPENSSL_FIPSAPI as it doesn't just refer to EVP any more. Move locking #define into fips.h. Set FIPS locking callbacks at same time as OpenSSL locking callbacks. Include thread ID code in fips module. New FIPS_lock() function for minimal FIPS locking API: to avoid dependencies on OpenSSL locking code. Use API in some internal FIPS files. Remove redundant ENGINE defines from fips.h "Move locking and thread ID functions into new files lock.c and thr_id.c update .cvsignore Internal version of BN_mod_inverse allowing checking of no-inverse without need to inspect error queue. FIPS HMAC changes: Use EVP macros. Use tiny EVP in FIPS mode. FIPS mode ERR changes. Redirect errors to tiny FIPS callbacks to avoid ERR library dependencies. FIPS DH changes: selftest checks and key range checks. FIPS mode DSA changes: Check for selftest failures. Pairwise consistency test for RSA key generation. Use some EVP macros instead of EVP functions. Use minimal FIPS EVP where needed. Key size restrictions. FIPS mode RSA changes: Check for selftest failures. Pairwise consistency test for RSA key generation. Use some EVP macros instead of EVP functions. Use minimal FIPS EVP where needed. "FIPS mode EVP changes: Set EVP_CIPH_FLAG_FIPS on approved ciphers. Support ""default ASN1"" flag which avoids need for ASN1 dependencies in FIPS code. Include some defines to redirect operations to a ""tiny EVP"" implementation in some FIPS source files. Change m_sha1.c to use EVP_PKEY_NULL_method: the EVP_MD sign/verify functions are not used in OpenSSL 1.0 and later for SHA1 and SHA2 ciphers: the EVP_PKEY API is used instead." add fips_premain.c.sha1 "And so it begins... again. Initial FIPS 140-2 code ported to HEAD. Doesn't even compile yet Move RSA encryption functions to new file crypto/rsa/rsa_crpt.c to separate crypto and ENGINE dependencies in RSA library. "Move DSA_sign PR: 2433 Submitted by: Chris Wilson <chris@qwirx.com> Reviewed by: steve Constify ASN1_STRING_set_default_mask_asc(). PR: 1612 Submitted by: Robert Jackson <robert@rjsweb.net> Reviewed by: steve Fix EC_POINT_cmp function for case where b but not a is the point at infinity. Add additional parameter to dsa_builtin_paramgen to output the generated seed to: this doesn't introduce any binary compatibility issues as the function is only used internally. The seed output is needed for FIPS 140-2 algorithm testing: the functionality used to be in DSA_generate_parameters_ex() but was removed in OpenSSL 1.0.0 PR: 2425 Synchronise VMS build with Unixly build. move some string utilities to buf_str.c to reduce some dependencies (from 0.9.8 branch). PR: 2407 Fix fault include. Submitted by Arpadffy Zoltan <Zoltan.Arpadffy@scientificgames.se> Don't use decryption_failed alert for TLS v1.1 or later. Since DTLS 1.0 is based on TLS 1.1 we should never return a decryption_failed alert. PR: 2411 Submitted by: Rob Austein <sra@hactrn.net> Reviewed by: steve Fix corner cases in RFC3779 code. PR: 2410 Submitted by: Rob Austein <sra@hactrn.net> Reviewed by: steve Use OPENSSL_assert() instead of assert(). e_capi.c: rearrange #include-s to improve portability. PR: 2394 First attempt at adding the possibility to set the pointer size for the builds on VMS. PR: 2393 "Support routines for ASN1 scanning function "e_capi.c: change from ANSI to TCHAR domain. This makes it compilable on Windows CE/Mobile apps/x590.c: harmonize usage of STDout and out_err. PR: 2323 bss_file.c: refine UTF8 logic. PR: 2382 PR: 2386 Submitted by: Stefan Birrer <stefan.birrer@adnovum.ch> Reviewed by: steve Correct SKM_ASN1_SET_OF_d2i macro. Configure: make -mno-cygwin optional on mingw platforms. PR: 2381 PR: 2385 Submitted by: Stefan Birrer <stefan.birrer@adnovum.ch> Reviewed by: steve Zero key->pkey.ptr after it is freed so the structure can be reused. "s390x assembler pack: adapt for -m31 build Some of the MS_STATIC use in crypto/evp is a legacy from the days when EVP_MD_CTX was much larger: it isn't needed anymore. "PR: 2240 Submitted by: Jack Lloyd <lloyd@randombit.net> INSTALL.W32: document trouble with symlinks under MSYS. PR: 2377 Use the same directory for architecture dependent header files as in the branches OpenSSL-1_0_0-stable and OpenSSL-1_0_1-stable. Implement bc test strategy as submitted by Steven M. Schweda <sms@antinode.info>. Make sure we move to '__here' before trying to use it to build local sslroot: "* tests.com: Add the symbol openssl_conf Synchronise with Unix and do all other needed modifications to have it build on VMS again. s390x.S: fix typo in bn_mul_words. PR: 2380 Taken from OpenSSL_1_0_0-stable: Include proper header files for time functions. Submitted by Arpadffy Zoltan <Zoltan.Arpadffy@scientificgames.se> "PR: 2376 Submitted by: Guenter <lists@gknw.net> Reviewed by: steve Cleanup alloca use Tell the user what test is being performed. "We expect these scripts not to bail on error "We redid the structure on architecture dependent source files "PR: 2372 Submitted by: ""W.C.A. Wijngaards"" <wouter@nlnetlabs.nl> Reviewed by: steve Fix OpenBSD compilation failure." Don't assume a decode error if session tlsext_ecpointformatlist is not NULL: it can be legitimately set elsewhere. If EVP_PKEY structure contains an ENGINE the key is ENGINE specific and we should use its method instead of any generic one. Only use explicit IV if cipher is in CBC mode. Get correct GOST private key instead of just assuming the last one is correct: this isn't always true if we have more than one certificate. Submitted By: Bogdan Harjoc <harjoc@gmail.com> Add missing debug WIN64 targets. PR: 2366 Submitted by: Damien Miller <djm@mindrot.org> Reviewed by: steve Stop pkeyutl crashing if some arguments are missing. Also make str2fmt tolerate NULL parameter. Submitted by: Jonathan Dixon <joth@chromium.org> Reviewed by: steve If store is NULL set flags correctly. Configure: update mips[32|64]_asm lines. We can't always read 6 bytes in an OCSP response: fix so error statuses are read correctly for non-blocking I/O. "Add call to ENGINE_register_all_complete() to ENGINE_load_builtin_engines() "Add unified mips.pl s390x assembler pack: extend OPENSSL_s390xcap_P to 128 bits. Alpha assembler pack: adapt for Linux. PR: 2335 sha1-armv4-large.pl: more readable input pickup. Configure: remove redundant -DMD32_REG_T=int. crypto/ppc[cpuid|cap]: call CPU detection once and detect AltiVec. crypto/bn/asm/s390x.S: drop redundant instructions. sparcv9cap.c: disengange Solaris-specific CPU detection routine in favour of unified procedure relying on SIGILL. PR: 2321 Fixes to NPN from Adam Langley. More C language police work. C conformity fixes: Move declarations before statements in all blocks. "C conformity fixes: - Move declarations before statements in all blocks. - Where 64-bit type is required PR: 1833 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> Fix other cases not covered by original patch. "For better forward-security support Patch from PR #1833 was broken: there's no s->s3->new_session (only s->new_session). New 64-bit optimized implementation EC_GFp_nistp224_method(). This will only be compiled in if explicitly requested (#ifdef EC_NISTP224_64_GCC_128). Submitted by: Emilia Kasper (Google) PR: 1833 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> Support for abbreviated handshakes when renegotiating. ECC library bugfixes. Submitted by: Emilia Kasper (Google) Harmonize with OpenSSL_1_0_1-stable version of CHANGES. engine/Makefile: harmonize engine install rule for .dylib extension on MacOS X. PR: 2319 gcm128.c: fix typo in CRYPTO_gcm128_encrypt_ctr32 name. PR: 2315 Use consistent calculation for PSS salt length. gcm128.c: add CRYPTO_gcm128_[en|de]crypt_ctr32. Fix ctr mode properly this time.... Replace alphacpuid.s with alphacpuid.pl to ensure it makes to release tar-balls. PR: 2309 ms/: update do_win64*.bat and remove redundant mingw32.bat. "Add new type ossl_ssize_t instead of ssize_t and move definitions to e_os2.h Add modes.h and cmac to WIN32 build system. "aesni-x86[_64].pl: fine-tune Fix WIN32 build system to correctly link ENGINE DLLs contained in a directory: currently the GOST ENGINE is the only case. "Add call to ENGINE_register_all_complete() to ENGINE_load_builtin_engines() "PR: 1830 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> "Fix warnings (From HEAD Configure: suppress $multilib with non-system $prefix. PR: 2307 Makefile.shared: debugging line slipped through in previous commit. aes-s390x.pl: revisit buffer allocation and add performance data. ARM assembler pack: reschedule instructions for dual-issue pipeline. Modest improvement coefficients mean that code already had some parallelism and there was not very much room for improvement. Special thanks to Ted Krovetz for benchmarking the code with such patience. "PR: 2297 Submitted by: Antony INSTALL.W32: mention _OPENSSL_isservice(). PR: 2194 "gcm128.c: API modification and readability improvements Rework framework for assembler support for AES counter mode and add AES_ctr32_encrypt to aes-s390x.pl. "Harmonize s390x assembler modules with ""catch-all"" rules from commit#19749." "crypto/*/Makefile: unify ""catch-all"" assembler make rules and harmonize ARM assembler modules." PROBLEMS: MacOS X is not necessarily a problem anymore. sparcv9cap.c: reiterate CPU detection logic. "ghash-armv4.pl: excuse myself from implementing ""528B"" flavour." crypto/sparc*: eliminate _sparcv9_rdwrasi. "SPARCv9 assembler pack: refine CPU detection on Linux Fix warnings. "ghash-x86_64.pl: ""528B"" variant delivers further >30% improvement." x86 perlasm: add support for 16-bit values. VC-32.pl: unconditionally generate symbols.pdb. PR: 2262 Submitted By: Victor Wagner <vitus@cryptocom.ru> Fix error reporting in load_key function. "PR: 2261 Submitted By: De Rudder PR: 2258 Submitted By: Ger Hobbelt <ger@hobbelt.com> Base64 BIO fixes: Use OPENSSL_assert() instead of assert(). Use memmove() as buffers overlap. Fix write retry logic. PR: 2266 Submitted By: Jonathan Gray <jsg@goblin.cx> Correct ioctl definitions. Avoid use of ex_data free function in Chil ENGINE so it can be safely reloaded. PR: 2254 Submitted by: Ger Hobbelt <ger@hobbelt.com> Approved by: steve@openssl.org Check for <= 0 i2d return value. Update cms-test.pl to handle some Unix like Windows environments where calling shlib_wrap.sh doesn't work. PR: 2259 Submitted By: Artem Chuprina <ran@cryptocom.ru> Check return values of HMAC in tls_P_hash and tls1_generate_key_block. Although the previous version could in theory crash that would only happen if a digest call failed. The standard software methods can never fail and only one ENGINE currently uses digests and it is not compiled in by default. PR: 2253 Submitted By: Ger Hobbelt <ger@hobbelt.com> Check callback return value when outputting errors. "GCM ""jumbo"" update: - gcm128.c: support for Intel PCLMULQDQ "Revert previous Linux-specific/centric commit#19629. If it really has to be done Non-executable stack in asm. Add ghash-armv4.pl. PR: 2230 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> Fix bug in bitmask macros and stop warnings. "PR: 2244 Submitted By: ""PMHager"" <hager@dortmund.net> Initialise pkey callback to 0." PR: 2250 Submitted By: Ger Hobbelt <ger@hobbelt.com> Don't overwrite return value with strlen(f). "Missing declarations Take gcm128.c and ghash assembler modules into the build loop. PR: 2241 Submitted By: Artemy Lebedev <vagran.ast@gmail.com> Typo. PR: 2234 Submitted By: Matthias Andree <matthias.andree@gmx.de> Use correct path to openssl utility in c_rehash script. PR: 2235 Submitted By: Bruce Stephens <bruce.stephens@isode.com> Make ts/Makefile consistent with other Makefiles. "gcm128.c and assembler modules: change argument order for gcm_ghash_4bit. ghash-x86*.pl: fix performance numbers for Core2 "[co]fb128.c: fix ""n=0"" bug." PR: 2230 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> Fix various DTLS fragment reassembly bugs. PR: 2229 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> Don't drop DTLS connection if mac or decryption failed. PR: 2228 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> Fix DTLS buffer record MAC failure bug. AESNI engine: update test_aesni. gcm128.c: commentary and formatting updates. "cts128.c: add support for NIST ""Ciphertext Stealing"" proposal." AESNI engine: add counter mode. "ctr129.c: fix typo sparccpuid.S: some assembler is allergic to apostrophes in comments. Add SHA2 algorithms to SSL_library_init(). Although these aren't used directly by SSL/TLS SHA2 certificates are becoming more common and applications that only call SSL_library_init() and not OpenSSL_add_all_alrgorithms() will fail when verifying certificates. Update docs. PR: 2209 Submitted Daniel Mentz <danielml@sent.com> Documentation typo. PR: 2218 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> Fixes for DTLS replay bug. PR: 2219 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> Fixes for DTLS buffering bug. cryptlib.c: allow application to override OPENSSL_isservice. PR: 2194 "ARMv4 assembler: fix compilation failure. Fix is actually unconfirmed dso_dlfcn.c: fix compile failure on Tru64. PR: 1696 Check return value if d2i_PBEPARAM(). PR: 1763 Remove useless num = 0 assignment. Remove redundant cases on sock_ctrl(): default case handles them. PR: 1904 Submitted by: David Woodhouse <dwmw2@infradead.org> Pass passphrase minimum length down to UI. PR: 1813 Submitted by: Torsten Hilbrich <torsten.hilbrich@secunet.com> Fix memory leak when engine name cannot be loaded. "Fix for ""Record of death"" vulnerability CVE-2010-0740. Also PR: 1731 and maybe 2197 Clear error queue in a few places in SSL code where errors are expected so they don't stay in the queue. GHASH assembler: new ghash-sparcv9.pl module and saner descriptions. PR: 2192 Submitted By: Jaroslav Imrich <jaroslav.imrich@disig.sk> The prompt_info and wrong_info parameters can be empty strings which can produce confusing prompts. Treat empty string same as NULL. "This entry was in 0.9.8m changelog but missing from here Add GHASH x86_64 assembler. Extend PSS padding code to support different digests for MGF1 and message. New function X509_ALGOR_set_md() to set X509_ALGOR (DigestAlgorithmIdentifier) from a digest algorithm. Add GHASH x86 assembler. "PR: 2188 Submitted By: Jaroslav Imrich <jaroslav.imrich@disig.sk> Add ""missing"" functions to get and set prompt constructor." "gcm128.c: add option for streamed GHASH RSA PSS verification support including certificates and certificate requests. Add new ASN1 signature initialisation function to handle this case. The OID sanity check was incorrect. It should only disallow *leading* 0x80 values. Add PSS algorithm printing. This is an initial step towards full PSS support. Uses ASN1 module in Martin Kaiser's PSS patch. "Add algorithm specific signature printing. An individual ASN1 method can now print out signatures instead of the standard hex dump. More complex signatures (e.g. PSS) can print out more meaningful information. Sample DSA version included that prints out the signature parameters r Fix memory leak: free up ENGINE functional reference if digest is not found in an ENGINE. Add -engine_impl option to dgst which will use an implementation of an algorithm from the supplied engine instead of just the default one. PR: 2183 PR#1999 broke fork detection by assuming HAVE_FORK was set for all platforms. Include original HAVE_FORK detection logic while allowing it to be overridden on specific platforms with -DHAVE_FORK=1 or -DHAVE_FORK=0 Submitted by: Tomas Hoger <thoger@redhat.com> Fix for CVE-2010-0433 where some kerberos enabled versions of OpenSSL could be crashed if the relevant tables were not present (e.g. chrooted). Initial version of Galois Counter Mode implementation. Interface is still subject to change... ppccap.c: portability fix. Fix s390x-specific HOST_l2c|c2l. Submitted by: Andreas Krebbel "PR: 2178 Submitted by: ""Kennedy Fix warnings (note that gcc 4.2 has a bug that makes one of its warnings hard to fix without major surgery). "Add Kerberos fix which was in 0.9.8-stable but never committed to HEAD and 1.0.0. Original fix was on 2007-Mar-09 and had the log message: ""Fix kerberos ciphersuite bugs introduced with PR:1336.""" Revert CFB block length change. Despite what SP800-38a says the input to CFB mode does *not* have to be a multiple of the block length and several other specifications (e.g. PKCS#11) do not require this. tidy verify code. xn not used any more and check for self signed more efficiently Experimental support for partial chain verification: if an intermediate certificate is explicitly trusted (using -addtrust option to x509 utility for example) the verification is sucessful even if the chain is not complete. Include self-signed flag in certificates by checking SKID/AKID as well as issuer and subject names. Although this is an incompatible change it should have little impact in pratice because self-issued certificates that are not self-signed are rarely encountered. Add AES counter mode to EVP. "Add assigned OIDs The meaning of the X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY and X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT error codes were reversed in the verify application documentation. "Always check bn_wexpend() return values for failure (CVE-2009-3245). (The CHANGES entry covers the change from PR #2111 as well Allow renegotiation if SSL_OP_LEGACY_SERVER_CONNECT is set as well as initial connection to unpatched servers. There are no additional security concerns in doing this as clients don't see renegotiation during an attack anyway. Submitted by:  Dmitry Ivanov <vonami@gmail.com> Don't leave dangling pointers in GOST engine if calls fail. PR: 2171 Submitted by: Tomas Mraz <tmraz@redhat.com> Since SSLv2 doesn't support renegotiation at all don't reject it if legacy renegotiation isn't enabled. Also can now use SSL2 compatible client hello because RFC5746 supports it. "The ""block length"" for CFB mode was incorrectly coded as 1 all the time. It should be the number of feedback bits expressed in bytes. For CFB1 mode set this to 1 by rounding up to the nearest multiple of 8." "PR: 2164 Submitted by: ""Noszticzius PR: 2170 Submitted by: Magnus Lilja <lilja.magnus@gmail.com> Make -c option in dgst work again. Fix memory leak in ENGINE autoconfig code. Improve error logging. Initial experimental CMAC implementation. Add missing function EVP_CIPHER_CTX_copy(). Current code uses memcpy() to copy an EVP_CIPHER_CTX structure which may have problems with external ENGINEs who need to duplicate internal handles etc. PR: 2160 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Make session tickets work with DTLS. "PR: 2159 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Typo in PR#1949 bug "The previous take went wrong "If opensslconf.h and buildinf.h are to be in an architecture specific directory Experimental renegotiation support in s_server test -www server. In engine_table_select() don't clear out entire error queue: just clear out any we added using ERR_set_mark() and ERR_pop_to_mark() otherwise errors from other sources (e.g. SSL library) can be wiped. Some shells print out the directory name if CDPATH is set breaking the pod2man test. Use ./util instead to avoid this. "PR: 2157 Submitted by: ""Green "Apparently PR: 1949 Submitted by: steve@openssl.org More robust fix and workaround for PR#1949. Don't try to work out if there is any write pending data as this can be unreliable: always flush. PR: 2138 Submitted by: Kevin Regan <k.regan@f5.com> Clear stat structure if -DPURIFY is set to avoid problems on some platforms which include unitialised fields. "parisc-mont.pl: PA-RISC 2.0 code path optimization based on intruction- level profiling data resulted in almost 50% performance improvement. PA-RISC 1.1 is also reordered in same manner PR: 2149 Submitted by: Douglas Stebila <douglas@stebila.ca> Fix wap OIDs. Forgot to correct the definition of __arch in this file. Submitted by Steven M. Schweda <sms@antinode.info> It seems like sslroot: needs to be defined for some tests to work. Submitted by Steven M. Schweda <sms@antinode.info> Compile t1_reneg on VMS as well. Submitted by Steven M. Schweda <sms@antinode.info> A few more macros for long symbols. Submitted by Steven M. Schweda <sms@antinode.info> ia64cpuid.S: OPENSSL_cleanse to accept zero length parameter. "PR: 2153 pariscid.pl: OPENSSL_cleanse to compile on PA-RISC 2.0W and to accept zero length parameter. OPENSSL_cleanse to accept zero length parameter [matching C implementation]. The fix for PR#1949 unfortunately broke cases where the BIO_CTRL_WPENDING ctrl is incorrectly implemented (e.g. some versions of Apache). As a workaround call both BIO_CTRL_INFO and BIO_CTRL_WPENDING if it returns zero. This should both address the original bug and retain compatibility with the old behaviour. Tolerate PKCS#8 DSA format with negative private key. If legacy renegotiation is not permitted then send a fatal alert if a patched server attempts to renegotiate with an unpatched client. Support -L options in VC++ link. The use of NIDs in the password based encryption table can result in algorithms not found when an application uses PKCS#12 and only calls SSL_library_init() instead of OpenSSL_add_all_algorithms(). Simple work around is to add the missing algorithm (40 bit RC2) in SSL_library_init(). "PR: 2141 Submitted by: ""NARUSE Enable PA-RISC assembler in Configure (feedback from PA-RISC 2.0 is still needed). rand_win.c: handle GetTickCount wrap-around. s390x assembler update: add support for run-time facility detection. apps/speed.c: limit loop counters to 2^31 in order to avoid overflows in performance calculations. For the moment there is only one code fast enough to suffer from this: Intel AES-NI engine. PR: 2096 Minor updates to ppccap.c and ppccpuid.pl. "bn_lcl.h: add MIPS III-specific BN_UMULT_LOHI as alternative to porting crypto/bn/asm/mips3.s from IRIX. Performance improvement is not as impressive as with complete assembler PR: 2144 Submitted by: steve@openssl.org Fix DTLS connection so new_session is reset if we read second client hello: new_session is used to detect renegotiation. PR: 2133 Submitted by: steve@openssl.org Add missing DTLS state strings. "PR: 2125 Submitted by: ""Alon Bar-Lev"" <alon.barlev@gmail.com> Fix gcc-aix compilation issue." "http://cvs.openssl.org/chngview?cn=19053 made me wonder if bind() and connect() are as finicky as sendto() when it comes to socket address length. As it turned out they are sendto is reportedly picky about destination socket address length. PR: 2114 Submitted by: Robin Seggelmann "Fix compilation on older Linux. Linux didn't always have sockaddr_storage Add Montgomery multiplication module for IA-64. PR: 2102 Submitted by: John Fitzgibbon <john_fitzgibbon@yahoo.com> Remove duplicate definitions. PR: 2132 Submitted by: steve Fix bundled pod2man.pl to handle alternative comment formats. Client side compression algorithm sanity checks: ensure old compression algorithm matches current and give error if compression is disabled and server requests it (shouldn't happen unless server is broken). Compression handling on session resume was badly broken: it always used compression algorithms in client hello (a legacy from when the compression algorithm wasn't serialized with SSL_SESSION). Adapt mingw config for newer mingw environment. Note modified conditional compilation in e_capi.c. PR: 2113 "Deploy multilib config-line parameter. It was added in February to allow for kind of installation suggested in ticket #2003 from August. What it effectively does now PA-RISC assembler: missing symbol and typos. "Add simple external session cache to s_server. This serialises sessions just like a ""real"" server making it easier to trace any problems." Throw in more PA-RISC assembler. ppc64-mont.pl: adapt for 32-bit and engage for all builds. Traditional Yuletide commit ;-) Add Triple DES CFB1 and CFB8 to algorithm list and NID translation. PR: 2127 Submitted by: Tomas Mraz <tmraz@redhat.com> Check for lookup failures in EVP_PBE_CipherInit(). Allow initial connection (but no renegoriation) to servers which don't support RI. Reorganise RI checking code and handle some missing cases. Document option clearning functions. Initial secure renegotiation documentation. PR: 2124 Submitted by: Jan Pechanec <Jan.Pechanec@Sun.COM> Check for memory allocation failures. Add ctrls to clear options and mode. Change RI ctrl so it doesn't clash. Send no_renegotiation alert as required by spec. Add ctrl and macro so we can determine if peer support secure renegotiation. "Add support for magic cipher suite value (MCSV). Make secure renegotiation work in SSLv3: initial handshake has no extensions but includes MCSV PR: 2121 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Add extension support to DTLS code mainly using existing implementation for TLS. Update CHANGES. PR: 2120 Submitted by: steve@openssl.org Initialize fields correctly if pem_str or info are NULL in  EVP_PKEY_asn1_new(). "PR: 2115 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org Add Renegotiation extension to DTLS "PR: 1432 Submitted by: ""Andrzej Chmielowiec"" <achmielowiec@enigma.com.pl> PR: 2118 Submitted by: Mounir IDRASSI <mounir.idrassi@idrix.net> Approved by: steve@openssl.org Check return value of ECDSA_sign() properly. Experimental CMS password based recipient Info support. Make CHANGES in CVS head consistent with the CHANGES files in the branches. This means that http://www.openssl.org/news/changelog.html will finally describe 0.9.8l. Add OID for PWRI KEK algorithm. Split PBES2 into cipher and PBKDF2 versions. This tidies the code somewhat and is a pre-requisite to adding password based CMS support. util/pl/VC-32.pl: bufferoverflowu.lib only when actually needed and eliminate duplicate code. PR: 2086 PR: 2103 Submitted by: Rob Austein <sra@hactrn.net> Approved by: steve@openssl.org Initialise atm.flags to 0. PR: 2101 (additional) Submitted by: Roumen Petrov <openssl@roumenpetrov.info> Approved by: steve@openssl.org Another mingw fix. SHA1 assembler show off: minor performance updates and new modules for forgotten CPUs. "sha512.c: there apparently is ILP32 PowerPC platform "x86_64-xlate.pl: new gas requires sign extention in lea instruction. This resolves md5-x86_64.pl and sha1-x86_64.pl bugs "x86masm.pl: eliminate linker ""multiple sections found with different attributes"" warning." "bss_dgram.c: more elegant solution to PR#2069. Use socklen_t heuristic from b_sock.c b_sock.c: fix compiler warning. PR: 2088 Submitted by: Aleksey Samsonov <s4ms0n0v@gmail.com> Approved by: steve@openssl.org Fix memory leak in d2i_PublicKey(). PR: 2098 Submitted by: Corinna Vinschen <vinschen@redhat.com> Approved by: steve@openssl.org For Cygwin enable zlib and mdc2 by default. PR: 1686 Submitted by: Hanno Bck <hanno@hboeck.de> Approved by: steve@openssl.org Create engines dir if it doesn't already exist. "PR: 2091 Submitted by: Martin Kaiser <lists@kaiser.cx> First cut of renegotiation extension. (port to HEAD) If it is a new session don't send the old TLS ticket: send a zero length ticket to request a new session. "Ooops PR: 2089 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org DTLS Fragment size bug fix. Add option to allow in-band CRL loading in verify utility. Add function load_crls and tidy up load_certs. Remove useless purpose variable from verify utility: now done with args_verify. Generate stateless session ID just after the ticket is received instead of when a session is loaded. This will mean that applications that just hold onto SSL_SESSION structures and never call d2i_SSL_SESSION() will still work. Don't attempt session resumption if no ticket is present and session ID length is zero. "PR: 2085 Submitted by: Mike Frysinger <vapier@gentoo.org> Approved by: steve@openssl.org Change domd test to match 1.0.0+ version: check $MAKEDEPEND ends in ""gcc"" to support cross compilers." PR: 2081 Submitted by: Mike Frysinger <vapier@gentoo.org> Approved by: steve@openssl.org Respect AR and RANLIB environment variables if set. PR: 2080 Submitted by: Mike Frysinger <vapier@gentoo.org> Approved by: steve@openssl.org Respect MAKE environment variable if set. PR: 2078 Submitted by: Dale Anderson <dra@redevised.net> Approved by: steve@openssl.org Corrections to bn_internal documentation. Add an FAQ. If not checking all certificates don't attempt to find a CRL for the leaf certificate of a CRL path. PR: 2070 Submitted by: Alexander Nikitovskiy <Nikitovski@ya.ru> Approved by: steve@openssl.org Fix wrong cast. Document more error codes. "Add ""missing"" function X509_STORE_set_verify_cb()." Preliminary documentation for X509_VERIFY_PARAM. More X509 verification docs. "PR: 2074 Submitted by: Bram Neijt <bneijt@gmail.com> Approved by: steve@openssl.org Typo: ""contet""." PR: 2072 Submitted by: Tomas Mraz <tmraz@redhat.com> Approved by: steve@openssl.org Avoid potential doublefree and reuse of freed handshake_buffer. PR: 2073 Submitted by: Tomas Mraz <tmraz@redhat.com> Approved by: steve@openssl.org Don't access freed SSL_CTX in SSL_free(). Fix for WIN32 and possibly other platforms which don't define in_port_t. PR: 2069 Submitted by: Michael Tuexen <tuexen@fh-muenster.de> Approved by: steve@openssl.org IPv6 support for DTLS. PR: 1847 Submitted by: Tomas Mraz <tmraz@redhat.com> Approved by: steve@openssl.org Integrated patches to CA.sh to bring it into line with CA.pl functionality. PR: 2066 Submitted by: Guenter <lists@gknw.net> Approved by: steve@openssl.org Add -r option to dgst to produce format compatible with core utilities. Combat gcc 4.4.1 aliasing rules. Typo. "PR: 2057 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org Correct BIO_write PR: 2058 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org Correct EVP_DigestVerifyFinal error handling. "PR: 2064 Add attribute to check if return value of certain functions is incorrectly ignored. PR: 2050 Submitted by: Michael Tuexen <tuexen@fh-muenster.de> Approved by: steve@openssl.org Fix handling of ENOTCONN and EMSGSIZE for dgram BIOs. "PR: 2047 Submitted by: David Lee <live4thee@gmail.com> PR: 2048 Submitted by: john blair <mailtome200420032002@yahoo.com> Approved by: steve@openssl.org Add version info in VC-WIN64A too. "Submitted by:  Julia Lawall <julia@diku.dk> The functions ENGINE_ctrl() "PR: 2023 Submitted by: James Beckett <jmb.openssl@nospam.hackery.net> PR: 2038 Submitted by: Artem Chuprina <ran@cryptocom.ru> Approved by: steve@openssl.org Avoid double call to BIO_free(). PR: 2033 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org DTLS listen support. Add new option --strict-warnings to Configure script. This is used to add in devteam warnings into other configurations. Seed PRNG with DSA and ECDSA digests for additional protection against possible PRNG state duplication. PR: 2031 Submitted by: steve@openssl.org Tolerate application/timestamp-response which some servers send out. PR: 1644 Submitted by: steve@openssl.org Fix to make DHparams_dup() et al work in C++. For 1.0 fix the final argument to ASN1_dup() so it is void *. Replace some *_dup macros with functions. PR: 2028 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org Fix DTLS cookie management bugs. "PR: 2020 Submitted by: Keith Beckman <kbeckman@mcg.edu> PR: 2029 Submitted by: Tomas Mraz <tmraz@redhat.com> Checked by: steve@openssl.org Fix so that the legacy digest EVP_dss1() still works. "PR: 2013 Submitted by: steve@openssl.org Include a flag ASN1_STRING_FLAG_MSTRING when a multi string type is created. This makes it possible to tell if the underlying type is UTCTime "PR: 2009 Submitted by: ""Alexei Khlebnikov"" <alexei.khlebnikov@opera.com> Approved by: steve@openssl.org Avoid memory leak and fix error reporting in d2i_SSL_SESSION(). NB: although the ticket mentions buffer overruns this isn't a security issue because the SSL_SESSION structure is generated internally and it should never be possible to supply its contents from an untrusted application (this would among other things destroy session cache security)." PR: 2022 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org Fix DTLS record header length bug. "Tidy up and fix verify callbacks to avoid structure dereference "PR: 2005 Submitted by: steve@openssl.org Some systems have broken IPv6 headers and/or implementations. If OPENSSL_USE_IPV6 is set to 0 IPv6 is not used PR: 2015 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org Define LIBDIR properly. sha1-x86* assembler update: F_40_59 and Atom-specific optimizations. Use SHA1 and not deprecated MD5 in demos. Update default dependency flags. Make error name discrepancies a fatal error. Fix error codes. make update Enable mdc2 support by default as the patent has now expired. PR: 1997 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org DTLS timeout handling fix. Add COMP error strings. Fix error code. Reject leading 0x80 in OID subidentifiers. Oops! "PR: 2001 Submitted by: Tomas Mraz <tmraz@redhat.com> Approved by: steve@openssl.org Add patch: http://cvs.openssl.org/chngview?cn=14635 which never made it to 1.0.0 Fix warnings. Remove MD2 test from WIN32 as we don't compile it in by default any more. Document removal of digest+signature algorithm link. PR: 1993 Fix from 0.9.8-stable. Update from 0.9.8-stable. Use correct extension and OSX detection. Update from 1.0.0-stable. Updates from 1.0.0-stable. Document MD2 deprecation. "PR: 1624 Submitted by: ""Simon L. Nielsen"" <simon@FreeBSD.org> Obtained from: steve@openssl.org Correct FreeBSD check." Delete MD2 from algorithm tables as in 0.9.8-stable. However since this is a new branch we can also disable it by default. PR: 1981 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org DTLS record header bugfix. Update from 1.0.0-stable. Typo. "Use common verify parameters instead of the small ad-hoc subset in s_client Update from 1.0.0-stable. Allow setting of verify depth in verify parameters (as opposed to the depth implemented using the verify callback). "Stop warnings in gcc where ""a"" is const passed as a non-const argument." Add beos as a supported DSO scheme. Rename asc2uni and uni2asc functions to avoid clashes. PR: 1958 Submitted by: Sean Boudreau <seanb@qnx.com> Approved by: steve@openssl.org qnx6 support. Submitted by: Peter Gutmann <pgut001@cs.auckland.ac.nz> Approved by: steve@openssl.org Check return values for NULL in case of malloc failure. PR: 1946 Submitted by: Guenter <lists@gknw.net> Approved by: steve@openssl.org Netware header fix. Submitted by: Artem Chuprina <ran@cryptocom.ru> Reviewed by: steve@openssl.org Various GOST ciphersuite and ENGINE fixes. Including... Allow EVP_PKEY_set_derive_peerkey() in encryption operations. New flag when certificate verify should be omitted in client key exchange. Fix error codes. PR: 1952 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve@openssl.org ECDH negotiation bug. Update from 1.0.0-stable. PR: 1946 Submitted by: Guenter <lists@gknw.net> Reviewed by: steve@openssl.org Get timeval definition on Netware. PR: 1938 Submitted by: Mark Phalan <Mark.Phalan@Sun.COM> Reviewed by: steve@openssl.org Patch to pem and hmac manual pages NAME sections. PR: 1945 Submitted by: Guenter <lists@gknw.net> Approved by: steve@openssl.org Netware compilation fix for nonexistent header. Add ignored FIPS options to evp.h change clashing flag value. Update from 1.0.0-stable. Fix from 1.0.0-stable. Update from 1.0.0-stable. PR: 1929 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org DTLS MTU bug. x86[_64]cpuid.pl: further refine shared cache detection. x86cpuid.pl: sync OPENSSL_ia32_cpuid with x86_64cpuid.pl. Make sure the padlock code compiles correctly even on hardware that doesn't have padlocks. Synchronise VMS with Unixly build. "Move the time fetching code to its own static function cryptlib.c: refine logic in OpenSSLDie (addenum to commit#18118). Avoid double dialogs in OpenSSLDie on Windows. Engage cmll-x86_64.pl in Win64 build and make it compile correctly. "cryptlib.c: eliminate dependency on _strtoui64 AES-NI engine jumbo update. Reimplement time check for VMS to mimic the way it's done on Windows. Reason: gettimeofday() is deprecated. v3_alt.c: otherName parsing fix. Submitted by: Love Hrnquist strand Update test/test_padlock script. Intel AES-NI engine. Submitted by: Huang Ying "Add padlock data Redo the loop so it really compiles all objects for one engine Engage nasm optimizations in Win64 build. Addenum to commit#18074: Expand OPENSSL_ia32cap to 64 bits. Handle push/pop %rbx in epi/prologue (this is Win64 SEH thing). Include sys/time.h to declare gettimeofday(). A DTLS1 symbol needs to be chopped off a bit. Changes from 1.0.0-stable. Camellia update: make it respect NO_[INLINE_]ASM and typo in assembler. Ooops reverse previous patch. Stop warnings. Update STATUS and NEWS. Allow use of algorithm and cipher names for dgsts and enc utilities instead of having to manually include each one. Update NEWS file. Fix typo in CHANGES. Submitted by: Victor B. Wagner <vitus@cryptocom.ru> Reviewed by: steve@openssl.org Check return codes properly in md BIO and dgst command. "Submitted by: ""Victor B. Wagner"" <vitus@cryptocom.ru> Reviewed by: steve@openssl.org Update ccgost engine to support parameter files." Make SPARC assembler Pirify-friendly (Purify can't cope with certain PIC constructs). Use OPENSSL_assert() instead of assert. PR: 1864 Submitted by: Ger Hobbelt <ger@hobbelt.com> Reviewed by: steve@openssl.org Check return value. Submitted by: Victor Duchovni <Victor.Duchovni@morganstanley.com> Reviewed by: steve@openssl.org Check return value of sk_SSL_COMP_find() properly. PR: 1862 Typo. PR: 1854 Submitted by: Oliver Martin <oliver@volatilevoid.net> Reviewed by: steve@openssl.org Support GeneralizedTime in ca utility. Print IPv6 all 0s correctly (Rob Austein). Don't ask for -iv for ciphers that need no IV. "Submitted by: ""Victor B. Wagner"" <vitus@cryptocom.ru> Approved by: steve Recognise ""enable-zlib"" in mkdef.pl to handle ""zlib"" option when passed to Configure." PR: 1778 Increase default verify depth to 100. PR: 1843 Use correct array size for SHA1 hash. Stop warning about use of *printf() without a format. Use new common flags and fix resulting warnings. PR: 1835 Submitted by: Damien Miller <djm@mindrot.org> Approved by: steve@openssl.org Fix various typos. "Avoid leaks in pkcs8 app Add error checking to obj_xref.pl and add command line support for data file locations. Submitted by: Peter Sylvester <Peter.Sylvester@edelweb.fr> Reviewed by: steve If tagging is universal and SET or SEQUENCE set constructed bit. linux-s390x failed link after assembler pack update. "Put back a variable deleted by the previous revision Print out UTF8 and NumericString types in ASN1 parsing utility. Typo: just copy across an unknown type. "Because DEC C - sorry Hopefully resolve signed vs unsigned issue. Update certificate hash line format to handle canonical format and avoid MD5 dependency. "Add CRYPTO_MDEBUG_ABORT to abort() is there are any memory leaks. This will cause ""make test"" failures and make resource leaks more obvious." Fix sign-compare warnings. Add a set of standard gcc warning options which are designed to be the minimum requirement for committed code. Added to debug-steve* config targets for now. Add missing entry. Fix compilation with -no-comp by adding some more #ifndef OPENSSL_NO_COMP Some #include statements were not properly protected. This will go unnoted on most systems as openssl/comp.h tends to be installed as a system header file by default but may become visible when cross compiling. srvr_ecdh cannot be NULL at this point (Coverity ID 232). Calculate offset correctly. (Coverity ID 233) Styling update to makefiles: eliminate redundant pipes. Styling update to makefiles: $() to denote make substitutions and $${} - shell ones. Apparently s->ctx could be NULL. (Coverity ID 147). Apparently s->ctx could be NULL at this point (see earlier test). (Coverity ID 148). "If we're going to return errors (no matter how stupid) Make sure a bad parameter to RSA_verify_PKCS1_PSS() doesn't lead to a crash. (Coverity ID 135). "Fix ""possible loss of data"" Win64 compiler warnings." Update steve-debug* options. Revisit RT#1801 and complete fix. Check scalar->d before we use it (in BN_num_bits()). (Coverity ID 129) Deal with the unlikely event that EVP_MD_CTX_size() returns an error. (Coverity ID 140). Handle the unlikely event that BIO_get_mem_data() returns -ve. pval must always be set when pk7_cb() does anything (Coverity ID 146). "In BIO_write() "Windows-specific addenum to ""engage crypto/modes"" commit #17716." crypto/modes: make modes.h selfsufficient and rename block_f to block128_t. "Optimize CAST for size on 64-bit platforms. For reference "This _WIN32-specific patch makes it possible to ""wrap"" OpenSSL in another .DLL Make no-engine work again. "make depend to work with cross-gcc cmll-x86_64.pl: bug fix and size optimization of Win64 SEH section. x86_64 assembler pack: add support for Win64 SEH. perlasm/x86* update: support for 3 and 4 argument instructions. SEGV in AES_cbc_encrypt in aes-x86_64 assembler module. PR: 1801 Submitted by: Huang Ying Stack changes made dso_vms.c not compile properly. "128-bit block cipher modes consolidation. As consolidated functions rely on indirect call to block functions SEED to support OPENSSL_SMALL_FOOTPRINT: ~2x size decrease on x86. Bring C bn_mul_mont template closer to assembler. no-asm didn't exclude Camellia assembler. Return error if DH_new() fails (Coverity ID 150). Check for NULL before use (Coverity ID 203). Missing return values (Coverity ID 204). Oops should check zero_pos >= 0. "Handle case where v6stat.zero_pos == 0 correctly. Reported by: Kurt Roeckx <kurt@roeckx.be> Add Camellia assembler x86 and x86_64 modules. "Implement Configure option pattern ""experimental-foo"" (specifically Clarify a 'chil' engine param that is a little unintuitive. Submitted by: Sander Temme <sander@temme.net> Stop warning about different const qualifiers. Set memory BIOs up properly when stripping text headers from S/MIME messages. Allow the CHIL engine to load even if dynamic locks aren't registered. Submitted by: Sander Temme PR: 1574 Submitted by: Jouni Malinen <j@w1.fi> Approved by: steve@openssl.org Ticket override support for EAP-FAST. "x86_64-xlate.pl update Aftermath of a clashing size_t fix (now only format changes). J-PAKE is not experimental in HEAD. mk1mf.pl update from stable branch. Reinstate camellia header fix patch. Update make rules for x86_64 assembler pack. x86_64 assembler pack to comply with updated styling x86_64-xlate.pl rules. x86_64-xlate.pl to support MacOS X and mingw64. "Revert commit #17603 "Revert the size_t modifications from HEAD that had led to more knock-on work than expected - they've been extracted into a patch series that can be completed elsewhere Tolerate -----BEGIN PKCS #7 SIGNED DATA----- header lines as used by some implementations. Clarify (non-)blocking behavior of EGD socket interface used by RAND_egd(). "PR: 1777 Submitted by: ""Alon Bar-Lev"" <alon.barlev@gmail.com> Approved by: steve@openssl.org Fix some size_t issues." Don't use clobbered 'i' for checking UTCTime and GeneralizedTime length. Only one of these needs to be signed. Minor perlasm updates. Fix prototypes. Use stddef.h to pick up size_t def. Update HMAC functions to return an error where relevant. "Fix warnings about mismatched prototypes Fix SHA512 and optimize BN for mingw64. Fix warnings after commit#17578. "size_t-fy AES Fix warning. .cvsignore update: ignore all flavors of shared objects. ec2_mult.c readability update. Minor clean-up in bn_lib.c: constification and optimization. Harmonize Camellia API with version 1.x. "Camellia update. Quoting camellia.c: /* * This release balances code size and performance. In particular key * schedule setup is fully unrolled x86_64-xlate.pl update: refine SEH support. Add JPAKE. Add support for -crlnumber option in crl utility. "Apparently '__top' is also risky Allow detection of input EOF in quiet mode by adding -no_ign_eof option to s_client application. PR: #1761 Submitted by: David Woodhouse <dwmw2@infradead.org> "Use of a 'top' var creates ""shadow variable"" warnings." Reinstate obj_xref.h as it is not auto generated on all platforms. "Add missing ""-d"" to option list of openssl version. Submitted by: Alex Chen <alex_chen@filemaker.com>" Constification. Fix multiple ; warning. Fix argument order in BN_nnmod call and implement rigorous boundary condition check. "Remove redundant BN_ucmp Set comparison function in v3_add_canonize(). Add XMPP STARTTLS support. Ooops... remove code accidentally commited from FIPS version. Add missing lock definitions. "Half of the commit for 0.9.8 as the bitmap handling has changed. (Firstly... ommitted) Secondly Type-checked (and modern C compliant) OBJ_bsearch. Add missing DTLS1_BAD_VER (hope I got the value right). "When the underlying BIO_write() fails to send a datagram Fix EC_KEY_check_key. "From branch OpenSSL_0_9_8-stable: Allow soft-loading engines. Also Add missing CHANGES entry. Fix yesterday typos in bss_dgram.c. Fix build warnings. "dtls1_write_bytes consumers expect amount of bytes written per call Fix SSL state transitions. Submitted by: Nagendra Modadugu Note about CVS branch inconsistency. Some precautions to avoid potential security-relevant problems. DTLS didn't handle alerts correctly. PR: 1632 AIX build updates. "Add SSL_FIPS flag for FIPS 140-2 approved ciphersuites and add a new strength ""FIPS"" to represent all FIPS approved ciphersuites without NULL encryption." Ignoring errors in makedepend can hide problems. Do not discard cached handshake records during resumed sessions: they are used for mac computation. Perl script to run and verify OpenSSL against PKITS RFC3280 compliance test suite. "Initial support for delta CRLs. If ""use deltas"" flag is set attempt to find a delta CRL in addition to a full CRL. Check and search delta in addition to the base." Add support for CRLs partitioned by reason code. Tidy CRL scoring system. Add new CRL path validation error. Add support for freshest CRL extension. Initial indirect CRL support. Support for certificateIssuer CRL entry extension. Don't use assertions to check application-provided arguments; and don't unnecessarily fail on input size 0. "Mention ERR_remove_state() deprecation Initial support for CRL path validation. This supports distinct certificate and CRL signing keys. Initial code to support distinct certificate and CRL signing keys where the CRL issuer is not part of the main path. Not complete yet and not compiled in because the CRL issuer certificate is not validated. Correct the FAQ and the threads man page re: CRYPTO_THREADID changes. "Remove the dual-callback scheme for numeric and pointer thread IDs Fix signed/unsigned warning. Correctly handle errors in CMS I/O code. "Fix error codes for memory-saving patch. Also Add support for nameRelativeToCRLIssuer field in distribution point name fields. Initial support for alternative CRL issuing certificates. Allow inibit any policy flag to be set in apps. Policy validation fixes. Inhibit any policy count should ignore self issued certificates. Require explicit policy is the number certificate before an explict policy is required. Split ms/uplink.pl to corresponding platform versions. perlasm update: implement dataseg directive. "We should check the eight bytes starting at p[-9] for rollback attack detection mem_dbg.c: avoid compiler warnings. PR: 1693 Submitted by: Stefan Neis x86masm.pl: harmonize functions' alignment. des-596.pl update: short-circuit reference to DES_SPtrans. x86nasm.pl update: use pre-defined macros and allow for /safeseh link. Reaffirm that NASM is the only supported assembler for Win32 build. "We support inhibit any policy extension X509 verification fixes. Ignore self issued certificates when checking path length constraints. Duplicate OIDs in policy tree in case they are allocated. Use anyPolicy from certificate cache and not current tree level. "If --prefix=""C:\foo\bar"" is supplied to Configure for a windows target "Avoid warnings with -pedantic "Revert my earlier CRYPTO_THREADID commit Update ordinals. "Remove uidlg library from VC-32.pl Don't change _WIN32_WINNT and detect GetConsoleWindow() and CryptUIDlgSelectCertificateFromStore() at runtime. Add callback function for selection mechanism. Sync ordinals with stable branch. Link in extra CryptoAPI related libraries if needed. Compilation option to use a specific ssl client auth engine automatically. Use an appropriate Window for selection dialog. Add support for Windoes dialog box based certificate selection. Only include windows headers when under windows. Add initial support for multiple SSL client certifcate selection in CryptoAPI ENGINE. Match empty CA list to anything for ssl client auth in CryptoAPI engine. Add preliminary SSL client auth callback to CryptoAPI ENGINE. Memory saving patch. Windows batch file to rebuild error codes for CryptoAPI ENGINE. Avoid case in ca.c fix. Avoid cast with wrapper function. Add ctrl for alternative certificate store names. Use keyspec for DSA too. Get and note keyspec when signing. Release engine reference when calling SSL_CTX_free(). Update error codes. Add client cert engine to SSL routines. Add support for ENGINE supplied SSL client auth. Update VC-32.pl and load CryptoAPI engine in the right place. More CryptoAPI engine code from stable branch. Add CryptoAPI error file too. Add CryptoAPI ENGINE from stable branch. Recognize LHASH_OF(). Stop const mismatch warning in VC++. "Avoid ""duplicate const"" warnings." C++ style comments fixed. "Reword comment to be much shorter to stop other people from complaining about ""overcommenting""." Remove all root CA files (beyond test CAs including private key) from the OpenSSL distribution. Fix two invalid memory reads in RSA OAEP mode. Submitted by: Ivan Nestlerode <inestlerode@us.ibm.com> Reviewed by: steve "Change use of CRYPTO_THREADID so that we always use both the ulong and ptr members. (So if the id_callback is bogus Disable code that clearly doesn't currently serve any useful purpose. (Buggy line reported by Matthias Koenig.) "Provide information about ""openssl dgst"" -hmac option." "Another occurance of possible valgrind/purify ""uninitialized memory"" complaint related to the PRNG: with PURIFY policy don't feed uninitialized memory into the PRNG. Submitted by: Bodo Moeller <bmoeller@openssl.org> :-)" Fix from stable branch. Add missing cast. Depict future Win64/x64 development. Indicate support for digest init ctrl. "Use ""cont"" consistently in cms-examples.pl Add a -certsout option to output any certificates in a message. Add test for example 4.11" Update from stable branch. "Paul Sheer optimised the OpenSSL to/from libGMP conversions for the case where they both use the same limb size. I've tweaked his patch slightly Add 64-bit support to BN_nist_mod_244 and engage BN_nist_mod_* on 64-bit platforms. Compensate inline assembler in sha512.c for gcc 2.7.2 compiler bug. PR: 1667 "Takanori Yanagisawa has shown how to correctly use pre-computed values. So in a sense this commit reverts few latest ones fixing bugs in original code and improving it Resolve __DECC warning and keep disclaiming support for 16-bit platforms. Fix remaining BN_nist_mod_*. PR: 1593 Make certs argument work in CMS_sign() add test case. PR:1664 Synchronise with Unix. "Fix incorrect return value in apps/apps.c:parse_yesno() PR: 1607 Submitted by: ""Christophe Mac"" <mace.christophe@gmail.com>" Further synchronisation with Unix build.  I hadn't noticed pq_compat.h was gone... "Detached encrypt/decrypt example "Fix prototype for CMS_decrypt() Fix comments. CMS compressed data examples. Fix for compression and updated CMS_final(). PKCS#7 examples converted to CMS. "Reformat Correct HISTORY reference. Add additional parameter to CMS_final() to handle detached content. Ignore nonsensical flags for signed receipts. Add CMS signed receipt genration and verification docs. Signed receipt request function documentation. Add CMS_compress() docs. More CMS API documentation. "Fix various typos Correct d2i/i2d typos. Initial CMS API documentation. Set contentType attribute just before signing to allow encapsulated content type to be set at any time in applications. Fix typo and add header files to err library. Update CHANGES. Add signed receipt tests. Fix fast reduction on NIST curves (as well BN_NIST_ADD_ONE macro). PR: 1593 Use correct headers for signed receipts. Use consistent naming. Update cms-test.pl to support OpenSSL 0.9.8. Remove unnecessary header. Support for verification of signed receipts. "There was a need to support thread ID types that couldn't be reliably cast to 'unsigned long' (ie. odd platforms/compilers) "Update tunala so it builds ok with OPENSSL_NO_DEPRECATED Add support for signed receipt request printout and generation. Signed Receipt Request utility functions and option on CMS utility to print out receipt requests. Add signed receipt ASN1 structures. Initial GENERAL_NAME utility functions. Add support for CMS structure printing in cms utility. Fix duplicate asn1 ctrl values. Preliminary documentation for CMS utility. "Comment out a (currently) unused CMS function. (Sorry Steve Fork my debug configuration into 32-bit and 64-bit versions. Allow alternate eContentType oids to be set in cms utility. Add id-ct-asciiTextWithCRLF OID. Give more meaninful error message is attempt to use key ID from a certificate without a key ID. Rebuild CMS error codes. Add support for KEK decrypt in cms utility. Produce meaningful error if sanity check fails. Delete trailing whitespace from objects.txt Delete duplicate NIDs. Additional sanity check. Add support for KEKRecipientInfo in cms application. Delete standard out and err temp files too. "Delete tmp files Add enveloped data keyid test. Uninitialized variable bug fix. Add extensive PCKS7 and CMS consistency test script. Various tidies/fixes: Make streaming support in cms cleaner. Note errors in various S/MIME functions if CMS_final() fails. Add streaming support for enveloped data. More support for KEK RecipientInfo. Generalise RecipientInfo and enveloped data handling so applications can add their own key lookup routines as well as using the standard ones. Preliminary support for enveloped data content type creation. Fix signed data creation so versions are only corrected if structure is being created. "Fix a variety of warnings generated by some elevated compiler-fascism Fix a nasty cast issue that my compiler was choking on. Fix my debug-geoff configuration. Adapt to diffrent OpenSSL utility locations. Don't need to check for examples directory any more. Extend runex.pl to extract examples directly from RFC text. Add support for random key generation: this will be needed by enveloped data. Initial support for enveloped data decrypt. Extent runex.pl to cover these examples. All RFC4134 examples can not be processed. Check for cipher BIO errors and set key length after parameter decode. Initial support for Encrypted Data type generation. Reorganise encrypted content info code to avoid duplication and be more consistent with other content types. RFC4134 S/MIME examples test script. #undef X509_EXTENSIONS to avoid conflict with CryptoAPI. "We already have an object for ""zlib compression"" but it was a place holder and its actual encoding never used. Just as well because it's value looks like it was made up in the mists of time... Now there is a registered value for zlib compression (used in S/MIME compressedData content type) use that instead." "Fix error code function name mismatches in GOST engine Fix typo and avoid warning. Clarification and fix typo. Use default value for $dir if it is empty. "Make sure to set indent-tabs-mode so that we get tabs Support for NASM>=2 in Win64/x64 build. Add OIDs for compressedData content type and zlib compression. Utility attribute function to retrieve attribute data from an expected type. Useful for many attributes which are single valued and can only have one type. Extend attribute setting routines to support non-string types. Support custom primitive type printing routines and add one to LONG type. "Micro-profiling assisted ""optimization"" for Power6. Essentially it's so to say educational commit. Reordering instructions doesn't improve performance much Add Global Sign root CA. crypto/rc5/Makefile was erroneously omitted from last perlasm unification. Also remove obsolete and now misleading comments. <strings.h> does not exist under WIN32. Automate assembler support for Win64 targets (more work is needed). rc4-x86_64 portability fix. Automate assembler support in mk1mf even further. Experimental support for import of more options from Configure (via top level Makefile) into mk1mf builds. This avoids the need to duplicate the CFLAG handling and can auto build assembly language source files from perl scripts. Extend VC-WIN32 Configure entry to include new options. Update perl asm scripts include paths for perlasm. Fix unsigned/signed warnings in ssl. Cygwin compatibility fix to apps/ocsp.c. Compensate for BSDi shell bug. Include Mont asm files in WIN32 build. "Last dso_dlfcn.c check-in said ""Use Dl_info only on systems where it is known to exist. It does not exist on AIX 4.3.3 Update netware to use new SHA2 assembly language modules. Update WIN32 nasm build to use new asm files. Avoid WIN32 signed/unsigned warnings. NASM has recently changed name of win32 pre-compiled binary. PR: 1627 Add quotes to Win32 install directories. Submitted by:  Mladen Turk <mturk@apache.org> perlasm/x86*.pl updates. Final (for this commit series) optimized version and with commentary section. "This is also informational commit exposing loop modulo scheduling ""factor.""" "New Montgomery multiplication module "Source readability fix Engage x86 assembler in Mac OS X build. Mac OS X x86 assembler support. "Disable support for Metrowerks assembler. Assembler itself is broken Avoid aliasing warning. Initialize sigsize. Handle non-SHA1 digests for certids in OCSP test responder. gmp engine was non-operational. "Submitted by: Victor B. Wagner <vitus@cryptocom.ru> "Change submitted by Doug Kaufman.  He writes: I just compiled the 9.9-dev version from the 12022007 tarball under DJGPP. There were only 2 changes needed "Some assembler are allergic to lea reg Rebuild OID database: duplicates got in there somehow?? Add caRepository OID and sync object NIDs with OpenSSL 0.9.8. Synchronize x86nasm.pl with x86unix.pl. Combat [bogus] relocations in some assember modules. Lookup public key ASN1 methods by string by iterating through all implementations instead of all added ENGINEs to cover case where an ENGINE is not added. "Submitted by: ""Victor B. Wagner"" <vitus@cryptocom.ru> Update gost algorithm print routines." Fix buffer overflow. Fix warnings. Fix duplicate error codes. "1. Changes for s_client.c to make it return non-zero exit code in case of handshake failure 2. Changes to x509_certificate_type function (crypto/x509/x509type.c) to make it recognize GOST certificates as EVP_PKT_SIGN|EVP_PKT_EXCH (required for s3_srvr to accept GOST client certificates). 3. Changes to EVP - adding of function EVP_PKEY_CTX_get0_peerkey - Make function EVP_PKEY_derive_set_peerkey work for context with ENCRYPT operation Fix from stable branch. Don't let DTLS ChangeCipherSpec increment handshake sequence number. PR: 1587 Don't lookup zero length session ID. PR: 1591 Fix from stable branch. "Make ssl compile [from 098-stable Fix warnings in d1_both.c [from 0.9.8-stable]. Synchronize CHANGES between 0.9.8 and HEAD. Respect cookie length set by app_gen_cookie_cb. Submitted by: Alex Lam Make DTLS1 record layer MAC calculation RFC compliant. Submitted by: Alex Lam Addendum to commit #16654. Addendum to commit #16651. Prohibit RC4 in DTLS. Switch to bn-s390x (it's faster on keys longer than 512 bits) and mention s390x assembler pack in CHANAGES. "Basic idea behind explicit IV is to make it unpredictable for attacker. Until now it was xor between CBC residue and 1st block from last datagram DTLS RFC4347 says HelloVerifyRequest resets Finished MAC. DTLS RFC4347 requires client to use rame random field in reply to HelloVerifyRequest. Switch to RFC-compliant version encoding in DTLS. Move no status notification to ssl_check_serverhello_tlsext() to ensure no status is notified even if no server extensions are present. 10% performance tweak in 64-bit mode. Support for certificate status TLS extension. Clarify commentary in sha512-sparcv9.pl. Use accept flag for new session ticket write. "Implement the Opaque PRF Input TLS extension (draft-rescorla-tls-opaque-prf-input-00.txt) Fix indentation in d1_both.c. "Clean up error codes a bit. (engines/ccgost/ remains utter chaos Minor formatting fixes in crypto/sha/asm. Wire RC4 key_table to read-only segment. Wire DES weak_keys to read-only segment. Eliminate redundant make rule. Minimize stack utilization in probable_prime. Update from stable branch. Mention aes in enc.pod. PR: 1529 Mention SHA2 in openssl.pod. PR: 1575 Remove pq_compat.h. Minor sha[256|512]-586 performance tweaks. "It's inappropraite to override application signal "Make bn2dec work on ""SIXTY_FOUR_BIT"" platforms. PR: 1456" Remove sha512-sse2.pl. More Intel cc fix-ups. Handle empty case in X509_NAME canonical encoding. Commentary updates. Fix warning: print format option not compatible with size_t. Fix another warning. Change safestack reimplementation to match 0.9.8. Fix additional gcc 4.2 value not used warnings. "Fix warnings: computed value not use "Add sha512_block implementation optimized for small register bank. On x86 it gives same performance Update ssl code to support digests other than MD5+SHA1 in handshake. Submitted by: Victor B. Wagner <vitus@cryptocom.ru> Constify seed and md2. Compress and more aggressively constify ec_curve.c [the latter is achieved by minimizing link relocations]. Check return code when attempting to receive new session ticket message. Unify RC4 settings among darwin platforms. aes_ige suffered SIGBUS on RISC platforms. Improve cache locality in linux64-sparcv9. Add ctrls to set and get RFC4507bis keys to enable several contexts to reuse the same tickets. shlib_wrap commentary update. "shlib_wrap update IRIX and Tru64 platform updates. Document ticket disabling option. Make x86_64 modules work under Win64/x64. Workaround MSVC6 compiler bug. Docs and usage messages for RFC4507bis support. Use SHA256 for ticket HMAC if possible. Fix warning and make no-tlsext work. "Remove debugging fprintfs RFC4507 (including RFC4507bis) TLS stateless session resumption support for OpenSSL. MacOS X update. Typo in ppccpuid.pl. Buglet fixes and minor optimization in aes-x86_86 assembler. "As for inline vs. __inline. The original code implies that most compilers understand inline Make ppccpuid AIX friendly. AES for IA64 update. x86 perlasm updates. Allow for option to skip hardware support. x86*cpuid update. Complete synchronization of aes-x86_64 with aes-586. Lppc_AES_[en|de]crypt_compact: size optimization. Minor optimization in AES_set_encryption_key for x86_64. _x86_64_AES_[en|de]crypt_compact: size optimization and aggressive T[ed]4 prefetch. WIN32 VC++ build fixes. Various minor updates to AES assembler modules. Add _x86_64_AES_[en|de]crypt_compact. EVP_*_cfb1 was broken. PR: 1318 "bn_mul_recursive doesn't handle all cases correctly Fix build problem on Tru64. "Latest bn_mont.c modification broke ECDSA test. I've got math wrong Inline function declarations have to be prototypes. Flush output in x86_64cpuid.pl. CHANGES update from 098-stable. Make some shortcuts in sparcv9cap.c. Trouble is that di_walk_node result is inconsistent among CPU generations. Update from stable branch. Eliminate conditional final subtraction in Montgomery assembler modules. Privatize BN_*_no_branch. Commentary updates and minor optimization for bn_mont.c. Eliminate conditional final subtraction in Montgomery multiplication. Remove unnecessary casts and avoid some warnings with gcc 4.2. Back out safestack.h change for now: seems to break some things. Update ssl library to support EVP_PKEY MAC API. Include generic MAC support. Handle NULL parameter in some EVP utility functions. AES_set_[en|de]crypt_key for ARMv4. AES_set_[en|de]crypt_key for s390x. Typo. "Fixes for dgst tool. Initialize md_name Fix warning and back out bad modification. "OPENSSL_IMPLEMENT_GLOBAL caused more grief than it's worth (it's used twice in legacy code). I'd rather just remove it along with legacy interface Padlock engine fails to compile with -O0 -fPIC. --enable-auto-image-base in cygwin build. PR: 1517 Submitted by: vinschen@redhat.com Typo in x509_txt.c. Submitted by: Martin.Kraemer@Fujitsu-Siemens.com x86cpuid fixes. PR: 1526 ppc-xlate.pl update. Initial draft of AES for PPC. Updated GOST MAC support. Submitted by: vitus@cryptocom.ru Initial GOST MAC support. Not fully working yet... Set len to buffer size. Prepend signature name in dgst output. Use default md if none specified in dgst utility. Use EVP_DigestVerify() in dgst.c if verifying. PR: 1516 Revert change in 1516 because it breaks Windows build. Use a modified version of the headers from s_client.c which has used similar functionality without any problems. Fix error code name. Throw in ppccpuid module. Fix linking error after adding alphacpuid.s. x86_64 assembler updates. "As all assembler modules are alignment neutral More IGE speedup. AES IGE mode speedup. Improve error detection when streaming S/MIME. Only use streaming when appropriate for detached data in smime utility. "Tidy up docs More useful ASN1 macros for static allocation functions. Mention Core2 in sha1-x86_64. Commentary updates to SHA for sparcv9. Engage SHA for sparcv9. Fine reading of manual suggests that km can return non-normal completion code. Synchronise VMS with Unix. Revert irrelevant changes from commit #16191. rll does not seem to be available on legacy s390. s390x optimizations. "Reimplement rc4-586.pl All ciphersuites should have a strength designator. New function ASN1_STRING_copy() to copy to an already alloacted ASN1_STRING structure. Sample text files for S/MIME test programs. Don't finalize signerinfo if reuse and partial both set. Update smime utility to support streaming for -encrypt and -sign -nodetach options. Add new streaming i2d (though strictly speaking it is BER format when streaming) and PEM functions. These all process content on the fly without storing it all in memory. Experimental HMAC support via EVP_PKEY_METHOD. Fix digest signing so digest type is set after init. Preliminary support for signctx/verifyctx callbacks. "If you're going to check for negative Fix duplicate error number. Missing config file. Resource leak. Don't free a NULL. Coverity ID 112. Missing return on error. Coverity ID 115. Return an error if the serial number is badly formed. (Coverity ID 116). check if pointer is != NULL before dereferencing it (Coverity CID 40) RC4_set_key for x86_64 and Core2 optimization. PR: 1447 Don't die if the value is NULL (Coverity CID 98). Update x86cpuid.pl to correctly detect shared cache and to support new RC4_set_key. Reserve for assembler implementation of RC4_set_key and implement x86 one. "Apply a more modern way to get the definition of select() Allow shared builds for aix[64]-gcc targets. aix[64]-cc config lines update. Synchronise the VMS build with recent movements in the Unix build. link warnings caused by nasm modules. Two extra instructions in RC4 character loop give 80% performance improvement on Core2. I still need to detect Core2 and choose this path... Remove obsolete comment. Various PowerPC config updates. "sparcv9a-mont was modified to handle 32-bit aligned input "Initialize ""buf"" to 0 to make valgrind happy :-) Note: the RAND_bytes() manual page says: RAND_bytes() puts num cryptographically strong pseudo-random bytes into buf. It does not talk about using the previous contents of buf so we are working as documented." Do not use uninitialized memory to seed the PRNG as it may confuse code checking tools. PR: 1499 Update from stable branch. "Update FAQ Fix problem with multi line responses in -starttls by using a buffering BIO and BIO_gets(). Update from 0.9.7-stable. Improve ciphersuite order stability when disabling ciphersuites. Change ssl_create_cipher_list() to prefer ephemeral ECDH over ephemeral DH. Updates from 0.9.8-stable branch. "Reorganize the data used for SSL ciphersuite pattern matching. This change resolves a number of problems and obviates multiple kludges. A new feature is that you can now say ""AES256"" or ""AES128"" (not just ""AES"" Add STARTTLS support for IMAP and FTP. Submitted by Kees Cook <kees@outflux.net> PR: 1483 Add support for GOST 28147-89 in Gost ENGINE. Add -hmac option to dgst from 0.9.7 stable branch. Update from fips2 branch. Minimize aes_core.c footprint when AES_[en|de]crypt is implemented in assembler. Minor optimization for sha1-armv4 module. Constify version strings is ssl lib. Add AOL an AOLTW root CAs to bundle. Make armv4t-mont module backward binary compatible with armv4 and rename it accordingly. Montgomery multiplication for ARMv4. opensslwrap.sh to respect $OPENSSL_ENGINES. #include <stddef.h> in digest headers. Submitted by: Kurt Roeckx <kurt@roeckx.be> Minor clean-up in crypto/bn/asm. Minor clean-up in crypto/engine. Allow opensslwrap.sh to access engines from build tree. Minor performance improvements to x86-mont.pl. "Needed definition of _XOPEN_SOURCE_EXTENDED so DEC C on VMS will see the declarations of fd_set Replace strdup() with BUF_strdup(). Add bit I missed from PKCS#7 streaming encoder. "Experimental streaming PKCS#7 support. I thought it was about time I dusted this off. This stuff had been sitting on my hard drive for *ages* (2003 in fact). Hasn't been tested well and may not work properly. Nothing uses it at present which is just as well. Think of this as a traditional Christmas present which looks far more impressive in the adverts and on the box x86-mont.pl sse2 tune-up and integer-only squaring procedure. add support for ecdsa-with-sha256 etc. Fix the BIT STRING encoding of EC points or parameter seeds (need to prevent the removal of trailing zero bits). Eliminate 64-bit alignment limitation in sparcv9a-mont. "Minor Montgomery multiplication routine for Alpha. Sync OID NIDs with OpenSSL 0.9.8. Eliminate redundant variable in Camellia CBC routine. Improve Camellia code readability. Fix bugs in Camellia CBC routine. Fix default dependency flags. Import ordinals from 0.9.8 and update. Win32 fixes from stable branch. Clarify HAL SPARC64 support situation in sparcv9a-mont.pl. sha512-ppc.pl mutli-thread safety fix. Add .cvsignore Update from 0.9.8 stable. Eliminate duplicate error codes. Update ordinals. Remove illegal IMPLEMENT macros from header file. Remove redundant PREDECLARE statement. "Initial Don't assume requestorName is present for signed requests. ASN1 OCSP module fix: certs field is OPTIONAL. OCSP library tidy. Use extension to encode OCSP extensions instead of doing it manually. Make OCSP_CERTID_dup() a real function instead of a macro. Fix various warnings. Make TSA tests use the noprompt mode of utilities rather than piping the result into interative utilities. "Don't add the TS EKU by default in openssl.cnf because it then makes certificates genereated by ca Add documentetion for noCheck extension and add a few cross references to the extension documentation. "Initialize old_priv_encode Minor portability update to c_rehash. Further mingw build procedure updates. Harmonize dll naming in mingw builds. Yet another mingw warning. Fix mingw warnings. Switch Win32/64 targets to Winsock2. Updates to ISNTALL.W32 cover even recent mingw modifications. Rudimentary support for cross-compiling. Avoid application relink on every make invocation. "Gcc over-optimizes PadLock AES CFB codepath Temporary fix for sha256 IA64 assembler. "Further synchronizations with md32_common.h update Further synchronizations with md32_common.h update. VIA-specific Montgomery multiplication routine. Synchronize SHA1 assembler with md32_common.h update. Linking errors on IA64 and typo in aes-ia64.S. "ASN1_item_verify needs to initialize ctx before any ""goto err"" can happen; the new code for the OID cross reference table failed to do so." "All 0.9.8d patches have been applied to HEAD now "Introduce limits to prevent malicious keys being able to cause a denial of service.  (CVE-2006-2940) [Steve Henson Fix ASN.1 parsing of certain invalid structures that can result in a denial of service.  (CVE-2006-2937)  [Steve Henson] "Fix buffer overflow in SSL_get_shared_ciphers() function. (CVE-2006-3738) [Tavis Ormandy and Will Drewry "Fixes for the following claims: 1) Certificate Message with no certs OpenSSL implementation sends the Certificate message during SSL handshake Initialize new callbacks and make sure hent is always initialized. Buffer size handling fix for enc. PR:1374 Using correct lock for X509_REQ. PR:1348 Update length if copying MSB set in asn1_string_canon(). "Add missing prototype. Fix various warnings (C++ comments Compile in gost engine. Updated version of gost engine. Build error on non-unix. PR: 1390 Race condition in ms/uplink.c. PR: 1382 "As x86ms.pl is out Improve 386 portability of aes-586.pl. Ensure that the addition mods[i]+delta cannot overflow in probable_prime(). [Problem pointed out by Adam Young <adamy (at) acm.org>] Overhaul of by_dir code to handle dynamic loading of CRLs. "GOST public key algorithm ENGINE donated to the OpenSSL by Cryptocom. Very early version Fixes for new CRL/cert callbacks. Update CRL processing code to use new callbacks. Additional detail. Add an FAQ. Rewrite sha1-586.pl. Kill more C++ comments. "Fix C++ style comments Forward port of IGE mode. "According to documentation Correct warnings about signedness. +20% tune-up for Power5. Revised AES_cbc_encrypt in x86 assembler module. Switch to compact S-box when generating AES key schedule. "Real Bourne shell doesn't interpret == Engage assembler in solaris64-x86_64-cc. "Next generation aes-586.pl featuring AES_[en|de]crypt Support for multiple CRLs with same issuer name in X509_STORE. Modify verify logic to try to use an unexpired CRL if possible. Cache some CRL related extensions. Avoid WIN32 warning. Store canonical encodings of Name structures. Update X509_NAME_cmp() to use them. "Reimplement outer rounds as ""compact"" in x86 assembler. This has rather strong impact on decrypt performance WIN32 fixes signed/unsigned issues and slightly socket semantics. Fix various error codes to match functions. Add -timeout option to ocsp utility. There is should be no need to rewind the input stream any more. For S/MIME multipart/signed type the signature is calculated on the fly. For other detached data forms the stream isn't used after the single pass to calculate signatures. For non-detached the data is stored in a memory BIO. "In genpkey Bugfix: don't look in internal table for signature if found in application supplied list. Set detached flag in PKCS7 structure earlier to avoid eating up memory. PR: 1071 Public key comparison and printing routine functions. Add documentation for new smime options. Fix compiler warnings. Unsigned vs signed comparison warning. dsa_pub_cmp() doesn't need to check parameters because that is done in EVP_PKEY_cmp(). Prepare playground for AES experimental code. "Mitigate the hazard of cache-collision timing attack on last round. The only chance for T[ed]4 to get evicted in this module is when its cache ""overlaps"" with last 128 bits of key schedule." "Mitigate the hazard of cache-collision timing attack on last round. Well Mitigate cache-collision timing attack on last round. Fix EVP_PKEY_CTX_dup() to return correct value and handle NULL keys in the source. "New functions CRYPTO_set_idptr_callback() Change array representation of binary polynomials to make GF2m part of the BN library more generally useful. Submitted by: Douglas Stebila "Error messages for client ECC cert verification. Also Call 'print_stuff' even if a handshake failed. "Fix algorithm handling for ECC ciphersuites: Adapt to recent changes Fix another new bug in the cipherstring logic. Fix another bug introduced yesterday when deleting Fortezza stuff: make sure 'mask' is initialized in ssl_cipher_get_disabled(). Also simplify code by removing some unused arguments in static functions. "Ciphersuite string bugfixes Make sure that AES ciphersuites get priority over Camellia ciphersuites in the default cipher string. Fix a bug recently introduced when updating this file to use the new keygen API: make sure that 'pkey_type' is actually visible to MAIN(). "Output MIME parameter micalg according to RFC3851 and RFC4490 instead of hard coding it to ""sha1""." Add AES and GOST S/MIME capabilities if algorithms are supported. Complete EVP_PKEY_ASN1_METHOD ENGINE support. "Correct logical error in STRICT_ALIGNMENT check and remove copy of eay licence Make update. Automatically free up dynamically allocated public key methods when and ENGINE is destroyed. "Add ENGINE support for EVP_PKEY_METHOD including lookups of ENGINE implementations and functional reference counting when a context is allocated Fix error code. make update "Because all object files are now in a file Tune up AES CFB. Performance improvement varies from 10% to 50% from platform to platform. Its absolute value is within few percents marginal from that of ECB. Use a new signed int ii instead of j (which is unsigned) to handle the return value from sk_SSL_CIPHER_find(). Deal with another name that's longer than 31 characters. "rslen is unsigned Flush p7bio when all data has been copied. Update pkeyutl to use size_t for pkey functions. "There was a problem with too long command lines Allow any supported cipher to be used with smime -encrypt. "Add prototypes Update EVP_MD_CTX_copy_ex() to use EVP_PKEY_CTX_dup(). Use size_t for new crypto size parameters. Add ctrl to EVP_MD and EVP_PKEY_CTX to EVP_MD_CTX. These will be used for enhanced sign/verify operations. Tiny up hpux targets. Add -resign and -md options to smime command to support resigning an existing structure and using alternative digest for signing. Remove old digest type hacks for non RSA keys. Multiple signer support in smime application. New option to pkcs12 utility to set alternative MAC digest algorithm. Don't try to print PBE information if it can't be decoded. PKCS#12 mac key length should equal digest length. Tidy up of S/MIME code and add new functions which will make is easier to create S/MIME signed data with multiple signers. Extended PBES2 function supporting application supplied IV and PRF NID. Add PRF preference ctrl to ciphers. "Change builting PBE to use static table. Add entries for HMAC and MD5 Update old **EVIL** PEM_X509_INFO_read_bio() function to correctly assign private keys. FIXME: this function should really be rewritten because it is *horrible*. Bugfix: the NONE string for PBE algorithms wasn't working. Correctly handle missing DSA parameters. Add feature to PKCS12_create() if the encryption NID corresponds to a supported encryption algorithm instead of a PBE NID then use that algorithm with PBES2. Extend PBE code to support non default PKCS#5 v2.0 PRFs. Check for deprecated private key types before PKCS#8 types. Add includes in synopsis. Submitted by: Mike Frysinger <vapier@gentoo.org> In interactive mode only config OpenSSL once. Update 'req' command to use new keygen API. Update PKCS#7 decrypt routines to use new API. Update PKCS#7 enveloped data to new API. Update S/MIME code to use default digest. Futher minor PPC assembler update. Minor PPC assembler updates. PPC assembler distiller update. SHA1 for PowerPC. "Yet another ""teaser"" Montgomery multiplication module Update EVP_PKEY_cmp() and X509_check_private() to return sensible values and handle unsupported key types. Fix usage message for pkeyutl. Add prototypes and pkey accessor function for EVP_PKEY_CTX. Correct copyright notice... this doesn't contain any SSLeay code. Add 'flags' parameter to EVP_PKEY_asn1_meth_new() to set algorithm flags. Remove dss1 hack from S/MIME code. Remove comment from SSLeay days about EVP_PKEY_METHOD. Add OID cross reference table. Fix some typos in GOST OIDs. Update dependencies. Allow public key ASN1 methods to set PKCS#7 SignerInfo structures. If we include winsock2.h then FD_SET wants an unsigned type for an fd. Fix (most) WIN32 warnings and errors. "Provisional support for EC pkey method "Use more flexible method of determining output length If cipher list contains a match for an explicit ciphersuite only match that one suite. Got sick and tired of duplicating...  Too error-prone (i.e. I forget to update both...)! Update copyright notices on a few files where all original SSLeay code has been deleted. Print out zero length string properly. Complete key derivation support. "Change the option setting command line switch to ""-pkeyopt"" to avoid confusion with algorithm parameters." "Extend DH ASN1 method PKCS#3 DH PKCS#8 ASN1 support. Extend DH ASN1 method to support public key encode/decode and parameter utilities. Add file dso_beos.c missing from original commit. PR: 1312 "Support for DSA keygen Initial DSA EVP_PKEY_METHOD. Fixup some error codes. Add BeOS support. PR: 1312 Submitted by: Oliver Tappe <zooey@hirschkaefer.de> Reviewed by: Ulf Moeller "Use Dl_info only on systems where it is known to exist. It does not exist on AIX 4.3.3 Fix parameter error messages. Add parameter generation option to genpkey. Add support for setting keybits and public exponent value for pkey RSA keygen. Initial keygen support. ctrls to set PSS salt length. Preliminary PSS support. Beginnings of PSS support. "New utility function to reverse a buffer Bugfix X9.31 padding. Support for digest signing and X931 in rsa_pkey_meth. "Add RSA ctrl for padding mode "Reformat pkeyutl.c Implement encrypt/decrypt using RSA. If <operatio>_init function is zero interpret as noop. Include EVP_PKEY argument in EVP_PKEY_CTX_new(). This avoids the need for a separate EVP_PKEY parameter in the other operation initialization routines. Updated to EVP_PKEY_METHOD code... still doesn't do much. Initial definitions and a few functions for EVP_PKEY_METHOD: an extension of the EVP routines to public key algorithms. Remove ECC extension information from external representation of the session -- we don't really need it once the handshake has completed. Last arg to EVP_PKEY_assign() should be void *. Rebuild mac table to avoid duplicates. Minor object name edit. Add an explicit load_config() call so any added algorithms are visible. Avoid hard-coded table length where we can use sizeof. Submitted by: Peter Sylvester Reviewed by: Bodo Moeller Add GOST parameter set OIDs. Don't free up key in priv_decode. "If we declare a function The -config option flag needs to be in the SSLEAY_CONFIG value. PR: 1300 Implement Supported Elliptic Curves Extension. Submitted by: Douglas Stebila Implement cipher-suite selection logic given Supported Point Formats Extension. Submitted by: Douglas Stebila Add missing function declaration. Fix bug where freed OIDs could be accessed in EVP_cleanup() by defering freeing in OBJ_cleanup(). "Since we're moving between directories Only try to remove the tsa.dir subdirectory if it actually exists. Add support for legacy PEM format private keys in EVP_PKEY_ASN1_METHOD. "Fix bug in DSA Move algorithm specific print code from crypto/asn1/t_pkey.c to separate *_prn.c files in each algorithm directory. Gather printing routines into EVP_PKEY_ASN1_METHOD. VMS doesn't support includes of paths very well. Transfer parameter handling and key comparison to algorithm methods. Initial support for pluggable public key ASN1 support. Process most public key ASN1 handling through a single EVP_PKEY_ASN1_METHOD structure and move the spaghetti algorithm specific code to a single ASN1 module for each algorithm. check if con != NULL before using it Clarification for CPU specific config options. fix error found by coverity: check if ctx is != NULL before calling BN_CTX_end() Typo. "Make shorter TS symbols for OpenVMS. Don't convert a function pointer to a void* Check EVP_DigestInit_ex() return value in EVP_BytesToKey(). TS bugfixes: Do not hardcode message digest algorithms; fix ASN1 decoding. Submitted by: Zoltan Glozik <zglozik@opentsa.org> Add a TSA test.  testtsa.com is a manual sh to dcl translation of testtsa. Add TS to the VMS build. Print out <INVALID> if an OID value is invalid. Tolerate a SEQUENCE in DN components. Fix from stable branch. "RFC 3161 compliant time stamp request creation Minor clarification. "As an effect of revisions 1.261 "Fix warnings about ""sin"" conflicting with sin(3) definition." Avoid warnings about shadowed definitions. Update filenames in makefiles. Recognize mingw in perlasm. Ignore zero length constructed segments. "Fixes for BOOL handling: produce errors for invalid string for mini-compiler Fix from stable branch. More TLS extension related changes. Submitted by: Peter Sylvester Disable the Mixed Linkage warning for some selected modules.  This is because the Compaq C compiler will not accept that a variable be declared extern then defined static without a warning. Detect SSL error code mishandling. Some error code cleanups (SSL lib. used SSL_R_... codes reserved for alerts) "There's no such things as DTLS1_AD_MISSING_HANDSHAKE_MESSAGE. For now Add names for people who provided the TLS extension patch. The VMS I run on doesn't know socklen_t and uses size_t instead. In ASN1_parse() show tag value for ASN1 tags > 30. "Make sure that after the change from revision 1.261 Refine login in b_sock.c. Compile Windows with winsock2.h. But note that we still link with wsock32! This works because wsock32 commonly loads ws2_32 anyway and we [intend to] check upon presense of winsock2-specific API at run-time. "./util update """Relax"" prototype and rename DSO_global_lookup_func to DSO_global_lookup." "Fix mapping ""leak"" in newly introduced win32_globallookup." Rewrite timeout computation in a way that is less prone to overflow. (Problem reported by Peter Sylvester.) "Fix CFB and OFB modes in eng_padlock.c. Engine was consistent with itself Minor sparcv9 clean-ups. "Lower PADLOCK_CHUNK till value "Whoops "As SPARCV9 CPU flavor is [expected to be] detected at run-time Eliminate possible mapping leak. Missing CFLAG in couple of depend: targets. PR: 1247 Submitted by: Doug Kaufman Put back OPENSSL_SYS_MSDOS definition to revive DJGPP built. PR: 1247 Make bio.h resistant to gnu-ish __attribute__ redefenitions. PR: 1252 Fix typos in osf1 shared rules. PR: 1248 Submitted by: Nikola Milutinovic Engage Whirlpool assembler and mention Whirlpool in CHANGES. "Mention bn(64 Eliminate warning induced by http://cvs.openssl.org/chngview?cn=14690 and keep disclaiming narrower than 32-bit support. "To exclude contention for shared FPU on T1 "Switch 64-bit sparcv9 platforms from bn(64 "Allow for bn(64 Minor aes-sparcv9.pl optimization. Engage AES for UltraSPARC in sparcv9 targets. "Revoke the option to share AES S-boxes between C and assembler. It wastes space Initial draft for AES for UltraSPARC assembler. Support for indirect calls in x86 assembler modules. Add cpuid code to VC++ build. Don't include zlib header dir if it is not defined. Fix typos in wp-mmx.pl. Initial attempt at Whirlpool assembler support on VC++. Avoid warnings on VC++ 2005. Couple other benchmark comparisons for wp-x86_64.pl. Update ordinals and include changes from 0.9.8. Add error checking to avoid crashing when zlib cannot be loaded. wq instead of wp?  That's gotta be among the more amazing typos I've made... Add Whirlpool to EVP. Adapt Whirlpool API for EVP. Fix typos in wp-mmx.pl. Make CA.pl script use CA extensions when creating a root CA. Add Whirlpool OID. Add missing Makefile and fix couple of typos in commentary. "When using POSIXly functions Extensive OID code enhancement and fixes. Keep shutting up VC8. PR: 1243 "Apply ""better safe than sorry"" approach after addressing sporadic SEGV in bn_sub_words to the rest of the sparcv8plus.S." Attempt to resolve sporadic SEGV crashes in bn_sub_words in OpenSSH. I'm baffled why it crashes and does it sporadically... Update from stable branch. Throw in comment so that one doesn't get tempted to optimize it away. "Avoid end-less loop when libcrypto.a is manually deleted Mention PROBLEMS in FAQ. "AIX -blibpath is not accumulative Minor perlasm clean-up. Improve cross-compiler portability of applink.c module and mention CRYPTO_malloc_init in FAQ. One of Win64 rules lacked bufferoverflowu.lib. Move declaration for optional bn_mul_mont to bn_lcl.h in order to hide it from mkdef.pl. Address MASM-specific problems introduced with http://cvs.openssl.org/chngview?cn=14547. Eliminate VC compiler warning. Make DLL engines the default in 0.9.9 and VC++. "Add symbols for ASN1 print functions Revive app_tminterval for Netware. Revive app_tminterval for vxworks. Revive app_tminterval for VMS. Keep removing references to tmdiff. "Collect timing procedures in apps/apps.c. It's a bit cruel patch Eliminate dependency on read/write/stat in apps under _WIN32. Engage OPENSSL_NO_POSIX_IO on Windows CE. "Get rid of arcane reference to _fmode in apps/apps.h. Binary open is handles properly by bss_file.c Mask libcrypto references to stat with OPENSSL_NO_POSIX_IO. Reserve for OPENSSL_NO_POSIX_IO macro which is to eliminate references to open/read/write/close. First OPENSSL_NO_POSIX_IO target would be Windows CE. Disable BIO_s_fd on CE and disable fd:N as password passing option on all _WIN32 [see commentary for clarification]. Make pshufw optional and update performance table in sha512-sse2.pl [as per http://cvs.openssl.org/chngview?cn=14551]. Include kerberos libraries (if used) when linking test apps: some need it. "Add fixes for CAN-2005-2969. (This were in 0.9.7-stable and 0.9.8-stable "Fix install problems on MacOS X and HP-UX. PR: 1218 +20% SHA512 performance improvement on x86. Eliminate false preprocessor dependencies introduced with VOS support. Fix typos in macos x targets. "Eliminate ~3.5KB of duplicate code in des-586.pl and reserve for folded loop option "Move DES_SPtrans to where it really belongs Clarify binary compatibility with HAL/Fujitsu SPARC64 family. Eliminate gcc warning in bn_mont.c. Add support for 32-bit ABI to sparcv9a-mont.pl module. "Yet another ""teaser"" Montgomery multiply module Flip saved argument block and tp [required for non-SSE2 path]. Make sure x86-mont.pl returns zero even if compiled with no-sse2. Broaden compatibility amount Win32 headers even further [some don't have SIZE_T]. Renumber to follow what happens with 0.9.8. Add timestamp to x86-mont.pl. Add PVK support to dsa utility. Avoid warning on Win32. Throw in Montgomery multiplication assembler for x86_64. Refine logic in bn_mont.c and eliminate redundant BN_CTX pulls. Leave the decision to call/implement bn_sqr_mont to assembler developer. Initialize bignum constants using BN_bin2bn() instead of BN_hex2bn(). This saves a bit of space and avoids a compiler warning about string length. "Mention ""no-dso doesn't remove -ldl"" in PROBLEMS. PR: 1160" Fix typo in INSTALL.WCE. Zap DES_UNROLL when SMALL_FOOTPRINT is in effect. Fix typo in exptest.c. "Add reference implementation for bn_[mul|sqr]_mont Make OPENSSL_NO_COMP compile again. Fix missing applink call. Change a comment so it corresponds to reality.  Put back a character that was previously replaced with a NUL for parsing purposes.  This seems to fix a very weird parsing bug involving two variable references in the same value. Fix SunOS 4 building issue. PR: 1196 "Broaden compatibility among Windows SDK versions. Elder versions don't have ULONG_PTR 128 bit AES ciphersuites should be classified as HIGH. "Latest MSVCR80 doesn't tolerate unsupported signal numbers """Overload"" SunOS 4.x memcmp "IA-32 BN tune-up. Performance imrpovement varies with platform and keylength MD5 x86_64 assembler update. Submitted by: Marc Bevand and Charles Liu Refine AIX support. PR: 1198 "BC-32.pl updates. Submitted by: Old Wolf Proper solution to nasm compilation problems in Borland context. Another missing space in VC-32.pl [from 0.9.8]. bswapl usage should be masked by I386_ONLY. PR: 1195 Change openssl.cnf to use UTF8Strings by default and not always include issuer and serial versions of AKID. Synchronise VMS build with Unixly build. Update ASN1 print implement macro. Update asn1t.h too for ASN1 print. Extend callback function to support print customization. Return 2 from X509_NAME printing routine to add newline. Update ASN1 printing code and add a -print option to 'pkcs7' utility for initial testing. "Initial support for ASN1 print code. WARNING WARNING WARNING Integrated support for PVK files. More synchronisation with the Unixly build. "Keep cipher lists sorted in the source instead of sorting them at runtime "Generate primes "Make D-H safer Delete old ASN1_METHOD files. Add file which includes new ASN1 NETSCAPE format for certificates. "New version of ASN1 print code "Let the TLSv1_method() etc. functions return a const SSL_METHOD pointer and make the SSL_METHOD parameter in SSL_CTX_new Mention wcecompat update INSTALL.WCE. Fix Intel assembler warnings. Add support for more recent WCE SDK. Initialize SSL_METHOD structures at compile time. This removes the need for locking code. The CRYPTO_LOCK_SSL_METHOD lock is now no longer used. Allow PKCS7_decrypt() to work if no cert supplied. "WCE update PIC-ify SPARC assembler in alternative manner to eliminate dependency on OPENSSL_PIC macro. Abstain from GUI calls in rand_win.c in NT service context. "Stick to -DWCE_PLATFORM_$wceplatf Eliminate bogus #if WCEPLATFORM!=MS_HPC_PRO [which by the way unconditionally invalidated the whole clause] and replace it with #if _WIN32_WCE>=210. Implement complementary LoadLibraryA shim under WCE. Eliminate dependency on 3rd party wcedefs.mak. "Update ASN1 printing code. Highly experimental Add declaration for IDP ASN1 functions. "bytes_to_long_long isn't used anywhere any more "I'm reversing this change Change my debug build for amd64. Fix compilation when HAVE_LONG_LONG isn't defined. Fix signed/unsigned warnings. "Fix PEDANTIC compilation Fix 64-bit compilation when PQ_64BIT_IS_INTEGER isn't defined. Add support for setting IDP too. Don't use @syntax for extended CRLDP format. Typo which prevents mult valued RDNs being created. Unify VC-32.pl and VC-CE.pl scripts and update INSTALL.W32. Eliminate gcc warning in dso_win32.c. Engage SHA-256/-512 x86_64 assembler module. SHA-256/-512 x86_64 assembler module. Initial print only support for IDP CRL extension. Fix some signed/unsigned warnings. Pedantic polish to aes-ia64 and sha512-ia64. Pedantic polish to md5-ia64.S. Syncronize BSD-ia64 with other IA64-based platforms. Pedantic polish to rc4-ia64.pl. Perl stylistic/cosmetic update for aes-x86_64.pl. Fix bug [SHA1 IA-64 being disabled] introduced with Stratus VOS update. PR: 1130 Engage MD5 assembler module. "This update gets endianness-neutrality right and adds second required entry point Retire original rc4-ia64.S. Switch to new RC4 IA-64 module. Unrolled RC4 IA-64 loop gives 40% improvement over current assembler implementation [as predicted]. Submitted by: David Mosberger Obtained from: http://www.hpl.hp.com/research/linux/crypto/ ~15% better AES x86_64 assembler. bugfix: 0 - w (w != 0) is actually negative make ./configure no-deprecated [no-dsa] [no-dh] [no-ec] [no-rsa] make depend all test work again PR: 1159 Commentary section update. complementary x86_64-xlate.pl update. AES x86_64 assembler implementation. "Latest Intel compiler means every word in ""if copying [with memcpy] takes place between objects that overlap Changes from the 0.9.8 branch. CHANGES and TABLE sync with 0.9.8. "Add libcrypto.pc and libssl.pc Update from stable branch. "The private key should never have ended up in newreq.pem. Now Fix bugs in bug-fix to x509/by_dir.c. PR: 1131 Trap condition should be 64-bit when it's due. "Decimal printout of a BN is wrong on PPC Pedantic polish to aes-586.pl:-) Typos in commentary section. AES_cbc_encrypt to allow end-user to retain small blocks performance by aligning the key schedule in a specific manner. Check PKCS7 structures in PKCS#12 files are of type data. Brought forward from 0.9.8 - 64 bit warning fixes and fussy compiler fixes. "asn1parse doesn't support any TXT format "Replace _int64 with __int64 Mention hpux64-ia64-cc blowfish failure in PROBLEMS. Eliminate dependency on UNICODE macro. Fix typos in apps/apps.c Unify some SCO targets. Minimum requirement for Solaris x86 was always Pentium. Reflect this in Configure line. TABLE update accomodates other recent ./Configure changes... "Omit padding in RC4_KEY on IA-64. The idea behind padding was to reserve room for aligning of the key schedule itself [specific alignment is required for future performance improvements] Updated status from 0.9.8-stable. Replace emms with finit in x86cpuid. Someone did some cutting and pasting and didn't quite finish the job :-). Notified by Steffen Pankratz <kratz00@gmx.de> Wrap the inclusion of openssl/engine.h with a protective check for the absence of OPENSSL_NO_ENGINE. "Do not defined des_crypt() Initialise dir to avoid a compiler warning. "The NAME section of a man page is required to have a dash followed by a short description DCC doesn't like argument names in returned function pointers. PR: 1122 Update for Stratus VOS. PR: 1130 Configure update for Stratus VOS. PR: 1129 Change dir_ctrl to check for the environment variable before using the default directory instead of the other way around. PR: 1131 Strip the engine shared libraries as well. Submitted by Corinna Vinschen <vinschen@redhat.com> Darwin specific update for Configure and Makefile.shared. HP-UX specific updates to Makefile.org and Makefile.shared. "Jumbo Makfiles update. - eliminate ambiguities between GNU-ish and SysV-ish make flavors; - switch [back] to -e; - fold/unify rules; This is follow-up to the patch introducing common BUILDENV. Idea is to collect as much parameters in $(TOP) as possible and ""strip"" lower Makefiles for most variables [and thus makes them more readable]." no-asm didn't prevent make from compiling assembler modules. Solaris-specific Makefile.shared update from 098. Do no try to pretend we're at the end of anything unless we're at the end of a 4-character block. Fix typo in ssl/d1_pkt.c. Refine ELF detection on BSD platforms. Solaris x86_64 /usr/ccs/bin/as support. Handle wrap-arounds and revive missing assignment. "Add crypto/bn/bn_prime.h to the collection of generated files.  In the update target "With DJGPP Undefine DECRANDOM before redefining it. PR: 1110 Add better documentation on how id_function() should be defined and what issues there are. PR: 1096 Move the definition of DEVRANDOM for DJGPP from Configure to e_os.h. That should solve the issues with propagating it through the Makefiles. PR: 1110 "Only define ZLIB_SHARED if it hasn't already been defined (on the command line Have pod2man.pl accept '=for comment ...' before the '=head1 NAME' line. PR: 1113 "Do not undefine _XOPEN_SOURCE.  This is currently experimental "Netware patch submitted by Verdon Walker"" <VWalker@novell.com> in PR 1107.  He says: This is a followup to the NetWare patch that was applied to beta3.  It does the following: - Fixes a problem in the CLib build with undefined symbols. - Adds the ability to use BSD sockets as the default for the OpenSSL socket BIO.  NetWare supports 2 flavors of sockets and our Apache developers need BSD sockets as a configurable option when building OpenSSL.  This adds that for them. - Updates to the INSTALL.NW file to explain new options. I have tried very hard to make sure all the changes are in NetWare specific files or guarded carefully to make sure they only impact NetWare builds.  I have tested the Windows build to make sure it does not break that since we have made changes to mk1mf.pl. We are still working the gcc cross compile for NetWare issue and hope to have a patch for that before beta 6 is released." Eliminate gcc -pedantic warnings. Allow for dso load by explicit path on HP-UX. "When the return type of the function is int "Avoid endless loops.  Really "ssl_create_cipher_list should return an error if no cipher could be collected (see SSL_CTX_set_cipher_list manpage). Fix handling of ""cipher1+cipher2"" expressions in ssl_cipher_process_rulestr. PR: 836 + 1005" Fix for padding X9.31 padding check and zero padding bytes. Allow BIO_s_file to open and sequentially access files larger than 2GB on affected platforms. PR: 973 FAQ to mention no-sha512 as option for compilers without support for 64-bit integer type. Skipping all tests just because one algorithm is disabled seems a bit harsch. PR: 1089 Change mention of Makefile.ssl to Makefile. _GNU_SOURCE needs to be defined before any standard header. "Further change pq_compat.h to generate the flag macros PQ_64BIT_IS_INTEGER and PQ_64BIT_IS_BIGNUM with the values 0 (for false) and 1 (for true) "Change pq_compat.h to trust the macros defined by bn.h a bit more gcc 2.95.3 on Ultrix supports long long. PR: 1091 Correct typo ia64.o -> bn-ia64.o. PR: 1094 "Add support for the new Intel compiler "Updated support for NetWare "New function Unify BSDi target. The macro THREADS was changed to OPENSSL_THREADS a long time ago. PR: 1096 Use correct name for config file env variable. PSS update [from 0.9.7]. Update from 0.9.7-stable. Synchronise more with the Unix build. """Show"" more respect to no-sha* config options. PR: 1086" Change all relevant occurences of 'ncipher' to 'chil'.  That's what nCipher always wanted... Update from stable branch. "We have some source with \r\n as line ends.  DEC C informs about that Add pss/x931 files. "Assing check_{cert "Handle differences between engine IDs and their dynamic library names (and source files "It seems like mkdef.pl couldn't quite understand that #ifdef OPENSSL_NO_SHA512 was still active when it came down to the functions.  mkdef.pl should really be corrected "DEC C complains about bad subscript "OPENSSL_NO_SHA512 to mask even SHA512_CTX declaration. This is done to make no-sha512 more effective on platforms Default to no-sse2 on selected platforms. Propagate BUILDENV into subdirectories. FAQ to mention no-sse2. FAQ update to mention Applink. Engage Applink in mingw. Note that application-side module is not compiled into *our* aplpications. That's because mingw is always consistent with itself. Having library-side code linked into .dll makes it possible to deploy the .dll with user-code compiled with another compiler [which is pretty much the whole point behind Applink]. "I just branched 0.9.8 Engage Applink for VC builds. mdc2test is not built by default anymore. OPENSSL_Applink update. Improve shell portability of new rules in Makefile.shared. "Further BUILDENV refinement "Further BUILDENV clean-up "Implement fixed-window exponentiation to mitigate hyper-threading timing attacks. BN_FLG_EXP_CONSTTIME requests this algorithm Make Makefile.shared quiet again. "Simplify shared rules Consolidate BUILDENV [idea is to keep all variables in one place]. +20% performance improvement of P4-specific RC4_CHAR loop. Don't use the SSL 2.0 Client Hello format if SSL 2.0 is disabled with the SSL_OP_NO_SSLv2 option. Move some entries from ChangeLog.0_9_7-stable_not-in-head to ChangeLog.0_9_7-stable_not-in-head_FIPS. "Fix more error codes. (Also improve util/ck_errf.pl script Comply with optimization manual (no data should share cache-line with code). Allow for 64-bit cache-line alignments in code segment. "Update util/ck_errf.pl script "Eliminate ""statement with no effect"" warning when OPENSSL_assert macro is used with constant assertion." x86_64 assembler translator update. Commentary update motivating code update in 0.9.7. x86_64 assembler translator update. Engage md5-x86_64 assembler module. Throw in md5-x86_64 assembler. "Cygwin doesn't expose Win32 [not ""officially""]." Cpuid modules updates. Rename amd64 modules to x86_64 and update RC4 implementation. x86_64 assembler translator update. Redundant changes. Remove false positives and resolve some of remaining ones. Fold rules in test/Makefiles [from stable]. Don't attempt to parse nested ASN1 strings by default. "Some true positives fixed "This one deserves a note.  In the change to CHANGES "Remove a bunch of false positives "From branch OpenSSL_0_9_7-stable "From branch OpenSSL_0_9_7-stable Use more efficient way to locate end of an ASN1 structure. add reference to BN_BLINDING_new.pod Pointer to BN_MONT_CTX could be used uninitialized. Increase offset for BIO_f_enc() to avoid problems with overlapping buffers when decrypting data. Update default dependency flags. Change method_mont_p from (char *) to (BN_MONT_CTX *) and remove several casts. Port BN_MONT_CTX_set_locked() from stable branch. The function rsa_eay_mont_helper() has been removed because it is no longer needed after this change. Remove more false positives. util/mk1mf.pl issues have been resolved Port from stable branch. """PS"" to Steve's commit (Port prime utility across from stable branch)." Port prime utility across from stable branch. Remove more false positives. Remove more false positives. "Fix various incorrect error function codes. (""perl util/ck_errf.pl */*.c */*/*.c"" still reports many more.)" "fix SSLerr stuff for DTLS1 code; move some functions from exported header <openssl/dtl1.h> into ""ssl_locl.h""; fix silly indentation (a TAB is *not* always 4 spaces)" Fixes for signed/unsigned warnings and shadows. Add DTLS support. "Remove some more entries that are false positives "This is a collection of those CVS change log entries for the 0.9.7 branch (OpenSSL_0_9_7-stable) that do not appear similarly in 0.9.8-dev (CVS head). Some obvious false positives have been eliminated: e.g. Avoid L1 cache aliasing even between key and S-boxes. "Add debug target Make kerberos ciphersuite code compile again. Avoid more shadow warnings. Rename typed version of M_ASN1_get M_ASN1_get_x to avoid conflicts. Remove more bogus shadow warnings. Stop compiler warnings about deprecated lvalue casts. Stop bogus shadowing warning. Process MINFO file earlier in mk1mf.pl so it can modify variables like CFLAGS. Process kerberos include and library options. Avoid compiler complaint about mismatched function signatures (void * != char *) Resolve signed vs. unsigned. Type mismatch detected by DEC C compiler.  void* != void** Avoid compiler complaint about mismatched function signatures (void * != RSA *) Fix logic in mkdef.pl function is_valid. Update symbols Stop perl warning. Various Win32 and other fixes for warnings and compilation errors. Fix Win32 build system to use 'Makefile' instead of 'Makefile.ssl'. Throw in x86_64 AT&T to MASM assembler converter to facilitate development of dual-ABI Unix/Win64 modules. Check return values of <Digest>_Init functions in low level digest calls. Prototype mnemonics in padlock_verify_context for better portability [read support for Solaris assembler]. Fix for bug emerged in openvpn conext. "More cover-ups Addenum to http://cvs.openssl.org/chngview?cn=13054. "Zap OPENSSL_EXTERN on symbols Fix typos. Introduce OPENSSL_NONPIC_relocated to denote relocated DLLs. Parameterize do_solaris rules in Makefile.shared. Minor cryptlib.c update: compiler warnings in OPENSSL_showfatal and OPENSSL_stderr stub. Replace overwritten lines before error codes. Rebuild error codes. Include error library value in C error source files instead of fixing up at runtime. Recognize MSYS/MINGW environment. "Implement OPENSSL_showfatal and make it Win32 GUI and service aware [meaning that it will detect in which context application is running and either write message to stderr Harmonize cygwin/mingw and VC targets. +45% RC4 performance boost on Intel EM64T core. Unrolled loop providing further +35% will follow... Submitted by: Zou Nanhai Extend Solaris x86 support to amd64. "Solaris x86 linker erroneously pads .init segment with zeros instead of nops Some non-GNU compilers (such as Sun C) define __i386. "Make bn/asm/x86_64-gcc.c gcc4 savvy. +r is likely to be initially introduced for a reason [like bug in initial gcc port] "If input is bad use SSL3_VERSION_MAJOR instead of SSL3_VERSION etc. PR: 658 Consistency. "Add a file with fingerprints that have recently been used to sign OpenSSL distributions Simplicate and add lightness. Get rid of irritating noise. Take account of Makefile.ssl removal. Blow away Makefile.ssl. Doc fixes. Ensure (SSL_RANDOM_BYTES - 4) of pseudo random data is used for server and client random values. Added HOWTO about proxy certificates. "It seems that Configure revision 1.404 broke ""make depend"" by hiding from it which algorithms were disabled.  With these new changes Cygwin to use DSO_FLFCN and mingw to use DSO_WIN32. Avoid re-build avalanches with HP-UX make. Take MDC2 patent into account. "In addition to RC5 Fix hang in EGD/PRNGD query when communication socket is closed prematurely by EGD/PRNGD. PR: 1014 Submitted by: Darren Tucker <dtucker@zip.com.au> Fix possible memory leak. "This patch was ""ignited"" by OpenBSD 3>=4 support. They've switched to ELF and GNU binutils "Make Makefile.shared BSD make-friendly Mention no-sse2 option in INSTALL note. "Drop redundant -lc from a number of rules in Makefile.shared. It's perfectly safe [compiler driver adds it] and in some situation even perfectly appropriate [mixing -pthread and -lc on FreeBSD can have lethal effect on apps/openssl]. I'd say we should get rid of more Shut whiny make's up. Address run-time linker problems: LD_PRELOAD issue on multi-ABI platforms and SafeDllSearchMode in Windows. Submitted by: Richard Levitte "The first argument to load_iv should really be a char ** instead of an unsigned char ** "Oops "The mix of CFLAGS and LDFLAGS is a bit confusing in my opinion FreeBSD 5 refuses to #include <malloc.h>. Fix compiler warning after http://cvs.openssl.org/chngview?cn=12843. ./Configure to respect $thread_cflag variable. "Fold a bunch of linux and *BSD targets into [linux|BSD]-generic[32|64]. Idea is to provide unified ""fall-down"" case for all rare platforms out there. ./config is free to enable some optimizations "Default to AES u32 being unsinged int and not long. This improves cache locality on 64-bit platforms (and fixes IA64 assembler-empowered build:-). The choice is guarded by newly introduced AES_LONG macro Improve ECB performance (48+14*rounds -> 18+13*rounds) and reserve for hand-coded zero-copy AES_cbc_encrypt. linux-parisc update. PR: 990 Submitted by: Mike Frysinger <vapier@gentoo.org> Bug-fix in CBC encrypt tail processing and commentary section update. Small thing.  It seems like we have to defined _XOPEN_SOURCE to get isascii() on DEC/Compaq/HP C for VMS. "Throw in AES CBC assembler Fix a typo in a.out assembler modules. "Don't zap AES CBC IV "Changes concering RFC 3820 (proxy certificates) integration: - Enforce that there should be no policy settings when the language is one of id-ppl-independent or id-ppl-inheritAll. - Add functionality to ssltest.c so that it can process proxy rights and check that they are set correctly.  Rights consist of ASCII letters Rely on e_os.h to appropriately define str[n]casecmp in non-POSIX environments. O_NOFOLLOW is not appropriate when opening /dev/* entries on Solaris. PR: 998 "Small typo "FAQ update to mention no-sha0 as possible workaround for Tru64 compiler bug. Well DJGPP documentation note update. "Permit ""monolithic"" AES assembler implementations Borrow #include <string[s].h> from e_os.h. Make whiny compilers stop complaining about missing prototype. Commentary update for AES IA-64 assembler module. Minor AES x86 assembler tune-up. iv needs to be const because it sometimes takes it's value from a const. "As new major IRIX release is highly unlikely to appear [and break following] "Remove CPU detect for IRIX targets. Performance gain is less than 1% "Remove yet another redundant memcpy. Not at least performance critical Eliminate redundant memcpy of IV material. Performance improvement varies from platform to platform and can be as large as 20%. Engage AES x86 assembler module for COFF and a.out targets. Engage AES x86 assembler module on ELF platforms. x86 perlasm update to accomodate aes-586.pl. "Eliminate copies of TeN and TdN AES x86 assembler implementation. Refine PowerPC platform support. Remove unused buffer 'buf'. Change libeay.num so it's synchronised with additions in 0.9.7-stable. make update Propagate a few more variables to Makefile.shared when linking programs. Remove duplicate lines. Engage SHA1 IA64 assembler on IA64 platforms. Automatically mark the CRL cached encoding as invalid when some operations are performed. SHA1 assembler for IA-64. Extend RC4 test. Update 'certs' directory. Move expired certificates to expired directory and zero assurance demontrations CAs to 'demo'. "Use X509_cmp_time() in -checkend option Remaing bits of PR:620 relevant to 0.9.8. "Add lots of checks for memory allocation failure Update year. "In by_file.c check last error for no start line V1 certificates that aren't self signed can't be accepted as CAs. Perform partial comparison of different character types in X509_NAME_cmp(). Add 0.9.7 specific comments to RC4 assembler modules. "Split X509_check_ca() into a small self and an internal function check_ca() sha1_block_asm_data_order can't hash if message crosses 2GB boundary. "Make an explicit check during certificate validation to see that the CA setting in each certificate on the chain is correct.  As a side- effect always do the following basic checks on extensions perlasm/x86[ms|nasm] update to accomodate updated RC4 assembler module. Engage RC4 IA-64 assembler module. RC4 IA-64 assembler implementation. Check return code of EVP_CipherInit() in PKCS#12 code. "RC4 tune-up for Intel P4 core "In ""req"" exit immediately if configuration file is needed and it can't be loaded instead of giving the misleading: ""unable to find 'distinguised_name' in config"" error message." "PR: 910 Add command line options -certform Initial pod documentation of X509V3 config file format. "PR: 940 Typo: use prompt_info PR: 923 Typo. PR: 938 Typo. Zap obsolete der_chop script. Fix x509.c so it creates serial number file again if no serial number is supplied on command line. Cut'n'paste mistake.  All tested OK now... Use the default_md config file value when signing CRLs. PR:662 Don't return an error with crl -noout. PR:917 Sumbmitted by: Michael Konietzka <konietzka@schlund.de> Make sure LD_PRELOAD is only set when we build shared libraries (and therefore link with them).  Add LD_PRELOAD setting code where it was still missing. PR: 966 "Don't use $(EXHEADER) directly in for loops "Because -rpath/-R may have been used "Make sure memmove() is defined Update FAQ. Fix race condition when SSL ciphers are initialized. Update ECDSA and ECDH for OPENSSL_NO_ENGINE. Reported by: Maxim Masiutin Submitted by: Nils Larsch Fix race condition when CRL checking is enabled. "Don't use C++ reserved work ""explicit""." "Fix Solaris 10_x86 shared build. -Bsymbolic is required to avoid ""remaining relocations"" in assembler modules. The latter seems to be new behaviour usr/doc has recently changed to usr/share/doc on Cygwin. Notified by Corinna Vinschen <vinschen@redhat.com> Move the declaration of alloca() so it's ony declared when really necessary. Nils Larsch reported that this include is required. Strange that this had gone unnoticed ... "Import changed files from LPlib.  The changes are logged as follows for LPdir_unix.c in LPlib.  For the other files "Two TODO comments taken care of. Nils pointed out that one of them had already been done Make -Werror happy again. Check ASN1_TYPE structure type is a SEQUENCE in PKCS7_get_smimecap(). Change values of MBSTRING_* to the form MBSTRING_FLAG|nbyte as assumed in ASN1_STRING_to_UTF8(). "- There's no more need for the snprintf macro. - Move the inclusion of malloc.h until after all other includes When looking for request extensions in a certificate look first for the PKCS#9 OID then the non standard MS OID. Make VIA Padlock engine more platform friendly and eliminate compiler warning. Submitted by: Doug Kaufman <dkaufman@rahul.net> Synchronise VMS build files with Unixly Makefiles. Reformat smime utility. Add support for policy checking in verify utility. "Proper support for OpenBSD-i386 shared build "OPENSSL_ia32cap final touches. Note that OPENSSL_ia32cap is no longer a symbol Fix compiler warnings in crypto/evp/bio_ok.c as pointed out by Geoff. crypto/perlasm update primarily to unify Netware modules. Once it's verified x86*_nw.pl will be deleted. In addition this update implements initseg on several additional [in addition to ELF] platforms. Functions registered with initseg are supposed to be called prior main(). Minor VIA Padlock engine update: eliminate -Wunused warning when *not* compiling the engine and inline memcpy in performance critical pathes. "On systems that use case-insensitive symbol names (i.e. they're all converted to upper case or something like that) "Basically Update FAQ. Don't ignore return value of EVP_DigestInit_ex() in md BIOs and dgst utility. Padlock engine update to fix a typo in MSC assembler and to address potential corruption problem if user manages to inter-leave aligined and misaligned requests [as well as some MSC-specific tweaks]. "DJGPP has opendir() and friends Minor clean-up to make Microsoft compiler shut up. Cygwin fix-up for shared build. "Clean-up GAS targets: get rid of ""cpp"" stuff and replace it with ""purified"" COFF and a.out targets [similar to ELF targets]. You might notice some rudementary support for shared mingw builds under cygwin. It works (it produces cryptoeay32.dll and ssleay32.dll with everything exported by name) "Deprecate cpp and gaswin targets. New coff fills in for gaswin Add FIPS library name to error routines. "This is so to say ""damage control"" for jumbo ""cpuid"" patch "Add framework for yet another assembler module dubbed ""cpuid."" Idea is to have a placeholder to small routines Zero key-length for HMAC is apparently OK. Stricter boundary condition check in HMAC_Init_ex. Minor 64-bit md32_common.h update and minor unsignification of digests. "Some compilers are just too whiny. Nothing makes Microsoft compiler stop complaining about loss of precision "Typos and due casts. As for the latter. It's ""safe"" to cast as below Build-n-link new IA-64 modules on Linux and HP-UX. Various IA-64 assembler fix-ups. "Win64 placeholder targets. This is merely naming suggestion. As we know Win64 comes in two flavors Adapt rc4-amd64.pl for Win64/AMD64 assembler. "From LPlib: Apparently "From LPlib: Make a nicer comment #include <limits.h> is required at least on HP-UX and IRIX. And what's with HP-UX offering 14 for NAME_MAX? "EVP_Digest is size_t-fied All SIXTY_FOUR_BIT platforms (mind the difference between SIXTY_FOUR_BIT and SIXTY_FOUR_BIT_LONG) were failing to pass 'cd test; make test_bn'. "From LPlib: Some code beautification. Change the macro CP_THREAD_ACP to CP_ACP Make rand_win.c UNICODE savvy. From LPlib: Windows changes that detects if multibyte characters are available and deals with them properly. Contributed by Andy Polyakov <appro@fy.chalmers.se> "Imported from LPlib "Since version 7.0 Type in Configure and TABLE update. "Add anchors for AES "Because it's one of our libraries calling new functions in the other "'SSL_add_dir_cert_subjects_to_stack' is longer than 31 characters. Lucky me o_dir needs to be compiler with the warnings about dollar signs in identities disabled. "In some cases Integration of RC4 AMD64 module. RC4 tune-up for AMD64. Performance improvement of 2.22x is measured for linux-x86_64 target. Use the new directory reading functions. "Copy a few files from LPlib (a new project of mine) Delta CRL support in extension code. "Improve error handling if decompression of an ec point fails Delete non-POSIX header file. "Explain a little better what BN_num_bits() and BN_num_bits_word() do. Add a note as to how these functions do not always return the key size Minor (+12% on P4) performance tweak for sha512_block_sse2. AES assembler implementation for IA-64. Note that there is no anchor from C code yet... New SHA algorithms  assembler implementation for IA-64. Note that despite module name both SHA-256 and SHA-512 are supported. "Changes for VOS "Make the tests of EVP operations without padding.  As a consequence Make sure that the buffers are large enough to contain padding. PR: 904 NetWare fixes provided by Verdon Walker for OpenSSL 0.9.8-dev. The changes have been mailed to <crypt@bis.doc.gov> as well. PR: 903 Reformat pkcs8 source. "Tidy up "Incomplete initial sweep over the engine code. Mainly reducing some comment-noise to managable levels and inverting the sense of the ""uptodate"" boolean (which was counter-intuitive the way I'd left it)." "Deprecate unused cruft "Attempt to bring the 'engine' documentation up to date w.r.t missing prototypes "Actually "Get rid of signed/unsigned warnings Tweak my debug target flags. "As Nils put it; Yet another question: some time ago you changed BN_set_word. Why didn't you change BN_get_word as well? Quite. I'm also removing the older commented-out implementations to improve readability. This complex stuff seems to date from a time when the types didn't match up well. Submitted by: Nils Larsch "Making some values explicitely unsigned was derived from ongoing work that isn't yet committed.  It wasn't meant to be committed already "Typo Correct the return codes for ecdsatest. Submitted by: Nils Larsch Reviewed by: Geoff Thorpe More precise explanation of session id context requirements. "SHA fails to compile on x86_64 if compiled with custom flags """no-engine"" was being ignored "This fixes the installation target for dynamic engines 32-bit PA-RISC requires -Bsymbolic when linking libcrypto.sl. Without this flag RAND_poll ends up in end-less loop calling RAND_add. But don't ask me why... Extend HMAC_MAX_MD_CBLOCK to accomodate SHA-512. "objects.txt update for SHA-224/-256/-384/-512. SHA-224 ids still appear ""draft Make sha-256/-512 naming in speed.c consistent with their names as they will appear at EVP leyer. Final SHA-256/-512 touches. Extra md_len field in SHA[256|512]_CTX reserves for truncated hash function output mode and makes SHA224 thread-safe. Next stop is integration with EVP and we're done... "Kill unused macro and reimplement it for that single context it can actually be used "SHA224_Update() and SHA224_Final() aren't implemented hpux-shared rules to cover even for GNU ld. Make sure we return 0 if test passed. Eliminate compiler warnings and throw in performance table. SHA-224 test vectors added. "Since num is now a size_t Synchronise VMS with the Unixly Malefiles. Documentation note for Win32 glue between BIO layer and compiler run-time. "Framework for glueing BIO layer and Win32 compiler run-time. Goal is to make it possible to produce for a unified binary build SHA-256/-512 test and benchmark. "SHA-256/-512 update. A bug fix Stress collector/padding function. "Final API adaptation. Final "Delete unused function from libeay.num Add SHA256 and SHA512 algorithms to mkdef.pl. Fix mkdef.pl script to avoid infinite loop when parsing sha.h. "After the latest round of header-hacking "Deprecate the recursive includes of bn.h from various API headers (asn1.h "Remove some unnecessary recursive includes from the internal apps.h header "Because of recent reductions in header interdependencies "I can't verify this directly "The inclusion of bn.h from the engine.h API header has been deprecated Deprecate quite a few recursive includes from the ssl.h API header and remove some unnecessary includes from the internal header ssl_locl.h. This then requires adding includes for bn.h in four C files. "Deprecate some recursive includes from the store.h API header Reduce dependencies on crypto.h by moving the opaque definition of CRYPTO_EX_DATA and the new/free/dup callback prototypes to ossl_typ.h. Moving opaque definitions to ossl_typ.h lets us reduce header dependencies. Deprecate inclusion of crypto.h from ui.h. "Make reservations for FIPS code in HEAD branch "Make some more API types opaquely available from ossl_typ.h This file implements various functions that have since been redefined as macros. I'm removing this from the NO_DEPRECATED build. size_t-fication of message digest APIs. We should size_t-fy more APIs... "Reimplement old functions "SHA-224/-256/-384/-512 implementation. This is just sheer code commit. Makefile modifications Make self signing option of 'x509' use random serial numbers too. "SSE2 SHA512_Transform implementation. No SSE2 accelerated bn_mul_add_words. Code is currently disabled till proper config and run-time support is added. PR: 788 Submitted by: <dean@arctic.org> Reviewed by: <appro> Obtained from: http://arctic.org/~dean/crypto/rsa.html Support for IA-32 SSE2 instruction set. "Remove the creation of $(INSTALL_PREFIX)$(OPENSSLDIR)/lib "When the pointer 'from' changes "- update from current 0.9.6-stable CHANGES file - update from current 0.9.7-stable CHANGES file: Now here we have ""CHANGES between 0.9.7e and 0.9.8"" The new BN_CTX code makes this sort of abuse unnecessary. "Improved PowerPC support. Proper ./config support for ppc targets "With the new dynamic BN_CTX implementation "The problem of rsa key-generation getting stuck in a loop for (pointlessly) small key sizes seems to result from the code continually regenerating the same prime value once the range is small enough. From my tests "Allow RSA key-generation to specify an arbitrary public exponent. Jelte proposed the change and submitted the patch More ASN1 reformat/tidy. "As far as I can tell Extend the index parameter checking from sk_value to sk_set(). Also tidy up some similar code elsewhere. Thanks to Francesco Petruzzi for bringing this to my attention. Reduce chances of issuer and serial number duplication by use of random initial serial numbers. PR: 842 Print the debug thingies on stderr instead of stdout.  If for nothing else then at least so bc doesn't have problems parsing the output from bntest :-). "More updates for the header cleanups (and apologies "(oops) Apologies all "Reduce header interdependencies Clear error if unique_subject lookup fails. Avoid undefined results when the parameter is out of range. "This is essentially Intel 32-bit compiler tune-up. To start with all available compiler versions generated bogus machine code trying to compile new crypto/des/cfb_enc.c. Secondly "Enhance EVP code to generate random symmetric keys of the appropriate form "Make {i2v Extend OID config module format. Free up BIO properly when using streaming S/MIME sign. SSL_COMP_get_compression_method is a typo (a missing 's' at the end of the symbol name). Wrap code starting with a definition. PR: 854 Change spaces to symbols in names. PR: 856 Make prototypes for some callback pointers. A couple more cases where RAND_add() gets an integer instead of a doule as last argument. Fix loads of warnings in policy code. I'll remember to try to compile this with warnings enabled next time :-) Fix ASN1 warnings. "Adjust various bignum functions to use BN_CTX for variables instead of locally initialising their own. NB: I've removed the ""BN_clear_free()"" loops for the exit-paths in some of these functions "Replace the BN_CTX implementation with my current work. I'm leaving the little TODO list in there as well as the debugging code (only enabled if BN_CTX_DEBUG is defined). I'd appreciate as much review and testing as can be spared for this. I'll commit some changes to other parts of the bignum code shortly to make better use of this implementation (no more fixed size limitations). Note also that under identical optimisations "Adds warnings about two curves and fixes the ""seed"" value for two other curves. Submitted by: Nils Larsch" ... and this should likewise fix up those RSA implementations that weren't already built and tested. "By adding a BN_CTX parameter to the 'rsa_mod_exp' callback "Damn Remove some warnings. "Protect against gcc's ""warning: cast does not match function type""." Correct constness problems. Add store.h among the exported headers on VMS. "o_str.h isn't a public header file o_str.h isn't a public header file. Make sure toupper() is properly declared. Sync the VMS build with Unix. Initial support for certificate policy checking and evaluation. This is currently *very* experimental and needs to be more fully integrated with the main verification code. Correct minor spelling error. PR: 845 Change \t to real tab in echo argument. PR: 847 Make sure fd is defined where it should. PR: 849 "Variety of belt-tightenings in the bignum code. (Please help test this!) - Remove some unnecessary ""+1""-like fudges. Sizes should be handled exactly "Make sure that the last argument to RAND_add() is a float "Convert openssl code not to assume the deprecated form of BN_zero(). Remove certain redundant BN_zero() initialisations "The efforts to eliminate the dual-representation of zero and to ensure bignums are passed in and out of functions and APIs in a consistent form has highlighted that zero-valued bignums don't need any allocated word data. The use of BN_set_word() to initialise a bignum to zero causes needless allocation and gives it a return value that must be checked. This change converts BN_zero() to a self-contained macro that has no return/expression value and does not cause any expansion of bignum data. Note "Document a change I'd already made "IRIX 6.x shared build fix-up. For reference. Note that both cc and gcc support -Wl flag "Minimise the amount of code dependent on BN_DEBUG_RAND. In particular "More changes coming out of the bignum auditing. BN_CTX_get() should ideally return a ""zero"" bignum as BN_new() does - so reset 'top'. During BN_CTX_end() Fix policy constraints syntax. Cleanup ASN1 OID module when it exits. Memory leak fix. Various X509 fixes. Disable broken certificate workarounds when X509_V_FLAG_X509_STRICT is set. Check for CRLSign in CRL issuer certificates. Reject CRLs with unhandled (any) critical extensions. Indent some of the code examples. Avoid a memory leak in OCSP_parse_url(). Notified by Paul Siegel <psiegel@corestreet.com> Add ECDSA documentation. Submitted by: Nils Larsch "AES is spelled AES Document the AES options for 'openssl smime'. PR: 834 "When adding positive elements Use an OCTET STRING for the encoding of an OCSP nonce value. The old raw format can't be handled by some implementations and updates to RFC2560 will make this mandatory. Fix handling of -offset and -length in asn1parse tool. If -offset exceeds -length of data available exit with an error. Don't read past end of total data available when -offset supplied. If -length exceeds total available truncate it. "Typo in crypto/bn/asm/x86_64.c Add flag to avoid continuous memory allocate when calling EVP_MD_CTX_copy_ex(). Without this HMAC is several times slower than < 0.9.7. HP/UX PA-RISC 2 targets update. "In the development branch #undef _POSIX_C_SOURCE in ui_openssl.c ruined IRIX builds. Comment on why _POSIX_C_SOURCE needed in first place. CFB DES sync-up with FIPS branch. Avoid signed vs. unsigned warnings (which are treated like errors on Windows). "S_IFBLK and S_IFCHR may not exist in some places (like Windows) "Even though C specification explicitly says that constant type ""stretches"" automatically to accomodate the value Fix declaration inconsistency in ecparam.c. Get rid of bogus warning when compiling with Sun vendor compiler. "We're passed p Replace expired certificate. "Adding a slash between the directoryt and the file is a problem with VMS.  The C RTL can handle it well if the ""directory"" is a logical name with no colon Fix Perl problems on sparc64. This is part of a large change submitted by Markus Friedl <markus@openbsd.org> Only use environment variables if uid and gid are the same as euid and egid. This is part of a large change submitted by Markus Friedl <markus@openbsd.org> Correct documentation typos. This is part of a large change submitted by Markus Friedl <markus@openbsd.org> OpenBSD-internal changes. This is part of a large change submitted by Markus Friedl <markus@openbsd.org> Include strings.h so strcasecmp() and strncasecmp() get properly declared. "Use BUF_strlcpy() instead of strcpy(). Use BUF_strlcat() instead of strcat(). Use BIO_snprintf() instead of sprintf(). In some cases Add a newline at the end of the last line. This is part of a large change submitted by Markus Friedl <markus@openbsd.org> Typos. "To figure out if we're going outside the buffer Document that you need to include x509.h (to get [i2d|d2i]_RSA_PUBKEY()). Correct the typo PUKEY... Document that you need to include x509.h (to get [i2d|d2i]_DSA_PUBKEY()). Correct the typo PUKEY... "Add ""dif"" variable to clean up the loop implementations. Submitted by: Nils Larsch" Skip a curve with generator of non-prime order. Submitted by: Nils Larsch Avoid segfault if ret==0. Submitted by: Nils Larsch Restructure make targets to allow parallel make. Submitted by: Witold Filipczyk <witekfl@poczta.gazeta.pl> PR: #513 Incremental cleanups to bn_lib.c. - Add missing bn_check_top() calls and relocate some others - Use BN_is_zero() where appropriate - Remove assert()s that bn_check_top() is already covering - Simplify the code in places (esp. bn_expand2()) - Only keep ambiguous zero handling if BN_STRICT isn't defined - Remove some white-space and make some other aesthetic tweaks "Use the BN_is_odd() macro in place of code that (inconsistently) does much the same thing. Also "BN_FLG_FREE is of extremely dubious usefulness "Declare the static BIGNUM ""BN_value_one()"" more carefully." "Add missing bn_check_top()s to bn_kron.c Add missing bn_check_top()s to bn_gf2m.c and remove some miscellaneous white-space. "The bn_set_max() macro is only ""used"" by the bn_set_[low|high]() macros which "bn_fix_top() exists for compatibility's sake and is mapped to bn_correct_top() or bn_check_top() depending on debug settings. For internal source "Check that OPENSSL_malloc() really returned some memory. PR: 751 Notified by: meder@mcs.anl.gov Reviewed by: Lutz Jaenicke "CRYPTO_malloc() "Add more debugging to my Configure target "If BN_STRICT is defined "Improve a couple of the bignum macros. Note Make BN_DEBUG_RAND less painfully slow by only consuming one byte of pseudo-random data for each bn_pollute(). This improves the placement of check_top() macros in a couple of bn_lib functions. "We're getting a clash with C++ because it has a type called 'list'. Therefore Add IPSec/IKE/Oakley curves. PR: 768 Submitted by: Vadim Fedukovich <vf@unity.net> Get rid of some signed/unsigned comparison warnings. "Make a number of changes to the OS/2 build.  Submitter's comment below. PR: 732 Submitted by: Ilya Zakharevich <nospam-abuse@ilyaz.org> Submitter's comment: This patch: a) Introduces a new file os2/backwardify.pl. b) Introduces a new mk1mf.pl variable $preamble.  As you can see "Move another common functionality (reproduced so far with cut'n'paste) to apps.c Let's use text/plain in the example instead of crapy HTML. PR: 777 Submitted by: Michael Shields <mshields@sunblocksystems.com> Move do_subject() to apps.c and rename it to parse_name().  The rationale behind the move is that it's use by several applications. The rationale behind the name change is that it describes what the function does a bit better. Allow multi-valued rdns in subjects.  This adds the -multivalue-rdn option to 'openssl req' and 'openssl ca'. PR: 779 Submitted by: Michael Bell <michael.bell@cms.hu-berlin.de> Reviewed by: Richard Levitte (there will be some follow-up changes) Change my debugging entries to do fierce BIGNUM debugging. "Due to recent debugging bursts Fix some handling in bn_word. This also resolves the issues observed in ticket 697 (though uses a different solution than the proposed one). This problem was initially raised by Otto Moerbeek. PR: 697 Submitted by: Nils Larsch Reviewed by: Geoff Thorpe Some changes for bn_gf2m.c: better error checking plus some minor optimizations. Submitted by: Nils Larsch "BN_div() cleanup: replace the use of BN_sub and BN_add with bn_sub_words and bn_add_words to avoid using fake bignums to window other bignums that can lead to corruption. This change allows all bignum tests to pass with BN_DEBUG and BN_DEBUG_RAND debugging and valgrind. NB: This should be tested on a few different architectures and configuration targets "Fix a small bug in str_copy: if more than one variable is replaced Give CRLDP its standard name. Max req -x509 use V1 if extensions section absent. ./config failed to correctly detect if gcc uses 64-bit ABI on HP-UX. PR: 772 Make sure to initialize AES counters to obtain proper results. Submitted by: Kirill Kochetkov <kochet@ixbt.com> PR: #748 Catch error condition to prevent NULL pointer dereference. Submitted by: Goetz Babin-Ebell <babin-ebell@trustcenter.de> PR: #766 "Provide ASFLAGS in the subdirectories handling assembler code. Submitted by: Tim Rice <tim@multitalents.net> PR: #735 "The x9.62 tests replace the PRNG with specific numbers "BN_set_bit() etc should use ""unsigned int"". Keep it as is to avoid an API change Less restrictive debugging build. "This rewrites two ""for"" loops in BN_rshift() - equality with zero is generally a more efficient comparison than comparing two integers "General improvements to the ec_asn1.c code. This squashes at least one bug (where it was impossible to create an EC certificate with a compressed public key) Avoid possible memory leaks in error-handling. Submitted by: Nils Larsch Reviewed by: Geoff Thorpe Print out GeneralizedTime and UTCTime in ASN1_STRING_print_ex(). "This extends the debugging macros to use ""pollution"" during bn_correct_top() Add debug-screening of input parameters to some functions I'd missed before. "Put the first stage of my bignum debugging adventures into CVS. This code is itself experimental Avoid some shadowed variable names. Submitted by: Nils Larsch "This is the least unacceptable way I've found for declaring the bignum data and structures as constant without having to cast away const at any point. There is still plenty of other code that makes gcc's ""-Wcast-qual"" unhappy "Engines are usually binary Let exit codes propagate from within for loops. "bn_div() does some pretty nasty things with temporary variables "When a BN_CTX is used for temporary workspace This fixes a couple of cases where an inconsistent BIGNUM could be passed as input to a function. Remove a line that was causing redundant declarations. Obtained from: Stephen Henson <steve@openssl.org> Copy-n-paste bug (don't mix variable declarations and code). This sets the callback structure just before it is needed. "Oops Make md32_common.h friendlier to compiler warnings. Obtained from: Andy Polyakov <appro@openssl.org> "Some provisional bignum debugging has begun to detect inconsistent BIGNUM structures being passed in to or out of API functions "A general spring-cleaning (in autumn) to fix up signed/unsigned warnings. I have tried to convert 'len' type variable declarations to unsigned as a means to address these warnings when appropriate "BN_CTX is opaque and the static initialiser BN_CTX_init() is not used except internally to the allocator BN_CTX_new() "Removing those memcpy()s also took away the possibility for in and out to be the same.  Therefore Remove an unnecessary cast that causes certain compilers (eg. mine) some confusion. Also silence a couple of signed/unsigned warnings. Remove redundant declaration. "Relax some over-zealous constification that gave some lhash-based code no choice but to have to cast away ""const"" qualifiers from their prototypes. This does not remove constification restrictions from hash/compare callbacks Comments out some unimplemented functions instead of redeclaring them. "Avoid ""empty source file"" warnings." "For whatever reason (compiler or header bugs) "When OPENSSL_NO_DEPRECATED is defined "The ""cryptodev"" engine preprocessor logic used undefined symbols in comparisons. It's better not to allow this Add my own debug config target. "crypto/evp/evptests.txt is copied to tests/ rather than symlinked because of windows (see checkin 1.75 of crypto/evp/Makefile.ssl) "Remove duplicate prototypes have already been (correctly) added to rsa.h Correct serious bug in AES-CBC decryption when the message length isn't a multiple of AES_BLOCK_SIZE. Optimize decryption of all complete blocks in AES-CBC by removing an unnecessary memcpy(). The error was notified by James Fernandes <jf210032@exchange.DAYTONOH.NCR.com>. The unnecessary memcpy() was found as an effect of investigating that error. "The object file is o_str.o Add support for digested data PKCS#7 type. Initialize digested data type in PKCS7_set_type(). "Avoid warnings: add missing prototype "In realloc s_client should inform the user of any compression/expansion methods used. Add functionality to get information on compression methods (not quite complete). "Make sure int SSL_COMP_add_compression_method() checks if a certain compression identity is already present among the registered compression methods "Remove unused code Include e_os.h to get a proper definition of memmove on the platforms that do not have it. Correct incorrect mode bits change. Correct buggy PODs (missing commas and a prepended space). ASN1 parse fix and release file changes. "Uhmm Change the indentation from 12 to indent+4. PR: 657 Make MD5 assembler code able to handle messages larger than 2GB on 32-bit systems and above. PR: 664 "Selected changes for MSDOS "Add reference counting around the thread state hash table. Unfortunately Have ssl3_ssl3_send_client_verify() change the state to SSL3_ST_SW_CERT_VRFY_B. PR: 679 Have ssl3_send_certificate_request() change the state to SSL3_ST_SW_CERT_REQ_B. PR: 680 Correct small documentation error. PR: 698 Free the Kerberos context upon freeing the SSL. Contributed by Andrew Mann <amann@tccgi.com> Add necessary changes to be able to build on VxWorks for PPC860. Contributed by Bob Bradley <bob@chaoticsoftware.com> "Fix prime generation loop in crypto/bn/bn_prime.pl by making sure the loop does correctly stop and breaking (""division by zero"") modulus operations are not performed. The (pre-generated) prime table crypto/bn/bn_prime.h was already correct In order to get the expected self signed error when calling X509_verify_cert() in x509.c the cert should not be added to the trusted store. "These should be write-locks New -ignore_err option in ocsp application to stop the server exiting on the first error in a request. "Only accept a client certificate if the server requests one outlen should be int * in out_utf8. "Correct two problems A document that has a very rough description of the X509 functionality.  This is mostly so there's a way to get from the crypto.html page to the function descriptions. Make sure openssl.pc is readable by everyone. PR: 654 "The counter is big-endian.  Since it comes as an array of char "Add -issuer_hash and make -subject_hash the default way to get the subject hash "The convenience argumetn for -nameopt and -certopt is ca_default The 'counter' is really the IV. Change AES-CTR to increment the IV by 1 instead of 2^64. Clarify wording of verify_callback() behaviour. Only remove old files if they exist.  [Maing32]. Notified by Michael Gerdau <mgd@technosis.de> Nils Larsch told me I could remove that variable entirely. Conform with the standard prototype for engine control functions. Scan through the engines directory as well. The definition of dynamic_ctrl() should change along with the declaration :-). Return EOF when an S/MIME part have been read. Make sure the compiler knows we run with pedantic settings. "We set the export flag for 512 *bit* keys Add documentation for the new crlnumber configuration option. dynamic_ctrl() didn't have exactly the same prototype as defined by ENGINE_CTRL_FUNC_PTR. "Slightly better check of attributes.  Now Do not try to use non-existent gmtime_r() on SunOS4. PR: 585 Make sure ssize_t is defined on SunOS4. PR: 585 Make sure DSO-dlfcn works properly on SunOS4. PR: 585 Typo. PR: 593 Add the possibility to have symbols loaded globally with DSO. Avoid warnings saying that the format takes a void*. Add an entry for X509_TRUST_OBJECT_SIGN in trstandard[]. PR: 617 Add documentation for ERR_set_mark() and ERR_pop_to_mark(). Add functionality to set marks on the error stack and to pop all errors to the next mark. Add crypto/store to the directories to look through. "This memset() in the ubsec ENGINE is a bug. Zeroing out the result array should not be necessary in any case Make sure the sigaction structure and fileno function are properly declared with an ANSI compiler on Solaris (and possibly others). Make sure the function definitions match their declaration. Clarify return value of SSL_connect() and SSL_accept() in case of the WANT_READ and WANT_WRITE conditions. "Only count 'LF' as EOL in pk7_mime.c Various S/MIME bug and compatibility fixes. Include openssl/e_os.h so OPENSSL_SYSNAME_ULTRASPARC and other configuration macros get properly defined. PR: 630 Avoid looking outside the key_data array. PR: 627 Allocate certificatePolicies correctly if CPS field is absent. Fix various memory leaks in certificatePolicies. PR: 631 Submitted by: Doug Sauder <dws+001@hunnysoft.com> Fix bug in X509V3_get_d2i() when idx in not NULL. "Brackets are now allowed I don't remember what my thinking was with str_compat.h.  Maybe it'll come back to me... The square brackets in BIO_s_bio.pod for some reason cause wml to bomb out with the error message: ** Slice:Error: Some slices were not closed: ** WML:Break: Error in Pass 9 (rc=1). ** WMK:Error: Error in WML (rc=256) As a workaround delete them for now. Define the two authentication parameter types for passphrase and Kerberos 5 authentications. "DO NOT constify RSA* in RSA_sign() and RSA_verify() Constify RSA_sign() and RSA_verify(). PR: 602 "Define a STORE type.  For documentation "Add BUF_strndup() and BUF_memdup().  Not currently used "Include objects.h to get a correct declaration of OBJ_bsearch_ex() "Correct documentation.  sk_find_ex() doesn't return a pointer Add an extended variant of sk_find() which returns a non-NULL pointer even if an exact match wasn't found. Add an extended variant of OBJ_bsearch() that can be given a few flags. Make it possible to affect the extension of man pages. PR: 578 Memory leak fix: RSA_blinding_on() didn't free Ai under certain circumstances. Memory leak fix: RSA_blinding_on() would leave a dangling pointer in rsa->blinding under certain circumstances. Double definition fix: RSA_FLAG_NO_BLINDING was defined twice. Add the 0.9.6j news. "There's a problem building shared libraries on the sco5-gcc target.  However "Include rand.h A single quote too many. "It seems like OpenUnix's ld uses LD_LIBRARY_PATH to search for libraries.  What's worse "Fix ordering of compare functions: strncmp() must be used first We seem to carry some rests of the 0.9.6 [engine] ENGINE framework in form of unneeded includes of openssl/engine.h. RSA_FLAG_SIGN_VER indicates the special rsa_sign and rsa_verify function pointers should be used.  It doesn't necessarely mean it should go through the ENGINE framework. "What was I smoking?  EVP_PKEY_cmp() should return with 0 if EVP_PKEY_cmp_parameters() returned 0 Do not call ENGINE_setup_bsd_cryptodev() when OPENSSL_NO_ENGINE is defined. PR: 564 "Convert save_serial() to work like save_index() Add documentation on the added functionality in 'openssl ca'. Correct a lot of printing calls.  Remove extra arguments... "Make %p and %# work properly Add GCC attributes when compiled with gcc.  This helps find out if we're using the printing functions correctly or not. I used the corresponding attributes found in the header files of my Linux installation. Counter for GCC attributes. "Add a CA section Reindent for readability. Conditionalise all debug strings. Update from stable branch. No need to test -setalias twice. PR: 556 Don't feil when indent is 0. PR: 559 Add usage string for -fingerprint. PR: 560 Multi valued AVA support. "Add warning about unwanted side effect when calling SSL_CTX_free(): sessions in the external session cache might be removed. Submitted by: ""Nadav Har'El"" <nyh@math.technion.ac.il> PR: 547" Update ocsp usage message and docs. Support for name constraints. Add SCO5 shared library scripts. Upate SVR5 scripts for the upcoming 0.9.7b. Submitted by: Boyd Lynn Gerber <gerberb@zenez.com> "To define OPENSSL_NO_FP_API for all MSDOS type targets was unfair against DJGPP Define COMP method function prototypes properly. Make sure to declare mem*() properly. "Don't put configuration macro definitions on the command line Avoid warning. Add documentation for -starttls (s_client) and -id_prefix (s_server). PR: 542 Some shells (ksh in this case) don't say 'command not found'. PR: 540 Spelling errors. PR: 538 "Make sure that all the library paths are modified in prepend mode hinv may generate more than one line (1 line per CPU). PR: 520 Shut up an ANSI compiler about uninitialised variables. PR: 517 "Add the target linux-ia64-ecc "Fix Certificate and CRL adding in X509_load_cert_crl_file: an X509_INFO structure can contain more than one object Fix for no-ec on Windows. Add entry for domainComponent so it is treated correctly. Add table order test to end of a_strnid.c Add some OIDs. Fix a bone-head bug. This warrants a CHANGES entry because it could affect applications if they were passing a bogus 'flags' parameter yet having things work as they wanted anyway. Return an error if gmtime returns NULL. Fixes for EVP_DigestInit_ex() and OPENSSL_NO_ENGINE. "The default implementation of DSA_METHOD has an interdependence on the dsa_mod_exp() and bn_mod_exp() handlers from dsa_do_verify() and dsa_sign_setup(). When another DSA_METHOD implementation does not define these lower-level handlers "Add instructions for building the MinGW target in Cygwin "Copy rather than symlink the test data. This is needed because Windows doesn't support symlinks. The Cygwin/MinGW build now passes ""make test""." remove some more useless code. The mingw target can now be built under cygwin. more mingw related cleanups. Allow building applications against static libraries with Makefile.shared. "Base64 bio fixes. The base64 bio was seriously broken when reading from a non blocking BIO. It would incorrectly interpret retries as EOF "ECPublicKey_set_octet_string and ECPublicKey_get_octet_string behaviour was not quite consistent with the conventions for d2i and i2d functions as far as handling of the 'out' or 'in' pointer is concerned. This patch changes this behaviour Ooops forgot to recognise V_ASN1_GENERALSTRING. Fix bug in base64 bios during write an non blocking I/O: if the write fails when flushing the buffer return the value to the application so it can retry. Borland C++ Builder 5 complains about unreachable statements. "Remove ""+Olibcalls"" option from HPUX targets. Reportedly this option is deprecated "Session cache implementations shouldn't have to access SSL_SESSION elements directly "Declare prototypes for function pointer types Single pass processing to cleartext S/MIME signing. "We cache a montgomery form for 'n' if the PUBLIC flag is set "David Brumley <dbrumley@stanford.edu> noted and corrected a case in the verification step of CRT private key operations in the RSA code - previously no montgomery form was checked or used for 'n' Add support for IA64. PR: 454 Handle krb5 libraries separately and make sure only libssl.so depends on it. Update linux-mips and linux-mipsel to support threads and shared libraries. I also updated the bn_ops field with values taken from OpenBSD-mips. PR: 498 Pay attention to disabled SSL versions. PR: 500 Change no_rmd160 to no_ripemd for consistency. PR: 500 "Make it possible to disable OCSP "Add full support for -rpath/-R Allow EC_GROUP objects to share precomputation for improved memory efficiency (EC_PRE_COMP objects are now constant once completed). Extend 'extra_data' API to support arbitrarily many slots (although we need only one at the moment). Modify EC internal 'extra_data' API: EC_GROUP_[clear_]free_extra_data now frees only a single slot (the previous functions are available as EC_GROUP_[clear_]free_all_extra_data). Submitted by: Nils Larsch Reviewed by: Bodo Moeller "Adjust DES_cbc_cksum() so the returned value is the same as MIT's mit_des_cbc_cksum().  The difference was first observed Typo. IPv6 display and input support for extensions usingh GeneralName. Old-style callbacks can be NULL! "We can't say in advance what the argument to BIO_socket_ioctl() should be Document -engine where missing. PR: 424 A few small bugs with BIO popping. PR: 364 The util scripts need to handled no-hw. PR: 327 The MASM situation is more difficult than described so far.  It is part of VC++ 7. PR: 327 "For VC++7 and up "The OPENSSL_NO_ENGINE has small problem: it changes certain structures.  That's bad Summarise the last couple of commits. "This glues the GMP wrapper ENGINE into OpenSSL if it is being built (ie. if the OPENSSL_USE_GMP symbol is defined). Also Commit a slightly modified version of an old experiment to do RSA private key operations using the GMP library. The default is not to build (or use) this code unless OPENSSL_USE_GMP is defined (because it will impose header and linker dependencies that might need specifying too). """openssl engine"" will not display ENGINE/DSO load failure errors when testing availability of engines with ""-t"" - the old behaviour of is produced by increasing the feature's verbosity with ""-tt""." "Small typo Fix a memory leak in SSL. PR: 477 "cert_sk isn't always allocated "DVCS (see RFC 3029) was missing among the possible purposes. Notified privately to me by Peter Sylvester <Peter.Sylvester@EdelWeb.fr> "Correct EVP_SealInit() documentation "Provide ""dummy"" &main::picmeup even in Windows perlasm modules." "Check return value of gmtime() and add error codes where it fails in ASN1_TIME_set(). Edit asn1.h so the new error code is the same in 0.9.7 and 0.9.8 "Workaround for lame compiler bug introduced in ""CPU pack"" for MSVC6SP5." Missing 0 broke FreeBSD build. PR: 470 "Suggestion was to change ${MACHINE} to i586 in lines in question. Well "This is an *initial* tune-up. This update puts Itanium2 back on par with Itanium. I mean if overall performance improvement over C version was X for Itanium "-lresolv is not present on SCO Unix "Fix for AIX shared build EVP_DecryptInit() should call EVP_CipherInit() not EVP_CipherInit_ex(). FreeBSD has /dev/crypto as well. PR: 462 Add some debugging output. "ncr-scde target needs -lc89 for strcasecmp() and ftime() (Tim Rice Fix possible NULL dereferencial. Notified by Verdon Walker <VWalker@novell.com> Fix initialization sequence to prevent freeing of unitialized objects. Submitted by: Nils Larsch <nla@trustcenter.de> PR: 459 "As with RSA "Extend the HOWTO on creating certificates "Document hpux-parisc2-cc problems Correct an example that has a few typos. PR: 458 Merge from 0.9.7-stable. Make sure not to declare a clashing read() for DJGPP. PR: 440 "DJGPP doesn't have DLLs Correct a misleading comment. PR: 456 Revert: the names of the cygwin distribution will not be named openssl2-*. Requested by Corinna Vinschen <vinschen@redhat.com> UI_UTIL_read_pw() misinterpreted the values returned from UI functions. PR: 456 Typo. NB: This and other manual pages should be updated for the new BN_GENCB interface. OpenBSD FAQ update. Apparently gas from binutils-2.x makes it impossible to use gcc -fPIC ... on OpenBSD-i386. Alternative solution is provided. "If the user said 'shared' and we haven't included support for shared libraries Double the dollars that are intended for the command line. PR: 423 Add documentation on how to handle the shared libaries. PR: 423 It's recommended to do 'make clean' after having prepared a new build tree. PR: 437 "When preparing a separate build tree Force the removal. PR: 437 "Certain files must be removed before generating them "Avoid unnecessary pollution of object module name table. Cygwin shared build workaround (DJGPP swallows it too). One probably should do same as with ELF calling it COFF Make sure everything that may be freed is allocated or initiated. PR: 446 Typos corrected. PR: 445 Typo. At least OpenBSD implements PIC in the same way ELF does. "gcc wants character constants to be correct.  Before this change NULL tofree when it is freed to avoid double free. Make sure key is not NULL before freeing it. "Third argument to shl_load() is ""long address"" "RSA_METHOD now supports key-generation "GAS can't stand stub Support for ILP32 on HPUX-IA64. Support for Intel compiler. More details will be provided in closing note for RT#17 as snapshot becomes available for download. "UltraSPARC assembler DES implementation tune-up. The code can be compiled for any SPARC CPU (UltraSPARC performance is *not* affected) "Very old submission (from 2000) of UltraSPARC assembler DES implementation. It was not accepted because code is not PIC Adjust the parameter lists in some not commonly used files. PR: 428 Make sure the last character of the ASN.1 time string (the 'Z') is copied. PR: 429 It's rather silly to believe we'd release 0.9.7a in 2002 :-). It's even more silly to pretend we know which year 0.9.8 will be released. "It probably belongs in PROBLEMS "Since we're including Kerberos 5 headers in our exported header files (when OpenSSL is configured to use Kerberos) "Add information about AES cipher suites to ciphers manual page. If no authentication method is mentioned in the cipher suite name (e.g. AES128-SHA) Fix wrong handling of session ID in SSLv2 client code. PR: 377 Correct asm exclusions. "Finally get rid of all the algorithm inclusions that were done from evp.h. Application authors BEWARE!  If you have had the habit to count on evp.h to provide all those lower-level algorithm functions I can't confirm the claim being removed and nobody seems to speak up for it. Add SPKM among the related stanrds. Update our list of implemented and related standards. Update our list of implemented and related standards. Spelling error. This patch was taken from the OpenBSD copy of OpenSSL 0.9.7 beta3 with patches Avoid double definition of config. PR: 420 All VMS-specific problems have been solved. Confirmed by Mark Daniel <Mark.Daniel@wasd.vsm.com.au> "Finally Stop a possible memory leak. (I wonder why s2_connect() handles the initial buffer allocation slightly differently...) PR: 416 Make AES_ENCRYPT and AES_DECRYPT macros instead of static constants. PR: 411 Propagate MAKEDEPPROG to the subdirs under crypto/. "Keep the internal lowercase 'surname' "We stupidly had a separate LIBKRB5 variable for KRB5 library dependencies "Because the contents of openssl.pc may have to change when a configuration has been performed (and possibly changed) "To avoid any future programming glitches "I have no idea what possesed me to compile s_socket.c as POSIXly code. Incidently "If _XOPEN_SOURCE_EXTENDED or _XOPEN_SOURCE are defined "It was pointed out to me that .pc files are normally stored in ${prefix}/lib/pkgconfig "Fix for RT#405 Transfer the Solaris shared library building changes from 0.9.7-stable. Protect loading routines with a lock. PR: 373 Synchronise with Makefiles. "DES PIC-ification. ""Cygwin"" companion. Problem was that preprocessor macro is not expanded if prepended with a $-sign." "Make sure manual pages are properly linked to on systems that have case insensitive file names "Update the make system for installations: - define a HERE variable to indicate where the source tree is (used very little right now) - make more use of copying and making attribute changes to {file}.new Don't define macros in terms of asm() when __STRICT_ANSI is defined. "As you might have noticed I tried to change for . prefix "The ampersand is not required in these constructs "BIO_set_nbio() is enumerated I forgot one item I intend to work on. Skip DH-specific tests when no-dh has been configured. PR: 353 Document the modifications in 0.9.7 that will make the hw_ncipher.c engine work properly even in bad situations. "In CRYPTO_lock() Let's not forget the other places where HEADER_DES_H and HEADER_DES_OLD_H were defined. Let's not forget the other places where HEADER_DES_H and HEADER_DES_OLD_H were defined. "Since HEADER_DES_H has been the protector of des.h since libdes (before SSLeay Update -Olimit setting. Submitted by: Bernhard Simon <simon@zid.tuwien.ac.at> Reviewed by: PR: A memset() too many got converted into a OPENSSL_cleanse(). PR: 393 BN_sqr test failure entry. Fix wrong URI. Submitted by: assar@kth.se Reviewed by: PR: 390 Nils Larsch submitted; - a patch to fix a memory leak in rsa_gen.c - a note about compiler warnings with unions - a note about improving structure element names This applies his patch and implements a solution to the notes. "Since it's defined in draft-ietf-tls-compression-04.txt "Undefine OPENSSL_NO_DEPRECATED inside openssl application code if we are being built with it defined - it is not a symbol to affect how openssl itself builds "This is a first-cut at improving the callback mechanisms used in key-generation and prime-checking functions. Rather than explicitly passing callback functions and caller-defined context data for the callbacks "Since it's defined in draft-ietf-tls-compression-04.txt "Implement a stateful variant if the ZLIB compression method.  The old stateless variant is kept Add a few items I intend to work on for 0.9.8 and on. Some compilers are quite picky about non-void functions that don't return anything. "Apparently Keep NEWS in HEAD up to date. Keep STATUS in HEAD up to date. Merge in relevant changes from the OpenSSL 0.9.6h release. linux64-sparcv9 support finally debugged and tested. Submitted by: Reviewed by: PR: Make sure to implement the cryptodev engine only when /dev/crypto exists. "Make sure using SSL_CERT_FILE actually works "If an application supports static locks Only check for a result buffer if the allocated string is a prompt string. PR: 381 "Do not implement RC4 stuff if RC4 is disabled.  Concequently gethostname() is more a BSD feature than an XOPEN one. PR: 379 Correct a few typos that I introduced after applying DJGPP patches. "In ECPKParameters_print "Don't compute timings here DJGPP patches. PR: 347 Add support for x86_64. PR: 348 Make ASN1_TYPE_get() work for V_ASN1_NULL type. "In asn1_d2i_read_bio Make CRYPTO_cleanse() independent of endianness. "define USE_SOCKETS so sys/param.h gets included (and thusly "I think I got it now.  Apparently "Through some experimentation and thinking EXIT() needs to be in a function that returns int. Redo the VAX assembler version of bn_div_words(). PR: 366 Remove incorrect assert. PR: 360 Make it so all names mentioned in the NAME section of each manpage becomes a symlink to said manpage. PR: 242 Correct some names. "A few more memset()s converted to OPENSSL_cleanse(). I *think* I got them all covered by now "Have all tests use EXIT() to exit rather than exit() "Cleanse memory using the new OPENSSL_cleanse() function. I've covered all the memset()s I felt safe modifying Add OPENSSL_cleanse() to help cleanse memory and avoid certain compiler and linker optimizations. PR: 343 Small bugfixes to the KSSL implementation. PR: 349 Disable this module if OPENSSL_NO_SOCK is defined. "Make ec_GFp_simple_point_get_affine_coordinates() faster for Montgomery representations. Submitted by: Sheueling Chang "Fix bug introduced by the attempt to fix client side external session caching (#288): now internal caching failed (#351): Make sure allocate bio_err before memory debugging is enabled to avoid memory leaks (we can't release it before the CRYPTO_mem_leaks() call!) Submitted by: Nils Larsch It works on my laptop :-). Add news items for 0.9.6h and expand on the 0.9.7 news as well. "Add the ASN.1 structures and functions for CertificatePair Determine HZ exactly as in apps/speed.c. Make sure sysconf exists (it doesn't in the VMS C RTL lesser than version 7). allocate bio_err before memory debugging is enabled to avoid memory leaks (we can't release it before the CRYPTO_mem_leaks() call!) Submitted by: Nils Larsch "A variable of type time_t is supposed to be a time measurement starting at Epoch.  offset isn't such a measurement "Better workaround to the ""=head1 NAME OPTIONS"" pod2latex problem: NAME OPTIONS are a subset of OPTIONS "Adding openssl.pc to the repository was a mistake Add the file openssl.pc that I forgot a while ago. We don't want TARGETCPU expanded here. Mention ActiveState Perl much earlier in INSTALL.WCE. Add the INHIBIT_SYMLINKS flag variable to help Cygwin. Add missing semicolons. Add a comment explaining a bunch of targets without any action lines. "-Wid-clash-n isn't support in gcc 3 Spell prototypes correctly :-). We need to read one more byte of the REQUEST-CERTIFICATE message. PR: 300 Add SETWRAP modifier to ASN1 generate. Use =back to finish =over (found using pod2latex). Submitted by: Reviewed by: PR: No such reference to link to (found running pod2latex). Submitted by: Reviewed by: PR: Fix documentation of i2d_X509_fp and i2d_X509_bio. Add Tandem OSS target. PR: 192 Remove warnings. DCL logic bugs fixed. (I really need to review my knowledge of the language) It seems like gcc 2.9aix5.1 doesn't do will with optimization level 3. PR: 115 Add a FAQ on how to check the authenticity of the openSSL distribution. PR: 292 "Fix to build better with DJGPP. PR: 338 Here's the description Correct reference to section name. Submitted by: Reviewed by: PR: "The directory 'rijndael' doesn't exist any more "When AES is skipped because the option 'no-rijndael' was given Constification needed. PR: 241 Merge from 0.9.7-stable. Correct support for SunOS 4.1.3_U1. PR: 227 Security fixes brought forward from 0.9.7. "When build as dynamic engines Name the flag files correctly. "Fix warnings Fix memory leak in s2i_ASN_INTEGER and return an error if any invalid characters are present. Initial ASN1 generation documentation. Initial ASN1 generation code. This can construct arbitrary encodings from strings and config files. Documentation to follow... Make the CBC mode od AES accept lengths that aren't multiples of 16. PR: 330 "Variables on the stack must be initialized or we can't depend on any initial value.  For errline/errorline Typo. Submitted by: assar <assar@kth.se> Reviewed by: PR: Make sure permissions are friendly when building release tar file. Submitted by: Reviewed by: PR: 171 X509_NAME_cmp() now compares PrintableString and emailAddress with a value of type ia5String correctly. PR: 244 -CAserial does take a filename argument. PR: 332 -CAcreateserial doesn't take a filename argument. PR: 332 Windows doesn't know sys/file.h "Keep on using ${CC} Generate openssl.pc so pkg-config can return proper data. PR: 163 Stupid bug fixes.  I've forgotten my DCL... CRL reason code docs. Check for NULL ASN1_ITEM when initializeing boolean option in ASN1_TYPE. Off-by-one-error corrected. PR: 235 "Since we're currently assuming VMS can deal with dynamic engines "Remove all referenses to RSAref "Add all that is needed to build external engines on VMS. Currently Add a HISTORY section to the man page to mention the new flags. The recent CHANGES note between 0.9.6g and 0.9.6h needs copying into the other branches. The last character of inconsistency in my recent commits is hereby squashed. Sun has agreed to removing the covenant language from most files. Submitted by: Sheueling Chang <Sheueling.Chang@Sun.COM> "The #else part of the conditionals have two statements "Revert "A small detail: since 0.9.7 "Correct and enhance the behaviour of ""internal"" session caching as it relates to SSL_CTX flags and the use of ""external"" session caching. The existing flag "For the mkdef.pl to recognise if the ""external"" engines are inserted into libcrypto "There's a name clash between OpenSSL and RSAref.  Since this engine handles RSAref data "On certain platforms Signal an error if the entered output password didn't match itself. PR: 314 Typo: v3 is represented by 2. "In my extreme debug mode "If dynamically-loadable ENGINEs are linked against a shared-library version of libcrypto Another ENGINE implementation dependant on string.h. "We need to propogate SHARED_LIBS to sub-directories for ""install"" targets now." "The loop variable is 'l' "Eh The ENGINE implementations in ./engines/ should be role models on how to write external engines (and thus should require only installed openssl headers and libs to compile without warnings). So this gets rid of recently introduced compilation warnings (no longer including internal headers) by including string.h directly. Makefile.shared needs to know how it can reach itself. "When BN_add_word() reaches top makedepend complains when a header file is included more than once in the same source file. Complete the VxWorks fix by implementing a NULL RAND_poll() for it. PR: 253 libs is a timestamp that we don't really need to know about. Add needed libraries as per configuration to the list of libraries we depend upon. "Add missing quotes. Make sure test doesn't barf because of missing spaces before the closing ]. Add -lc to the list of libraries we depend upon.  Not always necessary Clarify where the engines are by default. Chase down the missing backslashes. "The AES CTR API was buggy "For the platforms where version info is inserted separately into the shared library "Step 12 of move of engines: Time to make the changes to support automatic load of dynamic engines.  Make the changes in the main Makefile so the engines are built Step 11c of move of engines: Time to make the changes to support automatic load of dynamic engines.  Change the iterator to try to load the requested engine dynamically.  The environment variable OPENSSL_ENGINES can be used to override the internal default directory where one can expect to find dynamically loadable engines. Note: The changes in step 11 have all been made by Geoff Thorpe. Credit where credit is due. Step 11b of move of engines: Time to make the changes to support automatic load of dynamic engines.  Add functionality to the dynamic engine to handle engine directories and loading from those.  This is currently NOT compatible with the use of LD_LIBRARY_PATH and similar environment variables. Note: The changes in step 11 have all been made by Geoff Thorpe. Credit where credit is due. "Step 11a of move of engines: Time to make the changes to support automatic load of dynamic engines.  Unless we don't have shared library support "Step 10 of move of engines: Change crypto/engine/Makefile.ssl so we don't build any ""built-in"" engines in that directory any more Step 9 of move of engines: rename crypto/engine/hw_cryptodev.c to eng_cryptodev.c.  This is an engine that (at least currently) has to be built in. "We didn't copy the cryptodev engine here Step 7 of move of engines: Engines should not depend on private OpenSSL header files. Step 6 of move of engines: rename the macro ENGINE_DYNAMIC_SUPPORT to OPENSSL_NO_DYNAMIC_ENGINE and make sure that gets defined unless shared library support has been specifically requested. Step 3 of move of engines: copy the corresponding vendor header files. Step 2 of move of engines: copy engines to new directory and rename them to be prefixed with e_ instead of hw_.  They aren't necessarely hardware engines.  The files commited here are exact copies of the corresponding hw_ files found in crypto/engine/. Add a configuration target for A/UX. PR: 271 There may be more than one single quote to fix. PR: 256 Make sure $fname will not give us any surprises with any funny characters. PR: 256 Fix inconsistencies in the Darwin targets. Add a variant of SHLIB_SOVER without the preceding period. "Move the shared library construction stuff to Makefile.shared "Rhapsody had ftime "VMS below version 7 doesn't have strcasecmp RFC 2712 redefines the codes for use of Kerberos 5 in SSL/TLS. PR: 189 Make sure that the 'config' variable is correctly defined and declared for monolithic as well as non-monolithic biuld. More work is probably needed in this area. PR: 144 Keep the sub_all symbol so all the algorithm Makefiles won't break. "Change the main Makefile to have ""mini-build"" targets. PR: 253 "Add a few more VxWorks targets. Correct misspelled VXWORKS macros. Add VXWORKS identifying macros to e_os2.h. Add required inclusions and mappings for VxWorks in e_os.h. A few small modifications to make OpenSSL build and work on VxWorks. PR: 253 "Use double dashes so makedepend doesn't misunderstand the flags we give it. For 0.9.7 and up More man pages. PKCS7_verify() docs. More d2i/i2d manual pages. Update DH parameter docs. Various Win32 fixes. Resolve signed/unsigned conflicts Make dso_win32.c compile. Please do not use C++ comments in C code. Do not define crypt().  The supported function is DES_crypt() (an des_crypt() when backward compatibility is desired). Some docs relating to X509 ASN1 functions. Many other ASN1 functions are identical other than the actual structure being handled. Typo. Add version info to Win32 DLLs. We might want to edit the strings a bit... Maybe add to 0.9.7 too? Add declaration got PKCS#7 NDEF. "Installed libraries should not be overwritten Add random number generation capability to the cswift engine. Should this be added to 0.9.6-stable as well? PR: 275 "If we're loading libz dynamically Document should match reality :-). PR: 255 Add a small note saying the 'debug' option should come before the platform in the arguments to mk1mf.pl. PR: 298 "Various enhancements to PKCS#12 code Preliminary streaming ASN1 encode support. "The OpenBSD project has replaced the first implementation of the /dev/crypto engine with something they claim is better.  I have nothing to compare to "Add missing brackets. Submitted by: ""Chris Brook"" <cbrook@v-one.com>" Make sure that the signal storage is regarded as volatile. This correction was originally introduced in OpenBSD's tracking of OpenSSL. "Remove *all* references to RSA_PKCS1_RSAref "Remove reference to RSA_PKCS1_RSAref Let 'openssl req' fail if an argument to '-newkey' is not recognized instead of using RSA as a default. Fix a bug to allow the 4758 ENGINE to build as a DSO. "Reinstate the check for invalid length BIT STRINGS #if out unused function to shut the compiler up. "So Reorder cleanup sequence in SSL_CTX_free() to leave ex_data for remove_cb(). Submitted by: Reviewed by: PR: 212 "isalist was less trustable than I thought (or rather Add -lz to the ld flags when the user has chosen to link in zlib *statically*. Notified by Doug Kaufman <dkaufman@rahul.net> Fix block_size field for CFB and OFB modes: it should be 1. Missing =back. Part of PR 196 Add a FAQ entry for yet another bc failure. PR: 199 "Yet a couple of modules forgotten.  These weren't important for OpenSSL itself "Simplify handling of named curves: get rid of EC_GROUP_new_by_name() "Sometimes "Instead of returning errors when certain flags are unusable The applications 'ecdsa' and 'ecparam' were missing from the VMS build. "Fix typo in OBJ_txt2obj which incorrectly passed the content length Merge in demo engines from 0.9.7-stable. Comma forgotten. "Oh "Do not include openssl/ripemd.h when the RIPEMD algorithm has been deselected. PR: 216 "Do not use the word 'modulus' Scripts for testing ECC ciphersuites. Submitted by: Sun Microsystems Labs A few files in the ENGINE and EVP sections forgotten. Update with the status for 0.9.6g. "In case of shared libraries One more file to compile on VMS as well. More long symbols to shorten. More long names to shorten. "When we want to give a -f argument to $(MAKE) Add ECDH support. Additional changes: - use EC_GROUP_get_degree() in apps/req.c - add ECDSA and ECDH to apps/speed.c - adds support for EC curves over binary fields to ECDSA - new function EC_KEY_up_ref() in crypto/ec/ec_key.c - reorganize crypto/ecdsa/ecdsatest.c - add engine support for ECDH - fix a few bugs in ECDSA engine support Submitted by: Douglas Stebila <douglas.stebila@sun.com> "Parse version numbers prefixed with text (egcs does that These are updates/fixes to DH/DSA/RAND docs based on the fixes to the RSA docs. There were a couple of other places (including RSA) where the docs were not quite synchronised with the API that are now fixed. One or two still remain to be fixed though ... "Various parts of the RSA documentation were inaccurate and out of date and this fixes those that I'm currently aware of. In particular A single monolithic man page for the ENGINE stuff. This is a rough first-cut but provides better documentation than having nothing on the ENGINE API. "Fix ""make install_docs"" (and thus ""make install"")." Fix the ASN1 sanity check: correct header length calculation and check overflow against LONG_MAX. Let BN_rand_range() abort with an error after 100 iterations without success. "Rename implementations of method functions so that they match the new method names where _GF... suffixes have been removed. Revert changes to ..._{get/set}_Jprojective_coordinates_...: The current implementation for ECC over binary fields does not use projective coordinates "Binary field arithmetic contributed by Sun Microsystems. The 'OPENSSL_NO_SUN_DIV' default is still subject to change Add more WAP/WTLS elliptic curve OIDs. Submitted by: Douglas Stebila <douglas.stebila@sun.com> "Don't try testing with parallell make "Avoid yet another name clash with libdes "Make it possible to load keys from stdin Linux on s390 really knows about loading dynamically. PR: 183 Cut'n'paste error with other reposnder certificates cleared. PR: 190 "If CRYPTO_realloc() is called with a NULL pointer "If the email address is moved from the subject to the subject alternate name Make sure to use $(MAKE) everywhere instead of make. Part of PR 181 "The version of the shared library should "OpenSSL Security Advisory [30 July 2002] Changes marked ""(CHATS)"" were sponsored by the Defense Advanced Research Projects Agency (DARPA) and Air Force Research Laboratory "Use SEC1 format for EC private keys. This is not ECDSA specific "Move zeroing from bn_expand_internal() to bn_expand2() so that it happens reliably Don't clobber loop variable. PR: 159 Make dummy tests to make it easier to physically remove unwanted algorithms. This should complete PR 75 "If DH is disabled New cipher selection options COMPLEMENTOFALL and COMPLEMENTOFDEFAULT. Submitted by: Reviewed by: PR: 127 HP-UX shared libraries must be +x and should be -w. It doesn't hurt on other platforms. Submitted by: Reviewed by: PR: 134 "The first compile of the new merger method for VMS *almost* got through.  That's not enough Two more names that are a little too long for the standard VMS linker. The behaviour is undefined when calling SSL_write() with num=0. Submitted by: Reviewed by: PR: 141 Manual page for SSL_do_handshake(). Submitted by: Martin Sjgren <martin@strakt.com> PR: 137 "This documentation change was being written at the same time as Richard's changes. So I'm committing this version to overwrite his changes for now Explain why RSA_check_key() doesn't work with hard keys. PR: 86 Add history for documented new functions. PR: 59 Allow subjects with more than 255 characters to be properly printed. PR: 147 "Further enhance assembler support on Cygwin and DJGPP. Make pod2mantest useable on DOS-based systems. Part of PR 75 "Fix bug introduced with revision 1.95 when this filed was modified to use the new X509_CRL_set_issuer_name() function: The CRL issuer should be X509_get_subject_name(x509) "Reverse the change with the following log "Unixware doesn't have strings.h OPENSSL_SYS_WIN32 is important so util/mkdef.pl can detect it Add support for shared libraries with OS/2. PR: 124 "If OpenSSL is built with shared library support on MacOS X We had some experimental options in the Darwin entries.  They are no longer needed "Actually "There are problems on certain platforms "For those wanting to build for several platforms with the same source directory "For those wanting to build for several platforms with the same source directory "Using -Wtraditional took it a little far.  After all "Set up the engine before doing anything random-related "There's an ongoing project to bring some kind of path selection mechanism to the ENGINE framework.  This means there there are going to be new functionality for the DSO part "Replace 'ecdsaparam' commandline utility by 'ecparam' (the same keys can be used for ECC schemes other than ECDSA) and add some new options. Similarly "In UI_UTIL_read_pw() Discussion about Redhat's specialties for the FAQ. Submitted by: John.Airey@rnib.org.uk Reviewed by: PR: 128 Sun's official statement with respect to /dev/random support. Submitted by: Garrett Anderson garrett@dirsec.com Reviewed by: PR: 120 "Reorder inclusion of header files: des_old.h redefines crypt: #define crypt(b Ciphers with NULL encryption were not properly handled because they were not covered by the strength bit mask. Submitted by: Reviewed by: PR: 130 "emtpy fragments are not necessary for SSL_eNULL (but noone uses it anyway) fix t1_enc.c: use OPENSSL_NO_RC4 "oops Correct an error in the README.ENGINE file. Submitted by: Jan Tschirschwitz <Jan.Tschirschwitz@cluster-labs.de> README and INSTALL should contain information about the request tracker (noted by Jonathan Louie <jlouie@recourse.com>). "opensslconf.h doesn't define what we want Try to avoid double declaration of ERR_load_PEM_strings(). PR 71 A few changes to BC-32.pl didn't get properly applied. This completes PR 123 "Pass CFLAG to dependency makers DJGPP has some needed header files that other MSDOS/Windows compilers don't have. Part of PR 75 Update the information on Cygwin. Part of PR 75 Forgot to change the second $ENV{DJDIR} to /dev/env/DJDIR. Part of PR 75 Document the new way of building with Borland Builder. This concludes the changes from PR 123 "When compiling for Windows "Use 32-bit sections instead of the default have 'openssl pkcs7' exit with code 1 on error instead of 0. PR: 119 gcc requires -m64 to link 64-bit shared libraries on Solaris. PR: 117 "Use bg instead of bag as argument to macros "There is no RSAREF any more The general debug target must specify that it doesn't use assembler routines. PR: 105 "A number of includes were removed from evp.h some time ago.  The reason was that they weren't really needed any more for EVP itself.  However Make sure any ENGINE control commands make local copies of string pointers passed to them whenever necessary. Otherwise it is possible the caller may have overwritten (or deallocated) the original string data when a later ENGINE operation tries to use the stored values. Submitted by: Gtz Babin-Ebell <babinebell@trustcenter.de> Reviewed by: Geoff Thorpe PR: 98 "<sys/select.h> is included for AIX Fix path to find util/pod2man.pl from the execution directory. Make sure to use the predefined PERL. Submitted by: Bernhard Simon <bs@bsws.zid.tuwien.ac.at> Reviewed by: PR: This apparently fixes compilation on OSX that was failing in 0.9.7 betas. Submitted by: Pieter Bowman <bowman@math.utah.edu> AIX (V3) requires <sys/select.h> (included via e_os.h) for fd_set. Submitted by: Bernhard Simon <bs@bsws.zid.tuwien.ac.at> Reviewed by: PR: load_netscape_key is static. "Use -dumpversion to obtain gcc's version. Submitted by: ross.alexander@uk.neceur.com "OpenSSL_add_all_algorithms has been replaced by configuration dependent functions and is redirected by macros. Switch it off now Some more prototype fixes. Use DECLARE macros in asn1* instead of direct declaration. Submitted by: Goetz Babin-Ebell <babinebell@trustcenter.de> Reviewed by: PR: 89 New option SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS for disabling CBC vulnerability workaround (included in SSL_OP_ALL). PR: #90 "Tentatively add support for UWIN Make sure that any dash in the prefix before the version number is removed. PR: 96 Add support for DJGPP. "Check for the executable $openssl Parse directory using both slashes and backslashes as separators. Do file copying in term of perl statements instead of using cp. Part of PR: 75 "Making a softlink from crypto/des/asm/perlasm to crypto/perlasm isn't strictly necessary Add missing prototypes. Submitted by: Goetz Babin-Ebell <babinebell@trustcenter.de> PR: 89 Fix ext_dat.h extension ordering. Reinstate -reqout code. Avoid coredump in ocsp if setup_verify fails. Fix typo in ocsp usage message. Clarify formulation (proposed by Bodo Moeller). Make change uniqueIdentifier -> x500UniqueIdentifier clearly visible. Submitted by: Reviewed by: PR: 82 Correct wrong usage information. PR: 95 "Support building the distribution .tar file on platforms with limited argument list length. This requires Gnu-tar. As we use the non-standard ""tardy"" software anyway "move ECC ASN1 that is not specific to ECDSA into crypto/ec/ "Make sure that flags are passed to ""make"" subprocesses." "Make sure that settings are passed back and forth when walking around in the tree during build. Reinstall default PERL settings in Makefiles Merge from 0.9.7-stable. "Make perl replacement for dirname It's not good to have a pointer point at something in an inner block. PR: 66 "Check errors when parsing a PKCS8INF PEM FILE Documentation bug corrected. PR: 70 There is no continuation at this point. "On some systems the default ""perl"" may still be perl4 Typo. PR: 72 use sstrsep() to get the proper type to aoti(). Remove unneeded cast in ustrsep(). PR: 69 0.9.7-beta1 is just being released. Add the AES test vectors from NIST document SP800-38A. "Declare the CFB and OFB modes for AES "In CFB mode Support shared libraries properly on linux-sparcv[89]. PR: 60 a B< that wasn't properly ended. CAformat should not be used for CA key format. Make sure that MS_STATIC isn't defined to 'static' under Win32. PR: 51 pod2man.pl would only remove the first LF from the name. "Apparently "Correct AES counter mode Correct darwin shared library support. PR: 39 "Our copy of pod2man.pl is old and comparatively broken Add more warnings for my debug targets. Remove the duplicate description of -out. PR: 28 Make i2c_ASN1_BIT_STRING return the correct length. "Set DLOPEN_FLAG the same way on NetBSD as on OpenBSD. PR: 58 Remove item listed twice <kromJx@crosswinds.net>. Use assembler implementations with Cygwin. This also fixes the bn_sub_part_word problem. Make sure short aliases are used where required. Define a short alias for another long EC symbol. Make sure ECDSA is built and tested on VMS. Avoid loops if linking an application fails. "Reorganise -subj option code Fix Mingw32 asm build: use the Unix bignum assembly method of bn-586.pl and co-586.pl which (for some reason) VC++ doesn't use. Add missing EVP_CIPHER_CTX_init call. "Use the indirect way to the actual request tracker Zero cipher_data in EVP_CIPHER_CTX_cleanup Add cleanup calls to evp_test.c Allow reuse of cipher contexts by removing automatic cleanup in EVP_*Final(). Recognize PPC64 target. Submitted by: Reviewed by: PR: 26 EVP_SealFinal should return a value. Add config entry debug-steve-linux-pseudo64.  This sets the SIXTY_FOUR bignum library option to use 64 bit operations on the 32 bit linux platform. This is very inefficient but it can be used to test some of the 64 bit logic on a 32 bit platform. Fallback to normal multiply if n2 == 8 and dna or dnb is not zero in bn_mul_recursive. This is (hopefully) what was triggering bignum errors on 64 bit platforms and causing the BN_mod_mul test to fail. Avoid gcc warning: BN_DEC_CONV when SIXTY_FOUR_BIT is defined is unsigned. "Make the huge buffer smaller Move an assert() to avoid core dumps when a static buffer hasn't been given. Notified by Verdon Walker <VWalker@novell.com> "Change internals of the EC library so that the functions EC_GROUP_{set_generator Fix ciphersuite list to enforce low priority for RC4. "Make sure that date is run under the C locale "Fix escaping when using the -subj option of ""openssl req"" Add information about -nameopt option for x509. Synchronise with 0.9.7-stable. Fix crypto/asn1/a_sign.c so that 'parameters' is omitted (not encoded as NULL) with id-dsa-with-sha1. Submitted by: Nils Larsch Add generationQualifier OID (proposed by Fiel Cabral). Potential memory leak removed.  Notified by <threaded@totalise.co.uk> ERR_file_name is no longer being used. Add cygwin build script (Corinna Vinschen <vinschen@redhat.com>). Signedness mismatch. Notified by Bernd Matthes <bernd.matthes@gemplus.com> The callback must have (void) as argument list. Notified by Bernd Matthes <bernd.matthes@gemplus.com> No point constifying an int. Notified by Bernd Matthes <bernd.matthes@gemplus.com> Do not free p if it hasn't been used yet. Notified by Bernd Matthes <bernd.matthes@gemplus.com> Make sure the opened directory is closed on exit. Notified by Lorinczy Zsigmond <lzsiga@mail.ahiv.hu> "Missing ""Configure"" entry (Jean-Marc Desperrier <jean-marc.desperrier@certplus.com>)." "Optimize: better shortcut evaluation (""Howard Chu"" <hyc@highlandsun.com>)." Handle headings uniformly to allow automatic processing. Document OID changes. "Use the ""mail"" short name according to RFC2798 (Michael Bell <michael.bell@rz.hu-berlin.de>)." Fix CRLF problem in BASE64 decode. Implement known-IV countermeasure. Fix length checks in ssl3_get_client_hello(). Use s->s3->in_read_app_data differently to fix ssl3_read_internal(). another error discovered by Karsten Braaten. The number was not even prime! Check error code from a2d_ASN1_OBJECT(). Change the date to XX xxx XXXX in development versions. Keep my own specially optimized HP-UX shared library building up to date. Apply OID fixes for elliptic curves as supplied by Nils Larsch <nlarsch@compuserve.de>. Use recv() and send() for socket communication on VMS instead of read() and write().  The reason is that read() and write() make additional record level locking which causes hangs of Compaq Secure Web Server (Apache) with SSL. Submitted by Compaq. Fix buggy object definitions (Svenning Sorensen <sss@sss.dnsalias.net>). Cast the pointers to the BIGNUM data to unsigned long *.  This would be harmful if we didn't also pass the exact number of bytes of that data "Fix of mixup bwtween SOMAXCONN and SO_MAXCONN. Furthermore "Add the possibility to enable olde des support Add the mapping of des_random_seed() for 0.9.6 compatibility. Make sure DES_cblock is defined at all times (meaning one shouldn't include openssl/des_old.h directly any more). Fix typo (Craig Davison <cd@securityfocus.com>). Merge in DES changed from 0.9.7-stable. Merge in DES changed from 0.9.7-stable. Fix buggy if-condition (thomas poindessous <poinde_t@epita.fr>). Remove superflous (and buggy) statement <justin.fletcher@ntlworld.com>. New function EC_GROUP_check_discriminant(). Restructure implementation of EC_GROUP_check(). Submitted by: Nils Larsch Map new X509 verification errors to alert codes (Tom Wu <tom@arcot.com>). Ensure EVP_CipherInit() uses the correct encode/decode parameter if enc == -1 [Reported by Markus Friedl <markus@openbsd.org>] Fix typo in dh_lib.c (use of DSAerr instead of DHerr). Add missing strength entries. "Initialize cipher context in KRB5 (""D. Russell"" <russelld@aol.net>) Allow HMAC functions to use an alternative ENGINE." "Undo previous patch: avoid warnings by #undef'ing duplicate definitions. Suggested by ""Kenneth R. Robinette"" <support@securenetterm.com>" Fix Kerberos warnings with VC++. Fix various warnings when compiling with KRB5 code. Make ciphers and digests obtain an ENGINE functional reference if impl is explicitly supplied. "Make {RSA Fix the Win32_rename() function so it correctly returns an error code. Use the same code in Win9X and NT. Fix some ca.c options so they work under Win32: unlink/rename wont work under Win32 unless the file is closed. "Synchronise the AEP engine in all branches.  For 0.9.6-stable [engine] "When closing Change des_old.c to use types prefixed with _ossl_old_des_. Add more curves. Submitted by: Nils Larsch Remove unnecessary 'const'. OpenSSL currently fails on certain pure 64-bit architectures.  This is a showstopper "Rephrase statement on the security of two-key 3DES. [Chosen plaintext attack: R. Merkle Provide a pre 0.9.7 compatibility mapping if OPENSSL_DES_PRE_0_9_7_COMPATIBILITY is defined.  NOT AT ALL TESTED YET! Add a comment as to the libdes compatibility. Rename des_SPtrans to DES_SPtrans to differentiate from libdes and avoid certain linkage clashes. This change was only made in 0.9.7-stable.  Synchronise "Remove the perl/ subdirectory.  It hasn't been worked on for ages "VMS addaptation Add 'void *' argument to app_verify_callback. Submitted by: D. K. Smetters <smetters@parc.xerox.com> Reviewed by: Bodo Moeller "This adds a new ENGINE to support IBM 4758 cards SSL_clear != SSL_free/SSL_new Make sure to remove bad sessions in SSL_clear() (found by Yoram Zahavi). "make update Make the engine config module always add dynamic ENGINEs to the list using dynamic_path. This stops ENGINEs which don't supply any default algorithms being automatically freed (because they have no references) and allows them to be accessed by id. Alternative dynamic loading behaviour can be achieved by issuing the dynamic ENGINE ctrls separately in the config file. New OPENSSL_LOAD_CONF define to load openssl.cnf when OpenSSL_add_all_algorithms() is called. non-Monolith fixes. Submitted by Andrew W. Gray <agray@iconsinc.com> Update from stable branch. "Config code updates. CONF_modules_unload() now calls CONF_modules_finish() automatically. Default use of section openssl_conf moved to CONF_modules_load() Load config file in several openssl utilities. Most utilities now load modules from the config file Add AES support in the applications that support -des and -des3. Add comfy aliases for AES in CBC mode. "Including openssl/e_os.h in the OpenSSL 0.9.6 branch is legal "gcc figures that the format specifier %2x means unsigned int "Instead of casting a lvalue "Comparing a pointer (data) with 0 using > is incorrect.  The changed comparison doesn't look right A rough little self-test for tunala. This runs through all cipher-suite / SSL/TLS version combinations looking for mishaps. - Add support for cipher suites that require a temporary RSA key for key-agreement. - Tolerate signal interruptions of select(). "Oh "Since Cygwin is the proper spelling "The AES modes OFB and CFB are defined with 128 feedback bits.  This deviates from the ""standard"" 64 bits of feedback that all other algorithms are using.  Therefore "Add the modes OFB128 "The macro IMPLEMENT_ASN1_FUNCTIONS_const already contains an ending ; "Local `time' shadows the global function `time()'.  Rename the local variable to `tim' (and gcc chokes on C++ comments in C code. Even though it is not really practical people should know about it. Add the configuration target VxWorks. "For some reason Fix warnings. "Update the configuration of CygWin32 to use the new capabilities of CygWin 1.3.x Move teh silencer to the right place. Add notes on the added support for aep and sureware crypto cards in 0.9.7. I forgot to include the aep and sureware vendor header files. "Because AEP and we used the same AEP_R_ prefix for error reasons Add aep and sureware implementations and clean up some error reasons that were never part of the engine framework. The aep and sureware implementations are taken directly from 0.9.6c [engine] and have been modified to fit the newer engine framework and to be possible to build shared libraries of. The aep implementation has gone through quite a bunch of tests and is cleaned up (there were some misunderstandings in it about how to use locks). The sureware hasn't been tested at all in this incarnation and is basically a quick hack to get it to compile properly. "Certain reasons aren't really part of the engine framework Generate the individual engines' error strings and macros automatically. "With the changed des_old API Apply one patch from Assar Westerlund <assar@sics.se>: The following patch makes sure that string2key does not use weak DES keys (then making them non-weak by xor:ing with 0xF0). "Apply three patches from Assar Westerlund <assar@kth.se>: This patch makes the macros in des_old.h actually pretend to be functions. There's no reason not to define _ossl_old_crypt when using PERL5/FreeBSD/darwin/Next #undef some things that cause a conflict under Win32 when wincrypt.h is included. Shut up compiler warnings for inconsistent declarations. "HP-UX 32bit: * When linking against shared libraries Apply patch from Toomas Kiisk <vix@cyber.ee> and complete it. Superflous '\' messes up with HP-UX make. "Undo previous change Spelling correction. "Correct the number of colons for the targets aix43-cc Detect one-step shifts of the dso_scheme. "I got some reports that some targets have weird dso_schemes. Therefore Update SCO5 targets. Apply a small patch from Dan Lanz <lanz@zolera.com> to get shared libraries with debug-linux-elf. Apply a small patch from Oscar Jacobsson <oscar@jacobsson.org> that makes things more compilable with VC++. It looks like I didn't remove everything that has to do with the non-existant aestest.c. "Apply a small patch from Diego R. Lopez <diego.lopez@rediris.es> Add old patch from Robert Dahlem <Robert.Dahlem@ffm2.siemens.de> to make it possible to produce shared libraries on ReliantUNIX. "Apply the following changes by Toomas Kiisk <vix@cyber.ee>: * make openssl rsa work with -engine chil * misc changes Document the change in rsautl. There is no aestest currently.  The EVP tester is used to check the AES algorithm. "The 'type' parameter Keep the NIST AES vectors that were there previously. New functions ERR_peek_last_error ERR_peek_last_error_line ERR_peek_last_error_line_data (supersedes ERR_peek_top_error). Rename OPENSSL_NO_OLD_DES_SUPPORT into OPENSSL_DISABLE_OLD_DES_SUPPORT because OPENSSL_NO_... indicates disabled algorithms (according to mkdef.pl). "Reword CHANGES entry for _old_des_... make update libeay.num got tweaked so the old des symbols would retain their positions. "Because of recent changes "To avoid all kinds of link-level clashes "To avoid all kinds of link-level clashes Support old DES APIs by default. Typos (jsyn <jsyn@openbsd.org>). Fix incorrect BIO_*_ctrl() macros (Shay Harding <sharding@ccbill.com>). "Use FIPS-197 vectors for AES.  The NIST vectors were constructed by reencrypting or redecrypting the ciphertext 10000 times "Add more of the NIST test vectors for AES. For some reason "Initial ENGINE config module "Constification Other errors are possible. "Stupid apps should die "Constification "Produce less confusing statistics when ""-out_totals"" is used." "The sample certs had expired "Bugfix: In ssl3_accept Return -1 from ssl3_get_server_done (ssl3/s3_clnt.c) if the SSL_R_LENGTH_MISMATCH error is detected. Prototype info function. "- Network errors could pollute the buffers because -1 isn't noticed in an ""unsigned int"". - Remove redundant processing with machine->ssl is NULL. - Remove compiler warnings about uninitialised 'ctx' (it's not used uninitialised Patches to make OpenSSL compilable on MacOS/X. Submitted by Pier Fumagalli <pier@betaversion.org> "- libtool finally annoyed me too much "- Add the same header stuff to aes_locl.h as is in des_locl.h to avoid undefined functions (memset "Tsss Changes that break something should be included in CHANGES to make it easier to fix things. Constify. "Because Rijndael is more known as AES "When RSA or DSA are disabled RSA counter should only be defined of RSA is available. Say that recent CygWin perl versions work as well. Submitted by Eric Hanchrow <erich@votehere.net> "Allow 8-bit characters.  This is not really complete "Add support for Linux on HP/PA. Submitted by ""Bryan W. Headley"" <bheadley@interaccess.com>" Synchronise with the 0.9.6 branch. Change pkcs12 so the certificates coming from -in do not get tossed if -certfile is given as well. "Implement failover for ubsec.  Submitted by Subramanian Ramamoorthy <sram@broadcom.com> with the following comment: [...] We have implemented failover (ie name confusion with HP library function prototype (?) Don't overwrite signing time. "I was recently informed that some people wrongly use ssleay.txt as main documentation "Fix: 2.5.29 is ""id-ce"" "NO_DSA Support for QNX (wrat@jump.net (the wharf rat)). Certain missing algorithms make some SSL versions or TLS impossible to build. This looks to have been a typo. "Cut ""ENGINE_ID"" to the more concise ""ID""." "In this particular error condition "When the ""dynamic"" ENGINE loads another ENGINE from a shared-library 'flags' should only be set inside DSO_load() if constructing a new DSO object - otherwise we overwrite any flags that had been previously set in the DSO before calling DSO_load(). Extentions of the explanations to the linking problem on Win32.  Provided by Andrew Gray <agray@iconsinc.com> Clarify reference count handling/removal of session (shinagawa@star.zko.dec.com). "On VMS "End assembler macro correctly. On VAX "On systems that don't do too well including headers from a different directory A missing comma added. "If an engine isn't built in "At least for the two common Unixly DSO loading methods Use the generated error code files. Add targets to update the error code files. Add a local error code configuration file for the rsaref dynamic engine. "Make it possible to build completely static Make use of RSAref's header files instead of EAY's crafted rsaref.h. "In a Debian Linux environment Add a demo that reimplements the RSAref glue in form of a dynamically loadable engine. "After loading a dynamic engine Change the order of events so the capabilities of loaded engines can get listed as well. "Implement STARTTLS for certain protocols unsigned int vs. int. "Add unixware-7-gcc as in 0.9.6 branch (except that we need a 'sys_id' field here Add an FAQ. Order chronologically: move entry for recent s2_clnt.c/s2_srvr.c fixes (nearly) to the top. Move msg_callback entry to the top as the implementation for SSL 2.0 is based on the s2_clnt.c/s2_srvr.c changes. Implement msg_callback for SSL 2.0. Important SSL 2.0 bugfixes (bugs found while implementing msg_callback). "Don't define _REENTRANT here in e_os.h.  On systems where we need _REENTRANT if threads support is enabled PKCS#12 code fixes: initialize and cleanup digests and ciphers properly. "des_old.h doesn't really need to include des.h "If verify fails Change the shared library support so the shared libraries get built sooner and the programs get built against the shared libraries. This requires a bit more work.  Things like -rpath and the possibility to still link the programs statically should be included.  Some cleanup is also needed.  This will be worked on. Another noemailDN fix. Allow ca to certify requests containing BMPStrings and UTF8Strings. Add support for Subject Info Acess extension. Note BUF_MEM_grow() consistency fix. "Consistency fix in BUF_MEM_grow: Initialise to zero when new memory had to be allocated New options to allow req to accept UTF8 strings as input. Change the DES documentation to reflect the current status.  Note that some password reading functions are really part of the UI compatibility library... Add paralellism to speed - note that this currently causes a weird memory leak. "Like MD_Init "Add '-noemailDN' option to 'openssl ca'.  This prevents inclusion of the e-mail address in the DN (i.e. "filenames are des_old.[ch] Assume TLS 1.0 when ClientHello fragment is too short. A C file is a C file is a C file! "Due to an increasing number of clashes between modern OpenSSL and libdes (which is still used out there) or other des implementations Fix SSL handshake functions and SSL_clear() such that SSL_clear() never resets s->method to s->ctx->method when called from within one of the SSL handshake functions. Reject certificates with unhandled critical extensions. "New functions SSL[_CTX]_set_msg_callback(). New macros SSL[_CTX]_set_msg_callback_arg(). Message callback imlementation for SSL 3.0/TLS 1.0 (no SSL 2.0 yet). New '-msg' option for 'openssl s_client' and 'openssl s_server' that enable a message callback that displays all protocol messages. In ssl3_get_client_hello (ssl/s3_srvr.c) Modify EVP cipher behaviour in a similar way to digests to retain compatibility. "Add per-SSL 'msg_callback' with 'msg_callback_arg'. Both have per-SSL_CTX defaults. These new values can be set by calling SSL[_CTX]_[callback_]ctrl with codes SSL_CTRL_SET_MSG_CALLBACK and SSL_CTRL_SET_MSG_CALLBACK_ARG. So far Retain compatibility of EVP_DigestInit() and EVP_DigestFinal() with existing code. Modify library to use digest *_ex() functions. "The message header for fake SSL 3.0/TLS 1.0 client hellos created from SSL 2.0 client hellos added with the previous commit was totally wrong -- it must start with the message type "For consistency "Change ssl3_get_message and the functions using it so that complete 'Handshake' protocol structures are kept in memory Fix ssl3_get_message handle message fragmentation correctly. "Update information as a partial response to the post From: ""Chris D. Peterson"" <cpeterson@aventail.com> Subject: Implementation Issues with OpenSSL To: openssl-users@openssl.org Date: Wed "In certain cases "For systems where gcc is used and where we don't know if GNU ld is used or not "To avoid commit wars over dependencies "EVP_EncryptInit_ex() and EVP_DecryptInit_ex() had been defined in evp.h but not implemented. (Bug reported by Martin Szotkowski) This also changes the non-""_ex"" versions to defer directly to EVP_CipherInit_ex() rather than EVP_CipherInit() to avoid an unecessary level of indirection." "As ENGINE_load_openbsd_dev_crypto() is an API function Copy evptests.txt to the right place. "Since ossl_typ.h is an exported header "Because there's chances we clash with the system's types.h Use the maximum block length for the extra size in the encrypt BIO buffer instead of hard coding it as 8. "sch isn't an array A lot of things are undeclared unless x509.h is included. "Hmm sk_ENGINE_CLEANUP_ITEM_pop_free() is duplicated in ENGINE_cleanup(). Let's use sk_ENGINE_CLEANUP_ITEM_pop_free() instead. Addapt seldom compiled code to new semantics of the key schedule (not a pointer any more). "o_time.c contains symbols with dollar signs in them "The cleanup stack in ENGINE changed slightly "Make ""openssl engine -c"" list any supported digests as well as supported ciphers." "ENGINE_register_all_complete() will register all implementations of all algorithms present in all loaded ENGINEs. The result is that if any of those ENGINEs successfully initialises "Modernise and fix (ancient) ""maurice"" demos." Make (ancient) sign.c demo compile again. Synchronise with Unixly build. Stop thinking arguments starting with - are algorithm identifiers. Show timing parameters and timing functions used. It looks like some Linuxen have very weird settings for CLK_TCK.  I'm very unsure about this change and will investigate further. "Apparently "The #error message must match a very specific regexp (see mkdef.pl Don't clean up stuff twice. "Two changes: 1. if there are several symbols with the same entry number """FALLBACK"" handling was a hack that was thrown out long ago in the ENGINE redevelopment. The idea had been that ""-1"" could be used as a special ""ask me later"" 'nid' rather than specifying supported cipher and digest 'nid's up front. However the idea turned out to be pretty broken." "Put the cipher info back into the ""openssl engine"" command." "This change adds dummy RC4 and SHA1 support to the ""openssl"" ENGINE for testing. Because of the recent changes (see crypto/engine/README) This change adds cipher and digest support into ENGINE using the ENGING_TABLE mechanism. The necessary hooks from crypto/evp/ to use this will be committed shortly. "This commits changes to various parts of libcrypto required by the recent ENGINE surgery. DH This commits the changes to STACK macros forced by recent ENGINE surgery. "This change replaces the ENGINE's underlying mechanics with the new ENGINE_TABLE-based stuff - as described in crypto/engine/README. Associated miscellaneous changes; - the previous cipher/digest hooks that hardwired directly to EVP's OBJ_NAME-based storage have been backed out. New cipher/digest support has been constructed and will be committed shortly. - each implementation defines its own ENGINE_load_<name> function now. - the ""openssl"" ENGINE isn't needed or loaded any more. - core (not algorithm or class specific) ENGINE code has been split into multiple files to increase readability and decrease linker bloat. - ENGINE_cpy() has been removed as it wasn't really a good idea in the first place and now "Some major restructuring changes to ENGINE Fix AES CBC mode EVP_CIPHER structures: the IV length is always 16. The 'no-rijndael' option must define OPENSSL_NO_AES because that is what we look for in crypto/evp. Disable session related stuff in SSL_ST_OK case of ssl3_accept if we just sent a HelloRequest. "Fix ssl/s3_enc.c "Some of the ENGINE file names were changed for 8.3 filename uniqueness recently. So comments including file names have been fixed "Fix a typo in the preprocessor logic in eng_list.c that had left RSA Add a SHA1 test to evptests.txt - only the MD5 hash algorithm was being tested previously. "'evp_test' needs to initialise and cleanup EVP_CIPHER_CTX structures. Also Rework section about return values another time (based on hints from Bodo Moeller). Reduce the header dependencies on engine.h in apps/. "ENGINE uses a very opaque design Add certificate and request demos. Fix X509V3 macro so they compile. "Put all ""common"" initialisation in the apps_startup() and apps_shutdown() macros in apps.h." enginetest needs 'memset' defined. "Update so that progs.h can indeed be automatically generated (Working file: progs.h revision 1.24 date: 2001/02/19 16:06:03;  author: levitte;  state: Exp;  lines: +59 -59 Make all configuration macros available for application by making sure they are available in opensslconf.h "Get rid of hazardous EVP_DigestInit_dbg/EVP_DigestInit case distinction (which does not work well because if CRYPTO_MDEBUG is defined at library compile time "Get rid of hazardous EVP_DigestInit_dbg/EVP_DigestInit case distinction (which does not work well because if CRYPTO_MDEBUG is defined at library compile time "Fix apps/openssl.c and ssl/ssltest.c so that they use CRYPTO_set_mem_debug_options() instead of CRYPTO_dbg_set_options() Replace old (and invalid) copyright notice. Add a cleanup function for MDs. Completely reworked SVR5 shared library support. "Avoid strdup. (Some platforms need _XOPEN_SOURCE and _XOPEN_SOURCE_EXTENDED to get the declaration Support for shared libraries on Unixware-7 and OpenUNIX-8 (Boyd Lynn Gerber <gerberb@zenez.com>). "Totally get rid of CRYPTO_LOCK_ERR_HASH. In err.c Build shared libaries for Unixware-7 and OpenUNIX-8 in old (pre 0.9.7) style (Boyd Lynn Gerber <gerberb@zenez.com>). Renaming DH_up to DH_up_ref does not warrant a CHANGES entry of its own as the functions were only introduced a couple of days ago. Some '*)' apparently should be '+)' as the changes do not apply to the 0.9.6 bugfix branch. "This adds ""destroy"" handlers to the existing ENGINEs that load their own error strings - the destroy handler functions unload the error strings so any pending error state referring to them will not attempt to reference them after the ENGINE has been destroyed." "ENGINE's init() and finish() handler functions are used when the ENGINE is being enabled or disabled (respectively) for operation. Additionally Add some missing CHANGES items. Solaris <string.h> does not declare 'strdup' if _XOPEN_SOURCE is defined. (Preprocessor symbols such as _POSIX_C_SOURCE or _XOPEN_SOURCE are supposed to disable anything not allowed by the respective specification; I'm not sure why 'strdup' would be considered an outlaw though.) bug fix: bn_sqr_recursive output is twice its input size. Eric Hanchrow points out that Cygwin perl works. "Update the ENGINE README "Make the 'dynamic' ENGINE bundle up the loading application/library's locking callbacks to pass to the loaded library (in addition to the existing mem "Add a ""_up"" -> ""_up_ref"" change to libeay.num that was missing from the recent changes. Also "Now that we have ERR_unload_strings() "This changes the existing hardware ENGINE implementations to dynamically declare their own error strings so that they can be more easily compiled as external shared-libraries if desired. Also "This change adds a new ENGINE called ""dynamic"" that allows new ENGINE implementations to be loaded from self-contained shared-libraries. It also provides (in engine.h) definitions and macros to help implement a self-contained ENGINE. Version control is handled in a way whereby the loader or loadee can veto the load depending on any objections it has with each other's declared interface level. The way this is currently implemented assumes a veto will only take place when one side notices the other's interface level is too *old*. If the other side is newer rearrange #includes because trying to include <crypto/cryptodev.h> is a bad idea if OPENSSL_OPENBSD_DEV_CRYPTO is not defined "Convert ""max"" to ""mx"" for variable names (brought to my attention by Steve Henson). Also "Make MD functions take EVP_MD_CTX * instead of void * "Make the necessary changes to work with the recent ""ex_data"" overhaul. See the commit log message for that for more information. NB: X509_STORE_CTX's use of ""ex_data"" support was actually misimplemented (initialisation by ""memset"" won't/can't/doesn't work). This fixes that but requires that X509_STORE_CTX_init() be able to handle errors - so its prototype has been changed to return 'int' rather than 'void'. All uses of that function throughout the source code have been tracked down and adjusted." "First step in fixing ""ex_data"" support. Warning: big commit log ... Currently Only OPENSSL_free() non-NULL pointers. "zlib default was broken on most platforms. -mcpu=i486 is new as of gcc 2.95 "(A version of) gcc had been giving somewhat odd ""trigraph"" warnings about this construct Ensure that failure to create the BIO in 'CRYPTO_mem_leaks_fp' doesn't leave memory debugging turned off. [Spotted by Gtz Babin-Ebell] Fix SSL memory leak. "Make sure ""CRYPTO_mem_leaks_fp"" doesn't itself create a reportable memory leak." "gcc can't spot that 'derlst' is not used uninitialised "This changes the ""ERR"" code to have all access to state (a hash table of error strings and a hash table storing per-thread error state) go via an ERR_FNS function table. The first time an ERR operation occurs "Give DH "Allow client certificate lists > 16kB (""Douglas E. Engert"" <deengert@anl.gov>.)" Needed for build on SunOS 4.1.x with gcc (Jeffrey Hutzelman <jhutz@cmu.edu>). Load OCSP responder key before waiting for an incoming connection so it can prompt for pass phrase on startup instead of after the first connection. Add -port switch to usage message. Typo. "Make clear Checked in from the wrong !@#$%&*() copy... More interdependencies with respect to shutdown behaviour. Alert description strings for TLSv1 and documentation. Add RC4 support to OpenBSD. Add EVP test program. More details about session timeout settings. Unidirectional shutdown is allowed according to the RFC. Make -passin -passout etc work again. Fix leak in ca.c when using -passin. "gcc 3.0 tells me that -m486 is deprecated.  The gcc 2.95 manual tells me the same and that the correct option is -mcpu=i486.  I'm assuming -mcpu has been around for some time "The indexes returned by ***_get_ex_new_index() functions are used when setting stack (actually "Move CIPHER_CTX cleanups to _Final routines instead of _Init "Apply the Tru64 patch from Tim Mooney <mooney@dogbert.cc.ndsu.NoDak.edu> His comments are: 1) Changes all references for `True64' to be `Tru64' Bugfix: larger message size in ssl3_get_key_exchange() because ServerKeyExchange message may be skipped. Submitted by:  Petr Lampa <lampa@fee.vutbr.cz> Start to reduce some of the header bloat. Parameter correction for CIOFSESSION. "Get rid of the stuff we Header bloat reduction for EVP_PKEY. This ghastly hack prevents CVS wars over Kerberos (which is disabled by default). Make sure memcpy() gets properly declared by including string.h. Don't disable rollback attack detection as a recommended bug workaround. "Remove SSL_OP_NON_EXPORT_FIRST: It did not work Reworked manual pages with a lot of input from Bodo Moeller. Remove old unused stuff. "Correct most of the unsigned vs. signed warnings (or int vs. size_t) "More Kerberos SSL changes from Jeffrey Altman <jaltman@columbia.edu> His comments are: First Really add the EVP and all of the DES changes. "Make EVPs allocate context memory "Just a ""get to know your system"" bit." Support for Intel and HP-UXi assemblers. Fix inconsistent behaviour with respect to verify_callback handling. Forgot to mention second fix. Another uninitialized static that may lead to problems on Solaris under some circumstances. Addapt VMS script to the latest changes in the makefiles. "More linker bloat reorganisation: Split private key PEM and normal PEM handling. Private key handling needs to link in stuff like PKCS#8. Relocate the ASN1 *_dup() functions First of several reorganisations to reduce linker bloat. For example the single line: PEM_read_X509() results in a binary of around 400K in Linux! This first step separates some of the PEM functions and avoids linking in some PKCS#7 and PKCS#12 code. Don't preserve existing keys in DH_generate_key. "Support for 64-bit Solaris build with GCC 3.0 and later. It should be explicitely noted that 64-bit SPARCv9 ABI is not officially supported by GCC 3.0 (support is scheduled for 3.1 release) Avoid race condition. Submitted by: Travis Vitek <vitek@roguewave.com> "- New INSTALL document describing different ways to build ""tunala"" and possible problems. - New file breakage.c handles (so far) missing functions. - Get rid of some signed/unsigned/const warnings thanks to solaris-cc - Add autoconf/automake input files Additional inline reference. Add missing reference. Not all platforms have the OpenBSD crypto device. "Clean up EVP macros "More Kerberos SSL patches from Vern Staats <staatsvr@asc.hpc.mil>. His comments are: This patch fixes the problem of modern Kerberos using ""derived keys"" to encrypt the authenticator by disabling the authenticator check for all derived keys enctypes. I think I've got all the bugfixes that Jeffrey and I discussed rolled into this.  There were some problems with Jeffrey's code to convert the authenticator's Kerberos timestring into struct tm (e.g. Z "Currently SSL_get_rfc were documented but not implemented. SSL_get_[rw]fd were documented but not implemented. "Initial OCSP server support Prevent KSSL server from requesting a client certificate. Submitted by Jeffrey Altman <jaltman@columbia.edu> paddr may be NULL.  Do not crash if it is. Clarify that zlib-dynamic is the default choice. Add the possibility to specify the use of zlib compression and decompression.  It can be set up to link at link time or to load the zlib library at run-time. In ocsp_match_issuerid() we are passed the CA that signed the responder certificate so need to match its subject with the certificate IDs in the response. Include kssl_lcl.h where needed. "Private functions do not belong in an exported header file Changes to the Kerberos SSL code by Jeffrey Altman <jaltman@columbia.edu> His comments are: . adds use of replay cache to protect against replay attacks . adds functions kssl_tgt_is_available() and kssl_keytab_is_available() which are used within s3_lib.c and ssl_lib.c to determine at runtime whether or not KRB5 ciphers can be supported during the current session. "openssl speed is quite useful for testing hardware support (among other things) "Code to avoid the use of non-standard strptime().  By Jeffrey Altman <jaltman@columbia.edu> (Really "Changes to the Kerberos SSL code by Jeffrey Altman <jaltman@columbia.edu> His comments are: . Fixed all of the Windows dynamic loading functions The implementation of the TKTBODY ASN.1 functions was missing. Make sure crypto/krb5/krb5_asn.h is copied to the directory of exported header files. Make sure crypto/krb5/krb5_asn.h becomes part of libeay.num. Fix PRNG. Precomputation will not necessarily be LIm-Lee precomputation. "If I define _XOPEN_SOURCE before including *any* system header file "Patches from Vern Staats <staatsvr@asc.hpc.mil> to get Kerberos 5 in SSL according to RFC 2712.  His comment is: This is a patch to openssl-SNAP-20010702 to support Kerberized SSL authentication.  I'm expecting to have the full kssl-0.5 kit up on sourceforge by the end of the week.  The full kit includes patches for mod-ssl "Handle the common case first (where input size is a multiple of block size). Worth around 5% for encrypt. Slows down decrypt slightly Speed test decrypt EVP operations. Remove unnecessary casts. "Align with 0.9.6-stable CHANGES file Engine memory leaks have been fixed by now. Call ENGINE_cleanup() to avoid memory leak. Entry for Andy's mips3.s fix. Update nCipher header with more liberal licence. "When only the key is given to ""enc"" Let's include cryptlib.h *before* things like NO_SYSLOG are tested or used. "[Forgotten commits?] Changes to have OpenSSL compile on OS/2. Contributed by ""Brian Havard"" <brianh@kheldar.apana.org.au>" Fix warning. "Changes to have OpenSSL compile on OS/2. Contributed by ""Brian Havard"" <brianh@kheldar.apana.org.au>" Modify apps to use NCONF code instead of old CONF code. Add new extension functions which work with NCONF. Tidy up extension config routines and remove redundant code. Fix NCONF_get_number(). Todo: more testing of apps to see they still work... "Make better use of load_cert Another empty X509_NAME fix. Handle empty X509_NAME in printing routines. DSA verification should insist that r and s are in the allowed range. "Make get_ip() a bit more strict in it's parsing of IP addresses Translate into valid C (don't call functions with wrong prototypes). Call apps_shutdown() to take down what apps_startup() set up. "In {RSA "Use apps_shutdown() in all applications apps_startup() needs a corresponding apps_shutdown(). "Do not loop i the OpenSSL UI method any more.  Instead "Implement boolean (yes/no or OK/Cancel New error printing function that gives the possibility to print the errors through an arbitrary function. Include the UI error strings. Fix UI leak in apps. "In UI_dup_*() function Update my config entry to allow use of DSOs. Fix memory leak when RAND is used: need to cleanup RANDs ENGINE reference in ENGINE_cleanup(). "Since there is a way to create UI_METHODs "Modify ""openssl engine"" to handle and display internal control commands appropriately." Change all calls to low level digest routines in the library and applications to use EVP. Add missing calls to HMAC_cleanup() and don't assume HMAC_CTX can be copied using memcpy(). Note: this is almost identical to the patch submitted to openssl-dev by Verdon Walker <VWalker@novell.com> except some redundant EVP_add_digest_()/EVP_cleanup() calls were removed and some changes made to avoid compiler warnings. cp is only used when DSA is built. "Change the common application routines to use a UI_METHOD for password prompting - Add the possibility to control engines through control names but with arbitrary arguments instead of just a string. - Change the key loaders to take a UI_METHOD instead of a callback function pointer.  NOTE: this breaks binary compatibility with earlier versions of OpenSSL [engine]. - Addapt the nCipher code for these new conditions and add a card insertion callback. "The default flag should be for default passwords only.  Otherwise "Enhance the user interface with better support for dialog box prompting Don't set pointer if add_lock_callback used. Provide an application-common setup function for engines and use it everywhere. "Fix a memory leak (there's another around here somewhere Delete a redundant line. "Get rid of ""possible WAW dependency"" warnings. Submitted by: Reviewed by: PR:" Add directory name to the entry on /crypto/ui/. "Earlier OpenSSL versions printed prompts to stderr. In the new crypto/ui/ Add support for MS CSP Name PKCS#12 attribute. "ERR_peek_error() returns ""unsigned long""." Use memmove() instead of memcpy() on areas that may overlap. Spotted by Nalin Dahyabhai <nalin@redhat.com> Don't forget to initialise. move check to avoid memory leak. "Defining __USE_XOPEN_EXTENDED was the wrong thing.  Instead Accept digits in symbol names.  Spotted by Brian Havard <brianh@kheldar.apana.org.au> More info on SRP. Added more info in SRP. "Fix Bleichenbacher PKCS #1 1.5 countermeasure. (The attack against SSL 3.1 and TLS 1.0 is impractical anyway Don't decrement the reference counter twice when destroying dynamic links. "Fix a memory leak in 'sk_dup' in the case a realloc() fails. Also Get rid of RAW dependency warnings. Submitted by: Reviewed by: PR: "Extend all the loading functions to take an engine pointer A wish was expressed. Don't forget responsible person so that its clear who is to blame. Assembler support for IA-64. See the source code commentary for further details (performance numbers and accompanying discussions:-). Note that the code is not engaged in ./Configure yet. I'll add it later this week along with updates for .spec file. Submitted by: Reviewed by: PR: Document the latest change in ENGINEs. "We had the password callback for ENGINEs pretty much wrong.  And passwords that were given to the key loading functions were completely ignored "Add missing variable length cipher flag for Blowfish. Only use trust settings if either trust or reject settings are present Add examples to EVP_EncryptInit manual page. "Fix for new UI functions under Win32. For some unknown reason fopen(""con"" Add a requirements section for OpenVMS. "Add missing item(s) SSL_ERROR_WANT_CONNECT "New internal function OPENSSL_gmtime Make sure strdup() is properly declared. ui was forgotten when installing libcrypto and it's headers. "ui_compat.h was forgotten in the ""symlinking"" routine." Remove the password reading objects from LIB_DES. Make more short aliases for symbols that are longer than 31 characters. "len is a size_t Use ui_compat.h to get the password reading functions. Make it so the compiler doesn't inform me about the dollars in some symbols. "It seems like the removal of ""extern"" before ""static"" wasn't a mistake." Define `ok' and better error detection. Win16 too :-). des_read_password() and des_read_2passwords() can only appear if DES is compiled. "When doing rewrites on ssleay.num #if 0 out deleted (?) functions to stop Win32 DLL build falling over. Change Win32 to use EXPORT_VAR_AS_FN. Fix OPENSSL_IMPLEMENT_GLOBAL. Allow Win32 to use EXPORT_VAR_AS_FN in mkdef.pl make update. Under VC++ _DLL is set to indicate that the application will be linked against the DLL runtime library. It is automatically set when /MD is used. As a result OpenSSL shouldn't use _DLL to determine if it should set OPENSSL_OPT_WINDLL because this will cause linkage conflicts with static builds which do include the /MD compiler switch. Clarify behaviour of SSL_write() by mentioning SSL_MODE_ENABLE_PARTIAL_WRITE flag as discussed on the mailing list. Update changelog to reflect additional changes made to the egd-locations. Fix to allow multiple NONE libraries in mkerr.pl . Initial CRL based revocation checking. "Clarify the license and copyright Add a general user interface API.  This is designed to replace things like des_read_password and friends (backward compatibility functions using this new API are provided).  The purpose is to remove prompting functions from the DES code section as well as provide for prompting through dialog boxes in a window system and the like. "Some platforms (most notably Windows) do not have a $HOME by default. For those Add support for Sun C on Solaris x86.  Contributed by Ben <mouring@etoh.eviladmin.org> "In RSA Win32 fixes: define LLONG properly for VC++. stop compiler complaining about signed/unsigned mismatch in apps/engine.c "For some inexplicable reason "Some fixes to the reference-counting in ENGINE code. First "This adds 2 things to the ENGINE code. * ""ex_data"" - a CRYPTO_EX_DATA structure in the ENGINE structure itself that allows an ENGINE to store its own information there rather than in global variables. It follows the declarations and implementations used in RSA code Clean up ENGINE before exiting. "gcc warns when certain values of an enumeration aren't taken care of "Check for OPENSSL_NO_RSA "engine.h includes all the needed header files We shouldn't skip over header files to avoid functions of disabled algorithms.  The selection is done in a different way User OPENSSL_UNISTD instead of <unistd.h>. Spotted by Mark Crispin <MRC@Panda.COM> "This change to the ""dl"" Make update. Script to create shareable images (shared libraries in Unixly terms) on VMS. "Changes to ""openssl engine"" to support the new control command code in ENGINE. * Extra verbosity can be added with more ""v""'s "Some more tweaks to ENGINE code. This change adds some basic control commands to the existing ENGINEs (except the software 'openssl' engine). All these engines currently load shared-libraries for hardware APIs "Some BIG tweaks to ENGINE code. This change adds some new functionality to the ENGINE code and API to make it possible for ENGINEs to describe and implement their own control commands that can be interrogated and used by calling applications at run-time. The source code includes numerous comments explaining how it all works and some of the finer details. But basically "Some more tweaks to ENGINE code. The existing ENGINEs (including the default 'openssl' software engine) were static "Make the shared library name and function symbol for the ""nuron"" ENGINE static data where they could be parameterised by ctrl() commands." "Some more tweaks from ENGINE code. Previously RAND_get_rand_method was returning a non-const pointer "Some more tweaks to ENGINE code. Previous changes permanently removed the commented-out old code for where it was possible to create and use an ENGINE statically "Some more tweaks to ENGINE code. * Constify the get/set functions "Structural references should never be decremented directly - so leave that to ENGINE_free(). Also This moves string constants out of vendor headers and into C files. Fix wrong information with respect to CAs listed to the client (follows from technical discussion with Amit Chopra <amitc@pspl.co.in>). Correct typo. "Mention automatically queried EGD sockets (OpenSSL 0.9.7). 0.9.5 is obsolete OpenSSH 1.2.2p1 is dead and gone. Errors detecting the OpenSSL library are however still common and are solved by checking config.log. Correct info in the FAQ. "'||' Avoid assert() in the library. "Add forgotten ""-passin"" option to smime.c usage help." Fix couple of memory leaks in PKCS7_dataDecode(). (provided by Stephen) Unixware config. Incorporate some changes that make OpenSSL compilable in CygWin. "Since vms.mar handles 32-bit integers Fix warnings. Make sure OPENSSL_SYS_... is defined when we need it. This change should be suitable as a workaround for the Solaris x86 compiler bug reported in <01032110293775.22278@weba3.iname.net> (the '++seq[i]' condition is evaluated as 256 rather than 0 when the previous value is 255). "Reports on Windows Remove a typo in dgux-R4-gcc. "ENGINE_load_[private|public]_key had error handling that could return without releasing a lock. This is the same fix as applied to OpenSSL-engine-0_9_6-stable "Actually there were two error cases that could return without releasing the lock - stupidly Don't return an error until the global lock is released. Rewrite CHOICE field setting code to properly handle combine in CHOICE options. This was causing d2i_DSAPublicKey() to misbehave. linux-elf verified. Beta 3 has been released and announced. "For -WWW "Fix bctest Complete the des_encrypt to des_encrypt1 rename in the main development line as well. Stress the news about the name change. I forgot to rename des_encrypt to des_encrypt1 in libeay.num. "Since there has been reports of clashes between OpenSSL's des_encrypt() and des_encrypt() defined on some systems (Solaris and Unixware and maybe others) "Restore asm/mips3.s to be compiled and linked in "Include bn.h so we get BN_LLONG properly defined.  Otherwise "Reports seem to show that asm/mips3.s has faults.  To be investigated "For mips3 and alpha "When using the native tools on Solaris "gcc uses collect2 Small AIX problems solved. "We really have no need for PEX_LIBS Add missing '#ifndef OPENSSL_NO_DSA'. Remove redundant operations and update version info. Harmonize CHANGES and STATUS files between the 0.9.6a branch and the trunk to keep diffs small. Use stdlib.h to get size_t. "Tag EC_GFp_{nist "avoid linking problems when OpenSSL is built with no-dsa.  Spotted by Hellan Increase boundaries in EC_window_bits_for_scalar_size table. Fix PKCS#12 key generation bug. Add 'align' option to nameopt. Add default values for display by the 'ca' utility to openssl.cnf Update docs. bsdi-elf needs to link with -ldl. Overhaul the display of certificate details in the 'ca' utility. This can now be extensively customised in the configuration file and handles multibyte strings and extensions properly. This is required when extensions copying from certificate requests is supported: the user must be able to view the extensions before allowing a certificate to be issued. "Completely remove mont2 stuff. It does not appear to be faster than the current Montgomery code except for very small moduli (somewhere between 192 and 224 bits in a 64-bit Sun environment "Forgot ""cvs add"" Document the -certopt option to the x509 utility. Add no_issuer option. Fix X509_print_ex() so it prints out newlines when certain fields are omitted. Fix: return 0 if no error occured. We need to build MINFO. "Rename function EC_GROUP_precompute to EC_GROUP_precompute_mult Add various X9.62 OIDs. (GF(2^n) mostly left out.) Initial docs for PEM routines. "Add functions EC_POINT_mul and EC_GROUP_precompute. The latter does nothing for now Remove files from Lenka's EC implementation. "More EC stuff In crypto/ec #if 0 out structures which reference (currently) non existent functions because this breaks shared libraries. Add the 'ec' directory to mkdef.pl and mkfiles.pl so the Windows build can see it. Fixup mkdef.pl so it doesn't mess up with function names longer than 39 characters in length. "Instead of telling both 'make' and the user that ranlib errors can be tolerated "Workaround for solaris64 linking problem (explicit ""ar rs"" is needed to create a symbol table). Sun patches such as 109147-06 probably fix this problem Avoid problems with multi-line NAME sections. Implement EC_GFp_mont_method. "More method functions for elliptic curves Bugfix: previously the serial number file could turn negative because an incompletely initialized ASN1_INTEGER was used. Build ectest too. Constify BN_value_one. "Sort openssl.ec Integrate ectest.c (which does not yet do anything). Order ERR_load_... calls like the stuff in err.h. "Get rid of '#define ERR_file_name __FILE__' More 'TODO' items. "Some actual method functions (not enough yet to use the EC library Code for better build under Darwin (MacOS X). Submitted by Brad Dominy <jdominy@darwinuser.org> Optimized EC_METHODs need specific 'set_curve' and 'free' functions. "In clear_free Fix ERR_R_... problems. Forgot a '$'. "Change obj_... generation so that it does not generate rubbish or abort with errors if no name is defined for some object 'is_at_infinity' tests don't need a BN_CTX. Add BN_CTX arguments where appropriate. Rename 'EC_GROUP_set'-related functions to names similar to 'EC_GROUP_set_curve' because they don't care about the generator. Add new functions. Add EC_GROUP_new_GFp prototype. Some declarations that outline what I intend to implement. Another file I had forgotten to add. Add yet another (still empty) source code file that I forgot. Add more EC vaporware (empty source code files I missed in my previous commit). "Move ec.h to ec2.h because it is not compatible with what we will use. Add EC vaporware: change relevant Makefiles and add some empty source files. ""make update""." Document the SSLv2 session reuse fix. Add the possibility for option macros and start using it to indicate for Windows compilations if DLL linkage is required or not. EC_set_half and the 'h' component of struct bn_ec_struct are unnecessary. The computations for which h was used can be done more efficiently by using BN_rshift1. "For SSLv2 "Introduce the possibility to access global variables through functions on platform were that's the best way to handle exporting global variables in shared libraries.  To enable this functionality "Typo Fix bug in copy_email() which would not find emailAddress at start of subject name. Fix a bug which caused BN_div to produce the wrong result if rm==num and num < 0. MacOSX doesn't have ftime(). Spotted by Pieter Bowman <bowman@math.utah.edu> Typo in comment. Enhance OCSP_request_verify() so it finds the signers certificate properly and supports several flags. Add the CCITT pilot directory OIDs. Trap an invalid ASN1_ITEM construction and print out the errant field for more ASN1 error conditions. Stop PKCS7_verify() core dumping with unknown public key algorithms and leaking if the signature verify fails. Describe new callback for session id generation. "That statement seems to be not true. In fact Make OCSP cert id code tolerate a missing issuer certificate or serial number. Get rid of ASN1_ITEM_FUNCTIONS dummy function prototype hack. This unfortunately means that every ASN1_*_END construct cannot have a trailing ; make depend. Initial support for ASN1_ITEM_FUNCTION option to change the way ASN1 modules are exported. Still needs a bit of work for example the hack which a dummy function prototype to avoid compilers warning about multiple ;s. I missed one. "Fix an oversight - when checking a potential session ID for conflicts with an SSL_CTX's session cache "CONF_METHOD is one of the few places where you find MS_FAR.  I can't really see why we need to define these function pointers with MS_FAR if it's not done cosistently everywhere. If we decide to support MS_FAR modifiers e_os.h problems have been solved in the main branch. "undo previous change: ""e_os.h"" is now the official name for the file to include (but the OpenSSL_0_9_6-stable branche still has inconsistencies)" e_os.h does not belong with the exported headers.  Do not put it there and make all files the depend on it include it without prefixing it with openssl/. This means that all Makefiles will have $(TOP) as one of the include directories. "Use e_os2.h rather than opensslconf.h Exported header files should not include e_os.h. "Since opensslconf.h might be included over and over One indirection level too little compared to the pre-CRYPTO_MEM_LEAK_CB time. "Windows does not know of strigs.h or strcasecmp "Always include opensslconf.h "When inside a #if 0..#endif "Since SSL_add_dir_cert_subjects_to_stack isn't impemented on VMS "Include e_os2.h instead of opensslconf.h. SSL_add_dir_cert_subjects_to_stack is not implemented on WIN32 and VMS Rebuild ASN1 error codes to remove unused function and reason codes. "If a callback is generating a new session ID for SSLv2 "Note changes re: session ID generation callbacks "This adds command-line support to s_server for controlling the generation of session IDs. Namely "This change allows a callback to be used to override the generation of SSL/TLS session IDs in a server. According to RFC2246 Modify mkdef.pl to recognise and parse prprocessor conditionals of the form '#if defined(...) || defined(...) || ...' and '#if !defined(...) && !defined(...) && ...'.  This also avoids the growing number of special cases it was previously handling (some of them wrongly). I had forgotten to change mkerr.pl to use the new macro system. strdup() is a X/Open extension. "With later version of DEC C on VMS "Some functions "The callbacks in the NAME_FUNCS structure are not used directly as LHASH callbacks Get e_os2.h to get all the system definitions correctly. Include string.h so mem*() functions get properly declared. A new bunch of too long symbols to hack. OCSP_CRLID_new and OCSP_crlID_new clash on case-insensitive systems. DEC C on VMS is pedantic by definition. "Include OpenSSL header files earlier so macros like OPENSSL_SYS_VMS get a chance to be defined. Make a batter file name translator (uhm Include opensslconf.h or the like early to make sure system macros get correctly defined. DEC C on VMS is pedantic by definition. Use sk_*_new_null() instead of sk_*_new(NULL).  That avoids getting lots of silly warnings from the compiler. Include string.h so mem* functions get properly declared. Include OpenSSL header files earlier so macros like OPENSSL_SYS_VMS get a chance to be defined. Include string.h so mem* functions get properly declared. "Use 0 instead of NULL Fix BN_[pseudo_]rand: 'mask' must be used even if top=-1. Mention BN_[pseudo_]rand with top=-1 in CHANGES. Use BN_rand_range(). BN_rand_range() needs a BN_rand() variant that doesn't set the MSB. "Make all configuration macros available for application by making sure they are available in opensslconf.h An obvious but hard-to-see cut'n'paste error corrected. "Do not insert things in syms{} and kind{} when parsing the header files.  Instead Memory leak detection bugfixes for multi-threading. "Perl code patch contributed by ""Kurt J. Pires"" <kjpires@iat.com> His own words are: The patch adds no new functionality (other than a simple test package) to the libraries Move entry to match chronologic orderering. "Add ""-rand"" option to s_client and s_server." That was misleading. The problem won't happen with 0.9.6a anyway. Include the newly reported problem with bc on FreeBSD 4.2. Initial OCSP SSL support. Finish first round of session cache documentation. New manual page: SSL_CTX_set_mode. Modify OCSP nonce behaviour. "Work around for libsafe ""error""." "Re-order a couple of static functions and ""#if 0"" out unused ones - this gets rid of gcc warnings." "This change was a quick experiment that I'd wanted to try that works quite well (and is a good demonstration of how encapsulating the SSL in a memory-based state machine can make it easier to apply to different situations). The change implements a new command-line switch ""-flipped <0|1>"" which Update for 0.9.7 with SSL_OP_CIPHER_SERVER_PREFERENCE. Manual page for SSL_CTX_set_options(). Unfortunately for some of the options someone much longer working with OpenSSL/SSLeay is needed. Fix CRL printing to correctly show when there are no revoked certificates. Make ca.c correctly initialize the revocation date. Make ASN1_UTCTIME_set_string() and ASN1_GENERALIZEDTIME_set_string() set the string type: so they can initialize ASN1_TIME structures properly. New Option SSL_OP_CIPHER_SERVER_PREFERENCE allows TLS/SSLv3 server to override the clients choice; in SSLv2 the client uses the server's preferences. "Fix ""wierd"" typo as submitted by Jeroen Ruigrok/Asmodai <asmodai@wxs.nl>." Various Win32 related fixed. Make no-krb5 work in mkdef.pl . Fix warning in apps/engine.c Remove definitions of deleted functions. Add missing definition of X509_VAL. Various updates to mkdef.pl to cope with new aes and ASN1 code. Add missing \n's to ocsp usage message. "Add the -VAfile option to 'openssl ocsp'.  This option will give the client code certificates to use to only check response signatures. I'm not entirely sure if the way I just implemented the verification is the right way to do it "point out that RAND_load_file() etc are only for seed files Note that EGD is used automatically. Change comments.  (The expected number of iterations in BN_rand_range never exceeds 1.333...). "Integrate my implementation of a countermeasure against Bleichenbacher's DSA attack.  With this implementation Update documentation to match the state at 0.9.6 _and_ the recent changes. Modify access to EGD socket to deal with EINTR etc that can appear during connect() and other calls. First seen on Unixware-7. Unify access to EGD-socket for all RAND_egd_*() methods. Change preferences for sockets of EGD-style entropy daemons to a more reasonable selection. Fix typo preventing correct usage of -out option. Rijdael CBC mode and partial undebugged SSL support. Fix potential buffer overrun for EBCDIC. Include string.h (whis is in all relevant standards) instead of memory.h (which is not). BN assembler is no longer option on x86. Can't remember why this was needed? "Documenting session caching Fix ASN1_TIME_to_generlizedtime(). Add protoype for OCSP_response_create(). Add OCSP_request_sign() and OCSP_basic_sign() private key and certificate checks and make OCSP_NOCERTS consistent with PKCS7_NOCERTS Clarify why SSL_CTX_use_certificate_chain_file() should be preferred. "If the source has already been succesfully queried "Document session caching Various function for commmon operations. Tidy up the mess in bss_sock.c and bss_fd.c by placing them socket/fd code in separate files rather than trying to have them both share the same one. "Tolerate some ""variations"" used in some certificates. One is a valid CA which has no basicConstraints but does have certSign keyUsage. Other is S/MIME signer with nonRepudiation but no digitalSignature." "Increase consistency of header data (some mail readers really do not like spaces before the semicolon Make sk_sort tolearate a NULL argument. Zero the premaster secret after deriving the master secret in DH ciphersuites. "Insert a missing space to stop pod2man giving stroppy ""malformed"" warnings." "For improved compatibility with 'strange' certificates Copy over just written manpage to the ones still missing. Definition of NO_KRB5 in ssl.h for external applications. Fix to stop X509_time_adj() using GeneralizedTime. Update ocsp utility documentation. Fixes to various ASN1_INTEGER routines for negative case. Enhance s2i_ASN1_INTEGER(). Implement remaining OCSP verify checks in accordance with RFC2560. "Initial OCSP certificate verify. Not complete "Update the LHASH man page. * Correct some prototypes and macros with respect to ""const""ness. * Add the extra macros and examples due to the lh_doall[_arg] modifications made recently. The existing example is also reworked for consistency. * Rewrite Change PKCS#12 key derivation routines to cope with non null terminated passwords. Fix warning in apps/ca.c "New OCSP utility. This can generate "Disable RegQueryValueEx() call. Problem reported by ""Wolfgang Marczy"" <WMarczy@topcall.co.at> in a message to openssl-dev (19 Dec 2000 13:40:51 +0100)." "When we are waiting for user action "Fix typo in OCSP ASN1 module Add configuration for GNU Hurd. OCSP basic response verify. Very incomplete but will verify the signatures on a response and locate the signers certifcate. Still needs to implement a proper OCSP certificate verify. Fix warning in RAND_egd(). "No functional change "After discussion with Richard It's silly to use a different default for PERL than in the top Makefile.  (The default is never actually used though because the top Makefile passes its value of PERL down to sub-Makefiles.) "Last time I asked Add a pointer to digest options in the description of -fingerprint. Fix C code generate by 'openssl dsaparam -C'. "Change prototypes for new CRYPTO_..._mem_ex_functions functions so that they match the function definitions (namely Fix uni2asc() so it can properly convert zero length unicode strings. Certain PKCS#12 files contain these in BMPStrings and it used to crash on them. "oops "Add automatic query of EGD sockets to RAND_poll(). The EGD sockets are only queried when the /dev/[u]random devices did not return enough entropy. Only the amount of entropy missing to reach the required minimum is queried It was correctly pointed out to me that my CHANGES entry was a little thin on details. :-) Get rid of the function pointer casting in the debugging memory code due to LHASH usage. NB: The callback type used as been suctioned off into crypto.h as CRYPTO_MEM_LEAK_CB to improve clarity. "This adds macros to implement (and/or declare) type-safe wrapper functions around the callbacks required in the LHASH code for the ""doall"" functions. Also - fix the evil function pointer casting in the two lh_doall functions by deferring to a static utility function. Previously lh_doall() was invoking lh_doall_arg() by casting the callback to the 2-parameter prototype and passing in a NULL argument. This appears to have been working thus far but it's not a hot idea. If the extra level of indirection becomes a performance hit "Whilst in the process of fixing outstanding function-pointer casts in the LHASH code "Change RAND_poll for Unix to try a number of devices and only read them for a short period of time (actually Modify OCSP API to more closely reflect application needs. Add OCSP library name to error code. Fix typo in OCSP nonce extension. Set correct type in ASN1_STRING for INTEGER and ENUMERATED types. Make ASN1_INTEGER_get() and ASN1_ENUMERATED_get() return -1 for invalid type rather than 0 (which is often valid). -1 may also be valid but this is less likely. Load OCSP error strings in ERR_load_crypto_strings(). Update OCSP API. Remove extensions argument from various functions because it is not needed with the new extension code. New function OCSP_cert_to_id() to convert a pair of certificates into an OCSP_CERTID. New simple OCSP HTTP function. This is rather primitive but just about adequate to send OCSP requests and parse the response. Fix typo in CRL distribution points extension. Fix ASN1 code so it adds a final null to constructed strings. "The option line may start with a space "Since asn1.h gets included recursively from many places "If OPENSSL_BUILD_SHLIBCRYPTO (for files that end up as libcrypto objects) or OPENSSL_BUILD_SHLIBSSL (for files that end up as libssl objects) is defined "Remove anything connected to RSAref Delete PKCS#12 redundant files. "ASN1_ITEM versions of ASN1_d2i_{fp "Check for deselection of KRB5.  In fact Correct a typo. ASN1_ITEM version of ASN1_dup(). Might want something more efficient later... Update VMS build procedures to match the current status. "Add NO_ASN1_OLD to remove some old style functions: currently OpenSSL itself wont compile with this set because some old style stuff remains. Change old functions X509_sign() "ASN1_ITEM versions of sign Get rid of unused error code. Avoid compiler warnings in hw_ubsec.c: unused static functions and signed/unsigned mismatch. This will of course change if some of the unused functions suddenly get used... Finish SSL_peek/SSL_pending fixes. Re-order the options in tunala and add command switches like s_server for disabling different SSL/TLS protocol versions. "Various Win32 related fixes. Doesn't compile yet on Win32 but it is getting there... Update mkdef.pl to handle ASN1_ANY and fix headers. Stop various VC++ warnings. Include some fixes from ""Peter 'Luna' Runestig"" <peter@runestig.com> Remove external declaration for des_set_weak_key_flag: it doesn't exist." "This adds support to 'tunala' for supplying DH parameters (without which it will not support EDH cipher suites). The parameters can either be loaded from a file (via ""-dh_file"") "Some minor changes to the ""tunala"" demo. * Seal off some buffer functions so that only the higher-level IO functions are exposed. * Using the above change to buffer branches have been merged. "Don't access non-existing element buf[256] Split a CHANGES entry so that one of the halves matches the corresponding new entry in the OpenSSL_0_9_6-stable branch. Don't hold CRYPTO_LOCK_RSA during time-consuming operations. Import s2_pkt.c wbuf fixes from OpenSSL_0_9_6-stable branch. "Obtain lock CRYPTO_LOCK_RSA before creating BN_MONT_CTX structures and setting rsa->_method_mod_{n Redo OCSP response printing. Remove duplicate or obsolete code. Delete some redundant files. "When mentioning features that don't exist in current releases of OpenSSL (such as the new undocumented '-prexit' option to s_client) Simplify preprocessor statements. Add support for the noCheck OCSP extension. This is just a NULL and appears in a certificate. Make mkdef.pl parse some ASN1 IMPLEMENT macros. Initial support for variables in DEF files. """Andrew W. Gray"" <agray@iconsinc.com> says /GD is no longer a valid compiler switch." "If CONF_get_string returns NULL and we want to tolerate this (e.g. Implement some standard OCSP extensions in the v3 code. These are all raw print only extensions at present. Add OCSP nonce extension to supported extensions. This is a little unusual because it can contain no structure i.e. the extension OCTET STRING content octets do not contain a DER encoded structure. "This is an engine contributed by Broadcom - it is meant to support the BCM5805 and BCM5820 units. So far I've merely taken a skim over the code and changed a few things from their original contributed source (de-shadowing variables First step towards SSL_peek fix. Change the PKCS7 structure to use SEQUENCE OF for the authenticated attributes: this is used to retain the original encoding and not break signatures. Support for a SET OF which reorders the STACK when encoding a structure. This will be used with the PKCS7 code. Replace the old style OCSP ASN1 module. "Problem: bn_mul_normal() misbehaves if the size of b is 0. Solution: multiply a with 0 "When using -pedantic "Rewrite the extension code to use an ASN1_ITEM structure for its ASN1 operations as well as the old style function pointers (i2d Add description of SSL_[CTX_]_check_private_key(). "SSL_new() may potentially add a certfificate.  Therefore Stop on bntest error. Use continuation lines in test/bctest as far as it is possible to dermine what the expression should look like. Apparently CVS does not like lines longer than about 2^10 characters. Don't throw away bctest's error messages. "Next step in tidying up the LHASH code. DECLARE/IMPLEMENT macros now exist to create type (and prototype) safe wrapper functions that avoid the use of function pointer casting yet retain type-safety for type-specific callbacks. However Merge from the ASN1 branch of new ASN1 code to main trunk. Lets see if the makes it to openssl-cvs :-) Add manual pages for certficate/key loading and friends. Fix some things that look like bugs. One problem that looked like a problem in bn_recp.c at first turned out to be a BN_mul bug.  An example is given in bn_recp.c; finding the bug responsible for this is left as an exercise. Sign-related fixes (and tests). BN_mod_exp_mont does not work properly yet if modulus m is negative (we want computations to be carried out modulo |m|). Don't check for bc at all. We can now run a meaningful test even if it is missing. Faster BN_mod_sqrt algorithm for p == 5 (8). "Printing ""verify ..."" should not be counted as a test for the ""xxx tests passed"" message." Have the self test use bctest to check that bc is sane. "Use bc's ""print"" feature whenever it is available Workaround for broken (or missing) bc. "Intel assembler version for bn_sub_part_words().  I haven't got reliable timings yet "test_mod_mul is useful Add EXAMPLES for SSL_CIPHER_description() output. "On Windows more of the same: add printf() for perlasm. It's completely unnecessary to add a compression algorithm that is really undefined. Spotted by Jeffrey Altman <jaltman@columbia.edu> "Remove the last bn_wexpand()s that made us break constness.  Of course "ANSI C doesn't allow trailing semi-colons after a function's closing brace so these macros probably shouldn't be used like that at all. So "Update the documentation to the current state of the LHASH changes. There will probably be more when the lh_doall[_arg] callbacks are similarly tidied up "Use the new LHASH macros to declare type-safe wrapper functions that can be used as the hash/compare callbacks without function pointer casting. For now "Next step in tidying up the LHASH code. This commit defines DECLARE and IMPLEMENT macros for defining wrapper functions for ""hash"" and ""cmp"" callbacks that are specific to the underlying item type in a hash-table. This prevents function pointer casting altogether "Loops like this one: if (bp == NULL) for (j=0; j<10000; j++) BN_add(&c "Move the rijndael ""test"" to the bf and cast tests." "First step in tidying up the LHASH code. The callback prototypes (and casts) used in the lhash code are about as horrible and evil as they can be. For starters Borland C fix. "COMP_zlib should always be declared "First tentative impementation of Kerberos 5 cryptos and keys for SSL/TLS.  Implemented by Vern Staats <staatsvr@asc.hpc.mil> "Fix BN_rshift "BN_mod_exp(r "It's ""#elif"" "New format for the FAQ.  We now have different sections for different types of questions.  Hopefully "The compression method may be undefined for some reason that has generated errors.  Therefore Simplify and provide the possibility to clean a compression method. "comp_methods in a SSL_CTX points at an internal database.  Do *not* free that Turn off memory checking when loading new compression algorithms. Change c_zlib further to allow loading a shared zlib on all operating systems where such an operation is supported. "Changes to c_zlib.c to make ZLIB.DLL dynamically loadable under Windows.  Really "Move reduction step from BN_mod_exp to BN_mod_exp_mont_word. Fix BN_mod_exp_simple for a==0 (mod m). Skip useless round in BN_mod_sqrt (1 is always a square "* Fix a slight bug in the state-machine. This caused the client end of a tunnel to not pro-actively close down when failing an SSL handshake. * Change the cert-chain callback - originally this was the same one used in s_client and s_server but the output's as ugly as sin "Handle special cases correctly in exponentation functions. test_bn still fails in the BN_sqrt test because small primes appear to turn into zero for no obvious reason "Add a warning about the usage of the montgomery functions (if the inputs are not reduced modulo m Amend the original CHANGES log entry. The ex_data handling has been similarly modified now on DH and DSA. BN_legendre is no longer needed now that OpenSSL has BN_kronecker. Fix BN_kronecker so that it works correctly if 'a' is negative (we need the two's complement of BN_lsw then). "BN_to_montgomery expects its inputs to be in the interval 0 .. modulus-1 Store verify_result with sessions to avoid potential security hole. For the server side this was already done one year ago :-( Fix warnings in expspeed.c (but the segmentation fault remains) Improve readability of bn_shift.c. Add comment in bn_lib.c (why zero data between top and max?) Change bntest.c output for BN_kronecker test "BN_bin2bn did *not* contain an off-by-one error; I'm still investigating what caused the segementation fault (maybe ""make clean; make"" will cure it ...). But BN_bin2bn should always reset ret->neg." "Expand expspeed.c to make BN_kronecker timings. This caused a segmentation fault in calls to malloc "Implement BN_kronecker test. Modify ""CHANGES"" entry for BN_mod_inverse (it's not just avoiding BN_div that increases performance Improve BN_mod_inverse performance. Get the BN_mod_exp_mont bugfix (for handling negative inputs) correct this time. "Make s_client/s_server-style cert verification output configurable by command line "Minor tweaks and improvements to the tunala demo. - Add ""-cipher"" and ""-out_state"" command line arguments to control SSL cipher-suites and handshake debug output respectively. - Implemented error handling for SSL handshakes that break down. This uses a cheat - storing a non-NULL pointer as ""app_data"" in the SSL structure when the SSL should be killed." Timings. Note that SSL_peek has been disabled. Disable SSL_peek until it is fixed. "Add test_kron function "Add bn_kron.c (BN_kronecker) "Undo previous commit "It was a small change Remove CR at line ends. "Elliptic curves over GF(p) Correct a number of syntax errors. Addapt the VMS scripts to the changes in the Makefiles. Addapt the VMS scripts to the changes in the Makefiles. "Reimplement bn_div_words Avoid getting warnings about unary - being used on unsigned integer. "'echo on' works better all over than 'echo=on'.  We had the same problem in some other file Add news items early.  Please fill in with what I have forgotten. "Remove two bn_wexpand() from BN_mul() Remove a declaration for a function that does not exist. Increase permissible ClientKeyExchange message length. "Make sure BN_DIV2W is not defining when defining it Documentation on using the SSL library with non-blocking I/O. Improve usability of 'openssl passwd' by including password verification where it makes sense. More constification of the BN library. Make sure to print the BN counting (BN_COUNT) to stderr instead of stdout.  bc gets so confused by bean counts. "I've checked again and again.  There really is no need to expand a to 4 times it's size when bn_sqr_recursive() won't look farther than the original length.  Thereby "/proc/cpuinfo can have several lines containing the word ""type"".  We want the one that is ""type"" "Many applications that use OpenSSL with ENGINE support might face a situation where they've initialised the ENGINE "Fill in missing information about the string returned from SSL_CIPHER_description() "Modify () to (void) Detect and mark functions that no longer exist. "Typo Add Rijndael as things to look through. "HP-UX shared libraries do not build any longer "For a long time Enhance granularity on what I want to debug for the moment by changing LEVITTE_DEBUG to LEVITTE_DEBUG_MEM. Point to SSL_set_bio(3) early because that manpage provides information that is essential for using BIO pairs. tmp2 is not used in BN_mod_mul_montgomery. Really stupid glitch (a comment not properly ended) fixed. BN_CTX-related fixes. Document that the Nuron hardware has been added and remove the requirement for an engine utility since we now have that. Lutz tells me HP cc uses the same syntax for flags that should be passed down to ld as GNU cc. Handle BN_copy failure after successful BN_new. Constification of CRYPTO_get_ex_data() needed for the sake of RSA_get_ext_data(). "The consequence of constification is that to pass the address to a pointer to a const double pointe parameter "As a consequence of the BIGNUM constification Constify the BIGNUM routines a bit more.  The only trouble were the two functions that did expansion on in parameters (BN_mul() and BN_sqr()).  The problem was solved by making bn_dup_expand() which is a mix of bn_expand2() and BN_dup(). mode used too early in EVP_PKEY_save_parameters. Spotted by Ken Lalonde <ken@torus.ca> "Make sure that shared libraries get the internal name engine with the full version number and not just 0.  This should mark the shared libraries as not backward compatible.  Of course Set the CryptoAPI randomness estimate back to 0. The randomness may not actually be very good (we don't know). Minor corrections (HPUX). From: Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> "Change the engine library so the application writer has to explicitely load the ""external"" built-in engines (those that require DSO).  This makes linking with libdl or other dso libraries non-mandatory. Change 'openssl engine' accordingly. Change the engine header files so some declarations (that differed at that!) aren't duplicated "'openssl engine' can now list engine capabilities.  The current implementation is contained in the application Never call load_dh_param(NULL) because this leads to an illegal fopen(NULL). "oops "Explanation "Add application to enumerate Add support for shared libraries under Irix. Submitted by Albert Chin-A-Young <china@thewrittenword.com> Rename true64 to the correct tru64. Suggested by Albert Chin-A-Young <china@thewrittenword.com> Improvements to openssl.spec. Submitted by Damien Miller <djm@mindrot.org> This change has been CC:ed to crypt@bxa.doc.gov Add configuration option to build on Linux on both big-endian and little-endian MIPS. Submitted by Ralf Baechle <ralf@uni-koblenz.de> Make flag variables int instead of char.  This avoids getting into trouble on systems where char is unsigned by default _lrotl() is a call to the C runtime library! "DSO_load() should also work when it is passed a NULL - a new DSO is created automatically Add the possibility to use keys handled by engines in more applications. -engine is gone. NetBSD doesn't use ftime(). "Merge the engine branch into the main trunk.  All conflicts resolved. At the same time "For the operating systems where it matters "This changes the behaviour of the DSO mechanism for determining an appropriate filename translation on the host system. Apart from this point rsautl.c requires RSA. Cert chain verification is useable by now. Whether Steve is still working on 'proper' verification is up to him to decide ... "Don't ever set 'seeded' if RAND_status() returned 0 (although maybe this static variable should be abolished totally "When building shared libraries on HP-UX 10.20 and HP-UX 11.00 (32bit) It seems like grep isn't as capable as I thought on some Unix systems. Use egrep instead. "On some operating systems Krister Walfridsson <cato@df.lth.se> tells us sysctl lives in /sbin since NetBSD 1.5. Move expired CA certificate. """DESCRIPTION"" is required." Keep binary backward compatibility by putting new method function pointers at the end of the structure. "Make it possible for methods to load from something other than a BIO "NCONF_get_number() has no error checking at all.  As a replacement "Add short overview John Denney <jdenney@ca.mdis.com> reports that we forgot to convert Free to OPENSSL_free in the SSL demos. CRYPTO_get_ex_new_index would never return an error. "Rework the system to generate shared libraries: - Make note of the expected extension for the shared libraries and if there is a need for symbolic links from for example libcrypto.so.0 to libcrypto.so.0.9.7.  There is extended info in Configure for that. - Make as few rebuilds of the shared libraries as possible. - Still avoid linking the OpenSSL programs with the shared libraries. - When installing Bump the shared library version (should have been done a while ago). Make non blocking I/O work for accept BIOs. A few small corrections to the SSL documentation. Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> "BIO_sock_init() returns 1 for success and -1 for failure DSO_ctrl() changes have removed a couple of DSO_METHOD-specific functions so I've regenerated the error numbers and strings for the DSO functions. None of the DSO_METHOD's were handling anything except generic messages. These are now processed inside DSO_ctrl() itself. "Time to get rid of some rather silly code duplication - some DSO_ctrl() commands are common to all DSO_METHODs "Linux on Alpha has the configuration name linux-alpha-gcc More code for X509_print_ex() support. Global DirectoryString mask fix. Add support for X509_NAME_print_ex() in req. Initial code for cutomizable X509 print routines. "Remove what was described by someone as ""an EAY hack for compiling SSLeay with Colin Plumb's MD5 implementation instead of his one""." "Include arpa/inet.h Note read_ahead-flag related fixes. Set s->read_ahead in SSL_new because SSL_clear no longer modifies it. "Don't modify s->read_ahead in SSL_clear Document the change. "echo=off works on NT update info to match the README. stop perlpod from complaining. Add some missing info. Avoid protocol rollback. Problem on FreeBSD/Alpha fixed. Kris Kennaway <kris@FreeBSD.org> tells us that FreeBSD/Alpha shouldn't use an optimization higher than -O. Fix ASN1_TYPE bug. Change IMPORTANT to WARNING for greater emphasis. "Ugly hack to make sure static libraries are usable.  Without this Prepare STATUS for the beta 3 reports. Portability patch for HP MPE/iX.  Submitted by Mark Bixby <mark_bixby@hp.com> Mistakes corrected.  Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> Add news and a description of the ENGINE part and how it's currently distributed. AIX doesn't like ftime() either. Wrong variable used.  It's funny how some bugs take a long time getting triggered... "On VMS Malloc() -> OPENSSL_malloc() etc. ispell. "Totally remove the supposedly 'faster' variant in BN_mod_mul_montgomery "BSDI only supports ftime() through libcompat Document SSL_library_init() and it's aliases.  Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> Type correction.  Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> Extend the docs on setting the cipher list.  Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> Document BN_mod_mul_montgomery bug; make disabled code slightly more correct (this does not solve the problem though). Fix a typo in apps/pkcs12.c which was using the wrong part of ASN1_TYPE (though they are both ASN1_STRING so it didn't cause any problems). Make 'siglen' an int in apps/dgst.c so we can check the return value of BIO_read() etc. "Disable buggy code variant in BN_mod_mul_montgomery that was enabled in 0.9.6-beta1 and 0.9.6-beta2 and caused the BN_mont_exp_mont_word() failure (bug report ""openssh 2.2.0p1 fails with openssl 0.9.6-beta1"")." It seems like all HP-UX are successes as soon as the -ldl vs. -ldld quirk is fixed. "FreeBSD only supports ftime() through libcompat "Reorder the Blowfish documentation so the low-level routines do not get so prominent Note the BN_mod_exp_word bug. (Markus Friedl provided a test program.) ftime() is not supported on SGI. Reported by Steve Robb <steve@eu.c2.net> "HP-UX 64-bit has dlfcn "Going through performance statistics sometimes generates an exception cyclecount is only used when __GNUC__ isn't defined. "Disable the net statistics gathering code Declare the availability of beta 2 in STATUS. Restore the descriptions to conform with the rest of the documentation.  We'll work on better documents after the release of 0.9.6. "Jeffrey Altman <jaltman@columbia.edu> sent me a patch that fixes the problems with GetCursorInfo "Use sk_*_new_null() instead of sk_*_new(NULL) "Oops Tell users that a rewrite might be a good idea. "Some platforms define NULL as ((void *)0).  Unfortunately A couple of more names need to be shortened for VMS on VAX. "Make sure Compaq C doesn'r complain about dollars "Rename new BIO_set_shutdown_wr macro to just BIO_shutdown_wr (it's similar to the shutdown(... "Move text that isn't really descriptions of the functions in the page to the NOTES section Add BIO_seek() and BIO_tell() to the BIO control functions manual. "Change spelling back to ""behaviour"" and ""flavour"" instead of the American variants." Remove redundant manpages and references to them. Compile all dso files on VMS as well. "Move up inclusion of conf.h Jeffrey Altman points out that GetQueueStatus() crashes on NT. Update BIO_s_connect(). "In the name section "BIO_seed() and BIO_tell() were documented in two other documents Items without a =over and a =back are ignored. Bug fix: Montgomery multiplication could produce results with the wrong sign. Remove engine stuff that was erroneously put in the main trunk. Add Damien Miller's RPM specification file with a few modifications. "Remove indentation in the NAME section.  There's really no need to indent there "Add a number of documentation files Add a configuration for Sony News 4. Submitted by NAKAJI Hiroyuki <nakaji@tutrp.tut.ac.jp> Initial connect BIO docs. "Remove indentation in the NAME section.  There's really no need to indent there "rsa_num2 is no longer used "Jeffrey Altman convinced me this patch was really needed Docs for socket BIO. Make sure that Configure will defined DSO_WIN32 for the Win32 targets.  I feel a bit unsure if this should really be done for Mingw32 and CygWin32 Not the DSA change. Clarify some of the I/O issues. Add case of using select() and blocking I/O with BIOs and why you shouldn't (thanks Bodo!). "New SSL API mode 'SSL_MODE_AUTO_RETRY' Better error checking for RSA and DSA signature and verification speed tests.  This was required to not get mysterious errors when they wouldn't quite want to work. More BIO docs. A couple more HP-UX targets tested. Failure on Solaris when using the CSwift card. OpenBSD doesn't support timeb. Time to release a beta.  Change the status accordingly. Time to release a beta.  Change the version numbers and dates accordingly. Docs for cipher and base64 BIOs. "More new BIO docs Marin Kraemer <Martin.Kraemer@MchP.Siemens.De> sent us patches to make the OpenSSL commands x50 and req work better on a EBCDIC system. More preliminary BIO docs... Incomplete and possibly inaccurate. Hope somone is checking these :-) Fix some CygWin problems. Add BIO_read() (etc.) docs. Add an ASN1 FAQ because I'm sick of answering it :-) Clarify how one should behave when make fails.  The fault is not necessarely ours. "Ugh "Major hack of mkdef.pl.  There should be no more need to redo the process when some symbols are missing.  Instead Another thing I'm working on. "Change the printing mahine used by BIO_printf() and friends so it can handle an externally provided ""static"" buffer as well a a dynamic buffer.  The ""static"" buffer is filled first "Some BIO docs Use name ...-whatever-solaris2 instead of ...-sun-solaris2 (the middle string describes the architecture). Another superfluous pair of parentheses. "More indentation consistency: for () "Changes for QNX: there is no thread support Fix typo in rsautl. Add support for settable verify time in X509_verify_cert(). Document rsautl utility. Handle WANT_READ more correctly (thanks to Bodo). "*BIG* verify code reorganisation. The old code was painfully primitive and couldn't handle distinct certificates using the same subject name. The new code performs several tests on a candidate issuer certificate based on certificate extensions. It also adds several callbacks to X509_VERIFY_CTX so its behaviour can be customised. Unfortunately some hackery was needed to persuade X509_STORE to tolerate this. This should go away when X509_STORE is replaced Distinguish between assertions and conditions that should cause death. Keep a not of original encoding in certificate requests. Add new option to PKCS7_sign to exclude S/MIME capabilities. Mention fix in bio_lib.c. Increase print buffer (10K instead of just 2K). "Remove silly test for b->references at the end of BIO_write: If some other thread deletes the BIO that one thread needs for BIO_write "Avoid abort() throughout the library Include MD4 in documentation. "Undo change from 1.7 to 1.8: Returning -1 for an attempt to read from an empty buffer is empty is not an error that should be signalled via the error queue QNX 4 support. "-N option to diff is not essential "Fix typo in i2d_ASN1_ENUMERATED Fix bug in read only memory BIOs so BIO_reset() works. Add sign and verify options to dgst utility Diagnose EOF on memory BIOs (or you just get mysterious errors with no error message). Use the passed buffer in ERR_error_string! Change PKCS#7 test data to take account of removal of indefinite length encoding. New option to CA.pl to sign request using CA extensions. This allows intermediate CAs to be created more easily. PKCS12_create() now checks private key matches certificate. Fix typo in x509 app. Update docs. New function ASN1_STRING_to_UTF8() converts any ASN1_STRING type to UTF8. max -> dmax in bn_check_top. Various fixes... initialize ex_pathlen to -1 so it isn't checked if pathlen is not present. set ucert to NULL in apps/pkcs12.c otherwise it gets freed twice. remove extraneous '\r' in MIME encoder. Allow a NULL to be passed to X509_gmtime_adj() Make PKCS#7 code use definite length encoding rather then the indefinite stuff it used previously. Assar wanted an address change. "Added BIO_vprintf() and BIO_vsnprintf().  The former because I've found myself needing it a number of times Document the added diversity to the possible log levels. IBMcxx complains that maxmem is as low as 2048 for certain modules (like all the digests).  Setting maxmem to 16K seems to give the compiler enough space to do all the optimization it wants. "MD4 implemented.  Assar Westerlund provided the digest code itself and the test utility "Memory leaks fix.  It now looks like all memory leaks "Abdelilah Essiari <aes@george.lbl.gov> reports that for very small records Make sure that 'initialized' is zeroed as well when cleaning up. Fix for bad sorting of object names. Add warning print out if duplicate names found: should end up as a fatal error but a warning for now until they problems are fixed... "For n > 7 "Changes needed for Tandem NSK Unicos doesn't have sys/timeb.h.  Fix it by defining the TIMEB macro unless on Unicos. "Include SKIP DH parameters with OpenSSL. These have been created by a SHA.1 based procedure "We've now covered the shared library support for Solaris Add support for shared libraries on Solaris. "Make it so we can dynamically enable memory allocation debugging through the environment variable OPENSSL_DEBUG_MEMORY (existence is sufficient).  At the same time Update 'openssl passwd' documentation on selection of algorithms. Document rollback issues. "Fix SSL 2.0 rollback checking: The previous implementation of the test was never triggered due to an off-by-one error. In s23_clnt.c "New ASN1_STRING_print_ex() and X509_NAME_print_ex() functions. These are intended to be replacements for the ancient ASN1_STRING_print() and X509_NAME_print() functions. The new functions support RFC2253 and various pretty printing options. It is also possible to display international characters if the terminal properly handles UTF8 encoding (Linux seems to tolerate this if the ""unicode_start"" script is run). Still needs to be documented "There's a slight possibility that a is 0 in BN_sub_word() "When data are written out in very small blocks (less than 3 bytes in size) through the base64 filter "Darrel Hankerson <dhankers@cacr.math.uwaterloo.ca> correctly discovered that of the result pointer to bn_mul was the same as one of the two arguments Avoid a race condition if another thread happens to remove the error state at the same time. "Add support for solaris shared libraries "This isn't entirely necessary if you do everything right from the start Add a note on installation under Win32. "Redo and enhance the support for building shared libraries.  Currently there's support for building under Linux and True64 (using examples from the programming manuals) oops. Randomness polling function for Win9x. Add an early reference to BN_CTX_new so that the usage of BN_CTX_start is easier to grasp. Fix some typose in the i2d/d2i functions that call the i2c/c2i (they were not using the content length for the headers). Fix ASN1 long form tag encoding. This never worked but it was never tested since it is only used for tags > 30. New options to smime program to allow the PKCS#7 format to be specified and the content supplied externally. "New ASN1 functions that just deal with content octets More experiments show that you can set your data segment size soft limit higher and thereby get through compilation of sha_dgst.c. "I got sick and tired of having to keep track of NIDs when such a thing could be done automagically Add PRNGD link. Don't dereference NULL pointers. Submitted by: bowe@chip.ma.certco.com Don't let top go below zero! Give the user the option to measure real time instead of user CPU time. Document my latest changes. "That's it "Added references to RFCs 1421 to 1424 "Steve fixed up some strange errors introduced into dso_win32.c "In BN_mod_exp_mont_word "Move add_oid_section to apps.c Change req so the new parameter '-rand file' uses the given file in addition to the file given through the RANDFILE option or environment variable. "On case-insensitive systems "Move the certificate and key loading functions to apps.c Small change to accept the command line parameter '-rand file'.  This parameter takes precedence over the RANDFILE option in the configuration file. Change mkstack.pl so it now sorts each group into lexical order. Previously it depended on the order of files in the directory. This should now mean that all systems will agree on the order of safestack.h and will not change it needlessly and avoid massive needless commits to safestack.h in future. It wont however avoid this one :-( "* This adds some checking to the 'dlfcn' DSO_METHOD that at least lets it cope with OpenBSD which doesn't understand ""RTLD_NOW"". * Added the dso_scheme config string entry for OpenBSD-x86 to give it DSO support. * 'make update' that has also absorbed some of Steve's mkstack changes for the ASN-related macros." "Fixes for Win32 build. This is mostly a work around for the old VC++ problem that it treats func() as func(void). Various prototypes had been added to 'compare' function pointers that triggered this. This could be fixed by removing the prototype Handle ASN1_SET_OF and PKCS12_STACK_OF using function casts in the same way as STACK_OF. Avoid unnecessary links and incomplete program file in apps/. "Redo the support for dynamic locks.  First of all "With the new stack hack macros "Add support for dynamically created and destroyed mutexes.  This will be needed in some ENGINE code Safe stack reorganisation in terms of function casts. After some messing around this seems to work but needs a few more tests. Working out the syntax for sk_set_cmp_func() (cast it to a function that itself returns a function pointer) was painful :-( Needs some testing to see what other compilers think of this syntax. Also needs similar stuff for ASN1_SET_OF etc etc. "In EVP_BytesToKey "Currently the DSO_METHOD interface has one entry point to bind all ""symbols"" including functions (of all prototypes( and variables. Whilst casting any function type to another violates ANSI C (I believe) Add support for the modified SGC key format used in IIS. Make sure that bs is not getting free'd again. Reported by Robert Eiglmaier <robert.eiglmaier@ixos.de> Add info on what some other people are currently working on. "Report ""error"" (usually just ""File exists"" This probably fixes a BN_rshift bug. Use BN_CTX_end when exiting early from BN_mod_exp_mont_word because BN_mod_exp_atalla could be used. "Enable DSO support on alpha (OSF1) "In longer tests with g=2 "BN_mod_exp_mont_word entry: Don't give performance gain estimates that appear to be more precise than they really are "Using checks of the existence of HEADER_{foo}_H in other header files was a really bad idea.  For example "Accept -F4 option in lower case "Slightly faster DSA verification (BN_mod_exp2_mont) "Use the equivalent of a sliding window (without precomputation because we're only handling words anyway) in BN_mod_exp_mont_word making it a little faster for very small exponents "Compaq C warns that ""the expression 'p=scan_esc(p)' modifies the variable 'p' more than once without an intervening sequence point.  This behavior is undefined."" What it essentially complains about is 'p=p+=1'. Now it's changed to 'p=p+1'..." Increased consideration for stupid Linux users. int may be smaller than 32 bits. "According to Gordon Atwood <gordon@cs.ualberta.ca> "According to Gordon Atwood <gordon@cs.ualberta.ca> Yet another bc FAQ. "There have been a number of complaints from a number of sources that names like Malloc "Small documentation bug Bug fix for 64 bit HP-UX. Submitted by: Karsten Spang <ks@bellesystems.com> Small fix to enable reading from stdin as well. Contributed by Yoichiro Okabe <okabe@wizsoft.co.jp> """make update"" + stripping the type-specific stack functions out of libeay.num and ssleay.num." "This change will cause builds (by default) to not use different STACK structures and functions for each stack type. The previous behaviour can be enabled by configuring with the ""-DDEBUG_SAFESTACK"" option. This will also cause ""make update"" (mkdef.pl in particular) to update the libeay.num and ssleay.num symbol tables with the number of extra functions DEBUG_SAFESTACK creates. The way this change works is to accompany each DECLARE_STACK_OF() macro with a set of ""#define""d versions of the sk_##type##_*** functions that ensures all the existing ""type-safe"" stack calls are precompiled into the underlying stack calls. The presence or abscence of the DEBUG_SAFESTACK symbol controls whether this block of ""#define""s or the DECLARE_STACK_OF() macro is taking effect. The block of ""#define""s is in turn generated and maintained by a perl script (util/mkstack.pl) that encompasses the block with delimiting C comments. This works in a similar way to the auto-generated error codes and "The previous commit to crypto/stack/*.[ch] pulled the type-safety strings yet tighter "This is the first of two commits (didn't want to dump them all into the same one). However dh and gendh have been obsoleted by dhparam. #include <stdio.h> not needed. #include <stdlib.h> is not needed. sk_***_new_null() seems to be there to avoid exactly this sort of thing which is a cast between NULL and a function pointer. "sk_value was also suffering from de-const-ification. Also config can now detect ARM Linux automagically. Contributed by Jeremy Norris <jeremy.norris@rebel.com> strtoul is not used anywhere. "When compiling with /opt/SUNWspro/SC4.2/bin/cc on Solaris "All the little functions created by the IMPLEMENT_STACK_OF() macro will cast their type-specific STACK into a real STACK and call the underlying sk_*** function. The problem is that if the STACK_OF(..) parameter being passed in has a ""const *"" qualifier Fourth phase EVP revision. Declare ciphers in terms of macros. This reduces the amount of code and places each block cipher EVP definition in a single file instead of being spread over 4 files. "Minor corrections to documentation. * speed processes any/all options passed to it "It seems that mktime does what is required here. Certainly timegm() can not be used because it is not available on all systems (most notably This declaration seems to have been added into the header file accidently. There's no trace of it being implemented and it doesn't seem to have been intended given that it is prototyped with a BIO yet there was a BIO- specific version added in at the same time. Bugfix: clear error queue after ignoring ssl_verify_cert_chain result. "Beginnings of EVP cipher overhaul. This should eventually enhance and tidy up the EVP interface. This patch adds initial support for variable length ciphers and changes S/MIME code to use this. Some other library functions need modifying to support use of modified cipher parameters. Also need to change all the cipher functions that should return error codes Implement SSL_OP_TLS_ROLLBACK_BUG for servers. Call dh_tmp_cb with correct 'is_export' flag. Avoid tabs in CHANGES. Add DSA library string. Workaround for IIS .key file invalid ASN1 encoding. Yet more typesafety. Avoid sprintf. "Avoid sprintf "Add ""FIXME"" comment Add a couple of macros that make OpenSSL compilable on SunOS 4.1.4. Contributed by SAKAI Kiyotaka <ksakai@kso.netwk.ntt-at.co.jp> Add a note about the new document. "Add a new file where all the standards and other documents that we try to adhere to are listed.  It should be regarded as a complement to whatever is out on the web "Fix c_rehash script Get rid of more non-ANSI declarations. MacOS changes. "When open()ing 'file' in RAND_write_file "Fix a memory leak "In Message-ID: <003201bfb332$14a07520$0801a8c0@janm.transactionsite.com> Add missing #include. Avoid leaking memory in thread_hash (and enable memory leak detection for it). Stylistic changes: Don't use a macro for the malloc'ed length since it is not constant. "This case in the ""dso_unload"" handlers should not be reported as an error - if a DSO_load(NULL "Previously "I've always wanted to make the CONF library more adaptable.  Here's the result. I have retained the old behavior of the CONF_* functions Clarifications. "Constification I forgot about $openssl_other_defines ... should probably do this for consistency. Not sure though whether HAVE_DLFCN_H should be included too? If we go the autoconf route then this probably wouldn't be included. "This helps make the DSO stuff more portable; * ""no-dso"" option available in Configure so that all DSO methods will return NULL "This commit ties the new DSO code (crypto/dso/) into the build for a variety of platforms. A few are missing "This is a set of startup code for the DSO support _lrotl and _lrotr are defined in MSVC but nowhere else that we know off. Entry for ssleay_rand_status locking fix. 'entropy >= ENTROPY_NEEDED' should be evaluated while the variables are locked. "Add pointer to EGD manpage. Update the ""randomness"" section for the upcoming 0.9.5a release." Don't force the use of GNU make with Borland C++ Builder.  Contributed by Joon Radley <jradley@vps.co.za> "Fix typo in -clrext option "Removed Update docs. Explain configuration options more completely. Geoff Thorpe reports a whole bunch of tests passing. Add a few more FAQs. "Time for version 0.9.5a beta2 I know it's earlier than announced.  The high amount of problems in beta1 warants this "New FAQ for the OpenSSH configuration problem. I know "Clean up context "Corrected.  It said before that ivec had to be initialised to zero A quick hack to have ssize_t work with gcc under SunOS 4 (tested on SunOS 4.1.4). Update docs and remove old PKCS#7 README file. Fix a memory leak in PKCS12_parse. Don't copy private key to X509 etc public key structures. Fix for warning. More failures. Ulf Mller reports OpenBSD-x86 and solaris-sparcv9-cc passed. In some of the Makefiles CPP was not defined. Jaenick Lutz reports that hpux-parisc-cc with +02 passed. Problems with the Windows build. Mention the bug fixes. "Sample application using RAND_event() to collect entropy from mouse movements Bug fix: RAND_write_file() failed to write to files created by open() on Win32. "Make sure an error condition is returned if New function RAND_event() collects entropy from Windows events. FLAT_INC is not needed; we use -I.. all the time "Change the notation and coding of the version to be able to contain both a patch level and a beta status.  IMHO "Keep in sync with Unix code "des_quad_cksum() byte order bug fix. See http://www.pdc.kth.se/kth-krb/ Their solution for CRAY is somewhat awkward. I'll assume that a ""short"" is 32 bits on CRAY to avoid the #ifdef _CRAY typedef struct { unsigned int a:32; unsigned int b:32; } XXX; #else typedef DES_LONG XXX; #endif" superseded by des_modes.pod change manpages to pod. Contents are not up to date! Eliminate memory leaks in mem_dbg.c. Small bugs in the test scripts removed. The previous exit code handling was completely bogus for VMS. Remove CRYPTO_push/pop_info invocations to improve code readability -- I hope all memory leaks that may occur here have already been tracked down. Insert a comment: This is one of the few files in this directory that is actually used (even though it may not appear so at first sight). Use correct function names in SSLerr macros. "Remove ""Makefile.uni"" files and some related stuff. This was meant for building individual ciphers separately; but nothing of this is maintained "Bugs corrected "bss_log has dollars Make sure strcmp() gets declared. Correction. Run test_ssl last -- it's the only test that really uses the SSL library in addition to the crypto library. Update test suite so that 'make test' succeeds in 'no-rsa' configuration. "Copy DH key (if available) in addition to the bare parameters in SSL_new. If SSL_OP_SINGLE_DH_USE is set Connection timings (using ISO C function clock()). Workaround for Windoze weirdness. "On NeXT NO_SYSLOG is defined for MSDOS anyway. just don't include the Unix header... "Use signed types where necessary Use L for all constants. Don't generate asm files for no-asm. "Always use fixed DH parameters created with 'dhparam -C' Change to code generated by 'dhparam -C': - Move DH parameter components inside the function. - Automatically #include the required header file if it has not already been #included. Manual page installation did not work if INSTALL_PREFIX was a relative path. Fix typo and make ca get the CA and request fields correct. "Check that a password was actually passed Manual pages for EVP signing and verifying. "{NEXT "Fix the indentation Let's not lie to the people. Add missing include (only MONOLITH builds were possible without it). Submitted by: Andrew W. Gray Preserve reason strings in automatically build tables. "There is no reason to use downcase letters throughout in error reason strings Read complete seed files given in -rand options. Change output text (ar is not a linker). Generate correct error reasons strings for SYSerr. Note about PRNG error message for openssl command line tool. Use signed type where -1 may be returned. Avoid potential memory leak in code generated by 'openssl dhparam -C'. "New '-dsaparam' option for 'openssl dhparam' "Fix for previous patch: If RAND_pseudo_bytes returns 0 Move the 'file scope' argument in set_label to the third argument: the second was being used already. "Use RAND_pseudo_bytes "Use RAND_pseudo_bytes Add missing dependencies. Use RAND_METHOD for implementing RAND_status. "Hack b_print.c to implement asprintf() functionality.  Not enabled by default yet "Make bss_log.c a bit more readable I'm experimenting with a hack in dopr() and friends b_printf.c to make it work like asprintf(). Fix bug which would free up a public key twice if the verify callback tried to continue after a signature failure. 'rand'/'-rand' documentation. 'rand' application for creating pseudo-random files. MacOS pseudo-random entropy collector. Submitted by: Yoram Meroz <yoram@mail.idrive.com> Reviewed by: <appro> Bug fix. Pointed out by: Gisle Vanem <gvanem@eunet.no> Mingw32 can now use assembler. "Switch for turning on the predictable ""random"" number generator." Support assembler for Mingw32. Shared library support for Solaris and HPUX by Lutz Behnke and by Lutz Jaenicke. Hopefully we'll have a unified way of handling shared libraries when we move to autoconf... "Switch to 0.9.6 "Tagging has been done A few more tests were reported. "Include rand.h so RAND_pseudo_bytes may be declared. Remove one ampersand so the compiler may complain less. Make rand() static so it will not conflict with the C RTL. Make bug() static too More platforms passed the test. More tests passed. IRIX6* tests passed. "Use standard header file string.h for memset prototype (where ""standard"" refers to the C language "Make sure to catch UnixWare 7 Update config for the unixware targets by looking at what was done in Apache's GuessOS (from Apache 1.3.1). "AIX and HP-UX are passing the tests. Warning about old gcc "OpenSSL doesn't compile well on OpenVMS/VAX Add a comment. "For lack of a better name New logical names to skip algorithms are now supported. "New logical names to skip algorithms are now supported. Also Statement that it fails only on 32-bit architectures isn't true. Overly long lines look ugly in the DOS editor. :) "Reorganize bn_mul.c (no bugfix yet) Make ASN1 types real typedefs. Rebuild error files. A small script to compile mttest.c on VMS as well. "Make sure there's some entropy "Just as in Unix "The OpenVMS library is most definitely not built for anything but files "ftruncate() and fileno() are not supported on all versions of OpenVMS (they don't really exist before version 7) "Let's avoid compiler warnings over types. Actually "For safety "Since a stack with quite long name is declared here Small error fix. "Update the two threads modules to conform to our recommendations (use CRYPTO_num_locks() instead of CRYPTO_NUM_LOCKS!) "Some time in history "flush output. Looks like it fails when b is a power of 2 Enhance consistency by using BIO_flush() instead of fflush(). "Test the division functions. Apparently BN_div_recp reports an error for small divisors (1 "Linux is almost the only one where getpid() == thread-id. IRIX is another one "There're two (incompatible) ways to write multi-threaded programs under IRIX "The previous revision should have generated _more_ warnings "More VC++ pickiness. (destest.c doesn't have a ""return"" and the usual signed/unsigned stuff in s3_pkt.c) Submitted by: Reviewed by: PR:" mt contained an old copy of mttest.c. remove it and move the other files to crypto/threads "In ""make clean"" Fix warnings by using unsigned int where appropriate. EGD bugfix. Submitted by: Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> different snprintf version. Allow code which calls RSA temp key callback to cope with a failure. Fix typos in some error codes. some test results. Use public domain snprintf() implementation by Patrick Powell to avoid potential buffer overrun in BIO_printf(). crypto/bio/b_print.c CVS: Version 0.9.5beta2-dev (so that the next snapshot will not claim to be 0.9.5beta1). (Are the version number examples correct -- the same numerical code for: * 0.9.3beta2-dev 0x00903002 * 0.9.3beta2     0x00903002 ?) "Don't use buffered fread() to read from DEVRANDOM Do fflush(stdout) when there was an error. mention that EGD is used in non-blocking mode. EGD socket info. Remove structures that are no longer used. "Make gcc 2.95.2 happy here "Add an evil cast "Avoid filename ""test.c"" because otherwise ""make test"" will invoke a default rule built into make." Fix NO_RSA (misplaced #endif). "EGD info Support EGD. Make it possible to have differing tar versions. "New make target ""report"" to run util/selftest.pl" Run the test suite and generate a report. another faq. Frequently asked questions. "Add PBE algorithms with ciphers Allow ADH to be used but not present in the default cipher list. Allow CERTIFICATE to be used in PEM headers for PKCS#7 structures: some CAs do this. Don't list prototypes for internal functions. Correction to RSA_padding_check_xxx() docs (this time for real). Correction for RSA_padding_check_xxx() documentation. Change EVP_MD_CTX_type so it is more logical and add EVP_MD_CTX_md for the old functionality. Various warning fixes. Initial EVP symmetric cipher docs. Workarounds to make broken programs happy (such as s_client and s_server). Move ssl3_do_write from s3_pkt.c to s3_both.c. "Move MAC computations for Finished from ssl3_read_bytes into ssl3_get_message More compact Configure usage message. "Move the registration of callback functions to special functions designed for that.  This removes the potential error to mix data and function pointers. Please note that I'm a little unsure how incorrect calls to the old ctrl functions should be handled Workaround for irrelevant problem. Tolerate fragmentation and interleaving in the SSL 3/TLS record layer. Fix gcc warnings. Keep variable names consistent with corresponding pre-processor symbols. Stay compatible to older Perl5 releases (see diff -r1.11 -r1.12). "Avoid potential conflicts between #defines in opensslconf.h and defines when compiling applications "Make sure the return value of by_file_ctrl(... Casts now unnecessary because of changed prototype. Get rid of evil cast. Add support for Compaq Atalla crypto accelerator. Fix signed/unsigned warnings. Create the man directories where the manpages will be put. Avoid GNU C assembler templates under Solaris x86. "test_mont was exercising 100-bit multiplication modulus X*I-bit "Remove the access() call altogether for VMS "Add a couple of forgotten $(PERL) "HP-UX tune-up: new unified configs "A hack to make sure access() will give us the correct answer about the accessability of an ""empty"" directory.  Thsi *is* weird Correct time in seconds instead of minutes. Add references to the new passwd utility. "Make gcc 2.95.2 happy again 16 * 8 = 128. Note about des_ncbc_encrypt. "Add command line password options to the reamining utilities Refer to EVP_DigestInit() in the hash function descriptions. Document EVP digest operations. put missing line back in. "Improve bntest slightly Support for MacOS X (Rhapsody) is added. Also get rid of volatile qualifier in asm definitions as it prevents compiler from moving the instruction(s) during optimization pass. Memory leak. Cosmetic changes. "Commit patch to bn.h that CVS decided to throw away during 'cvs update' Generate just one error code if iterated SSL_CTX_get() fails. Avoid enabled 'assert()' in production library. Use MONT_WORD macro to control if the word-based or the bignum algorithm is used. "Replace ridiculous libdes PRNG with RAND_bytes. These functions are not used anywhere in OpenSSL New xcbc_ok test vector is required after the parity bits in cbc2_key were fixed up. The catch is that in the DESX test the cbc2_key is used as whitening key where *all* 64 bits are significant. Correct spelling as it was done in the source. Document hash functions. Tolerate negative numbers in BN_is_prime. "rndsort{Miller "Support for ""multiply high"" instruction Bug fix: BN_is_prime() would fail with a high probability for small primes (negligible for larger ones). dhgen is gone. Typo in preprocessor symbol. undo. I keep confusing my directories. :( EBCDIC support. Submitted by: Martin Kraemer <martin.kraemer@mch.sni.de> Seek out and destroy another evil cast. Documentation for BN_is_prime_fasttest. "Tiny changes to previous patch (the log message was meant to be ""Make DSA_generate_parameters faster"")." "Make DSA_generate_parameters "Put config in section 5 New -pkcs12 option to CA.pl. Document CA.pl script. Initialise and free up the extra DH fields (nothing uses them yet though). Declare BN_pseudo_rand(). Use the pod2man that comes with OpenSSL.  Make it so config(5) really ends up in section 5. "Since pod2man is still evolving comment was wrong. Document DSA and SHA. New function BN_pseudo_rand(). Use BN_prime_checks_size(BN_num_bits(w)) rounds of Miller-Rabin when generating DSA primes (why not use BN_is_prime()?) Update comments to provide a better approximation of reality. Add a pointer to a paper (is the algorithm in section 4.2 the word-based algorithm we are using?) Update references. Correct typos that ispell did not find. "Some comments added Document RAND_load_file change. "RAND_load_file(... Add the PID to the output on Win32. Document how CRYPTO_EX_DATA stuff works for RSA structures. Other structures behave in a similar way. Rename asn1/pkcs8.c to asn1/p8_key.c to avoid name conflict. "As ftruncate is not availabe on all platforms fail on all errors. "Document the DH library Apply Lutz Behnke's 56 bit cipher patch with a few minor changes. Docs haven't been added at this stage. They are probably best included in the 'ciphers' program docs. "Use comment from md_rand.c (part 2 Docs for sess_id utility. Document RAND library. "Don't ""goto err"" in client_master_key because no such label exists; just return -1 as in other error cases." Check RAND_bytes() return value or use RAND_pseudo_bytes(). "AFAICS lst1 stands for ""lshift test"" not ""list""." WINDOWS is defined in e_os.h. The problem was WIN32 (the new egcs uses _WIN32). Define WINDOWS in all Mingw32 cases. Rename lst1 to list1 to avoid name conflict on some platforms. Define WINDOWS for Mingw32 and Cygwin. Oops... undo change to wrong prototype. Finish off the X509_ATTRIBUTE string stuff. "Rename X509_att*() stuff to X509at_*() Rename rsa_oaep_test to the more appropriate name rsa_test for the benefit of MS-DOS users. "Avoid converting void * to a function pointer when NULL is defined as ((void *)0) Build the test apps after all of the library has been built. Build the crypto test applications as well. Prepare for a possible disabling of certain messages that DEC C spews out. "Give the user the possibility to ask for compilation of only the files that are directly in crypto/ "It doesn't make sense to try see if these variables are negative Add missing #ifndefs that caused missing symbols when building libssl as a shared library without RSA.  Use #ifndef NO_SSL2 instead of NO_RSA in ssl/s2*.c. Submitted by: Kris Kennaway <kris@hub.freebsd.org> Modified by Ulf Mller New function RAND_pseudo_bytes() generated pseudorandom numbers that are not guaranteed to be unpredictable. "In ssl3_read_n Synchronise with the makefiles. "RAND_bytes's return values is 0 for an error "Enable memory checking earlier (we correctly free everything except for the BIO through which we print the memory leak list "Let ""make test"" survive without DEVRANDOM (and rename a target in test/Makefile.ssl to make it easier to guess the name of the file executed by it)" "In EVP_PKEY_assign[_...] "- Pseudo-seed the PRNG in programs used for ""make test"" because otherwise BN_rand will fail unless DEVRANDOM works "Avoid some warnings "Avoid shadowing variables Use CRYPTO_push_info to find a memory leak in pkcs12.c. "Precautions against using the PRNG uninitialized: RAND_bytes() now returns int (1 = ok "Turn BN_prime_checks into a macro. Primes p where (p-1)/2 is prime too are called ""safe"" "add dependency and auto-generation rule for bn_prime.h (created by bn_prime.pl Dummy page superseded by crypto/crypto.pod Document the RSA library. The buffer in ss3_read_n cannot actually occur because it is never called with max > n when extend is set. dep/ directory is not needed. Add missing =back. "Unify doc/openssl.pod and doc/man/openssl.pod Add PKCS#12 manpage and use MAC iteration counts by default. "apps/openssl.cnf and the documentation say it's ""nombstr"" "Add some newlines needed for pod2man More X509_ATTRIBUTE changes. Initial automation changes to 'req' and X509_ATTRIBUTE functions. Use less complicated arrangement for data strutures related to Finished messages. Use separate arrays for certificate verify and for finished hashes. Slight code cleanup for handling finished labels. Rhapsody 5.5 (a.k.a. MacOS X) compiler bug workaround. At the very least passes 'make test' now:-) Metrowerks for Motorola tune-up. "Add support for MS ""fast SGC""." Don't request client certificate in anonymous ciphersuites except when following the specs is bound to fail. "Fix SSL_CTX_add_session: When two SSL_SESSIONs have the same ID Add OIDs for idea and blowfish. Unfortunately these are in the middle of the OID table so the diff is rather large :-( Simplify the trust structure: basically zap the bit strings and represent everything by OIDs. MacOS updates. Initial support for GUSI (MacOS socket implementation) is added. "New {i2d "Makefile clean-ups Add PKCS#8 utility functions and add PBE options. "Correct spelling Support for ASN1 NULL type. Late break-in patch for MacOS support. MacOS updates. "Rename CRYPTO_add_info    => CRYPTO_push_info CRYPTO_remove_info => CRYPTO_pop_info in the hope that these names are more descriptive; and ""make update""." "- Don't assume that int and size_t have the same representation (and that malloc can be called with an int argument). - Use proper prototypes (with argument list) for various function pointers "- Added more documentation in CHANGES. - Made CRYPTO_MDEBUG even less used in crypto.h "- Made sure some changed behavior is documented in CHANGES. - Moved the handling of compile-time defaults from crypto.h to mem_dbg.c "Add missing semicolon to make compiler happy Clear out license confusion. "Rebuild of the OpenSSL memory allocation and deallocation routines. With this change "Update contact information (openssl-bugs Delete an unused variable and make the PKCS#12 keygen debugging code work again. Solaris x86 assembler problem is already addressed in ./config (bug reports keep coming in because that was still missing in 0.9.4) "Various S/MIME fixes. Fix for memory leak Fix a typo in a_enum.c. Don't use inline assembler on x86 Solaris (would need a different syntax). Useless files deleted -- they were just copies of files of the same name in the apps/ directory (which were recently changed). Modify S/MIME application so the -signer option writes the signer(s) to a file if we are verifying. Merge in my S/MIME library and utility. Circumvent an exploitable buffer overrun error in RSA Security's RSAREF library. See: http://www.CORE-SDI.COM/english/ssh/index.html Submitted by: Reviewed by: PR: "Use des_set_key_unchecked "Add functions des_set_key_checked Change the trust and purpose code so it doesn't need init either and has a static and dynamic mix. Document all possible errors (and some impossible) from the verify program. "Add part of chain verify SSL support code: not complete or doing anything yet. Add a function X509_STORE_CTX_purpose_inherit() which implements the logic of ""inheriting"" purpose and trust from a parent structure and using a default: this will be used in the SSL code and possibly future S/MIME. Partial documentation of the 'verify' utility. Still need to document how all the extension checking works and the various error messages." Initial trust code: allow setting of trust checking functions in a table. Doesn't do too much yet. Make the -<digestname> options in 'x509' affect all relevant options. Change the name of the 'notrust' options to 'reject' as this causes less confusion and is a better description of the effect. A few constification changes. Initial chain verify code: not tested probably not working at present. However nothing enables it yet so this doesn't matter :-) Support for otherName in GeneralName. Restore traditional SSL_get_session behaviour so that s_client and s_server don't leak tons of memory. Modify verify code to handle self signed certificates. Store verify_result with sessions to avoid potential security hole. Clarify docs. Add a salt to the key derivation using the 'enc' program. "This corrects the reference count handling in SSL_get_session. Previously "'req' fixes. Reinstate length check one request fields. Fix to stop null being added to attributes. Modify X509_LOOKUP Add support for the 40 and 64 bit RC2 and RC4 ciphers in 'enc' add documentation for 'enc'. Add info about the header and footer lines used in PEM formats and add an nseq manpage. Add an spkac manual page and fix the pkcs7 manpage. "Some crypto applications are now being built on Unix "It's possible that considering the configuration file as a binary file works on Unix and MS-DOS/Windows.  It does not under VMS Avoid silly compiler warnings about functions not being declared and an int missing. Adjust to changes in apps/openssl.cnf "DIFFERENCE doesn't handle long (>255 chars) lines well.  Use BACKUP instead.  No "Merge some common functionality in the apps Add password command line options to some utils. Fix and update man pages. "Fix a couple of outstanding issues: update STATUS file Undo silly change. Fix (spurious) warnings. Avoid some warnings. "Fix to the -revoke option in ca. It was leaking memory "Fix assembler for Alpha (tested only on DEC OSF not Linux or *BSD).  The problem was that one of the replacement routines had not been working since SSLeay releases.  For now the offending routine has been replaced with non-optimised assembler.  Even so Fix to PKCS#7 routines so it can decrypt some oddball RC2 handling. Continued multibyte character support. Add a bunch of functions to simplify the creation of X509_NAME structures. Change the X509_NAME_entry_add stuff in req/ca so it no longer uses X509_NAME_entry_count(): passing -1 has the same effect. "Always hash the pid in the first iteration in ssleay_rand_bytes Warn about RANDFILE being overwritten. Don't be overly paranoid. "Various randomness handling bugfixes and improvements -- some utilities that should have used RANDFILE did not Report an error from X509_STORE_load_locations when X509_LOOKUP_load_file or X509_LOOKUP_add_dir failed. Update Borland C++ builder support. Submitted by: Janez Jere <jj@void.si> "Improve support for running everything as a monolithic application. Submitted by: Lennart Bng Don't return stuff from void functions. Replace the macros in asn1.h with function equivalents. Also make UTF8Strings tolerated in certificates. Use of DEVRANDOM must be #ifdef'ed (the #ifdef was commented out between SSLeay 0.8.1b and 0.9.0b with no apparent reason). If we *want* an error when DEVRANDOM is not defined (it always is with the current e_os.h) we should use #error. Initial support for certificate purpose checking: this will ultimately lead to certificate chain verification. It is VERY EXPERIMENTAL at present though. Add EX_DATA support to X509. Fix a bug in the X509_get_d2i() functions which didn't check if crit was NULL. Fix incorrect usage messages in some commands. Fix for bug in pkcs12 program and typo in ASN1_tag2str(). Fix for bug in pkcs12 program and typo in ASN1_tag2str(). Add support for public key input and output in rsa and dsa utilities with some new DSA public key functions that were missing. Also beginning of a cache for X509_EXTENSION structures: this will allow them to be accessed more quickly for things like certificate chain verification... Fix for d2i_ASN1_bytes and stop PKCS#7 routines crashing is signed message contains no certificates. Also fix typo in RANLIB changes. Add prototypes for new DSA functions Steve added recently. "Pass $(RANLIB) when doing ""make install"" in subdirectories; rsaref needs ist. Submitted by: Will Day" HPUX 11 flags. Contributed by: Peter Huang <PETER_HUANG@HP-Cupertino-om8.om.hp.com> VC++ warning. Fix typo in error message. Submitted by: Alan Batie "Honor BUFSIZZ definition in s_server Bugfix: avoid opening CAfile when it's NULL. "Use a temporary file Fix typo that I introduced when reformatting lines. Keep line lengths < 80 characters. Fix to make s_client and s_server work under Windows. A bit of a hack but an improvement on not working at all. Add new sign and verify members to RSA_METHOD and change SSL code to use sign and verify rather than direct encrypt/decrypt. Various CRL enhancements tidies and workaround for broken CRLs. Add some debug-solaris-...-cc configurations. Initial support for MacOS. This will soon be complemented with MacOS specific source code files and INSTALL.MacOS. I (Andy) have decided to get rid of a number of #include <sys/types.h>. I've verified it's ok (both by examining /usr/include/*.h and compiling) on a number of Unix platforms. Unfortunately I don't have Windows box to verify this on. I really appreciate if somebody could try to compile it and contact me a.s.a.p. in case a problem occurs. Submitted by: Roy Wood <roy@centricsystems.ca> Reviewed by: Andy Polyakov <appro@fy.chalmers.se> Fix yet another bug for client hello handling. "Repair another bug in s23_get_client_hello: tls1 did not survive to restarts Parantheses not needed. Use non-copying BIO interface in ssltest.c. Correction for the testapps lines. Re-enable message about transition <foo.h> => <openssl/foo.h> because various programs are not updated that often and hence still expect header files names without the openssl/ prefix. Fix typo. "This is preliminary support for an ""RSA null"" cipher. Unfortunately when OpenSSL is compiled with NO_RSA Non-copying interface to BIO pairs. It's still totally untested ... New function to convert ASN1 tag values to strings. Also fix typo in asn1.h Fix warnings. Reinitialize conf to NULL whenver ca application is started. Submitted by: Lennart Bang SHA clean-up Intel assembler companion. I've chosen to nest two functions in order to save about 4K. As a result s1-win32.asm doesn't look right (nested PROC/ENDP SEGMENT/ENDS) and it's probably impossible to compile. I assume I have to reconsider... But not today... "SHA clean-up and (LP64) tune-up. ""Clean-up"" stands for the fact that it's using common message digest template ../md32_common.h and sha[1_]dgst.c are reduced down to '#define SHA_[01]' and then '#include ""sha_locl.h""'. It stands ""(LP64)"" there because it's 64 bit platforms which benefit most from the tune-up. The updated code exhibits 40% performance improvement on IRIX64 (sounds too good Reinitialize global variables when necessary (for monolith application). "Use closesocket macro consistently Add new 'spkac' utility and several SPKAC utility functions. RIPEMD160 shape-up Intel assembler companion. Cycle counter benchmarks went down from 1050 to 921 cycles on Pentium II. I haven't checked the figures on Pentium yet. md32_common.h update and accompanying MD5 update. Allow the extension section specified in config files to be overridden on the command line for various utilities. "Allow extensions to be added to certificate requests Allow memory bios to be read only and change PKCS#7 routines to use them. Fix PKCS7_ENC_CONTENT_new() to include a sensible default content type and add support for encrypted content type in PKCS7_set_content(). Undo base64 decoding change (was not a bug fix). editing error. Honor $PERL environment variable in Configure. Submitted by: Even Holen <Even.Holen@itea.ntnu.no> Fix faulty base64 decoding of data that was 46 or 47 bytes long. Submitted by: Ivan Nejgebauer <ian@uns.ns.ac.yu> "Add pkcs7 and des apps to ""make all""." Compile pkcs7 and des apps. Add functions to allow extensions to be added to certificate requests. Modify obj_dat.pl to take its files from the command line. Usage is now perl obj_dat.pl objects.h obj_dat.h this should avoid redirection shell escape problems under Win32. Support for parsing of certificate extensions in PKCS#10 requests: these are used by things like Xenroll. Also include documentation for extendedKeyUsage extension. "BIO_write and BIO_read could Provide fixed seed for parameter generation to speed up -dhe1024. "Ok "Ok Install libRSAglue.a when OpenSSL is build with RSAref. This should now finally make the RSAref users happy... "Backout the following change: | revision 1.109 | date: 1999/06/24 19:39:23;  author: ulf;  state: Exp;  lines: +0 -1 | Use the same CPU recogition method for FreeBSD 3 as for the other FreeBSD | versions. (The FreeBSD and FreeBSD-elf Configure entries were identical.) Because Ulf overlooked the ELF vs. a.out difference I don't think this is a real showstopper.  Our internal verify procedure lacks even more and I consider this more a useful feature request than a release showstopper. "New option ""-crlf"" to s_client and s_server which tells them to convert LFs into CRLFs when forwarding data from stdin to the TLS connection. This is necessary for properly talking HTTP. Because of the code freeze this change is by default disabled for now; without -DAPPS_CRLF "Dont' assume that something starting with '-' is a filename -- ""openssl gendsa -help"" now prints the usage summary DSA_dup_DH. "Configure fix for Windows: under Windows+perl ""system"" ends up going via the command shell which means that redirecttion needs backslashes in the paths." More diagnostics. Revert previous change -- it was an accident. "fix previous modification -- if ssl->cert is NULL The SSL_CTX's cert structure is not relevant for the SSL (because now SSL_new makes a copy). SSL_shutdown was done too early. "Extra i386+gcc bn_div.c tune-up featuring inline division and saving the remainder left in %edx. Here is the resulting performance improvement matrix (improvement as a result of this *and* previous tune-up committed two days ago). The results were obtained by profiling the ""div"" part of the crypto/bn/bnspeed.c. CPU	BN_div	bn_div_words	overall	comment PII	+16%	accumulated by	+2-3%	PII multiplies damn fast! Taking inlining		multiplication out of the loop didn't make too much difference. Eliminating of the multiplication involved in remainder calculation is the major factor. Pentium	+45%	accumulated by	+7-9%	mull isn't that fast and replacing inlining		multiplications with additions in the loop has more visible effect:-) MIPS	+75%	+12%		+20-25%	In addition to the taking mults R10000					out of the loop (giving 12% in the asm/mips3.s) three mults were eliminated in BN_div. Alpha	+30%	+50%		+10-15%	Same as above. But remember that EV4					bn_div_words is a C implementation. It takes 4 Alpha mults in C to do the same thing as 1 MIPS mult in assembler does. So the effect (50%) is more impressive. But not the overall one... Well "Fix to PKCS#12 code to use the cipher block length when allocating a buffer for encrypted data Allow the PKCS#7 (S/MIME encrypt) application to support more than one recipient. Avoid path separator problems. No use in naming the cblock _; the structure still is incompatible to Kerberos. obj_dat.h is autogenerated (it was in the CVS because old versions of Configure didn't generate the file in Windows builds). "Always use buildinf.h Restore compability with kerberos/des.h (I had deleted some seemingly useless definitions such as C_Block earlier). VMS updates. Submitted by: Richard Levitte <levitte@stacken.kth.se> "New RSA flag RSA_FLAG_EXT_PKEY when invoking bn_*_comba[48] result->top wasn't always set correctly. -DPLATFORM and -DCFLAGS command line arguments are no longer used. SPARC Solaris config updates. ./config sences whole range of SPARC instruction sets. Do note that it favors Sun C now if both gcc and cc 4.2 or later are present! SGI IRIX config updates. Minor MD5 tune-up for WIN32 on Intel. Added support for SPARC Linux. GNU assembler (read SPARC Linux) support added. First cut for a proposed code freeze and release dates (from Steve and me). All OpenSSL developers: Please feel free to adjust the dates if they still do not fit into your personal scheduling. Make the perl module compile and eliminate some of the warnings. Still doesn't work (the destructor on BIO and SSL is called immediately after creating the object. Why that??) Torture weak compilers less by not automatically including x509.h where it is not needed. Additional user data argument to pem_password_cb function type and to lots of PEM_... functions. Submitted by: Damien Miller <dmiller@ilogic.com.au> "avoid -DPLATFORM=\""...\"" and -DCFLAGS=\""...\"" command lines Auto-generated file -- this should not be under version control (and the other */asm/*.cpp files are not) Get rid of redundant multiplications in bn_div_words. MIPS III/IV assembler module is reimplemented. "SSL_MODE_ENABLE_PARTIAL_WRITE and SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER work as intended Add optional (compile-time configurable) time to CRYPTO_mem_leaks output. This is much more helpful than the counter when doing tests with the library interactively. DES library changes. Did not check the last SDIR line for excluded algorithms. More DES library cleanups: remove references to srand/rand and delete an unused file. RSA private keys without dmp1/dmq1/iqmp are also valid (but slower). "Judging from various messages on the OpenSSL mailing lists Eliminate a warning: BN_mod_inverse() returns a (BIGNUM *) and remove and unnecessary cast. Beginnings of experimental support for NASM assembler. This is a free assembler for various X86 platforms including Win32. It can output object files that VC++ will tolerate so it could be used to provide assembly language support to Win32 without the need for MASM. This is preliminary stuff: it doesn't even work yet. New function RSA_check_key. Various changes to stop VC++ choking under Win32. Add a debugging option to PKCS#5 v2.0 key generation function. Fix a bug in x509.c that omitted DSA parameters when they didn't match the signers parameters. Changed it to never omit parameters. SXnet code was freeing up the extension data rather than the temporary zone number. Provide CFLAGS and PLATFORM information on Windows platforms. Mention modification to Configure. Don't confuse mk1mf.pl by combining multiple options into one. Disable asserts for standard configurations. "New functions SSL[_CTX]_{set Don't use ...-oldgcc for egcs compiler. More no-xxx option tweaks. "Use ""long long"" for all Win32 gcc ports." "With mingw32 "The Mingw32 configuration entry was missing one colon (found by ""Zot O'Connor"" <zot@ZotConsulting.com>). Also Update TABLE. Close another memory hole. "Avoid some memory holes Use the same CPU recogition method for FreeBSD 3 as for the other FreeBSD versions. (The FreeBSD and FreeBSD-elf Configure entries were identical.) Fix d2i_ASN1_INTEGER() and i2d_ASN1_INTEGER() so it correctly works out the length of negative integers. "Implement STACK_OF(ANS1_OBJECT) for extended key usage extension Make some debug-... configurations more useful for debugging. Don't shadow. Convert the CONF library to use a typesafe stack: a STACK_OF(CONF_VALUE). It seemed like a good idea at the time... several hours later it was rather obvious that these are used all over the place making the changes rather extensive. New functions CONF_load_bio() and CONF_load_fp() to load a configuration file from a bio or fp. Added some more constification to the BN library. "Use same name in the definition as in the header file declaration :-/ (the extra ""get"" makes the name quite long Don't access configuration files outside the source tree. Recognize CPU on BSD/OS. "Some people don't have /dev/fd/0 on Solaris Comment adjusted to reality. rc4_locl.h and bf_locl.h incorrectly defined _HEADER_...; opensslconf.h always expects HEADER_... (no leading underscore). Submitted by: Andy Polyakov <appro@fy.chalmers.se> Provide fallback configurations for all hpux... configurations (problems with BN_LLONG have been reported both for hpux-cc and for hpux10-gcc). Avoid some warnings (on silly compilers). Fix to i2d_DSAPublicKey() to return the correct length. Submitted by: Jeon KyoungHo <khjeon@sds.samsung.co.kr> Changes for BSD/OS 4. "Don't use unquoted whitespace in ""case"" case." "Document the X509V3 code and change some of the extension function pointers to use 'void *' rather than 'char *' for an ""arbitrary extension""." NeXT 3.3 can handle -O3 (3.0 can't). Avoid warning. Fix determination of Perl interpreter: A perl or perl5 _directory_ in $PATH was also accepted as the interpreter. "Reformat and ""modernise"" the sign.c demo." "Put SC5 warning back in Circumvent bug in SC5 without patch #107357-01. Submitted by: Andy Polyakov <appro@fy.chalmers.se> Don't define _ANSI_SOURCE for NetBSD. Submitted by: Eric Ding <ericding@MIT.EDU> Change the PEM function implementation to use a common set of macros: this should make modifying them easier. Fix the selfsign demo: it was rather ancient and used deleted functions. des_cbc_encrypt / des_ncbc_encrypt issue. "Unify DES library: ncbc_enc.c wasn't used Remove old libdes version number. DES CBC change looks dubious to me. "Make ""make test"" fail if bntest fails an internal selfcheck." "Don't #define _ """request"" added." Use mkdir-p.pl more efficiently. Don't make assumptions on what the path looks like. Complete support for PKCS#5 v2.0. Still needs extensive testing. "This is the main PKCS#5 v2.0 key generation function "Introduce ""BIO pairs"" "mkdir -p is not fully portable (according to Marc Crispin "Use only -O More general definition for S_ISDIR (needed not only for VMS but also for NeXT). More PKCS#5 v2.0 development. Add a function to setup a PKCS#5 v2.0 AlgorithmIdentifier and make various ASN1 fixes. Rewrite PBE handling read to support PKCS#5 v2.0 and update the function list for Win32. Change so PEM private key read routines can handle PKCS#8 transparently. "Add d2i Add a 'pkcs8' application for initial PKCS#8 support. Still needs lots more options to handle encrypted and unencrypted forms and DER format input and output. Add PKCS#5 v1.5 compatible algorithms and initial PKCS#8 support. PKCS#8 needs more work: need an application and make the private key routines automatically handle PKCS#8. Support the EBCDIC character set and BS2000/OSD-POSIX (work in progress). Submitted by: Martin Kraemer <Martin.Kraemer@MchP.Siemens.De> Support the EBCDIC character set and BS2000/OSD-POSIX (work in progress). Submitted by: Martin Kraemer <Martin.Kraemer@MchP.Siemens.De> Support the EBCDIC character set and BS2000/OSD-POSIX (work in progress). Submitted by: Martin Kraemer <Martin.Kraemer@MchP.Siemens.De> Generate no-xxx options for missing ciphers. Define a macro to avoid name conflicts. gcc dumps core on HPUX. More evil cast removal. Evil cast extermination. Move stack implementations to more natural places. Labels longer than eight characters might cause problems. Borland C fix. Submitted by: Andy Polyakov More consistency. Complain about deficiency of internal_verify. "Adjust bsdi-elf-gcc to look more like FreeBSD-elf Yet another stack. More safe stack. Update dependencies. Some assembler-related clean-ups. Updated C++ SSL demos. Submitted (a month ago) by: Wade Scholine Updated some demos. Submitted by: Sean O Riordain <Sean.ORiordain@cyrona.com> Change function call according to current API. "Ignore directories created by ""make -f makefile.one""." "I386_ONLY is defined in opensslconf.h Circument egcs bug. Submitted by: Andy Polyakov <appro@fy.chalmers.se> Fix for memory leak. Update md5 assembly source for Win32. Add closing parenthesis to usage output. Temporary workaround for IRIX64 build. Submitted by: Andy Polyakov <appro@fy.chalmers.se> Last minute VMS updates for 0.9.3. Submitted by: Richard Levitte Move to beta 3. Detect linux-mips. Let ssl_get_prev_session reliably work in multi-threaded settings. Set ext_list to NULL after use. Fixup do_nt.bat for new mk1mf arg order. We need e_os.h here. Older versions of SINIX C development system inherited a bug from SGI' cc; enable workaround. Submitted by: Martin Kraemer "Add a kludge :-( There were problems with putting e_os.h just into the top directory "Don't install e_os.h in include/openssl "On seconds thoughts Prepare for a beta release. NeXT doesn't have dirent. Pointed out by Juergen Moellenhoff <jurgen@oic.de> Detect Siemens platforms. Submitted by: Martin Kraemer <Martin.Kraemer@MchP.Siemens.De> Some solaris-usparc MD5 fixes. Declare test key data as static. Submitted by: Andy Polyakov <appro@fy.chalmers.se> Include some notes on basic extension usage and change openssl.cnf to usually do sensible things with extensions. Add -mv8 to solaris-usparc-oldgcc. Note that the numbering scheme used to be different. Convert gcc version detection (for solaris-usparc-gcc) into a form better suited for finding what went wrong in case that some compiler versions create an output we can't parse. "Bugfix: GCCVAR contains two lines (""Reading specs ..."" and the actual version) "For Solaris with old gcc versions (that don't understand -mcpu=ultrasparc) gcc < 2.8 does not support ultrasparc. "Change default PKCS#12 iteration count to 2048 Get rid of some unnecessary casts and add a necessary one. Spelling error. Protect applications from failing to compile when they try to directly include opensslv.h. Move prototypes to the right place. "If we couldn't handle ""-showcerts"" (which happens with the current SSL2 implementation) "Mention ""make depend""." Various clarifications to extension docs: change the name of literal extensions from RAW to DER to avoid confusion with raw extensions. Update NEWS file. Mention Andy's assembler stuff. mk1mf.pl syntax has been changed. "Additional gcc (in some versions) doesn't like the const_des_cblock typedef. So omit it for now :-( "Rename ""openssl x509"" option ""-config"" to ""-extfile"" "Fix various less obvious bugs in PKCS#7 handling: such as not zeroing the secret key before we've encrypted it and using the right NID for RC2-64. Add various arguments to the experimental programs 'dec' and 'enc' to make testing less painful. This stuff has now been tested against Netscape Messenger and it can encrypt and decrypt S/MIME messages with RC2 (128 "Change type of various DES function arguments from des_cblock (meaning pointer to char) to des_cblock * (meaning pointer to array with 8 char elements) "Added a comment pointing out the behaviour of ""openssl x509 -conf ..."" "Marked probable bug Convert void *. Fix some obvious bugs in the PKCS#7 library handling. It didn't try to find the right RecipientInfo based on the recipient certificate (so would fail a lot of the time) and fixup cipher structures to correctly (maybe) modify the AlgorithmIdentifiers.  Largely untested at present... this will be fixed in due course. Well the stuff was broken to begin with so if its broken now then you haven't lost anything :-) Various Win32 fixes. Change args in do_ms.bat to put platform last. Fix unsigned/signed cmp error in asn1parse. Change various pem_all.c args to use pem_password_cb. "Use OPENSSL_GLOBAL Update dependencies. "Use e_os2.h e_os2.h is used for things that must be visible when external applications use (certain parts of) OpenSSL. Update. "Return 0 for an error Avoid compiler warnings for x86. The encoding of negative ASN1 INTEGERs and the conversion of BNs to negative integers was completely broken. Also added a NEG_PUBKEY_BUG compilation option to compensate for public keys improperly encoded as negative integers. "Various bugfixes: Uses locking for some more of the stuff that is not thread-safe (where thread-safe counterparts are not available on all platforms) Introduce and use function typedef pem_password_cb so that we don't call those functions without having a parameter list declaration. (There are various similar cases left ...) Delete a wish. "Add release dates to the ""CHANGES"" file "Don't use reserved name ""_encrypt"" for parameters; instead I've picked ""enc"" Cut&paste error. Some tiny clean-ups related to the cert_st / sess_cert_st change. "New structure type SESS_CERT used instead of CERT inside SSL_SESSION. While modifying the sources "For solaris-usparc configurations Remove redundant ifdef. VMS support bug fixes. Reorganize and speed up MD5. Submitted by: Andy Polyakov <appro@fy.chalmers.se> VMS support. Submitted by: Richard Levitte <richard@levitte.org> Spacing in comment corrected. mk1mf.pl and mkdef.pl read OPTIONS from toplevel Makefile. Configure no longer changes files in place. Several of the EVP_CIPHER structures had the get and set asn1 parameter functions transposed. Caldera OpenLinux passes test now. Use ifndef PEDANTIC for all inline assembler. argc counting bug fixed. Submitted by: Tomas Hulek Reviewed by: PR: Clarify comment. Submitted by: Reviewed by: PR: Move openssl.cnf out of lib/. Submitted by: Richard Levitte <levitte@stacken.kth.se> And I thought I could spell ... but in caps really everything looks the same. Submitted by: Reviewed by: PR: "Make SSL library a little more fool-proof by not requiring any longer that SSL_set_{accept "Various PKCS#7 related fixes Fix for +xxx options. Submitted by: Anonymous "The various character predicates (isspace and the like) may not be used with negative char values Moved some variable declarations inside blocks where they are needed so that warnings about unused variables (for certain -D... constellations) are avoided; this corresponds to the earlier change for SHA1. Submitted by: Reviewed by: PR: "New entry debug-solaris-usparc-gcc "Various PKCS#7 fixes to properly (maybe!) handle PKCS#7 enveloped data. Containts elements of code by Sebastian Akerman <sak@parallelconsulting.com> and made a bit less ""naughty"" by Steve." "No actual change One comment was in the wrong line ... some others are new. Submitted by: Reviewed by: PR: "Kill evil casts Makefile.save was missing here. Submitted by: Reviewed by: PR: "Some tiny changes to the source code to make future diffs smaller when restructuring the cert_st handling (removed unnused parts "Move variable definitions into the blocks where they are really needed "Use ""const char *"" instead of ""char *"" for filenames passed to functions. Submitted by: Reviewed by: PR:" Various Win32 fixes. Win95 doesn't support MoveFileEx() (which was used for a Win32 version of rename() ). There isn't a precise rename() equivalent under Win95: the standard rename() complains if the destination already exists so replaced with a combination of unlink() and MoveFile(). no-xxx option to exclude ciphers. "This was an unused derivate of an old version of s_client.c that had been changed so that it almost could be used under Windows. No one asked to keep it (and no one volunteered to bring it into useable state) Generate DLLs with Mingw32. Bodo didn't do that. Some comments. Submitted by: Reviewed by: PR: config is Unix specific. Add missing semicolon. Submitted by: Janez Jere <jj@void.si> Typo. Borland C++ builder. Submitted by: Janez Jere <jj@void.si> Support additional Win32 compilers. Borland C submitted by: Janez Jere <jj@void.si> Info on how to submit patches. Note about required SC5.0 patches. Fix problem with /usr/ccs/lib/cpp. Submitted by: Andy Polyakov <appro@fy.chalmers.se> SHA-1 cleanups and performance enhancements. Submitted by: Andy Polyakov <appro@fy.chalmers.se> Recognise Ultra Sparc and compiler version number. Andy Polyakov points out there are default rules in make in gmake for this. Sparc v8plus assembler. Submitted by: Andy Polyakov <appro@fy.chalmers.se> "c_rehash doesn't work at that point of the installation "Update HPUX config Add other people who've done stackification. "Convert casted X509_INFO stacks to type-safe STACK_OF(X509_INFO). PS: Feel free to move the IMPLEMENT_STACK_OF(X509_INFO) from crypto/asn1/x_info.c to any other place where you think it fits better. X509_INFO is a structure slightly spreaded over ASN.1 Some more stack stuff. Update dependencies. Entry for resolved error macro confusion. Submitted by: Reviewed by: PR: Submitted by: Reviewed by: PR: Another stack. Another safe stack. Start assembling some NEWS entries.... Support verify_depth from the SSL API without need for user-defined callbacks. Submitted by: Reviewed by: PR: "Point out the ""rehashing skipped"" is not a problem. Submitted by: Reviewed by: PR:" Use correct error macro so that error messages make sense. Submitted by: Reviewed by: PR: Broken line that was too long. Submitted by: Reviewed by: PR: Better Sun config. Submitted by: Anonymous More information about installing. Hopefully improved compatibility with earlier versions of Perl5. Submitted by: Reviewed by: PR: Remove extra brace. Submitted by: Reviewed by: PR: Fix a couple of cases where an attempt is made to lock an already locked mutex. $perl should never be empty. Unused file. Support INSTALL_PREFIX for packagers. Submitted by: Reviewed by: PR: Bug fix. "Compare with BN_mod_exp_simple "Pass PERL to sub-Makefiles during ""make links"". Submitted by: Reviewed by: PR:" "Fix make target ""install"". Submitted by: Niels Poppe Reviewed by: PR:" Typo fixed. Submitted by: Reviewed by: PR: Change error message for consistency. Autogenerated files. Decrypt test vector data even if previous decryption failed to get better diagnostics. "A faster (and more general Install various scripts to $(OPENSSLDIR)/misc instead of $(INSTALLTOP)/bin. Submitted by: Reviewed by: PR: Linux shared libraries (now in Makefile.ssl). More portable blowfish macros. Submitted by: Andy Polyakov <appro@fy.chalmers.se> A new comment. Submitted by: Reviewed by: PR: Update NO_* macros. Add missing DEPFLAG. Oops ... fix warning. Add PKCS#12 documentation and new option in x509 to add certificate extensions. Last week I proposed to increase the version number to 1.0. So far nobody complained... Ignore autogenerated file. Submitted by: Anonymous Remove NOPROTO definitions and error code comments. "Extensively changed the DEF file generator mkdef.pl to use a modified version of Ulf's prototype parser Fixes so it will compile again under Win32. Fixed a typo. Submitted by: Reviewed by: PR: Comment changed. Submitted by: Reviewed by: PR: exit on error. "Removed traces of cryptall.h New Configure option --openssldir to replace ssldir.pl. cryptall.h is not needed for anything and cannot even be #include-d without producing error messages. Submitted by: Reviewed by: PR: Fix header files so that any one can be included first. Submitted by: Reviewed by: PR: "Change the command line options of mkerr.pl so -static is now default and a -write option is needed to actually change anything. Second attempt at getting rid of ERR """perl util/mkerr.pl -static -recurse -rebuild"" because the previous codebase apparently was inconsistent.  And crypto/Makefile.ssl *does* need an ERRC .. Submitted by: Reviewed by: PR:" Removed superfluous reference to ERRC. Submitted by: Reviewed by: PR: Restore ERRC definitions that are needed to compile the library. Submitted by: Reviewed by: PR: Submitted by: Reviewed by: PR: "Avoid ""incomprehensible"" errors when required definitions are missing. Submitted by: Reviewed by: PR:" "Delete the unnecessary ERR and ERRC lines in makefiles "ANSIfy "Complete rewrite of the error code generation script. It now runs as a single script Change #include filenames from <foo.h> to <openssl.h>. Submitted by: Reviewed by: PR: *.org files are gone for good. Andy Polyakov points out that BF_PTR2 is slower than the generic case. Undo evil cast! <g> Function didn't get ANSIfied because of unusual formatting. Recognize CPU version on NetBSD and FreeBSD. NetBSD entry submitted by: Todd Vierling <tv@pobox.com> Work with -pedantic! Remove references to .org header file names. Be more specify about system requirements. CVS confusion? Submitted by: Reviewed by: PR: Don't return 0 from ssl2_read when a packet with empty payload is received. Submitted by: Reviewed by: PR: Reverse unexplained change. Fixed some race conditions. Submitted by: Reviewed by: PR: New header file opensslconf.h contains the macros set by Configure. The configuration process could use some more clean-ups. Fix lots of warnings. Submitted by: Richard Levitte <levitte@stacken.kth.se> Fix some warnings. Problems with 64-bit long. Pointed out by Andy Polyakov <appro@fy.chalmers.se>. Remove useless defines. Problems with 64-bit long. Pointed out by Andy Polyakov <appro@fy.chalmers.se>. Various fixes so Win32 compile may work. Convert GeneralNames to use safe stack. Finish off support for Certificate Policies extension. Clean up prototypes (prepare for removing NOPROTO). Fix typos in error codes. Definition did not match prototype. Pointed out by: Bernhard Simon <simon@zid.tuwien.ac.at> Defunct assembler files removed; various cleanups. New Ultrix and Alpha entries submitted by Bernhard Simon <simon@zid.tuwien.ac.at>. SPARC v8 assembler BIGNUM code. Submitted by: Andy Polyakov <appro@fy.chalmers.se> Removed extra semicolons. Submitted by: Reviewed by: PR: Pass $PERL on make errors. Initial support for Certificate Policies extension: print out works but setting isn't fully implemented (yet). Allow asn1parse to print out VISIBLESTRING and some code needed for certificate policies extension. Another STACK bites the dust. Add initial support for r2i RAW extensions which can access the config database add various X509V3_CTX helper functions and support for LHASH as the config database. Write random seed file in binary mode. Submitted by: Richard Levitte <levitte@stacken.kth.se> "Fix a horrible BN bug in bn_expand2 which caused BN_add_word() et al to fail when they cause the destination to expand. To see how evil this is try this: #include <pem.h> main() { BIGNUM *bn = NULL; int i; bn = BN_new(); BN_hex2bn(&bn "Just use an ANSI declaration Add some utilities to support SXNet extension also add support in DEF files generator to typesafe stacks. Make Windows compilers happy. Submitted by:Tom Titchener Reviewed by: PR: Some tiny fixes. Submitted by: Reviewed by: PR: Submitted by: Reviewed by: PR: Typo. SSL_ALLOW_ENULL was renamed to SSL_FORBID_ENULL some time ago by Ben. "New Configure option ""rsaref""." Add type-safe STACKs and SETs. Add `openssl ca -revoke <certfile>' facility which revokes a certificate specified in <certfile> by updating the entry in the index.txt file. This way one no longer has to edit the index.txt file manually for revoking a certificate. The -revoke option does the gory details now. Submitted by: Massimiliano Pala <madwolf@openca.org> Cleaned up and integrated by: Ralf S. Engelschall Fix `openssl crl -noout -text' combination where `-noout' killed the `-text' option at all and this way the `-noout -text' combination was inconsistent in `openssl crl' with the friends in `openssl x509|rsa|dsa'. Make sure a corresponding plain text error message exists for the X509_V_ERR_CERT_REVOKED/23 error number which can occur when a verify callback function determined that a certificate was revoked. Rid the world of yet more evil casts. Install signal handler if we are using sigaction. Bugfix: s_client occasionally would sleep in select() when it should have checked SSL_pending() first. Submitted by: Reviewed by: PR: Test PKCS#1 v1.5 padding as well. Use Perl 5 even if Perl 4 comes first in the search path. Tiny comment to improve code comprehensibility. Submitted by: Reviewed by: PR: Add PKCS#5 v2.0 ASN1 structures. Avoid error message about missing gcc. Submitted by: Niels Poppe <niels@netbox.org> "Be more optimistic about the availability of termios for ~ECHO Bad dependencies. Test RSA after the BN library it is based on. Submitted by: Anonymous <nobody@replay.com> Fix linux-mips entry. Submitted by: Niels Poppe <niels@netbox.org> bn_div_words has been added to alpha.s (Hannes Reinecke's patch). More assembler problems; new OCSP patch; obsolete patches removed from list. Remove obsolete files from SSLeay 0.8. Avoid EADDRINUSE for s_server. Submitted by: Reviewed by: PR: Include bn.h instead of defining BIGNUM as char. Pointer to Ariel Glenn's SSLeay documentation. New Makefile variables $(RANLIB) and $(PERL). Don't shadow. Remove file that is to be auto-generated by sha1-586.pl. PR: "New switch ""386"" to generate 80386 code (emulate bswap)." "Remove deleted PKCS#12 functions from pkcs12.h "Added comments to des_enc_{read Yet more PKCS#12 integration: add lots of files under crypto/pkcs12 and add them to the build environment. "Further PKCS#12 integration This is the beginning of PKCS#12 integration. This just adds the PKCS#12 objects to objects.h NOTE: during this integration it will not be possible to compile my PKCS#12 program against OpenSSL because there will be conflicts between the external functionality and that being added to the core code. Add initial support for Thawte strong extranet certificate extensions and include an 'indent' option to V3 stuff. Linux PPC support. "Fix Alpha assembler Make sure the RSA OAEP test is skipped under -DRSAref because OAEP isn't supported when OpenSSL is built with RSAref. Submitted by: Ulf Moeller <ulf@fitug.de> Reviewed by: Ralf S. Engelschall Move definitions of IS_SET/IS_SEQUENCE inside crypto/asn1/asn1.h so they no longer are missing under -DNOPROTO. Submitted by: Soren S. Jorvang <soren@t.dk> Reviewed by: Ralf S. Engelschall "Ops function names recently changed - consistency. Bring style of INSTALL* documents in sync with README file and fix some inconsistencies. "Remove obsolete references to SSLeay and change default PLATFORM from ""FreeBSD"" to the generic ""dist"" as it's done implicitly by ""make dist""." Fix security hole. "Add missing pipe char to ""make dist"" target. Found by Richard Levitte <levitte@stacken.kth.se>" "Some more source tree cleanups (removed obsolete files crypto/bf/asm/bf586.pl "Using int for the digest length in EVP_DigestFinal() broke some compilers. Changed to unsigned int: also need an evil cast in pk7_doit.c because a signed Remove some references which called malloc and free instead of Malloc and Free. Delete Win32 test with testreq.pem and req: there is already a test with testreq2.pem. Fail if test fails. "This is now generated "Delete NULL ciphers from 'ALL' in the cipher list aliases. This means that NULL ciphers specifically have to be enabled with e.g. ""DEFAULT:eNULL"". This prevents cipher lists from inadvertantly having NULL ciphers at the top of their list (e.g. the default ones) because they didn't have to be taken into account before." "Be less restrictive and allow also `perl util/perlpath.pl /path/to/bin/perl' in addition to `perl util/perlpath.pl /path/to/bin' "Make CC Remove some hard coded paths from Win32 test stuff. Remake cert links when the app is built. Make it more clear what option -WWW to s_server does. Comment out two unimplemented functions from bio.h. Attempt to get the Win32 test batch file going again. Add missing funtions from non ANSI section of header files and add missing ordinals to libeay.num. Make links no longer needed. Make `openssl version' output lines consistent. "Second round of fixing the OpenSSL perl/ stuff. It now at least compiled fine under Unix and passes some trivial tests I've now added. But the whole stuff is horribly incomplete Delete obsolete old X509V3 files. "Don't make links in INSTALL doc - also Don't make links on Windoze. Linux MIPS support. "Added support for adding extensions to CRLs "Add a useful kludge to allow package maintainers to specify compiler and other platforms details on the command line without having to patch the Configure script everytime: One now can use ``perl Configure <id>:<details>'' "Allow DSO flags like -fpic "Move the SSL_CTX_xxx defines at the top of ssl.h to the location of other SSL_CTX_xxx defines. What was the reason to move them to the top "Fix export ciphersuites "Add a first cut for a NEWS document similar to what other packages (mostly GNU packages) provide.  The idea is that because of the large number of CHANGES entries Cleaned up the LICENSE document: The official contact for any license questions now is the OpenSSL core team under openssl-core@openssl.org.  And add a paragraph about the dual-license situation to make sure people recognize that _BOTH_ the OpenSSL license _AND_ the SSLeay license apply to the OpenSSL toolkit. "General source tree makefile cleanups: Made `making xxx in yyy...' display consistent in the source tree and replaced `/bin/rm' by `rm'.  Additonally cleaned up the `make links' target: Remove unnecessary semicolons Fix GCC warning... t_req.c: In function `X509_REQ_print': t_req.c:181: warning: suggest explicit braces to avoid ambiguous `else' Add an extra 'raw' function r2i to the extension code. Nothing uses this yet and it is just a place holder for functionality to be added later. Its been added now so the X509V3_EXT_METHOD structure shouldn't (hopefully) have to change after the release. "Fix the PKCS#7 stuff: signature verify could fail if attributes reordered Workaround for a Win95 console bug triggered by the password read stuff. Deleted my str_dup() function from X509V3: the same functionality is provided by BUF_MEM_strdup(). Added text documentation to the BUF_MEM stuff. "Added the new `Includes OpenSSL Cryptography Software' button as doc/openssl_button.{gif Remove confusing variables in function signatures in files ssl/ssl_lib.c and ssl/ssl.h. At least the double ctx-variable confused some compilers. Submitted by: Lennart Bong <lob@kulthea.stacken.kth.se> Reviewed by: Ralf S. Engelschall Don't install bss_file.c under PREFIX/include/.  It was introduced by Eric between SSLeay 0.8 and 0.9 and just looks useless and confusing. Pointed out by: Lennart Bong <lob@kulthea.stacken.kth.se> Submitted by: Ralf S. Engelschall Fix the Win32 compile environment and add various changes so it will now compile under Win32 (9X and NT) again. Note: some signed/unsigned changes recently checked in were killing the Win32 compile. "Add functions to add certs to stacks doxygen configuration file. Get rid of remaining C++-style comments which strict C compilers hate. (Pointed out by Carlos Amengual). "Add a bunch of SSL_xxx() functions for configuring the temporary RSA and DH private keys and/or callback functions which directly correspond to their SSL_CTX_xxx() counterparts but work on a per-connection basis. This is needed for applications which have to configure certificates on a per-connection basis (e.g. Apache+mod_ssl) instead of a per-context basis (e.g. s_server). For the RSA certificate situation is makes no difference "Fix the cipher decision scheme for export ciphers: the export bits are *not* within SSL_MKEY_MASK or SSL_AUTH_MASK Change type of another md_len variable in pk7_doit.c:PKCS7_dataFinal() from `int' to `unsigned int' because it's a length and initialized by EVP_DigestFinal() which expects an `unsigned int *'. Submitted by: Richard Levitte <levitte@stacken.kth.se> Reviewed by: Ralf S. Engelschall "Fix clearly untested ""clever"" hack." "Make `openssl x509 -noout -modulus' functional also for DSA certificates (in addition to RSA certificates) to match the behaviour of `openssl dsa -noout -modulus' as it's already the case for `openssl rsa -noout -modulus'.  For RSA the -modulus is the real ""modulus"" while for DSA currently the public key is printed (a decision which was already done by `openssl dsa -modulus' in the past) which serves a similar purpose.  Additionally the NO_RSA no longer completely removes the whole -modulus option; it now only avoids using the RSA stuff. Same applies to NO_DSA now Fix more warnings. Fix usage message on gendsa: 1. The dsaparam argument is mandatory and not optional 2. Add a little text what this actually is: a filename Redo the way 'req' and 'ca' add objects: add support for oid_section. Various changes to make this stuff compile under Win32 and VC++ with and without -debug option to mk1mf.pl. Change _export to is_export (_export is a reserved word under VC++). Add yucky function prototype function pointer casts. Sanitise the included files in crypto/x509v3. Also changed ssleay.exe target to openssl.exe More stuff for new TLS ciphersuites. Add support for new TLS export ciphersuites. Add preliminary user level config documentation for extension stuff. Programming info will come later... Feel free to reformat and tidy this up... Make RSA_NO_PADDING really use no padding. Submitted by: Ulf Moeller <ulf@fitug.de> "Add more functionality to issuer alt name and subject alt name. New options to include email addresses from DN and copy details from issuer certificate. Include examples in openssl.cnf "Ok Generate errors when public/private key check is done. Preliminary support for reason code CRL extension. Patch so the new crl stuff actually compiles this time :-) Also update the Win32 ordinals. "Overhaul 'crl' application Fix case of new functions in error files. Add OAEP. Added code to GENERAL_NAME with support for more options and preliminary support for assignment in config files. Patch to Configure script. For some reason the BN_ASM part was truncated to the first word which broke (at least) the Linux compile. Hopefully this wont break other platforms. Update error codes. "Add support for raw extensions. This means that you can include the DER encoding of an arbitrary extension: e.g. 1.3.4.5=critical Make sure latest Perl versions don't interpret some generated C array as Perl array code in the crypto/err/err_genc.pl script. Submitted by: Lars Weber <3weber@informatik.uni-hamburg.de> Reviewed by: Ralf s. Engelschall Convert ms/do_ms.bat to DOS EOL format of DOS chokes on it. More Win32 fixes and upsdate INSTALL.W32 documentation. Modify configure script to generate some files that Win32 needs and new script that does the same as 'make files'. "Fix ghastly DES declarations Fix typo in asn1.h (PRINTABLESTRING_STRING) and fix a bug in object creation perl script. It failed if the OID had any zeros in it. Add support for 3DES CBCM mode. "In the absence of feedback either way "Whoops Actually use BN when selected! "Make the 'crypto' and 'ssl' options in the perl script mkdef.pl really work "Delete a few unused files in apps "First cut for a very conservative source tree cleanup: 1. merge various obsolete readme texts into doc/ssleay.txt where we collect the old documents and readme texts. 2. remove the first part of files where I'm already sure that we no longer need them because of three reasons: either they are just temporary files which were left by Eric or they are preserved original files where I've verified that the diff is also available in the CVS via ""cvs diff -rSSLeay_0_8_1b"" or they were renamed (as it was definitely the case for the crypto/md/ stuff). We've still a horrible mess under crypto/bn/asm/.  There for a lot of files I'm sure whether we need them or not. So Oops. Forgot to do a 'make errors'. "More extension code. Incomplete support for subject and issuer alt name Support for ASN1 ENUMERATED type. This copies and duplicates the ASN1_INTEGER code and adds support to ASN1_TYPE and asn1parse. Comment out def of currently unimplemented function to stop warning. Fix filename in comment. Add support for GeneralName and GeneralNames extensions. Also preliminary support for subject and issuer alt name. Add a new ASN1 macro and fix a nasty bug that left an ASN1 buffer modified on an error condition with IMPLICIT tagging. Delete legacy file. Clear error we don't care about. Delete bogus V3 prototype and update the *.num files to include ordinals for the new functions. Update MINFO. More Win32 fixes. The Configure script used to give *lots* of warnings about use of undefined variables: kludge so they all get initialised. Also avoid use of POSIX module. Fix various stuff: that VC++ 5.0 chokes on: 1. Add *lots* of missing prototypes for static ssl functions. 2. VC++ doesn't understand the 'LL' suffix for 64 bits constants: change bn.org 3. Add a few missing prototypes in pem.org Fix mk1mf.pl so it outputs a Makefile that doesn't choke Win95. Fix mkdef.pl so it doesn't truncate longer names. Yet more pissing about to get PEM built at the right moment. "Add new function Make sure `make rehash' target really finds the `openssl' program. Squeeze a bit more speed out of MD5 assembler. "Update STATUS More pissing about to get pem.h to behave properly. Update dependencies. Add CygWin32 platform information to Configure script. Submitted by: Alan Batie <batie@aahz.jf.intel.com> New program 'nseq' added to apps to allow Netscape certificate sequences to be pulled apart and built. Fill in more contents for the openssl(1) manpage. Fixes to BN code.  Previously the default was to define BN_RECURSION but the BN code had some problems that would cause failures when doing certificate verification and some other functions. Submitted by: Eric A Young from a C2Net version of SSLeay Reviewed by: Mark J Cox PR: Add ASN1 code for netscape certificate sequences. Declare correctly on FreeBSD. Reduce header dependencies. More X509 V3 stuff. Add support for extensions in the 'req' application so that: openssl req -x509 -new -out cert.pem will take extensions from openssl.cnf a sample for a CA is included. Also change the directory order so pem is nearer the end. Otherwise 'make links' wont work because pem.h can't be built. "Continuing adding X509 V3 support. This starts to integrate the code with the main library "Initial addition of new X509 V3 files Start keeping track of wishes people make on our mailing lists to make sure we don't forget them and this way we have them bundled together. Correct bracketing error. Continued patches so certificates and CRLs now can support and use GeneralizedTime. Spelling mistake. "This is the result of a ""make errors"" with the new error building functionality in place." Fix major cockup with short keys in CAST-128. Update CHANGES for GeneralizedTime info. Oops. Missing NULL frees. Remove pointless MD5 hash. Contributed by: Anonymous <nobody@replay.com> Generate an error on an invalid directory. "Time to blow up the source tree :-) This is the beginning of support for GeneralizedTime. At several points PKIX specifies that GeneralizedTime can be used but OpenSSL doesn't currently support it. This patch adds several files and a bunch of functions. Of interest is the ASN1_TIME structure and its related functions. At several points certificates Fix parameters to dummy function BN_ref_mod_exp(). "Fix OBJ_txt2nid(): old function was broken when input used the ""dot"" form "Add prototype Fix the gendsa program and add it to the app list. The progs.h file is auto generated but not auto updated so it is included. Also remove the encryption from the sample DSA keys. Get rid of redundant files. Accept NULL in *_free. Send the right CAs to the client. Fix numeric -newkey args. Contributed by: Bodo Moeller <3moeller@informatik.uni-hamburg.de> Fix export tests. "Fix things so DH_free() will be no-op when passed NULL Pass on BIO_CTRL_FLUSH. Submitted by: Arne Ansper <arne@ats.cyber.ee> The dir is named util/ and better to explicitly call the perl interpreter because not everyone has it in /usr/local/bin/perl. More EVP_PKEY patches for new functionality. "Make sure the already existing X509_STORE->depth variable is initialized in X509_STORE_new() The dir is named util/ and better to explicitly call the perl interpreter because not everyone has it in /usr/local/bin/perl. Fix reference counting. Don't confuse matters by using the wrong library. Fix tests for ssleay -> openssl. "First cut of a cleanup for apps/. First the `ssleay' program is now named `openssl' and second Move DSA test in ca.c inside #ifdef and make pubkey BIT STRING always have zero unused bits. Add extended key usage OID and update STATUS file. Make the installation documentation easier to follow. This is a quick hack conversion of the 'CA.sh' script to perl. It fixes one bug in the original but is otherwise just as horrible :-) Document recent changes. Fix name delete problem. "Puhhh... now we've documented the prototypes of all 214 API ""functions"".  This is a pain to do "Fix version stuff: 1. The already released version was 0.9.1c and not 0.9.1b 2. The next release should be 0.9.2 and not 0.9.1d "Fix for sk_insert bug: it never worked properly. Allow explicit tag asn macros to handle indefinite length constructed stuff: without this certain ""certificates"" can't be read in." Cleanup of doc/ directory: The old/obsolete SSLeay files are now assembled together in a ssleay.txt file. Create a STATUS file to coordinate us. Feel free to edit Fix incorrect DER encoding of SETs and all knock-ons from that. "Import the first cut for manual pages. They are written in Perl's POD format for two reasons: First Perl is already needed for SSLeay and second "This is not a bug in NT Perl "Add strictness This commit was generated by cvs2svn to track changes on a CVS vendor branch. This commit was generated by cvs2svn to track changes on a CVS vendor branch. This commit was generated by cvs2svn to track changes on a CVS vendor branch. This commit was generated by cvs2svn to track changes on a CVS vendor branch. This commit was generated by cvs2svn to track changes on a CVS vendor branch. Import of old SSLeay release: SSLeay 0.8.1b 