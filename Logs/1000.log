Fix enable-zlib no-comp
Fix no-rc4
Move declaration of i into blocks where it is used
sctp requires dgram
RT4660: BIO_METHODs should be const
BIO_new etc. don't need a non-const BIO_METHOD This allows all the built-in method tables to live in .rodata
Downcase VMS config names
On VMS we downcase option names which means that config names are downcased as well so they need to be downcased in the target table to be found
Just like bio_out bio_err needs the linebuffer filter on VMS
Adds s2i function for ct_precert_poison X509 extension
Allows CONF files for certificate requests to specify that a pre- certificate should be created (see RFC6962)
Fix memory leak where fdlookup linked list is not freed during ASYNC_WAIT_CTX_free
Fix no-ts with --strict-warnings
Fix no-sock
Misc fixes for no-sock
Fix no-gost
Configure had the wrong name for the no-gost option
Don't use hardcoded values for types
In for loop values introduce a dummy to protect against empty list
In constructions such as 'for x in $(MAKEVAR); do ...' there's the possibility that $(MAKEVAR) is en empty value Some shells don't like that so introduce a dummy value that gets discarded:
for x in dummy $(MAKEVAR); do if [ "$$x" = "dummy" ]; then continue; fi
Closes RT#4459
Fix no-seed
Fix compilation with --strict-warnings and no-seed
Remove the no-rijndael option
Rijndael is an old name for AES
Fix no-scrypt
Fix the evp tests when no-scrypt is used
Skip the CMS tests if CMS is disabled
This fixes the no-cms compile time option
Fix no-dsa
Misc fixes for no-dsa
Build system: VC-WIN64I fixups
Configurations/windows-makefile.tmpl: respect no-makedepend
Windows build system: get uplink right
config: fix off-by-centimeter-to-the-right typo
Configurations/10-main.conf: freeze -std option in darwin*-ppc-cc
RT#4422
Remove mk1mf documentation
Remove the remainder of util/mk1mf.pl and companion scripts
This removes all scripts that deal with MINFO as well since that's only used by mk1mf
Remove generation of ms/version32.rc from Configure use util/mkrc.pl
utils/mkrc.pl was added a while ago as a better generator for the Windows DLL resource file Finalize the change by removing the ms/version32.rc generator from Configure and adding resource file support using mkrc.pl in Configurations/windows-makefile.pl
Remove the mk1mf VC-WIN* builds and its supporting scripts
The mk1mf build for the VC-WIN* targets is broken and the unified scheme works well enough so we clean out the old
Fix ALPN - more fixes
* Clear proposed along with selected before looking at ClientHello * Add test case for above * Clear NPN seen after selecting ALPN on server * Minor documentation updates
Add a comment on dane_verify() logic
Remove #error from include files
Don't have #error statements in header files but instead wrap the contents of that file in #ifndef OPENSSL_NO_xxx This means it is now always safe to include the header file
GH886: CONNECT should use HTTP/1.1
By default you get 0.9 which isn't widely available But we use HTTP/1.0 for now Courtesy beusink@users.github.com
Have makedepend output to stdout and redirect it
This gives us better control of what files are produced
ct_int.h only needed by crypto/ct
Merge ct_int.h into ct_locl.h
constify DSA_SIG_get0()
Move blake2_loclh to blake2 directory
Fixed language
Fixed a bunch of typos in the docs
constify ECDSA_SIG_get0()
PR#4436
If the asm file to be compiled isn't generated leave the ext alone
Closes RT#4447
make update
Don't let 'generate' target depend on generated files act directly instead
One of the 'generate' targets depended on $(SRCDIR)/apps/progs.h which depended on.. nothing This meant it never got regenerated once it existed regardless of need Of course we could have it depend on all the files checked to generate it but they also depend on progs.h so we'd end up getting cricular dependencies which makes make unhappy
Furthermore and this applies for the other generated files having them as targets means that they may be regenerated on the fly in some cases and since they get written to the source tree this isn't such a good idea if that tree is read-only (which is a possible situation in an out-of-tree build)
So we move all the actions to the 'generate' targets themselves thus making sure they get regenerated in a controlled manner and regardless of dependencies
apps/progs.pl: add back the INCLUDE_FUNCTION_TABLE wrapper
Revert "Ignore the generated apps/progs.h"
This reverts commit 91056e72693b4ee8cb5339d9091871ffc3b6f776
Revert "Generate apps/progs.h on the fly"
This reverts commit 04e2a527379ad12ca512aef4e838f94af22d7f79
Revert "Include progs.h directly in openssl.c instead of via apps.h"
This reverts commit a45d7d5388c6774a484cff4af13f188240d3d50b
GH36: Add casts to match the documentation
Correct faulty L<> links in .pods
Closes RT#4450
Add a few more quotes for Windows (install_ssldirs)
The command source are files not directories
Therefore they should be concatenated with the source directory using catfile() not catdir()
Replace sed command with perl
Some implementations of sed require a newline before an ending '}' The easier method is to replace that sed command with the corresponding perl command
Closes RT#4448
Clear the exit code from 'find' in 'make depend'
Depending on what has been built so far all .d files may not be present and 'find' will exit with non-zero exit code This isn't a bother for us but may break make so clear the exit code with an added 'exit 0'
Closes RT#4444
Shut find up about files not found
Some of the files in $(DEPS) might not exist We don't need to know
Don't free up EVP_MD_CTX
Don't free up passed EVP_MD_CTX in ASN1_item_sign_ctx() This simplifies handling and retains compatiblity with previous behaviour
PR#4446
Use the dependencies received in generatesrc()
generatesrc() did already receive dependency information but never used it and never really needed to.. until now
Ignore the generated apps/progs.h
Generate apps/progs.h on the fly
Include progs.h directly in openssl.c instead of via apps.h
Make apps/progs.pl more flexible
Make Configure write @disablables to configdata.pm and have apps/progs.pl use that data
Correct the export list when writing configdata.pm
Correct the check of files to depend on against known generated ones
The check was erroneously inversed
Don't perform tsa tests if configured "no-ts"
Correct incorrect path
In crypto buildinf.h depends on ../configdata.pm not ./configdata.pm
Better 'make depend' mechanism
Instead of relying on the '-nt' test operator which doesn't exist everywhere use find's '-newer' to find out if any of the known .d files is newer than Makefile
Closes RT#4444
make update
Implement support for no-ts
apps/progs.pl: more consistent output for digests
Fix no-des
Numerous fixes for no-des
Fix no-dgram
A few places in s_client needed some OPENSSL_NO_DTLS guards which fixes no-dgram
Fix no-deprecated
The no-deprecated build was failing because afalg was relying on a transitive include that does not exist in a no-deprecated build
Fix no-cmac
There were a couple of CMAC references without OPENSSL_NO_CMAC guards
Add a test to see that signals are caught as failures
Make OpenSSL::Test::run() sensitive to signals
$? in perl gets the status value from wait(2) which is a word with the exit code in the upper half and the number of a raised signal in the lower half OpenSSL::Test::run() ignored the signal half up until now
With this change we recalculate an exit code the same way the Unix shells do using this formula:
($? & 0x7f) ? ($? & 0x7f)|0x80 : ($? >> 8);
Remove more unused things
Moved doc/standards.txt to the web
Resolved unresolved symbols with no-hw
Compiling on Windows with no-hw was resulting in unresolved symbols in the padlock engine
Ensure that no-comp functions are flagged as such
mkdef.pl was not detecting no-comp functions This updates the header file so that mkdef.pl detects that no-comp applies and the functions are marked accordingly
Fix no-rc2 in the CMS test
The CMS test uses some RC2 keys which should be skipped if the RC2 is disabled
Mark OCB as an AEAD cipher
OCB is AEAD capable but was not marked as such with the EVP_CIPH_FLAG_AEAD_CIPHER flag
Ensure that memory allocated for the ticket is freed
If a call to EVP_DecryptUpdate fails then a memory leak could occur Ensure that the memory is freed appropriately
Issue reported by Guido Vranken
Fix a potential double free in EVP_DigestInit_ex
There is a potential double free in EVP_DigestInit_ex This is believed to be reached only as a result of programmer error - but we should fix it anyway
Issue reported by Guido Vranken
Fix build; CPP syntax error
Update EVP_CIPHER_CTX_set_padding documentation
Add note about when EVP_CIPHER_CTX_set_padding should be called
README: small fixups
Don't refer to INSTALL files that don't exist any more Make it clear that the libssl and libcrypto libraries may be named differently on different platforms
Make picker thread and combine standard config helper functions
Document them as well
Remove Netware and OS/2
Disallow --classic for Windows
With all the config changes mk1mf is broken on Windows
windows-makefile.tmpl: Stop keeping temporary files
Add install targets for Windows
On Windows we set INSTALLTOP to default as follows:
VC-WIN32:
PREFIX: %ProgramFiles(x86)%\OpenSSL OPENSSLDIR: %CommonProgramFiles(x86)%\SSL
VC-WIN64*:
PREFIX: %ProgramW6432%\OpenSSL OPENSSLDIR: %CommonProgramW6432%\SSL
Should those environment variables be missing the following is used as fallback:
PREFIX: %ProgramFiles%\OpenSSL OPENSSLDIR: %CommonProgramFiles%\SSL
Report TLS 1.0 as backwards-compatible TLSv1
The TLSv1.0 form is retained for reporting the first protocol version that supports a given cupher
Remove ultrix/mips support
Remove support for Borland C++
Borland C++ 4.5 is very old and our "support" for it is already non-existent we might as well remove it
Use correct C format for keysets.pl
Start documenting Configure internals
This is a living document everyone is encouraged to add to it Implementation details as well as broader implementation philosophy has a place here
I'm starting with documentation of the how conditions in build.info files are treated
Added build.info debugging capability to Configure
This is only enabled when the environment variable CONFIGURE_DEBUG_BUILDINFO is defined This will cause every line in every build.info file to be displayed along with the content of the skip stack before and after parsing This can be a very powerful tool to see that all conditions are working as expected
Simplify define as we don't support MS-DOS anymore
Don't define OPENSSL_ENGINES in test recipes do it in Makefiles instead
In most builds we can assume that engines live in the build tree subdirectory "engines" This was hard coded into the tests that use the engine ossltest
However that hard coding is tedious it would need to be done in every test recipe and it's an incorrect assumption in some cases
This change has us play it safe and let the build files tell the testing framework where the engines are
Have 'openssl version -a' output the default engines directory as well
Bugfix: Encode the requested length in s_cb.c:hexencode()
Sort cipher-list at runtime
Reduces #ifdef complexity
unix-Makefile template: use $(PERL) everywhere
There was one spot that had hard-coded 'perl'
Deal with DSA_SIG opaqueness
Prepare for 1.1.0-pre5-dev
Prepare for 1.1.0-pre4 release
Some platforms provide getcontext() but it does not work
Some platforms claim to be POSIX but their getcontext() implementation does not work Therefore we update the ASYNC_is_capable() function to test for this
RT#4366
When building DLLs hack the library name in the .def file
util/mkdef.pl assumes it knows what the resulting library name will be Really it shouldn't but changing it will break classic native Windows builds so we leave it for now and change the LIBRARY line externally when needed instead
DLL object files should not be built with /Zl"
When building the DLLs we depend on the correct default C RTL info
Appveyor - make sure to actually build "shared" in the shared configuration
Fix up CHANGES
- Remove duplicate entry - Add author for SSL_CIPHER query functions - Note HKDF support in CHANGES and NEWS
[ci skip]
We should use $SRCDIR in Makefiles
Normally we always refer to source files relative to $SRCDIR in Makefiles However the reference to unix-Makefile.tmpl was using a fully expanded absolute path This can cause problems for Mingw
Disable AFALG when cross-compiling
We don't currently support cross-compiling of the afalg engine However we were failing to explicitly mark it as disabled during Configure leading to a failed build
Fix a TLSProxy race condition
TLSProxy starts s_server and specifies the number of client connects it should expect After that s_server is supposed to close down automatically However if another test is then run then TLSProxy will start a new instance of s_server If the previous instance hasn't closed down yet then the new instance can fail to bind to the socket
poly1305/asm/poly1305-x86_64.pl: make it work with linux-x32
On Windows page walking is known as __chkstk
Explain *cough*-dows
Make the perl dependency post-processor into just one line
Make doesn't always treat multiline quoted strings as nicely as one would wish
Not all shells understand !
In unix-Makefile.tmpl this construction has been used a few times
if ! something; then ..
It seems though that some shells do not understand ! so these need to be changed
General verify options to openssl ts
This commit adds the general verify options of ocsp verify cms etc to the openssl timestamping app as suggested by Stephen N Henson in [openssl.org #4287] The conflicting "-policy" option of "openssl ts" has been renamed to "-tspolicy" Documentation and tests have been updated
CAVE: This will break code which currently uses the "-policy" option
Fix CRYPTO_THREAD_run_once return value checks
Cygwin configs were missing thread_scheme settings add them
Small typo
OPENSSL_INIT_ONCE and OPENSSL_INIT_ONCE_STATIC_INIT are really CRYPTO_ONCE and CRYPTO_ONCE_STATIC_INIT
static-engine is no longer an internal keyword remove it from %disabled
Clarify NOTES.WIN
Update and clarify ECDSA documentation
Disable afalg when engine is disabled
Also make it possible to disable afalg separately
we still need to update config again
Fix typo in manual missing ending '>'
Travis: build tests in BUILDONLY mode
config: fix HP-UX PA-RISC detection
s390x assembly pack: 32-bit fixups
build.info/Makefile.in: Itanium fixups
engines/Makefile.in: some [older] shell complain about 'for i ;' but not if there is reference to empty variable
Fix the init cleanup order
There are internal dependencies between the various cleanup functions This re-orders things to try and get that right
Add some missing cleanup calls to de-init
OBJ_cleanup() doesn't always get called from EVP_cleanup() so needs to be explicitly called in de-init Also BIO_sock_cleanup() also needs to be called
Fix freeze in config's interrupt trap with some shells
With bash and zsh the trap on the 5 second read does respond but doesn't break out of the read What's worse is that it takes away the 5 second timer and therefore has the read hang indefinitely and (almost) unbreakable
Having the trap do 'exit 0' after reseting the tty params has it break out of read and continue with the configuration
Other shells do not appear to have the issue described here but neither does the extra 'exit 0' appear to harm them
Enforce the demand for Perl 5.10.0 as a minimum
Fix a few Configure errors
Document X509_get_serialNumber and X509_set_serialNumber
Add EVP_PKEY documentation
Document EVP_PKEY_id() and EVP_PKEY_base_id()
Change an function macro for ERR match the function it's used in
Complete incomplete makefile variable referenses
A couple of '$(PERLASM_SCHEM' had sneaked in
Collect the names of generated files and clean them away at target clean:
Add $(LIB_CFLAGS) for any build.info generator that uses $(CFLAGS)
The reason to do so is that some of the generators detect PIC flags like -fPIC and -KPIC and those are normally delivered in LD_CFLAGS
Use single quotes rather than double quotes when needed
When passing down values to Makefile.shared do so with single quotes as much as possible to avoid having the shell create a mess of quotes
Harmonize Unix Makefile template with Windows dito
The variable SHARED_CFLAGS and SHARD_LDFLAGS were used in the Unix template because they normally contain options used when building "shared" The Windows template on the other hand uses LIB_CFLAGS to express the intended use of those flags rather than their content The Windows template still used SHARED_LDFLAGS which seems inconsistent
To harmonize the two any SHARED_CFLAGS gets renamed to LIB_CFLAGS and SHARED_LDFLAGS to LIB_LDFLAGS That makes the intent consistent along with BIN_{C,LD}FLAGS and DSO_{C,LD}FLAGS
Finally make sure to pass down $(LIB_CFLAGS) or $(DSO_CFLAGS) along with $(CFLAGS) when using Makefile.shared
Fix memory leak in library deinit
ENGINE_cleanup calls CRYPTO_free_ex_data and therefore CRYPTO_cleanup_all_ex_data - which cleans up the method pointers - must run after ENGINE_cleanup
Additionally don't needlessly initialize the EX_CALLBACKS stack during e.g CRYPTO_free_ex_data The only time this is actually needed is when reserving the first ex data index Specifically since sk_num returns -1 on NULL input the rest of the code already handles a NULL method stack correctly
Add doc on when to use SCT callback
With help from Viktor
Workaround for false -Warray-bounds in Travis
ccache + clang produces a false strcmp warning see https://llvm.org/bugs/show_bug.cgi?id=20144
Since this only happens with ccache and --strict-warnings and only with certain versions of glibc / clang disabling ccache is a reasonable short-term workaround
Fix no-comp build
Fix build break; add function declaration
When creating directory specs use srctop_dir rather than srctop_file
While insignificant on Unix like systems this is significant on systems like VMS
Avoid sed for dependency post-processing
It turns out that different sed implementations treat -i differently to cause issues make it simpler by avoiding it entirely and give perl the trust to be consistent enough
Because bn_expand2 is declared non-static it must not be static
That doesn't change even to make a dummy to hide its unavailability
Remove some dead code from 1999
Don't clobber the last error
On Windows we call WSAGetLastError() to find out the last error that happened on a socket operation We use this to find out whether we can retry the operation or not You are supposed to call this immediately however in a couple of places we logged an error first This can end up making other Windows system calls to get the thread local error state Sometimes that can clobber the error code so if you call WSAGetLastError() later on you get a spurious response and the socket operation looks like a fatal error
Really we shouldn't be logging an error anyway if its a retryable issue Otherwise we could end up with stale errors on the error queue
removed extra define
verified that build succeeds without the extra define
Fix no-blake2 for Windows classic build
Fix no-blake2 for Windows classic build
make update
Make X509_SIG opaque
Some sed implementations are not greedy enough use perl instead
The issue is demonstrated as follows:
On Linux:
$ echo ': foo.h /usr/include/stddef.h bar.h' | sed -e 's/ \/\(\\.\|[^ ]\)*//g' : foo.h bar.h
On MacOS X:
$ echo ': foo.h /usr/include/stddef.h bar.h' | sed -e 's/ \/\(\\.\|[^ ]\)*//g' : foo.husr/include/stddef.h bar.h
Perl is more consistent:
On Linux:
$ echo ': foo.h /usr/include/stddef.h bar.h' | perl -pe 's/ \/(\\.|[^ ])*//g;' : foo.h bar.h
On MacOS X:
$ echo ': foo.h /usr/include/stddef.h bar.h' | perl -pe 's/ \/(\\.|[^ ])*//g;' : foo.h bar.h
Make update to catch function renames
Use unsigned int instead of just unsigned
Save leaf_node and node_offset as character array
They are not numbers in the machine byte order
Review comments
Add blake2 support
move DSA_SIG definition into C source file
crypto/*/build.info: make it work on ARM platforms
crypto/*/build.info: SPARC-specific fixups
Configurations/unix-Makefile.tmpl: don't leave empty .s files behind
If pre-processor failed an empty .s file could be left behind which could get successfully compiled if one simply re-ran make and cause linking failures Not anymore Remove even intermediate .S in case of pre-processor failure
Configure: remove dependency on 'head'
constify CT_POLICY_EVAL_CTX getters
Surround ctx_set_ctlog_list_file() with #ifndef OPENSSL_NO_CT
Suppress CT warnings in test_ssl
Running test_ssl with HARNESS_VERBOSE results in lots of spurious warnings about an inability to load the CT config file This fixes it
Avoid getting unresolved referense to bn_expand2 in test/bntest.c
Issue identified on Solaris by Erik Forsberg <erik@efca.com>
Call CONF_modules_free() before ENGINE_cleanup() in auto-deinit
During auto de-init we were calling ENGINE_cleanup() and then later CONF_modules_free() However the latter function can end up calling engine code which can lead to a use of the global_engine_lock after it has already been freed Therefore we should swap the calling order of these two functions
Fix no-rmd160 classic Windows build
no-ripemd was unified a while ago but the change was not done in mk1mf.pl This commit changes the no-ripemd string to no-rmd160 which fixes the no-rmd160 classic build
Don't build dynamic engines unless configured "shared"
Experience has shown that dynamic engines with their own copy of libcrypto is problematic so we disable that possibility
Harmonise the two methods to generate dependency files
One of them didn't clean away .d.tmp files properly The other would overwrite the .d files unconditionally thereby causing a possibly unnecessary dependency rebuild which touches the date of Makefile which causes a possibly unnecessary rebuild of buildinf.h and everything that depends on that
More tweaks to the installation instructions
A few things were out of date and a few things were missing Also some formatting updates
Fix some assembler generating scripts for better unification
Some of these scripts would recognise an output parameter if it looks like a file path That works both in both the classic and new build schemes Some fo these scripts would only recognise it if it's a basename (i.e no directory component) Those need to be corrected as the output parameter in the new build scheme is more likely to contain a directory component than not
Add include directory options for assembler files that include from crypto/
A few were missed in the previous commit
Closes RT#4412
check reviewer --reviewer=emilia Use SSL_get_SSL_CTX instead of passing SSL_CTX to s_client.c:print_stuff
check reviewer --reviewer=emilia Pass entire CTLOG_STORE to SCT_print rather than just the SCT's CTLOG
SCT_print now looks up the correct CT log for you
check reviewer --reviewer=emilia Remove 'log' field from SCT and related accessors
In order to still have access to an SCT's CTLOG when calling SCT_print SSL_CTX_get0_ctlog_store has been added
Improved documentation for some CT functions in openssl/ssl.h
Add include directory options for assembler files that include from crypto/
Closes RT#4406
In the recipe using "makedepend" make sure the object file extension is there
Configure - don't trust $1 to stick around save its value away
Fix a memory leak in the afalg engine
The AFALG engine created a global EVP_CIPHER instance but was not freeing it up when the engine was destroyed
Harmonize the option processing in 'config' and 'config.com'
The help text for -d in 'config' was aged and the option processing in 'config.com' was just different This harmonizes 'config.com' with the instructions in INSTALL and both current reality
Add cleaning targets to Configurations/windows-makefile.tmpl
The typedef ECPARAMETERS is already defined don't define it anew
Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms
UEFI needs this too Don't keep it only in the Windows/DOS ifdef block
This is a fixed version of what was originally commit 963bb62195 and subsequently reverted in commit 37b1f8bd62 Somewhere along the way the Windows/DOS ifdef actually got removed leaving it just broken It should have been turned into an #elif not removed
This one correctly changes the logic from
# if WINDOWS|DOS # if OPENSSL_NO_SOCK .. no-sock .. # elif !DJGPP .. native windows ..
to
# if OPENSSL_NO_SOCK .. no-sock .. # elif WINDOWS|DOS # if !DJGPP .. native windows ..
Remove a missed item from the old thread API
A line from cryptlib.h was missed during the old Thread API removal This breaks no-deprecated builds
Mark SRP_VBASE_get_by_user() as deprecated
The function SRP_VBASE_get_by_user() is declared as deprecated but the implementation was not
No need to call EVP_CIPHER_CTX_init after EVP_CIPHER_CTX_new
The afalgtest was unnecessarily initing an EVP_CIPHER_CTX It is not needed and is deprecated
Pass down inclusion directories to source file generators
The source file generators sometimes use $(CC) to post-process generated source and getting the inclusion directories may be necessary at times so we pass them down
RT#4406
Travis - add missing semi-colon
Update .gitignore to ignore all cscope files
Signed-off-by: Rich Salz <rsalz@akamai.com>
remove ms/.rnd and add it to .gitignore
Signed-off-by: Rich Salz <rsalz@akamai.com>
RT3676 add: Export ASN.1 DHparams
Travis - don't use ccache with cross compiles
Although theoretically possible Configure doesn't treat CC variable set like this very well: CC="ccache i686-w64-mingw32-gcc" Also this Travis script doesn't recognise the possibility either
Avoid negative array index in BIO_debug_callback()
BIO_snprintf() can return -1 on truncation (and overflow as of commit 9cb177301fdab492e4cfef376b28339afe3ef663) Though neither can realistically occur while printing a pointer and short fixed string into a buffer of length 256 the analysis to confirm that this the case goes somewhat far up the call chain and not all static analyzers can successfully follow the chain of logic
It's easy enough to clamp the returned length to be nonnegative before continuing which appeases the static analyzer and does not harm the subsequent code
CT: check some GeneralizedTime return values
Some of the ASN.1 routines for the GeneralizedTime type can return errors; check for these and do not continue past failure so as to appease coverity
When configured "shared" don't build static libraries on Windows
The reason for this is that the static libraries and the DLL import libraries are named the same on Windows When configured "shared" the static libraries are unused anyway
Make util/mk1mf.pl recognise no-weak-ssl-ciphers
Avoid double-free in calleres to OCSP_parse_url
set pointers to NULL after OPENSSL_free before returning to caller to avoid possible double-free in caller
Signed-off-by: Rich Salz <rsalz@akamai.com>
Fix return type for CRYPTO_THREAD_run_once
return type should be int and not void
Signed-off-by: Rich Salz <rsalz@akamai.com>
Add X509_CHECK_FLAG_NEVER_CHECK_SUBJECT flag
Remove duplicate typedef of ECPKPARAMETERS in ec.h
Run make update
MR: #2296
Travis - the source directory is _srcdist not _srcdir
Correct slight logic error in processing IF in build.info
This corrects a fault where the inner IF in this example was still being acted upon:
IF[0] ...whatever.. IF[1] ...whatever more.. ENDIF ENDIF
With this change the inner IF is skipped over
When grepping something starting with a dash remember to use -e
Deprecate the use of version-specific methods
MR: #1824
Use version flexible method instead of fixed version
MR: #1824
Use minimum and maximum protocol version instead of version fixed methods
MR: #1824
Fix usage of OPENSSL_NO_*_METHOD
MR: #1824
Move disabling of RC4 for DTLS to the cipher list
MR: #1595
Remove DES cipher alias
MR: #1595
Update ciphers -s documentation
MR: #1595
Document SSL_get1_supported_ciphers
MR: #1595
IDEA is not supported in TLS 1.2
This currently seems to be the only cipher we still support that should get disabled
MR: #1595
Add support for minimum and maximum protocol version supported by a cipher
MR: #1595
Add ssl_get_client_min_max_version() function
Adjust ssl_set_client_hello_version to get both the minimum and maximum and then make ssl_set_client_hello_version use the maximum version
MR: #1595
Make SSL_CIPHER_get_version return a const char *
MR: #1595
Remove unused code
MR: #1595
Make function to convert version to string
MR: #1595
Constify security callbacks
MR: #1595
Documentation for ctx_set_ctlog_list_file()
Minor improvement to formatting of SCT output in s_client
Do not display a CT log error message if CT validation is disabled
RT3676: Expose ECgroup i2d functions
Comment away the extra checks in Configure
The "extra checks" is a debugging tool to check the config resolving mechanism It uses Perl's smart match which is experimental and therefore always causes Perl to give out a warning and it causes older Perl versions to fail entirely
So it gets commented away but stays otherwise in place as it may be useful again
Make ct_dir and certs_dir static in test/ct_test.c
Fix ct_test to not assume it's in the source directory
ct_test assumed it's run in the source directory and failed when built elsewhere It still defaults to that but can be told another story with the environment variables CT_DIR and CERTS_DIR
Test recipe updated to match
Document importance of CTLOG_STORE outliving SCT if SCT_set0_log is used
Make SCT literals into const variables in ct_test.c
Makes STACK_OF(SCT)* parameter of i2d_SCT_LIST const
Removes SCT_LIST_set_source and SCT_LIST_set0_logs
Both of these functions can easily be implemented by callers instead
Makes SCT_get0_log return const CTLOG*
Makes CTLOG_STORE_get0_log_by_id return const CTLOG*
Improved documentation of SCT_CTX_* functions
Updates ct_err.c
Remove unnecessary call to SCT_set1_extensions(sct "" 0) in ct_test.c
Reset SCT validation_status if the SCT is modified
Use SCT_VERSION_V1 in place of literal 0 in ct_test.c
Fixes "usuable" typo in ct_locl.h
Treat boolean functions as booleans
Use "!x" instead of "x <= 0" as these functions never return a negative value
Make parameters of CTLOG_get* const
Extensive application of __owur to CT functions that return a boolean
Also improves some documentation of those functions
Makes SCT_LIST_set_source return the number of successes
No longer terminates on first error but instead tries to set the source of every SCT regardless of whether an error occurs with some
Fix locking in ssl_cert_dup()
Properly check the return value of CRYPTO_THREAD_lock_new()
Signed-off-by: Rich Salz <rsalz@openssl.org>
Restore building out of source with the unified build scheme
CT test can't run without EC so skip it on that algo as well
Fix ct_test to not assume it's in the source directory
ct_test assumed it's run in the source directory and failed when built elsewhere It still defaults to that but can be told another story with the environment variables CT_DIR and CERTS_DIR
Test recipe updated to match
Update CHANGES and NEWS
Update the CHANGES and NEWS files with information about the recently added AFALG engine and pipelining
Fix classic build
The Thread API changes broke classic build This fixes it
In build.info an IF within a clause that's skipped over shouldn't apply
If we find an IF within a clause that's skipped over set it to be skipped as well
Add an entry in NEWS about the new threading API
Update CHANGES for the new threading API
Remove the old threading API
All OpenSSL code has now been transferred to use the new threading API so the old one is no longer used and can be removed We provide some compat macros for removed functions which are all no-ops
There is now no longer a need to set locking callbacks!!
Remove use of the old CRYPTO_LOCK_X5O9_STORE
The locking here is a bit strange and unclear Rather than refactor anything and possibly break stuff I have just moved to using the new thread API following as closely as possible what was there previously
Don't call ENGINE_cleanup when configured "no-engine"
Don't add engines if configured "no-engine"
Similarly don't add e_capi if configured "no-capieng"
Also indent a little deeper for clarity
Don't add afalg engine if configured "no-engine"
Also indent a little deeper for clarity
Don't check the conditions to build e_afalg if configured "no-engine"
Have Configure display the value of SHARED_CFLAG
Make sure the effect of "pic" / "no-pic" is used with assembler compilations
Before the 'Introduce the "pic" / "no-pic" config option' commit the shared_cflag value for the chosen config would be part of the make variable CFLAG which got replicated into CFLAGS and ASFLAGS
Since said commit the shared_cflag value has become a make variable of its own SHARED_CFLAG (which is left empty in a "no-pic" build)
However ASFLAGS was forgotten That's what's corrected with this change
Touch the correct variables for the system; shlib_wrap.sh on Solaris
If there is cause to think LD_LIBRARY_PATH_32 and LD_PRELOAD_32 are appropriate variables to touch do so Otherwise touch the usual LD_LIBRARY_PATH and LD_PRELOAD This covers for older installations that don't have a mix of 32-bit and 64-bit libs
Recognise 32-bit Solaris in util/shlib_wrap.sh
Submitted by Erik Forsberg <erik@efca.com>
Check gcc version to see if it supports -MM and friends
According to manuals found here: https://gcc.gnu.org/onlinedocs/ GNU C version 3 and on support the dependency generation options We therefore need to check the gcc version to see if we're going to use it or makedepend for dependency generation
Add extra include directory for includers of ppc_arch.h
crypto/evp/e_aes.c and crypto/modes/gcm128.c include ppc_arch.h which is located in crypto/ so add that as extra include directory for them
Issue reported by Jeffrey Walton <noloader@gmail.com>
Adapt INSTALL and related notes for Windows
Adapt appveyor.yml for the new unified build
Adapt the Windows makefile template to source generation
Don't run the TLSProxy based tests in native Windows
There are issues binding listening ports This may be analyzed more thoroughly later on
Unified - name native Windows shared libraries like MingW builds do
Unified - extract settings from util/pl/VC-32.pl and make the config settings
This introduces the settings loutflag and aroutflag because different Windows tools that do the same thing have different ways to specify the output file
The Borland C++ config is commented away for the monent perhaps permanently
Unified - a native Windows makefile template
ec/asm/ecp_nistz256-sparcv9.pl: get corner logic right
RT#4284
Adapt mk1mf.pl and companions to changed perlasm script semantics
Unified - adapt the generation of whirlpool assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/whrlpool/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of sha assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/sha/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of rc4 assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/rc4/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of rc5 assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/rc5/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of ripemd assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/ripemd/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of md5 assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/md5/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of modes assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/modes/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of poly1305 assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/poly1305/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of des assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/des/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of ec assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/ec/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of camellia assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/camellia/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of cast assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/cast/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of chacha assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/chacha/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Because crypto/build.info demands CFLAGS_Q descrip.mms.tmpl must deliver
Unified - adapt the generation of cpuid uplink and buildinf to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of aes assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/aes/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of blowfish assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/bf/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Convert the dynlocks in e_chil to the new Thread API locks
Remove another lock from e_chil
Always call ENGINE_cleanup() in de-init
Even if we haven't loaded an engine we might have set up the global_engine_lock so we should still clean up
Move chil engine to the new thread api
Move the chil engine to use the new thread API As I don't have access to the hardware I can't test this :-( I think its ok..
Move engine library over to using the new thread API
Remove usage of CRYPTO_LOCK_ENGINE
err_lcl.h is gone don't pretend it's there
Add missing semi
Counter mixed signedness with a cast
Fix names of the #define used for platform specific code
Add empty line after local variables
Fix error with wait set of fds for the select()
It also makes the call to select blocking to reduce CPU usage
Use correct function ID in error path
This fixes "make update"
Move variable declaration to the start of the function
Ensure CRYPTO_mem_leaks is the last thing we do
CRYPTO_mem_leaks de-inits the library so we must not do anything interesting after we've used it!
Fix memory leak in ssltest
The new Rand usage of Thread API exposed a bug in ssltest ssltest "cheats" and uses internal headers to directly call functions that normally you wouldn't be able to do This means that auto-init doesn't happen and therefore auto-deinit doesn't happen either meaning that the new rand locks don't get cleaned up properly
Convert rand code to new threading API
Replace the CRYPTO_LOCK_RAND and CRYPTO_LOCK_RAND2 locks with new thread API style locks
Adapt unix Makefile template to 'no-makedepend'
This change is a bit more complex as it involves several recipe variants
Also remove the $(CROSS_COMPILE) prefix for the makedepend program When we use the program "makedepend" this doesn't serve anything and when we use the compiler this value isn't even used
Adapt descrip.mms.tmpl to 'no-makedepend'
VMS doesn't have "makedepend" anyway so this is just a matter of using the right qualifiers when 'makedepend' is enabled
Add the configure option 'no-makedepend'
If no makedepend program or equaly capable compiler is present 'makedepend' gets disabled automatically
Fix SSL_CIPHER_get_auth_nid return
Copy/paste error between SSL_CIPHER_get_kx_nid() and SSL_CIPHER_get_auth_nid() wrong table was referenced
Signed-off-by: Rich Salz <rsalz@openssl.org>
Fix a typo in dynamic_load()
Convert RSA blinding to new multi-threading API
Convert CRYPTO_LOCK_SSL_* to new multi-threading API
Remove the transfer of lock hooks from bind_engine
With the new threads API this is no longer needed
Engine API repair - memory management hooks
The Engine API lost the setting of memory management hooks in bind_engine Here's putting that back
EX_DATA and ERR functions need the same treatment
Redo the Unix source code generator
For assembler we want the final target to be foo.s (lowercase s) However the build.info may have lines like this (note upper case S):
GENERATE[foo.S]=foo.pl
This indicates that foo.s (lowercase s) is still to be produced but that producing it will take an extra step via $(CC) -E Therefore the following variants (simplified for display) can be generated:
GENERATE[foo.S]=foo.pl => foo.s: foo.pl $(PERL) $foo.pl $@.S; \ $(CC) $(CFLAGS) -E -P $@.S > $@ && \ rm -f $@.S
GENERATE[foo.s]=foo.pl => foo.s: foo.pl $(PERL) $foo.pl $@
GENERATE[foo.S]=foo.m4 => foo.s: foo.m4 m4 -B 8192 $foo.m4 > $@.S; \ $(CC) $(CFLAGS) -E -P $@.S > $@ && \ rm -f $@.S
GENERATE[foo.s]=foo.m4 => foo.s: foo.m4 m4 -B 8192 $foo.m4 > $@
Fix error in ssltest
Compiling ssltest with some compilers using --strict-warnings results in complaints about an unused result
Adapt e_capi to the DSA_SIG_get0() API
Convert mem_dbg and mem_sec to the new Thread API
Use new Thread API style locks and thread local storage for mem_dbg
OpenSSLDie --> OPENSSL_die
Also removed a bunch of unused define's from e_os.h
Remove the -n tar flag from osx dist creation
With the unified build scheme tar MUST recurse or the tarball will be empty
Remove some old ms/* files
Include e_os.h from ec_lcl.h
The EC code recently started using REF_PRINT_COUNT and REF_ASSERT_ISNT Those are defined in e_os.h
Fix cert leaks in s_server
Signed-off-by: Rich Salz <rsalz@openssl.org>
Reuse strndup() simplify code
Signed-off-by: Rich Salz <rsalz@openssl.org>
make update
Make DSA_SIG opaque
This adds a new accessor function DSA_SIG_get0 The customisation of DSA_SIG structure initialisation has been removed this means that the 'r' and 's' components are automatically allocated when DSA_SIG_new() is called Update documentation
Fix travis builds
Travis doesn't seem to know about 'expr'
make update
Convert CRYPTO_LOCK_X509_* to new multi-threading API
Convert CRYPTO_LOCK_UI to new multi-threading API
Convert CRYPTO_LOCK_EC_* to new multi-threading API
Convert CRYPTO_LOCK_EVP_PKEY to new multi-threading API
Convert CRYPTO_LOCK_BIO to new multi-threading API
Only enable ccache if it's available
Use ccache for the unified builds
This may speed up our builds considerably
For unified builds make a separate build directory and build there
SPARCv9 assembly pack: unify build rules and argument handling
Make all scripts produce .S make interpretation of $(CFLAGS) pre-processor's responsibility start accepting $(PERLASM_SCHEME) [$(PERLASM_SCHEME) is redundant in this case because there are no deviataions between Solaris and Linux assemblers This is purely to unify .pl->.S handling across all targets.]
Fix build; ssltest
Tweak some more information in INSTALL
The summary on how to add configs and how Makefile et al wasn't quite correct any more
GH787: Fix ALPN
* Perform ALPN after the SNI callback; the SSL_CTX may change due to that processing * Add flags to indicate that we actually sent ALPN to properly error out if unexpectedly received * clean up ssl3_free() no need to explicitly clear when doing memset * document ALPN functions
Signed-off-by: Rich Salz <rsalz@openssl.org>
Add an SSL_has_pending() function
This is similar to SSL_pending() but just returns a 1 if there is data pending in the internal OpenSSL buffers or 0 otherwise (as opposed to SSL_pending() which returns the number of bytes available) Unlike SSL_pending() this will work even if "read_ahead" is set (which is the case if you are using read pipelining or if you are doing DTLS) A 1 return value means that we have unprocessed data It does *not* necessarily indicate that there will be application data returned from a call to SSL_read() The unprocessed data may not be application data or there could be errors when we attempt to parse the records
Add an ability to set the SSL read buffer size
This capability is required for read pipelining We will only read in as many records as will fit in the read buffer (and the network can provide in one go) The bigger the buffer the more records we can process in parallel
Add cipher query functions
Add functions to determine authentication key-exchange FIPS and AEAD
Convert ERR_STRING_DATA to new multi-threading API
Convert ERR_STATE to new multi-threading API
Convert CRYPTO_LOCK_EX_DATA to new multi-threading API
Convert CRYPTO_LOCK_DSO to new multi-threading API
Convert CRYPTO_LOCK_{DH,DSA,RSA} to new multi-threading API
Convert CRYPTO_LOCK_GET*BYNAME to new multi-threading API
GH815: The ChaCha20/Poly1305 codepoints are official
CCA8 CCA9 CCAA CCAB CCAC CCAD and CCAE are now present in https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml so remove the "as per draft-ietf-tls-chacha20-poly1305-03" note accordingly
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH787: Fix ALPN
* Perform ALPN after the SNI callback; the SSL_CTX may change due to that processing * Add flags to indicate that we actually sent ALPN to properly error out if unexpectedly received * clean up ssl3_free() no need to explicitly clear when doing memset * document ALPN functions
Signed-off-by: Rich Salz <rsalz@openssl.org>
Make mk1mf recognise the --classic flag
Fix configurations such as 'dist' and tar building
For config targets such as 'dist' which doesn't have a BASE template we still need to have a default build scheme
Additionally the unified Makefile template's target 'tar' wasn't quite as flexible as the unixmake one
Finally .travis-create-release.sh can be somewhat simplified now that it builds with the unified build scheme
We've switch to unified build scheme by default reflect it in travis
We want to preserve a couple of classic builds still the quickest is to change all --unified to --classic
Fix engine/asm/e_padlock-x86.pl for newer semantics
Change the INSTALL documentation for unified builds
Because of the unified scheme building on different platforms is very similar We currently have Unix and OpenVMS on the unified scheme which means that a separate INSTALL.VMS is no longer needed
Make unified builds the default on Unix
Add the Configure option --classic to fall back on classic build schemes
Revert "unified build scheme: Try to nudge users to try the "unified" build"
This reverts commit 242ffb05a2e4aa3fc7ffc131037e077b7e242189
Fix building without multiblock support
Not all platforms support multiblock Building without it fails prior to this fix
RT#4396
Don't free NCONF obtained values
Bug reported by Michel Sales
Remove kinv/r fields from DSA structure
The kinv/r fields in the DSA structure are not used by OpenSSL internally and should not be used in general
GH812: Fix for no-ui build on Windows
Add UI to known algorithms in mkdef.pl
Signed-off-by: Rich Salz <rsalz@openssl.org>
AppVeyor: Only use the latest VS version
GH: #811
Rename the numpipes argument to ssl3_enc/tls1_enc
The numpipes argument to ssl3_enc/tls1_enc is actually the number of records passed in the array To make this clearer rename the argument to |n_recs|
Rename a function
Rename the have_whole_app_data_record_waiting() function to include the ssl3_record prefix...and make it a bit shorter
Refactor dasync cipher implementations to improve code reuse
Move out most of the boiler plate code that is common between aes128-cbc and aes128-cbc-hmac-sha1 into helper functions to improve code reuse
Move the _hidden_* static variables in dasync to be constructed in bind
The _hidden_* variables were being created on-the-fly It is better to create them once up front during bind to avoid any potential race conditions
Fix typo in SSL_pending docs
Rename EVP_CIPHER_CTX_cipher_data to EVP_CIPHER_CTX_get_cipher_data
We had the function EVP_CIPHER_CTX_cipher_data which is newly added for 1.1.0 As we now also need an EVP_CIPHER_CTX_set_cipher_data it makes more sense for the former to be called EVP_CIPHER_CTX_get_cipher_data
Fix s_server/s_client handling of the split_send_frag argument
Ensure that a value of 0 is correctly handled for the split_send_frag argument
Add documentation for the EVP_CIPHER_CTX_cipher_data functions
The new pipeline code added a new function EVP_CIPHER_CTX_set_cipher_data() Add documentation for this and the existing EVP_CIPHER_CTX_cipher_data() function
Remove the wrec record layer field
We used to use the wrec field in the record layer for keeping track of the current record that we are writing out As part of the pipelining changes this has been moved to stack allocated variables to do the same thing therefore the field is no longer needed
Update a comment
Update a comment that was out of date due to the pipelining changes
Add documentation for new s_server/s_client options
Document the new split_send_frag max_pipelines and read_buf options
Add documentation for SSL_has_pending()
A previous commit added the SSL_has_pending() function which provides a method for knowing whether OpenSSL has buffered but as yet unprocessed record data
Add pipelining documentation
Add some documentation for all of the SSL/SSL_CTX functions/ctrls for conrolling read and write pipelining
Fix erroneous fall thgrough in switch statement
Fix an erroenous fall through when setting the max_pipelines value
Ensure s_client and s_server work when read_ahead is set
Previously s_client and s_server relied on using SSL_pending() which does not take into account read_ahead For read pipelining to work read_ahead gets set automatically Therefore s_client and s_server have been converted to use SSL_has_pending() instead
Add an SSL_has_pending() function
This is similar to SSL_pending() but just returns a 1 if there is data pending in the internal OpenSSL buffers or 0 otherwise (as opposed to SSL_pending() which returns the number of bytes available) Unlike SSL_pending() this will work even if "read_ahead" is set (which is the case if you are using read pipelining or if you are doing DTLS) A 1 return value means that we have unprocessed data It does *not* necessarily indicate that there will be application data returned from a call to SSL_read() The unprocessed data may not be application data or there could be errors when we attempt to parse the records
Add an ability to set the SSL read buffer size
This capability is required for read pipelining We will only read in as many records as will fit in the read buffer (and the network can provide in one go) The bigger the buffer the more records we can process in parallel
Lazily initialise the compression buffer
With read pipelining we use multiple SSL3_RECORD structures for reading There are SSL_MAX_PIPELINES (32) of them defined (typically not all of these would be used) Each one has a 16k compression buffer allocated! This results in a significant amount of memory being consumed which most of the time is not needed This change swaps the allocation of the compression buffer to be lazy so that it is only done immediately before it is actually used
Implement read pipeline support in libssl
Read pipelining is controlled in a slightly different way than with write pipelining While reading we are constrained by the number of records that the peer (and the network) can provide to us in one go The more records we can get in one go the more opportunity we have to parallelise the processing
There are two parameters that affect this: * The number of pipelines that we are willing to process in one go This is controlled by max_pipelines (as for write pipelining) * The size of our read buffer A subsequent commit will provide an API for adjusting the size of the buffer
Another requirement for this to work is that "read_ahead" must be set The read_ahead parameter will attempt to read as much data into our read buffer as the network can provide Without this set data is read into the read buffer on demand Setting the max_pipelines parameter to a value greater than 1 will automatically also turn read_ahead on
Finally the read pipelining as currently implemented will only parallelise the processing of application data records This would only make a difference for renegotiation so is unlikely to have a significant impact
Add dummy pipeline support for aes128_cbc_hmac_sha1
Add dummy pipline support to dasync for the aes128_cbc_hmac_sha1 cipher This is treated as an AEAD cipher
Add pipeline support to s_server and s_client
Add the options min_send_frag and max_pipelines to s_server and s_client in order to control pipelining capabilities This will only have an effect if a pipeline capable cipher is used (such as the one provided by the dasync engine)
Implement write pipeline support in libssl
Use the new pipeline cipher capability to encrypt multiple records being written out all in one go Two new SSL/SSL_CTX parameters can be used to control how this works: max_pipelines and split_send_fragment
max_pipelines defines the maximum number of pipelines that can ever be used in one go for a single connection It must always be less than or equal to SSL_MAX_PIPELINES (currently defined to be 32) By default only one pipeline will be used (i.e normal non-parallel operation)
split_send_fragment defines how data is split up into pipelines The number of pipelines used will be determined by the amount of data provided to the SSL_write call divided by split_send_fragment For example if split_send_fragment is set to 2000 and max_pipelines is 4 then: SSL_write called with 0-2000 bytes == 1 pipeline used SSL_write called with 2001-4000 bytes == 2 pipelines used SSL_write called with 4001-6000 bytes == 3 pipelines used SSL_write_called with 6001+ bytes == 4 pipelines used
split_send_fragment must always be less than or equal to max_send_fragment By default it is set to be equal to max_send_fragment This will mean that the same number of records will always be created as would have been created in the non-parallel case although the data will be apportioned differently In the parallel case data will be spread equally between the pipelines
Update the dasync engine to add a pipeline cipher
Implement aes128-cbc as a pipeline capable cipher in the dasync engine As dasync is just a dummy engine it actually just performs the parallel encrypts/decrypts in serial
Add defines for pipeline capable ciphers
Add a flag to indicate that a cipher is capable of performing "pipelining" i.e multiple encrypts/decrypts in parallel Also add some new ctrls that ciphers will need to implement if they are pipeline capable
make update
Trim Travis config part 3
- Only build & test two configurations Make all the other build variants buildonly on gcc (clang on osx) - Don't build with default clang at all on linux - Only use gcc-5 and clang-3.6 for the sanitizer builds Re-running e.g CONFIG_OPTS="shared" with them seems redundant
Revert "Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms"
This reverts commit 963bb62195109fb863dc4d88c7470ce7f9af25ac
Fix pkeyutl to KDF lnks
Remove really old demo's
Elide OPENSSL_INIT_set_config_filename() for no-stdio build
Strictly speaking it isn't stdio and file access which offend me here; it's the fact that UEFI doesn't provide a strdup() function But the fact that it's pointless without file access is a good enough excuse for compiling it out
Elide DES_read_password() for no-ui build
Move declaration of X509_aux_print() out of #ifndef OPENSSL_NO_STDIO
This isn't a file access function; it's still present
Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms
UEFI needs this too Don't keep it only in the Windows/DOS ifdef block
ISSUE 43: Add BIO_sock_shutdown
This replaces SHUTDOWN/SHUTDOWN2 with BIO_closesocket
Minor update to includes and documentation for ct_test.c
Remove OPENSSL_NO_UNIT_TEST guard from ct_test.c
Use s->session->peer instead of calling SSL_get_peer_certificate(s)
Avoids modifying certificate reference count and thereby avoids locking
Lowercase name of SSL_validate_ct as it is an internal function
CT code now calls X509_free() after calling SSL_get_peer_certificate()
Without this the peer certificate would never be deleted resulting in a memory leak
Fixes memory leaks in CT code
Fix the build tree include directory for afalg engine
Make OpenSSL::Test::setup() a bit more forgiving
It was unexpected that OpenSSL::Test::setup() should be called twice by the same recipe However that may happen if a recipe combines OpenSSL::Test and OpenSSL::Test::Simple which can be a sensible thing to do Therefore we now allow it
Elide EVP_read_pw_string() and friends for no-ui
Signed-off-by: Rich Salz <rsalz@openssl.org>
GH768: Minor grammar nits in CRYPTO_get_ex_new_index.pod
Signed-off-by: Rich Salz <rsalz@openssl.org>
Unified - adapt the generation of padlock assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in engines/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - adapt the generation of bignum assembler to use GENERATE
This gets rid of the BEGINRAW..ENDRAW sections in crypto/bn/build.info
This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
Unified - Add the build.info command OVERRIDE to avoid build file clashes
Should it be needed because the recipes within a RAW section might clash with those generated by Configure it's possible to tell it not to generate them with the use of OVERRIDES for example:
SOURCE[libfoo]=foo.c bar.c
OVERRIDES=bar.o BEGINRAW[Makefile(unix)] bar.o: bar.c $(CC) $(CFLAGS) -DSPECIAL -c -o $@ $< ENDRAW[Makefile(unix)]
Unified - Adapt the Unix and VMS templates to support GENERATE
Unified - Add the build.info command GENERATE to generate source files
In some cases one might want to generate some source files from others that's done as follows:
GENERATE[foo.s]=asm/something.pl $(CFLAGS) GENERATE[bar.s]=asm/bar.S
The value of each GENERATE line is a command line or part of it Configure places no rules on the command line except the the first item muct be the generator file It is however entirely up to the build file template to define exactly how those command lines should be handled how the output is captured and so on
Add a function to detect if we have async or not
Add the ASYNC_is_capable() function and use it in speed
GH804: Fix unused-result warnings in dasync
Signed-off-by: Rich Salz <rsalz@openssl.org>
documentation and duplicate goto statements
move ifdef statements
NIST SP800-56A co-factor ECDH KATs
Remove use of CRYPTO_LOCK_INIT in init code
Swap the use of CRYPTO_LOCK_INIT in the init code to use the new threading API mechanism for locking
Swap the init code to use the new Thread API thread locals
The init code was using its own thread local code Now we have a central API for it we should use that instead
Swap the init code to use CRYPTO_ONCE
The init code was using its own "once" implementation Now that we have the new thread API we should use that instead
make update
Update documentation
Make PKCS8_PRIV_KEY_INFO opaque
Make PKCS8_PRIV_KEY_INFO opaque Several accessor functions already exist for this structure Two new ones were added to handle attributes
The old handling of broken formats has been removed and the corresponding structures simplified
Add support to ASYNC_WAIT_CTX to speed
Remove unnecessary memset() to 0 and check for NULL before OPENSSL_free()
Fix the error with RSA and the daysnc engine in async mode
Move RSA struct in the job local struct The change is applied also to other crypto operations (e.g DSA) to make things consistent
Add support for async jobs in OpenSSL speed
Summary of the changes:
* Move the calls to the crypto operations inside wrapper functions This is required because ASYNC_start_job takes a function as an argument
* Add new function run_benchmark() that manages the jobs for all the operations In the POSIX case it uses a select() to receive the events from the engine and resume the jobs that are paused while in the WIN case it uses PeekNamedPipe()
* Add new option argument async_jobs to enable and specify the number of async jobs
Example: openssl speed -engine dasync -elapsed -async_jobs 32 rsa2048
Rework the default cipherlist
- Always prefer forward-secure handshakes - Consistently order ECDSA above RSA - Next always prefer AEADs to non-AEADs irrespective of strength - Within AEADs prefer GCM > CHACHA > CCM for a given strength - Prefer TLS v1.2 ciphers to legacy ciphers - Remove rarely used DSS IDEA SEED CAMELLIA CCM from the default list to reduce ClientHello bloat
Makefile.in: populate [PLIB_]LDFLAG even with $target{} settings
RT#4373
bn/asm/x86[_64]-mont*.pl: complement alloca with page-walking
Some OSes *cough*-dows insist on stack being "wired" to physical memory in strictly sequential manner i.e if stack allocation spans two pages then reference to farmost one can be punishable by SEGV But page walking can do good even on other OSes because it guarantees that villain thread hits the guard page before it can make damage to innocent one..
Restore some mingw builds
"no-pic" builds have in fact been green (and reasonably fast) so restore them while we figure out why tests without "no-pic" hang
perlasm/x86_64-xlate.pl: handle binary constants early
Not all assemblers of "gas" flavour handle binary constants e.g seasoned MacOS Xcode doesn't so give them a hand
Fix some clang warnings
The af_alg engine and associated test were creating warnings when compiled with clang This fixes it
Fix minor errors in the afalg test
The new afalg test should have a copyright date of 2016 Also an incorrect buffer was being sent to EVP_CipherFinal_ex when decrypting
Adding afalg test
Fix OPENSSL_INIT flags to avoid a clash
The 0x00010000L OPENSSL_INIT flag appeared twice
Misc afalg build fixes
Misc afalg build fixes as suggested by Richard Levitte for the latest Configure changes
Rework based on feedback: 1 Cleaned up eventfd handling 2 Reworked socket setup code to allow other algorithms to be added in future 3 Fixed compile errors for static build 4 Added error to error stack in all cases of ALG_PERR/ALG_ERR 5 Called afalg_aes_128_cbc() from bind() to avoid race conditions 6 Used MAX_INFLIGHT define in io_getevents system call 7 Coding style fixes
ALG: Add AFALG engine
Trim Travis config part 2
- Remove Win builds (temporarily) They're slow allowed to fail and therefore not useful as they are - Make the --unified part of the matrix build-only (This can be swapped if --unified becomes the default) - Only build 'no-engine' once don't run any tests but don't allow it to fail
Trim the Travis config
- Remove no-asm We've got to cut something and this is at least partially covered by the sanitizer builds - Remove enable-crypto-mdebug from sanitizer builds enable-crypto-mdebug has been shown to catch some static initialization bugs that the standard leak sanitizer can't so perhaps it has _some_ value; but we shouldn't let the two compete
GH616: Remove dead code
Signed-off-by: Rich Salz <rsalz@openssl.org>
No -fno-common for Darwin
When object files with common block symbols are added to static libraries on Darwin those symbols are invisible to the linker that tries to use them Our solution was to use -fno-common when compiling C source
Unfortunately there is assembler code that defines OPENSSL_ia32cap_P as a common block symbol unconditionally and in some cases there is no other definition -fno-common doesn't help in this case
However 'ranlib -c' adds common block symbols to the index of the static library which makes them visible to the linker using it and that solves the problem we've seen
The common conclusion is either use -fno-common or ranlib -c on Darwin Since we have common block symbols unconditionally choosing the method for our source is easy
New ordinal files recreated from scratch
Change names of ordinals and libs libeay => libcrypto and ssleay => libssl
Remove the old ordinals
use saner default parameters for scrypt
Thanks to Colin Percival for reporting this issue
Disable SSLv3 by default
MR: #2203
Don't mark the eNULL ciphers as non-default
They're not part of ALL so they're not part of COMPLEMENTOFDEFAULT
MR: #2202
Curve25519: fix const-initialization
Clang is permissive of this but gcc fails
Add ASN.1 ADB callback
Add support for application supplied any defined by callback An application can change the selector value if it wishes This is mainly intended for values which are only known at runtime for example dynamically created OIDs
GH784: Better variable name
Signed-off-by: Rich Salz <rsalz@openssl.org>
Make formatting consistent in apps/Makefile.in
Remove redundant semi-colons from apps/Makefile.in
Documentation for new CT s_client flags
Documentation for new SSL functions
Handle empty log name in "enable_logs" line of the CT log file
e.g "enabled_logs = foo,,bar"
Handle missing "enabled_logs" line in CT log file
If a CT log entry in CTLOG_FILE is invalid skip it and continue loading
Previously the remaining CT log entries would not be loaded Also CTLOG_STORE_load_file would return 1 even if a log entry was invalid resulting in no errors being shown
Extends s_client to allow a basic CT policy to be enabled
Change default CT log list filename to "ct_log_list.cnf"
Adds CT validation to SSL connections
Disabled by default but can be enabled by setting the ct_validation_callback on a SSL or SSL_CTX
Changes to DEFAULT curves
Change the ECC default curve list to be this in order: x25519 secp256r1 secp521r1 secp384r1 brainpoolP256r1 brainpoolP384r1 and brainpool512r1
Curve25519: avoid undefined behaviour
Appease the sanitizer: avoid left shifts of negative values
This could've been done entirely with casts to uint and back but using masks seemed slightly more readable
There are also implementation-defined signed right shifts in this code Those remain
chacha/asm/chacha-ppc.pl: fix typo
RT#4365
Don't build RC4 ciphersuites into libssl by default
RC4 based ciphersuites in libssl have been disabled by default They can be added back by building OpenSSL with the "enable-weak-ssl-ciphers" Configure option at compile time
Improved HKDF and TLS1-PRF documentation
Correction $disabled{shared} rather than $config{no_shared}
Restore the zlib / zlib-dynamic logic
The proper logic is that both zlib and zlib-dynamic are disabled by default and that enabling zlib-dynamic would enable zlib Somewhere along the way the logic got changed zlib-dynamic was enabled by default and zlib didn't get automatically enabled
This change restores the original logic
Sanity check PVK file fields
PVK files with abnormally large length or salt fields can cause an integer overflow which can result in an OOB read and heap corruption However this is an rarely used format and private key files do not normally come from untrusted sources the security implications not significant
Fix by limiting PVK length field to 100K and salt to 10K: these should be more than enough to cover any files encountered in practice
Issue reported by Guido Vranken
GH773: Possible leak on CRYPTO_THREAD_lock_new failure
Signed-off-by: Rich Salz <rsalz@akamai.com>
GH781: openssl.spec: use secure urls
Signed-off-by: Rich Salz <rsalz@akamai.com>
GH769: Reuse strndup()
Signed-off-by: Rich Salz <rsalz@akamai.com>
GH355: Implement HKDF
This patch implements the HMAC-based Extract-and-Expand Key Derivation Function (HKDF) as defined in RFC 5869
It is required to implement the QUIC and TLS 1.3 protocols (among others)
Signed-off-by: Rich Salz <rsalz@openssl.org>
Remove overzealous echoing
This construct in a Makefile is a bit overzealous:
@echo FOO @FOO
Cleaned up
Add KDF support to pkeyutl Update documentation
Clean up curve25519 build
- Remove OPENSSL_X25519_X86_64 which never worked because we don't have the assembly - Also remove OPENSSL_SMALL (which should have been OPENSSL_SMALL_FOOTPRINT) which isn't a priority at the moment
update NEWS
fix no-ec build
Refactor ClientHello extension parsing
1) Simplify code with better PACKET methods
2) Make broken SNI parsing explicit SNI was intended to be extensible to new name types but RFC 4366 defined the syntax inextensibly and OpenSSL has never parsed SNI in a way that would allow adding a new name type RFC 6066 fixed the definition but due to broken implementations being widespread it appears impossible to ever extend SNI
3) Annotate resumption behaviour OpenSSL doesn't currently handle all extensions correctly upon resumption Annotate for further clean-up
4) Send an alert on ALPN protocol mismatch
make update
add kdf.h to mkdef.pl
Add KDF error codes
make update
Generalise KDF test in evp_test.c
Convert PRF tests to use Ctrl
Add Ctrl keyword to KDF test in evp_test
Add string ctrl operations to TLS1 PRF update documentation
Use utility functions for HMAC and CMAC
EVP_PKEY_CTX utility functions
Utility functions to pass a string or hex string to EVP_PKEY_CTX_ctrl()
make errors
Handle KDF internally
Handle KDF in ECDH_compute_key instead of requiring each implementation support it This modifies the compute_key method: now it allocates and populates a buffer containing the shared secret
Document the changes in config settings
Don't copy from %target to %config so much see %config as a complement
We copied $target{cflags} $target{defines} and a few more to %config just to add to the entries Avoid doing so and let the build templates deal with combining the two
There are a few cases where we still fiddle with %target but that's acceptable
Configure - Get rid of the special thread_cflag replace with thread_scheme
The thread_cflag setting filled a double role as kinda sorta an indicator of thread scheme and as cflags Some configs also added lflags and ex_libs for multithreading regardless of if threading would be enabled or not
Instead of this add threading cflags among in the cflag setting threading lflags in the lflag setting and so on if and only if threads are enabled (which they are by default)
Also for configs where there are no special cflags for threading (the VMS configs are of that kind) this makes it possible to still clearly mention what thread scheme is used
The exact value of thread scheme is currently ignored except when it's "(unknown)" and thereby only serves as a flag to tell if we know how to build for multi-threading in a particular config Yet the currently used values are "(unknown)" "pthreads" "uithreads" (a.k.a solaris threads) and "winthreads"
Configure - get rid of the special debug_ and release_ settings
Instead make the build type ("debug" or "release") available through $config{build_type} and let the configs themselves figure out what the usual settings (such as "cflags" "lflags" and so on) should be accordingly
The benefit with this is that we can now have debug and release variants of any setting not just those Configure supports and may also involve other factors (the MSVC flags /MD[d] and /MT[d] involve both build type and whether threading is enabled or not)
Minimize copied config settings
$target{lflags} and $target{plib_flag} were copied to %config for no good reason
Configure - move the addition of the zlib / libz lib to configs
Configure had the Unix centric addition of -lz when linking with zlib is enabled which doesn't work on other platforms Therefore we move it to the BASE_unix config template and add corresponding ones in the other BASE_* config templates The Windows one is probably incomplete but that doesn't matter for the moment as mk1mf does it's own thing anyway
This required making the %withargs table global so perl snippets in the configs can use it
Configure - Rename BASE to DEFAULTS and add a few inheritable BASEs
These BASE templates are intended to hold values that are common for all configuration variants for whole families of configurations
So far three "families" are identified: Unix Windows and VMS mostly characterised by the build system they currently use
Configure - Allow CODErefs and ARRAYrefs in configuration setting arrays
This provides for more powerful lazy evaluation and buildup of the setting contents For example something like this becomes possible:
defines => [ sub { $config{thisorthat} ? "FOO" : () } ]
Any undefined result of such functions (such as 'undef' or the empty list) will be ignored
Ensure Async is deinited properly
The global thread local keys were not being deinited properly in async
Convert ASYNC code to use new Thread API
The async code uses thread local variables We should convert to using the new Thread API for doing this
Provide getters for default_passwd_cb and userdata
This patch provides getters for default_passwd_cb and userdata for SSL and SSL_CTX The getter functions are required to port Python's ssl module to OpenSSL 1.1.0
curve25519: add missing const-qualifier
Add a shared_target to the VC-common config
This has no real meaning except it gives Configure a hint that VC targets are indeed capable of producing shared objects
Configure - make the use of environment variables for overrides consistent
We allow some commands to be overriden but didn't handle that in a consistent manner
Make uplink auxiliary source separate from cpuid source
There are cases for example when configuring no-asm that the added uplink source files got in the way of the cpuid ones The best way to solve this is to separate the two
Make k25519Precomp const
MR: #2184
poly1305/asm/poly1305-*.pl: flip horizontal add and reduction
Formally only 32-bit AVX2 code path needs this but I choose to harmonize all vector code paths
RT#4346
Consistently use arm_arch.h constants in armcap assembly code
Most of the assembly uses constants from arm_arch.h but a few references to ARMV7_NEON don't Consistently use the macros everywhere
Signed-off-by: Andy Polyakov <appro@openssl.org>
remove old unused oneline name field
make errors
Add default operations to EC_METHOD
Replace overrides
Instead of overriding a default operation move default operation to a separate function which is then explicitly included in any EC_METHOD that uses it
CT policy validation
Specifies a callback that will in the future be used by the SSL code to decide whether to abort a connection on Certificate Transparency grounds
Fix -pkeyopt and fix error check
RT4347: Fix GCC unused-value warnings with HOST_c2l()
The HOST_c2l() macro assigns the value to the specified variable but also evaluates to the same value Which we ignore triggering a warning
To fix this just cast it to void like we did in commit 08e553644 ("Fix some clang warnings.") for a bunch of other instances
Signed-off-by: Rich Salz <rsalz@openssl.org>
Move macros for reading/writing integers into ct_locl.h
Addresses review comments from richsalz
Fixes potential double free and memory leak in ct_b64.c
Verify SCT signatures
Tests included in future commit which adds CT policy validation
Updates to CHANGES and NEWS for 1.0.2 and 1.0.1 release
bn/asm/x86_64-mont5.pl: unify gather procedure in hardly used path and reorganize/harmonize post-conditions
Additional hardening following on from CVE-2016-0702
crypto/bn/x86_64-mont5.pl: constant-time gather procedure
