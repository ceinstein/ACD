NOT BUG:Fix enable-zlib no-comp
NOT BUG:Fix no-rc4
NOT BUG:Move declaration of i into blocks where it is used
BUG:sctp requires dgram
BUG:RT4660: BIO_METHODs should be const
NOT BUG:BIO_new etc. don't need a non-const BIO_METHOD This allows all the built-in method tables to live in .rodata
NOT BUG:Downcase VMS config names
NOT BUG:On VMS we downcase option names which means that config names are downcased as well so they need to be downcased in the target table to be found
NOT BUG:Just like bio_out bio_err needs the linebuffer filter on VMS
NOT BUG:Adds s2i function for ct_precert_poison X509 extension
NOT BUG:Allows CONF files for certificate requests to specify that a pre- certificate should be created (see RFC6962)
NOT BUG:Fix memory leak where fdlookup linked list is not freed during ASYNC_WAIT_CTX_free
NOT BUG:Fix no-ts with --strict-warnings
NOT BUG:Fix no-sock
NOT BUG:Misc fixes for no-sock
NOT BUG:Fix no-gost
NOT BUG:Configure had the wrong name for the no-gost option
NOT BUG:Don't use hardcoded values for types
NOT BUG:In for loop values introduce a dummy to protect against empty list
NOT BUG:In constructions such as 'for x in $(MAKEVAR); do ...' there's the possibility that $(MAKEVAR) is en empty value Some shells don't like that so introduce a dummy value that gets discarded:
BUG:for x in dummy $(MAKEVAR); do if [ "$$x" = "dummy" ]; then continue; fi
NOT BUG:Closes RT#4459
NOT BUG:Fix no-seed
NOT BUG:Fix compilation with --strict-warnings and no-seed
NOT BUG:Remove the no-rijndael option
NOT BUG:Rijndael is an old name for AES
NOT BUG:Fix no-scrypt
NOT BUG:Fix the evp tests when no-scrypt is used
NOT BUG:Skip the CMS tests if CMS is disabled
NOT BUG:This fixes the no-cms compile time option
NOT BUG:Fix no-dsa
NOT BUG:Misc fixes for no-dsa
NOT BUG:Build system: VC-WIN64I fixups
NOT BUG:Configurations/windows-makefile.tmpl: respect no-makedepend
NOT BUG:Windows build system: get uplink right
NOT BUG:config: fix off-by-centimeter-to-the-right typo
NOT BUG:Configurations/10-main.conf: freeze -std option in darwin*-ppc-cc
NOT BUG:RT#4422
NOT BUG:Remove mk1mf documentation
NOT BUG:Remove the remainder of util/mk1mf.pl and companion scripts
NOT BUG:This removes all scripts that deal with MINFO as well since that's only used by mk1mf
NOT BUG:Remove generation of ms/version32.rc from Configure use util/mkrc.pl
NOT BUG:utils/mkrc.pl was added a while ago as a better generator for the Windows DLL resource file Finalize the change by removing the ms/version32.rc generator from Configure and adding resource file support using mkrc.pl in Configurations/windows-makefile.pl
NOT BUG:Remove the mk1mf VC-WIN* builds and its supporting scripts
NOT BUG:The mk1mf build for the VC-WIN* targets is broken and the unified scheme works well enough so we clean out the old
NOT BUG:Fix ALPN - more fixes
NOT BUG:* Clear proposed along with selected before looking at ClientHello * Add test case for above * Clear NPN seen after selecting ALPN on server * Minor documentation updates
NOT BUG:Add a comment on dane_verify() logic
NOT BUG:Remove #error from include files
NOT BUG:Don't have #error statements in header files but instead wrap the contents of that file in #ifndef OPENSSL_NO_xxx This means it is now always safe to include the header file
BUG:GH886: CONNECT should use HTTP/1.1
BUG:By default you get 0.9 which isn't widely available But we use HTTP/1.0 for now Courtesy beusink@users.github.com
NOT BUG:Have makedepend output to stdout and redirect it
NOT BUG:This gives us better control of what files are produced
NOT BUG:ct_int.h only needed by crypto/ct
NOT BUG:Merge ct_int.h into ct_locl.h
NOT BUG:constify DSA_SIG_get0()
BUG:Move blake2_loclh to blake2 directory
NOT BUG:Fixed language
NOT BUG:Fixed a bunch of typos in the docs
NOT BUG:constify ECDSA_SIG_get0()
NOT BUG:PR#4436
NOT BUG:If the asm file to be compiled isn't generated leave the ext alone
NOT BUG:Closes RT#4447
NOT BUG:make update
NOT BUG:Don't let 'generate' target depend on generated files act directly instead
NOT BUG:One of the 'generate' targets depended on $(SRCDIR)/apps/progs.h which depended on.. nothing This meant it never got regenerated once it existed regardless of need Of course we could have it depend on all the files checked to generate it but they also depend on progs.h so we'd end up getting cricular dependencies which makes make unhappy
NOT BUG:Furthermore and this applies for the other generated files having them as targets means that they may be regenerated on the fly in some cases and since they get written to the source tree this isn't such a good idea if that tree is read-only (which is a possible situation in an out-of-tree build)
BUG:So we move all the actions to the 'generate' targets themselves thus making sure they get regenerated in a controlled manner and regardless of dependencies
NOT BUG:apps/progs.pl: add back the INCLUDE_FUNCTION_TABLE wrapper
NOT BUG:Revert "Ignore the generated apps/progs.h"
BUG:This reverts commit 91056e72693b4ee8cb5339d9091871ffc3b6f776
NOT BUG:Revert "Generate apps/progs.h on the fly"
NOT BUG:This reverts commit 04e2a527379ad12ca512aef4e838f94af22d7f79
NOT BUG:Revert "Include progs.h directly in openssl.c instead of via apps.h"
BUG:This reverts commit a45d7d5388c6774a484cff4af13f188240d3d50b
NOT BUG:GH36: Add casts to match the documentation
NOT BUG:Correct faulty L<> links in .pods
BUG:Closes RT#4450
NOT BUG:Add a few more quotes for Windows (install_ssldirs)
NOT BUG:The command source are files not directories
NOT BUG:Therefore they should be concatenated with the source directory using catfile() not catdir()
NOT BUG:Replace sed command with perl
NOT BUG:Some implementations of sed require a newline before an ending '}' The easier method is to replace that sed command with the corresponding perl command
NOT BUG:Closes RT#4448
NOT BUG:Clear the exit code from 'find' in 'make depend'
NOT BUG:Depending on what has been built so far all .d files may not be present and 'find' will exit with non-zero exit code This isn't a bother for us but may break make so clear the exit code with an added 'exit 0'
NOT BUG:Closes RT#4444
NOT BUG:Shut find up about files not found
NOT BUG:Some of the files in $(DEPS) might not exist We don't need to know
NOT BUG:Don't free up EVP_MD_CTX
NOT BUG:Don't free up passed EVP_MD_CTX in ASN1_item_sign_ctx() This simplifies handling and retains compatiblity with previous behaviour
NOT BUG:PR#4446
NOT BUG:Use the dependencies received in generatesrc()
NOT BUG:generatesrc() did already receive dependency information but never used it and never really needed to.. until now
NOT BUG:Ignore the generated apps/progs.h
NOT BUG:Generate apps/progs.h on the fly
NOT BUG:Include progs.h directly in openssl.c instead of via apps.h
NOT BUG:Make apps/progs.pl more flexible
NOT BUG:Make Configure write @disablables to configdata.pm and have apps/progs.pl use that data
NOT BUG:Correct the export list when writing configdata.pm
NOT BUG:Correct the check of files to depend on against known generated ones
NOT BUG:The check was erroneously inversed
NOT BUG:Don't perform tsa tests if configured "no-ts"
NOT BUG:Correct incorrect path
NOT BUG:In crypto buildinf.h depends on ../configdata.pm not ./configdata.pm
NOT BUG:Better 'make depend' mechanism
NOT BUG:Instead of relying on the '-nt' test operator which doesn't exist everywhere use find's '-newer' to find out if any of the known .d files is newer than Makefile
NOT BUG:Closes RT#4444
NOT BUG:make update
NOT BUG:Implement support for no-ts
NOT BUG:apps/progs.pl: more consistent output for digests
NOT BUG:Fix no-des
NOT BUG:Numerous fixes for no-des
NOT BUG:Fix no-dgram
NOT BUG:A few places in s_client needed some OPENSSL_NO_DTLS guards which fixes no-dgram
NOT BUG:Fix no-deprecated
NOT BUG:The no-deprecated build was failing because afalg was relying on a transitive include that does not exist in a no-deprecated build
NOT BUG:Fix no-cmac
NOT BUG:There were a couple of CMAC references without OPENSSL_NO_CMAC guards
NOT BUG:Add a test to see that signals are caught as failures
NOT BUG:Make OpenSSL::Test::run() sensitive to signals
NOT BUG:$? in perl gets the status value from wait(2) which is a word with the exit code in the upper half and the number of a raised signal in the lower half OpenSSL::Test::run() ignored the signal half up until now
NOT BUG:With this change we recalculate an exit code the same way the Unix shells do using this formula:
BUG:($? & 0x7f) ? ($? & 0x7f)|0x80 : ($? >> 8);
NOT BUG:Remove more unused things
NOT BUG:Moved doc/standards.txt to the web
NOT BUG:Resolved unresolved symbols with no-hw
NOT BUG:Compiling on Windows with no-hw was resulting in unresolved symbols in the padlock engine
NOT BUG:Ensure that no-comp functions are flagged as such
NOT BUG:mkdef.pl was not detecting no-comp functions This updates the header file so that mkdef.pl detects that no-comp applies and the functions are marked accordingly
NOT BUG:Fix no-rc2 in the CMS test
NOT BUG:The CMS test uses some RC2 keys which should be skipped if the RC2 is disabled
NOT BUG:Mark OCB as an AEAD cipher
BUG:OCB is AEAD capable but was not marked as such with the EVP_CIPH_FLAG_AEAD_CIPHER flag
NOT BUG:Ensure that memory allocated for the ticket is freed
NOT BUG:If a call to EVP_DecryptUpdate fails then a memory leak could occur Ensure that the memory is freed appropriately
NOT BUG:Issue reported by Guido Vranken
NOT BUG:Fix a potential double free in EVP_DigestInit_ex
NOT BUG:There is a potential double free in EVP_DigestInit_ex This is believed to be reached only as a result of programmer error - but we should fix it anyway
NOT BUG:Issue reported by Guido Vranken
NOT BUG:Fix build; CPP syntax error
NOT BUG:Update EVP_CIPHER_CTX_set_padding documentation
NOT BUG:Add note about when EVP_CIPHER_CTX_set_padding should be called
NOT BUG:README: small fixups
NOT BUG:Don't refer to INSTALL files that don't exist any more Make it clear that the libssl and libcrypto libraries may be named differently on different platforms
NOT BUG:Make picker thread and combine standard config helper functions
NOT BUG:Document them as well
NOT BUG:Remove Netware and OS/2
BUG:Disallow --classic for Windows
NOT BUG:With all the config changes mk1mf is broken on Windows
NOT BUG:windows-makefile.tmpl: Stop keeping temporary files
NOT BUG:Add install targets for Windows
NOT BUG:On Windows we set INSTALLTOP to default as follows:
NOT BUG:VC-WIN32:
NOT BUG:PREFIX: %ProgramFiles(x86)%\OpenSSL OPENSSLDIR: %CommonProgramFiles(x86)%\SSL
NOT BUG:VC-WIN64*:
NOT BUG:PREFIX: %ProgramW6432%\OpenSSL OPENSSLDIR: %CommonProgramW6432%\SSL
NOT BUG:Should those environment variables be missing the following is used as fallback:
NOT BUG:PREFIX: %ProgramFiles%\OpenSSL OPENSSLDIR: %CommonProgramFiles%\SSL
NOT BUG:Report TLS 1.0 as backwards-compatible TLSv1
BUG:The TLSv1.0 form is retained for reporting the first protocol version that supports a given cupher
NOT BUG:Remove ultrix/mips support
NOT BUG:Remove support for Borland C++
NOT BUG:Borland C++ 4.5 is very old and our "support" for it is already non-existent we might as well remove it
NOT BUG:Use correct C format for keysets.pl
NOT BUG:Start documenting Configure internals
NOT BUG:This is a living document everyone is encouraged to add to it Implementation details as well as broader implementation philosophy has a place here
NOT BUG:I'm starting with documentation of the how conditions in build.info files are treated
NOT BUG:Added build.info debugging capability to Configure
NOT BUG:This is only enabled when the environment variable CONFIGURE_DEBUG_BUILDINFO is defined This will cause every line in every build.info file to be displayed along with the content of the skip stack before and after parsing This can be a very powerful tool to see that all conditions are working as expected
NOT BUG:Simplify define as we don't support MS-DOS anymore
NOT BUG:Don't define OPENSSL_ENGINES in test recipes do it in Makefiles instead
NOT BUG:In most builds we can assume that engines live in the build tree subdirectory "engines" This was hard coded into the tests that use the engine ossltest
NOT BUG:However that hard coding is tedious it would need to be done in every test recipe and it's an incorrect assumption in some cases
NOT BUG:This change has us play it safe and let the build files tell the testing framework where the engines are
NOT BUG:Have 'openssl version -a' output the default engines directory as well
NOT BUG:Bugfix: Encode the requested length in s_cb.c:hexencode()
NOT BUG:Sort cipher-list at runtime
NOT BUG:Reduces #ifdef complexity
NOT BUG:unix-Makefile template: use $(PERL) everywhere
NOT BUG:There was one spot that had hard-coded 'perl'
BUG:Deal with DSA_SIG opaqueness
NOT BUG:Prepare for 1.1.0-pre5-dev
NOT BUG:Prepare for 1.1.0-pre4 release
NOT BUG:Some platforms provide getcontext() but it does not work
NOT BUG:Some platforms claim to be POSIX but their getcontext() implementation does not work Therefore we update the ASYNC_is_capable() function to test for this
NOT BUG:RT#4366
NOT BUG:When building DLLs hack the library name in the .def file
NOT BUG:util/mkdef.pl assumes it knows what the resulting library name will be Really it shouldn't but changing it will break classic native Windows builds so we leave it for now and change the LIBRARY line externally when needed instead
NOT BUG:DLL object files should not be built with /Zl"
NOT BUG:When building the DLLs we depend on the correct default C RTL info
NOT BUG:Appveyor - make sure to actually build "shared" in the shared configuration
NOT BUG:Fix up CHANGES
NOT BUG:- Remove duplicate entry - Add author for SSL_CIPHER query functions - Note HKDF support in CHANGES and NEWS
BUG:[ci skip]
BUG:We should use $SRCDIR in Makefiles
NOT BUG:Normally we always refer to source files relative to $SRCDIR in Makefiles However the reference to unix-Makefile.tmpl was using a fully expanded absolute path This can cause problems for Mingw
NOT BUG:Disable AFALG when cross-compiling
NOT BUG:We don't currently support cross-compiling of the afalg engine However we were failing to explicitly mark it as disabled during Configure leading to a failed build
NOT BUG:Fix a TLSProxy race condition
NOT BUG:TLSProxy starts s_server and specifies the number of client connects it should expect After that s_server is supposed to close down automatically However if another test is then run then TLSProxy will start a new instance of s_server If the previous instance hasn't closed down yet then the new instance can fail to bind to the socket
NOT BUG:poly1305/asm/poly1305-x86_64.pl: make it work with linux-x32
NOT BUG:On Windows page walking is known as __chkstk
NOT BUG:Explain *cough*-dows
NOT BUG:Make the perl dependency post-processor into just one line
NOT BUG:Make doesn't always treat multiline quoted strings as nicely as one would wish
NOT BUG:Not all shells understand !
NOT BUG:In unix-Makefile.tmpl this construction has been used a few times
NOT BUG:if ! something; then ..
NOT BUG:It seems though that some shells do not understand ! so these need to be changed
NOT BUG:General verify options to openssl ts
NOT BUG:This commit adds the general verify options of ocsp verify cms etc to the openssl timestamping app as suggested by Stephen N Henson in [openssl.org #4287] The conflicting "-policy" option of "openssl ts" has been renamed to "-tspolicy" Documentation and tests have been updated
NOT BUG:CAVE: This will break code which currently uses the "-policy" option
NOT BUG:Fix CRYPTO_THREAD_run_once return value checks
NOT BUG:Cygwin configs were missing thread_scheme settings add them
NOT BUG:Small typo
NOT BUG:OPENSSL_INIT_ONCE and OPENSSL_INIT_ONCE_STATIC_INIT are really CRYPTO_ONCE and CRYPTO_ONCE_STATIC_INIT
NOT BUG:static-engine is no longer an internal keyword remove it from %disabled
NOT BUG:Clarify NOTES.WIN
NOT BUG:Update and clarify ECDSA documentation
NOT BUG:Disable afalg when engine is disabled
NOT BUG:Also make it possible to disable afalg separately
NOT BUG:we still need to update config again
NOT BUG:Fix typo in manual missing ending '>'
BUG:Travis: build tests in BUILDONLY mode
NOT BUG:config: fix HP-UX PA-RISC detection
NOT BUG:s390x assembly pack: 32-bit fixups
NOT BUG:build.info/Makefile.in: Itanium fixups
NOT BUG:engines/Makefile.in: some [older] shell complain about 'for i ;' but not if there is reference to empty variable
NOT BUG:Fix the init cleanup order
NOT BUG:There are internal dependencies between the various cleanup functions This re-orders things to try and get that right
NOT BUG:Add some missing cleanup calls to de-init
NOT BUG:OBJ_cleanup() doesn't always get called from EVP_cleanup() so needs to be explicitly called in de-init Also BIO_sock_cleanup() also needs to be called
BUG:Fix freeze in config's interrupt trap with some shells
BUG:With bash and zsh the trap on the 5 second read does respond but doesn't break out of the read What's worse is that it takes away the 5 second timer and therefore has the read hang indefinitely and (almost) unbreakable
NOT BUG:Having the trap do 'exit 0' after reseting the tty params has it break out of read and continue with the configuration
NOT BUG:Other shells do not appear to have the issue described here but neither does the extra 'exit 0' appear to harm them
NOT BUG:Enforce the demand for Perl 5.10.0 as a minimum
NOT BUG:Fix a few Configure errors
NOT BUG:Document X509_get_serialNumber and X509_set_serialNumber
NOT BUG:Add EVP_PKEY documentation
NOT BUG:Document EVP_PKEY_id() and EVP_PKEY_base_id()
NOT BUG:Change an function macro for ERR match the function it's used in
NOT BUG:Complete incomplete makefile variable referenses
BUG:A couple of '$(PERLASM_SCHEM' had sneaked in
NOT BUG:Collect the names of generated files and clean them away at target clean:
NOT BUG:Add $(LIB_CFLAGS) for any build.info generator that uses $(CFLAGS)
BUG:The reason to do so is that some of the generators detect PIC flags like -fPIC and -KPIC and those are normally delivered in LD_CFLAGS
NOT BUG:Use single quotes rather than double quotes when needed
NOT BUG:When passing down values to Makefile.shared do so with single quotes as much as possible to avoid having the shell create a mess of quotes
NOT BUG:Harmonize Unix Makefile template with Windows dito
NOT BUG:The variable SHARED_CFLAGS and SHARD_LDFLAGS were used in the Unix template because they normally contain options used when building "shared" The Windows template on the other hand uses LIB_CFLAGS to express the intended use of those flags rather than their content The Windows template still used SHARED_LDFLAGS which seems inconsistent
NOT BUG:To harmonize the two any SHARED_CFLAGS gets renamed to LIB_CFLAGS and SHARED_LDFLAGS to LIB_LDFLAGS That makes the intent consistent along with BIN_{C,LD}FLAGS and DSO_{C,LD}FLAGS
NOT BUG:Finally make sure to pass down $(LIB_CFLAGS) or $(DSO_CFLAGS) along with $(CFLAGS) when using Makefile.shared
NOT BUG:Fix memory leak in library deinit
NOT BUG:ENGINE_cleanup calls CRYPTO_free_ex_data and therefore CRYPTO_cleanup_all_ex_data - which cleans up the method pointers - must run after ENGINE_cleanup
NOT BUG:Additionally don't needlessly initialize the EX_CALLBACKS stack during e.g CRYPTO_free_ex_data The only time this is actually needed is when reserving the first ex data index Specifically since sk_num returns -1 on NULL input the rest of the code already handles a NULL method stack correctly
NOT BUG:Add doc on when to use SCT callback
NOT BUG:With help from Viktor
BUG:Workaround for false -Warray-bounds in Travis
NOT BUG:ccache + clang produces a false strcmp warning see https://llvm.org/bugs/show_bug.cgi?id=20144
BUG:Since this only happens with ccache and --strict-warnings and only with certain versions of glibc / clang disabling ccache is a reasonable short-term workaround
NOT BUG:Fix no-comp build
NOT BUG:Fix build break; add function declaration
NOT BUG:When creating directory specs use srctop_dir rather than srctop_file
NOT BUG:While insignificant on Unix like systems this is significant on systems like VMS
NOT BUG:Avoid sed for dependency post-processing
NOT BUG:It turns out that different sed implementations treat -i differently to cause issues make it simpler by avoiding it entirely and give perl the trust to be consistent enough
NOT BUG:Because bn_expand2 is declared non-static it must not be static
NOT BUG:That doesn't change even to make a dummy to hide its unavailability
NOT BUG:Remove some dead code from 1999
NOT BUG:Don't clobber the last error
NOT BUG:On Windows we call WSAGetLastError() to find out the last error that happened on a socket operation We use this to find out whether we can retry the operation or not You are supposed to call this immediately however in a couple of places we logged an error first This can end up making other Windows system calls to get the thread local error state Sometimes that can clobber the error code so if you call WSAGetLastError() later on you get a spurious response and the socket operation looks like a fatal error
NOT BUG:Really we shouldn't be logging an error anyway if its a retryable issue Otherwise we could end up with stale errors on the error queue
NOT BUG:removed extra define
NOT BUG:verified that build succeeds without the extra define
NOT BUG:Fix no-blake2 for Windows classic build
NOT BUG:Fix no-blake2 for Windows classic build
NOT BUG:make update
NOT BUG:Make X509_SIG opaque
NOT BUG:Some sed implementations are not greedy enough use perl instead
BUG:The issue is demonstrated as follows:
NOT BUG:On Linux:
BUG:$ echo ': foo.h /usr/include/stddef.h bar.h' | sed -e 's/ \/\(\\.\|[^ ]\)*//g' : foo.h bar.h
NOT BUG:On MacOS X:
BUG:$ echo ': foo.h /usr/include/stddef.h bar.h' | sed -e 's/ \/\(\\.\|[^ ]\)*//g' : foo.husr/include/stddef.h bar.h
NOT BUG:Perl is more consistent:
NOT BUG:On Linux:
BUG:$ echo ': foo.h /usr/include/stddef.h bar.h' | perl -pe 's/ \/(\\.|[^ ])*//g;' : foo.h bar.h
NOT BUG:On MacOS X:
BUG:$ echo ': foo.h /usr/include/stddef.h bar.h' | perl -pe 's/ \/(\\.|[^ ])*//g;' : foo.h bar.h
NOT BUG:Make update to catch function renames
NOT BUG:Use unsigned int instead of just unsigned
NOT BUG:Save leaf_node and node_offset as character array
NOT BUG:They are not numbers in the machine byte order
NOT BUG:Review comments
BUG:Add blake2 support
NOT BUG:move DSA_SIG definition into C source file
NOT BUG:crypto/*/build.info: make it work on ARM platforms
NOT BUG:crypto/*/build.info: SPARC-specific fixups
NOT BUG:Configurations/unix-Makefile.tmpl: don't leave empty .s files behind
NOT BUG:If pre-processor failed an empty .s file could be left behind which could get successfully compiled if one simply re-ran make and cause linking failures Not anymore Remove even intermediate .S in case of pre-processor failure
NOT BUG:Configure: remove dependency on 'head'
BUG:constify CT_POLICY_EVAL_CTX getters
NOT BUG:Surround ctx_set_ctlog_list_file() with #ifndef OPENSSL_NO_CT
NOT BUG:Suppress CT warnings in test_ssl
NOT BUG:Running test_ssl with HARNESS_VERBOSE results in lots of spurious warnings about an inability to load the CT config file This fixes it
NOT BUG:Avoid getting unresolved referense to bn_expand2 in test/bntest.c
BUG:Issue identified on Solaris by Erik Forsberg <erik@efca.com>
NOT BUG:Call CONF_modules_free() before ENGINE_cleanup() in auto-deinit
NOT BUG:During auto de-init we were calling ENGINE_cleanup() and then later CONF_modules_free() However the latter function can end up calling engine code which can lead to a use of the global_engine_lock after it has already been freed Therefore we should swap the calling order of these two functions
NOT BUG:Fix no-rmd160 classic Windows build
NOT BUG:no-ripemd was unified a while ago but the change was not done in mk1mf.pl This commit changes the no-ripemd string to no-rmd160 which fixes the no-rmd160 classic build
NOT BUG:Don't build dynamic engines unless configured "shared"
NOT BUG:Experience has shown that dynamic engines with their own copy of libcrypto is problematic so we disable that possibility
NOT BUG:Harmonise the two methods to generate dependency files
NOT BUG:One of them didn't clean away .d.tmp files properly The other would overwrite the .d files unconditionally thereby causing a possibly unnecessary dependency rebuild which touches the date of Makefile which causes a possibly unnecessary rebuild of buildinf.h and everything that depends on that
NOT BUG:More tweaks to the installation instructions
NOT BUG:A few things were out of date and a few things were missing Also some formatting updates
NOT BUG:Fix some assembler generating scripts for better unification
NOT BUG:Some of these scripts would recognise an output parameter if it looks like a file path That works both in both the classic and new build schemes Some fo these scripts would only recognise it if it's a basename (i.e no directory component) Those need to be corrected as the output parameter in the new build scheme is more likely to contain a directory component than not
NOT BUG:Add include directory options for assembler files that include from crypto/
NOT BUG:A few were missed in the previous commit
BUG:Closes RT#4412
BUG:check reviewer --reviewer=emilia Use SSL_get_SSL_CTX instead of passing SSL_CTX to s_client.c:print_stuff
BUG:check reviewer --reviewer=emilia Pass entire CTLOG_STORE to SCT_print rather than just the SCT's CTLOG
NOT BUG:SCT_print now looks up the correct CT log for you
NOT BUG:check reviewer --reviewer=emilia Remove 'log' field from SCT and related accessors
NOT BUG:In order to still have access to an SCT's CTLOG when calling SCT_print SSL_CTX_get0_ctlog_store has been added
NOT BUG:Improved documentation for some CT functions in openssl/ssl.h
NOT BUG:Add include directory options for assembler files that include from crypto/
NOT BUG:Closes RT#4406
NOT BUG:In the recipe using "makedepend" make sure the object file extension is there
NOT BUG:Configure - don't trust $1 to stick around save its value away
NOT BUG:Fix a memory leak in the afalg engine
NOT BUG:The AFALG engine created a global EVP_CIPHER instance but was not freeing it up when the engine was destroyed
NOT BUG:Harmonize the option processing in 'config' and 'config.com'
NOT BUG:The help text for -d in 'config' was aged and the option processing in 'config.com' was just different This harmonizes 'config.com' with the instructions in INSTALL and both current reality
NOT BUG:Add cleaning targets to Configurations/windows-makefile.tmpl
NOT BUG:The typedef ECPARAMETERS is already defined don't define it anew
NOT BUG:Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms
NOT BUG:UEFI needs this too Don't keep it only in the Windows/DOS ifdef block
BUG:This is a fixed version of what was originally commit 963bb62195 and subsequently reverted in commit 37b1f8bd62 Somewhere along the way the Windows/DOS ifdef actually got removed leaving it just broken It should have been turned into an #elif not removed
NOT BUG:This one correctly changes the logic from
BUG:# if WINDOWS|DOS # if OPENSSL_NO_SOCK .. no-sock .. # elif !DJGPP .. native windows ..
BUG:to
BUG:# if OPENSSL_NO_SOCK .. no-sock .. # elif WINDOWS|DOS # if !DJGPP .. native windows ..
NOT BUG:Remove a missed item from the old thread API
NOT BUG:A line from cryptlib.h was missed during the old Thread API removal This breaks no-deprecated builds
NOT BUG:Mark SRP_VBASE_get_by_user() as deprecated
NOT BUG:The function SRP_VBASE_get_by_user() is declared as deprecated but the implementation was not
NOT BUG:No need to call EVP_CIPHER_CTX_init after EVP_CIPHER_CTX_new
BUG:The afalgtest was unnecessarily initing an EVP_CIPHER_CTX It is not needed and is deprecated
NOT BUG:Pass down inclusion directories to source file generators
NOT BUG:The source file generators sometimes use $(CC) to post-process generated source and getting the inclusion directories may be necessary at times so we pass them down
NOT BUG:RT#4406
BUG:Travis - add missing semi-colon
NOT BUG:Update .gitignore to ignore all cscope files
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:remove ms/.rnd and add it to .gitignore
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:RT3676 add: Export ASN.1 DHparams
NOT BUG:Travis - don't use ccache with cross compiles
NOT BUG:Although theoretically possible Configure doesn't treat CC variable set like this very well: CC="ccache i686-w64-mingw32-gcc" Also this Travis script doesn't recognise the possibility either
NOT BUG:Avoid negative array index in BIO_debug_callback()
NOT BUG:BIO_snprintf() can return -1 on truncation (and overflow as of commit 9cb177301fdab492e4cfef376b28339afe3ef663) Though neither can realistically occur while printing a pointer and short fixed string into a buffer of length 256 the analysis to confirm that this the case goes somewhat far up the call chain and not all static analyzers can successfully follow the chain of logic
NOT BUG:It's easy enough to clamp the returned length to be nonnegative before continuing which appeases the static analyzer and does not harm the subsequent code
NOT BUG:CT: check some GeneralizedTime return values
NOT BUG:Some of the ASN.1 routines for the GeneralizedTime type can return errors; check for these and do not continue past failure so as to appease coverity
NOT BUG:When configured "shared" don't build static libraries on Windows
NOT BUG:The reason for this is that the static libraries and the DLL import libraries are named the same on Windows When configured "shared" the static libraries are unused anyway
NOT BUG:Make util/mk1mf.pl recognise no-weak-ssl-ciphers
NOT BUG:Avoid double-free in calleres to OCSP_parse_url
NOT BUG:set pointers to NULL after OPENSSL_free before returning to caller to avoid possible double-free in caller
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Fix return type for CRYPTO_THREAD_run_once
NOT BUG:return type should be int and not void
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Add X509_CHECK_FLAG_NEVER_CHECK_SUBJECT flag
NOT BUG:Remove duplicate typedef of ECPKPARAMETERS in ec.h
NOT BUG:Run make update
NOT BUG:MR: #2296
BUG:Travis - the source directory is _srcdist not _srcdir
NOT BUG:Correct slight logic error in processing IF in build.info
NOT BUG:This corrects a fault where the inner IF in this example was still being acted upon:
BUG:IF[0] ...whatever.. IF[1] ...whatever more.. ENDIF ENDIF
BUG:With this change the inner IF is skipped over
NOT BUG:When grepping something starting with a dash remember to use -e
NOT BUG:Deprecate the use of version-specific methods
BUG:MR: #1824
NOT BUG:Use version flexible method instead of fixed version
BUG:MR: #1824
NOT BUG:Use minimum and maximum protocol version instead of version fixed methods
BUG:MR: #1824
NOT BUG:Fix usage of OPENSSL_NO_*_METHOD
BUG:MR: #1824
NOT BUG:Move disabling of RC4 for DTLS to the cipher list
BUG:MR: #1595
NOT BUG:Remove DES cipher alias
BUG:MR: #1595
NOT BUG:Update ciphers -s documentation
BUG:MR: #1595
NOT BUG:Document SSL_get1_supported_ciphers
BUG:MR: #1595
NOT BUG:IDEA is not supported in TLS 1.2
NOT BUG:This currently seems to be the only cipher we still support that should get disabled
BUG:MR: #1595
NOT BUG:Add support for minimum and maximum protocol version supported by a cipher
BUG:MR: #1595
NOT BUG:Add ssl_get_client_min_max_version() function
NOT BUG:Adjust ssl_set_client_hello_version to get both the minimum and maximum and then make ssl_set_client_hello_version use the maximum version
BUG:MR: #1595
NOT BUG:Make SSL_CIPHER_get_version return a const char *
BUG:MR: #1595
NOT BUG:Remove unused code
BUG:MR: #1595
NOT BUG:Make function to convert version to string
BUG:MR: #1595
NOT BUG:Constify security callbacks
BUG:MR: #1595
NOT BUG:Documentation for ctx_set_ctlog_list_file()
NOT BUG:Minor improvement to formatting of SCT output in s_client
NOT BUG:Do not display a CT log error message if CT validation is disabled
NOT BUG:RT3676: Expose ECgroup i2d functions
NOT BUG:Comment away the extra checks in Configure
NOT BUG:The "extra checks" is a debugging tool to check the config resolving mechanism It uses Perl's smart match which is experimental and therefore always causes Perl to give out a warning and it causes older Perl versions to fail entirely
NOT BUG:So it gets commented away but stays otherwise in place as it may be useful again
NOT BUG:Make ct_dir and certs_dir static in test/ct_test.c
NOT BUG:Fix ct_test to not assume it's in the source directory
NOT BUG:ct_test assumed it's run in the source directory and failed when built elsewhere It still defaults to that but can be told another story with the environment variables CT_DIR and CERTS_DIR
NOT BUG:Test recipe updated to match
NOT BUG:Document importance of CTLOG_STORE outliving SCT if SCT_set0_log is used
NOT BUG:Make SCT literals into const variables in ct_test.c
NOT BUG:Makes STACK_OF(SCT)* parameter of i2d_SCT_LIST const
NOT BUG:Removes SCT_LIST_set_source and SCT_LIST_set0_logs
BUG:Both of these functions can easily be implemented by callers instead
NOT BUG:Makes SCT_get0_log return const CTLOG*
NOT BUG:Makes CTLOG_STORE_get0_log_by_id return const CTLOG*
NOT BUG:Improved documentation of SCT_CTX_* functions
NOT BUG:Updates ct_err.c
NOT BUG:Remove unnecessary call to SCT_set1_extensions(sct "" 0) in ct_test.c
NOT BUG:Reset SCT validation_status if the SCT is modified
BUG:Use SCT_VERSION_V1 in place of literal 0 in ct_test.c
NOT BUG:Fixes "usuable" typo in ct_locl.h
NOT BUG:Treat boolean functions as booleans
NOT BUG:Use "!x" instead of "x <= 0" as these functions never return a negative value
NOT BUG:Make parameters of CTLOG_get* const
NOT BUG:Extensive application of __owur to CT functions that return a boolean
NOT BUG:Also improves some documentation of those functions
NOT BUG:Makes SCT_LIST_set_source return the number of successes
NOT BUG:No longer terminates on first error but instead tries to set the source of every SCT regardless of whether an error occurs with some
NOT BUG:Fix locking in ssl_cert_dup()
NOT BUG:Properly check the return value of CRYPTO_THREAD_lock_new()
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Restore building out of source with the unified build scheme
NOT BUG:CT test can't run without EC so skip it on that algo as well
NOT BUG:Fix ct_test to not assume it's in the source directory
NOT BUG:ct_test assumed it's run in the source directory and failed when built elsewhere It still defaults to that but can be told another story with the environment variables CT_DIR and CERTS_DIR
NOT BUG:Test recipe updated to match
NOT BUG:Update CHANGES and NEWS
NOT BUG:Update the CHANGES and NEWS files with information about the recently added AFALG engine and pipelining
NOT BUG:Fix classic build
NOT BUG:The Thread API changes broke classic build This fixes it
BUG:In build.info an IF within a clause that's skipped over shouldn't apply
BUG:If we find an IF within a clause that's skipped over set it to be skipped as well
NOT BUG:Add an entry in NEWS about the new threading API
NOT BUG:Update CHANGES for the new threading API
NOT BUG:Remove the old threading API
NOT BUG:All OpenSSL code has now been transferred to use the new threading API so the old one is no longer used and can be removed We provide some compat macros for removed functions which are all no-ops
NOT BUG:There is now no longer a need to set locking callbacks!!
NOT BUG:Remove use of the old CRYPTO_LOCK_X5O9_STORE
NOT BUG:The locking here is a bit strange and unclear Rather than refactor anything and possibly break stuff I have just moved to using the new thread API following as closely as possible what was there previously
NOT BUG:Don't call ENGINE_cleanup when configured "no-engine"
NOT BUG:Don't add engines if configured "no-engine"
NOT BUG:Similarly don't add e_capi if configured "no-capieng"
NOT BUG:Also indent a little deeper for clarity
NOT BUG:Don't add afalg engine if configured "no-engine"
NOT BUG:Also indent a little deeper for clarity
NOT BUG:Don't check the conditions to build e_afalg if configured "no-engine"
NOT BUG:Have Configure display the value of SHARED_CFLAG
NOT BUG:Make sure the effect of "pic" / "no-pic" is used with assembler compilations
NOT BUG:Before the 'Introduce the "pic" / "no-pic" config option' commit the shared_cflag value for the chosen config would be part of the make variable CFLAG which got replicated into CFLAGS and ASFLAGS
NOT BUG:Since said commit the shared_cflag value has become a make variable of its own SHARED_CFLAG (which is left empty in a "no-pic" build)
NOT BUG:However ASFLAGS was forgotten That's what's corrected with this change
NOT BUG:Touch the correct variables for the system; shlib_wrap.sh on Solaris
NOT BUG:If there is cause to think LD_LIBRARY_PATH_32 and LD_PRELOAD_32 are appropriate variables to touch do so Otherwise touch the usual LD_LIBRARY_PATH and LD_PRELOAD This covers for older installations that don't have a mix of 32-bit and 64-bit libs
NOT BUG:Recognise 32-bit Solaris in util/shlib_wrap.sh
BUG:Submitted by Erik Forsberg <erik@efca.com>
NOT BUG:Check gcc version to see if it supports -MM and friends
NOT BUG:According to manuals found here: https://gcc.gnu.org/onlinedocs/ GNU C version 3 and on support the dependency generation options We therefore need to check the gcc version to see if we're going to use it or makedepend for dependency generation
NOT BUG:Add extra include directory for includers of ppc_arch.h
NOT BUG:crypto/evp/e_aes.c and crypto/modes/gcm128.c include ppc_arch.h which is located in crypto/ so add that as extra include directory for them
NOT BUG:Issue reported by Jeffrey Walton <noloader@gmail.com>
NOT BUG:Adapt INSTALL and related notes for Windows
BUG:Adapt appveyor.yml for the new unified build
NOT BUG:Adapt the Windows makefile template to source generation
NOT BUG:Don't run the TLSProxy based tests in native Windows
BUG:There are issues binding listening ports This may be analyzed more thoroughly later on
NOT BUG:Unified - name native Windows shared libraries like MingW builds do
NOT BUG:Unified - extract settings from util/pl/VC-32.pl and make the config settings
NOT BUG:This introduces the settings loutflag and aroutflag because different Windows tools that do the same thing have different ways to specify the output file
NOT BUG:The Borland C++ config is commented away for the monent perhaps permanently
NOT BUG:Unified - a native Windows makefile template
NOT BUG:ec/asm/ecp_nistz256-sparcv9.pl: get corner logic right
NOT BUG:RT#4284
NOT BUG:Adapt mk1mf.pl and companions to changed perlasm script semantics
NOT BUG:Unified - adapt the generation of whirlpool assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/whrlpool/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of sha assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/sha/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of rc4 assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/rc4/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of rc5 assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/rc5/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of ripemd assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/ripemd/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of md5 assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/md5/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of modes assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/modes/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of poly1305 assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/poly1305/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of des assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/des/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of ec assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/ec/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of camellia assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/camellia/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of cast assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/cast/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of chacha assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/chacha/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Because crypto/build.info demands CFLAGS_Q descrip.mms.tmpl must deliver
NOT BUG:Unified - adapt the generation of cpuid uplink and buildinf to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of aes assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/aes/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of blowfish assembler to use GENERATE
BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/bf/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Convert the dynlocks in e_chil to the new Thread API locks
NOT BUG:Remove another lock from e_chil
NOT BUG:Always call ENGINE_cleanup() in de-init
NOT BUG:Even if we haven't loaded an engine we might have set up the global_engine_lock so we should still clean up
NOT BUG:Move chil engine to the new thread api
NOT BUG:Move the chil engine to use the new thread API As I don't have access to the hardware I can't test this :-( I think its ok..
NOT BUG:Move engine library over to using the new thread API
NOT BUG:Remove usage of CRYPTO_LOCK_ENGINE
BUG:err_lcl.h is gone don't pretend it's there
BUG:Add missing semi
NOT BUG:Counter mixed signedness with a cast
NOT BUG:Fix names of the #define used for platform specific code
NOT BUG:Add empty line after local variables
BUG:Fix error with wait set of fds for the select()
NOT BUG:It also makes the call to select blocking to reduce CPU usage
NOT BUG:Use correct function ID in error path
NOT BUG:This fixes "make update"
NOT BUG:Move variable declaration to the start of the function
NOT BUG:Ensure CRYPTO_mem_leaks is the last thing we do
NOT BUG:CRYPTO_mem_leaks de-inits the library so we must not do anything interesting after we've used it!
NOT BUG:Fix memory leak in ssltest
NOT BUG:The new Rand usage of Thread API exposed a bug in ssltest ssltest "cheats" and uses internal headers to directly call functions that normally you wouldn't be able to do This means that auto-init doesn't happen and therefore auto-deinit doesn't happen either meaning that the new rand locks don't get cleaned up properly
NOT BUG:Convert rand code to new threading API
NOT BUG:Replace the CRYPTO_LOCK_RAND and CRYPTO_LOCK_RAND2 locks with new thread API style locks
NOT BUG:Adapt unix Makefile template to 'no-makedepend'
BUG:This change is a bit more complex as it involves several recipe variants
NOT BUG:Also remove the $(CROSS_COMPILE) prefix for the makedepend program When we use the program "makedepend" this doesn't serve anything and when we use the compiler this value isn't even used
BUG:Adapt descrip.mms.tmpl to 'no-makedepend'
NOT BUG:VMS doesn't have "makedepend" anyway so this is just a matter of using the right qualifiers when 'makedepend' is enabled
NOT BUG:Add the configure option 'no-makedepend'
NOT BUG:If no makedepend program or equaly capable compiler is present 'makedepend' gets disabled automatically
NOT BUG:Fix SSL_CIPHER_get_auth_nid return
NOT BUG:Copy/paste error between SSL_CIPHER_get_kx_nid() and SSL_CIPHER_get_auth_nid() wrong table was referenced
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fix a typo in dynamic_load()
BUG:Convert RSA blinding to new multi-threading API
NOT BUG:Convert CRYPTO_LOCK_SSL_* to new multi-threading API
NOT BUG:Remove the transfer of lock hooks from bind_engine
NOT BUG:With the new threads API this is no longer needed
BUG:Engine API repair - memory management hooks
BUG:The Engine API lost the setting of memory management hooks in bind_engine Here's putting that back
NOT BUG:EX_DATA and ERR functions need the same treatment
NOT BUG:Redo the Unix source code generator
NOT BUG:For assembler we want the final target to be foo.s (lowercase s) However the build.info may have lines like this (note upper case S):
NOT BUG:GENERATE[foo.S]=foo.pl
NOT BUG:This indicates that foo.s (lowercase s) is still to be produced but that producing it will take an extra step via $(CC) -E Therefore the following variants (simplified for display) can be generated:
NOT BUG:GENERATE[foo.S]=foo.pl => foo.s: foo.pl $(PERL) $foo.pl $@.S; \ $(CC) $(CFLAGS) -E -P $@.S > $@ && \ rm -f $@.S
NOT BUG:GENERATE[foo.s]=foo.pl => foo.s: foo.pl $(PERL) $foo.pl $@
NOT BUG:GENERATE[foo.S]=foo.m4 => foo.s: foo.m4 m4 -B 8192 $foo.m4 > $@.S; \ $(CC) $(CFLAGS) -E -P $@.S > $@ && \ rm -f $@.S
NOT BUG:GENERATE[foo.s]=foo.m4 => foo.s: foo.m4 m4 -B 8192 $foo.m4 > $@
NOT BUG:Fix error in ssltest
NOT BUG:Compiling ssltest with some compilers using --strict-warnings results in complaints about an unused result
NOT BUG:Adapt e_capi to the DSA_SIG_get0() API
NOT BUG:Convert mem_dbg and mem_sec to the new Thread API
NOT BUG:Use new Thread API style locks and thread local storage for mem_dbg
BUG:OpenSSLDie --> OPENSSL_die
NOT BUG:Also removed a bunch of unused define's from e_os.h
NOT BUG:Remove the -n tar flag from osx dist creation
NOT BUG:With the unified build scheme tar MUST recurse or the tarball will be empty
NOT BUG:Remove some old ms/* files
NOT BUG:Include e_os.h from ec_lcl.h
NOT BUG:The EC code recently started using REF_PRINT_COUNT and REF_ASSERT_ISNT Those are defined in e_os.h
NOT BUG:Fix cert leaks in s_server
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Reuse strndup() simplify code
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:make update
NOT BUG:Make DSA_SIG opaque
NOT BUG:This adds a new accessor function DSA_SIG_get0 The customisation of DSA_SIG structure initialisation has been removed this means that the 'r' and 's' components are automatically allocated when DSA_SIG_new() is called Update documentation
BUG:Fix travis builds
NOT BUG:Travis doesn't seem to know about 'expr'
NOT BUG:make update
NOT BUG:Convert CRYPTO_LOCK_X509_* to new multi-threading API
NOT BUG:Convert CRYPTO_LOCK_UI to new multi-threading API
NOT BUG:Convert CRYPTO_LOCK_EC_* to new multi-threading API
NOT BUG:Convert CRYPTO_LOCK_EVP_PKEY to new multi-threading API
NOT BUG:Convert CRYPTO_LOCK_BIO to new multi-threading API
NOT BUG:Only enable ccache if it's available
NOT BUG:Use ccache for the unified builds
NOT BUG:This may speed up our builds considerably
NOT BUG:For unified builds make a separate build directory and build there
NOT BUG:SPARCv9 assembly pack: unify build rules and argument handling
NOT BUG:Make all scripts produce .S make interpretation of $(CFLAGS) pre-processor's responsibility start accepting $(PERLASM_SCHEME) [$(PERLASM_SCHEME) is redundant in this case because there are no deviataions between Solaris and Linux assemblers This is purely to unify .pl->.S handling across all targets.]
NOT BUG:Fix build; ssltest
BUG:Tweak some more information in INSTALL
NOT BUG:The summary on how to add configs and how Makefile et al wasn't quite correct any more
BUG:GH787: Fix ALPN
NOT BUG:* Perform ALPN after the SNI callback; the SSL_CTX may change due to that processing * Add flags to indicate that we actually sent ALPN to properly error out if unexpectedly received * clean up ssl3_free() no need to explicitly clear when doing memset * document ALPN functions
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Add an SSL_has_pending() function
NOT BUG:This is similar to SSL_pending() but just returns a 1 if there is data pending in the internal OpenSSL buffers or 0 otherwise (as opposed to SSL_pending() which returns the number of bytes available) Unlike SSL_pending() this will work even if "read_ahead" is set (which is the case if you are using read pipelining or if you are doing DTLS) A 1 return value means that we have unprocessed data It does *not* necessarily indicate that there will be application data returned from a call to SSL_read() The unprocessed data may not be application data or there could be errors when we attempt to parse the records
NOT BUG:Add an ability to set the SSL read buffer size
NOT BUG:This capability is required for read pipelining We will only read in as many records as will fit in the read buffer (and the network can provide in one go) The bigger the buffer the more records we can process in parallel
NOT BUG:Add cipher query functions
NOT BUG:Add functions to determine authentication key-exchange FIPS and AEAD
NOT BUG:Convert ERR_STRING_DATA to new multi-threading API
NOT BUG:Convert ERR_STATE to new multi-threading API
NOT BUG:Convert CRYPTO_LOCK_EX_DATA to new multi-threading API
NOT BUG:Convert CRYPTO_LOCK_DSO to new multi-threading API
NOT BUG:Convert CRYPTO_LOCK_{DH,DSA,RSA} to new multi-threading API
NOT BUG:Convert CRYPTO_LOCK_GET*BYNAME to new multi-threading API
BUG:GH815: The ChaCha20/Poly1305 codepoints are official
NOT BUG:CCA8 CCA9 CCAA CCAB CCAC CCAD and CCAE are now present in https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml so remove the "as per draft-ietf-tls-chacha20-poly1305-03" note accordingly
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:GH787: Fix ALPN
NOT BUG:* Perform ALPN after the SNI callback; the SSL_CTX may change due to that processing * Add flags to indicate that we actually sent ALPN to properly error out if unexpectedly received * clean up ssl3_free() no need to explicitly clear when doing memset * document ALPN functions
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Make mk1mf recognise the --classic flag
NOT BUG:Fix configurations such as 'dist' and tar building
NOT BUG:For config targets such as 'dist' which doesn't have a BASE template we still need to have a default build scheme
NOT BUG:Additionally the unified Makefile template's target 'tar' wasn't quite as flexible as the unixmake one
NOT BUG:Finally .travis-create-release.sh can be somewhat simplified now that it builds with the unified build scheme
NOT BUG:We've switch to unified build scheme by default reflect it in travis
NOT BUG:We want to preserve a couple of classic builds still the quickest is to change all --unified to --classic
NOT BUG:Fix engine/asm/e_padlock-x86.pl for newer semantics
NOT BUG:Change the INSTALL documentation for unified builds
NOT BUG:Because of the unified scheme building on different platforms is very similar We currently have Unix and OpenVMS on the unified scheme which means that a separate INSTALL.VMS is no longer needed
NOT BUG:Make unified builds the default on Unix
NOT BUG:Add the Configure option --classic to fall back on classic build schemes
NOT BUG:Revert "unified build scheme: Try to nudge users to try the "unified" build"
BUG:This reverts commit 242ffb05a2e4aa3fc7ffc131037e077b7e242189
NOT BUG:Fix building without multiblock support
NOT BUG:Not all platforms support multiblock Building without it fails prior to this fix
BUG:RT#4396
NOT BUG:Don't free NCONF obtained values
BUG:Bug reported by Michel Sales
NOT BUG:Remove kinv/r fields from DSA structure
NOT BUG:The kinv/r fields in the DSA structure are not used by OpenSSL internally and should not be used in general
NOT BUG:GH812: Fix for no-ui build on Windows
NOT BUG:Add UI to known algorithms in mkdef.pl
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:AppVeyor: Only use the latest VS version
BUG:GH: #811
BUG:Rename the numpipes argument to ssl3_enc/tls1_enc
NOT BUG:The numpipes argument to ssl3_enc/tls1_enc is actually the number of records passed in the array To make this clearer rename the argument to |n_recs|
NOT BUG:Rename a function
NOT BUG:Rename the have_whole_app_data_record_waiting() function to include the ssl3_record prefix...and make it a bit shorter
NOT BUG:Refactor dasync cipher implementations to improve code reuse
BUG:Move out most of the boiler plate code that is common between aes128-cbc and aes128-cbc-hmac-sha1 into helper functions to improve code reuse
NOT BUG:Move the _hidden_* static variables in dasync to be constructed in bind
NOT BUG:The _hidden_* variables were being created on-the-fly It is better to create them once up front during bind to avoid any potential race conditions
NOT BUG:Fix typo in SSL_pending docs
NOT BUG:Rename EVP_CIPHER_CTX_cipher_data to EVP_CIPHER_CTX_get_cipher_data
NOT BUG:We had the function EVP_CIPHER_CTX_cipher_data which is newly added for 1.1.0 As we now also need an EVP_CIPHER_CTX_set_cipher_data it makes more sense for the former to be called EVP_CIPHER_CTX_get_cipher_data
NOT BUG:Fix s_server/s_client handling of the split_send_frag argument
NOT BUG:Ensure that a value of 0 is correctly handled for the split_send_frag argument
NOT BUG:Add documentation for the EVP_CIPHER_CTX_cipher_data functions
NOT BUG:The new pipeline code added a new function EVP_CIPHER_CTX_set_cipher_data() Add documentation for this and the existing EVP_CIPHER_CTX_cipher_data() function
NOT BUG:Remove the wrec record layer field
NOT BUG:We used to use the wrec field in the record layer for keeping track of the current record that we are writing out As part of the pipelining changes this has been moved to stack allocated variables to do the same thing therefore the field is no longer needed
NOT BUG:Update a comment
NOT BUG:Update a comment that was out of date due to the pipelining changes
NOT BUG:Add documentation for new s_server/s_client options
NOT BUG:Document the new split_send_frag max_pipelines and read_buf options
NOT BUG:Add documentation for SSL_has_pending()
NOT BUG:A previous commit added the SSL_has_pending() function which provides a method for knowing whether OpenSSL has buffered but as yet unprocessed record data
BUG:Add pipelining documentation
NOT BUG:Add some documentation for all of the SSL/SSL_CTX functions/ctrls for conrolling read and write pipelining
NOT BUG:Fix erroneous fall thgrough in switch statement
NOT BUG:Fix an erroenous fall through when setting the max_pipelines value
NOT BUG:Ensure s_client and s_server work when read_ahead is set
NOT BUG:Previously s_client and s_server relied on using SSL_pending() which does not take into account read_ahead For read pipelining to work read_ahead gets set automatically Therefore s_client and s_server have been converted to use SSL_has_pending() instead
NOT BUG:Add an SSL_has_pending() function
NOT BUG:This is similar to SSL_pending() but just returns a 1 if there is data pending in the internal OpenSSL buffers or 0 otherwise (as opposed to SSL_pending() which returns the number of bytes available) Unlike SSL_pending() this will work even if "read_ahead" is set (which is the case if you are using read pipelining or if you are doing DTLS) A 1 return value means that we have unprocessed data It does *not* necessarily indicate that there will be application data returned from a call to SSL_read() The unprocessed data may not be application data or there could be errors when we attempt to parse the records
NOT BUG:Add an ability to set the SSL read buffer size
NOT BUG:This capability is required for read pipelining We will only read in as many records as will fit in the read buffer (and the network can provide in one go) The bigger the buffer the more records we can process in parallel
NOT BUG:Lazily initialise the compression buffer
NOT BUG:With read pipelining we use multiple SSL3_RECORD structures for reading There are SSL_MAX_PIPELINES (32) of them defined (typically not all of these would be used) Each one has a 16k compression buffer allocated! This results in a significant amount of memory being consumed which most of the time is not needed This change swaps the allocation of the compression buffer to be lazy so that it is only done immediately before it is actually used
NOT BUG:Implement read pipeline support in libssl
BUG:Read pipelining is controlled in a slightly different way than with write pipelining While reading we are constrained by the number of records that the peer (and the network) can provide to us in one go The more records we can get in one go the more opportunity we have to parallelise the processing
BUG:There are two parameters that affect this: * The number of pipelines that we are willing to process in one go This is controlled by max_pipelines (as for write pipelining) * The size of our read buffer A subsequent commit will provide an API for adjusting the size of the buffer
NOT BUG:Another requirement for this to work is that "read_ahead" must be set The read_ahead parameter will attempt to read as much data into our read buffer as the network can provide Without this set data is read into the read buffer on demand Setting the max_pipelines parameter to a value greater than 1 will automatically also turn read_ahead on
BUG:Finally the read pipelining as currently implemented will only parallelise the processing of application data records This would only make a difference for renegotiation so is unlikely to have a significant impact
NOT BUG:Add dummy pipeline support for aes128_cbc_hmac_sha1
NOT BUG:Add dummy pipline support to dasync for the aes128_cbc_hmac_sha1 cipher This is treated as an AEAD cipher
NOT BUG:Add pipeline support to s_server and s_client
NOT BUG:Add the options min_send_frag and max_pipelines to s_server and s_client in order to control pipelining capabilities This will only have an effect if a pipeline capable cipher is used (such as the one provided by the dasync engine)
NOT BUG:Implement write pipeline support in libssl
NOT BUG:Use the new pipeline cipher capability to encrypt multiple records being written out all in one go Two new SSL/SSL_CTX parameters can be used to control how this works: max_pipelines and split_send_fragment
NOT BUG:max_pipelines defines the maximum number of pipelines that can ever be used in one go for a single connection It must always be less than or equal to SSL_MAX_PIPELINES (currently defined to be 32) By default only one pipeline will be used (i.e normal non-parallel operation)
BUG:split_send_fragment defines how data is split up into pipelines The number of pipelines used will be determined by the amount of data provided to the SSL_write call divided by split_send_fragment For example if split_send_fragment is set to 2000 and max_pipelines is 4 then: SSL_write called with 0-2000 bytes == 1 pipeline used SSL_write called with 2001-4000 bytes == 2 pipelines used SSL_write called with 4001-6000 bytes == 3 pipelines used SSL_write_called with 6001+ bytes == 4 pipelines used
NOT BUG:split_send_fragment must always be less than or equal to max_send_fragment By default it is set to be equal to max_send_fragment This will mean that the same number of records will always be created as would have been created in the non-parallel case although the data will be apportioned differently In the parallel case data will be spread equally between the pipelines
NOT BUG:Update the dasync engine to add a pipeline cipher
NOT BUG:Implement aes128-cbc as a pipeline capable cipher in the dasync engine As dasync is just a dummy engine it actually just performs the parallel encrypts/decrypts in serial
NOT BUG:Add defines for pipeline capable ciphers
NOT BUG:Add a flag to indicate that a cipher is capable of performing "pipelining" i.e multiple encrypts/decrypts in parallel Also add some new ctrls that ciphers will need to implement if they are pipeline capable
NOT BUG:make update
BUG:Trim Travis config part 3
NOT BUG:- Only build & test two configurations Make all the other build variants buildonly on gcc (clang on osx) - Don't build with default clang at all on linux - Only use gcc-5 and clang-3.6 for the sanitizer builds Re-running e.g CONFIG_OPTS="shared" with them seems redundant
NOT BUG:Revert "Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms"
BUG:This reverts commit 963bb62195109fb863dc4d88c7470ce7f9af25ac
NOT BUG:Fix pkeyutl to KDF lnks
NOT BUG:Remove really old demo's
BUG:Elide OPENSSL_INIT_set_config_filename() for no-stdio build
NOT BUG:Strictly speaking it isn't stdio and file access which offend me here; it's the fact that UEFI doesn't provide a strdup() function But the fact that it's pointless without file access is a good enough excuse for compiling it out
BUG:Elide DES_read_password() for no-ui build
NOT BUG:Move declaration of X509_aux_print() out of #ifndef OPENSSL_NO_STDIO
NOT BUG:This isn't a file access function; it's still present
NOT BUG:Allow OPENSSL_NO_SOCK in e_os.h even for non-Windows/DOS platforms
NOT BUG:UEFI needs this too Don't keep it only in the Windows/DOS ifdef block
BUG:ISSUE 43: Add BIO_sock_shutdown
BUG:This replaces SHUTDOWN/SHUTDOWN2 with BIO_closesocket
NOT BUG:Minor update to includes and documentation for ct_test.c
NOT BUG:Remove OPENSSL_NO_UNIT_TEST guard from ct_test.c
NOT BUG:Use s->session->peer instead of calling SSL_get_peer_certificate(s)
BUG:Avoids modifying certificate reference count and thereby avoids locking
NOT BUG:Lowercase name of SSL_validate_ct as it is an internal function
NOT BUG:CT code now calls X509_free() after calling SSL_get_peer_certificate()
NOT BUG:Without this the peer certificate would never be deleted resulting in a memory leak
NOT BUG:Fixes memory leaks in CT code
NOT BUG:Fix the build tree include directory for afalg engine
NOT BUG:Make OpenSSL::Test::setup() a bit more forgiving
NOT BUG:It was unexpected that OpenSSL::Test::setup() should be called twice by the same recipe However that may happen if a recipe combines OpenSSL::Test and OpenSSL::Test::Simple which can be a sensible thing to do Therefore we now allow it
BUG:Elide EVP_read_pw_string() and friends for no-ui
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:GH768: Minor grammar nits in CRYPTO_get_ex_new_index.pod
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Unified - adapt the generation of padlock assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in engines/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - adapt the generation of bignum assembler to use GENERATE
NOT BUG:This gets rid of the BEGINRAW..ENDRAW sections in crypto/bn/build.info
NOT BUG:This also moves the assembler generating perl scripts to take the output file name as last command line argument where necessary
NOT BUG:Unified - Add the build.info command OVERRIDE to avoid build file clashes
NOT BUG:Should it be needed because the recipes within a RAW section might clash with those generated by Configure it's possible to tell it not to generate them with the use of OVERRIDES for example:
NOT BUG:SOURCE[libfoo]=foo.c bar.c
NOT BUG:OVERRIDES=bar.o BEGINRAW[Makefile(unix)] bar.o: bar.c $(CC) $(CFLAGS) -DSPECIAL -c -o $@ $< ENDRAW[Makefile(unix)]
NOT BUG:Unified - Adapt the Unix and VMS templates to support GENERATE
NOT BUG:Unified - Add the build.info command GENERATE to generate source files
NOT BUG:In some cases one might want to generate some source files from others that's done as follows:
NOT BUG:GENERATE[foo.s]=asm/something.pl $(CFLAGS) GENERATE[bar.s]=asm/bar.S
NOT BUG:The value of each GENERATE line is a command line or part of it Configure places no rules on the command line except the the first item muct be the generator file It is however entirely up to the build file template to define exactly how those command lines should be handled how the output is captured and so on
NOT BUG:Add a function to detect if we have async or not
NOT BUG:Add the ASYNC_is_capable() function and use it in speed
NOT BUG:GH804: Fix unused-result warnings in dasync
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:documentation and duplicate goto statements
NOT BUG:move ifdef statements
NOT BUG:NIST SP800-56A co-factor ECDH KATs
NOT BUG:Remove use of CRYPTO_LOCK_INIT in init code
NOT BUG:Swap the use of CRYPTO_LOCK_INIT in the init code to use the new threading API mechanism for locking
NOT BUG:Swap the init code to use the new Thread API thread locals
NOT BUG:The init code was using its own thread local code Now we have a central API for it we should use that instead
NOT BUG:Swap the init code to use CRYPTO_ONCE
NOT BUG:The init code was using its own "once" implementation Now that we have the new thread API we should use that instead
NOT BUG:make update
NOT BUG:Update documentation
NOT BUG:Make PKCS8_PRIV_KEY_INFO opaque
NOT BUG:Make PKCS8_PRIV_KEY_INFO opaque Several accessor functions already exist for this structure Two new ones were added to handle attributes
NOT BUG:The old handling of broken formats has been removed and the corresponding structures simplified
NOT BUG:Add support to ASYNC_WAIT_CTX to speed
NOT BUG:Remove unnecessary memset() to 0 and check for NULL before OPENSSL_free()
NOT BUG:Fix the error with RSA and the daysnc engine in async mode
NOT BUG:Move RSA struct in the job local struct The change is applied also to other crypto operations (e.g DSA) to make things consistent
NOT BUG:Add support for async jobs in OpenSSL speed
NOT BUG:Summary of the changes:
NOT BUG:* Move the calls to the crypto operations inside wrapper functions This is required because ASYNC_start_job takes a function as an argument
NOT BUG:* Add new function run_benchmark() that manages the jobs for all the operations In the POSIX case it uses a select() to receive the events from the engine and resume the jobs that are paused while in the WIN case it uses PeekNamedPipe()
NOT BUG:* Add new option argument async_jobs to enable and specify the number of async jobs
NOT BUG:Example: openssl speed -engine dasync -elapsed -async_jobs 32 rsa2048
BUG:Rework the default cipherlist
NOT BUG:- Always prefer forward-secure handshakes - Consistently order ECDSA above RSA - Next always prefer AEADs to non-AEADs irrespective of strength - Within AEADs prefer GCM > CHACHA > CCM for a given strength - Prefer TLS v1.2 ciphers to legacy ciphers - Remove rarely used DSS IDEA SEED CAMELLIA CCM from the default list to reduce ClientHello bloat
NOT BUG:Makefile.in: populate [PLIB_]LDFLAG even with $target{} settings
BUG:RT#4373
NOT BUG:bn/asm/x86[_64]-mont*.pl: complement alloca with page-walking
BUG:Some OSes *cough*-dows insist on stack being "wired" to physical memory in strictly sequential manner i.e if stack allocation spans two pages then reference to farmost one can be punishable by SEGV But page walking can do good even on other OSes because it guarantees that villain thread hits the guard page before it can make damage to innocent one..
NOT BUG:Restore some mingw builds
NOT BUG:"no-pic" builds have in fact been green (and reasonably fast) so restore them while we figure out why tests without "no-pic" hang
NOT BUG:perlasm/x86_64-xlate.pl: handle binary constants early
NOT BUG:Not all assemblers of "gas" flavour handle binary constants e.g seasoned MacOS Xcode doesn't so give them a hand
NOT BUG:Fix some clang warnings
NOT BUG:The af_alg engine and associated test were creating warnings when compiled with clang This fixes it
NOT BUG:Fix minor errors in the afalg test
NOT BUG:The new afalg test should have a copyright date of 2016 Also an incorrect buffer was being sent to EVP_CipherFinal_ex when decrypting
NOT BUG:Adding afalg test
NOT BUG:Fix OPENSSL_INIT flags to avoid a clash
NOT BUG:The 0x00010000L OPENSSL_INIT flag appeared twice
NOT BUG:Misc afalg build fixes
NOT BUG:Misc afalg build fixes as suggested by Richard Levitte for the latest Configure changes
NOT BUG:Rework based on feedback: 1 Cleaned up eventfd handling 2 Reworked socket setup code to allow other algorithms to be added in future 3 Fixed compile errors for static build 4 Added error to error stack in all cases of ALG_PERR/ALG_ERR 5 Called afalg_aes_128_cbc() from bind() to avoid race conditions 6 Used MAX_INFLIGHT define in io_getevents system call 7 Coding style fixes
NOT BUG:ALG: Add AFALG engine
BUG:Trim Travis config part 2
NOT BUG:- Remove Win builds (temporarily) They're slow allowed to fail and therefore not useful as they are - Make the --unified part of the matrix build-only (This can be swapped if --unified becomes the default) - Only build 'no-engine' once don't run any tests but don't allow it to fail
BUG:Trim the Travis config
NOT BUG:- Remove no-asm We've got to cut something and this is at least partially covered by the sanitizer builds - Remove enable-crypto-mdebug from sanitizer builds enable-crypto-mdebug has been shown to catch some static initialization bugs that the standard leak sanitizer can't so perhaps it has _some_ value; but we shouldn't let the two compete
NOT BUG:GH616: Remove dead code
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:No -fno-common for Darwin
NOT BUG:When object files with common block symbols are added to static libraries on Darwin those symbols are invisible to the linker that tries to use them Our solution was to use -fno-common when compiling C source
NOT BUG:Unfortunately there is assembler code that defines OPENSSL_ia32cap_P as a common block symbol unconditionally and in some cases there is no other definition -fno-common doesn't help in this case
NOT BUG:However 'ranlib -c' adds common block symbols to the index of the static library which makes them visible to the linker using it and that solves the problem we've seen
NOT BUG:The common conclusion is either use -fno-common or ranlib -c on Darwin Since we have common block symbols unconditionally choosing the method for our source is easy
NOT BUG:New ordinal files recreated from scratch
NOT BUG:Change names of ordinals and libs libeay => libcrypto and ssleay => libssl
NOT BUG:Remove the old ordinals
NOT BUG:use saner default parameters for scrypt
BUG:Thanks to Colin Percival for reporting this issue
NOT BUG:Disable SSLv3 by default
BUG:MR: #2203
NOT BUG:Don't mark the eNULL ciphers as non-default
BUG:They're not part of ALL so they're not part of COMPLEMENTOFDEFAULT
BUG:MR: #2202
NOT BUG:Curve25519: fix const-initialization
NOT BUG:Clang is permissive of this but gcc fails
NOT BUG:Add ASN.1 ADB callback
NOT BUG:Add support for application supplied any defined by callback An application can change the selector value if it wishes This is mainly intended for values which are only known at runtime for example dynamically created OIDs
NOT BUG:GH784: Better variable name
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Make formatting consistent in apps/Makefile.in
BUG:Remove redundant semi-colons from apps/Makefile.in
NOT BUG:Documentation for new CT s_client flags
NOT BUG:Documentation for new SSL functions
NOT BUG:Handle empty log name in "enable_logs" line of the CT log file
NOT BUG:e.g "enabled_logs = foo,,bar"
NOT BUG:Handle missing "enabled_logs" line in CT log file
NOT BUG:If a CT log entry in CTLOG_FILE is invalid skip it and continue loading
NOT BUG:Previously the remaining CT log entries would not be loaded Also CTLOG_STORE_load_file would return 1 even if a log entry was invalid resulting in no errors being shown
NOT BUG:Extends s_client to allow a basic CT policy to be enabled
NOT BUG:Change default CT log list filename to "ct_log_list.cnf"
NOT BUG:Adds CT validation to SSL connections
NOT BUG:Disabled by default but can be enabled by setting the ct_validation_callback on a SSL or SSL_CTX
NOT BUG:Changes to DEFAULT curves
NOT BUG:Change the ECC default curve list to be this in order: x25519 secp256r1 secp521r1 secp384r1 brainpoolP256r1 brainpoolP384r1 and brainpool512r1
NOT BUG:Curve25519: avoid undefined behaviour
BUG:Appease the sanitizer: avoid left shifts of negative values
BUG:This could've been done entirely with casts to uint and back but using masks seemed slightly more readable
NOT BUG:There are also implementation-defined signed right shifts in this code Those remain
NOT BUG:chacha/asm/chacha-ppc.pl: fix typo
NOT BUG:RT#4365
NOT BUG:Don't build RC4 ciphersuites into libssl by default
NOT BUG:RC4 based ciphersuites in libssl have been disabled by default They can be added back by building OpenSSL with the "enable-weak-ssl-ciphers" Configure option at compile time
NOT BUG:Improved HKDF and TLS1-PRF documentation
NOT BUG:Correction $disabled{shared} rather than $config{no_shared}
NOT BUG:Restore the zlib / zlib-dynamic logic
NOT BUG:The proper logic is that both zlib and zlib-dynamic are disabled by default and that enabling zlib-dynamic would enable zlib Somewhere along the way the logic got changed zlib-dynamic was enabled by default and zlib didn't get automatically enabled
NOT BUG:This change restores the original logic
NOT BUG:Sanity check PVK file fields
NOT BUG:PVK files with abnormally large length or salt fields can cause an integer overflow which can result in an OOB read and heap corruption However this is an rarely used format and private key files do not normally come from untrusted sources the security implications not significant
BUG:Fix by limiting PVK length field to 100K and salt to 10K: these should be more than enough to cover any files encountered in practice
NOT BUG:Issue reported by Guido Vranken
NOT BUG:GH773: Possible leak on CRYPTO_THREAD_lock_new failure
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:GH781: openssl.spec: use secure urls
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:GH769: Reuse strndup()
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
BUG:GH355: Implement HKDF
NOT BUG:This patch implements the HMAC-based Extract-and-Expand Key Derivation Function (HKDF) as defined in RFC 5869
NOT BUG:It is required to implement the QUIC and TLS 1.3 protocols (among others)
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:Remove overzealous echoing
NOT BUG:This construct in a Makefile is a bit overzealous:
BUG:@echo FOO @FOO
NOT BUG:Cleaned up
NOT BUG:Add KDF support to pkeyutl Update documentation
BUG:Clean up curve25519 build
NOT BUG:- Remove OPENSSL_X25519_X86_64 which never worked because we don't have the assembly - Also remove OPENSSL_SMALL (which should have been OPENSSL_SMALL_FOOTPRINT) which isn't a priority at the moment
NOT BUG:update NEWS
NOT BUG:fix no-ec build
NOT BUG:Refactor ClientHello extension parsing
NOT BUG:1) Simplify code with better PACKET methods
NOT BUG:2) Make broken SNI parsing explicit SNI was intended to be extensible to new name types but RFC 4366 defined the syntax inextensibly and OpenSSL has never parsed SNI in a way that would allow adding a new name type RFC 6066 fixed the definition but due to broken implementations being widespread it appears impossible to ever extend SNI
NOT BUG:3) Annotate resumption behaviour OpenSSL doesn't currently handle all extensions correctly upon resumption Annotate for further clean-up
NOT BUG:4) Send an alert on ALPN protocol mismatch
NOT BUG:make update
NOT BUG:add kdf.h to mkdef.pl
NOT BUG:Add KDF error codes
NOT BUG:make update
NOT BUG:Generalise KDF test in evp_test.c
NOT BUG:Convert PRF tests to use Ctrl
NOT BUG:Add Ctrl keyword to KDF test in evp_test
NOT BUG:Add string ctrl operations to TLS1 PRF update documentation
NOT BUG:Use utility functions for HMAC and CMAC
NOT BUG:EVP_PKEY_CTX utility functions
NOT BUG:Utility functions to pass a string or hex string to EVP_PKEY_CTX_ctrl()
NOT BUG:make errors
NOT BUG:Handle KDF internally
NOT BUG:Handle KDF in ECDH_compute_key instead of requiring each implementation support it This modifies the compute_key method: now it allocates and populates a buffer containing the shared secret
NOT BUG:Document the changes in config settings
NOT BUG:Don't copy from %target to %config so much see %config as a complement
NOT BUG:We copied $target{cflags} $target{defines} and a few more to %config just to add to the entries Avoid doing so and let the build templates deal with combining the two
NOT BUG:There are a few cases where we still fiddle with %target but that's acceptable
NOT BUG:Configure - Get rid of the special thread_cflag replace with thread_scheme
BUG:The thread_cflag setting filled a double role as kinda sorta an indicator of thread scheme and as cflags Some configs also added lflags and ex_libs for multithreading regardless of if threading would be enabled or not
NOT BUG:Instead of this add threading cflags among in the cflag setting threading lflags in the lflag setting and so on if and only if threads are enabled (which they are by default)
NOT BUG:Also for configs where there are no special cflags for threading (the VMS configs are of that kind) this makes it possible to still clearly mention what thread scheme is used
NOT BUG:The exact value of thread scheme is currently ignored except when it's "(unknown)" and thereby only serves as a flag to tell if we know how to build for multi-threading in a particular config Yet the currently used values are "(unknown)" "pthreads" "uithreads" (a.k.a solaris threads) and "winthreads"
NOT BUG:Configure - get rid of the special debug_ and release_ settings
NOT BUG:Instead make the build type ("debug" or "release") available through $config{build_type} and let the configs themselves figure out what the usual settings (such as "cflags" "lflags" and so on) should be accordingly
NOT BUG:The benefit with this is that we can now have debug and release variants of any setting not just those Configure supports and may also involve other factors (the MSVC flags /MD[d] and /MT[d] involve both build type and whether threading is enabled or not)
NOT BUG:Minimize copied config settings
NOT BUG:$target{lflags} and $target{plib_flag} were copied to %config for no good reason
NOT BUG:Configure - move the addition of the zlib / libz lib to configs
NOT BUG:Configure had the Unix centric addition of -lz when linking with zlib is enabled which doesn't work on other platforms Therefore we move it to the BASE_unix config template and add corresponding ones in the other BASE_* config templates The Windows one is probably incomplete but that doesn't matter for the moment as mk1mf does it's own thing anyway
NOT BUG:This required making the %withargs table global so perl snippets in the configs can use it
BUG:Configure - Rename BASE to DEFAULTS and add a few inheritable BASEs
BUG:These BASE templates are intended to hold values that are common for all configuration variants for whole families of configurations
NOT BUG:So far three "families" are identified: Unix Windows and VMS mostly characterised by the build system they currently use
BUG:Configure - Allow CODErefs and ARRAYrefs in configuration setting arrays
BUG:This provides for more powerful lazy evaluation and buildup of the setting contents For example something like this becomes possible:
NOT BUG:defines => [ sub { $config{thisorthat} ? "FOO" : () } ]
NOT BUG:Any undefined result of such functions (such as 'undef' or the empty list) will be ignored
NOT BUG:Ensure Async is deinited properly
NOT BUG:The global thread local keys were not being deinited properly in async
NOT BUG:Convert ASYNC code to use new Thread API
NOT BUG:The async code uses thread local variables We should convert to using the new Thread API for doing this
BUG:Provide getters for default_passwd_cb and userdata
NOT BUG:This patch provides getters for default_passwd_cb and userdata for SSL and SSL_CTX The getter functions are required to port Python's ssl module to OpenSSL 1.1.0
BUG:curve25519: add missing const-qualifier
NOT BUG:Add a shared_target to the VC-common config
NOT BUG:This has no real meaning except it gives Configure a hint that VC targets are indeed capable of producing shared objects
NOT BUG:Configure - make the use of environment variables for overrides consistent
BUG:We allow some commands to be overriden but didn't handle that in a consistent manner
NOT BUG:Make uplink auxiliary source separate from cpuid source
NOT BUG:There are cases for example when configuring no-asm that the added uplink source files got in the way of the cpuid ones The best way to solve this is to separate the two
NOT BUG:Make k25519Precomp const
BUG:MR: #2184
BUG:poly1305/asm/poly1305-*.pl: flip horizontal add and reduction
NOT BUG:Formally only 32-bit AVX2 code path needs this but I choose to harmonize all vector code paths
NOT BUG:RT#4346
NOT BUG:Consistently use arm_arch.h constants in armcap assembly code
NOT BUG:Most of the assembly uses constants from arm_arch.h but a few references to ARMV7_NEON don't Consistently use the macros everywhere
NOT BUG:Signed-off-by: Andy Polyakov <appro@openssl.org>
NOT BUG:remove old unused oneline name field
NOT BUG:make errors
NOT BUG:Add default operations to EC_METHOD
NOT BUG:Replace overrides
NOT BUG:Instead of overriding a default operation move default operation to a separate function which is then explicitly included in any EC_METHOD that uses it
NOT BUG:CT policy validation
NOT BUG:Specifies a callback that will in the future be used by the SSL code to decide whether to abort a connection on Certificate Transparency grounds
NOT BUG:Fix -pkeyopt and fix error check
NOT BUG:RT4347: Fix GCC unused-value warnings with HOST_c2l()
NOT BUG:The HOST_c2l() macro assigns the value to the specified variable but also evaluates to the same value Which we ignore triggering a warning
NOT BUG:To fix this just cast it to void like we did in commit 08e553644 ("Fix some clang warnings.") for a bunch of other instances
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Move macros for reading/writing integers into ct_locl.h
NOT BUG:Addresses review comments from richsalz
NOT BUG:Fixes potential double free and memory leak in ct_b64.c
NOT BUG:Verify SCT signatures
NOT BUG:Tests included in future commit which adds CT policy validation
NOT BUG:Updates to CHANGES and NEWS for 1.0.2 and 1.0.1 release
NOT BUG:bn/asm/x86_64-mont5.pl: unify gather procedure in hardly used path and reorganize/harmonize post-conditions
NOT BUG:Additional hardening following on from CVE-2016-0702
NOT BUG:crypto/bn/x86_64-mont5.pl: constant-time gather procedure
NOT BUG:At the same time remove miniscule bias in final subtraction Performance penalty varies from platform to platform and even with key length For rsa2048 sign it was observed to be 4% for Sandy Bridge and 7% on Broadwell
NOT BUG:CVE-2016-0702
NOT BUG:bn/asm/rsaz-avx2.pl: constant-time gather procedure
NOT BUG:Performance penalty is 2%
NOT BUG:CVE-2016-0702
NOT BUG:bn/asm/rsax-x86_64.pl: constant-time gather procedure
NOT BUG:Performance penalty is 2% on Linux and 5% on Windows
NOT BUG:CVE-2016-0702
NOT BUG:bn/bn_exp.c: constant-time MOD_EXP_CTIME_COPY_FROM_PREBUF
NOT BUG:Performance penalty varies from platform to platform and even key length For rsa2048 sign it was observed to reach almost 10%
NOT BUG:CVE-2016-0702
NOT BUG:Unified - have configdata.pm depend on a few more things
BUG:GH762: Reuse strdup()
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:GH764: s_server: trace option fall through
BUG:in s_server cmd: specifying -trace option falls through and turn-on security_debug
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:GH758: e_dasync_err.h: honor no-filenames option
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fix BN_hex2bn/BN_dec2bn NULL ptr/heap corruption
NOT BUG:In the BN_hex2bn function the number of hex digits is calculated using an int value |i| Later |bn_expand| is called with a value of |i * 4| For large values of |i| this can result in |bn_expand| not allocating any memory because |i * 4| is negative This leaves ret->d as NULL leading to a subsequent NULL ptr deref For very large values of |i| the calculation |i * 4| could be a positive value smaller than |i| In this case memory is allocated to ret->d but it is insufficiently sized leading to heap corruption A similar issue exists in BN_dec2bn
NOT BUG:This could have security consequences if BN_hex2bn/BN_dec2bn is ever called by user applications with very large untrusted hex/dec data This is anticipated to be a rare occurrence
NOT BUG:All OpenSSL internal usage of this function uses data that is not expected to be untrusted e.g config file data or application command line arguments If user developed applications generate config file data based on untrusted data then it is possible that this could also lead to security consequences This is also anticipated to be a rare
NOT BUG:Issue reported by Guido Vranken
NOT BUG:CVE-2016-0797
NOT BUG:remove unused variables
NOT BUG:Fix use before init warnings in asynctest
NOT BUG:If the tests fail early before an ASYNC_WAIT_CTX is created then there can be a use before init problem in asynctest
NOT BUG:Clarify ASYNC_WAIT_CTX_clear_fd() docs
BUG:Clarify that the "cleanup" routing does not get called if you invoke ASYNC_WAIT_CTX_clear_fd() directly
NOT BUG:Refactor the async wait fd logic
NOT BUG:Implementation experience has shown that the original plan for async wait fds was too simplistic Originally the async logic created a pipe internally and user/engine code could then get access to it via API calls It is more flexible if the engine is able to create its own fd and provide it to the async code
NOT BUG:Another issue is that there can be a lot of churn in the fd value within the context of (say) a single SSL connection leading to continually adding and removing fds from (say) epoll It is better if we can provide some stability of the fd value across a whole SSL connection This is problematic because an engine has no concept of an SSL connection
BUG:This commit refactors things to introduce an ASYNC_WAIT_CTX which acts as a proxy for an SSL connection down at the engine layer
NOT BUG:Workaround for VisualStudio 2015 bug
BUG:VisualStudio 2015 has a bug where an internal compiler error was occurring By reordering the DEFINE_STACK_OF declarations for SSL_CIPHER and SSL_COMP until after the ssl3.h include everything seems ok again
NOT BUG:Add forgotten change of check of disabled-dynamic-engine
NOT BUG:Add CHANGES entry for X25519
NOT BUG:make update
NOT BUG:Remove unused code
NOT BUG:Change BORINGSSL defines to OPENSSL
BUG:Initial adaptations for Curve25519 code
NOT BUG:Fix "mixed declarations and code" warnings Use OpenSSL headers
NOT BUG:Place under OpenSSL license
NOT BUG:Add X25519 code from BoringSSL
NOT BUG:TLS support for X25519
NOT BUG:Add X25519 to TLS supported curve list Reject attempts to configure keys which cannot be used for signing
NOT BUG:add ecdhx25519 option to speed
NOT BUG:skip inappropriate X25519 tests
NOT BUG:Add X25519 test vectors from RFC7748 6.1 Check sign/verify blocked with X25519
NOT BUG:Add X25519 curve to list
NOT BUG:Add no signing flag
NOT BUG:Add a flag to EC_METHOD for curves which do not support signing New function EC_KEY_can_sign() returns 1 is key can be used for signing Return an explicit error is an attempt is made to sign with no signing curves
NOT BUG:Add new EC_METHOD for X25519
NOT BUG:Add group_order_bits to EC_METHOD
NOT BUG:Add custom_data field for EC_POINT EC_KEY
NOT BUG:In some cases the EC_POINT and EC_KEY BIGNUM components are suboptimal or inappropriate Add an "custom_data" field which curves can populate with a custom structure to suit their needs
NOT BUG:Extract compression form in EC_KEY_oct2key()
NOT BUG:Extract compression form in EC_KEY_oct2key() instead of manually in the ASN.1 code For custom curves do not assume the initial octet is the compression form: it isn't for X25519 et al
NOT BUG:Extended EC_METHOD customisation support
NOT BUG:Add support for optional overrides of various private key operations in EC_METHOD
NOT BUG:EC_METHOD customisation operations
NOT BUG:Extend EC_METHOD to permit additional customisation of private key and ECDH operations
NOT BUG:Rename OIDs
NOT BUG:Use standard X25519 and X448 names for OIDs Delete EdDSA OIDs: for now they wont be used and EdDSA may use a different format
NOT BUG:GH715: Missed some null-check-removals follow commits 412bafdcf5 and 7c96dbcdab
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fix mk1mf build
NOT BUG:Removing certs broke the mk1mf build
NOT BUG:GH715: Missed some null-check-removals
NOT BUG:RT4351: Update doc for OPENSSL_cleanse
NOT BUG:VMS - don't exit out of a MMS recipe
NOT BUG:Exiting out of a recipe more than necessary leaves an ugly message
NOT BUG:Make generation of dependency files more efficient when possible
NOT BUG:When building with GNU C clang or VMS C it's more efficient to generate dependency file and object file in one call rather than two Have the dependency output in a temporary file and compare it with the previous one if available to see if replacement is waranted thereby avoiding unnecessary reconstruction of Makefile / descrip.mms
BUG:Github issue #750
BUG:RT4354: Add some cross-refs
NOT BUG:Stack Overflow has a number of questions related to mutual authentication the client and its certificate Those visiting the man pages for functions like SSL_CTX_use_certificate and SSL_CTX_load_verify_locations don't receive the benefit of a cross reference to SSL_CTX_set_client_CA_list
NOT BUG:using macro inside the case
NOT BUG:fix build with no-srtp
NOT BUG:- srtp_profiles variable is defined when building with SRTP keeping the variable usage also under ifndef OPENSSL_NO_SRTP - alpn help option was kept under ifndef OPENSSL_NO_SRTP
NOT BUG:ct_test.c doesn't need to include from source top only testutil.c does
NOT BUG:The INCLUDE statement can handle setting extra include directories for individual object files let's use it
NOT BUG:Remove last remains of old config strings
NOT BUG:modes/asm/ghash-x86_64.pl: refine GNU assembler version detection
NOT BUG:Even though AVX support was added in GAS 2.19 vpclmulqdq was apparently added in 2.20
NOT BUG:chacha/asm/chacha-*.pl: fix typos in tail processing
NOT BUG:RT#4323
NOT BUG:Reformat and update EC_KEY_new manual page
NOT BUG:Add some missing parentheses and reformat
NOT BUG:Document EC_KEY_oct2key() EC_KEY_key2buf() EC_KEY_oct2priv() EC_KEY_priv2oct() and EC_KEY_priv2buf()
BUG:RT2275: use BIO_sock_nbio()
NOT BUG:Now that BIO_sock_nbio is available use it in the apps
NOT BUG:Remove some old files
NOT BUG:I read the PROBLEMS and they're outdated; nothing I'd put in the online FAQ for example Test-builds work without using these files Had to remove the rehash.time stuff from Makefile.in
NOT BUG:Keep a cache of files that already have a recipe in common.tmpl
NOT BUG:We don't want recipes for the same files generated more than once
NOT BUG:FreeBSD at least can restrict symbols in a shared library - so use the Linux target that does that
NOT BUG:testutil.c includes e_os.h
NOT BUG:GH753: More spelling fix
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Apply default after having checked the given config target is valid
NOT BUG:Drop support for printing SSLv2 ciphers names
BUG:MR: #2083
NOT BUG:Update and clarify EC_POINT documentation
NOT BUG:Reformat EC_POINT_new.pod and add parentheses to function names Clarify the octet form Add documentation for EC_POINT_oct2buf()
BUG:Remove Ubsec engine
BUG:The ubsec engine is now considered obsolete and therefore has been removed
NOT BUG:Moves SCT struct typedef into ossl_typ.h
NOT BUG:Fix for potential deferencing of null pointer in o2i_SCT_signature
NOT BUG:Public API for Certificate Transparency
NOT BUG:GH752 ct_test uses testutil so include that
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Revert "EC_KEY_priv2buf (): check parameter sanity"
BUG:This reverts commit acae59bb29ddc769743ab4a8ae373b5ff2f42b57
NOT BUG:Don't build sanitizer builds with --debug
NOT BUG:They're too slow
NOT BUG:Fix master compile error
NOT BUG:Remove comments saying you must do 'make -f Makefile.in TABLE'
NOT BUG:Since the configs were remade into hash tables this isn't needed any more
NOT BUG:Make the table entry printer in Configure aware of ARRAYs
NOT BUG:GH680: Reuse strnlen() in strndup()
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:EC_KEY_priv2buf (): check parameter sanity
NOT BUG:In EC_KEY_priv2buf() check for pbuf sanity If invoked with NULL gracefully returns the key length
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:check with NULL
NOT BUG:explicit check for NULL
NOT BUG:Check method before access and release ctx in error paths
NOT BUG:- In error paths EVP_MD_CTX allocated by the callee is not released - Checking method before accessing
NOT BUG:RT4335: Fix UEFI build of OBJ_NAME_new_index()
NOT BUG:We are using strcmp() as the cmp_func where in the EDK2 environment strcmp actually ends up being the external AsciiStrCmp() function — an EFI library function defined with the Microsoft ABI
NOT BUG:This means that we can't just assign function pointers to it since in GCC-hosted builds the ABI of any function *not* explicitly marked EFIAPI is the native SysV ABI
NOT BUG:Arguably this stupidity ought to be resolved on the UEFI side but in the general case that would mean that we need to provide ABI-compatible wrappers for *all* the "standard" functions just in case they're used like this
NOT BUG:And in fact we already have a workaround here for DEC C So instead of playing games with casting function pointers it's nicer just to use a simple function to wrap the strcmp() call That cleans up the DEC C workaround *and* it works around the UEFI bogosity at the same time
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Forgotten change of add() call in Configure
NOT BUG:Fix a mkdef.pl warning
NOT BUG:mkdef.pl was issuing the following error:
NOT BUG:Use of uninitialized value within %tag in numeric eq (==) at util/mkdef.pl line 560 <IN> line 92
NOT BUG:This was because it was treating a __cplusplus "#ifdef" check as a "tag" but then skipping over the corresponding "#endif" Therefore after processing a file it still had "left over" tags from processing the previous file It was also getting confused by "#if" checks that didn't match is pre-defined styles
NOT BUG:Unified on VMS - add %disabled in vmsconfig.pm (util/dofile.pl demands it)
NOT BUG:Normalise the include directives in ct_test.c
NOT BUG:build.info needed a slight update one more include directory
NOT BUG:Implement new multi-threading API
NOT BUG:Configure - neater looking add() and add_before()
NOT BUG:They now default to " " as separator but that can be overridden by having a hash with parameters as last argument The only currently recognised parameter is `separator'
NOT BUG:The special separator `undef' will force the result to become a list rather than a concatenated string
NOT BUG:Update test build/run for unified
NOT BUG:Fix memory issues in BIO_*printf functions
NOT BUG:The internal |fmtstr| function used in processing a "%s" format string in the BIO_*printf functions could overflow while calculating the length of a string and cause an OOB read when printing very long strings
NOT BUG:Additionally the internal |doapr_outch| function can attempt to write to an OOB memory location (at an offset from the NULL pointer) in the event of a memory allocation failure In 1.0.2 and below this could be caused where the size of a buffer to be allocated is greater than INT_MAX E.g this could be in processing a very long "%s" format string Memory leaks can also occur
NOT BUG:These issues will only occur on certain platforms where sizeof(size_t) > sizeof(int) E.g many 64 bit systems The first issue may mask the second issue dependent on compiler behaviour
NOT BUG:These problems could enable attacks where large amounts of untrusted data is passed to the BIO_*printf functions If applications use these functions in this way then they could be vulnerable OpenSSL itself uses these functions when printing out human-readable dumps of ASN.1 data Therefore applications that print this data could be vulnerable if the data is from untrusted sources OpenSSL command line applications could also be vulnerable where they print out ASN.1 data or if untrusted data is passed as command line arguments
BUG:Libssl is not considered directly vulnerable Additionally certificates etc received via remote connections via libssl are also unlikely to be able to trigger these issues because of message size limits enforced within libssl
NOT BUG:CVE-2016-0799
NOT BUG:Issue reported by Guido Vranken
NOT BUG:fix "no-engine" build of test fixture
NOT BUG:Add some 'no-engine' builds to travis for test
NOT BUG:GH715: ENGINE_finish can take NULL
NOT BUG:Simplifies calling code Also fixed up any !ptr tests that were nearby turning them into NULL tests
NOT BUG:Fix unified build after CT reorg
BUG:Tests for parsing and printing certificates containing SCTs
NOT BUG:Add more CT utility routines to be used as part of larger patch
BUG:GH463: Fix OPENSSL_NO_OCSP build
NOT BUG:Fixes github issue 463 Building the app without OPENSSL_NO_SOCK isn't supported so only do OPENSSL_NO_OCSP
BUG:Fix indents
NOT BUG:Build fix: remove cleanse_ctr
NOT BUG:RT4116: Change cleanse to just memset
NOT BUG:See also the discussion in https://github.com/openssl/openssl/pull/455
NOT BUG:CVE-2016-0798: avoid memory leak in SRP
NOT BUG:The SRP user database lookup method SRP_VBASE_get_by_user had confusing memory management semantics; the returned pointer was sometimes newly allocated and sometimes owned by the callee The calling code has no way of distinguishing these two cases
BUG:Specifically SRP servers that configure a secret seed to hide valid login information are vulnerable to a memory leak: an attacker connecting with an invalid username can cause a memory leak of around 300 bytes per connection
NOT BUG:Servers that do not configure SRP or configure SRP but do not configure a seed are not vulnerable
NOT BUG:In Apache the seed directive is known as SSLSRPUnknownUserSeed
NOT BUG:To mitigate the memory leak the seed handling in SRP_VBASE_get_by_user is now disabled even if the user has configured a seed
NOT BUG:Applications are advised to migrate to SRP_VBASE_get1_by_user However note that OpenSSL makes no strong guarantees about the indistinguishability of valid and invalid logins In particular computations are currently not carried out in constant time
NOT BUG:Solaris DSOs were still named libFOO.so fixed
NOT BUG:Make it possible to build even if dependency files can't be generated
NOT BUG:If the local system doesn't have GNU C or clang and not even makedepend the build will stop because the call of 'makedepend' fails This changes so the build won't stop because of such failure The result will be empty .d files and that's ok
NOT BUG:GH742: keep gost specific variable under macro
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:GH235: Set error status on malloc failure
NOT BUG:GH480: Don't break statements with CPP stuff
BUG:This is also RT 4137
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Fix typo reformat comment
NOT BUG:Remove unused parameter in ssl_set_masks()
NOT BUG:The ssl_set_masks() function no longer depends on the cipher This also means there is no need to set the masks for each cipher in ssl3_choose_cipher
NOT BUG:Update documentation of SSL METHODs and ciphers
NOT BUG:correct name of GNU shared libraries
NOT BUG:test/ectest.c: add regression test for RT#4284
NOT BUG:ec/asm/ecp_nistz256-*.pl: get corner case logic right
NOT BUG:RT#4284
NOT BUG:ec/asm/ecp_nistz256-x86_64.pl: get corner case logic right
NOT BUG:RT#4284
NOT BUG:test/recipes/80-test_ca.t: remove_tree->rmtree to make it work with Perl 5.10
NOT BUG:poly1305/asm/poly1305-armv4.pl: replace ambiguous instruction
NOT BUG:Different assembler versions disagree on how to interpret #-1 as argument to vmov.i64 as 0xffffffffffffffff or 0x00000000ffffffff So replace it with something they can't disagree on
NOT BUG:RT4339: Fix handling of <internal/bn_conf.h>
NOT BUG:The entire contents of <internal/bn_conf.h> are unwanted in the UEFI build because we have to do it differently there To support building for both 32-bit and 64-bit platforms without re-running the OpenSSL Configure script the EDK2 environment defines THIRTY_TWO_BIT or SIXTY_FOUR_BIT for itself according to the target platform
NOT BUG:The current setup is broken though It checks for OPENSSL_SYS_UEFI but before it's actually defined since opensslconf.h hasn't yet been included
NOT BUG:Let's fix that by including opensslconf.h And also let's move the bn_conf.h doesn't even need to *exist* in the UEFI build environment
BUG:This is also GH PR736
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:GH735: remove unnecessary allocation
NOT BUG:Removing code where memory was getting allocated for an unused variable
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Add PKCS7_NO_DUAL_CONTENT flag
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Remove all -march= from configs
NOT BUG:These flags are limitting needlessly are often patched by packagers and should be specified on the configuration command line by anyone who desires for it to be specific rather than forced by us
NOT BUG:This work was already done with mingw when those configs were worked on now it gets applied to the remaining configs
NOT BUG:Add OPENSSL_PIC back
NOT BUG:In the earlier change where static libraries get built with position independent code OPENSSL_PIC was removed by mistake This adds it back
NOT BUG:Remove unused parameters from internal functions
NOT BUG:Use $disabled{shared} in a safer manner
NOT BUG:The build files use %disabled make sure to pass it to them
NOT BUG:MemorySanitizer: address false positive
NOT BUG:Explicitly unpoison the result of FD_ZERO
NOT BUG:Tests now pass using -fsanitize=memory
BUG:GH678: Add a few more zalloc
NOT BUG:Remove some duplicated NULL/zero init
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:RT4334: Check UEFI before __STDC_VERSION__ for <inttypes.h>
NOT BUG:Adding -nostdinc to the EDK2 showed that we were including <inttypes.h> for some UEFI builds because the check for __STDC_VERSION__ happens before the check for OPENSSL_SYS_UEFI Fix that
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Partial revert of 1288f26 and fix for no-async
NOT BUG:The commit 1288f26 says that it fixes no-async but instead seems to break it Therefore revert that change and fix no-async
BUG:RT4309: Define PRIu64 for UEFI build
NOT BUG:Provide an appropriate definition of PRIu64 for the EDK2 build since we don't have <inttypes.h> there
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:RT4320/GH705: Fix PEM parsing bug
NOT BUG:Also removing confusing pointer-alias variable
NOT BUG:GH721: Duplicated flags in doc
NOT BUG:Clean away $no_dso since with have $disabled{dso}
NOT BUG:Clean away $no_asm since with have $disabled{asm}
NOT BUG:Clean away $no_rfc3779 since we don't appear to use it at all
NOT BUG:Clean away $zlib since with have $disabled{zlib}
NOT BUG:Clean away $no_threads since we have $disabled{threads}
NOT BUG:Clean away $config{no_shared} since we have $disabled{shared}
NOT BUG:Expose %disables to the perl fragments in build.info files
NOT BUG:This way we can use them as conditions instead of relying to more or less obscure aliases in %config or variables directly in Configure
NOT BUG:Fix DSO name on HP/UX
NOT BUG:If dlfcn is used the name was set to lib$(LIBNAME).so when it should have been just $(LIBNAME).so
NOT BUG:Fix a few typos
NOT BUG:Missed an experimental
NOT BUG:Don't include all symbols from static libraries when building a DSO
NOT BUG:When building a DSO there's no reason to include all symbols from static libraries it happens to link with whichever they may be
NOT BUG:Get back "ssl2" as a deprecated disablable option
NOT BUG:Preserved for now for those who have scripts with the option "no-ssl2" We warn that it's deprecated and ignore it otherwise
NOT BUG:In response to RT#4330
NOT BUG:Add a "no-pic" build for Travis
NOT BUG:Rewrite CHANGES to add some commentary about the "pic" option
NOT BUG:Introduce the "pic" / "no-pic" config option
NOT BUG:Building shared libraries or not is not the same as building position independent code or not It's true that if you don't build PIC you can't build shared libraries However you may very well want to build only static libraries but still want PIC code
NOT BUG:Therefore we introduce a new configuration option "pic" which is enabled by default or explicitely with "enable-pic" or disabled with "no-pic" or "disable-pic" Of course if "pic" is disabled "shared" and "dynamic-engine" are automatically disabled as well
NOT BUG:Use $disabled{"dynamic-engine"} internally
NOT BUG:We were kinda sorta using a mix of $disabled{"static-engine" and $disabled{"dynamic-engine"} in Configure Let's avoid confusion choose one of them and stick to it
NOT BUG:Fix incorrect SO name on GNU platforms
NOT BUG:An error was introduced with the setting of SHLIB in DO_GNU_SO A common DO_GNU_SO_COMMON that both DO_GNU_SO and DO_GNU_SO_NOCALC use makes things clearer
NOT BUG:Don't use 'parent' in util/dofile.pl
NOT BUG:Because we're requiring Perl 5.10.0 and the 'parent' didn't appear before Perl 5.10.1 we need to resort to the older parent module declaration style modifying @ISA
NOT BUG:Check that any dependency file is newer than Makefile before concatenating
NOT BUG:On slower file systems this makes a huge difference
NOT BUG:Document the last configuration changes
NOT BUG:Avoid GNU make re-exec when adding dependencies to Makefile
NOT BUG:GNU make will re-exec if (it thinks that) the Makefile has changed Just having the target Makefile seems to make it think it has so we end up in a look where GNU make re-execs for ever
NOT BUG:The fix is easy just remove the Makefile target and have the depend target run the recipe on its own instead of depending on Makefile
NOT BUG:Work-around for proxy->s_server retry logic
NOT BUG:Remove OBJ_EXT and friends
NOT BUG:Missing extension on dependency .d file is not always made (e.g when input is a .s)
NOT BUG:Unified on VMS - install dynamic engines if there are any
NOT BUG:Don't check for no_shared
NOT BUG:Run the TLSProxy based tests as long as dynamic engines are built
NOT BUG:They depend on this feature because they use the engine ossltest which is only available as a dynamic engine
NOT BUG:Build dynamic engines even if configured "no-shared"
NOT BUG:Until now the engines in engines/ were only built as dynamicaly loadable ones if shared libraries were built
NOT BUG:We not dissociate the two and can build dynamicaly loadable engines even if we only build static libcrypto and libssl This is controlled with the option (enable|disable|no)-static-engine defaulting to no-static-engine
NOT BUG:Note that the engines in crypto/engine/ (dynamic and cryptodev) will always be built into libcrypto
NOT BUG:Always build library object files with shared library cflags
NOT BUG:This takes us away from the idea that we know exactly how our static libraries are going to get used Instead we make them available to build shareable things with be it other shared libraries or DSOs
NOT BUG:On the other hand we also have greater control of when the shared library cflags They will never be used with object files meant got binaries such as apps/openssl or test/test*
NOT BUG:With unified we take this a bit further and prepare for having to deal with extra cflags specifically to be used with DSOs (dynamic engines) libraries and binaries (applications)
NOT BUG:Make crypto/buildinf.h depend on configdata.pm rather than Makefile
NOT BUG:Depending on Makefile meant that a new attempt to rebuild the Makefile with "new" dependency data was done all the time uncontrolled Better to depend on configdata.pm which truly only changes with reconfiguration
NOT BUG:argv was set but unused
NOT BUG:Also gives an error message when you gave it a parameter it didn't expect
BUG:MR: #2009
NOT BUG:apps_extra_src changed name to apps_aux_src rename everywhere
BUG:One spot was forgotten
NOT BUG:VMS static libraries have the extension .OLB not .LIB
NOT BUG:Object LiBrary
NOT BUG:Unified 'make depend' has to cleanup after itself
NOT BUG:It failed to remove lingering Makefile.new
NOT BUG:Fix Configurations/unix-Makefile.tmpl
NOT BUG:It was turning off output again in two place where it should have turned it on
NOT BUG:Makefile.shared: limit .dll image base pinning to FIPS builds
NOT BUG:Remove DSA negative integer workaround code
NOT BUG:Remove DSA private key code which tolerates broken implementations which use negative integers
NOT BUG:Remove broken DSA private key workarounds
NOT BUG:Remove old code that handled various invalid DSA formats in ancient software
NOT BUG:This also fixes a double free bug when parsing malformed DSA private keys
NOT BUG:Thanks to Adam Langley (Google/BoringSSL) for discovering this bug using libFuzzer
BUG:CVE-2016-0705
NOT BUG:TLS: reject duplicate extensions
NOT BUG:Adapted from BoringSSL Added a test
NOT BUG:The extension parsing code is already attempting to already handle this for some individual extensions but it is doing so inconsistently Duplicate efforts in individual extension parsing will be cleaned up in a follow-up
BUG:getaddrinfo: zero the hints structure
NOT BUG:This silences the memory sanitizer All fields were already correctly initialized but the struct padding wasn't causing an uninitialized read warning
NOT BUG:GH712: Missed some no-filenames cases
NOT BUG:crypto.h: honor no-filenames config setting in missing cases
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Make sure the linked programs have the correct extension
NOT BUG:Big rename fest of MingW shared libraries
NOT BUG:So far MingW shared libraries were named like this
BUG:libeay32.dll + libeay32.dll.a ssleay32.dll + ssleay32.dll.a
NOT BUG:That naming scheme is antiquated a reminicense of SSLeay We're therefore changing the scheme to something that's more like the rest of OpenSSL
BUG:There are two factors to remember:
NOT BUG:- Windows libraries have no recorded SOvers which means that the shared library version must be encoded in the name According to some it's unwise to encode extra periods in a Windows file name so we convert version number periods to underscores - MingW has multilib ability However DLLs need to reside with the binaries that use them so to allow both 32-bit and 64-bit DLLs to reside in the same place we add '-x64' in the name of the 64-bit ones
NOT BUG:The resulting name scheme (for SOver 1.1) is this:
NOT BUG:on x86: libcrypto-1_1.dll + libcrypto.dll.a libssl-1_1.dll + libssl.dll.a
NOT BUG:on x86_64: libcrypto-1_1-x64.dll + libcrypto.dll.a libssl-1_1-x64.dll + libssl.dll.a
NOT BUG:An observation is that the import lib is the same for both architectures Not to worry though as they will be installed in PREFIX/lib/ for x86 and PREFIX/lib64/ for x86_64
NOT BUG:As a side effect MingW got its own targets in Makefile.shared link_dso.mingw-shared and link_app.mingw-shared are aliases for the corresponding cygwin-shared targets link_shlib.mingw-shared is however a target separated from the cygwin one
NOT BUG:Misc small fixes
NOT BUG:Better libclean that removes the exact files that have been built nothing more and nothing less
NOT BUG:Corrected typo
NOT BUG:A couple of editorial changes
NOT BUG:Try removing installation directories after having uninstalled files
BUG:Of course if there are remaining files in a directory it won't be removed
NOT BUG:Small rename fest in unified obj2dynlib -> obj2dso
NOT BUG:Since we're using the acronym DSO everywhere else and that's a common name for that kind of object we might as well do so here as well
NOT BUG:Remake the installation of shared libraries in unix-Makefile.tmpl
NOT BUG:Instead of having the installation recipe rely on special knowledge feed it with information including what shared library files belong together For Cygwin and Mingw that's the .dll and its import library .dll.a For Unixen it's the shared library file name with SO version and the one without
NOT BUG:Big rename fest of engine DSO names from libFOO.so to FOO.so
NOT BUG:The engine DSOs were named as if they were shared libraries and could end up having all sorts of fancy names:
NOT BUG:Cygwin: cygFOO.dll Mingw: FOOeay32.dll Unix: libFOO.so / libFOO.sl / libFOO.dylib / ..
NOT BUG:This may be confusing since they look like libraries one should link with at link time when they're just DSOs
NOT BUG:It's therefore time to rename them and do it consistently on all platforms:
NOT BUG:Cygwin & Mingw: FOO.dll Unix: FOO.{so,sl,dylib,...}
NOT BUG:Interestingly enough the MSVC and VMS builds always did it this way
NOT BUG:Simplify the generation of ld scripts for Linux and Solaris
NOT BUG:Because we know for certain that the link_shlib targets are used exclusively for shared libraries (libcrypto and libssl) and that they must have an associated .num file we don't need to check the library name to produce an ld script Just do it unconditionally
NOT BUG:link_shlib.linux-shared can be simplified further as most of it is exactly the same as $(DO_GNU_SO) with just one variable modification
NOT BUG:Big rename fest in makefile.shared: link_a / link_o -> link_shlib / link_dso
NOT BUG:Originally the Makefile.shared targets described what they used as input for a shared object be it a shared library or a DSO It turned out however that the link_o targets were used exclusively for engines and the link_a targets were for libcrypto and libssl
NOT BUG:This rename fest turns and indication on the kind of input the targets get to the intention with using them
NOT BUG:Centralise the shared library / dso name info in unix-Makefile.tmpl
NOT BUG:Let Configure figure out the diverse shared library and DSO extensions
NOT BUG:Then it can pass around the information where it belongs The Makefile templates pick it up along with other target data the DSO module gets to pick up the information through crypto/include/internal/dso_conf.h
NOT BUG:VMS fixed in unified build
NOT BUG:- install_sw had a display of text that belongs under the install target - previous layout installed architecture dependent files in dev:['prefix'.'arch'.LIB] dev:['prefix'.'arch'.EXE] and dev:['prefix'.'arch'.ENGINES] Changed to dev:['prefix'.LIB.'arch'] dev:['prefix'.EXE.'arch'] and dev:['prefix'.ENGINES.'arch'] instead
NOT BUG:Unified - don't install the ossltest engine
NOT BUG:This is done with a simple file name comparison We could think of something more elegant in the future
NOT BUG:Unified - do a better job when uninstalling
NOT BUG:Some directories weren't removed
NOT BUG:Rethink the uplink / applink story
NOT BUG:Adding uplink and applink to some builds was done by "magic" the configuration for "mingw" only had a macro definition the Configure would react to its presence by adding the uplink source files to cpuid_asm_src and crypto/build.info inherited dance to get it compiled and Makefile.shared made sure applink.o would be appropriately linked in That was a lot under the hood
NOT BUG:To replace this we create a few template configurations in Configurations/00-base-templates.conf inherit one of them in the "mingw" configuration the rest is just about refering to the $target{apps_aux_src} / $target{apps_obj} in the right places
NOT BUG:VMS: rather use a quick file comparison than DIFF
NOT BUG:VMS DIFF tries to calculate all the differences which is slower than just reading the files and stopping at the first difference The latter doesn't exist as a command so the problem is solved with perl and File::Compare (has been in core perl since very early version 5)
NOT BUG:VMS: produce dependency files just like you produce object files
NOT BUG:We need to do the same dance as when object files are created
NOT BUG:Fix casing on VMS
NOT BUG:DCL may be in extended parsing style which makes it less case insensitive so when removing a string from another make sure to get casing correctly
NOT BUG:Don't use config.timestamp we already have configdata.pm
NOT BUG:The benefit with using configdata.pm is that Configure writes it for us
NOT BUG:Automatic 'make depend' for the unified build scheme
NOT BUG:This isn't the fully featured combination of compiler generated dependency files and Makefile include directives but a cheaper variant of the same
NOT BUG:The dependency files are generated automatically but then we have the usual "depend" target However we depend on it in the bigger phony targets that are the most likely to be used That make this feature automatic enough
NOT BUG:A side effect is that we can't use the build file's timestamp to check if reconfiguring might be in order In its place we use a flag file that depends on Configure and the build file template and depend on it in spots where it makes sense to check for the need to reconfigure
NOT BUG:Fix uninstall_sw for the unixmake scheme
NOT BUG:The uninstall_sw target tried to 'make uninstall' in all subdirs Change it to only go into $(INSTALL_SUBS) just like install_sw does
NOT BUG:Set EXE_EXT environment variable when testing
NOT BUG:When cross compiling we may end up with someting like apps/openssl.exe and a number of test/*.exe However util/shlib_wrap.sh doesn't know what the executable extension should be if any so we need to make sure it has access to that information when testing since OpenSSL::Test uses that script to execute all programs
NOT BUG:Remove all special make depend flags as well as OPENSSL_DOING_MAKEDEPEND
NOT BUG:All those flags existed because we had all the dependencies versioned in the repository and wanted to have it be consistent no matter what the local configuration was Now that the dependencies are gone from the versioned Makefile.ins it makes much more sense to use the exact same flags as when compiling the object files
NOT BUG:Don't treat .d (depend) files separately from object files
NOT BUG:.d (.MMS in the VMS world) files with just dependencies are built from exactly the same conditions as the object files Therefore the rules for them can be built at the same time as the rules for the corresponding object files
NOT BUG:This removes the requirement for a src2dep function in the build file templates and for common.tmpl to call it In the end the existence of depend files is entirely up to the build file
NOT BUG:Fix the makedepend constructor in unix-Makefile.tmpl
NOT BUG:Fix {TLS,CIPHER}_DEBUG compiles
NOT BUG:documentation: RSA_new_method argument
NOT BUG:Remove outdated DEBUG flags
NOT BUG:Add -DBIO_DEBUG to --strict-warnings Remove comments about outdated debugging ifdef guards Remove md_rand ifdef guarding an assert; it doesn't seem used Remove the conf guards in conf_api since we use OPENSSL_assert not assert For pkcs12 stuff put OPENSSL_ in front of the macro name Merge TLS_DEBUG into SSL_DEBUG Various things just turned on/off asserts mainly for checking non-NULL arguments which is now removed: camellia bn_ctx crypto/modes Remove some old debug code that basically just printed things to stderr: DEBUG_PRINT_UNKNOWN_CIPHERSUITES DEBUG_ZLIB OPENSSL_RI_DEBUG RL_DEBUG RSA_DEBUG SCRYPT_DEBUG Remove OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL
NOT BUG:remove redundant opt* declarations
NOT BUG:Fix typo in SSL_CTX_set_msg_callback docs
NOT BUG:Change `SSL_get_msg_callback_arg` to `SSL_set_msg_callback_arg`
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:GH681: More command help cleanup
NOT BUG:enc: - typo in -base64 option - missing help opt text ocsp req rsautl s_client: - missing help opt text
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fix windows thread stop code
NOT BUG:The windows thread stop code was erroneously not just deleting the thread local variable on thread stop but also deleting the thread local *key* (thus removing thread local data for *all* threads in one go!)
NOT BUG:Fix OPENSSL_config with NULL parameter
NOT BUG:Fix memory leaks in tls_decrypt_ticket
NOT BUG:Certain code paths in tls_decrypt_ticket could return early without first freeing the HMAC_CTX or the EVP_CIPHER_CTX
NOT BUG:GH706: Use NULL for pointer compare
NOT BUG:As handshake_func is a function pointer it should compare to NULL
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:typo
NOT BUG:Remove "experimental" in code and comments too
NOT BUG:Thanks to Viktor for additional review
NOT BUG:In the unified scheme there is no $(TOP) use $(SRCDIR) instead
NOT BUG:Fix spelling
NOT BUG:Fix spelling
BUG:Add -lresolv to the Solaris ex_libs
BUG:The reason is that we use hstrerror() and other resolver functions
BUG:Reporter: Erik Forsberg <erik@efca.com>
NOT BUG:Finish 02f7114a7fbb3f3ac171bae87be8c13bc69e4005
BUG:Get conditional priorities right
BUG:"or" has lower priority than "||" and works better to have Perl less confused
NOT BUG:Be more verbose when debugging is on
NOT BUG:It's near impossible to figure out what goes wrong with the execution of sub-commands otherwise
BUG:RT3628: Allow filenames to be eliminated from compiled library
NOT BUG:Although I explicitly don't care about the tinfoil-hat reason given in the initial opening of RT#3628 that "paths usually contain private information" there *are* situations where it's useful to eliminate the filenames from the compiled binary
NOT BUG:The two reasons we do care about in the context of firmware such as EDK2 are that it allows for a smaller footprint and it is also a necessary component of a binary-reproducible build
NOT BUG:To that end introduce OPENSSL_FILE and OPENSSL_LINE macros defining them to __FILE__ and __LINE__ respectively in the normal case but to "" and 0 when OPENSSL_NO_FILENAMES is set
NOT BUG:This is mostly a naïve invocation of $ sed 's/__\([FL]I[NL]E\)__/OPENSSL_\1/g' -i `git grep -l __LINE__` but with a few instances change to just print the function name instead (although those probably need to die anyway) and test cases left untouched
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:When someone configures an out-of-source build switch to unified
NOT BUG:For example this works instead of giving a big error message (note the lack of '--unified'):
NOT BUG:mkdir ../_build (cd ../_build/; ../openssl-src/config; make)
NOT BUG:Fix check of -DOPENSSL_USE_APPLINK in $config{cflags}
NOT BUG:The previous fix wasn't right
NOT BUG:Also change all (^|\s) and (\s|$) constructs to (?:^|\s) and (?:\s|$) Perl seems to like that better
NOT BUG:RT4310: Fix varous no-XXX builds
NOT BUG:When OPENSSL_NO_ASYNC is set make ASYNC_{un,}block_pause() do nothing This prevents md_rand.c from failing to build Probably better to do it this way than to wrap every instance in an explicit #ifdef
NOT BUG:A bunch of new socket code got added to a new file crypto/bio/b_addr.c Make it all go away if OPENSSL_NO_SOCK is defined
NOT BUG:Allow configuration with no-ripemd no-ts no-ui We use these for the UEFI build
NOT BUG:Also remove the 'Really???' comment from no-err and no-locking We use those too
NOT BUG:We need to drop the crypto/engine directory from the build too and also set OPENSSL_NO_ENGINE
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:remove redundant code
NOT BUG:RT4318: Fix OSSL_SSIZE_MAX for UEFI build
NOT BUG:Commit e634b448c ("Defines OSSL_SSIZE_MAX") introduced a definition of OSSL_SSIZE_MAX which broke the UEFI build Fix that by making UEFI take the same definition as Ultrix (ssize_t == int)
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:RT4315: Fix UEFI build in crypto/init.c
BUG:We don't have atexit() in the EDK2 environment Firmware never exits
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Remove JPAKE
NOT BUG:RT4313: Fix build for !IMPLEMENTED code path in CRYPTO_secure_free()
NOT BUG:Commit 05c7b1631 ("Implement the use of heap manipulator implementions") added 'file' and 'line' arguments to CRYPTO_free() and friends but neglected to fix up the !IMPLEMENTED case within CRYPTO_secure_free() Add the missing arguments there too
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fixup secmemtest for the change of CRYPTO_free() and friends
NOT BUG:Switching it to use OPENSSL_free() et al when appropriate
BUG:Fix mismatched curly brace
NOT BUG:Update the documentation on heap allocators / deallocators
BUG:Implement the use of heap manipulator implementions
NOT BUG:- Make use of the functions given through CRYPTO_set_mem_functions() - CRYPTO_free() CRYPTO_clear_free() and CRYPTO_secure_free() now receive __FILE__ and __LINE__ - The API for CRYPTO_set_mem_functions() and CRYPTO_get_mem_functions() is slightly changed the implementation for free() now takes a couple of extra arguments taking __FILE__ and __LINE__ - The CRYPTO_ memory functions will *always* receive __FILE__ and __LINE__ from the corresponding OPENSSL_ macros regardless of if crypto-mdebug has been enabled or not The reason is that if someone swaps out the malloc() realloc() and free() implementations we can't know if they will use them or not
NOT BUG:md_rand: FAQ URL to use https and follow a redirect
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:OPENSSL_init_ssl.pod: fix minor typo
NOT BUG:On solaris the variable name sun clashes use s_un instead
BUG:For orthogonality we change sin -> s_in and sin6 -> s_in6 as well
NOT BUG:Check for OPENSSL_USE_APPLINK in $config{cflags} as well
NOT BUG:Macro definitions "should" be found in $config{defines} but some configs haven't transfered macro definitions from their 'cflags' settings (which isn't mandatory anyway) so check both places
NOT BUG:Don't check for gcc or clang on VMS
NOT BUG:This check is meaningless on VMS and only produce an error because the underlying shell (DCL) doesn't understand sh syntax such as '2>&1'
NOT BUG:Lowercase configuration arguments on VMS
NOT BUG:Depending on user preferences Configure might get something like --PREFIX=blah just as well as --prefix=blah or "SHARED" just as well as "shared" On VMS let's therefore lowercase at least the portion of the argument before a possible equal sign
NOT BUG:For good measure we lowercase the arguments to be checked in config.com as well The original argument is sent on to Configure however
NOT BUG:Fix Solaris link_a and link_o
NOT BUG:A long time ago Solaris cc didn't seem to handle -Wl linker options while gcc on Solaris required it Since then Solaris cc has developed to understand -Wl options and our little dance to figure out how to pass linker options to the C compiler that's used isn't needed any more
NOT BUG:Simplify tls1_set_ec_id
NOT BUG:Use nid_list table to lookup curve IDs
NOT BUG:Add explanation and warning to TLS id table
NOT BUG:Fix use of add() and add_before() in Configurations/*.conf
NOT BUG:These two functions take a separator to concatenat the strings with as first argument
NOT BUG:Prepare for 1.1.0-pre4-dev
NOT BUG:Prepare for 1.1.0-pre3 release
BUG:Correct deprecation of OPENSSL_config
BUG:Reported in GH#684
NOT BUG:Fix build-break
NOT BUG:Combination of heartbeats and unit-tests
BUG:MANSUFFIX should be left empty
NOT BUG:That variable isn't for us it's for any user distributor or package builder that wants one after the section number "ssl" seems to be popular..
NOT BUG:Address comments
NOT BUG:Tests depend on everything
NOT BUG:Make the BIO_ADDR param optional
NOT BUG:Misc fixes in util/mk1mf.pl
NOT BUG:mk1mf was wondering about the options no-heartbeats and no-crypto-mdebug-backtrace so we add option hooks them They only need to become OPENSSL_NO_ macros in opensslconf.h so nothing additional needs to be done
NOT BUG:Also add "-DOPENSSL_PIC" when shared libraries are produced
NOT BUG:Don't call cpuid in test; done as init
NOT BUG:Fixes to make no-deprecated work again
NOT BUG:Configurations/00-base-templates.conf: typos in [chacha|poly1305]_asm_src
NOT BUG:chacha/asm/chacha*: ensure that zero length is handled (without crash)
BUG:RT#4305
NOT BUG:chacha/asm/chacha-x86[_64].pl: fix typos and logical errors
NOT BUG:Thanks to: David Benjamin of Chromuim
BUG:RT#4305
NOT BUG:make update
NOT BUG:Don't use libcrypto private headers with mkdef.pl
NOT BUG:Three header files from crypto/include/internal were used by util/mkdef.pl This should never be needed Some test program used these which made it a valid reason at the time to make the some internal symbols public in the shared libraries but that's not the case any more
NOT BUG:However to be able to link libssl.so some symbols found in include/internal headers still need to be made public
NOT BUG:Make sure to use unsigned char for is*() functions
NOT BUG:On some platforms the implementation is such that a signed char triggers a warning when used with is*() functions On others the behavior is outright buggy when presented with a char that happens to get promoted to a negative integer
NOT BUG:The safest thing is to cast the char that's used to an unsigned char
NOT BUG:Make the use of mdebug backtrace a separate option
NOT BUG:To force it on anyone using --strict-warnings was the wrong move as this is an option best left to those who know what they're doing
NOT BUG:Use with care!
NOT BUG:Declare DllMain internally
NOT BUG:DllMain is a symbol that needs to be global but no one needs to know However some compilers will warn if there isn't a declaration before the function is defined Just add a declaration before the function definition
NOT BUG:Don't test heartbeats when there aren't any
NOT BUG:Make sure a socklen_t can compare with a sizeof() result
NOT BUG:Most of the times it seems that socklen_t is unsigned Unfortunately this isn't always the case and it doesn't compare with a size_t without warning
BUG:A cast resolves the issue
NOT BUG:Have dofile.pl say where it was run for real this time
NOT BUG:Have dofile.pl say where it was run
BUG:Prefer IO::Socket::INET6 over IO::Socket::IP
NOT BUG:While IO::Socket::IP is a core perl module (since Perl v5.19.8 or so says corelist) IO::Socket::INET6 has been around longer is said to be more widely deployed and most importantly seems to have less bugs hitting us We therefore prefer IO::Socket::INET6 and only fall back to IO::Socket::IP if the former doesn't exist on the local system
NOT BUG:crypto/poly1305: add floating-point reference implementation
NOT BUG:RT4304: Look for plaintext HTTP
NOT BUG:GH675: make ssl3_ciphers static
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Pass $(CC) to perlasm scripts via the environment
NOT BUG:It seems that on some platforms the perlasm scripts call the C compiler for certain checks These scripts need the environment variable CC to have the C compiler command
NOT BUG:Reformat warn variables for easier editing
NOT BUG:Don't build test programs by default add convenience targets for unified build
NOT BUG:Test programs are now only built when running "make test" or "make build_tests"
NOT BUG:Have the same installation directories in unified as in unixmake
NOT BUG:unix-Makefile.tmpl was lagging behind on this point
NOT BUG:Configurations: engage PPC ChaCha20 and Poly1305 modules
NOT BUG:PPC assembly pack: add ChaCha20 and Poly1305 modules
NOT BUG:Add SHARED_RCFLAGS in unified Makefile template
NOT BUG:Also remove a spurious extra $(LDFLAGS)
NOT BUG:async_win.c: remove unused variable
BUG:Silencing this: crypto/async/arch/async_win.c: In function 'async_fibre_init_dispatcher': crypto/async/arch/async_win.c:112:12: warning: unused variable 'dispatcher' [-Wunused-variable] LPVOID dispatcher; ^
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:The unified build may delete installed manual files
NOT BUG:The installation of man files and html files alike didn't properly check that file names with different casing could be the same on case-insensitive file systems This change fixes that
NOT BUG:GH650: Minor tidying around the ocsp app
NOT BUG:The ocsp utility is something of a jack-of-all-trades; most anything related to the OCSP can be done with it In particular the manual page calls out that it can be used as either a client or a server of the protocol but there are also a few things that it can do which do not quite fit into either role such as encoding an OCSP request but not sending it printing out a text form of an OCSP response (or request) from a file akin to the asn1parse utility or performing a lookup into the server-side revocation database without actually sending a request or response All three of these are documented as examples in the manual page but the documentation prior to this commit is somewhat misleading in that when printing the text form of an OCSP response the code also attempts to verify the response displaying an error message and returning failure if the response does not verify (It is possible that the response would be able to verify with the given example since the default trust roots are used for that verification but OCSP responses frequently have alternate certification authorities that would require passing -CAfile or -CApath for verification.)
NOT BUG:Tidy up the documentation by passing -noverify for the case of converting from binary to textual representation and also change a few instances of -respin to -reqin as appropriate note that the -url option provides the same functionality as the -host and -path options clarify that the example that saves an OCSP response to a file will also perform verification on that response and fix a couple grammar nits in the manual page
NOT BUG:Also remove an always-true conditional for rdb != NULL -- there are no codepaths in which it could be initialized at the time of this check
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Display the windres command
BUG:GH643: Cleanup header analysis
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Free and zero DH/ECDH temporary key after use
BUG:PR#4303
NOT BUG:Rethink the method to place user cflags last
NOT BUG:The previous method had some unfortunate consequences with --strict-warnings To counteract revert part of the previous change and move down the block of code that adds the user cflags and defines
NOT BUG:Make sure the OPENSSL_INIT flags are 32 bits and document the ssl range
BUG:Remove 00-test_checkexes.t as it has lost its relevance
NOT BUG:In the early stages of creating the new test framework 00-test_checkexes was a temporary check to ensure we had a recipe for every test program in test/ By now this test has fulfilled its purpose and we've learned how to make recipes properly It's time for this check to go away
NOT BUG:In templates output_on() must be used the same way as output_off()
NOT BUG:Otherwise there will be an unbalance
BUG:C64x+ assembly pack: add ChaCha20 and Poly1305 modules
NOT BUG:Configurations: engage ARM ChaCha20 and Poly1305 modules
NOT BUG:ARM assembly pack: add ChaCha20 and Poly1305 modules
NOT BUG:apps/speed.c: initialize c[D_GHASH][i]
NOT BUG:RT#4230
NOT BUG:Defines OSSL_SSIZE_MAX
NOT BUG:Removes SSIZE_MAX definition from bss_bio.c and changes that file to use OSSL_SSIZE_MAX
NOT BUG:No need to account for OPENSSL_SYS_VXWORKS since that never actually gets defined anywhere It must be a historical artifact
NOT BUG:Fix some issues near recent chomp changes
NOT BUG:fix warnings on 32 bit builds
NOT BUG:We need the linked utils after a full build
NOT BUG:We really needs a better util/shlib_wrap.sh but will have to do for now
NOT BUG:Unified build - fix make depend
NOT BUG:There was a catch 22 where 'make depend' directly after configuring in an otherwise pristine build tree would fail because buildinf.h didn't exist yet
NOT BUG:This change has the depend building targets depend on the same other targets as the object file building targets so the generation of buildinf.h and similar files would kick in during 'make depend'
NOT BUG:Move brace outside #ifdef
NOT BUG:evp/e_des[3].c: address compiler warnings fix formatting
NOT BUG:RT#4210
NOT BUG:modes/ctr128.c: pay attention to ecount_buf alignment in CRYPTO_ctr128_encrypt
NOT BUG:It's never problem if CRYPTO_ctr128_encrypt is called from EVP because buffer in question is always aligned within EVP_CIPHER_CTX structure
NOT BUG:RT#4218
NOT BUG:Rename INSTALL_PREFIX to DESTDIR remove option --install_prefix
NOT BUG:INSTALL_PREFIX is a confusing name as there's also --prefix Instead tag along with the rest of the open source world and adopt the Makefile variable DESTDIR to designate the desired staging directory
NOT BUG:The Configure option --install_prefix is removed the only way to designate a staging directory is with the Makefile variable (this is also implemented for VMS' descrip.mms et al)
NOT BUG:Update .gitignore
NOT BUG:Not all git versions understand **/Makefile but all recognize that filename without any path applies to all directories
BUG:.travis.yml: exclude gcc from MacOS X CI builds
NOT BUG:Contemporary Xcode gcc is a front-end to clang so that explicit gcc build is actually redundant on MacOS X
NOT BUG:Put user flags last for priority
NOT BUG:ec/asm/ecp_nistz256-armv8.pl: fix test_ssl spurious errors
NOT BUG:RT#4237
BUG:Now that we have good verbosity turn it on for Travis
NOT BUG:It's nearly impossible to determine what goes wrong in the tests running there without this
NOT BUG:Document the changes in "make test" behavior
NOT BUG:Let all TLSProxy based tests display debug text conditionally
NOT BUG:If the environment variable HARNESS_ACTIVE isn't defined or HARNESS_VERBOSE is defined it's probable that lots of output is desired
NOT BUG:Rethink logging of test recipes
NOT BUG:The logging that was performed in OpenSSL::Test was initially set up as a means not to let messages that test programs write to STDERR get displayed when a test isn't running in verbose mode However the way it was implemented it meant that those messages were never displayed and you had to look in a test log This also meant that output to STDERR and output to STDOUT got broken apart which isn't optimal
NOT BUG:So we remove the whole test log file implementation and instead we're sending STDERR to the null device unless one of these conditions apply:
NOT BUG:- the test recipe already redirects stderr Just let it - the environment variable HARNESS_ACTIVE is undefined meaning the recipe is run directly as a perl script instead of being harnessed by Test::Harness - the environment variable HARNESS_VERBOSE is set
NOT BUG:Getting a full log of the tests now becomes as simple as this:
NOT BUG:HARNESS_VERBOSE=yes make test 2>&1 | tee tests.log
NOT BUG:Better workaround for VMS getnameinfo() bug
NOT BUG:The actual bug with current getnameinfo() on VMS is not that it puts gibberish in the service buffer but that it doesn't touch it at all The gibberish we dealt with before was simply stuff that happened to be on the stack
NOT BUG:It's better to initialise the service buffer properly (with the empty string) and check if it's still an empty string after the getnameinfo() call and fill it with the direct numerical translation of the raw port if that's the case
NOT BUG:Adjust transfer::Text::Template.pm for alternate directory name
NOT BUG:On VMS periods in directory names weren't allowed To counter that unpackers such as VMSTAR convert periods in directory names to underscores We need to count that in and add an alternative library path for Text::Template
NOT BUG:RT 3854: Update apps/req
BUG:Change the default keysize to 2048 bits and the minimum to 512 bits
NOT BUG:Remove last chomps
NOT BUG:In the previous commit to change all chomp to a more flexible regexp Configure was forgotten This completes the change
NOT BUG:Fix the enable-ssl-trace config option
NOT BUG:The recent removal of static ECDH broke the enable-ssl-trace compilation
NOT BUG:make generate
NOT BUG:Generate progs.h from a bunch of files instead of internal knowledge
NOT BUG:apps/progs.pl counted on the caller to provide the exact command files The unified build doesn't have that knowledge and the easier and more flexible thing to do is to feed it all the apps/*.c files and let it figure out the command names by looking inside (looking for /int ([a-z0-9][a-z0-9_]*)_main\(int argc,/)
NOT BUG:Also add it to the generate command since it's a versioned file
NOT BUG:Typo: only return error if unrecognise bag type
NOT BUG:State the minimum Perl version that our scripts will work with
NOT BUG:Perl's chop / chomp considered bad use a regexp instead
NOT BUG:Once upon a time there was chop which somply chopped off the last character of $_ or a given variable and it was used to take off the EOL character (\n) of strings
NOT BUG:.. but then you had to check for the presence of such character
NOT BUG:So came chomp the better chop which checks for \n before chopping it off And this worked well as long as Perl made internally sure that all EOLs were converted to \n
NOT BUG:These days though there seems to be a mixture of perls so lines from files in the "wrong" environment might have \r\n as EOL or just \r (Mac OS unless I'm misinformed)
NOT BUG:So it's time we went for the more generic variant and use s|\R$|| the better chomp which recognises all kinds of known EOLs and chops them off
NOT BUG:A few chops were left alone as they are use as surgical tools to remove one last slash or one last comma
NOT BUG:NOTE: \R came with perl 5.10.0 It means that from now on our scripts will fail with any older version
NOT BUG:update ciphers manual page
NOT BUG:Remove static ECDH support
NOT BUG:Remove support for static ECDH ciphersuites They require ECDH keys in certificates and don't support forward secrecy
NOT BUG:perlasm/x86_64-xlate.pl: pass pure constants verbatim
NOT BUG:RT#3885
NOT BUG:util/mk1mf.pl: use LINK_CMD instead of LINK variable
NOT BUG:Trouble is that LINK variable assignment in make-file interferes with LINK environment variable which can be used to modify Microsoft's LINK.EXE behaviour
NOT BUG:RT#4289
NOT BUG:poly1305/asm/poly1305-x86_64.pl: MacOS X portability fix
NOT BUG:poly1305/asm/poly1305-x86_64.pl: fix mingw64 build
NOT BUG:Add the generate mechanism from unixmake to unix-Makefile.tmpl
NOT BUG:Don't check self signed certificate signature security
NOT BUG:Fix MacOS/X build warnings
NOT BUG:Commit 7823d792d0cad3b44ad5389a8d3381becefe7f44 added DEFINE_LHASH_OF to a C source file DEFINE_LHASH_OF() and DEFINE_STACK_OF() must be used only in header files to avoid clang warnings for unused static-inline functions
NOT BUG:Don't add filename comment
NOT BUG:Remove TLS heartbeat disable DTLS heartbeat
NOT BUG:To enable heartbeats for DTLS configure with enable-heartbeats Heartbeats for TLS have been completely removed
NOT BUG:This addresses RT 3647
NOT BUG:Move to REF_DEBUG for consistency
NOT BUG:Add utility macros REF_ASSERT_NOT and REF_PRINT_COUNT This is also RT 4181
NOT BUG:RT3495: Add a hash for faster dup detection
NOT BUG:Updated for 1.1 by Rich Salz
BUG:Fix GH 327
BUG:Valgrind complains about using unitialized memory So call OPENSSL_zalloc not malloc
NOT BUG:Make util/mkrc.pl location agnostic and adapt Makefile.shared
NOT BUG:With this Cygwin and Mingw builds stand a much better chance to be able to build outside of the source tree with the unified build
NOT BUG:Make shared library targets more consistent
BUG:On Windows POSIX layers two files are produced for a shared library there's {shlibname}.dll and there's the import library {libname}.dll.a
BUG:On some/most Unix platforms a {shlibname}.{sover}.so and a symlink {shlibname}.so are produced
NOT BUG:For each of them unix-Makefile.tmpl was entirely consistent on which to have as a target when building a shared library or which to use as dependency
NOT BUG:This change clears this up and makes it consistent we use the simplest form possible {lib}.dll.a on Windows POSIX layers and {shlibname}.so on Unix platforms No exception
NOT BUG:Fix engine key support in cms and req utilities
BUG:PR#4246 and PR#4266
NOT BUG:Test for and use AES CSP for RSA if present
NOT BUG:Some keys are attached to the full RSA CSP which doesn't support SHA2 algorithms: uses the AES CSP if present
NOT BUG:Add support for shared_rcflag useful for windres (Cygwin and Mingw)
NOT BUG:Modernise the mingw cflags and ldflags
NOT BUG:Unified build: Keep track of generated header files
NOT BUG:If someone runs a mixed unixmake / unified environment (the unified build tree would obviously be out of the source tree) the unified build will pick up on the unixmake crypto/buildinf.h because of assumptions made around this sort of declaration (found in crypto/build.info):
BUG:DEPENDS[cversion.o]=buildinf.h
NOT BUG:The assumption was that if such a header could be found in the source tree that was the one to depend on otherwise it would assume it should be in the build tree
NOT BUG:This change makes sure that sort of mix-up won't happen again
NOT BUG:Remove the "make depend" message
NOT BUG:It's not necessary for a pristine source and a developer that makes changes usually knows what to do
NOT BUG:Also there was this mechanism that would do a "make depend" automatically which hasn't been used for so many years Removed as well
BUG:Simplify ssl_cert_type() by taking advantage of X509_get0_pubkey
NOT BUG:GH620: second diff from rt-2275 adds error code
NOT BUG:clean up and apply patches from RT-2275
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Check malloc
NOT BUG:Noticed by Claus Assmann <ca+ssl-dev@esmtp.org>
NOT BUG:Missing header include
NOT BUG:Hide OPENSSL_INIT_SETTINGS
NOT BUG:Make OPENSSL_INIT_SETTINGS an opaque structure
NOT BUG:Add inclusion directory crypto/include for BN compilations
NOT BUG:Some files in crypto/bn depend on internal/bn_conf.h and so does test/bntest Therefore we add another inclusion directory
NOT BUG:The protocol variable has lost its use remove it
NOT BUG:Rework BIO_ADDRINFO_protocol() to return correct values
BUG:As noted already some platforms don't fill in ai_protocol as expected To circumvent that we have BIO_ADDRINFO_protocol() to compute a sensible answer in that case
NOT BUG:Fix errstr error code parsing
NOT BUG:Error codes are printed in hex and previous OpenSSL versions expected the error codes to be provided to errstr in hex In 1.1.0 for some reason it was expecting them to be decimal
NOT BUG:Make comment match reality
NOT BUG:use consistent error messages
NOT BUG:Print out bad content octets
NOT BUG:If asn1parse doesn't like a structure print out the content octets for diagnostic purposes
NOT BUG:After auto init check that the deprecated functions exist before using
NOT BUG:The functions that have been deprecated by the auto init changes are now guarded with deprecation checks so it's fairly easy to see if they can be used
NOT BUG:In test/dtlsv1listentest we simply remove all init and cleanup code as they are call automatically when needed
NOT BUG:Change the VMS perl pointer from SF file store to the project page
NOT BUG:After renaming init update errors
NOT BUG:BIO_PAIR_DEBUG did nothing; remove it
NOT BUG:Use the protocol we know rather than BIO_ADDRINFO_protocol(res)
NOT BUG:Because some platforms won't will in any value in ai_protocol there's no point using it if we already know what it should be
NOT BUG:Don't assert protocol equality
BUG:It seems that some platforms' getaddrinfo don't fill in the ai_protocol field properly On those the assertion 'protocol == BIO_ADDRINFO_protocol(res)' will fail Best to remove it
NOT BUG:Add CHACHA20 alias for ciphers
NOT BUG:Update ciphers documentation as well (based on -04 rev of ID)
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:RT: #4206 GH: #642
NOT BUG:Ensure allocation size fits into size_t
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #630
NOT BUG:typo
NOT BUG:Produce buildinf.h on Windows the same way as on Unix
NOT BUG:Because ENGINESDIR and OPENSSLDIR typically contains backslashes they need to be escaped just right
NOT BUG:Quote the CFLAG in Unixly Makefiles for buildinf.h
NOT BUG:Because the command line definitions of OPENSSLDIR and ENGINESDIR contain quotes we need a variant of CFLAG where backslashes and quotes are escaped when we produce buildinf.h
NOT BUG:Make sure to escape backslashes and single quotes for buildinf.h
NOT BUG:Make it possible to get ENGINESDIR info from OpenSSL_versions
NOT BUG:Have apps/openssl display the result along with OPENSSLDIR
NOT BUG:As part of this add ENGINESDIR in util/mk1mf.pl
NOT BUG:Add some documentation about init after deinit
NOT BUG:Attempting to init after deinit is an error Update the documentation accordingly
NOT BUG:Update CHANGES following init function renaming
NOT BUG:Attempt to log an error if init failed
NOT BUG:If init failed we'd like to set an error code to indicate that But if init failed then when the error system tries to load its strings its going to fail again We could get into an infinite loop Therefore we just set a single error the first time around After that no error is set
NOT BUG:The new init functions can now fail so shouldn't be void
NOT BUG:The new init functions can fail if the library has already been stopped We should be able to indicate failure with a 0 return value
NOT BUG:Variable was declared static when it shouldn't be
NOT BUG:The local variable tmp was declared static when it shouldn't be This is in the no-threads implementation and it was immediately initialised to something else on every invokation of the function so it doesn't break anything...but still shouldn't be there
NOT BUG:Improve recent option help string additions
NOT BUG:Make these more correct concise and less tautological
NOT BUG:Deprecate the -issuer_checks debugging option
NOT BUG:This was a developer debugging feature and was never a useful public interface
NOT BUG:Added all missing X509 error codes to the verify(1) manpage but many still need a description beyond the associated text string
NOT BUG:Sorted the errors in x509_txt.c by error number
NOT BUG:The guard macro to be defined didn't match the guard macro checked
NOT BUG:Update unified build after store removal
NOT BUG:Rename INIT funtions deprecate old ones
NOT BUG:Man there were a lot of renamings :)
NOT BUG:No dynamic-init fix; merge goof
NOT BUG:unified build system: add CHANGES & NEWS
NOT BUG:unified build scheme: rewrite INSTALL.VMS
NOT BUG:There is more to be added but this will at least tell people how to try
NOT BUG:clean away old VMS cruft
NOT BUG:The old building scripts get removed they are hopelessly gone in bit rot by now
NOT BUG:Also remove the old symbol hacks They were needed needed to shorten some names to 31 characters and to resolve other symbol clashes Because we now compile with /NAMES=(AS_IS,SHORTENED) this is no longer required
NOT BUG:unified build scheme: add a "unified" template for VMS descrip.mms
NOT BUG:As part of this change util/mkdef.pl to stop adding libraries to depend on in its output mkdef.pl should ONLY output a symbol vector
NOT BUG:Because symbol names can't be longer than 31 characters we use the compiler to shorten those that are longer down to 23 characters plus an 8 character CRC To make sure users of our header files will pick up on that automatically add the DEC C supported extra headers files __decc_include_prologue.h and __decc_include_epilogue.h
NOT BUG:Furthermore we add a config.com so VMS people can configure just as comfortably as any Unix folks thusly:
NOT BUG:@config
NOT BUG:unified build scheme: add instructions for travis to build with --unified
NOT BUG:unified build scheme: Try to nudge users to try the "unified" build
NOT BUG:This commit SHALL be reverted before final release
NOT BUG:unified build scheme: add the tweaks to build on Cygwin & Mingw
NOT BUG:Cygwin and Mingw name their libraries a bit differently from the rest of the POSIXly universe we need to adapt to that
NOT BUG:In Makefile.tmpl it means that some hunks will only be output conditionally
NOT BUG:This also means that shared_extension for the Cygwin and Mingw configurations in Configurations/10-main.conf are changing from .dll.a to .dll Makefile.shared does a fine job without having them specified and it's much easier to work with tucking an extra .a at the end of files in the installation recipes than any amount of name rewrites especially with the support of the SHARED_NAME in the top build.info
NOT BUG:unified build scheme: add a "unified" template for Unix Makefile
NOT BUG:This also adds all the raw sections needed for some files
NOT BUG:unified build scheme: give util/dofile.pl the possibility to output selectively
NOT BUG:Under certain conditions one might not want to output certain sections of a template file This adds the functions output_off() and output_on() reachable inside the templates And example usage in a Makefile template could be this:
NOT BUG:@ : {- output_off() if $config{no_shared}; "" -} .. lines dealing with shared libraries @ : {- output_on() -}
NOT BUG:Configure et al: move the installation directory logic to Makefiles
NOT BUG:The logic to figure out the combinations of --prefix and --openssldir has stayed in Configure so far with Unix paths as defaults
NOT BUG:However since we're making Configure increasingly platform agnostic these defaults need to change and adapt to the platform along with the logic to combine them
NOT BUG:The easiest to provide for this is to move the logic and the defaults away from Configure and into the build files
NOT BUG:This also means that the definition of the macros ENGINESDIR and OPENSSLDIR move away from include/openssl/opensslconf.h and into the build files
NOT BUG:Makefile.in is adapted accordingly
NOT BUG:Configure et al: treat C defines separately
NOT BUG:With some compilers C macros are defined differently on the command line than on Unix It could be that the flad to define them isn't -D it could also be that they need to be grouped together and not be mixed in with the other compiler flags (that's how it's done on VMS for example)
NOT BUG:On Unix family platform configurations we can continue to have macro definitions mixed in with the rest of the flags so the changes in Configurations/*.conf are kept to an absolute minimum
NOT BUG:Can't re-init after stop
BUG:Remoce DYANMIC once-init stuff After the library is stopped you can't restart it
NOT BUG:Remove store
NOT BUG:Rebased and merged by me with Ben's approval
NOT BUG:If we've not been inited don't deinit
NOT BUG:If you call an explicit deinit when we've not been inited then a seg fault can occur We should check that we've been inited before attempting to deinit
NOT BUG:ms/uplink-x86.pl: make it work
NOT BUG:chacha/asm/chacha-x86.pl: fix nasm compilation
NOT BUG:Configurations: engage x86[_64] ChaCha20 and Poly1305 modules
NOT BUG:poly1305/poly1305.c: work around -Wshadow warnings with POLY1305_ASM
NOT BUG:x86[_64] assembly pack: add ChaCha20 and Poly1305 modules
NOT BUG:VMS getnameinfo() seems to have a bug with returned service string
NOT BUG:It seems like it gives back gibberish If we asked for a numeric service it's easy to check for a digit in the first position and if there isn't any rewrite it using older methods
NOT BUG:Simplify the specification of include dirs in the build dir
NOT BUG:In build.info files make the include directory in the build directory absolute or Configure will think it should be added to the source directory top Configure will turn it into a relative path if possible
NOT BUG:Make the processing of build.info files more aware of absolute dirs
NOT BUG:There were cases where some input was absolute and concatenating it to the diretory to the source or build top could fail spectacularly Let's check the input first to see if it's absolute
NOT BUG:And while we're on the subject of checking if a file or dir spec is absolute using file_name_is_absolute() has its own quirks on VMS where a logical name is considered absolute under most circumstances This is perfectly correct from a VMS point of view but when parsing the build.info files we want single word file or directory names to only be checked syntactically A function isabsolute() that does the right thing is the solution
NOT BUG:Make sure to always include string.h so memset gets declared
NOT BUG:memset() is used by CRYPTO_secure_zalloc() which isn't hidden away behind IMPLEMENTED
NOT BUG:Don't run RC4 test with no-rc4
NOT BUG:Use NON_EMPTY_TRANSLATION_UNIT consistently
NOT BUG:This also closes RT 4123
NOT BUG:Make some global variables static
NOT BUG:Make some global variables that are only ever accessed from one file static
NOT BUG:NULL the thread_local_inits_st pointer after use
NOT BUG:After the final use of the thread_local_inits_st we should ensure it is set to NULL just in case OPENSSL_INIT_thread_stop gets called again and it tries to use garbage
NOT BUG:Stop library before checking for mem leaks
NOT BUG:With the new init framework resources aren't released until the process exits This means checking for mem leaks before that point finds a lot of things! We should explicitly close down the library if we're checking for mem leaks
NOT BUG:GH649: Fix: version32.rc was not created on Windows
NOT BUG:version32.rc was not created on Windows The if condition has been corrected
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Portability fix
NOT BUG:Configurations: engage s390x ChaCha20 and Poly1305 modules
NOT BUG:s390x assembly pack: add ChaCha20 and Poly1305 modules
NOT BUG:GH645: Fix typo: ctificates -> certificates
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:GH646: Update help for s_server command
NOT BUG:* added missing help option messages * ecdh_single option is removed as it is a no-op and not an option supported in earlier versions * ssl_ctx_security_debug() was invoked before ctx check for NULL * trusted_first option can be removed as it is always enabled in 1.1 But not removed the option require confirmation
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Updates for auto init/deinit review comments
NOT BUG:Fixes for the auto-init/deinit code based on review comments
NOT BUG:Add a CHANGES entry for auto-init and de-init
NOT BUG:Correct copyright date for internal header file
NOT BUG:The newly added internal async.h header file had last years date in it
NOT BUG:Update build.info files for auto-init/de-init
NOT BUG:Various Makefile.in files have changes for auto-init/de-init Make the equivalent changes in build.info
NOT BUG:Avoid a race condition in loading config settings
NOT BUG:A race condition can occur when sending config settings to OPENSSL_INIT_crypto_library_start()
NOT BUG:Provide documentation for auto-init/auto-deinit
NOT BUG:Provide some man pages for auto-init/deinit Also update the INSTALL documentation for information on the new Configure options implemented as part of this
NOT BUG:Add an OPENSSL_NO_AUTOERRINIT option
NOT BUG:This option disables automatic loading of the crypto/ssl error strings in order to keep statically linked executable file size down
NOT BUG:Provide a thread stop API
NOT BUG:Add the OPENSSL_INIT_thread_stop() function
NOT BUG:Clean up the tests for auto-init/de-init
NOT BUG:Remove the need to explicitly initialise/deinitialise for the tests
NOT BUG:Get the apps to use auto-init/de-init
NOT BUG:Clean up the apps so that we make use of the new auto-init/de-init feature
NOT BUG:Auto init/de-init libssl
NOT BUG:Building on the pervious commit to auto initialise and de-initialise libssl
NOT BUG:Auto init/deinit libcrypto
NOT BUG:This builds on the previous commit to auto initialise/deinitialise libcrypto
NOT BUG:Provide framework for auto initialise/deinitialise of the library
NOT BUG:This commit provides the basis and core code for an auto initialisation and deinitialisation framework for libcrypto and libssl The intention is to remove the need (in many circumstances) to call explicit initialise and deinitialise functions Explicit initialisation will still be an option and if non-default initialisation is needed then it will be required Similarly for de-initialisation (although this will be a lot easier since it will bring all de-initialisation into a single function)
NOT BUG:Fix 90-test_networking.t
NOT BUG:The previous fix wasn't complete it was missing a 'use OpenSSL::Test::Utils'
NOT BUG:Use rel2abs() on VMS rather than realpath()
NOT BUG:It seems realpath() is quite buggy on VMS or will at least give quite surprising results On the other hand realpath() is the better on Unix to clean out clutter like foo/../bar on Unix
NOT BUG:So we make out own function to get the absolute directory for a given input and use rel2abs() or realpath() depending on the platform Configure runs on
NOT BUG:Issue reported by Steven M Schweda <sms@antinode.info>
NOT BUG:Update 90-test-networking.t to do the same checks as other TLSProxy tests
NOT BUG:unified build scheme: adjust test framework for out of source build tree
NOT BUG:To be able to run tests when we've built in a directory other than the source tree the testing framework needs a few adjustments
NOT BUG:test/testlib/OpenSSL/Test.pm needs to know where it can find shlib_wrap.sh and a number of other tests need to be told a different place to find engines than what they may be able to figure out on their own Relying to $TOP is not enough $SRCTOP and $BLDTOP can be used as an alternative
NOT BUG:As part of this change top_file and top_dir are removed and srctop_file bldtop_file srctop_dir and bldtop_dir take their place
NOT BUG:unified build scheme: adjust some scripts
NOT BUG:util/mkdef.pl and Makefile.shared needs to know about the source and the build directories
NOT BUG:Additionally Makefile.shared needs to know how to build shared libraries in a directory other than the current one
NOT BUG:unified build scheme: add a design document
NOT BUG:This documents describes the three steps from build.info files via the %unified_info database to the build-file templates along with some examples showing how the data gets processed along the way
NOT BUG:unified build scheme: add and document the "unified" driving engine
NOT BUG:common.tmpl will be used together with the template build file and is the engine that connects the information gathered from all the build.info files with making the build file itself
NOT BUG:This file expects there to be a template section in the build file template that defines a number perl functions designed to return strings with appropriate lines for the build system at hand The exact functions what they can expect as arguments and what output they're expected to produce is documented in Configurations/README
NOT BUG:Small fixes
NOT BUG:- One typo fixed in crypto/bio/b_addr.c - Add a comment in doc/crypto/BIO_parse_hostserv.pod to explain the blank lines with one lonely space each
NOT BUG:add missing file p12_lcl.h
BUG:Suppress DANE TLSA reflection when verification fails
NOT BUG:As documented both SSL_get0_dane_authority() and SSL_get0_dane_tlsa() are expected to return a negative match depth and nothing else when verification fails However this only happened when verification failed during chain construction Errors in verification of the constructed chain did not have the intended effect on these functions
NOT BUG:This commit updates the functions to check for verify_result == X509_V_OK and no longer erases any accumulated match information when chain construction fails Sophisticated developers can with care use SSL_set_verify_result(ssl X509_V_OK) to "peek" at TLSA info even when verification fail They must of course first check and save the real error and restore the original error as quickly as possible Hiding by default seems to be the safer interface
NOT BUG:Introduced X509_V_ERR_DANE_NO_MATCH code to signal failure to find matching TLSA records Previously reported via X509_V_ERR_CERT_UNTRUSTED
NOT BUG:This also changes the "-brief" output from s_client to include verification results and TLSA match information
NOT BUG:Mentioned session resumption in code example in SSL_CTX_dane_enable(3) Also mentioned that depths returned are relative to the verified chain which is now available via SSL_get0_verified_chain(3)
BUG:Added a few more test-cases to danetest that exercise the new code
NOT BUG:Resolved thread safety issue in use of static buffer in X509_verify_cert_error_string()
NOT BUG:Fixed long-stating issue in apps/s_cb.c which always sets verify_error to either X509_V_OK or "chain to long" code elsewhere (e.g s_time.c) seems to expect the actual error [ The new chain construction code is expected to correctly generate "chain too long" errors so at some point we need to drop the work-arounds once SSL_set_verify_depth() is also fixed to propagate the depth to X509_STORE_CTX reliably ]
NOT BUG:Following the PKCS#12 update update crypto/pkcs12/build.info as well
NOT BUG:Remove ancient compatibility defines
NOT BUG:make update
NOT BUG:fix various formatting issues
NOT BUG:Only use compatibility macros for < 1.1 API
NOT BUG:rename old functions names in libeay.num
NOT BUG:use new function names
NOT BUG:Add p12_sbag.c to Makefile.in
NOT BUG:Reorganise functions
NOT BUG:Move all PKCS12_SAFEBAG functions into new file p12_sbag.c
NOT BUG:Move MAC functions into p12_mutl.c
NOT BUG:pkcs12.h header reorganisation
NOT BUG:Use new names
NOT BUG:Rename PKCS12 function
NOT BUG:Rename ancient PKCS12 functions to use more logical names Include defines from old to new name
NOT BUG:Use accessors in pkcs12 app
NOT BUG:pkcs12 accessors
NOT BUG:more PKCS12 opacity
NOT BUG:New PKCS12 accessors change macros to functions
NOT BUG:Make PKCS12 structures opaque
NOT BUG:Deprecate undocumented SSL_cache_hit()
NOT BUG:Deprecate undocumented SSL_cache_hit() Make SSL_session_reused() into a real function
NOT BUG:GH641: Don't care openssl_zmalloc
NOT BUG:Don't cast malloc-family return values Also found some places where (a) blank line was missing; and (b) the *wrong* return value was checked
NOT BUG:Use File::Path::rmtree rather than File::Path::remove_tree
NOT BUG:Just like File::Path::make_path File::Path::remove_tree didn't show up before File::Path 2.06 / perl v5.10.1 so we prefer the legacy function here as well
NOT BUG:Use File::Path::mkpath rather than File::Path::make_path
NOT BUG:File::Path::make_path didn't show up before File::Path 2.06 / perl v5.10.1 Because we're trying to stay compatible with perl v5.10.0 and up it's better to use the legacy interface
NOT BUG:Fix engine key support in utilities
NOT BUG:bio/b_sock.c: cleanup obsolete stuff
NOT BUG:bn/Makefile.in: remove obsolete rules
NOT BUG:Configurations/00-base-templates.conf: harmonize extensions
NOT BUG:avoid crash if hostserv is with host part only
BUG:(if priority is set to host)
NOT BUG:Signed-off-by: Richard Levitte <levitte@openssl.org>
BUG:GH322 revisited: remove unused function
BUG:Make TESTS= work with "nmake -f ms/ntdll.mak tests"
NOT BUG:This works on Linux with Make already and allows running only specified tests
NOT BUG:dtlsv1listentest includes e_os.h reflect that in include dirs
NOT BUG:Handle SSL_shutdown while in init more appropriately #2
NOT BUG:Previous commit 7bb196a71 attempted to "fix" a problem with the way SSL_shutdown() behaved whilst in mid-handshake The original behaviour had SSL_shutdown() return immediately having taken no action if called mid- handshake with a return value of 1 (meaning everything was shutdown successfully) In fact the shutdown has not been successful
NOT BUG:Commit 7bb196a71 changed that to send a close_notify anyway and then return This seems to be causing some problems for some applications so perhaps a better (much simpler) approach is revert to the previous behaviour (no attempt at a shutdown) but return -1 (meaning the shutdown was not successful)
NOT BUG:This also fixes a bug where SSL_shutdown always returns 0 when shutdown *very* early in the handshake (i.e we are still using SSLv23_method)
NOT BUG:more doc fixes
NOT BUG:dgst: using digest instead of specific digest commands the digest list specified in man dgst may be inaccurate hence using digest and referring to the list in digest-commands
NOT BUG:'sha' as a digest name is no longer supported
NOT BUG:dgst,pkeyutl cmds help cleanup - In dgst pkeyutl cmds some options help was missing - fixed a minor typo in openssl.pod that fixes make install - digest-commands was showing ‘sha’ which is not a supported digest anymore
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Clarify resumed sessions and NULL return
NOT BUG:Fix memory leak in dtlsv1listentest
BUG:MR: #1879
NOT BUG:Allocate bio_err before turning on memleak checks
NOT BUG:Stack documentation
NOT BUG:commands help cleanup
NOT BUG:opt_valtype 0 is same as '-' while printing cmd usage asn1parse/ca/ciphers help cleanup
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:if no comparison function set make sk_sort no op
NOT BUG:make update
NOT BUG:Add documenation for X509_chain_up_ref()
NOT BUG:Add SSL_get0_verified_chain() to return verified chain of peer
NOT BUG:Display the linking commands that are performed
NOT BUG:Enhance and clear the support of linker flags
NOT BUG:Some time ago we had a ex_libs configuration setting that could be divided into lflags and ex_libs These got divided in two settings lflags and ex_libs and the former was interpreted to be general linking flags
NOT BUG:Unfortunately that conclusion wasn't entirely accurate Most of those linking were meant to end up in a very precise position on the linking command line just before the spec of libraries the linking depends on
NOT BUG:Back to the drawing board we're diving things further now having lflags which are linking flags that aren't depending on command line position plib_lflags which are linking flags that should show up just before the spec of libraries to depend on and finally ex_libs which is the spec of extra libraries to depend on
NOT BUG:Also documentation is changed in Configurations/README This was previously forgotten
NOT BUG:GH587: Extend ECDH tests to more curves Add more ECDH KATs
NOT BUG:squelch sign-compare warning
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Add BIO_ADDR_clear to libeay.num
BUG:MR: #1874
NOT BUG:GH634: fix potential memory leak
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:RT4194: Restore old engine parameter parsing
NOT BUG:Allow initial engine names as first parameters before flags Also add engine param to help summary
BUG:Wrote manpage
NOT BUG:Add build.info lines for dtlsv1listentest
NOT BUG:Don't include sys/socket.h
NOT BUG:It's not available on all OSs e_os.h already does the right thing
BUG:MR: #1870
NOT BUG:Add missing static declarations in dtlsv1listentest.c
NOT BUG:Clang rightly does not like extern symbols that are not declared in any header file as typically these are not intended for global visibility and are exposed in error This was indeed the case with various file-scope objects in dtlsv1listentest.c
NOT BUG:Update DTLSv1_listen documentation
BUG:Make it clear that if we are unable to get hold of the peer address then *peer is cleared and the family set to AF_UNSPEC
NOT BUG:Add tests for DTLSv1_listen
NOT BUG:Adds a set of tests for the newly rewritten DTLSv1_listen function The test pokes various packets at the function and then checks the return value and the data written out to ensure it is what we would have expected
BUG:Provide partial support for fragmented DTLS ClientHellos
NOT BUG:The recently rewriten DTLSv1_listen code does not support fragmented ClientHello messages because fragment reassembly requires server state which is against the whole point of DTLSv1_listen This change adds some partial support for fragmented ClientHellos It requires that the cookie must be within the initial fragment That way any non-initial ClientHello fragments can be dropped and fragment reassembly is not required
NOT BUG:Add a BIO_ADDR_clear function
NOT BUG:Adds a new function BIO_ADDR_clear to reset a BIO_ADDR back to an unitialised state and to set the family to AF_UNSPEC
NOT BUG:GH601: Various spelling fixes
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:RT4070: Improve struct/union regexp
NOT BUG:Make DTLSv1_listen a first class function and change its type
NOT BUG:The DTLSv1_listen function exposed details of the underlying BIO abstraction and did not properly allow for IPv6 This commit changes the "peer" argument to be a BIO_ADDR and makes it a first class function (rather than a ctrl) to ensure proper type checking
BUG:RT4292: Remove ===== line
NOT BUG:Also remove two mistakenly checked-in files
NOT BUG:RT1596: Add clarifying doc
NOT BUG:GH628: Add -help to all apps docs
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:GH628: Add -help to all apps docs
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:Ensure correct chain depth for policy checks with DANE bare key TA
NOT BUG:Long overdue cleanup of X509 policy tree verification
NOT BUG:Replace all magic numbers with #defined constants except in boolean functions that return 0 for failure and 1 for success Avoid a couple memory leaks in error recovery code paths Code style improvements
NOT BUG:Various RT doc fixes
NOT BUG:RT1556: doc/crypto/threads.pod RT2024: Missing pages mentioned in crypto.pod RT2890: Wrong size in ERR_string_error description RT3461: Better description of PEM Encryption (Jeffrey Walton <noloader@gmail.com>) Also fix up formatting and removed some code examples that encourage unsafe patterns like unencrypted private keys (Rich Salz) RT4240: Document some speed flags (Tomas Mraz <tmraz@redhat.com>) RT4260: Fix return value doc for X509_REQ_sign and X509_sign (Laetitia Baudoin <lbaudoin@google.com>)
NOT BUG:enable leak checking for danetest
NOT BUG:Fix return code in CRYPTO_mem_leaks_fp()
NOT BUG:If memory debugging enabled return error on leaks
NOT BUG:Restore -no_comp switch for backwards compatible behaviour
NOT BUG:VMS lacks socklen_t give it one
NOT BUG:Fortunately we only use socklen_t internally
NOT BUG:Initialize variable
NOT BUG:Don't export local symbols on Solaris
NOT BUG:Following on from earlier commits to prevent local symbols from being exported in the shared libraries on Linux this makes the equivalent changes for Solaris
NOT BUG:make update
NOT BUG:Add EC_KEY_priv2buf()
NOT BUG:Add new function EC_KEY_priv2buf() to allocated and encode private key octet in one call Update and simplify ASN.1 and print routines
NOT BUG:Allocate ASN1_bn_print buffer internally
NOT BUG:Don't require an application to work out the appropriate buffer size for ASN1_bn_print() which is unsafe Ignore the supplied buffer and allocate it internally instead
NOT BUG:Use BN_bn2binpad
NOT BUG:use enum type for do_EC_KEY_print
NOT BUG:update EC ASN1 and print routines
NOT BUG:Update EC ASN.1 and print routines to use EC_KEY_oct2priv and EC_KEY_priv2oct
NOT BUG:Add EC_KEY_oct2priv and EC_KEY_priv2oct
NOT BUG:New functions EC_KEY_oct2priv and EC_KEY_priv2oct These are private key equivalents of EC_POINT_oct2point and EC_POINT_point2oct which convert between the private key octet format and EC_KEY
NOT BUG:Add ASN1_buf_print to print a buffer in ASN1_bn_print format
NOT BUG:Don't use RDRAND if told not to
NOT BUG:Ensure we respect OPENSSL_NO_RDRAND
NOT BUG:Initialise with -1 rather than 1
BUG:A small typo crept in
BUG:Add new DTLS-SRTP protection profiles from RFC 7714
NOT BUG:Add checks for IPv4 and IPv6 in OpenSSL::Test::Utils and use them
NOT BUG:This uilds on the same way of checking for availability as we do in TLSProxy We use all IP factories we know of starting with those who know both IPv6 and IPv4 and ending with the one that only knows IPv4 and cache their possible success as foundation for checking the available of each IP domain
BUG:80-test_ssl.t has bigger chances of working on platforms that do not run both IP domains
NOT BUG:Update crypto/bio/build.info
NOT BUG:Fix pkeyutl inability to directly access keys on hardware tokens
NOT BUG:Change the transfer perl module so the real module gets properly registered
NOT BUG:This is an important move if scripts want to refer to the loaded module without having perl think it needs to be loaded (again)
NOT BUG:Add option to disable async
NOT BUG:Add no-async option to Configure that forces ASYNC_NULL Related to RT1979 An embedded system or replacement C library (e.g musl or uClibc) may not support the *context APIs that are needed for async operation
NOT BUG:Compiles with musl Ran unit tests async tests skipped as expected
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:Make sure getaddrinfo and getnameinfo works as intended on Windows
BUG:Both getaddrinfo() and getnameinfo() have to be preceeded with a call to BIO_sock_init()
NOT BUG:Also make sure to give gai_strerror() the actual error code
NOT BUG:If egd is disabled by default it should be possible to enable
NOT BUG:Add ec -check option
NOT BUG:Fix potential buffer overrun
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:Use WSAGetLastError() on windows
BUG:Windows doesn't have h_error or hstrerror()
BUG:MR: #1848
NOT BUG:Restore xmm7 from the correct address on win64
BUG:RT: #4288 MR: #1831
NOT BUG:update OID tables
NOT BUG:Add Curve OIDs from draft-josefsson-pkix-newcurves
NOT BUG:RT2887: Add more packet and handshake types
NOT BUG:Fix BN_gcd errors for some curves
NOT BUG:Those even order that do not play nicely with Montgomery arithmetic
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:RT3095: allow NULL key for single-shot HMAC
BUG:In HMAC_Init_ex NULL key signals reuse but in single-shot HMAC we can allow it to signal an empty key for convenience
NOT BUG:bio_err.c: remove a reappeared filename comment
NOT BUG:Make fallback addresses static so that we can initialize it
BUG:MR: #1841
NOT BUG:Only use TLS1.2 when it's available
BUG:Have 70-test_clienthello.t be selective on when it can be run
NOT BUG:The test program clienthello checks TLS extensions so there's no point running it when no TLS protocol is available
NOT BUG:Have OpenSSL::Test::Utils::available_protocols load configdata as well
NOT BUG:Otherwise it could typically always return an empty list since it's often called first if at all
NOT BUG:RT2752: Add some EKU OID's
NOT BUG:And some others found in the Internet
BUG:Handle localhost being either 127.0.0.1 or ::1
NOT BUG:When connecting to "localhost" the Proxy's choice of client address family may not match the server's choice address family Without MultiHomed => 1 the proxy may try the wrong address family first and give up without trying the other
NOT BUG:Use matching quotes
NOT BUG:Make the mk1mf 'mv' command variable
BUG:Tweak opensslconf.h.in for style
BUG:Use BIO_snprintf() rather than snprintf()
NOT BUG:Some platforms do not have the latter
NOT BUG:Refactoring BIO: small test correction
NOT BUG:GH614: Use memcpy()/strdup() when possible
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Refactoring BIO: Add a few lines in CHANGES & NEWS
NOT BUG:Refactoring BIO: add a simple networking test of s_client and s_server
NOT BUG:This makes use of TLSProxy which was expanded to use IO::Socket::IP (which is a core perl module) or IO::Socket::INET6 (which is said to be more popular) instead IO::Socket::INET if one of them is installed
NOT BUG:Refactoring BIO: Adapt s_client and s_server
NOT BUG:s_socket.c gets brutally cleaned out and now consists of only two functions one for client and the other for server They both handle AF_INET AF_INET6 and additionally AF_UNIX where supported The rest is just easy adaptation
NOT BUG:Both s_client and s_server get the new flags -4 and -6 to force the use of IPv4 or IPv6 only
NOT BUG:Also the default host "localhost" in s_client is removed It's not certain that this host is set up for both IPv4 and IPv6 For example Debian has "ip6-localhost" as the default hostname for [::1] The better way is to default |host| to NULL and rely on BIO_lookup() to return a BIO_ADDRINFO with the appropriate loopback address for IPv4 or IPv6 as indicated by the |family| parameter
NOT BUG:Refactoring BIO: Adapt BIO_s_datagram and all that depends on it
NOT BUG:The control commands that previously took a struct sockaddr * have been changed to take a BIO_ADDR * instead
NOT BUG:Refactoring BIO: add a test using test/ssltest
NOT BUG:This adds a couple of simple tests to see that SSL traffic using the reimplemented BIO_s_accept() and BIO_s_connect() works as expected both on IPv4 and on IPv6
NOT BUG:make update
NOT BUG:Refactoring BIO: adapt BIO_s_connect and BIO_s_accept
NOT BUG:make update
NOT BUG:Refactoring BIO: reimplement old socket handling functions with new ones
NOT BUG:make update
NOT BUG:Temporary pragma to have GCC quiet down about deprecated functions
NOT BUG:Future commits will change our use to newer functions and the pragmas will go away at that time
NOT BUG:Refactoring BIO: new socket-handling functions deprecate older ones
NOT BUG:Added functions:
BUG:BIO_socket BIO_connect BIO_listen BIO_accept_ex BIO_closesocket BIO_sock_info
NOT BUG:These get deprecated:
BUG:BIO_gethostbyname BIO_get_port BIO_get_host_ip BIO_get_accept_socket BIO_accept
NOT BUG:Refactoring BIO: add error macros & text and make update
NOT BUG:Refactoring BIO: Small adjustments
NOT BUG:Because of the way bio_lcl.h is organised we must not include internal/cryptlib.h before it As a matter of fact bio_lcl.h includes internal/cryptlib.h on its own
NOT BUG:Refactoring BIO: add wrappers around sockaddr et al
NOT BUG:Because different platforms have different levels of support for IPv6 different kinds of sockaddr variants and some have getaddrinfo et al while others don't we could end up with a mess if ifdefs duplicate code and other maintainance nightmares
BUG:Instead we're introducing wrappers around the common form for socket communication: BIO_ADDR closely related to struct sockaddr and some of its variants BIO_ADDRINFO closely related to struct addrinfo
NOT BUG:With that comes support routines both convenient creators and accessors plus a few utility functions:
NOT BUG:BIO_parse_hostserv takes a string of the form host:service and splits it into host and service It checks for * in both parts and converts any [ipv6-address] syntax to ust the IPv6 address
NOT BUG:BIO_lookup looks up information on a host
NOT BUG:All routines handle IPv4 (AF_INET) and IPv6 (AF_INET6) addresses and there is support for local sockets (AF_UNIX) as well
BUG:RT4148
NOT BUG:Accept leading 0-byte in PKCS1 type 1 padding Internally the byte is stripped by BN_bn2bin but external callers may have other expectations
NOT BUG:[Configure] Make --with-zlib-* work with configdata.pm
BUG:RT3234: disable compression
NOT BUG:CRIME protection: disable compression by default even if OpenSSL is compiled with zlib enabled Applications can still enable compression by calling SSL_CTX_clear_options(ctx SSL_OP_NO_COMPRESSION) or by using the SSL_CONF library to configure compression SSL_CONF continues to work as before:
NOT BUG:SSL_CONF_cmd(ctx "Options" "Compression") enables compression
NOT BUG:SSL_CONF_cmd(ctx "Options" "-Compression") disables compression (now no-op by default)
NOT BUG:The command-line switch has changed from -no_comp to -comp
NOT BUG:Fix pkeyutl/rsautl empty encrypt-input/decrypt-output handling
NOT BUG:Also fix option processing in pkeyutl to allow use of (formerly) "out-of-order" switches that were needless implementation limitations
NOT BUG:Handle documented "ENGINE" form with -keyform and -peerform
NOT BUG:Better handling of OPENSSL_NO_ENGINE and OPENSSL_NO_RSA
NOT BUG:RT2018
NOT BUG:fix code indentation issue
NOT BUG:.. related to engine_ref_debug macro
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
BUG:RT2353: Add ipsec IKE OID
BUG:Use a simpler method to build a glob than splitpath and catpath
NOT BUG:It turns out that the combination splitpath() could return an empty string for the directory part This doesn't play well with catdir()
NOT BUG:make update
NOT BUG:New BN functions
NOT BUG:Add new function BN_bn2binpad() which checks the length of the output buffer and pads the result with zeroes if necessary
NOT BUG:New functions BN_bn2lebinpad() and BN_lebin2bn() which use little endian format
NOT BUG:GH608: Ensure 64-bit shift no matter sizeof(long)
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:RT3854 Update docs
NOT BUG:Remove ancient unused configuration file in crypto/conf
NOT BUG:Style; add "!= NULL"
NOT BUG:GH554: Improve pkeyutl doc
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:constify PACKET
NOT BUG:PACKET contents should be read-only To achieve this also - constify two user callbacks - constify BUF_reverse
NOT BUG:update DSA docs
NOT BUG:add option to exclude public key from EC keys
NOT BUG:Fix memory leak and print out keygen errors
NOT BUG:Better check for gcc/clang
NOT BUG:Iteratively improved with Richard and Andy
BUG:Comment "secure memcmp" implementation
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Use PKCS#8 format EC key so test is skipped with no-ec
NOT BUG:unified build scheme: add a personal configuration to test it
NOT BUG:Nothing else will run the unified scheme for now
NOT BUG:unified build scheme: add build.info files
NOT BUG:Now that we have the foundation for the "unified" build scheme in place we add build.info files They have been generated from the Makefiles in the same directories Things that are platform specific will appear in later commits
NOT BUG:unified build scheme: a first introduction
NOT BUG:The "unified" build scheme revolves around small information files build.info which each describe their own bit of everything that needs to be built using a mini-language described in Configurations/README
NOT BUG:The information in build.info file contain references to source files and final result Object files are not mentioned at all they are simply from source files Because of this all the *_obj items in Configurations/*.conf are renamed to *_asm_src and the files listed in the values are change from object files to their corresponding source files For the sake of the other build schemes Configure generates corresponding *_obj entries in %target
NOT BUG:Furthermore the "unified" build scheme supports having a build directory tree separate from the source directry tree
NOT BUG:All paths in a build.info file is assumed to be relative to its location either within the source tree or within the build tree
NOT BUG:Add tests for non-ca trusted roots and intermediates
NOT BUG:Compat self-signed trust with reject-only aux data
NOT BUG:When auxiliary data contains only reject entries continue to trust self-signed objects just as when no auxiliary data is present
NOT BUG:This makes it possible to reject specific uses without changing what's accepted (and thus overring the underlying EKU)
NOT BUG:Added new supported certs and doubled test count from 38 to 76
NOT BUG:Check chain extensions also for trusted certificates
NOT BUG:This includes basic constraints key usages issuer EKUs and auxiliary trust OIDs (given a trust suitably related to the intended purpose)
NOT BUG:Added tests and updated documentation
NOT BUG:Zero newly allocated points
NOT BUG:Remove redundant code
BUG:d2i_ECPrivateKey always caculates the public key so there is no need to caculate it again in eckey_priv_decode()
NOT BUG:Add EC_GROUP_order_bits EC_GROUP_get0_order and EC_GROUP_get0_cofactor
NOT BUG:New functions to return internal pointer for order and cofactor This avoids the need to allocate a new BIGNUM which to copy the value to Simplify code to use new functions
NOT BUG:Engage poly1305-sparcv9 module
NOT BUG:Add poly1305/asm/poly1305-sparcv9.pl
NOT BUG:Configure: restore original logic for -DWHIRLPOOL_ASM
NOT BUG:RT4129: BUF_new_mem_buf should take const void *
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Remove the extra checks for Intel's C compiler
NOT BUG:When the target is {something}-icc we're doing some extra checks of the icc compiler However all such targets were cleaned away in March 2015 so this Configure section is dead code
NOT BUG:RT3755: Remove duplicate #include
NOT BUG:Don't go into dotted directories when copying Makefile.in to Makefile
NOT BUG:GH102: Extra volatile avoids GCC bug
NOT BUG:Remove extra level of indirection
NOT BUG:Remove OPENSSL_IMPORT as its only purpose is to define OPENSSL_EXTERN
NOT BUG:Move more BN internals to bn_lcl.h
NOT BUG:There was an unused macro in ssl_locl.h that used an internal type so I removed it Move bio_st from bio.h to ossl_type.h
NOT BUG:GH102: Add volatile to CRYPTO_memcmp
NOT BUG:Can't hurt and seems to prevent problems from some over-aggressive (LTO?) compilers
NOT BUG:When checking if there's a VMS directory spec don't forget the possible device
NOT BUG:Fix test/recipes/25-test_verify.t
NOT BUG:top_dir() are used to create directory names top_file() should be used for files In a Unixly environment that doesn't matter but..
NOT BUG:handle "Ctrl" in separate function
NOT BUG:Add test data for ECDH
NOT BUG:Add support for EVP_PKEY_derive in evp_test
NOT BUG:fix warning
NOT BUG:Add function to return internal enoding of X509_NAME
BUG:PR#4280
NOT BUG:Fix opt_imax() call
NOT BUG:Not all architectures have a time_t defined the same way To make sure we get the same result we need to cast &checkoffset to (intmax_t *) and make sure that intmax_t is defined somehow
NOT BUG:To make really sure we don't pass a variable with the wrong size down to opt_imax() we use a temporary intmax_t
NOT BUG:Configure: Clarify the handling of $thread_cflags
NOT BUG:Make opt_imax visible in all apps
NOT BUG:Missed rc2_int from before
NOT BUG:Also remove $Makefile variable :)
NOT BUG:Fix invalid policy detection
NOT BUG:As a side-effect of opaque x509 ex_flags were looked up too early before additional policy cache updates
BUG:Templatize util/domd
NOT BUG:Better type for x509 -checkend argument
NOT BUG:This is a time_t and can be zero or negative So use 'M' (maximal signed int) not 'p' (positive int)
BUG:Complete the lflags -> lflags/ex_libs transition
BUG:Some last lflags to convert to ex_libs or a combo of lflags and ex_libs
NOT BUG:Configure et al: split up the lflags configuration item into two
NOT BUG:The lflags configuration had a weird syntax with a % as separator If it was present whatever came before ended up as PEX_LIBS in Makefile (usually this is LDFLAGS) while whatever came after ended up as EX_LIBS
BUG:This change splits that item into lflags and ex_libs making their use more explicit
NOT BUG:Also PEX_LIBS in all the Makefiles are renamed to LDFLAGS
NOT BUG:Make use of add() and add_before() in Configurations/
NOT BUG:A few more sub-joins could be replaced with calls to add() and add_before()
NOT BUG:Revert "Don't replace cflags with thread_cflags only append the latter"
NOT BUG:This reverts commit a450326ee040c6cbb262debdb1ed731e6700e1e0
NOT BUG:Merge error wrong domd submitted
NOT BUG:Don't replace cflags with thread_cflags only append the latter
NOT BUG:Remove clean-depend
NOT BUG:Remove depend hacks from demos/engines Remove clean-depend; just call makedepend (or $CC -M) and use that
NOT BUG:Make it possible to check for explicit auxiliary trust
NOT BUG:By default X509_check_trust() trusts self-signed certificates from the trust store that have no explicit local trust/reject oids encapsulated as a "TRUSTED CERTIFICATE" object (See the -addtrust and -trustout options of x509(1))
NOT BUG:This commit adds a flag that makes it possible to distinguish between that implicit trust and explicit auxiliary settings
NOT BUG:With flags |= X509_TRUST_NO_SS_COMPAT a certificate is only trusted via explicit trust settings
BUG:Always DPURIFY
BUG:The use of the uninitialized buffer in the RNG has no real security benefits and is only a nuisance when using memory sanitizers
NOT BUG:Remove x86_gcc_des,x86_gcc_opts
NOT BUG:This is a followin from !1738 we no longer need those variables
NOT BUG:Add have_precompute_mult tests
NOT BUG:Add tests for have_precompute_mult for the optimised curves (nistp224 nistp256 and nistp521) if present
NOT BUG:Fix bug in nistp224/256/521 where have_precompute_mult always returns 0
NOT BUG:During precomputation if the group given is well known then we memcpy a well known precomputation However we go the wrong label in the code and don't store the data properly Consequently if we call have_precompute_mult the data isn't there and we return 0
BUG:RT#3600
NOT BUG:Add missing return value checks
NOT BUG:The function DH_check_pub_key() was missing some return value checks in some calls to BN functions
BUG:RT#4278
NOT BUG:Correct value of DH_CHECK_PUBKEY_INVALID
NOT BUG:A new return value for DH_check_pub_key was recently added: DH_CHECK_PUBKEY_INVALID As this is a flag which can be ORed with other return values it should have been set to the value 4 not 3
BUG:RT#4278
NOT BUG:Implement Async SSL_shutdown
NOT BUG:This extends the existing async functionality to SSL_shutdown() i.e SSL_shutdown() can now casuse an SSL_ERROR_WANT_ASYNC error to be returned from SSL_get_error() if async mode has been enabled
NOT BUG:Keep RC5 bit shifts in [0..31]
NOT BUG:Use callback for DSAPublicKey
NOT BUG:PR#4277
NOT BUG:Remove extraneous output from util/mk scripts
BUG:Remove outdated tests
NOT BUG:These tests are not built and only usable as hand-tests so not worth moving into our test framework This closes https://github.com/openssl/openssl/pull/561 and RT 4252
NOT BUG:Add more components to build
NOT BUG:Add enable-crypto-mdebug enable-rc5 enable-md2 to any target that was --strict-warnings
NOT BUG:Missed part of b4f35e
NOT BUG:Correct number of arguments in BIO_get_conn_int_port macro
NOT BUG:CHANGES and NEWS updates for release
NOT BUG:Add details about the latest issues fixed in the forthcoming release
BUG:Add a test for small subgroup attacks on DH/DHE
NOT BUG:Following on from the previous commit add a test to ensure that DH_compute_key correctly fails if passed a bad y such that:
NOT BUG:y^q (mod p) != 1
BUG:Prevent small subgroup attacks on DH/DHE
NOT BUG:Historically OpenSSL only ever generated DH parameters based on "safe" primes More recently (in version 1.0.2) support was provided for generating X9.42 style parameter files such as those required for RFC 5114 support The primes used in such files may not be "safe" Where an application is using DH configured with parameters based on primes that are not "safe" then an attacker could use this fact to find a peer's private DH exponent This attack requires that the attacker complete multiple handshakes in which the peer uses the same DH exponent
NOT BUG:A simple mitigation is to ensure that y^q (mod p) == 1
BUG:CVE-2016-0701
BUG:Issue reported by Antonio Sanso
NOT BUG:Fix typo in md2.h
BUG:Restore NUMPRIMES as a numeric literal
NOT BUG:This fixes clang compilation problem with size_t NUMPRIMES and int loop counters
NOT BUG:Add CRYPTO_secure_zalloc
NOT BUG:Also turn B<foo> into foo() in the pod page
NOT BUG:Comment side-effect only calls of X509_check_purpose
NOT BUG:Remove EIGHT_BIT and SIXTEEN_BIT
NOT BUG:Also cleaned up bn_prime.pl to current coding style
NOT BUG:Remove outdated legacy crypto options
NOT BUG:Many options for supporting optimizations for legacy crypto on legacy platforms have been removed This simplifies the source code and does not really penalize anyone DES_PTR (always on) DES_RISC1 DES_RISC2 (always off) DES_INT (always 'unsigned int') DES_UNROLL (always on) BF_PTR (always on) BF_PTR2 (removed) MD2_CHAR MD2_LONG (always 'unsigned char') IDEA_SHORT IDEA_LONG (always 'unsigned int') RC2_SHORT RC2_LONG (always 'unsigned int') RC4_LONG (only int and char (for assembler) are supported) RC4_CHUNK (always long) RC_CHUNK_LL (removed) RC4_INDEX (always on) And also make D_ENCRYPT macro more clear (@appro)
NOT BUG:This is done in consultation with Andy
NOT BUG:Fix check of what makedepprog should be
NOT BUG:A mistake was made and the setting of this config variable got reverted to an older behavior This restores the latest
NOT BUG:Test all built-in curves and let the library choose the EC_METHOD
NOT BUG:Complete the removal of /* foo.c */ comments
NOT BUG:Some files that are automatically generated still had those comments added by the generating scripts
NOT BUG:Skip all explicitely if the number of tests is 0
NOT BUG:It seems that Test::More doesn't like 0 tests a line like this raises an error and stops the recipe entirely:
BUG:plan tests => 0;
NOT BUG:So we need to check for 0 tests beforehand and skip the subtest explicitely in that case
NOT BUG:Fix typos
BUG:cryptograpic => cryptographic
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:Be careful when applying EXE_SHELL
NOT BUG:$EXE_SHELL should only be used with out own programs not with surrounding programs such as the perl interpreter
NOT BUG:Doc fixes suggested by Claus Assmann
BUG:RT4264 RT4268
NOT BUG:Fix Custom Extension tests skip count
NOT BUG:Remove /* foo.c */ comments
NOT BUG:This was done by the following find  -name '*.[ch]' | /tmp/pl where /tmp/pl is the following three-line script: print unless $ == 1 && m@/\* .*\.[ch] \*/@; close ARGV if eof; # Close file to reset $
BUG:And then some hand-editing of other files
NOT BUG:SHARED_LIBS_LINK_EXTS is no longer used remove it completely
NOT BUG:Remove unused undocumented clean-shared target
NOT BUG:Also removes the make variable SHARED_LIBS_LINK_EXTS only used by the clean-shared target
NOT BUG:When shared library linking was moved to the separate Makefile.shared in commit 30afcc072acd4f70590fec68bf0590da4e4f1883 this target was skipped Prior to that commit clean-shared was invoked as a dependency of build-shared but afterward it was no longer referenced anywhere in the tree
NOT BUG:Instead of porting the functionality over to Makefile.shared just remove it entirely as it appears to be unused
NOT BUG:RT4272: Unit tests fail when DTLS disabled
NOT BUG:Missing SKIP: block in SSL unit tests for DTLS and TLS version tests
NOT BUG:80-test_ca.t is made to use the new perlapp()
NOT BUG:Have OpenSSL::Test handle perl scripts like any program
NOT BUG:Since we're building some of our perl scripts and the result might not end up in apps/ (*) we may need to treat them like the compile programs we use for testing
NOT BUG:This introduces perlapp() and perltest() which behave like app() and test() but will add the perl executable in the command line
BUG:-----
NOT BUG:(*) For example with a mk1mf build the result will end up in $(BIN_D)
NOT BUG:Add SSL_up_ref() and SSL_CTX_up_ref()
NOT BUG:The SSL and SSL_CTX structures are reference counted However since libssl was made opaque there is no way for users of the library to manipulate the reference counts This adds functions to enable that
NOT BUG:Remove dirs from mkfiles.pl
NOT BUG:Recent changes have removed some directories which is causing mkfiles.pl to fail
NOT BUG:Use the new OpenSSL::Test::Utils routines
NOT BUG:Use Configure's @disablables and %disabled through configdata.pm
NOT BUG:Enhances the routines in OpenSSL::Test::Utils for checking disabled stuff to get their information directly from Configure instead of 'openssl list -disabled'
NOT BUG:Configure first in travis create release
NOT BUG:Base the tarfile list of files on git ls-files instead of find
NOT BUG:Ask for tests in CONTRIBUTING
NOT BUG:Small Makefile.in cleanup
NOT BUG:engines_obj changed name to padlock_obj in Configure We need to do the corresponding ENGINES_ASM_OBJ -> PADLOCK_ASM_OBJ in appropriate Makefile.ins
NOT BUG:Small cleanups in Configure
NOT BUG:- Small rearrangement of the TABLE and HASH printouts and adding printout of the "build_scheme" item - Renamed "engines_obj" to "padlock_obj" - Moved the runs of dofile down.. it didn't quite make sense to have that in the middle of a printout
NOT BUG:Generate warning text
NOT BUG:Now that we're using templates we should warn people not to edit the resulting file We do it through util/dofile.pl which is enhanced with an option to tell what file it was called from We also change the calls so the template files are on the command line instead of being redirected through standard input That way we can display something like this (example taken from include/openssl/opensslconf.h):
NOT BUG:/* WARNING: do not edit! */ /* Generated by Configure from include/openssl/opensslconf.h.in */
NOT BUG:Misc fixups
NOT BUG:The goal is Makefile not Makefile.new Remove the second generation of opensslconf.h
NOT BUG:Revert merge error
NOT BUG:There are two versions of print_table_entry() in Configure Remove the older
NOT BUG:Add some info in CHANGES about what's happening so far with Configure et al
NOT BUG:Remove GOST again
NOT BUG:The config for the removed GOST engine reappeared by mistake Now removed again
NOT BUG:Refactor file writing - Remake Makefile.org into a template
NOT BUG:It is time for Makefile.org to fold into the new regime and have a run through util/dofile.pl This forces some information out of there and into Configure which isn't a bad thing it makes Configure increasingly the center of build information which is as it should be
NOT BUG:A few extra defaults were needed in the BASE template to get rid of warnings about missing values
NOT BUG:Now that Configure doesn't produce tools/c_rehash mk1mf has to do it
NOT BUG:For every test in 80-test_ssl.t check that the protocol(s) used is enabled
NOT BUG:Make tests use configdata.pm rather than parsing Makefile
NOT BUG:Move & split opensslconf.h.in
NOT BUG:Move opensslconf.h.in to include/openssl Split off DES,BN,RC4 stuff into separate header file templates in crypto/include/internal/*_conf.h.in
NOT BUG:Fix OpenSSL::Test::Simple to take more than one algorithm
NOT BUG:Some test programs may depend on more than just one TLS version for example
NOT BUG:Move pqueue into ssl
NOT BUG:This is an internal facility never documented not for public consumption Move it into ssl (where it's only used for DTLS)
NOT BUG:I also made the typedef's for pqueue and pitem follow our style: they name structures not pointers
NOT BUG:Make sure apps/Makefile builds apps/CA.pl by default
NOT BUG:The rehash.time target should depend on build_tools as well
NOT BUG:The explanation is that it falls back to using tools/c_rehash if 'apps/openssl rehash' isn't supported on the platform at hand
NOT BUG:Fix two possible leaks
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #580
NOT BUG:Fix possible memory leak on BUF_MEM_grow_clean failure
NOT BUG:Simplify BUF_MEM init code
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #580
NOT BUG:Refactor file writing - make configdata.pm the info center for "reconf"
NOT BUG:Now that configdata.pm is the centre of information use that instead of Makefile to figure out reconfiguration parameters This will help future development with different Makefile file names
NOT BUG:The code to read necessary configuration data from Makefile is retained for an easy transition to configdata.pm based information gathering It will be removed later on
NOT BUG:This change includes moving the variable $cross_compile_prefix to %config
BUG:String configs are truly deprecated not even somewhat supported any more
NOT BUG:Remove extra unused variable in util/dofile.pl
NOT BUG:Fix store with opaque data
NOT BUG:When experimental-store is enabled it does not compile due to the change to opaque data structures
NOT BUG:Change CRYPTO_add() to EVP_PKEY_up_ref() as needed
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:RT: #4263 GH: #579
NOT BUG:free item after sk_push fail
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Disable jpake if psk is disabled
NOT BUG:Refactor file writing - rewrite crypto/opensslconf.h.in as template
NOT BUG:The turn has come to have crypto/opensslconf.h.in get run through util/dofile.pl The consequence is that a large number of variables get moved to the %config table
NOT BUG:Also the string variables $openssl_* which were populated with cpp lines all being of the form "#define SOMETHING" were converted into ARRAY refs in %config values containing just the list of macros to be defined
NOT BUG:Refactor file writing - Adapt util/mkdef.pl to use configdata.pm
NOT BUG:For this adaptation the variables $options and $version needed to move to %config in Configure and why not move all other variables holding diverse version numbers at the same time?
NOT BUG:Refactor file writing - information on our use of Perl and Perl modules
NOT BUG:This includes a start on how to install missing modules
NOT BUG:Refactor file writing - adapt util/dofile.pl to use with_fallback
NOT BUG:Bundle the non core Perl module Text::Template
NOT BUG:Because we're using Text::Template and we know it's a non core Perl module we choose to bundle it into our source for convenience
NOT BUG:external/perl/Downloaded.txt document what modules we choose to bundle this way and exactly where we downloaded it from
NOT BUG:With this changes comes the transfer module for with_fallback
BUG:Refactor file writing - arrange for use of bundled Perl modules as fallback
NOT BUG:For our own convenience we need a mechanism to be able to fall back on bundled Perl modules It's a minimal package that's called like this:
NOT BUG:use with_fallback qw(Module1 Module2 ...);
NOT BUG:For each module it will try to require them from the system installation and failing that it will temporarly add external/perl and try to require transfer::{ModuleName} It requires that each bundled Perl modules is accompanied by a small transfer module (external/perl/transfer/ModuleName.pm in our example) that knows exactly what to load
NOT BUG:Refactor file writing - introduce template driven file writing
NOT BUG:apps/CA.pl and tools/c_rehash are built from template files So far this was done by Configure which created its own problems as it forced everyone to reconfigure just because one of the template files had changed Instead have those files created as part of the normal build in apps/ and in tools/
NOT BUG:Furthermore this prepares for a future where Configure may produce entirely other build files than Makefile and the latter can't be guaranteed to be the holder of all information for other scripts Instead configdata.pm (described below) becomes the center of configuration information
NOT BUG:This introduces a few new things:
NOT BUG:%config a hash table to hold all kinds of configuration data that can be used by any other script configdata.pm a perl module that Configure writes It currently holds the hash tables %config and %target util/dofile.pl a script that takes a template on STDIN and outputs the result after applying configuration data on it It's supposed to be called like this:
NOT BUG:perl -I$(TOP) -Mconfigdata < template > result
BUG:or
NOT BUG:perl -I$(TOP) -Mconfigdata templ1 templ2 .. > result
NOT BUG:Note: util/dofile.pl requires Text::Template
NOT BUG:As part of this changed remove a number of variables that are really just copies of entries in %target and use %target directly The exceptions are $target{cflags} and $target{lflags} they do get copied to $cflags and $lflags The reason for this is that those variable potentially go through a lot of changes and would rather deserve a place in %config That however is for another commit
NOT BUG:Refactor config - consolidate and refresh print_table_entry
NOT BUG:It's time for print_table_entry to get a bit of refreshment The way it was put together we needed to maintain the list of known configuration keys of interest twice in different shapes This is error prone so move the list of strings to a common list for all printing cases and use simple formatting of lines to do the actual printout based on that list
NOT BUG:Fix quoting error in SRP printf
NOT BUG:The code is trying to interpolate the value of the BASE_SECTION macro but due to excess escaping it instead prints the string "BASE_SECTION"
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fixed typo in the SSL_CTX_set_security_level
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Cleanup .gitignore
NOT BUG:Some things to ignore need to be properly rooted and use a bit more precision on ignoring 'lib' as that maybe be a perfectly valid directory name to add into git elsewhere in the source tree
NOT BUG:Configurations - no_asm_filler is long gone don't use it
NOT BUG:Fix build failure with CIPHER_DEBUG
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:isalist(1) is obsolete; use isainfo(1)
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Updated OSSL_DYNAMIC_VERSION/OSSL_DYNAMIC_OLDEST
NOT BUG:Change to reflect changes in dynamic_fns
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:dsatest: use the correct BIO to print the test error
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:few typo fixes
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:Remove outdated conftest.c
NOT BUG:Refactor config - @MK1MF_Builds out general build scheme in
NOT BUG:Time to get rid of @MK1MF_Builds and introduce a more flexible 'build_scheme' configuration key Its value may be a string or an array of strings meaning we need to teach resolve_config how to handle ARRAY referenses
NOT BUG:The build scheme is a word that selects a function to create the appropriate result files for a certain configuration Currently valid build schemes aer "mk1mf" and "unixmake" the plan is however to add at least one other for a more universal build scheme
NOT BUG:Incidently this also adds the functions 'add' and 'add_before' which can be used in a configuration so instead of having to repeatedly write a sub like this:
NOT BUG:key1 => sub { join(" " @_ "myvalues"); } key2 => sub { join(" " "myvalues" @_); }
NOT BUG:one could write this:
NOT BUG:key1 => add(" " "myvalues") key2 => add_before(" " "myvalues")
NOT BUG:The good point with 'add' and 'add_before' is that they handle inheritances where the values are a misture of scalars and ARRAYs If there are any ARRAY to be found the resulting value will be an ARRAY otherwise it will be a scalar with all the incoming valued joined together with the separator given as first argument to add/add_before
NOT BUG:Refactor config - move templates and template docs to Configurations
NOT BUG:Move the documentation of the target configuration form to Configurations/README
NOT BUG:Move initial assembler object templates to Configurations/00-BASE-templates.conf
NOT BUG:Furthermore remove all variables containing the names of the non-assembler object files and make a BASE template of them instead The values from this templates are used as defaults as is The remaining manipulation of data when assembler modules are used is done only when $no_asm is false
NOT BUG:While doing this clean out some other related variables that aren't used anywhere
NOT BUG:Also we had to move the resolution of the chosen target a bit or the function 'asm' would never catch a true $no_asm.. this hasn't mattered before we've moved it all to the BASE template but now it does
NOT BUG:At the same time add the default for the 'unistd' key to the BASE template
NOT BUG:Refresh the thinking of --prefix and --openssldir
NOT BUG:--prefix is now exclusively used for software and manual installation --openssldir is not exclusively used as a default location for certs keys and the default openssl.cnf
NOT BUG:This change is made to bring clarity to have the two less intertwined and to be more compatible with the usual ways of software installation
NOT BUG:Please change your habits and scripts to use --prefix rather than --openssldir for installation location now
NOT BUG:RT3863 ECC: Add missing NULL check Set a flag
NOT BUG:Refactor config - throw away the last remains of '--test-sanity'
NOT BUG:Refactor config - consolidate handling of disabled stuff
NOT BUG:It's time to refactor the handling of %disabled so that all information of value is in the same place We have so far had a few cascading disable rules in form of code far away from %disabled Instead bring that information to the array @disable_cascade which is a list of pairs of the form 'test => descendents' The test part can be a string and it's simply checked if that string is a key in %disabled or it can be a CODEref to do a more complex test If the test comes true then all descendents are disabled This check is performed until there are no more things that need to be disabled
NOT BUG:Also $default_depflags is constructed from the information in %disabled instead of being a separate string While a string of its own is visually appealing it's much too easy to forget to update it when something is changed in %disabled
NOT BUG:Refactor config - rewrite handling of "reconf"
NOT BUG:The way the "reconf"/"reconfigure" argument is handled is overly complicated Just grep for it first and if it is there in the current arguments get the old command line arguments from Makefile
NOT BUG:While we're at it make the Makefile variable CONFIGURE_ARGS hold the value as a perl list of strings This makes things much safer in case one of the arguments would contain a space Since CONFIGURE_ARGS is used for nothing else there's no harm in this
NOT BUG:Multiple -trusted/-untrusted/-CRLfile options in verify
NOT BUG:It is sometimes useful (especially in automated tests) to supply multiple trusted or untrusted certificates via separate files rather than have to prepare a single file containing them all
NOT BUG:To that end change verify(1) to accept these options zero or more times Also automatically set -no-CAfile and -no-CApath when -trusted is specified
NOT BUG:Improve verify(1) documentation which could still use some work
NOT BUG:Refactor apps load_certs/load_crls to work incrementally
NOT BUG:More X509_verify_cert() tests via verify(1)
NOT BUG:Still need tests for trusted-first and tests that probe construction of alternate chains
NOT BUG:Reject when explicit trust EKU are set and none match
NOT BUG:Returning untrusted is enough for for full chains that end in self-signed roots because when explicit trust is specified it suppresses the default blanket trust of self-signed objects
NOT BUG:But for partial chains this is not enough because absent a similar trust-self-signed policy non matching EKUs are indistinguishable from lack of EKU constraints
NOT BUG:Therefore failure to match any trusted purpose must trigger an explicit reject
NOT BUG:Commit pre-generated test_verify certs
NOT BUG:These can be re-generated via:
NOT BUG:cd test/certs; ./setup.sh
NOT BUG:if need be The keys are all RSA 2048-bit keys but it is possible to change that via environment variables
BUG:cd test/certs rm -f *-key.pem *-key2.pem OPENSSL_KEYALG=rsa OPENSSL_KEYBITS=3072 ./setup.sh
NOT BUG:cd test/certs rm -f *-key.pem *-key2.pem OPENSSL_KEYALG=ecdsa OPENSSL_KEYBITS=secp384r1 ./setup.sh
BUG:..
NOT BUG:Keys are re-used if already present so the environment variables are only used when generating any keys that are missing Hence the "rm -f"
NOT BUG:Scripts to generate verify test certs
NOT BUG:Check Suite-B constraints with EE DANE records
NOT BUG:When DANE-EE(3) matches or either of DANE-EE/PKIX-EE fails we don't build a chain at all but rather succeed or fail with just the leaf certificate In either case also check for Suite-B violations
NOT BUG:As unlikely as it may seem that anyone would enable both DANE and Suite-B we should do what the application asks
NOT BUG:Took the opportunity to eliminate the "cb" variables in x509_vfy.c just call ctx->verify_cb(ok ctx)
NOT BUG:Refactor config - split read_config into read_config and resolve_config
NOT BUG:Split the read_config function into read_config that ONLY reads the configuration files but doesn't try to resolve any of the inheritances and resolve_config which resolves the inheritance chain of a given target Move them to the bottom of Configure with the rest of the helpers
NOT BUG:Have a new small hash table %target which will hold the values for the target the user requested This also means that all access to the current target data can be reduced from '$table{$target}->{key}' to a mere '$target{key}'
NOT BUG:While we're at it the old string formatted configurations are getting obsolete so they may as well get deprecated entirely
NOT BUG:Refactor config - throw away '--test-sanity'
NOT BUG:Get rid of the --test-sanity option Since we no longer have string based configurations we don't have the problem with miscounting colons any more
NOT BUG:Refactor config - a small cosmetic touchup of Configure
NOT BUG:Start simple removed some unused variables and change all '<<EOF' to '<<"EOF"' The latter is because some code colorizers (notably in emacs) cannot recognise the here document end marker unless it's quoted and therefore assume the rest of the file is part of the here document
NOT BUG:Add an engine destructor to eng_cryptodev
NOT BUG:Adapt BSD cryptodev engine to opaque EVP_MD_CTX EVP_CIPHER_CTX etc
NOT BUG:Remove update tags
NOT BUG:Also remove depend/local_depend
NOT BUG:Consolidate "make update"
NOT BUG:Rename 'update' to 'generate' Rather than recurse just explicitly call the three generate targets directly
NOT BUG:Handle SSL_shutdown while in init more appropriately
NOT BUG:Calling SSL_shutdown while in init previously gave a "1" response meaning everything was successfully closed down (even though it wasn't) Better is to send our close_notify but fail when trying to receive one
NOT BUG:The problem with doing a shutdown while in the middle of a handshake is that once our close_notify is sent we shouldn't really do anything else (including process handshake/CCS messages) until we've received a close_notify back from the peer However the peer might send a CCS before acting on our close_notify - so we won't be able to read it because we're not acting on CCS messages!
NOT BUG:make EVP_PKEY opaque
NOT BUG:Remove the GOST engine
NOT BUG:The GOST engine is now out of date and is removed by this commit An up to date GOST engine is now being maintained in an external repository
NOT BUG:See: https://wiki.openssl.org/index.php/Binaries
NOT BUG:Fix BSD -rpath parameter
NOT BUG:For BSD systems Configure adds a shared_ldflags including a reference to the Makefile variable LIBRPATH but since it must be passed down to Makefile.shared care must be taken so the value of LIBRPATH doesn't get expanded too early or it ends up giving an empty string
NOT BUG:API compat for SSLeay_add_ssl_algorithms
NOT BUG:Validate ClientHello session_id field length and send alert on failure
NOT BUG:RT#4080
NOT BUG:prf redirection build fixes
NOT BUG:Update license year range to 2016
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Support disabling any or all TLS or DTLS versions
NOT BUG:Some users want to disable SSL 3.0/TLS 1.0/TLS 1.1 and enable just TLS 1.2 In the future they might want to disable TLS 1.2 and enable just TLS 1.3 ..
NOT BUG:This commit makes it possible to disable any or all of the TLS or DTLS protocols It also considerably simplifies the SSL/TLS tests by auto-generating the min/max version tests based on the set of supported protocols (425 explicitly written out tests got replaced by two loops that generate all 425 tests if all protocols are enabled fewer otherwise)
NOT BUG:Add documentation for EVP_PKEY_TLS1_PRF
NOT BUG:add TLS1-PRF tests
NOT BUG:Add TLS1-PRF test support to evp_test
NOT BUG:use TLS PRF
NOT BUG:Modify libssl to use EVP_PKEY TLS PRF
NOT BUG:Add TLS PRF method
NOT BUG:Add EVP_PKEY algorithm for TLS1 PRF
BUG:Fix GOST2012-NULL-GOST12
BUG:Fix a typo in the definition of the GOST2012-NULL-GOST12 ciphersuite
BUG:RT#4213
NOT BUG:Drop cached certificate signature validity flag
NOT BUG:It seems risky in the context of cross-signed certificates when the same certificate might have multiple potential issuers Also rarely used since chains in OpenSSL typically only employ self-signed trust-anchors whose self-signatures are not checked while untrusted certificates are generally ephemeral
NOT BUG:Don't use "grep -q" "-q" is not POSIX and fails on Solaris
NOT BUG:Add some extra Cygwin targets as aliases for Cygwin-x86
NOT BUG:Cygwin was used for x86 before so let's keep it around for those who still use it (it make Configure reconf possible) Cygwin-i[3456]86 for those that might generate and pass a target name directly to Configure
NOT BUG:Adjust the configuration target name from Cygwin-i686 to Cygwin-x86
BUG:This is to reflect that it's not limited to just i686
NOT BUG:Fix configuration system to support different architectures on Cygwin
NOT BUG:This patch allows to recognize the architectures supported by Cygwin and to choose the right configuration from there Drop -march to use default architecture on 32 bit x86
NOT BUG:Drop pre-Cygwin-1.3 recognition since it's long gone and there's no valid configuration for this anymore
NOT BUG:Signed-off-by: Corinna Vinschen <vinschen@redhat.com>
NOT BUG:Don't strip object files on Cygwin
NOT BUG:Building for the Cygwin distro requires to be able to build debuginfo files This in turn requires to build object files without stripping The stripping is performed by the next step after building which creates the debuginfo files
NOT BUG:Signed-off-by: Corinna Vinschen <vinschen@redhat.com>
NOT BUG:Use POSIX functions on Cygwin not Win32 function
NOT BUG:Signed-off-by: Corinna Vinschen <vinschen@redhat.com>
NOT BUG:Fix build break; restore missing target
NOT BUG:Fix function declarations
NOT BUG:Accessor update; fix API document one
NOT BUG:Remove some old makefile targets
NOT BUG:Remove lint tags dclean tests This is prep for a new makedepend scheme This is temporary pending unified makefile and might help it
NOT BUG:Add some accessors
NOT BUG:GH334: Add an OCSP_SINGLERESP_get0_id() accessor to the OCSP_CERTID of a OCSP_SINGLERESP It is possible to do it the other way around using OCSP_resp_find() but this is more efficient when you have a tree indexed by OCSP_CERTID like haproxy does (This is also RT4251)
NOT BUG:GH556: OCSP_resp_get_produced_at() accessor to the producedAt of a OCSP_BASICRESP GH555: TS_STATUS_INFO_get_status() TS_STATUS_INFO_get_text() and TS_STATUS_INFO_get_failure_info() accessors for a TS_STATUS_INFO
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:RT4247: Add missing patch
NOT BUG:Missed the camellia EVP update
NOT BUG:The TLSProxy tests can't run if no-engine has been configured
NOT BUG:Make sure they detect that
NOT BUG:fix no-engine build
NOT BUG:Start a new line after each sentence-ending period
NOT BUG:This avoids explicit double spaces between sentences
NOT BUG:Make SSL_dane_enable() requirement more clear
NOT BUG:Also s/s/ssl/ as appropriate in the code example
NOT BUG:Suggested by Claus Assmann
NOT BUG:Better invalid SNI name error handling
NOT BUG:Also report an SSL_dane_enable error when the basedomain is an invalid SNI name Avoid side-effects when such a name is valid with X509_VERIFY_PARAM_set1_host() as e.g with an empty name by setting the SNI name first
NOT BUG:Empty SNI names are not valid
NOT BUG:While empty inputs to SSL_set1_host() clear the reference identifier list
NOT BUG:RT4247: Fix EVP_CIPHER_CTX opaque on sparc
NOT BUG:Via Rainer Jung
NOT BUG:free up gost ciphers
NOT BUG:Add lookup_certs for a trusted stack
BUG:NGX-2040 - fix wildcard match on punycode/IDNA DNS names
NOT BUG:- bugfix: should not treat '--' as invalid domain substring - '-' should not be the first letter of a domain
NOT BUG:Signed-off-by: Viktor Dukhovni <viktor@openssl.org>
NOT BUG:Fix typo
NOT BUG:Update Windows installation instructions
NOT BUG:The windows installation instructions were very out of date Substantial update to the text Remove a lot of historical stuff that isn't relevant any more and merge the win64 and win32 instructions into one file
NOT BUG:Rename INSTALL.W32 to INSTALL.WIN
NOT BUG:Also remove the INSTALL.W64 file Next commit will update INSTALL.WIN to cover both
NOT BUG:Small fixup an extra line slipped in
NOT BUG:The previous 'Relax the requirements for a debug build' commit had an extra line of code that shouldn't have been there This fixes it
NOT BUG:Cosmetic polish for last-resort depth 0 check
BUG:Avoid the r modifier for s/// (perl)
NOT BUG:It seems that the r modifier for s/// is fairly new It's reported not to exist in perl 5.10.1 so it's better to avoid it when possible
NOT BUG:Fix last-resort depth 0 check when the chain has multiple certificates
NOT BUG:Add a no-egd option to disable EGD-related code
NOT BUG:The entropy-gathering daemon is used only on a small number of machines Provide a configure knob so that EGD support can be disabled by default but re-enabled on those systems that do need it
NOT BUG:Make SSL_set_debug deprecated in 1.1
NOT BUG:Always initialize X509_STORE_CTX get_crl pointer
BUG:Editorial
NOT BUG:In __cwd make sure the given directory is seen as such and not a file
NOT BUG:On Unixly platforms this doesn't matter On VMS it does
NOT BUG:Relax the requirements for a debug build
NOT BUG:We required that a target be named 'debug-something' or to have at least one of the configuration items debug_cflags and debug_lflags for --debug to be accepted
NOT BUG:However there are targets with no such markings but that will still have debugging capabilities This is particularly true for mk1mf builds where the extra flags for debugging are figured out later on by util/mk1mf.pl
NOT BUG:RT4232: Extra space in help message
NOT BUG:It turns out that -pause calls the undocumented function SSL_set_debug That just sets flag inside the SSL structure That flag despite the command is never used So remove the flag the field and the function
NOT BUG:EDH >= 1024 bits even at security level 0
NOT BUG:Prepare for 1.1.0-pre3-dev
NOT BUG:Prepare for 1.1.0-pre2 release
NOT BUG:Change the last copyright year to 2016 in README
NOT BUG:VMS open() doesn't take O_BINARY but takes a context description
NOT BUG:Tell open() O_BINARY on VMS doesn't make sense as it's possible to use more precise file attributes However if we're still going to fdopen() it in binary mode we must set the fd in binary context
NOT BUG:Rename binmode into textmode and use it correctly
NOT BUG:Do not use redirection on binary files
NOT BUG:On some platforms the shell will determine what attributes a file will have so while the program might think it's safely outputting binary data it's not always true
NOT BUG:For the sake of the tests it's therefore safer to use -out than to use redirection
NOT BUG:Fall back to c_rehash if 'openssl rehash' fails
NOT BUG:'openssl rehash' isn't implemented on all platforms and since 'make test' depends on a rehash of certs/demo being performed it becomes an effective block from running tests on any platform but Unix for the moment
NOT BUG:It's better to fall back to c_rehash and let the tests perform everywhere
NOT BUG:Call single parent free_comp routine
NOT BUG:To avoid possible time_t overflow use X509_time_adj_ex()
NOT BUG:Fix double-free bugs in EC group precomputation state
BUG:Add a directry spec for mcr if there is none
NOT BUG:On VMS the command MCR will assume SYS$SYSTEM: when the first argument lacks a directory spec So for programs in the current directory we add [] to tell MCR it is in the current directory It's the same as having ./ at the start of a program on Unix so the shell doesn't start looking along $PATH
NOT BUG:Fix verify(1) to report failure when verification fails
NOT BUG:Regenerated expired test certificates good for the next 100 years
BUG:Fix nistp512 typos should be nistp521
NOT BUG:Note this now compiles but fails tests so further remediation is required
NOT BUG:Add missing #ifdef's to fix build break
NOT BUG:For stro[ui]max require both C99 and UINTMAX_MAX/INTMAX_MAX
NOT BUG:Fix test_ordinals
NOT BUG:This used to work but somewhere along the line it broke and was failing to detect duplicate ordinals - which was the whole point of the test!
NOT BUG:Reorder the ordinals in libeay.num
NOT BUG:Remove spurious ;
NOT BUG:Quick fix of debugging option for mk1mf.pl
NOT BUG:util/mk1mf.pl was relying on the platform having the 'debug-' prefix for doing a debug build Since the setup of targets has changed this is no longer true However it can look for '--debug' in the command line options
NOT BUG:VMS C doesn't provide intmax_t/uinmax_t use our own
NOT BUG:Add CRYPTO_EX_DATA; remove EC_EXTRA_DATA
NOT BUG:Add CRYPTO_EX_DATA add EndC_KEY_[gs]et_method From Roumen Petrov Had to add various exdata calls to init/copy/free the exdata Had to remove const from some EC functions because exdata isn't const-correct :( Also remove EC_EXTRA_DATA and use a union to hold the possible pre-computed values and an enum to tell which value is in the union (Rich Salz)
NOT BUG:Remove test_probable_prime_coprime from test/bntest.c
NOT BUG:This test relies on a private function which isn't exported This test would work better as a unit test in crypto/bn/bn_prime.c
NOT BUG:Simplify the EXIT macrot for VMS
NOT BUG:recognise no-crypto-mdebug
NOT BUG:VMS perl doesn't implement fork() so don't run the TLSProxy tests there
NOT BUG:Fix DES_LONG breakage
NOT BUG:For some strange reason opensslconf.h was only defining DES_LONG when included via des.h but that's exceedingly fragile (as a result of include guards the include via des.h might not actually process the content again)
NOT BUG:Ripped out the nesting constraint now always define OSSL_DES_LONG if not already defined Note this could just be DES_LONG but trying to avoid exposing DES_LONG in places where it has never been seen before so it is up to des.h to actually define DES_LONG as OSSL_DES_LONG
NOT BUG:For stroimax need C99 inttypes.h
NOT BUG:Don't return from main() use EXIT() instead
NOT BUG:Have the VMS exit code follow POSIX conventions
NOT BUG:It seems like the convention for VMS exit codes is to combine the VMS C facility code (0x35a000) with a recoded exit code as follows:
BUG:0 => 1 1-255 => 8*code + 2
NOT BUG:We also add 0x10000000 which is the control bit that has DCL not report the error on the terminal That's just as well since it would be quite nonsensical for example:
NOT BUG:%C-W-NOMSG Message number 0035A018
NOT BUG:We could do all this by using the normal exit() function after having defined the macro _POSIX_EXIT Unfortunately this feature only exists in VMS C V7.1 and up
NOT BUG:After EVP_CIPHER turned opaque e_rc5.c needs to include evp_int.h
NOT BUG:We missed this one because rc5 is disabled by default
BUG:Notified by The Doctor <doctor@doctor.nl2k.ab.ca>
NOT BUG:Pipes on VMS do not work well with binary data use an intermediary file
NOT BUG:VMS being a record oriented operating system it's uncertain how the 'pipe' passes binary data from one process to another Experience shows that we get in trouble and it's probably due to the pipe in itself being opened in text mode (variable length records)
NOT BUG:It's safer to pass data via an intermediary file instead
NOT BUG:Fix test/recipes/80-test_ca.t to work on VMS
NOT BUG:VMS uses a variant of openssl.cnf named openssl-vms.cnf
NOT BUG:There's a Perl on VMS mystery where a open pipe will not SIGPIPE when the child process exits which means that a loop sending "y\n" to it will never stop Adding a counter helps fix this (set to 10 we know that none of the CA.pl commands will require more)
NOT BUG:VMS will downcase all command parameters unless they're quoted
NOT BUG:Fix missing casts for c++
BUG:Maximize time_t when intmax_t is available
NOT BUG:Well I'm not actually changing time_t just changing how time_t valued opt values are converted from string to time_t
NOT BUG:Fix typo in error message
NOT BUG:Move Makefiles to Makefile.in
NOT BUG:Create Makefile's from Makefile.in Rename Makefile.org to Makefile.in Rename Makefiles to Makefile.in Address review feedback from Viktor and Richard
NOT BUG:STACK_OF(SSL_COMP) is a public type
NOT BUG:fix jpaketest and correct comment
NOT BUG:Correct a small typo in CHANGES
NOT BUG:Add notes in CHANGES and NEWS
NOT BUG:Remove unused internal macros
NOT BUG:The M_EVP_* macros related to EVP_CIPHER / EVP_CIPHER_CTX are not public and are unused
NOT BUG:make update
NOT BUG:Document the new EVP_CIPHER and EVP_CIPHER_CTX functionality
NOT BUG:Add back deprecated functions in macro form
NOT BUG:Adapt all EVP_CIPHER users for it becoming opaque
NOT BUG:EVP_CIPHER_CTX_new_cipher_data was a temporary measure not needed any more
NOT BUG:Adapt all engines that need it to opaque EVP_CIPHER
NOT BUG:Adapt builtin cipher implementations to opaque EVP_CIPHER
NOT BUG:They all stop including evp_locl.h so we also take care of their adaptation to opaque EVP_CIPHER_CTX as was promised in an earlier commit
NOT BUG:Adapt the internal EVP routines to opaque EVP_CIPHER
NOT BUG:Make EVP_CIPHER opaque and add creator/destructor/accessor/writer functions
NOT BUG:We follow the method used for EVP_MD Also move all the internal EVP_CIPHER building macros from evp_locl.h to evp_int.h This will benefit our builtin EVP_CIPHERs
NOT BUG:Remove EVP_CIPHER_CTX_flags it's only confusing
NOT BUG:EVP_CIPHER_CTX_flags was returning the flags of its associated EVP_CIPHER However EVP_CIPHER_CTX has flags of its own so this function is quite confusing and therefore error prone
NOT BUG:Adapt all EVP_CIPHER_CTX users for it becoming opaque
NOT BUG:Adapt cipher implementations to opaque EVP_CIPHER_CTX
NOT BUG:Note: there's a larger number of implementations in crypto/evp/ that aren't affected because they include evp_locl.h They will be handled in a separate commit
NOT BUG:Adapt the internal EVP routines to opaque EVP_CIPHER_CTX
BUG:Add accessors and writers for EVP_CIPHER_CTX
NOT BUG:New functions:
BUG:- EVP_CIPHER_CTX_encrypting() - EVP_CIPHER_CTX_iv() - EVP_CIPHER_CTX_iv_noconst() - EVP_CIPHER_CTX_original_iv() - EVP_CIPHER_CTX_buf_noconst() - EVP_CIPHER_CTX_num() - EVP_CIPHER_CTX_set_num() - EVP_CIPHER_CTX_cipher_data() - EVP_CIPHER_CTX_new_cipher_data()
NOT BUG:Note that the accessors / writers for iv buf and num may go away as those rather belong in the implementation's own structure (cipher_data) when the implementation would affect them (that would be the case when they are flagged EVP_CIPH_CUSTOM_IV or EVP_CIPH_FLAG_CUSTOM_CIPHER)
BUG:Make EVP_CIPHER_CTX opaque and renew the creator / destructor functions
NOT BUG:Following the method used for EVP_MD_CTX and HMAC_CTX EVP_CIPHER_CTX_init and EVP_CIPHER_CTX_cleanup are joined together into one function EVP_CIPHER_CTX_reset with EVP_CIPHER_CTX_init kept as an alias EVP_CIPHER_CTX_cleanup fills no purpose of its own any more and is therefore removed
NOT BUG:RT4227: Range-check in apps
NOT BUG:Implement range-checking in all counts in apps Turns out only a couple of cases were missing And make the range-checking code more strict Replace almost all opt_ulong() calls with opt_long()
NOT BUG:Yet another make update
NOT BUG:Make sure to have both upper and mixed case symbols in SYMBOL_VECTOR
NOT BUG:It was assumed that the syntax FOO/Foo=PROCEDURE would create both an upper case and mixed case symbol in the GST Not so it requires having both FOO/Foo=PROCEDURE (to create the upper case alias) and Foo=PROCEDURE (to create the mixed case slot)
NOT BUG:We make sure that any symbol always occupies two slots (even those that don't exist) by filling up with SPARE when necessary That will assure that any changes will still have the same symbols in the same slots no matter what (save a complete rewrite of the ordinals files)
BUG:Use SPARE instead of PRIVATE_PROCEDURE to reserve unused SYMBOL_VECTOR slots
BUG:It was assumed that a dummy with the type PRIVATE_PROCEDURE would simply occupy a slot but otherwise ignore the symbol Not so but there is SPARE for that purpose
NOT BUG:The limit per SYMBOL_VECTOR isn't the amount of symbols it's the line length
NOT BUG:VMS INDENTIFICATION should only have the version number
NOT BUG:GH528: "cipher -v" output is confusing
NOT BUG:Fix the docs and refactor some common code
NOT BUG:Have mkdef.pl use case sensitive symbols for shareable symbol vector
NOT BUG:Function pop_info() returned a dangling pointer
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:update ordinals
NOT BUG:Use ossl_inline and DEFINE_LHASH_OF
NOT BUG:Remove mkstack.pl: it is no longer needed
BUG:Add lh_doall_arg inlining
BUG:Add lh_doall inlining
BUG:Add lh_new() inlining
NOT BUG:Inline LHASH_OF
NOT BUG:Make LHASH_OF use static inline functions
NOT BUG:Add new lh_get_down_load and lh_set_down_load functions and their typesafe inline equivalents
NOT BUG:Make lh_error a function instead of a macro
NOT BUG:GH540: add casts to safestack.h
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fix jpaketest compilation error
NOT BUG:Only run DANE tests when EC is supported
NOT BUG:Since danetest is to test DANE rather than specific algorithms it's acceptable to require EC when testing it
NOT BUG:Make SSL{_CTX,}_{get,set,clear}_options functions
NOT BUG:These now take and return unsigned long and get is constified Updated related documentation and util/ssleay.num
NOT BUG:Adjust $default_depflags to changes in Configure
NOT BUG:We use $default_depflags to check if a 'make depend' is needed after configuring so it needs to be kept up to date
NOT BUG:Fix NSS format session output
NOT BUG:Commit 189ae368d91 (RT ticket 3352) provided the capability to output session key data in NSS format The big apps cleanup broke that capability This commit restores it
BUG:RT#4201
NOT BUG:Update leak test to check return values
NOT BUG:Add memory leak return value
NOT BUG:Make CRYPTO_mem_leaks() and CRYPTO_mem_leaks_fp() return a status value Update documentation Don't abort() if there are leaks
NOT BUG:Enable/disable crypto-mdebug just like other features
NOT BUG:Also always abort() on leak failure
NOT BUG:Disable some algorithms by default
NOT BUG:Regenerate SSL record/statem error strings
NOT BUG:fix shadow warning
NOT BUG:File is about s_time not s_client
NOT BUG:Allow disabling the min and max version
NOT BUG:Future-proof deprecated declartion parsing
NOT BUG:Support two-digest major/minor/micro numbers and die when the input fails to parse
NOT BUG:RT41897: Add an CRYPTO_secure_actual_size
NOT BUG:This is already documented I just forgot to include the code :)
NOT BUG:Fix c++ compilation
BUG:Fixes https://github.com/openssl/openssl/issues/532
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Adds missing type casts
BUG:This fixes https://github.com/openssl/openssl/issues/534
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Adds crypto-mdebug as a valid option
NOT BUG:Adds crypto-mdebug as a valid option Fixes https://github.com/openssl/openssl/issues/537
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fix build failure on Windows
BUG:Fixes https://github.com/openssl/openssl/issues/530
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:update ordinals
BUG:Add DEPRECATEDIN support
NOT BUG:Correct header defines
NOT BUG:remove hard coded algorithms
NOT BUG:Recognise disabled algorithms automatically
NOT BUG:Fix no CRYPTO_MDEBUG build (windows)
NOT BUG:In order for mkdep to find #ifdef'd functions they must be wrapped (in the header file) with #ifndef OPENSSL_NO_.. So do that for various CRYPTO_mem_debug.. things
NOT BUG:Fixup actually update danetest.c
NOT BUG:Another portability fix
NOT BUG:Update comment as bn_dup_expand is gone
NOT BUG:Simplify deprecated declaration exception
NOT BUG:Portability fix for apps/s_client.c
NOT BUG:Make some local variables and a table of them be static
BUG:DANE CHANGES
NOT BUG:Fix some typos in comments
NOT BUG:Backwards-compatibility subject to OPENSSL_API_COMPAT
NOT BUG:Provide backwards-compatiblity for functions macros and include files if OPENSSL_API_COMPAT is either not defined or defined less than the version number of the release in which the feature was deprecated
BUG:DANE s_client support
BUG:Remove all remaining traces if PEM_Seal
NOT BUG:Minor test update
BUG:* Remove extraneous test/Makefile.orig * Use basedomain instead of argv[1] in test/danetest.c
NOT BUG:Fix another build break for no-mem-debug
NOT BUG:Fix build-break; 'make update'
NOT BUG:Commit bbd86bf5424a611cb6b77a3a17fc522931c4dcb8 broke certain builds Commit 0674427f71ca050e3c61a7ec9dc71b208c3b39f5 missing 'make update'
NOT BUG:mem functions cleanup
NOT BUG:Only two macros CRYPTO_MDEBUG and CRYPTO_MDEBUG_ABORT to control this If CRYPTO_MDEBUG is not set #ifdef out the whole debug machinery (Thanks to Jakob Bohm for the suggestion!) Make the "change wrapper functions" be the only paradigm Wrote documentation! Format the 'set func' functions so their paramlists are legible Format some multi-line comments Remove ability to get/set the "memory debug" functions at runtme Remove MemCheck_* and CRYPTO_malloc_debug_init macros Add CRYPTO_mem_debug(int flag) function Add test/memleaktest Rename CRYPTO_malloc_init to OPENSSL_malloc_init; remove needless calls
NOT BUG:Remove the old VMS linker option file creator for shlibs
NOT BUG:Enhance util/mkdef.pl to provide a VMS linker option file for shlibs
NOT BUG:Remove crypto/pem/pem_seal.c
NOT BUG:It's functionality appears unused If we're wrong we will revert
BUG:DANE support for X509_verify_cert()
NOT BUG:use more descriptive name DEFINE_STACK_OF_CONST
NOT BUG:Only declare stacks in headers
NOT BUG:Don't define stacks in C source files: it causes warnings about unused functions in some compilers
NOT BUG:Rename DECLARE*STACK_OF to DEFINE*STACK_OF
NOT BUG:Applications wishing to include their own stacks now just need to include
NOT BUG:DEFINE_STACK_OF(foo)
NOT BUG:in a header file
BUG:remove unused PREDECLARE
NOT BUG:Fix declarations and constification for inline stack
NOT BUG:Change STACK_OF to use inline functions
NOT BUG:Change DECLARE_STACK_OF into inline functions This avoids the need for auto generated mkstack.pl macros and now handles const properly
BUG:DANE make update
BUG:DANE documentation typos
NOT BUG:Reported-by: Claus Assmann
NOT BUG:Remove more (rest?) of FIPS build stuff
NOT BUG:Remove some unused perl scripts
NOT BUG:DANE support structures constructructors and accessors
NOT BUG:Also tweak some of the code in demos/bio to enable interactive testing of BIO_s_accept's use of SSL_dup Changed the sconnect client to authenticate the server which now exercises the new SSL_set1_host() function
NOT BUG:Fix X509_STORE_CTX_cleanup()
NOT BUG:Drop incorrect id == -1 case from X509_check_trust
NOT BUG:X509_verify_cert() cleanup
NOT BUG:Cleanup of verify(1) failure output
NOT BUG:Instead of a local hack implement SIZE_MAX in numbers.h if it's missing
BUG:Fix a possible memleak
NOT BUG:If there's a failure allocating md_data the destination pctx will have a shared pointer with the source EVP_MD_CTX which will lead to problems when either the source or the destination is freed
NOT BUG:Protocol version selection and negotiation rewrite
NOT BUG:The protocol selection code is now consolidated in a few consecutive short functions in a single file and is table driven Protocol-specific constraints that influence negotiation are moved into the flags field of the method structure The same protocol version constraints are now applied in all code paths It is now much easier to add new protocol versions without reworking the protocol selection logic
BUG:In the presence of "holes" in the list of enabled client protocols we no longer select client protocols below the hole based on a subset of the constraints and then fail shortly after when it is found that these don't meet the remaining constraints (suiteb FIPS security level ...) Ideally with the new min/max controls users will be less likely to create "holes" in the first place
NOT BUG:Refine and re-wrap Min/Max protocol docs
NOT BUG:Add support for minimum and maximum protocol version
NOT BUG:Fix no-dh
NOT BUG:remove invalid free
NOT BUG:Use X509_get0_pubkey where appropriate
NOT BUG:Update to SHA256 for TSA signing digest
NOT BUG:Fix faulty check in the VMS version of opt_progname
NOT BUG:Remove the #ifndef OPENSSL_SYS_VMS around SSL_add_dir_cert_subjects_to_stack
BUG:It served a purpose but not any more
NOT BUG:Correct missing prototype
NOT BUG:SIZE_MAX doesn't exist everywhere supply an alternative
NOT BUG:SIZE_MAX is a great macro and does unfortunately not exist everywhere Since we check against half of it using bitwise shift to calculate the value of half SIZE_MAX should be safe enough
NOT BUG:Fix some missing or faulty header file inclusions
NOT BUG:Check for missing DSA parameters
NOT BUG:If DSA parameters are absent return -1 (for unknown) in DSA_security_bits
NOT BUG:If parameters are absent when a certificate is set in an SSL/SSL_CTX structure this will reject the certificate by default This will cause DSA certificates which omit parameters to be rejected but that is never (?) done in practice
BUG:Thanks to Brian 'geeknik' Carpenter for reporting this issue
NOT BUG:Convert RSA encrypt to use EVP_PKEY
BUG:Prefer ReuseAddr over Reuse with IO::Socket::INET
BUG:Reuse is deprecated and ReuseAddr is prefered according to documentation
NOT BUG:Fix no-engine
NOT BUG:RT4202: Update rt URL's
NOT BUG:make a "missed make update" update
NOT BUG:Increase the max size limit for a CertificateRequest message
NOT BUG:Previous versions of OpenSSL had the max size limit for a CertificateRequest message as |s->max_cert_list| Previously master had it to be SSL3_RT_MAX_PLAIN_LENGTH However these messages can get quite long if a server is configured with a long list of acceptable CA names Therefore the size limit has been increased to be consistent with previous versions
BUG:RT#4198
NOT BUG:Simplify calling of the OCSP callback
NOT BUG:Move all calls of the OCSP callback into one place rather than repeating it in two different places
NOT BUG:Add some documentation for the OCSP callback functions
NOT BUG:Describe the usage of the OCSP callback functions on both the client and the server side
NOT BUG:Ensure we don't call the OCSP callback if resuming a session
NOT BUG:It makes no sense to call the OCSP status callback if we are resuming a session because no certificates will be sent
NOT BUG:Fix error when server does not send CertificateStatus message
NOT BUG:If a server sends the status_request extension then it may choose to send the CertificateStatus message However this is optional We were treating it as mandatory and the connection was failing
NOT BUG:Thanks to BoringSSL for reporting this issue
BUG:RT#4120
NOT BUG:Add test for missing CertificateStatus message
NOT BUG:If the client sends a status_request extension in the ClientHello and the server responds with a status_request extension in the ServerHello then normally the server will also later send a CertificateStatus message However this message is *optional* even if the extensions were sent This adds a test to ensure that if the extensions are sent then we can still omit the message
NOT BUG:fix no-ec
NOT BUG:Server side EVP_PKEY DH support
NOT BUG:utility function
NOT BUG:EVP_PKEY DH client support
BUG:Always generate DH keys for ephemeral DH cipher suites
NOT BUG:The functions take a SSL * not a SSL_CTX *
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:RT: #4192 MR: #1533
NOT BUG:redundant redeclaration of 'OPENSSL_strlcpy'
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:MR: #1523
NOT BUG:__STDC_VERSION__ is not defined for c89 compilers
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:MR: #1522
NOT BUG:remove duplicates in util/libeay.num
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:RT: #4195 MR: #1521
NOT BUG:Remove SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER and SSL_OP_TLS_D5_BUG support
NOT BUG:Suggested by David Benjamin
BUG:MR: #1520
NOT BUG:Avoid using a dangling pointer when removing the last item
NOT BUG:When it's the last item that is removed int_thread_hash == hash and we would still call int_thread_release(&hash) while hash is already freed So int_thread_release would compare that dangling pointer to NULL which is undefined behaviour Instead do already what int_thread_release() would do and make the call do nothing instead
BUG:RT: #4155 MR: #1519
NOT BUG:Memory leak in state machine in error path
NOT BUG:When EC is disabled and an error occurs in ssl_generate_master_secret() or RAND_bytes() the error path does not free rsa_decrypt
NOT BUG:RT#4197
NOT BUG:Refactor DTLS cookie generation and verification
NOT BUG:DTLS cookie generation and verification were exact copies of each other save the last few lines This refactors them to avoid code copying
NOT BUG:Fix inline build failure
NOT BUG:After the recent change to use ossl_inline builds were failing on some platforms due to a missing usage of "inline"
NOT BUG:Add ossl_inline
NOT BUG:Add macro ossl_inline for use in public headers where a portable inline is required Change existing inline to use ossl_inline
NOT BUG:add -unref option to mkerr.pl
NOT BUG:In mkerr.pl look in directories under ssl/
NOT BUG:remove unused error code
NOT BUG:make update
BUG:unload modules in ssltest
NOT BUG:make errors
NOT BUG:SSL configuration module docs
NOT BUG:Demo server using SSL_CTX_config
NOT BUG:Add ssl configuration support to s_server and s_client
NOT BUG:Load module in SSL_library_init
NOT BUG:Add ssl_mcnf.c to Makefile
NOT BUG:SSL library configuration module
NOT BUG:This adds support for SSL/TLS configuration using configuration modules Sets of command value pairs are store and can be replayed through an SSL_CTX or SSL structure using SSL_CTX_config or SSL_config
NOT BUG:Cleanup CRYPTO_{push,pop}_info
NOT BUG:Rename to OPENSSL_mem_debug_{push,pop} Remove simple calls; keep only calls used in recursive functions Ensure we always push to simplify so that we can always pop
NOT BUG:Rename *_realloc_clean to *_clear_realloc
NOT BUG:Just like *_clear_free routines Previously undocumented used a half-dozen times within OpenSSL source
NOT BUG:Also change the non-debug versions to use size_t
BUG:MR: #1518
NOT BUG:Fix memory leak in DSA redo case
NOT BUG:Found by clang scan-build
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:RT: #4184 MR: #1496
NOT BUG:Configure: refine 'reconf' logic
NOT BUG:bn/asm/bn-c64xplus.asm: update commentary
NOT BUG:sha/asm/sha256-armv4.pl: one of "universal" flags combination didn't compile (and unify table address calculation in ARMv8 code path)
NOT BUG:Fix URLs mangled by reformat
NOT BUG:Some URLs in the source code ended up getting mangled by indent This fixes it Based on a patch supplied by Arnaud Lacombe <al@aerilon.ca>
NOT BUG:Fix the etags action line as etags doesn't take -R
NOT BUG:Remove fixed DH ciphersuites
NOT BUG:Remove all fixed DH ciphersuites and associated logic
NOT BUG:delete unused context
BUG:Remove some L<asdf|asdf> which crept back in
NOT BUG:Remove err and prime demo's
NOT BUG:ERR is not really a public facility; remove the demo prime shows how to generate a prime See apps
NOT BUG:Remove the "eay" c-file-style indicators
NOT BUG:Since we don't use the eay style any more there's no point tryint to tell emacs to use it
BUG:Add SSL_CIPHER_description() for Chacha20/Poly1305
NOT BUG:SSL_CIPHER_description() was returning "unknown" for the encryption in the new ChaCha20/Poly1305 TLS ciphersuites
BUG:RT#4183
NOT BUG:Modify the lower level memory allocation routines to take size_t
NOT BUG:We've been using int for the size for a long time it's about time..
NOT BUG:mem-cleanup cont'd
NOT BUG:Remove LEVITTE_DEBUG_MEM Remove {OPENSSL,CRYPTO}_remalloc
NOT BUG:Rename sec_mem to mem_sec like other files
NOT BUG:Fix typo
NOT BUG:Provide better "make depend" warning
NOT BUG:Fix no-dgram
NOT BUG:Rename some BUF_xxx to OPENSSL_xxx
NOT BUG:Rename BUF_{strdup,strlcat,strlcpy,memdup,strndup,strnlen} to OPENSSL_{strdup,strlcat,strlcpy,memdup,strndup,strnlen} Add #define's for the old names Add CRYPTO_{memdup,strndup} called by OPENSSL_{memdup,strndup} macros
NOT BUG:fix for no-ec
NOT BUG:make update
NOT BUG:Use EVP_PKEY for client side EC
NOT BUG:Use EVP_PKEY for server EC
NOT BUG:Add ECDH/DH utility functions
NOT BUG:remove unnecessary key copy
NOT BUG:Constify EC_KEY in ECDH_compute_key
NOT BUG:Remove ECDH client auth code
NOT BUG:Remove incomplete non-functional ECDH client authentication code
NOT BUG:Remove SSL_OP_SINGLE_ECDH_USE code
NOT BUG:Since auto ecdh is now always used SSL_OP_SINGLE_ECDH_USE is redundant Simplify associated code
NOT BUG:Use EC_KEY_key2buf and EC_oct2key in libssl
NOT BUG:New EC functions
NOT BUG:New functions EC_POINT_point2buf and EC_KEY_key2buf which encode a point and allocate a buffer in one call
NOT BUG:New function EC_KEY_oct2key() which sets public key in an EC_KEY structure from an encoded point
NOT BUG:Fix build on Solaris
NOT BUG:Solaris builds were failing during async compilation because the .o files created from compiling the corresponding .c files held in async/arch were ending up in the top level async directory Consequently the link fails because it can't find the .o files
NOT BUG:Thanks to Richard Levitte for pointing me in the right direction on this
NOT BUG:Fix updating via mkdef.pl
NOT BUG:The previous commit introduced a new file format for ssleay.num and libeay.num i.e the introduction of a version field Therefore the update capability in mkdef.pl needs updating to take account of the new format
NOT BUG:Don't export internal symbols
NOT BUG:On Linux when creating the .so file we were exporting all symbols We should only be exporting public symbols This commit fixes the issue It is only applicable to linux currently although the same technique may work for other platforms (e.g Solaris should work the same way)
NOT BUG:This also adds symbol version information to our exported symbols
NOT BUG:Better splitting regexp for test_ordinals
NOT BUG:Remove GMP engine
NOT BUG:Fix s_server problem with no-ec
NOT BUG:s_server was trying to set the ECDH curve when no-ec was defined This also highlighted the fact that the -no_ecdhe option to s_server is broken and doesn't make any sense any more (ECDHE is on by default and the only way it can be disabled is through the cipherstring) Therefore this commit removes the option
NOT BUG:Fix no-psk compile failure
NOT BUG:Fix compile failure with no-srp
NOT BUG:Update EVP_PKEY documentation
NOT BUG:Add EVP_PKEY_up_ref() documentation and fix various typos
NOT BUG:make update
NOT BUG:New function X509_get0_pubkey
NOT BUG:Add EVP_PKEY_get0_* functions
NOT BUG:Extend EVP_PKEY_copy_parameters()
NOT BUG:Make EVP_PKEY_copy_parameters() work if the destination has no type (e.g if obtained from EVP_PKEY_new()) or the underlying key is NULL This is useful where we want to copy the parameters from an existing key to a new key
NOT BUG:Fix a ** 0 mod 1 = 0 for real this time
BUG:Commit 2b0180c37fa6ffc48ee40caa831ca398b828e680 attempted to do this but only hit one of many BN_mod_exp codepaths Fix remaining variants and add a test for each method
BUG:Thanks to Hanno Boeck for reporting this issue
NOT BUG:crpyto/ppccpuid.pl: add FPU probe and fix OPENSSL_rdtsc
NOT BUG:crypto/ppccap.c: add SIGILL-free processor capability detection code
NOT BUG:add malloc fail check & fix memory leak
NOT BUG:Signed-off-by: Hongze Zhu <hongze.zhu@gmail.com>
NOT BUG:Fix erroneous SO suffix in darwin64-debug-test-64-clang target
NOT BUG:Fix typo
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fix option value parsing in crl2pkcs7 -certfile
NOT BUG:Avoid erroneous "assert(private)" failures
NOT BUG:When processing a public key input via "-pubin" "private" was sometimes erroneously set or else not set and incorrectly asserted
NOT BUG:x86_64 assembly pack: tune clang version detection even further
BUG:RT#4171
NOT BUG:Configure: add framework for ChaCha and Poly1305 assembly
NOT BUG:Configure: 'reconf' to respect CROSS_COMPILE and CC
NOT BUG:Don't use EC when no-ec
NOT BUG:Remove no longer existant structure member and direct references to EVP_MD_CTX internals
NOT BUG:Fix (incorrect) uninitialised variable warning
NOT BUG:fix warning
NOT BUG:remove ancient SSLeay bug workaround
NOT BUG:Allow ChaCha20-Poly1305 in DTLS
NOT BUG:GCM and CCM are modes of operation for block ciphers only ChaCha20-Poly1305 operates in neither of them but it is AEAD This change also enables future AEAD ciphers to be available for use with DTLS
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Revert "Allow ChaCha20-Poly1305 in DTLS"
NOT BUG:This reverts commit 777f482d993322d69025014bf1b99c270c978fc0 Author credit missing Reverting this and re-committing with an Author line
NOT BUG:Use SHA256 not MD5 as default digest
NOT BUG:(Documentation update was in the MR but not the commit Oops.)
NOT BUG:Support ccache
NOT BUG:Fix compile failure with no-threads
NOT BUG:The async code was causing a compile failure if no-threads was used
NOT BUG:Add extension utility documentation
NOT BUG:add X509_up_ref() documentation
NOT BUG:extension documentation
NOT BUG:Use OPENSSL_NO_DTLS instead of OPENSSL_NO_DTLS1
NOT BUG:Fix compile failure
NOT BUG:Fix compile failure introduced by commit 94d61512360c due to a typo
NOT BUG:evp/e_chacha20_poly1305.c: TLS interop fixes
NOT BUG:Thanks to: David Benjamin of Chromuim
NOT BUG:Configurations/10-main.conf: fix typos in mingw/cygwin configs
NOT BUG:Allow ChaCha20-Poly1305 in DTLS
NOT BUG:GCM and CCM are modes of operation for block ciphers only ChaCha20-Poly1305 operates in neither of them but it is AEAD This change also enables future AEAD ciphers to be available for use with DTLS
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Make no-dh work plus other no-dh problems found by Richard
NOT BUG:make update missed file
NOT BUG:Use SHA256 not MD5 as default digest
NOT BUG:make update
NOT BUG:Adapt EVP tests to the opaque EVP_ENCODE_CTX
NOT BUG:Adapt PEM routines to the opaque EVP_ENCODE_CTX
NOT BUG:Adapt BIO_f_base64 to the opaque EVP_ENCODE_CTX
NOT BUG:Make EVP_ENCODE_CTX opaque
BUG:Fix OCB link
BUG:The link to the OCB patent pdf changed so the link in CHANGES needs to be updated
NOT BUG:Support the TLS Feature (aka Must Staple) X.509v3 extension (RFC7633)
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #495 MR: #1435
NOT BUG:Restore full support for EVP_CTX_create() etc
NOT BUG:Prepare for 1.1.0-pre2-dev
NOT BUG:Prepare for 1.1.0-pre1 release
NOT BUG:OpenSSL 1.1.0 is now in pre release
NOT BUG:make update
NOT BUG:Don't run rehash as part of building the openssl app
NOT BUG:Update CHANGES and NEWS for alpha release
NOT BUG:Misc updates to the CHANGES and NEWS files ready for the alpha release
NOT BUG:Ensure |rwstate| is set correctly on BIO_flush
NOT BUG:A BIO_flush call in the DTLS code was not correctly setting the |rwstate| variable to SSL_WRITING This means that SSL_get_error() will not return SSL_ERROR_WANT_WRITE in the event of an IO retry
NOT BUG:Fix DTLS handshake fragment retries
NOT BUG:If using DTLS and NBIO then if a second or subsequent handshake message fragment hits a retry then the retry attempt uses the wrong fragment offset value This commit restores the fragment offset from the last attempt
BUG:evp/e_aes.c: wire hardware-assisted block function to OCB
NOT BUG:x86[_64] assembly pack: add optimized AES-NI OCB subroutines
NOT BUG:Fix mkfiles for new directories
NOT BUG:Add the new chacha and poly1305 directories to mkfiles.pl to enable proper building on windows
NOT BUG:Add a return value check
NOT BUG:If the call to OBJ_find_sigid_by_algs fails to find the relevant NID then we should set the NID to NID_undef
NOT BUG:modes/ocb128.c: fix overstep
NOT BUG:make update
NOT BUG:Configure: make no-chacha and no-poly1305 work
BUG:Wire ChaCha20-Poly1305 to TLS
BUG:evp/c_allc.c: wire ChaCha20-Poly1305 and add tests
NOT BUG:test/evp_test.c: allow generic AEAD ciphers to be tested
NOT BUG:crypto/evp: add e_chacha20_poly1305.c
NOT BUG:evp/evp_enc.c: allow EVP_CIPHER.ctx_size to be 0
NOT BUG:In such case it would be EVP_CIPHER.cleanup's reponsibility to wipe EVP_CIPHEX_CTX.cipher_data
NOT BUG:Add ChaCha20-Poly1305 and ChaCha20 NIDs
NOT BUG:Add reference ChaCha20 and Poly1305 implementations
NOT BUG:make default_ec_key_meth static
NOT BUG:remove deleted directories from mkfiles.pl
NOT BUG:Fix warnings about unused variables when EC is disabled
NOT BUG:Move the definitions of EC_KEY and EC_KEY_METHOD to ossl_typ.h
NOT BUG:Most of all that has inclusion of openssl/engine.h work even if EC has been disabled This is the same as has been done for DH DSA RSA and more..
NOT BUG:add CHANGES and NEWS entry
NOT BUG:Todo: update documentation
NOT BUG:remove ECDSA error line
NOT BUG:add compatibility headers
NOT BUG:Use NULL comparison
NOT BUG:add block comment
NOT BUG:set standard EC method in eng_openssl
NOT BUG:make update
NOT BUG:remove ecdsa.h header references
NOT BUG:EC_KEY_METHOD accessors
NOT BUG:Set of accessors to set and get each field
NOT BUG:make errors
NOT BUG:Top level ECDSA sign/verify redirection
NOT BUG:Engine EC_KEY_METHOD functionality
NOT BUG:Rename ENGINE _EC_KEY functions to _EC Add support for EC_KEY_METHOD in ENGINE_set_default et al Copy ec_meth
NOT BUG:remove ecdsa from mkdef.pl
NOT BUG:remove ECDSA_METHOD from ENGINE
NOT BUG:remove ECDSA_METHOD typedef
NOT BUG:add missing prototypes
NOT BUG:remove ecdsa.h header
NOT BUG:add ECDSA_size to ec_asn1.c
NOT BUG:remove errors
NOT BUG:remove crypto/ecdsa
NOT BUG:add sign/verify methods
NOT BUG:return errors for unsupported operations
NOT BUG:Remove reference to ECDSA_OpenSSL
NOT BUG:Move and adapt ECDSA sign and verify functions
NOT BUG:modify ecdsatest to use accessor
NOT BUG:Add ECDSA_SIG accessor
NOT BUG:move ECDSA_SIG prototypes
NOT BUG:make errors
NOT BUG:extend EC_KEY_METHOD for signing support
NOT BUG:adapt ossl_ecdsa.c to crypto/ec
NOT BUG:move ECDSA_SIG definition
NOT BUG:Move ECDSA implementation to crypto/ec
NOT BUG:Move ECDSA_SIG ASN.1 to crypto/ec
NOT BUG:Add set methods
NOT BUG:Add set_group set_public and set_private methods An EC_KEY_METHOD can use these to perform any appropriate operation when the key components are set such as caching data in some more convenient ENGINE specific format or returning an error if the parameters are invalid or the operation is not supported
NOT BUG:EC_KEY_METHOD copy support
NOT BUG:EC_KEY_METHOD init and finish support
NOT BUG:ENGINE fixes
NOT BUG:remove ECDH from mkdef.pl
NOT BUG:remove ECDH_METHOD typedef
NOT BUG:remove ecdh.h header
NOT BUG:Remove redundant ecdh.h header and any references to it
NOT BUG:remove ECDH error loading
NOT BUG:Remove crypto/ecdh update Makefile.org
NOT BUG:remove ECDH_METHOD from ENGINE
NOT BUG:make errors
NOT BUG:Add compute key support to EC_KEY_METHOD
NOT BUG:Adapt ecdh_compute_key
NOT BUG:Rename ecdh_compute_key into ossl_ecdh_compute_key and modify it to use EC error codes Remove superfluous old ECDH functions
NOT BUG:move ECDH implementation to crypto/ec
NOT BUG:Move ECDH_KDF_X9_62 to crypto/ec
NOT BUG:EC_KEY_METHOD keygen support
NOT BUG:Add keygen to EC_KEY_METHOD Redirect EC_KEY_generate_key through method and set the current EC key generation function as the default
NOT BUG:make errors
NOT BUG:Support for EC_KEY_METHOD
NOT BUG:Add EC_KEY_METHOD This is part of the EC revision and will make EC behave more like other algorithms Specifically:
NOT BUG:EC_KEY_METHOD is part of EC_KEY It is part of ENGINE Default or key specific implementations can be provided to redirect some or all operations
NOT BUG:Link library for backtrace() on BSD..
NOT BUG:NEWS: Add a bit of precision regarding removal of cipher suites
NOT BUG:Suggested by Benjamin Kaduk <bkaduk@akamai.com>
NOT BUG:Additional NEWS
NOT BUG:Refer to website for acknowledgements
NOT BUG:Not all 'find's know -xtype use -type instead
NOT BUG:Adapt the OS X build to use the OS X tar
NOT BUG:As part of this move release creation to a script to be called from .travis.yml That makes it much easier to test outside of travis
NOT BUG:Make it possible to affect the way dists are made
BUG:Introducing DISTTARVARS to propagate changed variables down to the tar-making target
NOT BUG:Update NEWS
NOT BUG:Extended master secret test script
NOT BUG:Add extms extension
NOT BUG:TLSProxy update
NOT BUG:Add function to delete extensions and fix ClientHello repacking
NOT BUG:update errors
NOT BUG:Extended master secret fixes and checks
NOT BUG:Add new flag TLS1_FLAGS_RECEIVED_EXTMS which is set when the peer sends the extended master secret extension
NOT BUG:Server now sends extms if and only if the client sent extms
NOT BUG:Check consistency of extms extension when resuming sessions following (where practical) RFC7627
NOT BUG:Fix merge error
NOT BUG:Commit 6140f0365 added some new ctrl constants However due to a merge error one of these values was duplicated with an existing value
NOT BUG:Add some new cipher ctrl constants
NOT BUG:These are needed for GOST
NOT BUG:Cleanup the EVP_MD_CTX before exit rather than after
BUG:Remove double semi (;)
NOT BUG:When in the middle of declarations some C compilers will complain
NOT BUG:Remove typedef of HMAC_CTX from crypto/hmac/hmac_lcl.h
NOT BUG:This is already defined in include/openssl/ossl_typ.h
NOT BUG:Fix clang complaints about uninitialised variables
NOT BUG:Change tar owner and group to just 0
NOT BUG:It seems like some tar versions don't like the name:id form for --owner and --group The closest known anonymous user being 0 (root) that seems to be the most appropriate user/group to assign ownership to It matters very little when unpacking either way
NOT BUG:Add an entry in CHANGES
NOT BUG:Document EVP_MD constructors destructors and manipulators
NOT BUG:Document the HMAC changes
NOT BUG:Document the EVP_MD_CTX changes
NOT BUG:make update
NOT BUG:Cleanup: fix all sources that used HMAC_CTX_init
NOT BUG:Cleanup: rename HMAC_CTX_init to HMAC_CTX_reset
NOT BUG:Cleanup: support EVP_MD_CTX_(create|init|destroy) for deprecated use
NOT BUG:Cleanup: fix all sources that used EVP_MD_CTX_(create|init|destroy)
NOT BUG:Cleanup: rename EVP_MD_CTX_(create|init|destroy) to EVP_MD_CTX_(new|reset|free)
NOT BUG:Looking over names it seems like we usually use names ending with _new and _free as object constructors and destructors Also since EVP_MD_CTX_init is now used to reset a EVP_MD_CTX it might as well be named accordingly
NOT BUG:Cleanup: Remove M_EVP_MD_* macros
NOT BUG:These macros were only meant for crypto/evp and are now entirely unused
NOT BUG:Adapt the rest of the source to the removal of (EVP_MD_CTX|HMAC_CTX)_cleanup
NOT BUG:Remove HMAC_CTX_cleanup and combine its functionality into EVP_MD_CTX_init
NOT BUG:This follows the same idea as the combination of EVP_MD_CTX_cleanup and EVP_MD_CTX_init into one function
NOT BUG:Remove EVP_MD_CTX_cleanup and put its functionality into EVP_MD_CTX_init
NOT BUG:The idea is that with EVP_MD_CTX_create() and EVP_MD_CTX_destroy() EVP_MD_CTX_cleanup and EVP_MD_CTX_init is not used the same as before Instead we need a single function that can be used to reinitialise an existing EVP_MD_CTX that's been created with EVP_MD_CTX_create() previously Combining EVP_MD_CTX_cleanup and EVP_MD_CTX_init into that one function is the answer
NOT BUG:Adapt the rest of the source to the opaque HMAC_CTX
NOT BUG:Make the definition of HMAC_CTX opaque
NOT BUG:This moves the definition to crypto/hmac/hmac_lcl.h Constructor and destructor added and the typedef moved to include/openssl/ossl_typ.h
NOT BUG:Add inclusion of internal/evp_int.h to all crypto/ files that need it
NOT BUG:These are the files that add new EVP_MDs
NOT BUG:Adapt all engines that add new EVP_MDs
NOT BUG:Have the few apps that accessed EVP_MD directly use accessors instead
NOT BUG:Make the definition of EVP_MD opaque
NOT BUG:This moves the definition to crypto/include/internal/evp_int.h and defines all the necessary method creators destructors writers and accessors The name standard for the latter is inspired from the corresponding functions to manipulate UI methods
NOT BUG:Adjust all accesses to EVP_MD_CTX to use accessor functions
NOT BUG:Document the changed HMAC API
NOT BUG:Adapt HMAC to the EVP_MD_CTX changes
NOT BUG:This change required some special treatment as HMAC is intertwined with EVP_MD For now all local HMAC_CTX variables MUST be initialised with HMAC_CTX_EMPTY or whatever happens to be on the stack will be mistaken for actual pointers to EVP_MD_CTX This will change as soon as HMAC_CTX becomes opaque
NOT BUG:Also since HMAC_CTX_init() can fail now its return type changes from void to int and it will return 0 on failure 1 on success
NOT BUG:Have other crypto/evp files include evp_locl.h
NOT BUG:Note: this does not include the files in crypto/evp that are just instanciations of EVP_MD
NOT BUG:Make the definition of EVP_MD_CTX opaque
NOT BUG:This moves the definitionto crypto/evp/evp_locl.h along with a few associated accessor macros A few accessor/writer functions added
NOT BUG:Do not add symlinks in the source release
NOT BUG:In travis build from a "source release" rather than from the build tree
NOT BUG:Small changes to creating dists
NOT BUG:Make TARFILE include ../ instead of having that hard coded all over the place When transforming file names in TAR_COMMAND use $(NAME) instead of openssl-$(VERSION)
NOT BUG:Fix and update versions in CHANGES and NEWS
NOT BUG:ARMv4 assembly pack: allow Thumb2 even in iOS build and engage it in most modules
NOT BUG:Fix typo and improve a bit of text
NOT BUG:Really disable 56-bit (single-DES) ciphers
NOT BUG:Remove support for all 40 and 56 bit ciphers
BUG:MR: #364
NOT BUG:Remove SSL_{CTX_}set_ecdh_auto() and always enable ECDH
NOT BUG:Make SSL_{CTX}_set_tmp_ecdh() call SSL_{CTX_}set1_curves()
NOT BUG:SSL_{CTX}_set_tmp_ecdh() allows to set 1 EC curve and then tries to use it On the other hand SSL_{CTX_}set1_curves() allows you to set a list of curves but only when SSL_{CTX_}set_ecdh_auto() was called to turn it on
NOT BUG:Remove support for SSL_{CTX_}set_tmp_ecdh_callback()
NOT BUG:This only gets used to set a specific curve without actually checking that the peer supports it or not and can therefor result in handshake failures that can be avoided by selecting a different cipher
NOT BUG:Fix EAP FAST in the new state machine
NOT BUG:The new state machine code missed an allowed transition when resuming a session via EAP FAST This commits adds the missing check for the transition
NOT BUG:Revert unnecessary SSL_CIPHER_get_bits API change
NOT BUG:Run test/run_tests.pl directly in the test_ordinals target
NOT BUG:Running 'make TEST=test_ordinals test' starts the whole build process which wasn't desired for this target Instead we take a shortcut
NOT BUG:bn/asm/x86_64-mont5.pl: fix carry propagating bug (CVE-2015-3193)
NOT BUG:perlasm/ppc-xlate.pl: comply with ABIs that specify vrsave as reserved
NOT BUG:RT#4162
NOT BUG:modes/ocb128.c: fix sanitizer warning
NOT BUG:Fix ./Configure reconf
NOT BUG:'./Configure reconf' hasn't been working for a while because a perl lable needs to be immediately followed by a block
NOT BUG:Remove RSA_FLAG_SIGN_VER flag
NOT BUG:Remove RSA_FLAG_SIGN_VER: this was origininally used to retain binary compatibility after RSA_METHOD was extended to include rsa_sign and rsa_verify fields It is no longer needed
NOT BUG:Move the backtrace memleak options to a separate variable
NOT BUG:The contents of this variable ($memleak_devteam_backtrace) is added to $cflags unless we build for a platform we know doesn't support gcc's -rdynamic och backtrace() and friends
NOT BUG:make update
NOT BUG:Remove legacy sign/verify from EVP_MD
NOT BUG:Remove sign/verify and required_pkey_type fields of EVP_MD: these are a legacy from when digests were linked to public key types All signing is now handled by the corresponding EVP_PKEY_METHOD
NOT BUG:Only allow supported digest types in RSA EVP_PKEY_METHOD: other algorithms already block unsupported types
NOT BUG:Remove now obsolete EVP_dss1() and EVP_ecdsa()
NOT BUG:Run test_ordinals after update
NOT BUG:Catch a common 'make update' failure: conflicting ordinals
NOT BUG:_BSD_SOURCE is deprecated use _DEFAULT_SOURCE instead
NOT BUG:The feature_test_macros(7) manual tells us that _BSD_SOURCE is deprecated since glibc 2.20 and that the compiler will warn about it being used unless _DEFAULT_SOURCE is defined as well
NOT BUG:Add backtrace to memory leak output
NOT BUG:This is an option for builds with gcc and --strict-warnings
NOT BUG:crypto/sparcv9cap.c: add SIGILL-free feature detection for Solaris
NOT BUG:modes/ocb128.c: split fixed block xors to aligned and misaligned
BUG:Main goal was to improve performance on RISC platforms e.g 10% was measured on MIPS POWER8..
NOT BUG:modes/ocb128.c: ocb_lookup_l to allow non-contiguous lookup and CRYPTO_ocb128_encrypt to handle in==out
NOT BUG:typo fix on function
NOT BUG:ex_data part 2: doc fixes and CRYPTO_free_ex_index
NOT BUG:Add CRYPTO_free_ex_index (for shared libraries) Unify and complete the documentation for all "ex_data" API's and objects Replace xxx_get_ex_new_index functions with a macro Added an exdata test Renamed the ex_data internal datatypes
NOT BUG:Remove BN_init
NOT BUG:Rename it to be an internal function bn_init
NOT BUG:Remove GOST special case: handled automatically now
NOT BUG:Use digest indices for signature algorithms
NOT BUG:Don't hard code EVP_sha* etc for signature algorithms: use table indices instead Add SHA224 and SHA512 to tables
NOT BUG:For TLS < 1.2 use default digest for client certificate
NOT BUG:Use digest tables for defaults
NOT BUG:Correct aes-128-cbc cipher name
NOT BUG:fix function code discrepancy
NOT BUG:PRF and handshake hash revision
NOT BUG:Change handshake hash array into a single digest context simplifying the handhake hash code Use EVP_md5_sha1() if needed for handshake hashes in TLS 1.1 and earlier
NOT BUG:Simplify PRF code to also use a single digest and treat EVP_md5_sha1() as a special case
NOT BUG:Modify algorithm2 field of ciphers to use a single index value for handshake hash and PRF instead of a bitmap
BUG:Updates to GOST2012
NOT BUG:Various updates following feedback from the recent commit of the new GOST2012 code
NOT BUG:Remove X509_VERIFY_PARAM_ID
NOT BUG:Now that X509_VERIFY_PARAM is opaque X509_VERIFY_PARAM_ID is no longer needed
NOT BUG:Fix a NULL deref in an error path
NOT BUG:The SRP_create_verifier_BN function goes to the |err| label if the |salt| value passed to it is NULL It is then deref'd
NOT BUG:Add documentation for BN_with_flags
NOT BUG:Following on from the previous commit this adds some documentation for the BN_with_flags function which is easy to misuse
NOT BUG:Tighten up BN_with_flags usage and avoid a reachable assert
NOT BUG:The function rsa_ossl_mod_exp uses the function BN_with_flags to create a temporary copy (local_r1) of a BIGNUM (r1) with modified flags This temporary copy shares some state with the original r1 If the state of r1 gets updated then local_r1's state will be stale This was occurring in the function so that when local_r1 was freed a call to bn_check_top was made which failed an assert due to the stale state To resolve this we must free local_r1 immediately after we have finished using it and not wait until the end of the function
NOT BUG:This problem prompted a review of all BN_with_flag usage within the codebase All other usage appears to be correct although often not obviously so This commit refactors things to make it much clearer for these other uses
NOT BUG:Remove unused cert_verify_mac code
NOT BUG:Configuratons: add -DFILIO_H to harmonized Solaris targets
NOT BUG:Triggered by RT#4144
NOT BUG:Remove useless locking code
BUG:Follow-up to 070c233
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #454
NOT BUG:Fix typo: _REENTERANT -> _REENTRANT
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #484
NOT BUG:mark openssl configuration as loaded at end of OPENSSL_config
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #466
NOT BUG:Fix grammar errors
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #481
NOT BUG:ssl3_free(): Return if it wasn't created
NOT BUG:If somewhere in SSL_new() there is a memory allocation failure ssl3_free() can get called with s->s3 still being NULL
NOT BUG:Patch also provided by Willy Tarreau <wtarreau@haproxy.com>
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:Add ctrl for SHA1 and SSLv3
NOT BUG:Add SSLv3 ctrl to EVP_sha1() this is only needed if SSLv3 client authentication is used with DSA/ECDSA
NOT BUG:make update
NOT BUG:Use EVP_md5_sha1() to process client verify
NOT BUG:Use EVP_md5_sha1() to generate client verify
NOT BUG:Add EVP_MD_CTX_ctrl function
BUG:Add ssl3 ctrl to EVP_md5_sha1()
NOT BUG:Add a ctrl to EVP_md5_sha1() to handle the additional operations needed to handle SSL v3 client authentication and finished message
NOT BUG:Remove RSA exception when generating server key exchange
NOT BUG:Remove RSA exception when processing server key exchange
NOT BUG:Use MD5+SHA1 for default digest if appropriate
NOT BUG:Add MD5+SHA1
NOT BUG:Add digest combining MD5 and SHA1 This is used by RSA signatures for TLS 1.1 and earlier
NOT BUG:Fix uninitialised p error
NOT BUG:Limit depth of ASN1 parse printing
NOT BUG:Thanks to Guido Vranken <guidovranken@gmail.com> for reporting this issue
NOT BUG:Drop the old perl start magic and replace it with a normal shebang
BUG:perlrun(1) leads the way
NOT BUG:Add perl modeline to Configure scripts
BUG:Encourages GitHub to perform proper syntax highlighting
NOT BUG:"make update" after async merge
NOT BUG:Fix a few missed "if (!ptr)" cleanups
NOT BUG:And a scalar !x --> x==0 test
BUG:Patch containing TLS implementation for GOST 2012
NOT BUG:This patch contains the necessary changes to provide GOST 2012 ciphersuites in TLS It requires the use of an external GOST 2012 engine
NOT BUG:x86_64 assembly pack: tune clang version detection
BUG:RT#4142
NOT BUG:Makefile.org: add LC_ALL=C to unify error [and other] messages
BUG:RT#4138
NOT BUG:e_os.h: __sun done right
NOT BUG:RT #4144
NOT BUG:Fix a rebase error
NOT BUG:During rebasing of the async changes some error codes ended up being duplicated so that "make errors" fails This removes the duplication
NOT BUG:Async error handling and MacOS/X fixes
NOT BUG:In the async code for MacOS/X define _XOPEN_SOURCE (if not already defined) as early as possible We must do this before including any header files because on MacOS/X <stlib.h> includes <signal.h> which includes <ucontext.h> If we delay defining _XOPEN_SOURCE and include <ucontext.h> after various system headers are included we are very likely to end up with the wrong (truncated) definition of ucontext_t
NOT BUG:Also better error handling and some code cleanup in POSIX fibre construction and destruction We make sure that async_fibre_makecontext() always initializes the fibre to a state that can be freed
NOT BUG:For all implementations check for error returns from async_fibre_makecontext()
NOT BUG:Use defined(__sun) instead of defined(sun)
NOT BUG:Strict ISO confirming C compilers only define __sun
NOT BUG:RT #4144 MR #1353
NOT BUG:Update dasync to use size_t for the sha1 update
BUG:MR #1350
NOT BUG:Add initial AppVeyor configuration
BUG:Original patch by Frank Morgner
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #456
NOT BUG:Turn B<...()> into ...()
NOT BUG:For all functions consistently use asdf() not B<asdf()>
NOT BUG:Fix "primarility" typo
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:GH: #458
NOT BUG:Minor correction to comment
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:Fix STRICT_ALIGNMENT for whrlpool
NOT BUG:Declare cleanse_ctr variable as extern
NOT BUG:Add no-asm builds to Travis
NOT BUG:Fix (minor) problems found by ubsan
NOT BUG:Add Travis builds with undefined behavior sanitizer
NOT BUG:add -pthread to debug-steve*
NOT BUG:Good hygiene with size_t output argument
NOT BUG:Though the callers check the function return value and ignore the size_t output argument on failure it is still often not ideal to store (-1) in size_t on error That might signal an unduly large buffer Instead set the size_t to 0 to indicate no space
NOT BUG:Implement windows async thread local variable support
NOT BUG:Implements Thread Local Storage in the windows async port This also has some knock on effects to the posix and null implementations
NOT BUG:Convert __thread to pthreads for Thread Local Storage
BUG:In theory the pthreads approach for Thread Local Storage should be more portable
NOT BUG:This also changes some APIs in order to accommodate this change In particular ASYNC_init_pool is renamed ASYNC_init_thread and ASYNC_free_pool is renamed ASYNC_cleanup_thread Also introduced ASYNC_init and ASYNC_cleanup
NOT BUG:Simplify async pool handling
NOT BUG:A lot of the pool handling code was in the arch specific files but was actually boiler plate and the same across the implementations This commit moves as much code as possible out of the arch specific files
NOT BUG:Swap to using proper windows pipes
NOT BUG:We were using _pipe to create a pipe on windows This uses the "int" type for its file descriptor for compatibility However most windows functions expect to use a "HANDLE" Probably we could get away with just casting but it seems more robust to use the proper type and main stream windows functions
NOT BUG:Fix some style issues
NOT BUG:There were a number of places where the async code did not conform to the OpenSSL coding style
NOT BUG:Fix async deadlock problem
NOT BUG:The rand code can aquire locks and then attempt crypto operations This can end up in a deadlock if we are using an async engine because control returns back to the user code whilst still holding the lock We need to force synchronous operation for these sections of code
NOT BUG:Add ASYNC_block_pause and ASYNC_unblock_pause
NOT BUG:There are potential deadlock situations that can occur if code executing within the context of a job aquires a lock and then pauses the job This adds an ability to temporarily block pauses from occuring whilst performing work and holding a lock
NOT BUG:Remove ASYNC NOEXIST functions from libeay.num
NOT BUG:During development some functions got added and then later taken away Since these will never appear in a production version there is no reason for them to appear in libeay.num flagged as "NOEXIST"
NOT BUG:Further OS-X deprecated warnings tweak
NOT BUG:Even with _XOPEN_SOURCE defined OS-X still displays warnings that makecontext and friends are deprecated This isn't a problem until you try and build with --strict-warnings and the build fails This change suppresses the warnings We know they are deprecated but there is no alternative!
NOT BUG:Fix bug in async_fibre_makecontext for POSIX
NOT BUG:async_fibre_makecontext was initialise the fibre first and then calling getcontext() It should be the other way around because the getcontext call may overwrite some of the things we just initialised This didn't cause an issue on Linux and so the problem went unnoticed On OS-X it causes a crash
NOT BUG:Rename start_async_job to ssl_start_async_job
NOT BUG:Make it clear that this function is ssl specific
NOT BUG:Rename some daysnc functions for consistency
NOT BUG:For some reason the dasync sha1 functions did not start with the dasync prefix like all of the other functions do Changed for consistency
NOT BUG:Add clarification to docs on ASYNC_free_pool()
NOT BUG:Clarify that you must only call this after all async jobs have completed - otherwise you could get memory leaks
NOT BUG:Fix compilation error on OS-X
NOT BUG:OS-X complains if we don't have _XOPEN_SOURCE defined
NOT BUG:Fix clang errors
NOT BUG:Make clang build without errors in the async code
BUG:Swap to using _longjmp/_setjmp instead of longjmp/setjmp
BUG:_longjmp/_setjmp do not manipulate the signal mask whilst longjmp/setjmp may do Online sources suggest this could result in a significant speed up in the context switching
NOT BUG:Fix Linux crash
NOT BUG:If config'd without -d (--debug) asynctest was crashing with: *** longjmp causes uninitialized stack frame ***
NOT BUG:This is because gcc will add certain checks for some functions (including longjmp) The checks assume you can only longjmp down the stack not up However if we are actually jumping to a different fibre then it can appear as if we are going up the stack when we are not really This change disables the check
NOT BUG:Tweak async documentation based on feedback
NOT BUG:Add some clarifications to the async documentation Also changed ASYNC_pause_job() so that it returns success if you are not within the context of a job This is so that engines can be used either asynchronously or synchronously and can treat an error from ASYNC_pause_job() as a real error
NOT BUG:Clean up libssl async calls
NOT BUG:Tidy up the libssl async calls and make sure all IO functions are covered
NOT BUG:make update
NOT BUG:Add ASYNC error codes
NOT BUG:Add ASYNCerr support to give some meaningful error message in the event of a failure
NOT BUG:Update CHANGES
NOT BUG:Add a CHANGES entry for the new async code
NOT BUG:Add s_client support for waiting for async
NOT BUG:s_server already had the ability to wait on an async file descriptor This adds it to s_client too
NOT BUG:Fix the error code for SSL_get_async_wait_fd()
NOT BUG:0 is a valid file descriptor so SSL_get_async_wait_fd should instead return -1 on error
NOT BUG:More async documentation
NOT BUG:Document the libssl and command line application aspects of async
NOT BUG:Normalise ASYNC naming
NOT BUG:Tidied up the naming of functions and structures to be consistent
NOT BUG:Fix windows compilation warnings
NOT BUG:Fix some warnings in the async code when compiling on windows
NOT BUG:Optimise ASYNC_CTX handling
NOT BUG:Don't recreate a new ASYNC_CTX every time we call ASYNC_start_job() - the same one can be used for the life of the thread Instead we only free it up when we call ASYNC_free_pool()
NOT BUG:Fix ASYNC null implementation
NOT BUG:The ASYNC null implementation has not kept pace with the rest of the async development and so was failing to compile
NOT BUG:Add ASYNC tests
NOT BUG:Add a suite of tests for the ASYNC_* functions
NOT BUG:Remove ASYNC_in_job()
NOT BUG:The ASYNC_in_job() function is redundant The same effect can be achieved by using ASYNC_get_current_job()
NOT BUG:Document async capabilities
NOT BUG:make update
NOT BUG:Implement windows async pool and notify support
NOT BUG:Port the async pool and notify code to windows
BUG:Fix pools for s_client
NOT BUG:s_client was not freeing up the async pool if async mode was enabled
NOT BUG:Fix s_server bug
NOT BUG:If an async event occurs during a renegotiation in SSL_read then s_server was looping around detecting we were in init and calling init_ssl_connection instead of re-calling SSL_read
NOT BUG:Implement local thread pools
NOT BUG:Implement the ASYNC_JOB as a local thread pool Remove the API support for global pools
NOT BUG:Initial Async notify code changes
NOT BUG:Initial API implemented for notifying applications that an ASYNC_JOB has completed Currently only s_server is using this The Dummy Async engine "cheats" in that it notifies that it has completed *before* it pauses the job A normal async engine would not do that
NOT BUG:Only the posix version of this has been implemented so far so it will probably fail to compile on Windows at the moment
BUG:Add ASYNC_JOB pools
NOT BUG:It is expensive to create the ASYNC_JOB objects due to the "makecontext" call This change adds support for pools of ASYNC_JOB objects so that we don't have to create a new ASYNC_JOB every time we want to use one
BUG:Use longjmp at setjmp where possible
BUG:Where we can we should use longjmp and setjmp in preference to swapcontext/ setcontext as they seem to be more performant
NOT BUG:Fix s_server -WWW with -async
NOT BUG:The s_server option -WWW was not async aware and therefore was not handling SSL_ERROR_WANT_ASYNC conditions This commit fixes that
NOT BUG:Async clean ups
NOT BUG:Removed the function ASYNC_job_is_waiting() as it was redundant The only time user code has a handle on a job is when one is waiting so all they need to do is check whether the job is NULL Also did some cleanups to make sure the job really is NULL after it has been freed!
NOT BUG:Increase stack size
NOT BUG:Some assembler code puts a lot of stuff on the stack so up the stack size
NOT BUG:Add null async implementation
NOT BUG:Create a "null" async implementation for platforms that lack support This just does nothing when called and therefore performs synchronously
NOT BUG:Async port to windows
NOT BUG:Various windows build fixes to prepare for windows port
NOT BUG:Add s_server and s_client async support
NOT BUG:A new -async option is added which activates SSL_MODE_ASYNC Also SSL_WANT_ASYNC errors are handled appropriately
NOT BUG:Make libssl async aware
NOT BUG:The following entry points have been made async aware: SSL_accept SSL_read SSL_write
NOT BUG:Also added is a new mode - SSL_MODE_ASYNC Calling the above functions with the async mode enabled will initiate a new async job If an async pause is encountered whilst executing the job (such as for example if using SHA1/RSA with the Dummy Async engine) then the above functions return with SSL_WANT_ASYNC Calling the functions again (with exactly the same args as per non-blocking IO) will resume the job where it left off
NOT BUG:Add the Dummy Async engine (dasync)
NOT BUG:This engine is for developers of async aware applications It simulates asynchronous activity with external hardware This initial version supports SHA1 and RSA Certain operations using those algorithms have async job "pauses" in them - using the new libcrypto async capability
NOT BUG:Add async sub-library to libcrypto
NOT BUG:Provides support for running asynchronous jobs Currently this is completely stand alone Future commits will integrate this into libssl and s_server/ s_client An asynchronous capable engine will be required to see any benefit from this capability
BUG:Add pthread support
NOT BUG:The forthcoming async code needs to use pthread thread local variables This updates the various Configurations to add the necessary flags In many cases this is an educated guess as I don't have access to most of these environments! There is likely to be some tweaking needed
NOT BUG:Fix uninitialised variable
NOT BUG:The al variable could be uninitialised in an error path
NOT BUG:BN_sub: document that r might be the same as a or b
BUG:RT #4100 MR #1264
NOT BUG:BN_usub: Don't copy when r and a the same
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:RT #4100 MR #1264
NOT BUG:make update
NOT BUG:Ensure all EVP calls have their returns checked where appropriate
NOT BUG:There are lots of calls to EVP functions from within libssl There were various places where we should probably check the return value but don't This adds these checks
BUG:Use better defaults for TSA
BUG:Use SHA256 for TSA and setted permitted digests to a sensible value
BUG:Based on PR#4141
NOT BUG:Add support for signer_digest option in TS
BUG:Based on PR#2145
NOT BUG:Make GOST ciphersuites require TLSv1
BUG:PR#4141
NOT BUG:aes/asm/vpaes-ppc.pl: eliminate overhung stores in misaligned cases
NOT BUG:e_os.h: bump minimal _WIN32_WINNT
NOT BUG:Rename RSA_eay_xxx to rsa_ossl_xxx
NOT BUG:Final part of flushing out SSLEay API's
NOT BUG:make update
NOT BUG:Check error return from sysconf in secure memory code
NOT BUG:We use the sysconf function to provide details about the page size in the secure memory code This function can return -1 on error so we should check for this before proceeding
NOT BUG:Add comment explaining why we don't check a return value
NOT BUG:A call to X509_verify_cert() is used to build a chain of certs for the server to send back to the client It isn't *actually* used for verifying the cert at all - just building the chain Therefore the return value is ignored
NOT BUG:Remove an NULL ptr deref in an error path
NOT BUG:The |passwd| variable in the code can be NULL if it goes to the err label Therefore we cannot call strlen on it without first checking that it is non NULL
NOT BUG:bn/asm/ppc64-mont.pl: adapt for little-endian
NOT BUG:The problem remained unnoticed so far because it's never called by default You have to craft OPENSSL_ppccap environment variable to trigger the problem
NOT BUG:crypto/sec_mem.c: fix anonymous mmap on legacy systems
NOT BUG:bn/asm/s390x.S: improve performance on z196 and z13 by up to 26% [even z10 is couple percent faster] Triggered by RT#4128 but solves the problem by real modulo-scheduling
BUG:aesni-sha256-x86_64.pl: fix crash on AMD Jaguar
BUG:It was also found that stich performs suboptimally on AMD Jaguar hence execution is limited to XOP-capable and Intel processors
NOT BUG:Explicit OpenSSL_version_num() implementation prototype
NOT BUG:Document new functions
NOT BUG:Use accessors for X509_print_ex()
NOT BUG:Print certificate details using accessor functions
NOT BUG:Since X509_CERT_AUX_print is only used in one place and can't be used by applications (it uses an internal X509_CERT_AUX structure) this has been removed and replaced by a function X509_aux_print which takes an X509 pointer instead
NOT BUG:Add new X509 accessors
NOT BUG:Update and clarify ciphers documentation
NOT BUG:add -psk option to ciphers command
NOT BUG:add -tls1_2,-tls1_1 options to ciphers command
NOT BUG:Add "TLSv1.0" cipher alias
NOT BUG:This adds a TLSv1.0 cipher alias for ciphersuites requiring at least TLSv1.0: currently only PSK ciphersuites using SHA256 or SHA384 MAC (SSLv3 only supports SHA1 and MD5 MAC)
NOT BUG:Don't alow TLS v1.0 ciphersuites for SSLv3
NOT BUG:This disables some ciphersuites which aren't supported in SSL v3: specifically PSK ciphersuites which use SHA256 or SHA384 for the MAC
NOT BUG:Thanks to the Open Crypto Audit Project for identifying this issue
NOT BUG:Use SSL_TLSV1 only if at least TLS v1.0 is needed
BUG:RT2667: Add IRC support to -starttls
NOT BUG:RT32671: wrong multiple errs TS_check_status_info
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:absent identity hint should be NULL
NOT BUG:modes/asm/ghash-armv4.pl: extend Apple fix to all clang cases Triggered by RT#3989
NOT BUG:Fix SSL_use_certificate_chain_file
NOT BUG:The new function SSL_use_certificate_chain_file was always crashing in the internal function use_certificate_chain_file because it would pass a NULL value for SSL_CTX * but use_certificate_chain_file would unconditionally try to dereference it
NOT BUG:Remove redundant check from tls1_get_curvelist
NOT BUG:The function tls1_get_curvelist() has an explicit check to see if s->cert is NULL or not However the check appears *after* calling the tls1_suiteb macro which derefs s->cert In reality s->cert can never be NULL because it is created in SSL_new() If the malloc fails then the SSL_new call fails and no SSL object is created
BUG:Continue malloc standardisation in engines
NOT BUG:Continuing from previous work standardise use of malloc in the engine code
BUG:Continue standardisation of malloc handling in apps
NOT BUG:continue on from previous commits but in the apps directory
BUG:Continue standardising malloc style for libcrypto
NOT BUG:Continuing from previous commit ensure our style is consistent for malloc return checks
NOT BUG:Standardise our style for checking malloc failures
NOT BUG:if we have a malloc |x = OPENSSL_malloc(...)| sometimes we check |x| for NULL and sometimes we treat it as a boolean |if(!x) ...| Standardise the approach in libssl
NOT BUG:Remove redundant check from SSL_shutdown
NOT BUG:The SSL object was being deref'd and then there was a later redundant check to see if it is NULL We assume all SSL_foo functions pass a non NULL SSL object and do not check it
NOT BUG:Make the match for previous cflags a bit more strict
NOT BUG:./Configure [target] --strict-warnings -Wno-pedantic-ms-format would not add '-pedantic' because it matches '-Wno-pedantic-ms-format' which was added first
NOT BUG:Replace L suffix with U
NOT BUG:Use uint32_t and int32_t for SSL_CIPHER structure
NOT BUG:Fix compilation problems with SCTP
NOT BUG:The SCTP code is not compiled by default This fixes some compilation problems in that code
NOT BUG:Remove some redundant assignments
NOT BUG:We were setting |s->renegotiate| and |s->new_session| to 0 twice in tls_finish_handshake This is redundant so now we just do it once!
NOT BUG:Don't finish the handshake twice
NOT BUG:We finish the handshake when we move into the TLS_ST_OK state At various points we were also unnecessarily finishing it when we were reading/writing the Finished message It's much simpler just to do it in TLS_ST_OK so remove the other calls
NOT BUG:Rebuild error source files
NOT BUG:Rebuild error source files: the new mkerr.pl functionality will now pick up and translate static function names properly
NOT BUG:fix discrepancy
NOT BUG:Read function names from C source files
NOT BUG:In mkerr.pl read parse functions names in C source files and use them for translation and sanity checks
NOT BUG:Ensure the dtls1_get_*_methods work with DTLS_ANY_VERSION
NOT BUG:The various dtls1_get*_methods did not handle the DTLS_ANY_VERSION case so this needed to be added
NOT BUG:Minor EVP_SignInit_ex doc fix
NOT BUG:EVP_SignInit_ex was missing from the NAME section of its man page so typing "man EVP_SignInit_ex" failed to load the page
NOT BUG:Fix usage of BIO_ctrl_set_connected
NOT BUG:Remove the state parameter from BIO_ctrl_set_connected
BUG:The actual implementation has the state of the connection being controlled with the peer parameter non-NULL meaning connected and NULL meaning connected
BUG:BIO_s_datagram() ctrl doesn't support SEEK/TELL so don't pretend it does
BUG:Correct or add comments indicating what controls belong to what
NOT BUG:Remove PROXY controls that aren't used anywhere
NOT BUG:Remove dummy argument from BIO_get_bind_mode
NOT BUG:Document how BIO_get_conn_ip and BIO_get_conn_int_port actually work
NOT BUG:No dummy arguments
NOT BUG:Have BIO_get_conn_int_port use BIO_ctrl instead BIO_int_ctrl
NOT BUG:BIO_int_ctrl isn't made for the purpose BIO_get_conn_int_port used it for
NOT BUG:This also changes BIO_C_GET_CONNECT to actually return the port instead of assigning it to a pointer that was never returned back to the caller
NOT BUG:Clarify the preferred way of creating patch files
NOT BUG:Clarify that git format-patch output is preferred for creating patch files
BUG:Remove a reachable assert from ssl3_write_bytes
NOT BUG:A buggy application that call SSL_write with a different length after a NBIO event could cause an OPENSSL_assert to be reached The assert is not actually necessary because there was an explicit check a little further down that would catch this scenario Therefore remove the assert an move the check a little higher up
NOT BUG:Remove an OPENSSL_assert which could fail
NOT BUG:An OPENSSL_assert was being used which could fail (e.g on a malloc failure)
NOT BUG:Remove a trivially true OPENSSL_assert
NOT BUG:This OPENSSL_assert in (d)tls1_hearbeat is trivially always going to be true because it is testing the sum of values that have been set as constants just a few lines above and nothing has changed them Therefore remove this
NOT BUG:Fixed typo in rsautl.pod
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:PR1279: Clean up CONTRIBUTING
NOT BUG:Various README updates
BUG:Close GH Issue 69 Close GH PR 457 Some other updates
BUG:By Rich Salz Alessandro Ghedini Steve Marquess Collin Anderson
NOT BUG:Remove des_ver.h; broke build
NOT BUG:Replace "SSLeay" in API with OpenSSL
NOT BUG:All instances of SSLeay (any combination of case) were replaced with the case-equivalent OpenSSL
BUG:Remove some SSLv2 references
NOT BUG:There were a few remaining references to SSLv2 support which are no longer relevant now that it has been removed
NOT BUG:Add SRP and PSK to disallowed CertificateRequest ciphersuites
NOT BUG:There was a discrepancy between what ciphersuites we allowed to send a CertificateRequest and what ciphersuites we allowed to receive one So add PSK and SRP to the disallowed ones
BUG:Remove the inline keyword
NOT BUG:Some functions were marked as inline in statem_srvr.c where they probably didn't need to be so remove it
NOT BUG:Remove superfluous check
NOT BUG:|tls_process_finished| was checking that |peer_finish_md_len| was non-negative However neither |tls1_final_finish_mac| or |ssl3_final_finish_mac| can ever return a negative value so the check is superfluous
NOT BUG:Change SSL_state_string return strings to start with a T
NOT BUG:Due the rest of the state machine changes it makes sense to change the SSL_state_string return strings from 3* to T* They are not SSL3 specific
BUG:Change snprintf to memcpy
NOT BUG:There was a few uses of snprintf in the DTLS SCTP code which made more sense to be a memcpy
NOT BUG:Add ossl_statem prefix to various functions
NOT BUG:Add the ossl_statem prefix to various funtions to avoid name clashes
BUG:Convert enums to typedefs
BUG:Various enums were introduced as part of the state machine rewrite As a matter of style it is preferred for these to be typedefs
NOT BUG:Make dtls1_link_min_mtu static
NOT BUG:The function dtls1_link_min_mtu() was only used within d1_lib.c so make it static
NOT BUG:Fix a bogus clang warning
NOT BUG:Clang with --strict-warnings was complaining about an uninitalised variable In reality it will never be used uninitialised but clang can't figure out the logic so just init it anyway to silence the warning
NOT BUG:Fix empty NewSessionTicket processing
NOT BUG:Rebasing the state machine code introduced a problem with empty NewSessionTicket processing The return value from the tls_process_new_session_ticket() is supposed to be an enum but a bare integer was being used Unfortunately this is valid C so the compiler doesn't pick it up
NOT BUG:Fix uninitialised variable
NOT BUG:Fix another instance of |al| being unitialised in certain error scenarios
NOT BUG:make update
NOT BUG:Fix various error codes
NOT BUG:A number of error codes were wrong due to a rebase of the state machine code
BUG:Move in_handshake into STATEM
NOT BUG:The SSL variable |in_handshake| seems misplaced It would be better to have it in the STATEM structure
NOT BUG:Fix unitialised variable problem
NOT BUG:tls_process_client_hello() failed to initialise the |al| variable in some (error) scenarios This could cause issues with creating the alert
NOT BUG:Fix DTLSv1_listen following state machine changes
NOT BUG:Adding the new state machine broke the DTLSv1_listen code because calling SSL_in_before() was erroneously returning true after DTLSv1_listen had successfully completed This change ensures that SSL_in_before returns false
NOT BUG:Add a function to get the info_callback
NOT BUG:Remove repeated blocks of checking SSL and then SSL_CTX for the info_callback
NOT BUG:Remove the old state defines
NOT BUG:Remove all the defines for the old state machines states Mapping old to new is probably going to cause more problems than it solves so it is probably better to just remove them
NOT BUG:Change SUB_STATE_RETURN into a typedef
BUG:Rename STATEM to OSSL_STATEM
NOT BUG:Add an OSSL_ prefix onto STATEM
NOT BUG:Remove SSL_state and SSL_set_state
NOT BUG:SSL_state has been replaced by SSL_get_state and SSL_set_state is no longer supported
NOT BUG:Move |no_cert_verify| into state machine
NOT BUG:The |no_cert_verify| should be in the state machine structure not in SSL
BUG:Remove extraneous parens
BUG:Change statem prefix to ossl_statem
NOT BUG:Change various state machine functions to use the prefix ossl_statem instead
NOT BUG:Don't depend on SSL structure internals
NOT BUG:The macros SSL_in_connect_init() and SSL_in_accept_init() inadvertently depended on SSL structure internals This fixes it to use public API calls instead
NOT BUG:Change HANDSHAKE_STATE to OSSL_HANDSHAKE_STATE
NOT BUG:Rename the enum HANDSHAKE_STATE to OSSL_HANDSHAKE_STATE to ensure there are no namespace clashes and convert it into a typedef
NOT BUG:Fix some client side transition logic
NOT BUG:Fixed some issues in the logic for determining whether an SKE should be expected or not In particular only allow an SKE for RSA if its export and the key size is not allowed Also fix the ephemeral ciphersuite checks and add in a missing call to ssl3_check_cert_and_algorithm()
BUG:Minor documentation tweak
NOT BUG:Update the return type for SSL_state in the documentation
NOT BUG:Update CHANGES
NOT BUG:Update the CHANGES file for the state machine rewrite
NOT BUG:Remove a call to SSL_set_state from s_server
NOT BUG:s_server was (ab)using SSL_set_state to force a renegotiation This is a bad way to do things and does not work with the new state machine code so we need to do it a different way
NOT BUG:Fix a comment
NOT BUG:Fix an out of date reference to old state machine code in a comment
NOT BUG:Remove some unused variables
NOT BUG:The next_state variable is no longer needed in the new state machine
NOT BUG:Add a state machine README
NOT BUG:Add some documentation on the thinking behind the state machine
NOT BUG:make update
NOT BUG:More state machine reorg
NOT BUG:Move some function definitions around within the state machine to make sure they are in the correct files Also create a statem_locl.h header for stuff entirely local to the state machine code and move various definitions into it
NOT BUG:Reorganise state machine files
NOT BUG:Pull out the state machine into a separate sub directory Also moved some functions which were nothing to do with the state machine but were in state machine files Pulled all the SSL_METHOD definitions into one place...most of those files had very little left in them any more
NOT BUG:Remove ssl_get_message from ssl_method_st
NOT BUG:ssl_get_message is no longer used so it should be removed from ssl_method_st
NOT BUG:Move PACKET creation into the state machine
NOT BUG:Previously each message specific process function would create its own PACKET structure Rather than duplicate all of this code lots of times we should create it in the state machine itself
NOT BUG:Remove the SSL state variable
NOT BUG:The SSL structure contained a "state" variable that kept track of the state machine in the old code The new state machine does not use this so it can be removed
NOT BUG:Remove the type variable
NOT BUG:The SSL structure contained a "type" variable that was set to either SSL_ST_ACCEPT or SSL_ST_CONNECT depending on whether we are the server or the client This duplicates the capability of the "server" variable and was actually rarely used
NOT BUG:Convert DTLSv1_listen to use new state machine code
NOT BUG:The DTLSv1_listen code set the state value explicitly to move into init Change to use state_set_in_init() instead
NOT BUG:Redefine old state values
NOT BUG:ssl.h and ssl3.h have a number of defines for the various states in the old state machine code Since this is public API it is not desirable to just remove them Instead redefine them to the closest equivalent state in the new state machine code If an application calls SSL_state then the return value can still be compared against these old values if necessary However not all values have an equivalent state in the new code so these are just redefined to a dummy value
NOT BUG:Remove redundant code
NOT BUG:Clean up and remove lots of code that is now no longer needed due to the move to the new state machine
NOT BUG:Move server side DTLS to new state machine
NOT BUG:Implement all of the necessary changes to make DTLS on the server work with the new state machine code
NOT BUG:Move server side TLS to new state machine
NOT BUG:Implement all of the necessary changes for moving TLS server side processing into the new state machine code
NOT BUG:Split TLS server functions
NOT BUG:Split the TLS server ssl3_get_* and ssl3_send_* functions into two ready for the migration to the new state machine code
NOT BUG:Delete unused functions
NOT BUG:Remove all the functions and dead code that is now no longer required as a result of the DTLS client move into the new state machine code
NOT BUG:Implement DTLS client move to new state machine
NOT BUG:Move all DTLS client side processing into the new state machine code A subsequent commit will clean up the old dead code
NOT BUG:dtls_get_message changes for state machine move
NOT BUG:Create a dtls_get_message function similar to the old dtls1_get_message but in the format required for the new state machine code The old function will eventually be deleted in later commits
NOT BUG:Client TLS state machine rewrite cleanup
NOT BUG:Remove redundant code following moving client side TLS handling to the new state machine implementation
NOT BUG:Implement Client TLS state machine
NOT BUG:This swaps the implementation of the client TLS state machine to use the new state machine code instead
NOT BUG:Split client message reading and writing functions
NOT BUG:The new state machine code will split up the reading and writing of hanshake messages into discrete phases In order to facilitate that the existing "get" type functions will be split into two halves: one to get the message and one to process it The "send" type functions will also have all work relating to constructing the message split out into a separate function just for that For some functions there will also be separate pre and post "work" phases to prepare or update state
NOT BUG:Add initial state machine rewrite code
NOT BUG:This is the first drop of the new state machine code
NOT BUG:The rewrite has the following objectives: - Remove duplication of state code between client and server - Remove duplication of state code between TLS and DTLS - Simplify transitions and bring the logic together in a single location so that it is easier to validate - Remove duplication of code between each of the message handling functions - Receive a message first and then work out whether that is a valid transition - not the other way around (the other way causes lots of issues where we are expecting one type of message next but actually get something else) - Separate message flow state from handshake state (in order to better understand each) - message flow state = when to flush buffers; handling restarts in the event of NBIO events; handling the common flow of steps for reading a message and the common flow of steps for writing a message etc - handshake state = what handshake message are we working on now - Control complexity: only the state machine can change state: keep all the state changes local to a file
NOT BUG:This builds on previous state machine related work: - Surface CCS processing in the state machine - Version negotiation rewrite
NOT BUG:Split ssl3_get_message
NOT BUG:The function ssl3_get_message gets a whole message from the underlying bio and returns it to the state machine code The new state machine code will split this into two discrete steps: get the message header and get the message body This commit splits the existing function into these two sub steps to facilitate the state machine implementation
NOT BUG:BN_GF2m_mod_inv(): check bn_wexpand return value
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:MR #1276 RT #4107
NOT BUG:Remove SSLeay history etc. from docs
NOT BUG:If something was "present in all versions" of SSLeay or if it was added to a version of SSLeay (and therefore predates OpenSSL) remove mention of it Documentation history now starts with OpenSSL
NOT BUG:Remove mention of all history before OpenSSL 0.9.8 inclusive
NOT BUG:Remove all AUTHOR sections
NOT BUG:Remove HAMC_cleanup
NOT BUG:Old API for use with OpenSSL-0.9.6 Remove it
NOT BUG:Move crypto/threads to demo/threads
NOT BUG:Probably fix travis (wine build)
NOT BUG:Improve make depend
NOT BUG:Fix undeclared variable warnings
BUG:Remove useless code
NOT BUG:RT#4081
NOT BUG:Check memory allocation
NOT BUG:Fix references to various RFCs
NOT BUG:Fix typos
NOT BUG:Set salt length after the malloc has succeeded
NOT BUG:Fix memory leaks and other mistakes on errors
BUG:Replace malloc+strlcpy with strdup
NOT BUG:Do not treat 0 return value from BIO_get_fd() as error
NOT BUG:0 is a valid file descriptor
BUG:RT#4068
NOT BUG:Remove bugs/ and crypto/threads/
NOT BUG:Clarify return values for EVP_DigestVerifyFinal
NOT BUG:Previous language was unclear New language isn't pretty but I believe it is more accurate
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Only include SRP headers when OPENSSL_NO_SRP is undefined
BUG:[fixes github issue #447]
NOT BUG:Make Configure die when unsupported options are given
NOT BUG:Add an explicit list of options that can be disabled enabled ..
NOT BUG:Configure has so far had no control at all of which 'no-' options it can be given This means that for example someone could configure with something absurd like 'no-stack' and then watch the build crumble to dust.. or file a bug report
NOT BUG:This introduces some sanity into the possible choices
NOT BUG:The added list comes from looking for the explicit ones used in Configure and from grepping after OPENSSL_NO_ in all source files
NOT BUG:make update
NOT BUG:Don't forget to load the CT error strings
NOT BUG:Handle CT error macros separately
NOT BUG:Because the default error macro generator assumes the header file with error macros is in include/openssl and therefore generates a C file with error texts that include <openssl/{name}.h> we need to generate the error macros and texts for CT separately since the CT module doesn't follow the default criteria
NOT BUG:Don't use SSLv23_server_method in an example
NOT BUG:The function SSLv23_server_method() is an old name New code should use TLS_server_method() instead Therefore don't use SSLv23_server_method() in an example in the docs
NOT BUG:Avoid undefined behaviour in PACKET_buf_init
NOT BUG:Change the sanity check in PACKET_buf_init to check for excessive length buffers which should catch the interesting cases where len has been cast from a negative value whilst avoiding any undefined behaviour
NOT BUG:RT#4094
NOT BUG:ct_locl.h moved reflect it in crypto/ct/Makefile
NOT BUG:make update
NOT BUG:Add crypto/include/internal to the directories to scan for stack declarations
NOT BUG:Because ct_locl.h is used between modules move it to internal headers
NOT BUG:Rename it to ct_int.h
NOT BUG:Move auto Host adding to query_responder
NOT BUG:Check for Host header in query_responder instead of process_responder This also fixes a memory leak in the old code if the headers was NULL
NOT BUG:Fix memory leak with -issuer option
NOT BUG:set string type when embedding
NOT BUG:Move contributing info to CONTRIBUTING
NOT BUG:Run tests on Travis for mingw builds as well
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Fix error message when loading engines from config
NOT BUG:When using command line applications errors occur when trying to load engines specified in a config file Introduced by commit a0a82324f96
BUG:RT#4093
NOT BUG:Remove Obsolete engines
BUG:There are a number of engines in the OpenSSL source code which are now obsolete The following engines have been removed: 4758cca aep atalla cswift nuron sureware
NOT BUG:Fix self signed handling
NOT BUG:Don't mark a certificate as self signed if keyUsage is present and certificate signing not asserted
BUG:PR#3979
NOT BUG:embed CRL serial number and signature fields
NOT BUG:embed certificate serial number and signature fields
NOT BUG:embed value field of X509_EXTENSION
NOT BUG:add CHANGES entry for embed
NOT BUG:Handle embed flag in ASN1_STRING_copy()
NOT BUG:PACKET: fix __owur
BUG:Appease gcc's Wmaybe-uninitialized
NOT BUG:False positive: gcc (4.8) can't figure out the SSL_IS_DTLS logic
NOT BUG:Remove EVP_CHECK_DES_KEY
NOT BUG:Thanks to the OpenBSD community for bringing this to our attention
NOT BUG:ct_locl.h: fix some comments
NOT BUG:make depend: prefer clang over makedepend
BUG:RFC5753 compliance
NOT BUG:RFC5753 requires that we omit parameters for AES key wrap and set them to NULL for 3DES wrap OpenSSL decrypt uses the received algorithm parameters so can transparently handle either form
NOT BUG:Add Clang 3.6 and additional GCC 5 builds to travis
BUG:Follow-up to f386742
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
BUG:GH429: Add clang to travis
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:testlib/OpenSSL/Test.pm: remove redundant 'cmd /c' MSWin32 Perl can take care of itself
BUG:Harmonize do_rehash_rule with updated test/recipies/25-test_verify.t
NOT BUG:Test suite: chomp->s/\R// to harmonize with mingw 'make test'
NOT BUG:Test suite: minimal required to get mingw 'make test' work under Linux
BUG:(part by Alessandro Ghedini)
NOT BUG:Rename -set-serial command to req
NOT BUG:Previous OpenSSL versions used -set_serial but master was using -set-serial - so rename it back to the old version
NOT BUG:RT#4059
NOT BUG:Centralise loading default apps config file
NOT BUG:Loading the config file after processing command line options can cause problems e.g where an engine provides new ciphers/digests these are not then recoginised on the command line Move the default config file loading to before the command line option processing Whilst we're doing this we might as well centralise this instead of doing it individually for each application Finally if we do it before the OpenSSL_add_ssl_algorithms() call then ciphersuites provided by an engine (e.g GOST) can be available to the apps
NOT BUG:RT#4085 RT#4086
NOT BUG:Fix option name discrepancy
NOT BUG:There used to be options -macopt and -sigopt in <=1.0.2 for the dgst command line app These were incorrectly spelled as -macop and -sigop in master
BUG:RT#4072
NOT BUG:Configurations: move -Wno-pedantic-ms-format to .travis.yml
NOT BUG:The option is not available in older toolchains and would cause breakage
NOT BUG:embed OCSP_CERTID
NOT BUG:embed support for ASN1_STRING
NOT BUG:Embed various OCSP fields
NOT BUG:embed support for CHOICE type
NOT BUG:Skip PSK tests for no-psk
NOT BUG:Make no-psk compile without warnings
BUG:PR#4035
NOT BUG:Typo
NOT BUG:PR#4079
NOT BUG:DTLS: remove unused cookie field
NOT BUG:Note that this commit constifies a user callback parameter and therefore will break compilation for applications using this callback But unless they are abusing write access to the buffer the fix is trivial
NOT BUG:Fix Windows build
NOT BUG:Add the new ct directory to mkfiles.pl and fix the ct Makefile
NOT BUG:Initial commit for Certificate Transparency support
NOT BUG:Original authors: Rob Stradling <rob@comodo.com> Dr Stephen Henson <steve@openssl.org>
NOT BUG:PACKET: simplify ServerKeyExchange parsing
NOT BUG:Fix no-ripemd on Windows
NOT BUG:mkdef.pl was getting confused by:
NOT BUG:# ifdef OPENSSL_NO_RMD160 # error RIPEMD is disabled # endif
NOT BUG:Changing RIPEMD to RMD160 solves it Fix suggested by Steve Henson
BUG:Don't treat a bare OCTETSTRING as DigestInfo in int_rsa_verify
NOT BUG:The function int_rsa_verify is an internal function used for verifying an RSA signature It takes an argument |dtype| which indicates the digest type that was used Dependant on that digest type the processing of the signature data will vary In particular if |dtype == NID_mdc2| and the signature data is a bare OCTETSTRING then it is treated differently to the default case where the signature data is treated as a DigestInfo (X509_SIG)
BUG:Due to a missing "else" keyword the logic actually correctly processes the OCTETSTRING format signature first and then attempts to continue and process it as DigestInfo This will invariably fail because we already know that it is a bare OCTETSTRING
NOT BUG:This failure doesn't actualy make a real difference because it ends up at the |err| label regardless and still returns a "success" result This patch just cleans things up to make it look a bit more sane
NOT BUG:RT#4076
NOT BUG:When ENGINE_add finds that id or name is missing actually return
NOT BUG:Don't check pointer we just freed always set it to NULL
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be> MR #1231
NOT BUG:Move BN_CTX_start() call so the error case can always call BN_CTX_end()
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be> MR #1231
NOT BUG:Move BN_CTX_start() call so the error case can always call BN_CTX_end()
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be> MR #1231
NOT BUG:Properly check return type of DH_compute_key()
NOT BUG:It returns -1 on error not 0
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be> MR #1231
NOT BUG:Set flags to 0 before calling BN_with_flags()
NOT BUG:BN_with_flags() will read the dest->flags to keep the BN_FLG_MALLOCED but overwrites everything else
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be> MR #1231
NOT BUG:Don't advance PACKET in ssl_check_for_safari
NOT BUG:The function ssl_check_for_safari fingerprints the incoming extensions to see whether it is one of the broken versions of safari However it was failing to reset the PACKET back to the same position it started in hence causing some extensions to be skipped incorrectly
NOT BUG:Fix travis builds on master
NOT BUG:-Allow mingw debug builds to fail on Travis CI -Fix Travis email notifications config -Rename a variable to avoid a bogus warning with old GCC error: declaration of ``dup'' shadows a global declaration [-Werror=shadow] -Disable pedantic ms-format warnings with mingw -Properly define const DH parameters -Restore --debug flag in Travis CI builds; -d would get incorrectly passed to ./Configure in mingw debug builds
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:SSLv2 compat ciphers: clarify comment
NOT BUG:Don't try and parse boolean type
NOT BUG:Address more Windows warnings illuminated by mingw
NOT BUG:New cipher and cipher modes standardized in Russia
NOT BUG:This change introduces short names and NIDs for Russian GOST ciphers according to GOST R 34.13-2015
NOT BUG:Validate ClientHello extension field length
NOT BUG:RT#4069
NOT BUG:Add PACKET_copy_all
NOT BUG:ssl_sess.c: grab a copy of the session ID
NOT BUG:The user callback takes a non-const pointer so don't pass PACKET data to it directly; rather grab a local copy
NOT BUG:PACKETize and clean up ssl_bytes_to_cipher_list
NOT BUG:Fix alerts
NOT BUG:ssl3_get_client_hello: rearrange logic
NOT BUG:Move all packet parsing to the beginning of the method This limits the SSLv2 compatibility soup to the parsing and makes the rest of the processing uniform
NOT BUG:This is also needed for simpler EMS support: EMS servers need to do an early scan for EMS to make resumption decisions This'll be easier when the entire ClientHello is parsed in the beginning
NOT BUG:As a side effect 1) PACKETize ssl_get_prev_session and tls1_process_ticket; and 2) Delete dead code for SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
NOT BUG:make depend
NOT BUG:Fix make depend for things being built in subdirectories
NOT BUG:Some makedepend mechanisms remove all directory information in the target so a dependency can looks like this:
NOT BUG:ssl3_record.o: record/ssl3_record.c
NOT BUG:However that doesn't quite suit us our Makefile has us build record/ssl3_record.o rather than ssl3_record.o
NOT BUG:To clear this up a change to util/clean-depend.pl takes care of this case by looking up the original file in the dependencies and restoring the directory information from it
NOT BUG:Harmonize pointer printing and size_t-fy casts
NOT BUG:bio/bss_log.c: harmonize format string to silence -Wformat
NOT BUG:Address Windows warnings in apps/
NOT BUG:Explicitly cast INVALID_SOCKET to (int) to address warnings on Windows
NOT BUG:Even though SOCKET is effectively declared as (void *) on Windows it's not actually a pointer but an index within per-process table of kernel objects The table size is actually limited and its upper limit is far below upper limit for signed 32-bit integer This is what makes cast in question possible
NOT BUG:Free up ASN.1 structures at top level only
NOT BUG:When a decoding error in ASN.1 occurs only free up the partial structure at the top level This simplifies embedded handling and fixes freeing up of structures when presented with malformed input
NOT BUG:Fix more d2i cases to properly update the input pointer
NOT BUG:Thanks to David Benjamin <davidben@google.com> for pointing them out
BUG:MR #1198
NOT BUG:Remove BIO_s_file_internal macro
NOT BUG:Revert "Custom cipher constants"
BUG:This reverts commit 3aabc1dd1c969e60bdea8f827d6645ff04c56b67
NOT BUG:Custom cipher constants
NOT BUG:Add some custom ctrls for Engine specific use
NOT BUG:Remove the hard coded -DOPENSSL_NO_DEPRECATED from DEPFLAG
NOT BUG:Any time you configure with enable-deprecated make depend would scream bloody murder This change has it quiet down a bit
NOT BUG:Change the DEFAULT ciphersuites to exclude DES RC4 and RC2
NOT BUG:This patch updates the "DEFAULT" cipherstring to be "ALL:!COMPLEMENTOFDEFAULT:!eNULL" COMPLEMENTOFDEFAULT is now defined internally by a flag on each ciphersuite indicating whether it should be excluded from DEFAULT or not This gives us control at an individual ciphersuite level as to exactly what is in DEFAULT and what is not
NOT BUG:Finally all DES RC4 and RC2 ciphersuites are added to COMPLEMENTOFDEFAULT and hence removed from DEFAULT
NOT BUG:bn/asm/armv4-mont.pl: boost NEON performance
NOT BUG:Close difference gap on Cortex-A9 which resulted in further improvement even on other processors
NOT BUG:Make update / libeay.num fix
NOT BUG:Looks like someone forgot to do a "make update" since crypto/ts/Makefile keeps changing So include that
NOT BUG:Second is that the declare_dh_bn macro fools the libeay.num script The declarations are only needed in one file (dh_rfc5114) so remove them from the header and put the "raw" declarations directly into that file
NOT BUG:Fix libeay.num
NOT BUG:Removed duplicated ordinals from libeay.num
NOT BUG:Add a test for duplicated ordinals
NOT BUG:Occaisionally we have had problems where there are duplicated ordinals in libeay.num or ssleay.num This adds a test for this issue
NOT BUG:Display brief help if no options for list
NOT BUG:Add GOST12 cms/smime capabilities
NOT BUG:Add additional NID references in the CMS/SMIME capabilities code to cater for GOST12
NOT BUG:Patch supplied by Dmitry Belyavsky <beldmit@gmail.com>
NOT BUG:Fix no-stdio build
NOT BUG:Much related/similar work also done by Ivan Nestlerode <ivan.nestlerode@sonos.com>
NOT BUG:+Replace FILE BIO's with dummy ops that fail +Include <stdio.h> for sscanf() even with no-stdio (since the declaration is there) We rely on sscanf() to parse the OPENSSL_ia32cap environment variable since it can be larger than a 'long' And we don't rely on the availability of strtoull() +Remove OPENSSL_stderr(); not used +Make OPENSSL_showfatal() do nothing (currently without stdio there's nothing we can do) +Remove file-based functionality from ssl/ The function prototypes were already gone but not the functions themselves +Remove unviable conf functionality via SYS_UEFI +Add fallback definition of BUFSIZ +Remove functions taking FILE * from header files +Add missing DECLARE_PEM_write_fp_const +Disable X509_LOOKUP_hash_dir() X509_LOOKUP_file() was already compiled out so remove its prototype +Use OPENSSL_showfatal() in CRYPTO_destroy_dynlockid() +Eliminate SRP_VBASE_init() and supporting functions Users will need to build the verifier manually instead +Eliminate compiler warning for unused do_pk8pkey_fp() +Disable TEST_ENG_OPENSSL_PKEY +Disable GOST engine as is uses [f]printf all over the place +Eliminate compiler warning for unused send_fp_chars()
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:engine/e_capi.c: fix various warnings
NOT BUG:Fix -Wshadow warnings in mingw builds
NOT BUG:Fix pedantic warnings in mingw builds
NOT BUG:Fix prototypes in e_ossttest.c
NOT BUG:Problem was exposed in mingw64 build or in other words on P64 platform
NOT BUG:asn1t.h: silence -Wmissing-prototype in Windows builds
NOT BUG:On Windows OPENSSL_EXPORT_VAR_AS_FUNCTION is defined and in a sense this modification simply harmonizes it with "VAR_AS_VAR"
NOT BUG:Rationalize .gitignore and harmonize pair of Makefiles
BUG:RT3948: Some structs have confusing names
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Print debug info for extended master secret extension
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:RT4053: Typo in error message
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Remove obsolete b64 demo's
NOT BUG:PACKET: simplify ServerHello parsing
BUG:Empty NewSessionTicket: test session resumption
NOT BUG:Empty session ticket: add a test
NOT BUG:RT2772: accept empty SessionTicket
NOT BUG:RFC 5077 section 3.3 says: If the server determines that it does not want to include a ticket after it has included the SessionTicket extension in the ServerHello then it sends a zero-length ticket in the NewSessionTicket handshake message
NOT BUG:Previously the client would fail upon attempting to allocate a zero-length buffer Now we have the client ignore the empty ticket and keep the existing session
NOT BUG:Update year in Windows builds
NOT BUG:Harmonize util/mkrc.pl with header move
NOT BUG:SRP memory leak fix
BUG:Silence Wconditional-uninitialized
BUG:Fixing typo in PROBLEMS
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
BUG:Skylake performance results
BUG:GH408 follow-on: update buflen
NOT BUG:Some builds break as documented in: https://github.com/openssl/openssl/pull/408#issuecomment-142971427 This fixes it
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Fix typo in previous commit
NOT BUG:Change --debug to -d for compat with old releases
NOT BUG:Remove obsolete OCSP demo
NOT BUG:Change ossltest engine to manually allocate cipher_data
NOT BUG:The ossltest engine wraps the built-in implementation of aes128-cbc Normally in an engine the cipher_data structure is automatically allocated by the EVP layer However this relies on the engine specifying up front the size of that cipher_data structure In the case of ossltest this value isn't available at compile time This change makes the ossltest engine allocate its own cipher_data structure instead of leaving it to the EVP layer
NOT BUG:Properly format linux-arm64ilp32 target config
NOT BUG:Otherwise the ./config script fails with errors like:
NOT BUG:> Operating system: x86_64-whatever-linux2 > This system (linux-x86_64) is not supported See file INSTALL for details
BUG:The failure was introduced by a93d3e0
BUG:RT#4062
NOT BUG:Fix the OCSP test on Windows
NOT BUG:The windows test uses the pseudo file "nul" to indicate no file for the -CApath option This does not work on all versions of Windows Instead use the new -no-CApath option
NOT BUG:Document -no-CApath and -no-CAfile
NOT BUG:Add documentation to all the appropriate apps for the new -no-CApath and -no-CAfile options
NOT BUG:Add support for -no-CApath and -no-CAfile options
NOT BUG:For those command line options that take the verification options -CApath and -CAfile if those options are absent then the default path or file is used instead It is not currently possible to specify *no* path or file at all This change adds the options -no-CApath and -no-CAfile to specify that the default locations should not be used to all relevant applications
NOT BUG:Document the default CA path functions
NOT BUG:Add ability to set default CA path and file locations individually
NOT BUG:Previously you could only set both the default path and file locations together This adds the ability to set one without the other
NOT BUG:Configurations: add linux-arm64ilp32 target
NOT BUG:Allow ILP32 compilation in AArch64 assembly pack
NOT BUG:ARMv4 assembly pack: implement support for Thumb2
NOT BUG:As some of ARM processors more specifically Cortex-Mx series are Thumb2-only we need to support Thumb2-only builds even in assembly
NOT BUG:fix compilation on Solaris
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Restore the old interactive prompt
NOT BUG:Sanity check cookie_len
NOT BUG:Add a sanity check that the cookie_len returned by app_gen_cookie_cb is valid
NOT BUG:Clarify DTLSv1_listen documentation
NOT BUG:Clarify that user code is required to allocate sufficient space for the addressing scheme in use in the call to DTLSv1_listen
NOT BUG:Fix s_server DTLSv1_listen issues
NOT BUG:Use sockaddr_storage not sockaddr for the client IP address to allow for IPv6 Also fixed a section of code which was conditional on OPENSSL_NO_DTLS1 which should not have been
NOT BUG:Add DTLSv1_listen documentation
NOT BUG:Adds a new man page to cover the DTLSv1_listen() function
NOT BUG:Add -listen documentation
NOT BUG:This commit adds documentation for the new -listen option to s_server Along the way it also adds documentation for -dtls -dtls1 and -dtls1_2 which was missing
NOT BUG:Add support for DTLSv1_listen in s_server
BUG:DTLSv1_listen is a commonly used function within DTLS solutions for listening for new incoming connections This commit adds support to s_server for using it
NOT BUG:Remove remaining old listen code
NOT BUG:The old implementation of DTLSv1_listen which has now been replaced still had a few vestiges scattered throughout the code This commit removes them
NOT BUG:DTLSv1_listen rewrite
BUG:The existing implementation of DTLSv1_listen() is fundamentally flawed This function is used in DTLS solutions to listen for new incoming connections from DTLS clients A client will send an initial ClientHello The server will respond with a HelloVerifyRequest containing a unique cookie The client the responds with a second ClientHello - which this time contains the cookie
NOT BUG:Once the cookie has been verified then DTLSv1_listen() returns to user code which is typically expected to continue the handshake with a call to (for example) SSL_accept()
NOT BUG:Whilst listening for incoming ClientHellos the underlying BIO is usually in an unconnected state Therefore ClientHellos can come in from *any* peer The arrival of the first ClientHello without the cookie and the second one with it could be interspersed with other intervening messages from different clients
NOT BUG:The whole purpose of this mechanism is as a defence against DoS attacks The idea is to avoid allocating state on the server until the client has verified that it is capable of receiving messages at the address it claims to come from However the existing DTLSv1_listen() implementation completely fails to do this It attempts to super-impose itself on the standard state machine and reuses all of this code However the standard state machine expects to operate in a stateful manner with a single client and this can cause various problems
NOT BUG:A second more minor issue is that the return codes from this function are quite confused with no distinction made between fatal and non-fatal errors Most user code treats all errors as non-fatal and simply retries the call to DTLSv1_listen()
NOT BUG:This commit completely rewrites the implementation of DTLSv1_listen() and provides a stand alone implementation that does not rely on the existing state machine It also provides more consistent return codes
NOT BUG:Add BIO_CTRL_DGRAM_SET_PEEK_MODE
NOT BUG:Add the ability to peek at a message from the DTLS read BIO This is needed for the DTLSv1_listen rewrite
NOT BUG:Fix the rehash test on Windows
NOT BUG:The openssl rehash command is not available on some platforms including Windows This change skips the associated tests if rehash is not available
NOT BUG:make update
NOT BUG:header includes
NOT BUG:Document X509_get0_subject_key_id()
NOT BUG:New function X509_get0_subject_key_id()
NOT BUG:Make X509 opaque
NOT BUG:Avoid structure access in crypto/ts
NOT BUG:PACKET: simplify
NOT BUG:Get rid of the third field that is no longer needed
NOT BUG:Remove ssl_put_cipher_by_char
NOT BUG:Since SSLv3 a CipherSuite is always 2 bytes The only place where we need 3-byte ciphers is SSLv2-compatible ClientHello processing
BUG:So remove the ssl_put_cipher_by_char indirection
NOT BUG:Document BUF_strnlen
NOT BUG:BUF_strdup and friends: update docs
NOT BUG:BUF_strndup: tidy
NOT BUG:Fix comment add another overflow check tidy style
NOT BUG:Make BUF_strndup() read-safe on arbitrary inputs
NOT BUG:BUF_strndup was calling strlen through BUF_strlcpy and ended up reading past the input if the input was not a C string
NOT BUG:Make it explicitly part of BUF_strndup's contract to never read more than |siz| input bytes This augments the standard strndup contract to be safer
NOT BUG:The commit also adds a check for siz overflow and some brief documentation for BUF_strndup()
NOT BUG:GH398: Add mingw cross-compile etc
NOT BUG:For all release branches It adds travis build support If you don't have a config file it uses the default (because we enabled travis for the project) which uses ruby/rake/rakefiles and you get confusing "build still failing" messages
NOT BUG:Fix path in comments
NOT BUG:make depend
NOT BUG:Move certificate request and CRL routines to x509 dir
NOT BUG:Move functions
NOT BUG:Move various functions tagged onto t_x509.c to more appropriate places
NOT BUG:Update SEE ALSO sections
NOT BUG:Document signature accessors
NOT BUG:Extension parsing and encoding docs
NOT BUG:Document i2d_re_X509_REQ_tbs() and i2d_re_X509_CRL_tbs()
NOT BUG:Document X509_REVOKED functions
NOT BUG:Document X509 sign and verify functions
NOT BUG:Document X509 public key functions
NOT BUG:Document X509 name get and set functions
NOT BUG:Document X509 version functions
NOT BUG:Use accessors in X509_REQ_print()
NOT BUG:Use accessor functions in X509_CRL_print()
NOT BUG:New accessor X509_REQ_get_X509_PUBKEY()
NOT BUG:Additional X509_CRL accessors
NOT BUG:typo
NOT BUG:Add comments to x509_int.h
NOT BUG:Add accessors for X509_REVOKED
NOT BUG:Add accessors for request and CRL signatures
NOT BUG:Remove "noise" comments from TS files
NOT BUG:RT3479: Add UTF8 support to BIO_read_filename()
NOT BUG:If we use BIO_new_file() on Windows it'll jump through hoops to work around their unusual charset/Unicode handling it'll convert a UTF-8 filename to UCS-16LE and attempt to use _wfopen()
NOT BUG:If you use BIO_read_filename() it doesn't do this Shouldn't it be consistent?
NOT BUG:It would certainly be nice if SSL_use_certificate_chain_file() worked
NOT BUG:Also made BIO_C_SET_FILENAME work (rsalz)
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:RT3823: Improve the robustness of event logging
NOT BUG:There are a couple of minor fixes here:
NOT BUG:1) Handle the case when RegisterEventSource() fails (which it may for various reasons) and do the work of logging the event only if it succeeds
NOT BUG:2) Handle the case when ReportEvent() fails and do our best in debug builds to at least attempt somehow indicate that something has gone wrong The typical situation would be someone running tools like DbMon DBWin32 DebugView or just having the debugger attached The intent is to make sure that at least some data will be captured so that we can save hours and days of debugging time
NOT BUG:3) Minor fix to change the MessageBox() flag to MB_ICONERROR Though the value of MB_ICONERROR is the same value as MB_ICONSTOP the intent is better conveyed by using MB_ICONERROR
NOT BUG:Testing performed:
NOT BUG:1) Clean compilation for debug-VC-WIN32 and VC-WIN32
BUG:2) Good test results (nmake -f ms\ntdll.mak test) for debug-VC-WIN32 and VC-WIN32
NOT BUG:3) Stepped through relevant changes using WinDBG and exercised the impacted code paths
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:GOST PKCS12 support
NOT BUG:Changes required to add GOST support to PKCS12
NOT BUG:Based on a patch provided by Dmitry Belyavsky <beldmit@gmail.com>
NOT BUG:Add GOST extensions to PKCS#5
NOT BUG:GOST extends PKCS5 PBES2/PBKDF2 with some additional GOST specific PRFs
NOT BUG:Based on a patch provided by Dmitry Belyavsky <beldmit@gmail.com>
NOT BUG:Fix SRP memory leaks
NOT BUG:There were some memory leaks in the creation of an SRP verifier (both on successful completion and also on some error paths)
NOT BUG:Fix -srpvfile option in srp command line
NOT BUG:The -srpvfile option was broken in the srp command line app Using it would always result in "-dbfile and -configfile cannot be specified together." The error message is also wrong because the option is "-srpvfile" not "-dbfile" so that has been fixed too
NOT BUG:Make SRP work with -www
NOT BUG:PR#3817
NOT BUG:Handle SSL_ERROR_WANT_X509_LOOKUP
NOT BUG:remove unneeded includes
NOT BUG:make no-dh work
NOT BUG:Move EVP_PKEY_METHOD into private headers
NOT BUG:Simplify Simple.pm further and make it more verbose
NOT BUG:Correct srp test
NOT BUG:There actually is a "srp" feature to check the availability on
NOT BUG:Correct jpake test
NOT BUG:There actually is a "jpake" feature to check the availability on
NOT BUG:Correct sha tests
NOT BUG:These tests were checking for specific sha variants when they should just check if "sha" is disabled
NOT BUG:Correct whirlpool test
NOT BUG:It depended on 'openssl no-wp' which always exited with code 0 so this test would never be performed and this I never discovered that the program it's supposed to run was misspellt Furthermore the feature to check is 'whirlpool' not 'wp'
NOT BUG:All corrected
NOT BUG:Finally remove a possibly disabled feature
BUG:I have no clue why MD_GHOST94 was checked on there is no OPENSSL_NO_MD_GHOST94 in sight anywhere
NOT BUG:Add more features that may be disabled
NOT BUG:Have a look at the directories in crypto/ I found reason to add checks on CMAC and HMAC This might be completely irrelevant but I prefered covering too much than not enough
NOT BUG:Add more features that may be disabled
NOT BUG:A grep of OPENSSL_NO_ in the rest of the source tree revealed a few more features to check
NOT BUG:NOTE: there are some of those macros that I ignore because a check of them doesn't seem useful to external apps This might change later on
NOT BUG:Add more features that may be disabled
NOT BUG:After a grep of OPENSSL_NO_ in apps/*.c a few more features that may be interesting to check the availability of came up
NOT BUG:Add more features that may be disabled
NOT BUG:I've tried to make this list as complete as possible based on information found in apps/progs.pl
NOT BUG:Sort the disabled features alphabetically
NOT BUG:typo
NOT BUG:Update Simple.pm to use disabled()
NOT BUG:Change test recipes to use disabled()
NOT BUG:Add Utils.pm
NOT BUG:Add Utils.pm for test utilities This currently just contains one function: disabled which checks if a feature is disabled based on the output of openssl list -disabled
NOT BUG:Small typo
NOT BUG:OPENSSL_NO_ECA changed to OPENSSL_NO_EC
NOT BUG:Make sure to actually use @smime_cms_comp_test when testing it..
NOT BUG:Obvious typo and it took configuring with 'zlib' to discover it otherwise there was a previous skip that bypassed this section entirely
NOT BUG:Fix some test failures when Configured with zlib
NOT BUG:TLSProxy was failing if we are Configured with compression because it doesn't support it This fix simply switches compression off for the purposes of the test
NOT BUG:Print out a list of disabled features
NOT BUG:New option "openssl list -disabled" this lists a set of disabled features in a form which can be conveniently parsed by the test framework so it knows which tests to skip
NOT BUG:Return shared OIDs when decoding
NOT BUG:When an OID is decoded see if it exists in the registered OID table and if so return the shared OID instead of dynamically allocating an ASN1_OBJECT
NOT BUG:Fix indentation
NOT BUG:Check if test_rehash is run as root
NOT BUG:If test/recipes/40-test_rehash.t is executed as root the last test will fail since the created directory will remain writable no matter what Make sure it complains loudly about being run as root
NOT BUG:Remove PACKET_back
BUG:It's unused and the same functionality can be achieved with saving a copy of the struct
NOT BUG:Make sure OPENSSL_cleanse checks for NULL
NOT BUG:In master we have the function OPENSSL_clear_free(x,y) which immediately returns if x == NULL In <=1.0.2 this function does not exist so we have to do: OPENSSL_cleanse(x y); OPENSSL_free(x);
NOT BUG:However previously OPENSSL_cleanse did not check that if x == NULL so the real equivalent check would have to be: if (x != NULL) OPENSSL_cleanse(x y); OPENSSL_free(x);
NOT BUG:It would be easy to get this wrong during cherry-picking to other branches and therefore for safety it is best to just ensure OPENSSL_cleanse also checks for NULL
NOT BUG:base64 decode: check for high bit
NOT BUG:Previously the conversion would silently coerce to ASCII Now we error out
NOT BUG:RT3757: base64 encoding bugs
NOT BUG:Rewrite EVP_DecodeUpdate
NOT BUG:In particular: reject extra trailing padding and padding in the middle of the content Don't limit line length Add tests
NOT BUG:Previously the behaviour was ill-defined and depended on the position of the padding within the input
NOT BUG:In addition this appears to fix a possible two-byte oob read
BUG:Remove PACKET_(get|goto)_bookmark
BUG:The bookmark API results in a lot of boilerplate error checking that can be much more easily achieved with a simple struct copy It also lays the path for removing the third PACKET field
NOT BUG:Embed various signature algorithms
NOT BUG:RT4033: Use OPENSSL_SYS_UNIX not "unix"
NOT BUG:Real fix for RT 4033
NOT BUG:RT4047: Set reference count earlier
NOT BUG:Make sure it's valid very early
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Disentangle RSA premaster secret parsing
NOT BUG:Simplify encrypted premaster secret reading by using new methods in the PACKET API
NOT BUG:Don't overwrite the packet buffer RSA decrypt accepts truncated ciphertext with leading zeroes omitted so it's even possible that by crafting a valid ciphertext with several leading zeroes this could cause a few bytes out-of-bounds write The write is harmless because of the size of the underlying message buffer but nevertheless we shouldn't write into the packet
NOT BUG:Embed X509_REQ_INFO
NOT BUG:Embed X509_CINF
NOT BUG:X509_CRL_INFO embed
NOT BUG:Change X509_VAL in X509 structure to embedded
NOT BUG:New ASN.1 embed macro
NOT BUG:New ASN.1 macro ASN1_EMBED This is the same as ASN1_SIMPLE except the structure is not allocated: it is part of the parent That is instead of
NOT BUG:FOO *x;
NOT BUG:it must be:
NOT BUG:FOO x;
NOT BUG:This reduces memory fragmentation and make it impossible to accidentally set a mandatory field to NULL
NOT BUG:This currently only works for SEQUENCE and since it is equivalent to ASN1_SIMPLE it cannot be tagged OPTIONAL SET OF or SEQUENCE OF
NOT BUG:Fix build on mingw
NOT BUG:When OPENSSL_EXPORT_VAR_AS_FUNCTION is defined the static_ASN1_ITEM_start macro doesn't exist so the build fails This problem was introduced in
NOT BUG:Fix return values when adding serverinfo fails
BUG:MR #1128
NOT BUG:make update
NOT BUG:Extend the notes on how to do testing
NOT BUG:These notes include the use of HARNESS_VERBOSE (see the manual for Test::Harness) and the method to enumerate specific tests to run
NOT BUG:Add a method to list available tests
NOT BUG:Add a few notes on perl
NOT BUG:d2i: don't update input pointer on failure
BUG:MR #1005
NOT BUG:Fix PSK identity hint handling
NOT BUG:For server use a PSK identity hint value in the CERT structure which is inherited when SSL_new is called and which allows applications to set hints on a per-SSL basis The previous version of SSL_use_psk_identity_hint tried (wrongly) to use the SSL_SESSION structure
BUG:PR#4039
NOT BUG:Constify ECDSA_METHOD_new
NOT BUG:PR#3920
NOT BUG:Fix zlib CMS compilation
NOT BUG:Use default field separator
NOT BUG:If the field separator isn't specified through -nameopt then use XN_FLAG_SEP_CPLUS_SPC instead of printing nothing and returing an error
NOT BUG:PR#2397
NOT BUG:Fix "defined but not used" warnings
NOT BUG:Enable -Wmissing-variable-declarations and -Wincompatible-pointer-types-discards-qualifiers (the latter did not require any code changes)
BUG:Unwriteable directories are errors
NOT BUG:Make the script and app match the documentation
NOT BUG:EVP_PKEY_METHOD accessor functions
NOT BUG:Functions to retrieve the function pointer of an existing method: this can be used to create a method which intercepts or modifies the behaviour of an existing method while retaining most of the existing behaviour
NOT BUG:RT3754: check for NULL pointer
NOT BUG:Fix both the caller to error out on malloc failure as well as the eventual callee to handle a NULL gracefully
BUG:Restore SSLerr on PACKET_strndup failure
BUG:RT3992: Make SCT #ifdeffable
NOT BUG:This code does open-coded division on 64-bit quantities and thus when building with GCC on 32-bit platforms will require functions such as __umoddi3 and __udivdi3 from libgcc
NOT BUG:In constrained environments such as firmware those functions may not be available So make it possible to compile out SCT support which in fact (in the case of UEFI) we don't need anyway
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Add a simple test for the new rehash command
NOT BUG:Make sure the temporary error log resides in a well defined location
NOT BUG:If a test recipe does something like this:
BUG:indir "foo.$$" => sub { chmod 0500 File::Spec->curdir(); ok(run(app(["something"]))); }
NOT BUG:we get a problem because we were storing the temporary stderr file in the current directory at all times (so while inside the 'indir' we would attemp to store it in "foo.$$")
NOT BUG:So change our ways to always store that temporary file in the exact same location defined by the environment variable RESULT_D or failing that TEST_D or failing that $TOP/test
NOT BUG:Fix warning about mixed declarations and code
NOT BUG:PACKET: add PACKET_memdup and PACKET_strndup
NOT BUG:Use each once in s3_srvr.c to show how they work
NOT BUG:Also fix a bug introduced in c3fc7eeab884b6876a1b4006163f190d325aa047 and made apparent by this change: ssl3_get_next_proto wasn't updating next_proto_negotiated_len
BUG:RT3993: Fix error found by VS2008
NOT BUG:Cast and then negate don't negate an unsigned
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
BUG:RT3969: Add OPENSSL_SYS_UEFI
BUG:This provides support for building in the EDK II reference implementation of UEFI Most UEFI firmware in existence uses OpenSSL for implementing the core cryptographic functionality needed for Secure Boot
NOT BUG:This has always previously been handled with external patches to OpenSSL but we are now making a concerted effort to eliminate those
NOT BUG:In this mode we don't actually use the OpenSSL makefiles; we process the MINFO file generated by 'make files' and incorporate it into the EDK2 build system
NOT BUG:Since EDK II builds for various targets with varying word size and we need to have a single prepackaged configuration we deliberately don't hard-code the setting of SIXTY_FOUR_BIT vs THIRTY_TWO_BIT in opensslconf.h We bypass that for OPENSSL_SYS_UEFI and allow EDK II itself to set those depending on the architecture
NOT BUG:For x86_64 EDK II sets SIXTY_FOUR_BIT and thus uses 'long long' for the 64-bit type even when building with GCC where 'long' is also 64-bit We do this because the Microsoft toolchain has 32-bit 'long'
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Fix rehash/c_rehash doc and behavior
NOT BUG:Both now warn once if directory isn't writeable Both now warn on file-write errors (multiple times) Update manpage to describe both program and script correctly
NOT BUG:Fix uninit warning Remove unnecessary casts Nothing to add is an error
NOT BUG:add support for apple os/x
NOT BUG:Fix a few tests that depended on the wrong algorithm check
NOT BUG:test_ecdh and test_ecdsa are made to depend on no-ec being false test_hmac is made not to depend on algorithm at all
BUG:Based on a contribution by Alessandro Ghedini <alessandro@ghedini.me>
NOT BUG:Adjust the general fill-column in doc/dir-locals.example.el
NOT BUG:Having a general fill-column of 78 may look nice at first sight but if the edited text gets indented a bit afterward (such as with git comments in 'git log') it suddenly turns not so nice on a classic 80 columns terminal A fill-column of 70 will serve us better
NOT BUG:Adjust the verify_extra test recipe to its executable
NOT BUG:The verify_extra_test was recently changed to take its parameters as arguments instead of having them hardcoded
NOT BUG:GH391: Apple port
NOT BUG:Also make internal functions consistently return values and add a comment documenting them
NOT BUG:Make sure that 80-test_ca.t finds all the config files
NOT BUG:This recipe counted too much on being called with test/ as its current working directory That's a mistake on for example Windows
NOT BUG:Add a recipe for the new null pointer test
NOT BUG:Change the 80-test_tsa recipe as per changes in testtsa
NOT BUG:Add a recipe for the new pbelu test
BUG:Remake the testsslproxy tests
NOT BUG:The testsslproxy tests turned out to be useless as they were They were really just for show and the results were ignore Now they are changed into a more veerifiable test
NOT BUG:Small fix in OpenSSL::Test
NOT BUG:Be careful when shifting in a function argument you end up changing the caller's value Instead when it is an array make a shallow copy and shift in that instead
BUG:Incorporate recent changes that were originally made in test/testssl
NOT BUG:Add documentation for the new testing framework
NOT BUG:Add a recipe for the new gmdiff test
NOT BUG:Correct test name
NOT BUG:Some tests were copied from test_jpake but the title wasn't changed accordingly This might seem like a small thing but it does affect the log file name..
NOT BUG:Remake test/sslsessionticktest.pl into a recipe
NOT BUG:Adapt the libssl test harness testing scripts to new testing framework
NOT BUG:This involves adding $TOP/util as perl library in test/run_tests.pl
NOT BUG:Check the validity of MINFO
NOT BUG:MINFO may be an old file lying around which might have 00-check_testexes.t produce incorrect results To make sure this doesn't happen check the variable VERSION in it against the same variable in the top Makefile
NOT BUG:Better method of skipping all the tests in 00-check_testexes.t
NOT BUG:Before trying to read MINFO we have no idea how many to test for and because skip expects to get an exact number somehow it's better to use 'plan skip_all'
NOT BUG:Remove special x509 test conversions
NOT BUG:Following the commit from July 2 that removed netscape formated certs it is no longer necessary to have conversion tests for it
NOT BUG:Add a few missing tests
BUG:test_clienthello test_packet test_verify_extra test_secmem
NOT BUG:Push the line buffer filter on the out BIO on VMS
NOT BUG:VMS files are normally record oriented rather than stream oriented This means that every write() will create a new record which is seen as a line of its own regardless of if there was a \n in there or not bntest uses BN_print which prints out number with more than one write() thereby dividing up the numbers in several lines which greatly disturbs the post-bntest checks that expect to find a full formula to calculate on one line
NOT BUG:So for VMS we need to push the linebuffer filter on the out BIO
NOT BUG:Rework 00-test_checkexes.t for VMS
NOT BUG:Unfortunately a file spec with character range globs interfere with paths on VMS and are therefore disabled Rework this test to collect a list of expected tests and a list of all recipes and compare the two using grep
NOT BUG:Document OpenSSL::Test and OpenSSL::Test::Simple
NOT BUG:For OpenSSL::Test it meant rearranging the code to better suite the structure of the documentation
NOT BUG:Change OpenSSL::Test to be an extension of Test::More
NOT BUG:It became tedious as well as error prone to have all recipes use Test::More as well as OpenSSL::Test The easier way is to make OpenSSL::Test an extension of Test::More thereby having all version checks as well as future checks firmly there Additionally that allows us to extend existing Test::More functions if the need would arise
BUG:New feature: STOPTEST
NOT BUG:When the environment variable STOPTEST is defined (with any value other than the empty string) the test machinery in OpenSSL::Test goes into a different mode that will stop all testing at the end of a failing recipe
NOT BUG:Add version numbers on some modules we use
NOT BUG:Have 'make clean' clean away the log files
NOT BUG:Tone down the requirements of a test that will go away
NOT BUG:00-check_testexes.t was a way for me to check that I didn't forget a compiled test app The way it worked was to require MINFO to be present Considering the need for this test has diminished considerably at this point I might as well tone down the requirement and have it skip the test (and not fail it) if MINFO isn't present
NOT BUG:Remove old testing scripts out of the way
NOT BUG:For now I'm moving them into Attic/ They will be removed later
NOT BUG:Adapt mk1mf.pl and helpers to the new testing framework
NOT BUG:With the new testing framework building a test target with mk1mf.pl becomes a very simple thing And especially no more need to do the amount of hackery in unix.pl we did
NOT BUG:Also some tests need a working apps/CA.pl as well as rehashed certs in certs/demo So move the code creating those files so it gets done regardless not just in non-mk1mf environments
NOT BUG:Simplify very simple test recipes further
NOT BUG:Very simple test recipes easily become tedious so they might benefit from being made as simple as possible Therefore OpenSSL::Test::Simple is born It currently provides but one function simple_test() which takes a minimum of two parameters (test name and program to run) with the optional third being the algorithm to be checked for before running the test itself
NOT BUG:All recipes with that simple thing to do have been rewritten to be as minimal as possible
NOT BUG:Remove test targets from Makefile have it use run_tests.pl
NOT BUG:Also remove recipes/00-check_testalltests.t since it will lack the information from the now gone alltests target
NOT BUG:Ignore the log files
NOT BUG:The new test framework produces a lot of log files (one for each test) Git doesn't need to know
NOT BUG:Add recipes for misc other things we want to test
NOT BUG:Note that this required a change in constant_time_test.c as it says "ok" which interferes with what Test::Harness expects to see I had constant_time_test.c say "success" instead
NOT BUG:Add recipes for the larger protocols
NOT BUG:This covers the certificate authority commands the cms and smime commands OCSP SSL and TSA
NOT BUG:Add engine and evp test recipes
NOT BUG:Add recipes for tests related to certificates
NOT BUG:Some of them make use of recipes/tconversion.pl
NOT BUG:Add asymetric cipher test recipes
NOT BUG:Some of them make use of recipes/tconversion.pl
NOT BUG:Add a helper script for key file format conversion tests
NOT BUG:As tests are done until now there are a few scripts that look almost but not quite the same tkey tx509 tcrl tpkcs7 treq tsid and probably a few more
NOT BUG:recipes/tconversions.pl is a helper script that generalises the function of each of those and can then be used in a general manner from test recipes
NOT BUG:Add the encryption test recipe
NOT BUG:This tests all available openssl cipher commands
NOT BUG:Add recipes for individual block ciphers stream ciphers and digests
NOT BUG:These recipes all correspond to a compiled test program
NOT BUG:Add math tests recipes
NOT BUG:The math recipes are among the heavier but also quite important For the BN test we have previously relied on bc to verify the numbers Unfortunately bc doesn't exist everywhere making tests on some platforms rather painful With the new recipe (recipes/10-test_bn.t) we rely on perl's Math::BigInt and a homegrown simple calculator (recipes/bc.pl) that can do enough to cover for bc
NOT BUG:Groundwork for a perl based testing framework
NOT BUG:The idea with this perl based testing framework is to make use of what's delivered with perl and exists on all sorts of platforms
BUG:The choice came to using Test::More and Test::Harness as that seems to be the most widely spread foundation even if perl is aged
NOT BUG:The main runner of the show is run_tests.pl As it currently stands it's designed to run from inside Makefile but it's absolutely possible to run it from the command line as well like so:
NOT BUG:cd test OPENSSL_SRCDIR=. perl run_tests.pl
NOT BUG:The tester scripts themselves are stored in the subdirectory recipes/ and initially we have two such scripts recipes/00-check_testalltests.t and recipes/00-check_testexes.t recipes/00-check_testalltests.t will pick out the dependencies of "alltests" in test/Makefile and check if it can find recipes with corresponding names recipes/00-check_testexes.t does something similar but bases it on existing compiled test binaries They make it easy to figure out what's to be added and will be removed when this effort is finished
NOT BUG:Individual recipes can be run as well of course as they are perl scripts in themselves For example you can run only recipes/00-check_testexes.t like so:
NOT BUG:cd test OPENSSL_SRCDIR=. perl recipes/00-check_testexes.t
NOT BUG:To make coding easier there's a routine library OpenSSL::Test which is reachable in a perl script like so:
NOT BUG:use lib 'testlib'; use OpenSSL::Test;
BUG:PACKETise ServerKeyExchange
NOT BUG:Process the ServerKeyExchange message using the PACKET API
NOT BUG:PACKETise ServerHello processing
NOT BUG:Process ServerHello messages using the PACKET API
BUG:Updates for NumericString support
NOT BUG:Ensure that EBCDIC support works and update a comment
BUG:Add NumericString support
NOT BUG:GOST requires improved NumericString support
NOT BUG:Fix build break due to rehash command
NOT BUG:The build was breaking due to a Makefile recipe expecting an openssl version to be on the PATH with support for the rehash command
NOT BUG:fix build breakage on windows
NOT BUG:Fix typo that broke build on non-unix
NOT BUG:Add rehash command to openssl
NOT BUG:On Unix/Linux platforms merge c_rehash script into openssl as a C program
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Small fix: make istext static
NOT BUG:This takes away a build failure in some cases
NOT BUG:Fix enc so it properly treats BASE64 as text
NOT BUG:To set both the incoming and outgoing data when 'encrypting' or 'decrypting' to FORMAT_BASE64 wasn't quite the right thing to do
NOT BUG:Fixup merge conflicts in util/libeay.num
NOT BUG:Change the treatment of stdin and stdout to allow binary data
NOT BUG:If the output to stdout or the input from stdin is meant to be binary it's deeply unsetting to get the occasional LF converted to CRLF or the other way around If someone happens to forget to redirect stdin or stdout they will get gibberish anyway line ending conversion will not change that
NOT BUG:Therefore let's not have dup_bio_* decide unilaterally what mode the BIO derived from stdin and stdout and rather let the app decide by declaring the intended format
NOT BUG:dup_bio_* and bio_open_* are utility functions and belong in apps.c
NOT BUG:Remove warning about use of uninitialised variable
NOT BUG:Have binary mode when the format is binary not the other way around
BUG:Fixing a small mixup
NOT BUG:Have the test executables output in text mode
NOT BUG:The test executables use standard output and standard error for text output so let's open the corresponding BIOs in text mode
NOT BUG:Change the way apps open their input and output files
NOT BUG:The different apps had the liberty to decide whether they would open their input and output files in binary mode or not which could be confusing if two different apps were handling the same type of file in different ways
NOT BUG:The solution is to centralise the decision of low level file organisation and that the apps would use a selection of formats to state the intent of the file
NOT BUG:Make the handling of output and input formats consistent
NOT BUG:Most of all we needed to sort out which ones are binary and which ones are text and make sure they are treated accordingly and consistently so
NOT BUG:Make the verify_extra test location agnostic
NOT BUG:Depending on platform verify_extra_test may fail because it relies on test/ being the current working directory Make it get all the required files on the command line instead to solve that issue
NOT BUG:make update
NOT BUG:Avoid direct X509 structure access
NOT BUG:Replace X509 macros with functions
BUG:Cleanup testtsa script
NOT BUG:Add RUN function; remove single-use functions and use their body inline
NOT BUG:Make TS structures opaque
NOT BUG:Most of the accessors existed and were already used so it was easy TS_VERIFY_CTX didn't have accessors/settors so I added the simple and obvious ones and changed the app to use them Also within crypto/ts replaced the functions with direct access to the structure members since we generally aren't opaque within a directory
NOT BUG:Also fix RT3901
NOT BUG:RT3955: Reduce some stack usage
NOT BUG:Use malloc/free instead of big onstack buffers
NOT BUG:In X509_STORE_CTX_init cleanup on failure
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:RT3951: Add X509_V_FLAG_NO_CHECK_TIME to suppress time check
NOT BUG:In some environments such as firmware the current system time is entirely meaningless Provide a clean mechanism to suppress the checks against it
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Use the shlib wrapper when running nptest
NOT BUG:Since there seems to be no way to avoid linking to libssl and libcrypto just wrap the test This unbreaks "shared" builds when using clang and/or OS X
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:make X509_REVOKED opaque
NOT BUG:Supply a build rule for the recently added nptest
NOT BUG:Commit d4ab70f27cb7e518e6a9d6323c996cc3feb7496b added a test program to check that the NULL pointer is represented as all zero bits but did not specify a build rule for that new executable On many platforms the implicit rule sufficed since nptest is a very simple program but for at least darwin-i386-cc an explicit rule is needed On darwin-i386-cc the implicit rule targetted a 64-bit executable but the object file containing the definition of main was a 32-bit object which the linker excluded from consideration resulting in a link failure due to no definition for _main
NOT BUG:Add the missing build rule to fix the build on such platforms
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Match SUITEB strings at start of cipher list
NOT BUG:PR#4009
NOT BUG:Test for NULL ptr == 0
NOT BUG:Add a test to ensure that "char *p = NULL" is equivalent to all-bytes-zero
NOT BUG:RT3998: Allow scrypt to be disabled
BUG:This does 64-bit division and multiplication and on 32-bit platforms pulls in libgcc symbols (and MSVC does similar) which may not be available Mostly done by David Woodhouse
BUG:More zalloc nits
BUG:Found on GitHub by dimman
BUG:Revert "OPENSSL_NO_xxx cleanup: RFC3779"
NOT BUG:This reverts the non-cleanup parts of commit c73ad69017 We do actually have a reasonable use case for OPENSSL_NO_RFC3779 in the EDK2 UEFI build since we don't have a strspn() function in our runtime environment and we don't want the RFC3779 functionality anyway
NOT BUG:In addition it changes the default behaviour of the Configure script so that RFC3779 support isn't disabled by default It was always disabled from when it was first added in 2006 right up until the point where OPENSSL_NO_RFC3779 was turned into a no-op and the code in the Configure script was left *trying* to disable it but not actually working
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:remove 0 assignments
NOT BUG:After openssl_zalloc cleanup more "set to 0/NULL" assignments Many are from github feedback
NOT BUG:Add UEFI flag for rand build
NOT BUG:Add OPENSSL_SYS_UEFI flag for RAND handling;
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Win32 build fix: include internal/numbers.h to get UIN32_MAX
NOT BUG:RT3674: Make no-cms build work
NOT BUG:Also has changes from from David Woodhouse <David.Woodhouse@intel.com> and some tweaks from me
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:make update
NOT BUG:PBE lookup test
NOT BUG:Add test to check PBE lookups: these can fail if the PBE table is not correctly orders Add to "make test"
BUG:Add initial Travis CI configuration
NOT BUG:Closes #63
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Two changes at ones lead to a confused libeay.num Fix
NOT BUG:Check OPENSSL_gmtime_diff
BUG:It's test code that only runs on 64bit time_t machines Move it to a standalone test/gmdifftest
NOT BUG:Add and use OPENSSL_zalloc
NOT BUG:There are many places (nearly 50) where we malloc and then memset Add an OPENSSL_zalloc routine to encapsulate that (Missed one conversion; thanks Richard) Also fixes GH328
NOT BUG:make update
NOT BUG:make X509_CRL opaque
NOT BUG:Extend ciphersuite test coverage
NOT BUG:Add support for testing ECDSA and DSA ciphersuites
NOT BUG:Fix CCM support in DTLS
NOT BUG:Update ssltest certificate handling
NOT BUG:Use SSL_CONF for certificate handling is ssltest.c this changes the behaviour slightly: the -cert and -key options are no longer recognised and a default certificate file is not used
NOT BUG:This change means that -s_cert and -c_cert can be used mode than once to support use of multiple certificates
NOT BUG:Create DSA and ECDSA certificates
NOT BUG:If supported create DSA and ECDSA certificates and test them
NOT BUG:delete unused structure
NOT BUG:Move OPENSSL_ITEM to store.h
NOT BUG:The only place that uses it
BUG:Cleaner handling of "cnid" in do_x509_check
NOT BUG:Avoid using cnid = 0 use NID_undef instead and return early instead of trying to find an instance of that in the subject DN
NOT BUG:Better handling of verify param id peername field
NOT BUG:Initialize pointers in param id by the book (explicit NULL assignment rather than just memset 0)
NOT BUG:In x509_verify_param_zero() set peername to NULL after freeing it
NOT BUG:In x509_vfy.c's internal check_hosts() avoid potential leak of possibly already non-NULL peername This is only set when a check succeeds so don't need to do this repeatedly in the loop
NOT BUG:Fix DTLS1.2 buffers
NOT BUG:Fix the setup of DTLS1.2 buffers to take account of the Header
NOT BUG:Fix the comment for POINT_CONVERSION_UNCOMPRESSED
NOT BUG:The |z| value should be 0x04 not 0x02
NOT BUG:RT#3838
NOT BUG:Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:make update
NOT BUG:Document extension functions
NOT BUG:functions to retrieve certificate flags
NOT BUG:use uint32_t for certificate flags
NOT BUG:RT3984: Fix clang compiler warning on Mac OS X where %ld is used for uint64_t
NOT BUG:clang suggests %llu instead but it isn't clear that is portable on all platforms
NOT BUG:C99 and above define a handy macro for us so we try to use that definition and fall back to current definition if needed (though we switch to 'u' for unsigned)
NOT BUG:apps/speed.c: fix memory leak
NOT BUG:RT4002: check for NULL cipher in p12_crpt.c
NOT BUG:The NULL cipher case can't actually happen because we have no EVP_PBE_CTL combinations where cipher_nid is -1 and keygen is PKCS12_PBE_keyivgen But make the code more obviously correct
NOT BUG:RT 3493: fix RSA test
NOT BUG:- Pass in the right ciphertext length to ensure we're indeed testing ciphertext corruption (and not truncation) - Only test one mutation per byte to not make the test too slow - Add a separate test for truncated ciphertexts
BUG:RT3767: openssl_button.gif should be PNG
NOT BUG:No we should just delete it And updated the README
NOT BUG:Ignore .dir-locals.el
NOT BUG:Because we recently encourage people to have a .dir-locals.el it's a good idea to ignore it on a git level
NOT BUG:make update
NOT BUG:Add X509_up_ref function
NOT BUG:Add X509_CRL_up_ref function
NOT BUG:check bn_new return value
NOT BUG:Slightly modified from the original PR Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:make X509_REQ opaque
NOT BUG:make X509_CERT_AUX opaque
NOT BUG:Remove asn1-kludge option
NOT BUG:Remove asn1-kludge option from the req utility It was a decade old workaround for CAs and software which required an invalid encoding of PKCS#10 certificate requests: omitting the attributes field even though it is not OPTIONAL
NOT BUG:GH367 follow-up for more clarity
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:BN_mod_exp_mont_consttime: check for zero modulus
NOT BUG:Don't dereference |d| when |top| is zero Also test that various BIGNUM methods behave correctly on zero/even inputs
BUG:Follow-up to b11980d79a52ec08844f08bea0e66c04b691840b
NOT BUG:Remove auto-fill-mode
NOT BUG:Apparently emacs sees changes to auto-fill-mode as insecure
NOT BUG:Add an example .dir-locals.el
NOT BUG:This file when copied to .dir-locals.el in the OpenSSL source top will make sure that the CC mode style "OpenSSL-II" will be used for all C files
NOT BUG:Additionally I makes sure that tabs are never used as indentation character regardless of the emacs mode and that the fill column is 78
NOT BUG:Add emacs CC mode style for OpenSSL
NOT BUG:This hopefully conforms closely enough to the current code style
NOT BUG:Fix spurious bntest failures
NOT BUG:BN_bntest_rand generates a single-word zero BIGNUM with quite a large probability
NOT BUG:A zero BIGNUM in turn will end up having a NULL |d|-buffer which we shouldn't dereference without checking
NOT BUG:Remove the "times" directory
BUG:Fix 4c42ebd; forgot to inutil util/libeay.num
NOT BUG:GH354: Memory leak fixes
NOT BUG:Fix more potential leaks in X509_verify_cert() Fix memory leak in ClientHello test Fix memory leak in gost2814789 test Fix potential memory leak in PKCS7_verify() Fix potential memory leaks in X509_add1_reject_object() Refactor to use "goto err" in cleanup
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:GH367: Fix dsa keygen for too-short seed
NOT BUG:If the seed value for dsa key generation is too short (< qsize) return an error Also update the documentation
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Fix memory over-read
NOT BUG:Fix from David Baggett via tweet
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Various doc fixes
NOT BUG:Make all mention of digest algorithm use "any supported algorithm"
NOT BUG:RT2071 some new manpages from Victor B Wagner <vitus@cryptocom.ru>: X509_LOOKUP_hash_dir.pod X509_check_ca.pod X509_check_issued.pod
NOT BUG:RT 1600: Remove references to non-existant objects(3) Add RETURN VALUES to BIO_do_accept page
NOT BUG:RT1818: RSA_sign Can return values other than 0 on failure
NOT BUG:RT3634: Fix AES CBC aliases (Steffen Nurpmeso <sdaoden@yandex.com>)
NOT BUG:RT3678: Some clarifications to BIO_new_pair (Devchandra L Meetei <dlmeetei@gmail.com>)
NOT BUG:RT3787: Fix some EVP_ function return values (Laetitia Baudoin <lbaudoin@google.com>)
NOT BUG:GH350: -help text few s_client and s_server flags
NOT BUG:add -help description of sigalgs client_sigalgs curves and named_curve
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Fixed problem with multiple load-unload of comp zlib
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
BUG:GH correct organizationalUnitName
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Clean up reset of read/write sequences
NOT BUG:Use sizeof instead of an explicit size and use the functions for the purpose
NOT BUG:PACKET: add methods for reading length-prefixed TLS vectors
NOT BUG:Rewrite ssl3_get_client_hello to use the new methods
NOT BUG:Fix SSLv2-compatible ClientHello processing
NOT BUG:If the client challenge is less than 32 bytes it is padded with leading - not trailing - zero bytes
NOT BUG:PACKET: constify where possible
NOT BUG:The PACKET should hold a 'const unsigned char*' underneath as well but the legacy code passes the record buffer around as 'unsigned char*' (to callbacks too) so that's a bigger refactor
NOT BUG:GH371: Print debug info for ALPN extension
NOT BUG:Also known as RT 4106 Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Remove _locked memory functions
NOT BUG:Undocumented unused unnecessary (replaced by secure arena)
NOT BUG:BN_bin2bn handle leading zero's
NOT BUG:If a binary sequence is all zero's call BN_zero
NOT BUG:Add NewSessionTicket test suite
NOT BUG:Add a set of tests for checking that NewSessionTicket messages are behaving as expected
NOT BUG:Fix TLSProxy end of test detection
NOT BUG:Previously TLSProxy would detect a successful handshake once it saw the server Finished message This causes problems with abbreviated handshakes or if the client fails to process a message from the last server flight
NOT BUG:This change additionally sends some application data and finishes when the client sends a CloseNotify
NOT BUG:Fix DTLS session ticket renewal
NOT BUG:A DTLS client will abort a handshake if the server attempts to renew the session ticket This is caused by a state machine discrepancy between DTLS and TLS discovered during the state machine rewrite work
NOT BUG:The bug can be demonstrated as follows:
NOT BUG:Start a DTLS s_server instance: openssl s_server -dtls
NOT BUG:Start a client and obtain a session but no ticket: openssl s_client -dtls -sess_out session.pem -no_ticket
NOT BUG:Now start a client reusing the session but allow a ticket: openssl s_client -dtls -sess_in session.pem
NOT BUG:The client will abort the handshake
NOT BUG:Ignore generated *.S ARM assembly files
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:RT4019: Duplicate -hmac flag in dgst.pod
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:GH372: Remove duplicate flags
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Small cleanup of crypto.pod
NOT BUG:Came up on the mailing list from Ken Goldman
NOT BUG:GH337: Need backslash before leading #
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:RT4015: Add missing date to CHANGES
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:More test cases
NOT BUG:Add DSA tests
NOT BUG:Add tests to verify signatures against public keys This will also check that a public key is read in correctly
NOT BUG:Add DSA digest length checks
NOT BUG:Fix L<> content in manpages
NOT BUG:L<foo|foo> is sub-optimal If the xref is the same as the title which is what we do then you only need L<foo> This fixes all 1457 occurrences in 349 files Approximately (And pod used to need both.)
NOT BUG:Add new types to indent.pro
NOT BUG:Add new GOST OIDs
NOT BUG:Add new OIDs for latest GOST updates
NOT BUG:Restore previous behaviour of only running one algorithm when -evp alg is used
BUG:Submitted by: Eric Young <eay@pobox.com>
NOT BUG:restore usage of -elapsed that was disabled in the ifdef reorg
NOT BUG:GH345: Remove stderr output
NOT BUG:Move FAQ to the web
NOT BUG:Best hope of keeping current
NOT BUG:PACKETise CertificateRequest
NOT BUG:Process CertificateRequest messages using the PACKET API
BUG:PACKETise ClientKeyExchange processing
NOT BUG:Use the new PACKET code to process the CKE message
BUG:PACKETise NewSessionTicket
NOT BUG:Process NewSessionTicket messages using the new PACKET API
NOT BUG:Fix session tickets
NOT BUG:Commit 9ceb2426b0 (PACKETise ClientHello) broke session tickets by failing to detect the session ticket extension in an incoming ClientHello This
NOT BUG:add CCM docs
NOT BUG:Add CCM ciphersuites from RFC6655 and RFC7251
NOT BUG:ccm8 support
NOT BUG:CCM support
NOT BUG:Update docs
NOT BUG:Clarify and update documention for extra chain certificates
NOT BUG:PR#3878
NOT BUG:Documentation for SSL_check_chain()
NOT BUG:for test_sslvertol add a value to display SSL version < 3 in debug
NOT BUG:Fixups in libssl test harness
NOT BUG:- select an actual file handle for devnull - do not declare $msgdata twice - SKE records sometimes seem to come without sig - in SKE parsing use and use $pub_key_len when parsing $pub_key
NOT BUG:Use -I to add to @INC and use -w to produce warnings
NOT BUG:Fix FAQ formatting for new website
NOT BUG:PACKETise Certificate Status message
NOT BUG:Process the Certificate Status message using the PACKET API
NOT BUG:Enhance PACKET readability
NOT BUG:Enhance the PACKET code readability and fix a stale comment Thanks to Ben Kaduk (bkaduk@akamai.com) for pointing this out
NOT BUG:Add missing return check for PACKET_buf_init
NOT BUG:The new ClientHello PACKET code is missing a return value check
NOT BUG:GH364: Free memory on an error path
NOT BUG:Part of RT 3997 Per Ben just jump to common exit code
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:PACKETise Server Certificate processing
NOT BUG:Use the PACKET API to process an incoming server Certificate message
NOT BUG:Return error for unsupported modes
BUG:PR#3974 PR#3975
NOT BUG:Fix memory leak if setup fails
NOT BUG:Err isn't always malloc failure
NOT BUG:Remove Gost94 signature algorithm
NOT BUG:This was obsolete in 2001 This is not the same as Gost94 digest Thanks to Dmitry Belyavsky <beldmit@gmail.com> for review and advice
NOT BUG:Fix "make test" seg fault with SCTP enabled
NOT BUG:When config'd with "sctp" running "make test" causes a seg fault This is actually due to the way ssltest works - it dives under the covers and frees up BIOs manually and so some BIOs are NULL when the SCTP code does not expect it The simplest fix is just to add some sanity checks to make sure the BIOs aren't NULL before we use them
NOT BUG:This problem occurs in master and 1.0.2 The fix has also been applied to 1.0.1 to keep the code in sync
NOT BUG:Fix missing return value checks in SCTP
NOT BUG:There are some missing return value checks in the SCTP code In master this was causing a compilation failure when config'd with "--strict-warnings sctp"
NOT BUG:make update
NOT BUG:Run a "make update" for the OSSLTest Engine changes
NOT BUG:Use dynamic engine for libssl test harness
NOT BUG:Use a dynamic engine for ossltest engine so that we can build it without subsequently deploying it during install We do not want people accidentally using this engine
BUG:Add a test for 0 p value in anon DH SKE
NOT BUG:When using an anon DH ciphersuite a client should reject a 0 value for p
NOT BUG:Extend TLSProxy capabilities
NOT BUG:Add ServerHello parsing to TLSProxy Also add some (very) limited ServerKeyExchange parsing Add the capability to set client and server cipher lists Fix a bug with fragment lengths
NOT BUG:Add some libssl tests
NOT BUG:Two tests are added: one is a simple version tolerance test; the second is a test to ensure that OpenSSL operates correctly in the case of a zero length extensions block The latter was broken inadvertently (now fixed) and it would have been helpful to have a test case for it
NOT BUG:Add a libssl test harness
NOT BUG:This commit provides a set of perl modules that support the testing of libssl The test harness operates as a man-in-the-middle proxy between s_server and s_client Both s_server and s_client must be started using the "-testmode" option which loads the new OSSLTEST engine
BUG:The test harness enables scripts to be written that can examine the packets sent during a handshake as well as (potentially) modifying them so that otherwise illegal handshake messages can be sent
BUG:Add OSSLTest Engine
NOT BUG:This engine is for testing purposes only It provides crippled crypto implementations and therefore must not be used in any instance where security is required
NOT BUG:This will be used by the forthcoming libssl test harness which will operate as a man-in-the-middle proxy The test harness will be able to modify TLS packets and read their contents By using this test engine packets are not encrypted and MAC codes always verify
NOT BUG:Check for 0 modulus in BN_MONT_CTX_set
NOT BUG:The function BN_MONT_CTX_set was assuming that the modulus was non-zero and therefore that |mod->top| > 0 In an error situation that may not be the case and could cause a seg fault
NOT BUG:This is a follow on from CVE-2015-1794
BUG:Fix seg fault with 0 p val in SKE
NOT BUG:If a client receives a ServerKeyExchange for an anon DH ciphersuite with the value of p set to 0 then a seg fault can occur This commits adds a test to reject p g and pub key parameters that have a 0 value (in accordance with RFC 5246)
BUG:The security vulnerability only affects master and 1.0.2 but the fix is additionally applied to 1.0.1 for additional confidence
BUG:CVE-2015-1794
NOT BUG:Normalise make errors output
NOT BUG:make errors wants things in a different order to the way things are currently defined in the header files The easiest fix is to just let it reorder it
NOT BUG:GH365: Missing #ifdef rename
NOT BUG:RT3999: Remove sub-component version strings
NOT BUG:Especially since after the #ifdef cleanups this is not useful
NOT BUG:Fix build break
NOT BUG:Find the right indent on *BSD
NOT BUG:GH357: Update ocsp.c
NOT BUG:Add Host Header in OCSP query if no host header is set via -header
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:RT3998: fix X509_check_host.pod release to 1.0.2
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Fix clang uninitialized variable warning
NOT BUG:We could just initialize it but to be consistent with the rest of the file it seemed to make more sense to just drop
NOT BUG:Revert "Fix uninitalised warning."
BUG:This reverts commit 704563f04a8401781b359906c1f88a30e12af69c
NOT BUG:Reverting in favour of the next commit which removes the underlying cause of the warning
BUG:Fix uninitalised warning
NOT BUG:RT3990: Fix #include path
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Change error reason to match previous behaviour
BUG:Fix unhandled error condition in sslv2 client hello parsing
NOT BUG:--strict-warnings started showing warnings for this today..
BUG:Surely an error should be raised if these reads fail?
NOT BUG:Fix SRTP s_client/s_server options
NOT BUG:The -use_srtp s_client/s_server option is supposed to take a colon separated string as an argument In master this was incorrectly set to expect a filename
BUG:PACKETise NextProto
NOT BUG:Change NextProto message processing to use the PACKET API
BUG:PACKETise CertificateVerify processing
NOT BUG:Modify CertificateVerify processing to use the new PACKET API
NOT BUG:PACKETise ClientCertificate processing
NOT BUG:Use the PACKET API for processing ClientCertificate messages
NOT BUG:Fix a bug in the new PACKET implementation
NOT BUG:Some of the PACKET functions were returning incorrect data An unfortunate choice of test data in the unit test was masking the failure
NOT BUG:Fix warning when compiling with no-ec2m
NOT BUG:EC_KEY_set_public_key_affine_coordinates was using some variables that only apply if OPENSSL_NO_EC2M is not defined
NOT BUG:Fix make errors for the CCS changes
NOT BUG:The move of CCS into the state machine was causing make errors to fail This fixes it
NOT BUG:Fix ssl3_read_bytes handshake fragment bug
NOT BUG:The move of CCS into the state machine introduced a bug in ssl3_read_bytes The value of |recvd_type| was not being set if we are satisfying the request from handshake fragment storage This can occur for example with renegotiation and causes the handshake to fail
NOT BUG:Move DTLS CCS processing into the state machine
NOT BUG:Continuing on from the previous commit this moves the processing of DTLS CCS messages out of the record layer and into the state machine
NOT BUG:Move TLS CCS processing into the state machine
NOT BUG:The handling of incoming CCS records is a little strange Since CCS is not a handshake message it is handled differently to normal handshake messages Unfortunately whilst technically it is not a handhshake message the reality is that it must be processed in accordance with the state of the handshake Currently CCS records are processed entirely within the record layer In order to ensure that it is handled in accordance with the handshake state a flag is used to indicate that it is an acceptable time to receive a CCS
NOT BUG:Previously this flag did not exist (see CVE-2014-0224) but the flag should only really be considered a workaround for the problem that CCS is not visible to the state machine
NOT BUG:Outgoing CCS messages are already handled within the state machine
NOT BUG:This patch makes CCS visible to the TLS state machine A separate commit will handle DTLS
NOT BUG:PACKETise ClientHello processing
NOT BUG:Uses the new PACKET code to process the incoming ClientHello including all extensions etc
NOT BUG:PACKET unit tests
NOT BUG:Add some unit tests for the new PACKET API
NOT BUG:Add initial packet parsing code
NOT BUG:Provide more robust (inline) functions to replace n2s n2l etc These functions do the same thing as the previous macros but also keep track of the amount of data remaining and return an error if we try to read more data than we've got
NOT BUG:Fix refactoring breakage
NOT BUG:don't reset return value to 0
NOT BUG:Add -Wconditional-uninitialized to clang strict warnings
NOT BUG:Build with --strict-warnings on FreeBSD
NOT BUG:Make BSD make happy with subdirectories
NOT BUG:GH336: Return an exit code if report fails
NOT BUG:Only define PAGE_SIZE if not already defined
BUG:Remove erroneous server_random filling
NOT BUG:Commit e481f9b90b164 removed OPENSSL_NO_TLSEXT from the code
NOT BUG:Previously if OPENSSL_NO_TLSEXT *was not* defined then the server random was filled during getting of the ClientHello If it *was* defined then the server random would be filled in ssl3_send_server_hello() Unfortunately in server random fillings were left in This could cause problems for session ticket callbacks
NOT BUG:Clear BN-mont values when free'ing it
NOT BUG:From a CloudFlare patch
NOT BUG:Various doc fixes from GH pull requests
BUG:Thanks folks: 348 Benjamin Kaduk 317 Christian Brueffer 254 Erik Tews 253 Erik Tews 219 Carl Mehner 155 (ghost) 95 mancha 51 DominikNeubauer
BUG:RT3742: Add xmpp_server to s_client
NOT BUG:RT3963: Allow OCSP stapling with -rev and -www
NOT BUG:RT3962: Check accept_count only if not unlimited
NOT BUG:RT3961: Fix switch/case errors in flag parsing
NOT BUG:RT3959: Fix misleading comment
NOT BUG:cleanse psk_identity on error
NOT BUG:Free and cleanse pms on error
NOT BUG:Don't request certificates for any PSK ciphersuite
NOT BUG:CAMELLIA PSK ciphersuites from RFC6367
NOT BUG:Add PSK ciphersuites to docs
NOT BUG:Update CHANGES
NOT BUG:Add RFC4785 ciphersuites
BUG:Add RFC4279 RFC5487 and RFC5489 ciphersuites
NOT BUG:Note: some of the RFC4279 ciphersuites were originally part of PR#2464
NOT BUG:Initial new PSK ciphersuite defines
NOT BUG:Add full PSK trace support
NOT BUG:PSK premaster secret derivation
NOT BUG:Move PSK premaster secret algorithm to ssl_generate_master secret so existing key exchange code can be used and modified slightly to add the PSK wrapping structure
NOT BUG:Extended PSK server support
NOT BUG:Add support for RSAPSK DHEPSK and ECDHEPSK server side
NOT BUG:Update various checks to ensure certificate and server key exchange messages are only sent when required
NOT BUG:Update message handling PSK server key exchange parsing now include an identity hint prefix for all PSK server key exchange messages PSK client key exchange message expects PSK identity and requests key for all PSK key exchange ciphersuites
NOT BUG:Update flags for RSA DH and ECDH so they are also used in PSK
NOT BUG:Extended PSK client support
NOT BUG:Add support for RSAPSK DHEPSK and ECDHEPSK client side
NOT BUG:Update various checks to ensure certificate and server key exchange messages are only expected when required
NOT BUG:Update message handling PSK server key exchange parsing now expects an identity hint prefix for all PSK server key exchange messages PSK client key exchange message requests PSK identity and key for all PSK key exchange ciphersuites and includes identity in message
NOT BUG:Update flags for RSA DH and ECDH so they are also used in PSK
NOT BUG:PSK PRF correction
NOT BUG:For SHA384 PRF PSK ciphersuites we have to switch to default PRF for TLS < 1.2
NOT BUG:Make auto DH work with DHEPSK
BUG:Check for kECDH with extensions
NOT BUG:Enable PSK if corresponding mask set
NOT BUG:Disable all PSK if no callback
NOT BUG:Disable unsupported PSK algorithms
NOT BUG:new PSK text constants
NOT BUG:New PSK aliases
NOT BUG:New PSK keyex text constants
NOT BUG:fields for PSK key new constants
NOT BUG:Fix write failure handling in DTLS1.2
NOT BUG:The DTLS code is supposed to drop packets if we try to write them out but the underlying BIO write buffers are full ssl3_write_pending() contains an incorrect test for DTLS that controls this The test only checks for DTLS1 so DTLS1.2 does not correctly clear the internal OpenSSL buffer which can later cause an assert to be hit This commit changes the test to cover all DTLS versions
BUG:RT#3967
NOT BUG:RT3774: double-free in DSA
NOT BUG:RT3639: Add -no_comp description to online help
NOT BUG:Tweak README about rt and bug reporting
NOT BUG:Document signature algorithm setting functions
NOT BUG:Add some OCSP documentation
NOT BUG:Allow any order for signature algorithm string
NOT BUG:Add test for SSL_set_session_ticket_ext
NOT BUG:The function SSL_set_session_ticket_ext sets the ticket data to be sent in the ClientHello This is useful for EAP-FAST This commit adds a test to ensure that when this function is called the expected ticket data actually appears in the ClientHello
NOT BUG:Remove support for SSL3_FLAGS_DELAY_CLIENT_FINISHED
BUG:This flag was not set anywhere within the codebase (only read) It could only be set by an app reaching directly into s->s3->flags and setting it directly However that method became impossible when libssl was opaquified
NOT BUG:Even in 1.0.2/1.0.1 if an app set the flag directly it is only relevant to ssl3_connect() which calls SSL_clear() during initialisation that clears any flag settings Therefore it could take effect if the app set the flag after the handshake has started but before it completed It seems quite unlikely that any apps really do this (especially as it is completely undocumented)
NOT BUG:The purpose of the flag is suppress flushing of the write bio on the client side at the end of the handshake after the client has written the Finished message whilst resuming a session This enables the client to send application data as part of the same flight as the Finished message
NOT BUG:This flag also controls the setting of a second flag SSL3_FLAGS_POP_BUFFER There is an interesting comment in the code about this second flag in the implementation of ssl3_write:
NOT BUG:/* This is an experimental flag that sends the * last handshake message in the same packet as the first * use data - used to see if it helps the TCP protocol during * session-id reuse */
NOT BUG:It seems the experiment did not work because as far as I can tell nothing is using this code The above comment has been in the code since SSLeay
NOT BUG:This commit removes support for SSL3_FLAGS_DELAY_CLIENT_FINISHED as well as the associated SSL3_FLAGS_POP_BUFFER
NOT BUG:rsaz_exp.h: align license with the rest of the contribution
NOT BUG:Document shared sigalgs functions
NOT BUG:Some cleanups for crypto/bn
NOT BUG:Create bn_free_d utility routine and use it Fix RT3950 Also a missing cleanse from Loganaden Velvindron (loganaden@gmail.com) who noticed it in a Cloudflare patch
NOT BUG:free names before context
NOT BUG:typo
NOT BUG:Update demo
NOT BUG:Use new SSL_CONF options in demo Add intermediate and root CAs and update all to use SHA256
NOT BUG:SSL_CONF additions
NOT BUG:Add support for loading verify and chain stores in SSL_CONF
NOT BUG:Commands to set verify mode and client CA names
NOT BUG:Add documentation
NOT BUG:Rewrite crypto/ex_data
NOT BUG:Removed ability to set ex_data impl at runtime This removed these three functions: const CRYPTO_EX_DATA_IMPL *CRYPTO_get_ex_data_implementation(void); int CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL *i); int CRYPTO_ex_data_new_class(void); It is no longer possible to change the ex_data implementation at runtime (Luckily those functions were never documented :)
NOT BUG:Also removed the ability to add new exdata "classes." We don't believe this received much (if any) use since you can't add it to OpenSSL objects and there are probably better (native) methods for developers to add their own extensible data if they really need that
NOT BUG:Replaced the internal hash table (of per-"class" stacks) with a simple indexed array Reserved an index for "app" application
NOT BUG:Each API used to take the lock twice; now it only locks once
NOT BUG:Use local stack storage for function pointers rather than malloc if possible (i.e. number of ex_data items is under a dozen)
NOT BUG:Make CRYPTO_EX_DATA_FUNCS opaque/internal
NOT BUG:Also fixes RT3710; index zero is reserved
NOT BUG:Use uint32_t consistently for flags
NOT BUG:Remove obsolete key formats
NOT BUG:Remove support for RSA_NET and Netscape key format (-keyform n)
NOT BUG:Also removed documentation of SGC
NOT BUG:Fix author credit for e5c0bc6
BUG:Revert "Missing perldoc markup around < literal"
BUG:This reverts commit e5c0bc6cc49a23b50a272801c4bd53639c25fca4
NOT BUG:GH322: Fix typo in generated comment
NOT BUG:Maintain backwards-compatible SSLv23_method macros
NOT BUG:Can't use -trusted with -CA{path,file}
BUG:Missing perldoc markup around < literal
NOT BUG:Conversion to UTF-8 where needed
NOT BUG:This leaves behind files with names ending with '.iso-8859-1' These should be safe to remove If something went wrong when re-encoding there will be some files with names ending with '.utf8' left behind
NOT BUG:Small script to re-encode files that need it to UTF-8
NOT BUG:This requires 'iconv' and that 'file' can take the options '-b' and '-i'
NOT BUG:Remove extra '; \' in apps/Makefile
BUG:Fixes GH#330
NOT BUG:Set numeric IDs for tar as well
BUG:Stop using tardy
NOT BUG:Instead of piping through tardy and possibly suffering from bugs in certain versions use --transform --owner and --group directly with GNU tar (we already expect that tar variant)
NOT BUG:correct example
NOT BUG:Exit on error in ecparam
NOT BUG:make stacks
BUG:Sort @sstacklst correctly
NOT BUG:Apply some missing updates from previous commits
NOT BUG:Update CHANGES and NEWS for the new release
NOT BUG:Extend -show_chain option to verify to show more info
NOT BUG:The -show_chain flag to the verify command line app shows information about the chain that has been built This commit adds the text "untrusted" against those certificates that have been used from the untrusted list
NOT BUG:Add help text for some verify options
NOT BUG:Fills in the help text for a number of options to verify that were blank
NOT BUG:Add documentation for some missing verify options
BUG:Fills in a couple of verify options that were lacking documentation
BUG:Reject calls to X509_verify_cert that have not been reinitialised
NOT BUG:The function X509_verify_cert checks the value of |ctx->chain| at the beginning and if it is NULL then it initialises it along with the value of ctx->untrusted The normal way to use X509_verify_cert() is to first call X509_STORE_CTX_init(); then set up various parameters etc; then call X509_verify_cert(); then check the results; and finally call X509_STORE_CTX_cleanup() The initial call to X509_STORE_CTX_init() sets |ctx->chain| to NULL The only place in the OpenSSL codebase where |ctx->chain| is set to anything other than a non NULL value is in X509_verify_cert itself Therefore the only ways that |ctx->chain| could be non NULL on entry to X509_verify_cert is if one of the following occurs: 1) An application calls X509_verify_cert() twice without re-initialising in between 2) An application reaches inside the X509_STORE_CTX structure and changes the value of |ctx->chain| directly
NOT BUG:With regards to the second of these we should discount this - it should not be supported to allow this
NOT BUG:With regards to the first of these the documentation is not exactly crystal clear but the implication is that you must call X509_STORE_CTX_init() before each call to X509_verify_cert() If you fail to do this then at best the results would be undefined
NOT BUG:Calling X509_verify_cert() with |ctx->chain| set to a non NULL value is likely to have unexpected results and could be dangerous This commit changes the behaviour of X509_verify_cert() so that it causes an error if |ctx->chain| is anything other than NULL (because this indicates that we have not been initialised properly) It also clarifies the associated documentation This is a follow up commit to CVE-2015-1793
NOT BUG:Add test for CVE-2015-1793
NOT BUG:This adds a test for CVE-2015-1793 This adds a new test file verify_extra_test.c which could form the basis for additional verification tests
NOT BUG:Fix alternate chains certificate forgery issue
NOT BUG:During certificate verfification OpenSSL will attempt to find an alternative certificate chain if the first attempt to build such a chain fails An error in the implementation of this logic can mean that an attacker could cause certain checks on untrusted certificates to be bypassed such as the CA flag enabling them to use a valid leaf certificate to act as a CA and "issue" an invalid certificate
NOT BUG:This occurs where at least one cert is added to the first chain from the trust store but that chain still ends up being untrusted In that case ctx->last_untrusted is decremented in error
NOT BUG:Patch provided by the BoringSSL project
BUG:CVE-2015-1793
NOT BUG:Document the nameopt change
NOT BUG:Make "oneline" the default for nameopt
NOT BUG:There's no reason why we should default to a output format that is old and confusing in some cases
NOT BUG:This affects the commands "ca" "crl" "req" and "x509"
NOT BUG:document -2 return value
NOT BUG:Relax CCM tag check
NOT BUG:In CCM mode don't require a tag before initialising decrypt: this allows the tag length to be set without requiring the tag
NOT BUG:Dup peer_chain properly in SSL_SESSION
NOT BUG:Check for errors with SRP
NOT BUG:make update
NOT BUG:Use single master secret generation function
NOT BUG:Check dgram_sctp_write() return value
NOT BUG:Check BIO_dgram_sctp_wait_for_dry() return value for error
NOT BUG:missing break
NOT BUG:Don't output bogus errors in PKCS12_parse
NOT BUG:PR#3923
NOT BUG:Add docs for ssl verification parameter functions
NOT BUG:Fix windows build
NOT BUG:Move #include's inside the #ifdef
NOT BUG:Fix PSK client handling
NOT BUG:The PSK identity hint should be stored in the SSL_SESSION structure and not in the parent context (which will overwrite values used by other SSL structures with the same SSL_CTX)
NOT BUG:Add PSK GCM ciphersuites from RFC5487
NOT BUG:PSK trace keyex fixes
NOT BUG:Avoid duplication
NOT BUG:We always free the handshake buffer when digests are freed so move it into ssl_free_digest_list()
NOT BUG:Tidy up ssl3_digest_cached_records logic
NOT BUG:Rewrite ssl3_digest_cached_records handling Only digest cached records if digest array is NULL: this means it is safe to call ssl3_digest_cached_records multiple times (subsequent calls are no op)
NOT BUG:Remove flag TLS1_FLAGS_KEEP_HANDSHAKE instead only update handshake buffer if digest array is NULL
NOT BUG:Add additional "keep" parameter to ssl3_digest_cached_records to indicate if the handshake buffer should be retained after digesting cached records (needed for TLS 1.2 client authentication)
NOT BUG:More secure storage of key material
NOT BUG:Add secure heap for storage of private keys (when possible) Add BIO_s_secmem() CBIGNUM etc Add BIO_CTX_secure_new so all BIGNUM's in the context are secure Contributed by Akamai Technologies under the Corporate CLA
NOT BUG:Add $! to errors use script basename
NOT BUG:GH297: Fix NAME section of SSL_CTX_use_serverinfo.pod
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:RT3682: Avoid double-free on OCSP parse error
BUG:Found by Kurt Cancemi
NOT BUG:RT3856: Fix memory leaks in test code
NOT BUG:make update
NOT BUG:Rearrange rsaz
NOT BUG:A small rearrangement so the inclusion of rsaz_exp.h would be unconditional but what that header defines becomes conditional
NOT BUG:This solves the weirdness where rsaz_exp.h gets in and out of the dependency list for bn_exp.c depending on the present architecture
BUG:RT3907-fix
NOT BUG:Typo in local variable name; introduced by previous fix
BUG:RT3907: avoid "local" in testssl script
NOT BUG:Remove SESS_CERT entirely
NOT BUG:Move peer chain to SSL_SESSION structure
NOT BUG:Remove unnuecessary ifdefs
NOT BUG:If RSA or DSA is disabled we will never use a ciphersuite with RSA/DSA authentication as it is already filtered out by the cipher list logic
NOT BUG:Remove certificates from sess_cert
NOT BUG:As numerous comments indicate the certificate and key array is not an appopriate structure to store the peers certificate: so remove it and just the s->session->peer instead
NOT BUG:Remove peer temp keys from SESS_CERT
NOT BUG:RT3917: add cleanup on an error path
NOT BUG:Cleanup mttest.c : because we no longer use stdio here don't include it
NOT BUG:Add -ldl to the build of mttest.c
BUG:Cleanup mttest.c : use BIO_free only no preceding hacks
NOT BUG:Since [sc]_ssl->[rw]bio aren't available do not try to fiddle with them Surely a BIO_free on the "main" BIOs should be enough
NOT BUG:Cleanup mttest.c : do not try to output reference counts when threads are done
NOT BUG:Cleanup mttest.c : better error reporting when certs are miggins
NOT BUG:Cleanup mttest.c : make ssl_method a pointer to const
NOT BUG:Cleanup mttest.c : modernise output
NOT BUG:Construct bio_err and bio_stdout from file handles instead of FILE pointers since the latter might not be implemented (when OPENSSL_NO_STDIO is defined) Convert all output to use BIO_printf Change lh_foo to lh_SSL_SESSION_foo
NOT BUG:Cleanup mttest.c : modernise the threads setup
BUG:Cleanup mttest.c : remove MS_CALLBACK
NOT BUG:Revert "Avoid duplication."
BUG:This reverts commit d480e182fe20fcaeca7817a4693eeaf594bb1a32
NOT BUG:Commit broke TLS handshakes due to fragility of digest caching: that will be fixed separately
NOT BUG:Avoid duplication
NOT BUG:We always free the handshake buffer when digests are freed so move it into ssl_free_digest_list()
NOT BUG:remove unnecessary NULL checks
NOT BUG:typo: should be OPENSSL_free
NOT BUG:Make preprocessor error into real preprocessor error
BUG:Remove one extraneous parenthesis
BUG:RT2547: Tighten perms on generated privkey files
NOT BUG:When generating a private key try to make the output file be readable only by the owner Put it in CHANGES file since it might be noticeable
NOT BUG:Add "int private" flag to apps that write private keys and check that it's set whenever we do write a private key Checked via assert so that this bug (security-related) gets fixed Thanks to Viktor for help in tracing the code-paths where private keys are written
BUG:Refactor into clear_ciphers; RT3588
NOT BUG:While closing RT3588 (Remove obsolete comment) Kurt and I saw that a few lines to completely clear the SSL cipher state could be moved into a common function
NOT BUG:Fix argument processing error from the option parsing change over
NOT BUG:Fix argument processing error from the option parsing change over
NOT BUG:Encode b == NULL or blen == 0 as zero
BUG:PR#3904
NOT BUG:Allow a zero length extension block
NOT BUG:It is valid for an extension block to be present in a ClientHello but to be of zero length
NOT BUG:Fix ABI break with HMAC
NOT BUG:Recent HMAC changes broke ABI compatibility due to a new field in HMAC_CTX This backs that change out and does it a different way
NOT BUG:Thanks to Timo Teras for the concept
NOT BUG:Update CHANGES and NEWS
NOT BUG:Updates to CHANGES and NEWS to take account of the latest security fixes
BUG:bn/bn_gf2m.c: avoid infinite loop wich malformed ECParamters
BUG:CVE-2015-1788
NOT BUG:PKCS#7: Fix NULL dereference with missing EncryptedContent
BUG:CVE-2015-1790
NOT BUG:Fix length checks in X509_cmp_time to avoid out-of-bounds reads
BUG:Also tighten X509_cmp_time to reject more than three fractional seconds in the time; and to reject trailing garbage after the offset
BUG:CVE-2015-1789
NOT BUG:More ssl_session_dup fixes
NOT BUG:Fix error handling in ssl_session_dup as well as incorrect setting up of the session ticket Follow on from CVE-2015-1791
NOT BUG:Thanks to LibreSSL project for reporting these issues
NOT BUG:e_aes_cbc_hmac_sha*.c: address linker warning about OPENSSL_ia32cap_P size mismatch
NOT BUG:gcm.c: address linker warning about OPENSSL_ia32cap_P size mismatch
NOT BUG:Tidy disabled algorithm handling
NOT BUG:Determine disabled algorithm masks when algorithms are loaded instead of recalculating them each time
NOT BUG:Restore GOST mac setup
NOT BUG:Restore GOST mac setup which was accidentally removed during cipher refactor
NOT BUG:Remove SSL_OP_TLS_BLOCK_PADDING_BUG
NOT BUG:This is a workaround so old that nobody remembers what buggy clients it was for It's also been broken in stable branches for two years and nobody noticed (see https://boringssl-review.googlesource.com/#/c/1694/)
BUG:DTLS handshake message fragments musn't span packets
NOT BUG:It should not be possible for DTLS message fragments to span multiple packets However previously if the message header fitted exactly into one packet and the fragment body was in the next packet then this would work Obviously this would fail if packets get re-ordered mid-flight
NOT BUG:Correct type of RECORD_LAYER_get_rrec_length()
NOT BUG:The underlying field returned by RECORD_LAYER_get_rrec_length() is an unsigned int The return type of the function should match that
NOT BUG:Fix leak in HMAC error path
NOT BUG:In the event of an error in the HMAC function leaks can occur because the HMAC_CTX does not get cleaned up
NOT BUG:Thanks to the BoringSSL project for reporting this issue
NOT BUG:EC_POINT_is_on_curve does not return a boolean
NOT BUG:The function EC_POINT_is_on_curve does not return a boolean value It returns 1 if the point is on the curve 0 if it is not and -1 on error Many usages within OpenSSL were incorrectly using this function and therefore not correctly handling error conditions
NOT BUG:With thanks to the Open Crypto Audit Project for reporting this issue
NOT BUG:Change BIO_number_read and BIO_number_written() to be 64 bit
NOT BUG:The return type of BIO_number_read() and BIO_number_written() as well as the corresponding num_read and num_write members in the BIO structure has been changed from unsigned long to uint64_t On platforms where an unsigned long is 32 bits (e.g Windows) these counters could overflow if >4Gb is transferred
NOT BUG:With thanks to the Open Crypto Audit Project for reporting this issue
NOT BUG:Tighten extension handling
NOT BUG:This adds additional checks to the processing of extensions in a ClientHello to ensure that either no extensions are present or if they are then they take up the exact amount of space expected
NOT BUG:With thanks to the Open Crypto Audit Project for reporting this issue
NOT BUG:Fix memory leaks in BIO_dup_chain()
NOT BUG:This fixes a memory leak that can occur whilst duplicating a BIO chain if the call to CRYPTO_dup_ex_data() fails It also fixes a second memory leak where if a failure occurs after successfully creating the first BIO in the chain then the beginning of the new chain was not freed
NOT BUG:With thanks to the Open Crypto Audit Project for reporting this issue
NOT BUG:Replace memset with OPENSSL_clear_free()
NOT BUG:BUF_MEM_free() attempts to cleanse memory using memset immediately prior to a free This is at risk of being optimised away by the compiler so replace with a call to OPENSSL_clear_free() instead
NOT BUG:With thanks to the Open Crypto Audit Project for reporting this issue
NOT BUG:Make sure test/gost2814789test.c can see configuration macros
NOT BUG:test/gost2814789test.c needs to include openssl/e_os2.h or it wouldn't see the defined OPENSSL_NO_* macros
NOT BUG:When making libcrypto from apps or test make sure to include engines
NOT BUG:For librypto to be complete the stuff in both crypto/ and engines/ have to be built Doing 'make test' or 'make apps' from a clean source tree failed to do so Corrected by using the new 'build_libcrypto' in the top Makefile
NOT BUG:Add and rearrange building of libraries
NOT BUG:There's a need for a target that will build all of libcrypto so let's add 'build_libcrypto' that does this For ortogonality let's also add 'build_libssl' Have both also depend on 'libcrypto.pc' and 'libssl.pc' so those get built together with the libraries This makes 'all' depend on fewer things directly
NOT BUG:Fix -DZLIB build for opaque COMP types
NOT BUG:Use bio_err not stderr in apps
NOT BUG:Except for VMS startup code
NOT BUG:No fprintf in the txt_db component
NOT BUG:Also removed a source file that isn't built and moved another one to test for eventual fixing
NOT BUG:Explicitly mention PKCS5_PBKDF2_HMAC in EVP doc
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Only allow a temporary rsa key exchange when they key is larger than 512
BUG:MR #588
NOT BUG:Properly check certificate in case of export ciphers
BUG:MR #588
NOT BUG:return correct NID for undefined object
NOT BUG:Use CRYPTO_memcmp in ssl3_record.c
BUG:Use CRYPTO_memcmp when comparing authenticators
NOT BUG:Pointed out by Victor Vasiliev (vasilvv@mit.edu) via Adam Langley (Google)
NOT BUG:Increase buffer size for passwords in pkcs12 CLI
NOT BUG:Update trace code
NOT BUG:Add extension and ciphersuites to trace code
NOT BUG:Check ASN1_INTEGER_get for errors
NOT BUG:Check return value when calling ASN1_INTEGER_get to retrieve a certificate serial number If an error occurs (which will be caused by the value being out of range) revert to hex dump of serial number
NOT BUG:Set error code no fprintf stderr on errors
NOT BUG:GH293: Typo in CHANGES file
NOT BUG:Allow all curves when the client doesn't send an supported elliptic curves extension
NOT BUG:At least in the case of SSLv3 we can't send an extention
BUG:MR #811
NOT BUG:Rename all static TS_xxx to ts_xxx
NOT BUG:Remove misleading comment
NOT BUG:Remove a comment that suggested further clean up was required DH_free() performs the necessary cleanup
NOT BUG:With thanks to the Open Crypto Audit Project for reporting this issue
NOT BUG:Clean premaster_secret for GOST
NOT BUG:Ensure OPENSSL_cleanse() is called on the premaster secret value calculated for GOST
NOT BUG:With thanks to the Open Crypto Audit Project for reporting this issue
NOT BUG:Fix off-by-one error in BN_bn2hex
NOT BUG:A BIGNUM can have the value of -0 The function BN_bn2hex fails to account for this and can allocate a buffer one byte too short in the event of -0 being used leading to a one byte buffer overrun All usage within the OpenSSL library is considered safe Any security risk is considered negligible
BUG:With thanks to Mateusz Kocielski (LogicalTrust) Marek Kroemeke and Filip Palian for discovering and reporting this issue
NOT BUG:Fix DTLS session resumption
NOT BUG:The session object on the client side is initially created during construction of the ClientHello If the client is DTLS1.2 capable then it will store 1.2 as the version for the session However if the server is only DTLS1.0 capable then when the ServerHello comes back the client switches to using DTLS1.0 from then on However the session version does not get updated Therefore when the client attempts to resume that session the server throws an alert because of an incorrect protocol version
NOT BUG:make update
NOT BUG:Make update with manual edit so EVP_PKEY_asn1_set_item uses the same ordinal as 1.0.2
BUG:Add funtions to set item_sign and item_verify
NOT BUG:PR#3872
NOT BUG:(cherry picked from commit ad0fb7f4988c8a717fe6bcb035304385fbdaef41)
NOT BUG:Conflicts: crypto/asn1/ameth_lib.c
NOT BUG:Fix compilation failure for some tool chains
NOT BUG:Some tool chains (e.g android) do not define IP_PMTUDISC_PROBE and so this build breaks
NOT BUG:RT3230: Better test for C identifier
NOT BUG:objects.pl only looked for a space to see if the name could be used as a C identifier Improve the test to match the real C rules
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Standardize handling of #ifdef'd options
NOT BUG:Here are the "rules" for handling flags that depend on #ifdef:
NOT BUG:- Do not ifdef the enum Only ifdef the OPTIONS table All ifdef'd entries appear at the end; by convention "engine" is last This ensures that at run-time the flag will never be recognized/allowed The next two bullets entries are for silencing compiler warnings: - In the while/switch parsing statement use #ifdef for the body to disable it; leave the "case OPT_xxx:" and "break" statements outside the ifdef/ifndef See ciphers.c for example - If there are multiple options controlled by a single guard OPT_FOO OPT_BAR etc. put a an #ifdef around the set and then do "#else" and a series of case labels and a break See OPENSSL_NO_AES in cms.c for example
BUG:RT832: Use REUSEADDR in ocsp responder
NOT BUG:I also re-ordered some of #ifdef's
NOT BUG:RT3472: Doc pkcs8 -iter flag is in OpenSSL 1.1
NOT BUG:Add the macro OPENSSL_SYS_WIN64
NOT BUG:This is for consistency Additionally have its presence define OPENSSL_SYS_WINDOWS as well
NOT BUG:RT3848: Call SSL_COMP_free_compression_methods
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:GH249: Fix bad regexp in arg parsing
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Fix IP_MTU_DISCOVER typo
NOT BUG:The code in bss_dgram.c checks if IP_MTUDISCOVER is defined where it should test for IP_MTU_DISCOVER
NOT BUG:RT#3888
NOT BUG:Fix race condition in NewSessionTicket
NOT BUG:If a NewSessionTicket is received by a multi-threaded client when attempting to reuse a previous ticket then a race condition can occur potentially leading to a double free of the ticket data
BUG:CVE-2015-1791
NOT BUG:This also fixes RT#3808 where a session ID is changed for a session already in the client session cache Since the session ID is the key to the cache this breaks the cache access
BUG:Parts of this patch were inspired by this Akamai change: https://github.com/akamai/openssl/commit/c0bf69a791239ceec64509f9f19fcafb2461b0d3
NOT BUG:Check the message type requested is the type received in DTLS
NOT BUG:dtls1_get_message has an |mt| variable which is the type of the message that is being requested If it is negative then any message type is allowed However the value of |mt| is not checked in one of the main code paths so a peer can send a message of a completely different type and it will be processed as if it was the message type that we were expecting This has very little practical consequences because the current behaviour will still fail when the format of the message isn't as expected
NOT BUG:Silence Clang warning about unit'd variable
NOT BUG:fix warning
NOT BUG:clear/cleanse cleanup
NOT BUG:Where we called openssl_cleanse make sure we do it on all error paths Be consistent in use of sizeof(foo) when possible
BUG:Remove struct ccs_header_st
BUG:struct ccs_header_st is not used so it should be removed
BUG:fix asn1parse -inform
NOT BUG:Remove OPENSSL_CONF=/dev/null from tests
NOT BUG:Almost two months ago the warning about non-existing config file was supressed by setting the environment variable OPENSSL_CONF to /dev/null everywhere Now that this warning is gone that practice is no longer needed
NOT BUG:Restore module loading
NOT BUG:The module loading feature got broken a while ago so restore it but have it a bit more explicit this time around
NOT BUG:Fix double BIO_free in req
NOT BUG:Fix build errors with enable-ec_nistp_64_gcc_128
NOT BUG:RT 3871
NOT BUG:RT3876: Only load config when needed
NOT BUG:Create app_load_config() a routine to load config file Remove the "always load config" from the main app Change the places that used to load config to call the new common routine
NOT BUG:PEM doc fixes
NOT BUG:check for error when creating PKCS#8 structure
NOT BUG:Use enum for X509_LOOKUP_TYPE
NOT BUG:Using an enum with -Wswitch means all lookup routines handle all cases Remove X509_LU_PKEY which was never used
NOT BUG:Change return type of the new accessors
NOT BUG:The new accessors SSL_get_client_random SSL_get_server_random and SSL_SESSION_get_master_key should return a size_t to match the type of the |outlen| parameter
NOT BUG:Change the new functions to use size_t
NOT BUG:Change the new SSL_get_client_random() SSL_get_server_random() and SSL_SESSION_get_master_key() functions to use size_t for |outlen| instead of int
NOT BUG:Clarify that SSL3_RANDOM_SIZE is a constant for now
NOT BUG:Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Add new functions to extract {client,server}_random master_key
NOT BUG:Tor uses these values to implement a low-rent clone of RFC 5705 (which in our defense we came up with before RFC 5705 existed) But now that ssl_st is opaque we need another way to get at them
NOT BUG:Includes documentation with suitable warnings about not actually using these functions
NOT BUG:Signed-off-by: Nick Mathewson <nickm@torproject.org> Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Add a documentation clarification suggested by Matt Caswell
NOT BUG:Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Add SSL_get_client_ciphers() to return ciphers from ClientHello
NOT BUG:On the server side if you want to know which ciphers the client offered you had to use session->ciphers But that field is no longer visible so we need a method to get at it
NOT BUG:Signed-off-by: Nick Mathewson <nickm@torproject.org> Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Enable DH tests
NOT BUG:In master the 'dh' command is gone so use 'dhparam' instead to determine if we're compiled with DH
NOT BUG:Also set "@SECLEVEL=1" for the weak DH test so that it actually passes
NOT BUG:make update
NOT BUG:scrypt in pkcs8 util
NOT BUG:Add support for PKCS#8 private key encryption using the scrypt algorithm in the pkcs8 utility Update documentation
NOT BUG:Add function PKCS8_set0_pbe
NOT BUG:This adds a new function which will encrypt a private key using PKCS#8 based on an X509_ALGOR structure and reimplements PKCS8_encrypt to use it
NOT BUG:Update pkcs8 utlity to use PKCS8_set0_pbe
NOT BUG:Error if memory limit exceeded
NOT BUG:Set a specific error if the parameters are otherwise valid but exceed the memory limit
NOT BUG:Fix memory leak
NOT BUG:Add PBE tests
NOT BUG:Add support for PKCS#12 and PBKDF2 password based encryption tests Add additional test data
NOT BUG:Fix ssltest to use 1024-bit DHE parameters
NOT BUG:Also add more ciphersuite test coverage and a negative test for 512-bit DHE
NOT BUG:(cherry picked from commit 1ee85aab75d7c9f20058f781bfe9222323df08eb)
NOT BUG:Don't check for a negative SRP extension size
NOT BUG:The size of the SRP extension can never be negative (the variable |size| is unsigned) Therefore don't check if it is less than zero
BUG:RT#3862
NOT BUG:Fix error check in GOST engine
NOT BUG:The return value of i2d functions can be negative if an error occurs Therefore don't assign the return value to an unsigned type and *then* check if it is negative
BUG:RT#3862
BUG:Handle unsigned struct timeval members
BUG:The members of struct timeval on OpenVMS are unsigned The logic for calculating timeouts needs adjusting to deal with this
BUG:RT#3862
NOT BUG:Configure: replace -mv8 with -mcpu=v8 in SPARC config lines
BUG:RT#3860
NOT BUG:fix copy paste error in ec_GF2m function prototypes
NOT BUG:RT#3858
NOT BUG:bn/bn_lcl.h: fix MIPS-specific gcc version check
BUG:RT#3859
NOT BUG:RT3861: Mem/bio leak in req command
NOT BUG:The "out" variable is used for both key and csr Close it after writing the first one so it can be re-used when writing the other
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fix segfault in ec command
NOT BUG:Thanks to Brian Carpenter <brian.carpenter@gmail.com> for finding this
NOT BUG:Don't send an alert if we've just received one
NOT BUG:If the record received is for a version that we don't support previously we were sending an alert back However if the incoming record already looks like an alert then probably we shouldn't do that So suppress an outgoing alert if it looks like we've got one incoming
NOT BUG:fix s_client crash
NOT BUG:The 'http proxy' commit broke s_client default host/port value Thanks to Matt for the simplest fix
NOT BUG:Set first_packet for TLS clients
NOT BUG:Version negotiation was broken (one of the late changes in the review process broke it) The problem is that TLS clients do not set first_packet whereas TLS/DTLS servers and DTLS clients do The simple fix is to set first_packet for TLS clients too
NOT BUG:bn/asm/x86_64-mont5.pl: fix valgrind error
BUG:bn_get_bits5 was overstepping array boundary by 1 byte It was exclusively read overstep and data could not have been used The only potential problem would be if array happens to end on the very edge of last accesible page
NOT BUG:bn/bn_gf2m.c: appease STACK unstable code detector
NOT BUG:RT#3852
NOT BUG:Fix update and depend in engines/
NOT BUG:The update: target in engines/ didn't recurse into engines/ccgost The update: and depend: targets in engines/ccgost needed a fixup
NOT BUG:Missed a couple of spots in the update change
NOT BUG:Fix typo setting up certificate masks
NOT BUG:The certificate masks are used to select which ciphersuite we are going to use The variables |emask_k| and |emask_a| relate to export grade key exchange and authentication respecitively The variables |mask_k| and |mask_a| are the equivalent versions for non-export grade This fixes an instance where the two usages of export/non-export were mixed up In practice it makes little difference since it still works!
NOT BUG:Remove export static DH ciphersuites
NOT BUG:Remove support for the two export grade static DH ciphersuites These two ciphersuites were newly added (along with a number of other static DH ciphersuites) to 1.0.2 However the two export ones have *never* worked since they were introduced It seems strange in any case to be adding new export ciphersuites and given "logjam" it also does not seem correct to fix them
NOT BUG:Fix off-by-one in BN_rand
NOT BUG:If BN_rand is called with |bits| set to 1 and |top| set to 1 then a 1 byte buffer overflow can occur There are no such instances within the OpenSSL at the moment
BUG:Thanks to Mateusz Kocielski (LogicalTrust) Marek Kroemeke Filip Palian for discovering and reporting this issue
BUG:Reject negative shifts for BN_rshift and BN_lshift
NOT BUG:The functions BN_rshift and BN_lshift shift their arguments to the right or left by a specified number of bits Unpredicatable results (including crashes) can occur if a negative number is supplied for the shift value
BUG:Thanks to Mateusz Kocielski (LogicalTrust) Marek Kroemeke and Filip Palian for discovering and reporting this issue
NOT BUG:Add CHANGES entry for OPENSSL_NO_TLSEXT removal
NOT BUG:Remove support for OPENSSL_NO_TLSEXT
NOT BUG:Given the pervasive nature of TLS extensions it is inadvisable to run OpenSSL without support for them It also means that maintaining the OPENSSL_NO_TLSEXT option within the code is very invasive (and probably not well tested) Therefore it is being removed
NOT BUG:RT266: Add HTTP proxy/CONNECT to s_client
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Fix the update target and remove duplicate file updates
NOT BUG:We had updates of certain header files in both Makefile.org and the Makefile in the directory the header file lived in This is error prone and also sometimes generates slightly different results (usually just a comment that differs) depending on which way the update was done
NOT BUG:This removes the file update targets from the top level Makefile adds an update: target in all Makefiles and has it depend on the depend: or local_depend: targets whichever is appropriate so we don't get a double run through the whole file tree
NOT BUG:Ignore files from other branches
NOT BUG:There are a number of files that are created on other branches that are not held in git and are not needed in master When checking out master after working on another branch these files show up in "git status" so just add them to .gitignore
BUG:Lost alert in DTLS
NOT BUG:If a client receives a bad hello request in DTLS then the alert is not sent correctly
BUG:RT#2801
NOT BUG:Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Fix various OPENSSL_NO_* options
NOT BUG:This fixes compilation with various OPENSSL_NO_* options that got broken during the big apps cleanup
NOT BUG:Fix a memory leak in compression
NOT BUG:The function RECORD_LAYER_clear() is supposed to clear the contents of the RECORD_LAYER structure but retain certain data such as buffers that are allocated Unfortunately one buffer (for compression) got missed and was inadvertently being wiped thus causing a memory leak
NOT BUG:In part this is due to the fact that RECORD_LAYER_clear() was reaching inside SSL3_BUFFERs and SSL3_RECORDs which it really shouldn't So I've rewritten it to only clear the data it knows about and to defer clearing of SSL3_RECORD and SSL3_BUFFER structures to SSL_RECORD_clear() and the new function SSL3_BUFFER_clear()
NOT BUG:make update
NOT BUG:correction
NOT BUG:Add scrypt PBE algorithm code
NOT BUG:This adds support for the ASN.1 structures in draft-josefsson-scrypt-kdf-03 Private keys encrypted by scrypt can now be decrypted transparently as long as they don't exceed the memory limits
NOT BUG:Add scrypt OID from draft-josefsson-scrypt-kdf-03
NOT BUG:Replace switch/assignments with table lookup
NOT BUG:Typedef STRINT_PAIR to be the same as OPT_PAIR and use that structure and a bunch of tables instead of switch statements to lookup various values out of the SSL/TLS message buffers Shrinks a bunch of code
NOT BUG:Correctly check for export size limit
NOT BUG:40 bit ciphers are limited to 512 bit RSA 56 bit ciphers to 1024 bit
NOT BUG:Add functions to convert between uint64_t and ASN1_INTEGER
NOT BUG:Only support >= 256-bit elliptic curves with ecdh_auto (server) or by default (client)
NOT BUG:Also reorder preferences to prefer prime curves to binary curves and P-256 to everything else
NOT BUG:The result:
NOT BUG:$ openssl s_server -named_curves "auto"
NOT BUG:This command will negotiate an ECDHE ciphersuite with P-256:
NOT BUG:$ openssl s_client
BUG:This command will negotiate P-384:
BUG:$ openssl s_client -curves "P-384"
BUG:This command will not negotiate ECDHE because P-224 is disabled with "auto":
BUG:$ openssl s_client -curves "P-224"
NOT BUG:Remove dh512.pem
NOT BUG:Update documentation with Diffie-Hellman best practices - Do not advise generation of DH parameters with dsaparam to save computation time - Promote use of custom parameters more and explicitly forbid use of built-in parameters weaker than 2048 bits - Advise the callback to ignore <keylength> - it is currently called with 1024 bits but this value can and should be safely ignored by servers
NOT BUG:dhparam: fix documentation
NOT BUG:The default bitlength is now 2048 Also clarify that either the number of bits or the generator must be present:
NOT BUG:$ openssl dhparam -2 and $ openssl dhparam 2048 generate parameters but $ openssl dhparam does not
NOT BUG:make update
NOT BUG:Add scrypt tests
NOT BUG:Add scrypt test support to evp_test and add test values from from draft-josefsson-scrypt-kdf-03
NOT BUG:Add scrypt support
NOT BUG:Add scrypt algorithm as described in draft-josefsson-scrypt-kdf-03
BUG:GitHub284: Fix typo in xx-32.pl scripts
NOT BUG:bn/asm/vis3-mont.pl: fix intermittent EC failures on SPARC T3
NOT BUG:BLKINIT optimization worked on T4 but for some reason appears "too aggressive" for T3 triggering intermiitent EC failures It's not clear why only EC is affected..
NOT BUG:move masks out of CERT structure
NOT BUG:Don't add write errors into bytecounts
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Move certificate validity flags out of CERT
NOT BUG:Move signing digest out of CERT
NOT BUG:CERT tidy
NOT BUG:Move per-connection state out of the CERT structure: which should just be for shared configuration data (e.g certificates to use)
NOT BUG:In particular move temporary premaster secret raw ciphers peer signature algorithms and shared signature algorithms
NOT BUG:ASN1 INTEGER refactor
NOT BUG:Rewrite and tidy ASN1_INTEGER and ASN1_ENUMERATED handling
NOT BUG:Remove code duplication
NOT BUG:New functions to convert between int64_t and ASN.1 types without the quirks of the old long conversion functions
NOT BUG:Add documentation
NOT BUG:Add types to indent.pro
NOT BUG:Further version negotiation updates
NOT BUG:More miscellaneous updates to version negotiation following feedback
NOT BUG:Move SSLv3_*method() functions
NOT BUG:Move these functions into t1_clnt.c t1_srvr.c and t1_meth.c and take advantage of the existing tls1_get*_method() functions that all the other methods are using Since these now have to support SSLv3 anyway we might as well use the same set of get functions for both TLS and SSLv3
NOT BUG:Updates following review comments
NOT BUG:Miscellaneous updates following review comments on the version negotiation rewrite patches
NOT BUG:Version negotiation rewrite doc updates
NOT BUG:Update various documentation references to the new TLS_*_method names Also add a CHANGES entry
NOT BUG:Version negotiation rewrite cleanup
NOT BUG:Following the version negotiation rewrite all of the previous code that was dedicated to version negotiation can now be deleted - all six source files of it!!
NOT BUG:Client side version negotiation rewrite
NOT BUG:Continuing from the previous commit this changes the way we do client side version negotiation Similarly all of the s23* "up front" state machine code has been avoided and again things now work much the same way as they already did for DTLS i.e we just do most of the work in the ssl3_get_server_hello() function
NOT BUG:Server side version negotiation rewrite
NOT BUG:This commit changes the way that we do server side protocol version negotiation Previously we had a whole set of code that had an "up front" state machine dedicated to the negotiating the protocol version This adds significant complexity to the state machine Historically the justification for doing this was the support of SSLv2 which works quite differently to SSLv3+ However we have now removed support for SSLv2 so there is little reason to maintain this complexity
NOT BUG:The one slight difficulty is that although we no longer support SSLv2 we do still support an SSLv3+ ClientHello in an SSLv2 backward compatible ClientHello format This is generally only used by legacy clients This ClientHellos
NOT BUG:Server side version negotiation now works in much the same was as DTLS i.e we introduce the concept of TLS_ANY_VERSION If s->version is set to that then when a ClientHello is received it will work out the most appropriate version to respond with Also SSLv23_method and SSLv23_server_method have been replaced with TLS_method and TLS_server_method respectively The old SSLv23* names still exist as macros pointing at the new name although they are deprecated
NOT BUG:Subsequent commits will look at client side version negotiation as well of removal of the old s23* code
NOT BUG:Remove unused #ifdef's from header files
NOT BUG:And remove a duplicate comment probably from a merge hiccup
NOT BUG:Use #error in openssl/srp.h
NOT BUG:Follow the same convention the other OPENSSL_NO_xxx header files do and use #error instead of making the header file be a no-op
NOT BUG:Make up for a missed 'make update' update
NOT BUG:Update mkdef for moved header file
NOT BUG:crypto/cryptlib.h moved to crypto/include/internal; update the script
NOT BUG:make depend
NOT BUG:Add -Iinclude to crypto/ compiles
NOT BUG:The move of headers from crypto/ to crypto/include/internal/ needs this extra inclusion directory or the build fails
NOT BUG:Identify and move common internal libcrypto header files
NOT BUG:There are header files in crypto/ that are used by a number of crypto/ submodules Move those to crypto/include/internal and adapt the affected source code and Makefiles
NOT BUG:The header files that got moved are:
NOT BUG:crypto/cryptolib.h crypto/md32_common.h
NOT BUG:Adjust unixly mk1mf after introduction of tkey
NOT BUG:Added depencies on the public variants of some keys in test to Makefile Added the newly introduced key files from test/ in the list of files to copy in util/pl/unix.pl
NOT BUG:make depend
NOT BUG:Identify and move OpenSSL internal header files
NOT BUG:There are header files in crypto/ that are used by the rest of OpenSSL Move those to include/internal and adapt the affected source code Makefiles and scripts
NOT BUG:The header files that got moved are:
NOT BUG:crypto/constant_time_locl.h crypto/o_dir.h crypto/o_str.h
NOT BUG:Move definition of INTxx_MIN et al to internal header
NOT BUG:Having the INTxx_MIN et al macros defined in a public header is unnecessary and risky Also it wasn't done for all platforms that might need it
NOT BUG:So we move those numbers to an internal header file do the math ourselves and make sure to account for the integer representations we know of
NOT BUG:This introduces include/internal which is unproblematic since we already use -I$(TOP)/include everywhere This directory is different from crypto/include/internal as the former is more general internal headers for all of OpenSSL while the latter is for libcrypto only
NOT BUG:use unit64_t for CPUID and timestamp code
NOT BUG:Allow use of standard integer types
NOT BUG:Include appropriate headers for standard integer types in e_os2.h
NOT BUG:This should use stdint.h inttypes.h or a workaround for systems which have neither
NOT BUG:Add missing ctype.h
NOT BUG:Had old patch forgot to push/patch this to master
NOT BUG:Fix ocsp bugs
NOT BUG:Various bugs found by Viktor Emilia Matt etc
BUG:RT3841: memset() cipher_data when allocated
NOT BUG:If an EVP implementation (such as an engine) fails out early it's possible to call EVP_CIPHER_CTX_cleanup() which will call ctx->cipher->cleanup() before the cipher_data has been initialized via ctx->cipher->init() Guarantee it's all-bytes-zero as soon as it is allocated
NOT BUG:RT1207: document SSL_COMP_free_compression_methods
BUG:Remove some outdated #defines
NOT BUG:util/incore update
NOT BUG:Support cross-compile platforms that don't support FINGERPRINT_premain e.g VxWorks
NOT BUG:bn/Makefile: give MacOS X hand to compiler armv8-mont module
NOT BUG:bn/asm/armv8-mont.pl: boost performance
NOT BUG:Configurations/10-main.conf: update iOS commentary
NOT BUG:aes/asm/bsaes-armv7.pl: fix compilation with Xcode 6.3
NOT BUG:aes/asm/aesni-sha256-x86_64.pl: fix Windows compilation failure with old assembler
NOT BUG:Call of memcmp with null pointers in obj_cmp()
NOT BUG:The function obj_cmp() (file crypto/objects/obj_dat.c) can in some situations call memcmp() with a null pointer and a zero length
NOT BUG:This is invalid behaviour When compiling openssl with undefined behaviour sanitizer (add -fsanitize=undefined to compile flags) this can be seen One example that triggers this behaviour is the pkcs7 command (but there are others e.g I've seen it with the timestamp function): apps/openssl pkcs7 -in test/testp7.pem
NOT BUG:What happens is that obj_cmp takes objects of the type ASN1_OBJECT and passes their ->data pointer to memcmp Zero-sized ASN1_OBJECT structures can have a null pointer as data
NOT BUG:RT#3816
NOT BUG:Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Add CHANGES entry for Kerberos removal
NOT BUG:Remove remaining Kerberos references
NOT BUG:Following on from the removal of libcrypto and libssl support for Kerberos this commit removes all remaining references to Kerberos
NOT BUG:Remove Kerberos support from libcrypto
NOT BUG:Remove libcrypto support for Kerberos following on from the previous commit which removed it from libssl
NOT BUG:Remove Kerberos support from libssl
NOT BUG:Remove RFC2712 Kerberos support from libssl This code and the associated standard is no longer considered fit-for-purpose
NOT BUG:Remove Kerberos support from apps
NOT BUG:Remove Kerberos related options from the apps to prepare for the subsequent commits which will remove libcrypto and libssl support for Kerberos
NOT BUG:Don't allow a CCS when expecting a CertificateVerify
NOT BUG:Currently we set change_cipher_spec_ok to 1 before calling ssl3_get_cert_verify() This is because this message is optional and if it is not sent then the next thing we would expect to get is the CCS However although it is optional we do actually know whether we should be receiving one in advance If we have received a client cert then we should expect a CertificateVerify message By the time we get to this point we will already have bombed out if we didn't get a Certificate when we should have done so it is safe just to check whether |peer| is NULL or not If it is we won't get a CertificateVerify otherwise we will Therefore we should change the logic so that we only attempt to get the CertificateVerify if we are expecting one and not allow a CCS in this scenario
NOT BUG:Whilst this is good practice for TLS it is even more important for DTLS In DTLS messages can be lost Therefore we may be in a situation where a CertificateVerify message does not arrive even though one was sent In that case the next message the server will receive will be the CCS This could also happen if messages get re-ordered in-flight In DTLS if |change_cipher_spec_ok| is not set and a CCS is received it is ignored However if |change_cipher_spec_ok| *is* set then a CCS arrival will immediately move the server into the next epoch Any messages arriving for the previous epoch will be ignored This means that in this scenario the handshake can never complete The client will attempt to retransmit missing messages but the server will ignore them because they are the wrong epoch The server meanwhile will still be waiting for the CertificateVerify which is never going to arrive
NOT BUG:RT#2958
NOT BUG:Fix the heap corruption in libeay32!OBJ_add_object
NOT BUG:Original 'sizeof(ADDED_OBJ)' was replaced with 'sizeof(*ao)' However they return different sizes Therefore as the result heap gets corrupted and at some point later debug version of malloc() detects the corruption
NOT BUG:On x86 we can observe that as follows:
BUG:sizeof(*ao) == 4 sizeof(*ao[0]) == sizeof(ADDED_OBJ) == 8
BUG:Issue reproduces with either enabling CRT debug heap or Application Verifier's full-page heap
NOT BUG:Basic debugging data from the moment the corruption is first detected:
BUG:0:000:x86> |  0 id: 283c create name: openssl.exe 0:000:x86> kcn # 00 MSVCR120D!_heap_alloc_dbg_impl 01 MSVCR120D!_nh_malloc_dbg_impl 02 MSVCR120D!_nh_malloc_dbg 03 MSVCR120D!malloc 04 LIBEAY32!default_malloc_ex 05 LIBEAY32!CRYPTO_malloc 06 LIBEAY32!lh_insert 07 LIBEAY32!OBJ_add_object 08 LIBEAY32!OBJ_create 09 openssl!add_oid_section 0a openssl!req_main 0b openssl!do_cmd 0c openssl!main 0d openssl!__tmainCRTStartup 0e openssl!mainCRTStartup 0f KERNEL32!BaseThreadInitThunk 10 ntdll_77d60000!__RtlUserThreadStart 11 ntdll_77d60000!_RtlUserThreadStart
NOT BUG:Signed-off-by: Matt Caswell <matt@openssl.org>
BUG:Fix cipherlist order
NOT BUG:Make COMP_CTX and COMP_METHOD opaque
NOT BUG:Since COMP_METHOD is now defined in comp_lcl.h it is no longer possible to create new TLS compression methods without using the OpenSSL source Only ZLIB is supported by default Also since the types are opaque #ifdef guards to use "char *" instead of the real type aren't necessary
NOT BUG:The changes are actually minor Adding missing copyright to some files makes the diff misleadingly big
NOT BUG:Additional X509_ALGOR documentation
NOT BUG:Use p==NULL not !p (in if statements mainly)
NOT BUG:Add missing NULL check in X509V3_parse_list()
NOT BUG:Matt's note: I added a call to X509V3err to Kurt's original patch
BUG:RT#3840
NOT BUG:Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Add missing terminating NULL to speed_options table
BUG:This would cause memory corruption in opt_init() because it relies on the terminating NULL
BUG:RT#3842
NOT BUG:Fix for memcpy() and strcmp() being undefined
NOT BUG:clang says: "s_cb.c:958:9: error: implicitly declaring library function 'memcpy'"
NOT BUG:Check sk_SSL_CIPHER_new_null return value
NOT BUG:If sk_SSL_CIPHER_new_null() returns NULL then ssl_bytes_to_cipher_list() should also return NULL
NOT BUG:Based on an original patch by mrpre <mrpre@163.com>
NOT BUG:Add SSL_use_certificate_chain_file function
NOT BUG:Add SSL_use_certiicate_chain file functions: this is works the same way as SSL_CTX_use_certificate_chain_file but for an SSL structure
NOT BUG:Update SSL_CONF code to use the new function Update docs Update ordinals
NOT BUG:Fix typo in valid_star
NOT BUG:Use "==0" instead of "!strcmp" etc
NOT BUG:For the various string-compare routines (strcmp strcasecmp str.*cmp) use "strcmp()==0" instead of "!strcmp()"
NOT BUG:Digest cached records if not sending a certificate
NOT BUG:If server requests a certificate but the client doesn't send one cache digested records This is an optimisation and ensures the correct finished mac is used when extended master secret is used with client authentication
NOT BUG:Make sig_app sigx_app static
NOT BUG:Make -CAserial a type 's' option
NOT BUG:The file name given to -CAserial might not exist yet The -CAcreateserial option decides if this is ok or not
NOT BUG:Previous to this change -CAserial was a type '<' option and in that case the existence of the file given as argument is tested quite early and is a failure if it doesn't With the type 's' option the argument is just a string that the application can do whatever it wants with
NOT BUG:Add a -CAserial argument for signing the user cert request
NOT BUG:This is just to make sure that option is tested on a Unix build This option is already present in ms/testss.bat so it's an easy steal
NOT BUG:SSL_CONF table reorganisation
NOT BUG:Add command line switch entries to table and return SSL_CONF_TYPE_NONE for them in SSL_CONF_cmd_value_type
NOT BUG:Update docs
NOT BUG:Initialize potentially uninitialized local variables
NOT BUG:Compiling OpenSSL code with MSVC and /W4 results in a number of warnings One category of warnings is particularly interesting - C4701 (potentially uninitialized local variable 'name' used) This warning pretty much means that there's a code path which results in uninitialized variables being used or returned Depending on compiler its options OS values in registers and/or stack the results can be nondeterministic Cases like this are very hard to debug so it's rational to fix these issues
NOT BUG:This patch contains a set of trivial fixes for all the C4701 warnings (just initializing variables to 0 or NULL or appropriate error code) to make sure that deterministic values will be returned from all the execution paths
NOT BUG:RT#3835
NOT BUG:Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Matt's note: All of these appear to be bogus warnings i.e there isn't actually a code path where an unitialised variable could be used - its just that the compiler hasn't been able to figure that out from the logic So this commit is just about silencing spurious warnings
NOT BUG:Fix s_server version specific methods
NOT BUG:A copy&paste error as a result of the big apps cleanup broke the version specific methods in s_server
NOT BUG:memset memcpy sizeof consistency fixes
NOT BUG:Just as with the OPENSSL_malloc calls consistently use sizeof(*ptr) for memset and memcpy Remove needless casts for those functions For memset replace alternative forms of zero with 0
NOT BUG:ZLIB compression deserves a better comment
NOT BUG:What could be better than to refer to the RFC that defines it?
NOT BUG:Fix windows build
NOT BUG:Fix error in WIN32_rename() introduced by commit b4faea50c35
NOT BUG:make update
BUG:Remove the last traces of the fake RLE compression
NOT BUG:Add more error state transitions (DTLS)
NOT BUG:Ensure all fatal errors transition into the new error state for DTLS
NOT BUG:Add more error state transitions (client)
NOT BUG:Ensure all fatal errors transition into the new error state on the client side
NOT BUG:Add more error state transitions
NOT BUG:Ensure all fatal errors transition into the new error state on the server side
NOT BUG:Add Error state
NOT BUG:Reusing an SSL object when it has encountered a fatal error can have bad consequences This is a bug in application code not libssl but libssl should be more forgiving and not crash
NOT BUG:Update multi-thread FAQ
NOT BUG:Remove apps cache for gethostbyname
NOT BUG:make update
NOT BUG:ssl/kssl.c: include missing header to complete SSL structure's defn
BUG:Signed-off-by: mancha security <mancha1@zoho.com> Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:ssl/ssl_asn1.c: Fix typo introduced via cc5b6a03a320f1
BUG:Signed-off-by: mancha security <mancha1@zoho.com> Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Remove libcrypto to libssl dependency
NOT BUG:Remove dependency on ssl_locl.h from v3_scts.c and incidentally fix a build problem with kerberos (the dependency meant v3_scts.c was trying to include krb5.h but without having been passed the relevanant -I flags to the compiler)
NOT BUG:Remove the fake RLE compression method
NOT BUG:RLE is a no-op only for testing Remove it
NOT BUG:GH271: Warning on </dev/null to CA.pl
NOT BUG:If CA.pl is reading from /dev/null then "chop $FILE" gives a warning Sigh Have to add "if $FILE" This just silences a build warning Thanks to GitHub user andrejs-igumenovs for help with this
NOT BUG:Use safer sizeof variant in malloc
NOT BUG:For a local variable: TYPE *p; Allocations like this are "risky": p = OPENSSL_malloc(sizeof(TYPE)); if the type of p changes and the malloc call isn't updated you could get memory corruption Instead do this: p = OPENSSL_malloc(sizeof(*p)); Also fixed a few memset() calls that I noticed while doing this
NOT BUG:RT2943: Check sizes if -iv and -K arguments
NOT BUG:RT2943 only complains about the incorrect check of -K argument size we might as well do the same thing with the -iv argument
NOT BUG:Before this we only checked that the given argument wouldn't give a bitstring larger than EVP_MAX_KEY_LENGTH we can be more precise and check against the size of the actual cipher used
NOT BUG:Have -K actually take an argument and correct help text
NOT BUG:Fix cut/paste error
NOT BUG:Was memset with wrong sizeof
BUG:RT1369: don't do "helpful" access check
BUG:Don't do access check on destination directory; it breaks when euid/egid is different from real uid/gid
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:Return an error in ASN1_TYPE_unpack_sequence if argument is NULL
NOT BUG:Thanks to Brian Carpenter for reporting this issue
NOT BUG:more OSSL_NELEM cases
NOT BUG:ssl/s3_srvr.c: Fix typo introduced via 69f682374868b
NOT BUG:Incorrect name used for SSL_AD_INTERNAL_ERROR
BUG:Signed-off-by: mancha security <mancha1@zoho.com> Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Fixes some typos in doc/ssl/
NOT BUG:This is the last of Alok's PR260
NOT BUG:Fixes some typos in doc/apps/
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:RT3802: Fixes typos in doc/crypto/
NOT BUG:Signed-off-by: Rich Salz <rsalz@akamai.com>
NOT BUG:fix various typo's
NOT BUG:https://github.com/openssl/openssl/pull/176 (CHANGES) https://rt.openssl.org/Ticket/Display.html?id=3545 (objects.txt) https://rt.openssl.org/Ticket/Display.html?id=3796 (verify.pod)
NOT BUG:Add OSSL_NELEM macro
NOT BUG:Add OSSL_NELEM macro to e_os.h to determine the number of elements in an array
NOT BUG:Remove obsolete make variables
NOT BUG:ONEDIRS EDIRS and WDIRS aren't used anywhere Most probably remains from a build system of the past it's time they get put to rest
NOT BUG:Clean all .o files
NOT BUG:make X509_VERIFY_PARAM opaque
NOT BUG:Remove shlib/
NOT BUG:Cleanup of files that haven't been used touched or I suspect even noticed for a long time
NOT BUG:RT3820: Don't call GetDesktopWindow()
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:RT3776: Wrong size for malloc
NOT BUG:Use sizeof *foo parameter to avoid these errors
NOT BUG:Fix uninitialized variable
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:Remove outdated RC4 files
NOT BUG:free NULL cleanup -- coda
NOT BUG:After the finale the "real" final part :) Do a recursive grep with "-B1 -w [a-zA-Z0-9_]*_free" to see if any of the preceeding lines are an "if NULL" check that can be removed
NOT BUG:Remove goto inside an if(0) block
BUG:There were a dozen-plus instances of this construct: if (0) { label: .... }
NOT BUG:Fix build on MacOS
NOT BUG:Use BN_ULONG format
NOT BUG:u_len may be unused
NOT BUG:free NULL cleanup 11
NOT BUG:Don't check for NULL before calling free functions This gets: ERR_STATE_free ENGINE_free DSO_free CMAC_CTX_free COMP_CTX_free CONF_free NCONF_free NCONF_free_data _CONF_free_data A sk_free use within OBJ_sigid_free TS_TST_INFO_free (rest of TS_ API was okay) Doc update for UI_free (all uses were fine) X509V3_conf_free X509V3_section_free X509V3_string_free
NOT BUG:free null cleanup finale
NOT BUG:Don't check for NULL before calling OPENSSL_free
NOT BUG:Fix some typo's silence warnings
NOT BUG:Rewrite CA.pl.in
NOT BUG:Reformat CA.pl.in to follow coding style Also add "use strict" and "use warnings" Also modify it to exit properly and report only when succeeded And some perl tweaks via Richard
NOT BUG:free NULL cleanup 7
NOT BUG:This gets BN_.*free: BN_BLINDING_free BN_CTX_free BN_FLG_FREE BN_GENCB_free BN_MONT_CTX_free BN_RECP_CTX_free BN_clear_free BN_free BUF_MEM_free
NOT BUG:Also fix a call to DSA_SIG_free to ccgost engine and remove some #ifdef'd dead code in engines/e_ubsec
NOT BUG:Fix buffer overrun in RSA signing
NOT BUG:The problem occurs in EVP_PKEY_sign() when using RSA with X931 padding It is only triggered if the RSA key size is smaller than the digest length So with SHA512 you can trigger the overflow with anything less than an RSA 512 bit key I managed to trigger a 62 byte overflow when using a 16 bit RSA key This wasn't sufficient to cause a crash although your mileage may vary
BUG:In practice RSA keys of this length are never used and X931 padding is very rare Even if someone did use an excessively short RSA key the chances of them combining that with a longer digest and X931 padding is very small For these reasons I do not believe there is a security implication to this Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue
NOT BUG:Add sanity check to print_bin function
BUG:Add a sanity check to the print_bin function to ensure that the |off| argument is positive Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue
NOT BUG:Add sanity check to ssl_get_prev_session
BUG:Sanity check the |len| parameter to ensure it is positive Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue
NOT BUG:Sanity check the return from final_finish_mac
NOT BUG:The return value is checked for 0 This is currently safe but we should really check for <= 0 since -1 is frequently used for error conditions Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue
NOT BUG:Add sanity check in ssl3_cbc_digest_record
NOT BUG:For SSLv3 the code assumes that |header_length| > |md_block_size| Whilst this is true for all SSLv3 ciphersuites this fact is far from obvious by looking at the code If this were not the case then an integer overflow would occur leading to a subsequent buffer overflow Therefore I have added an explicit sanity check to ensure header_length is always valid Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue
NOT BUG:Clarify logic in BIO_*printf functions
NOT BUG:The static function dynamically allocates an output buffer if the output grows larger than the static buffer that is normally used The original logic implied that |currlen| could be greater than |maxlen| which is incorrect (and if so would cause a buffer overrun) Also the original logic would call OPENSSL_malloc to create a dynamic buffer equal to the size of the static buffer and then immediately call OPENSSL_realloc to make it bigger rather than just creating a buffer than was big enough in the first place Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue
NOT BUG:Sanity check EVP_EncodeUpdate buffer len
NOT BUG:There was already a sanity check to ensure the passed buffer length is not zero Extend this to ensure that it also not negative Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue
NOT BUG:Sanity check EVP_CTRL_AEAD_TLS_AAD
NOT BUG:The various implementations of EVP_CTRL_AEAD_TLS_AAD expect a buffer of at least 13 bytes long Add sanity checks to ensure that the length is at least that Also add a new constant (EVP_AEAD_TLS1_AAD_LEN) to evp.h to represent this length Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue
NOT BUG:Sanity check DES_enc_write buffer length
BUG:Add a sanity check to DES_enc_write to ensure the buffer length provided is not negative Thanks to Kevin Wojtysiak (Int3 Solutions) and Paramjot Oberoi (Int3 Solutions) for reporting this issue
NOT BUG:free cleanup 12
NOT BUG:Don't check for NULL before calling free function This gets: NAME_CONSTRAINTS_free GENERAL_SUBTREE_free ECDSA_METHOD_free JPAKE_CTX_free OCSP_REQ_CTX_free SCT_free SRP_VBASE_free SRP_gN_free SRP_user_pwd_free TXT_DB_free
NOT BUG:make update
NOT BUG:Run make update following previous header file changes
NOT BUG:free cleanup almost the finale
NOT BUG:Add OPENSSL_clear_free which merges cleanse and free (Names was picked to be similar to BN_clear_free etc.) Removed OPENSSL_freeFunc macro Fixed the small simple ones that are left: CRYPTO_free CRYPTO_free_locked OPENSSL_free_locked
NOT BUG:In apps malloc or die
NOT BUG:No point in proceeding if you're out of memory So change *all* OPENSSL_malloc calls in apps to use the new routine which prints a message and exits
NOT BUG:free NULL cleanup 5a
NOT BUG:Don't check for NULL before calling a free routine This gets X509_.*free: x509_name_ex_free X509_policy_tree_free X509_VERIFY_PARAM_free X509_STORE_free X509_STORE_CTX_free X509_PKEY_free X509_OBJECT_free_contents X509_LOOKUP_free X509_INFO_free
NOT BUG:free NULL cleanup 8
NOT BUG:Do not check for NULL before calling a free routine This addresses: ASN1_BIT_STRING_free ASN1_GENERALIZEDTIME_free ASN1_INTEGER_free ASN1_OBJECT_free ASN1_OCTET_STRING_free ASN1_PCTX_free ASN1_SCTX_free ASN1_STRING_clear_free ASN1_STRING_free ASN1_TYPE_free ASN1_UTCTIME_free M_ASN1_free_of
NOT BUG:Fix bug "what mode" test was wrong
NOT BUG:Fix windows build
NOT BUG:The big apps cleanup broke the windows build This commit fixes some miscellaneous issues so that it builds again
NOT BUG:Remove redundant includes from dtls1.h
NOT BUG:There were a set of includes in dtls1.h which are now redundant due to the libssl opaque work This commit removes those includes which also has the effect of resolving one issue preventing building on windows (i.e the include of winsock.h)
NOT BUG:Add HTTP GET support to OCSP server
NOT BUG:Rewrite parse_name
NOT BUG:Remove need for multiple arrays parse the X509 name one RDN at a time Thanks to Andy for careful review
BUG:use isxdigit and apps_tohex
BUG:Replace ad-hoc ascii->hex with isxdigit and new app_tohex
NOT BUG:Remove needless bio_err argument
NOT BUG:Many functions had a BIO* parameter and it was always called with bio_err Remove the param and just use bio_err
NOT BUG:Make "make rehash" quiet
NOT BUG:Don't complain about missing config file (Got the right env var name this time)
NOT BUG:realloc of NULL is like malloc
NOT BUG:ANSI C and OpenSSL's malloc wrapper do this also
NOT BUG:remove malloc casts
NOT BUG:Following ANSI C rules remove the casts from calls to OPENSSL_malloc and OPENSSL_realloc
NOT BUG:ERR_ cleanup
BUG:Remove ERR_[gs]et_implementation as they were not undocumented and useless (the data structure was opaque)
BUG:Halve the number of lock/unlock calls in almost all ERR_ functions by letting the caller of get_hash or int_thread_set able to lock Very useful when looping such as adding errors or when getting the hash and immediately doing a lookup on it
NOT BUG:Allow for types with leading underscore when checking error macros
NOT BUG:We have an increasing number of function declarations starting with '__owur' Unfortunately util/ck_errf.pl fails to detect them A simple change fixes that issue
NOT BUG:NISTZ256: owur'ize
NOT BUG:__owur'ize static methods to catch calling errors within the module
NOT BUG:NISTZ256: use EC_POINT API and check errors
NOT BUG:CRYPTO_mem_leaks should ignore it's BIO argument
NOT BUG:CRYPTO_mem_leaks takes a BIO* argument It's not a leak if that argument hasn't been free'd
NOT BUG:NISTZ256: don't swallow malloc errors
NOT BUG:NISTZ256: set Z_is_one to boolean 0/1 as is customary
NOT BUG:Cosmetic no real effect
NOT BUG:Error checking and memory leak fixes in NISTZ256
NOT BUG:Fix Wmaybe-uninitialized: initialize variable
NOT BUG:Fix the check of test apps in util/mk1mf.pl
NOT BUG:The previous check assumed that the variables for each test app ending with TEST would be indication enough Experience showed that this isn't the best way Instead simply look for the EXE variable in test/Makefile
NOT BUG:Small fixes after the Big apps cleanup
NOT BUG:This fixes util/mk1mf.pl which was looking for old variable names from apps/Makefile
NOT BUG:Add readline (etc) support
NOT BUG:Compile with -DREADLINE and the appropriate library
NOT BUG:Simplify parse_yesno; remove local variable
NOT BUG:Fix typo in help & comment formatting
NOT BUG:Fix error message
NOT BUG:Fix main build breakage
NOT BUG:A variable declaration got dropped during a merge And if a compiler inlines strcmp() and you put a strcmp in an assert message the resultant stringification exceeds ANSI string limits
NOT BUG:Remove the special list-xxxx commands
NOT BUG:There's a new "list" command which takes a flag to say what to list Removing the old hacky commands Re-ordered some functions to remove some needless declarations
NOT BUG:RT2962: add -keytab and -krb5svc flags
NOT BUG:Free malloc data on encoding errors
NOT BUG:apps-cleanup: the doc fixes
NOT BUG:Quote HTML entities in s_server output
NOT BUG:RT2206: Add -issuer flag to ocsp command
BUG:Remove EFENCE support
BUG:RT2451: Add telnet to s_client -starttls
BUG:Also add -xmpphost and -smtphost flags
NOT BUG:Add -nocommands to s_client
NOT BUG:Add flag to disable the 'command letters' from s_client
BUG:fewer NO_ENGINE #ifdef's
NOT BUG:Make setup_engine be a dummy if NO_ENGINE is enabled The option is not enabled if NO_ENGINE is enabled so the one "wasted" variable just sits there Removes some variables and code
NOT BUG:Add missing BIO_flush() calls
NOT BUG:Big apps cleanup (option-parsing etc)
NOT BUG:This is merges the old "rsalz-monolith" branch over to master The biggest change is that option parsing switch from cascasding 'else if strcmp("-foo")' to a utility routine and somethin akin to getopt Also an error in the command line no longer prints the full summary; use -help (or --help :) for that There have been many other changes and code-cleanup see bullet list below
NOT BUG:Special thanks to Matt for the long and detailed code review
NOT BUG:TEMPORARY: For now comment out CRYPTO_mem_leaks() at end of main
NOT BUG:Tickets closed: RT3515: Use 3DES in pkcs12 if built with no-rc2 RT1766: s_client -reconnect and -starttls broke RT2932: Catch write errors RT2604: port should be 'unsigned short' RT2983: total_bytes undeclared #ifdef RENEG RT1523: Add -nocert to fix output in x509 app RT3508: Remove unused variable introduced by b09eb24 RT3511: doc fix; req default serial is random RT1325,2973: Add more extensions to c_rehash RT2119,3407: Updated to dgst.pod RT2379: Additional typo fix RT2693: Extra include of string.h RT2880: HFS is case-insensitive filenames RT3246: req command prints version number wrong
NOT BUG:Other changes; incompatibilities marked with *: Add SCSV support Add -misalign to speed command Make dhparam dsaparam ecparam x509 output C in proper style Make some internal ocsp.c functions void Only display cert usages with -help in verify Use global bio_err remove "BIO*err" parameter from functions For filenames - always means stdin (or stdout as appropriate) Add aliases for -des/aes "wrap" ciphers *Remove support for IISSGC (server gated crypto) *The undocumented OCSP -header flag is now "-header name=value" *Documented the OCSP -header flag
NOT BUG:Fix error checking and memory leaks in NISTZ256 precomputation
NOT BUG:Thanks to Brian Smith for reporting these issues
NOT BUG:Correctly set Z_is_one on the return value in the NISTZ256 implementation
NOT BUG:Also add a few comments about constant-timeness
NOT BUG:Thanks to Brian Smith for reporting this issue
NOT BUG:Fix CRYPTO_strdup
NOT BUG:The function CRYPTO_strdup (aka OPENSSL_strdup) fails to check the return value from CRYPTO_malloc to see if it is NULL before attempting to use it This patch adds a NULL check
NOT BUG:RT3786
NOT BUG:Signed-off-by: Matt Caswell <matt@openssl.org> (cherry picked from commit 37b0cf936744d9edb99b5dd82cae78a7eac6ad60)
NOT BUG:(cherry picked from commit 20d21389c8b6f5b754573ffb6a4dc4f3986f2ca4)
NOT BUG:SSL_CIPHER lookup functions
NOT BUG:Add tables to convert between SSL_CIPHER fields and indices for ciphers and MACs
NOT BUG:Reorganise ssl_ciph.c to use tables to lookup values and load them
NOT BUG:New functions SSL_CIPHER_get_cipher_nid and SSL_CIPHER_get_digest_nid
NOT BUG:Add documentation
NOT BUG:Avoid "no config file" warning message
NOT BUG:Set config to /dev/null when doing make rehash
NOT BUG:ssltest output cleanup
NOT BUG:Make only errors go to stderr Print count and size before the loop so you can see it's an 838K message that will take a few moments
NOT BUG:test/Makefile dclean cleans out a few files too many
NOT BUG:The files removed are the ones that were symbolic links before but aren't now so we should not remove them any more
BUG:Repair EAP-FAST session resumption
BUG:EAP-FAST session resumption relies on handshake message lookahead to determine server intentions Commits 980bc1ec6114f5511b20c2e6ca741e61a39b99d6 and 7b3ba508af5c86afe43e28174aa3c53a0a24f4d9 removed the lookahead so broke session resumption
NOT BUG:This change partially reverts the commits and brings the lookahead back in reduced capacity for TLS + EAP-FAST only Since EAP-FAST does not support regular session tickets the lookahead now only checks for a Finished message
NOT BUG:Regular handshakes are unaffected by this change
NOT BUG:Engage ec/asm/ecp_nistz256-sparcv9 module
NOT BUG:Add ec/asm/ecp_nistz256-sparcv9.pl
NOT BUG:modes/asm/ghashv8-armx.pl: additional performance data
NOT BUG:aes/asm/aesni-x86.pl: fix typo affecting Windows build
NOT BUG:aes/asm/aesni-x86[_64].pl update
NOT BUG:This addresses
NOT BUG:- request for improvement for faster key setup in RT#3576; - clearing registers and stack in RT#3554 (this is more of a gesture to see if there will be some traction from compiler side); - more commentary around input parameters handling and stack layout (desired when RT#3553 was reviewed); - minor size and single block performance optimization (was lying around);
NOT BUG:Add assembly support for 32-bit iOS
NOT BUG:Configure: Engage ecp_nistz256-armv8 module
NOT BUG:Add ecp_nistz256-armv8 module
NOT BUG:Configure: add initial support for 64-bit Android
BUG:crypto/ec/ecp_nistp[224|521].c: fix formatting
BUG:ec/ecp_nistp*.c: fix SEGVs
NOT BUG:Configure: engage ARMv8 Montgomery multiplication module
NOT BUG:Add ARMv8 Montgomery multiplication module
NOT BUG:aes/asm/vpaes-armv8.pl: make it compile on iOS
NOT BUG:Remove SET oid config file and SET certs
NOT BUG:Use 2K RSA and SHA256 in tests
NOT BUG:Fix encoding bug in i2c_ASN1_INTEGER
BUG:Fix bug where i2c_ASN1_INTEGER mishandles zero if it is marked as negative
BUG:Thanks to Huzaifa Sidhpurwala <huzaifas@redhat.com> and Hanno Böck <hanno@hboeck.de> for reporting this issue
NOT BUG:Error out immediately on empty ciphers list
NOT BUG:A 0-length ciphers list is never permitted The old code only used to reject an empty ciphers list for connections with a session ID It would later error out on a NULL structure so this change just moves the alert closer to the problem source
NOT BUG:Use -Wall -Wextra with clang
NOT BUG:The disabled set of -Weverything is hard to maintain across versions Use -Wall -Wextra but also document other useful warnings that currently trigger
NOT BUG:SunOS non-posix shells do not grok export name=value
NOT BUG:Code style: space after 'if'
NOT BUG:Remove code for deleted function from ssl.h
NOT BUG:ssl_cert_inst was removed in 2c3823491d8812560922a58677e3ad2db4b2ec8d
NOT BUG:Reject empty generation strings
BUG:Reported by Hanno Böck <hanno@hboeck.de>
NOT BUG:Limit depth of nested sequences when generating ASN.1
BUG:Reported by Hanno Böck <hanno@hboeck.de> PR#3800
NOT BUG:Remove obsolete options for debug-steve*
NOT BUG:Add -Wtype-limits to strict warnings
NOT BUG:Initialize variable
NOT BUG:newsig may be used (freed) uninitialized on a malloc error
NOT BUG:Fix ssl_get_prev_session overrun
NOT BUG:If OpenSSL is configured with no-tlsext then ssl_get_prev_session can read past the end of the ClientHello message if the session_id length in the ClientHello is invalid This should not cause any security issues since the underlying buffer is 16k in size It should never be possible to overrun by that many bytes
NOT BUG:This is probably made redundant by the previous commit - but you can never be too careful
BUG:With thanks to Qinghao Tang for reporting this issue
NOT BUG:Check for ClientHello message overruns
NOT BUG:The ClientHello processing is insufficiently rigorous in its checks to make sure that we don't read past the end of the message This does not have security implications due to the size of the underlying buffer - but still needs to be fixed
BUG:With thanks to Qinghao Tang for reporting this issue
NOT BUG:free NULL cleanup 9
NOT BUG:Ongoing work to skip NULL check before calling free routine This gets: ecp_nistz256_pre_comp_free nistp224_pre_comp_free nistp256_pre_comp_free nistp521_pre_comp_free PKCS7_free PKCS7_RECIP_INFO_free PKCS7_SIGNER_INFO_free sk_PKCS7_pop_free PKCS8_PRIV_KEY_INFO_free PKCS12_free PKCS12_SAFEBAG_free PKCS12_free sk_PKCS12_SAFEBAG_pop_free SSL_CONF_CTX_free SSL_CTX_free SSL_SESSION_free SSL_free ssl_cert_free ssl_sess_cert_free
NOT BUG:Fix memory leak
NOT BUG:It should have freed them when != NULL not when == NULL
NOT BUG:do_dirname: Don't change gen on failures
BUG:It would set gen->d.dirn to a freed pointer in case X509V3_NAME_from_section failed
NOT BUG:X509_VERIFY_PARAM_free: Check param for NULL
NOT BUG:free NULL cleanup 10
NOT BUG:Avoid checking for NULL before calling free functions This gets ssl.*free: ssl_sess_cert_free ssl_free ssl_excert_free ssl_cert_free SSL_free SSL_SRP_CTX_free SSL_SESSION_free SSL_CTX_free SSL_CTX_SRP_CTX_free SSL_CONF_CTX_free
NOT BUG:The wrong ifdef is used to guard usage of PSK code
NOT BUG:PR#3790
NOT BUG:Don't set *pval to NULL in ASN1_item_ex_new
NOT BUG:While *pval is usually a pointer in rare circumstances it can be a long value One some platforms (e.g WIN64) where sizeof(long) < sizeof(ASN1_VALUE *) this will write past the field
NOT BUG:*pval is initialised correctly in the rest of ASN1_item_ex_new so setting it to NULL is unecessary anyway
BUG:Thanks to Julien Kauffmann for reporting this issue
NOT BUG:Fix ECDH detection add ECDH keyid test
NOT BUG:Fix ECDH key identifier support
NOT BUG:PR#3789
NOT BUG:Polish shell script to avoid needless complexity
NOT BUG:No need for here documents just use "yes" or </dev/null No need for "|| exit 1" clauses just use "set -e"
NOT BUG:fix to "test script cleanup"
NOT BUG:Fix commit 30f54ad295d58ff8c6d28c1fd612d23c2c343d19 which used non-portable syntax for checking exit status
NOT BUG:Fix read_ahead issue
NOT BUG:Fix a "&" that should have been "!" when processing read_ahead
NOT BUG:RT#3793
NOT BUG:test script cleanup
NOT BUG:Removed commented-out tests
NOT BUG:Standardize on doing cmd .. || exit 1 instead of cmd .. if [ $? != 0] ; then exit 1 fi where that if statement has ben one three or four lines variously
NOT BUG:Have mkerr.pl treat already existing multiline string defs properly
NOT BUG:Since source reformat we ended up with some error reason string definitions that spanned two lines That in itself is fine but we sometimes edited them to provide better strings than what could be automatically determined from the reason macro for example:
NOT BUG:{ERR_REASON(SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER) "Peer haven't sent GOST certificate required for selected ciphersuite"}
NOT BUG:However mkerr.pl didn't treat those two-line definitions right and they ended up being retranslated to whatever the macro name would indicate for example:
NOT BUG:{ERR_REASON(SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER) "No gost certificate sent by peer"}
NOT BUG:Clearly not what we wanted This change fixes this problem
NOT BUG:Drop CA.sh for CA.pl
NOT BUG:Remove CA.sh script and use CA.pl for testing etc
NOT BUG:consistent test-start logging
NOT BUG:Output a consistent "start" marker for each test Remove "2>/dev/null" from Makefile command lines Add OPENSSL_CONFIG=/dev/null for places where it's needed in order to suppress a warning message from the openssl CLI
NOT BUG:Ignore the non-dll windows specific build directories
BUG:Appease clang -Wshadow
NOT BUG:The macros BSWAP4 and BSWAP8 have statetemnt expressions implementations that use local variable names that shadow variables outside the macro call generating warnings like this
BUG:e_aes_cbc_hmac_sha1.c:263:14: warning: declaration shadows a local variable [-Wshadow] seqnum = BSWAP8(blocks[0].q[0]); ^ ../modes/modes_lcl.h:41:29: note: expanded from macro 'BSWAP8' ^ e_aes_cbc_hmac_sha1.c:223:12: note: previous declaration is here size_t ret = 0; ^
NOT BUG:Have clang be quiet by modifying the macro variable names slightly (suffixing them with an underscore)
BUG:Appease clang -Wgnu-statement-expression
NOT BUG:We use GNU statement expressions in crypto/md32_common.h surrounded by checks that GNU C is indeed used to compile It seems that clang at least on Linux pretends to be GNU C therefore finds the statement expressions and then warns about them
NOT BUG:The solution is to have clang be quiet about it
BUG:Appease clang -Wempty-translation-unit
NOT BUG:ebcdic.c:284:7: warning: ISO C requires a translation unit to contain at least one declaration [-Wempty-translation-unit] ^ 1 warning generated
NOT BUG:update ordinals
NOT BUG:make depend
NOT BUG:remove asn1_mac.h
NOT BUG:Remove old ASN.1 functions
NOT BUG:Remove unnecessary use of ASN1_const_CTX
NOT BUG:Rewrite ssl_asn1.c using new ASN.1 code
NOT BUG:Complete reimplementation of d2i_SSL_SESSION and i2d_SSL_SESSION using new ASN.1 code and eliminating use of old ASN.1 macros
NOT BUG:Add macro to implement static encode functions
BUG:Fewer newlines in comp method output
NOT BUG:Print "supported compression methods" all on one line
NOT BUG:modes/asm/ghashv8-armx.pl: up to 90% performance improvement
BUG:sha/asm/sha*-armv8.pl: add Denver and X-Gene esults
NOT BUG:aes/asm/aesv8-armx.pl: optimize for Cortex-A5x
BUG:ARM has optimized Cortex-A5x pipeline to favour pairs of complementary AES instructions While modified code improves performance of post-r0p0 Cortex-A53 performance by >40% (for CBC decrypt and CTR) it hurts original r0p0 We favour later revisions because one can't prevent future from coming Improvement on post-r0p0 Cortex-A57 exceeds 50% while new code is not slower on r0p0 or Apple A7 for that matter
NOT BUG:[Update even SHA results for latest Cortex-A53.]
NOT BUG:perlasm/arm-xlate.pl update (fix end-less loop and prepare for 32-bit iOS)
NOT BUG:Configure: android-arm facelift
NOT BUG:make update
NOT BUG:Remove SSL_TASK the DECnet Based SSL Engine - addendum
NOT BUG:A bit of cleanup was forgotten
NOT BUG:Remove SSL_TASK the DECnet Based SSL Engine
NOT BUG:This engine is for VMS only and isn't really part of the core OpenSSL but rather a side project of its own that just happens to have tagged along for a long time The reasons why it has remained within the OpenSSL source are long lost in history and there not being any real reason for it to remain here it's time for it to move out
NOT BUG:This side project will appear as a project in its own right the location of which will be announced later on
NOT BUG:Remove old ASN.1 code from evp_asn1.c
NOT BUG:Rewrite ASN1_TYPE_set_int_octetstring and ASN1_TYPE_get_int_octetstring to use the new ASN.1 code instead of the old macros
NOT BUG:Now that we've removed the need for symlinks we can safely remove util/mklinks.pl
NOT BUG:Remove remaining variables for symlinked/copied headers and tests
BUG:GitConfigure: no more 'no-symlinks'
NOT BUG:util/bat.sh util/mk1mf.pl util/pl/VC-32.pl util/pl/unix.pl: - Remove all uses of EXHEADER That includes removing the use if INC_D and INCO_D - Replace the check for TEST with a check for [A-Z0-9_]*TEST
NOT BUG:Remove EXHEADER TEST APPS links: install: and uninstall: where relevant
NOT BUG:With no more symlinks there's no need for those variables or the links target This also goes for all install: and uninstall: targets that do nothing but copy $(EXHEADER) files since that's now taken care of by the top Makefile
NOT BUG:Also removed METHTEST from test/Makefile It looks like an old test that's forgotten..
NOT BUG:Stop symlinking move files to intended directory
NOT BUG:Rather than making include/openssl/foo.h a symlink to crypto/foo/foo.h this change moves the file to include/openssl/foo.h once and for all
BUG:Likewise move crypto/foo/footest.c to test/footest.c instead of symlinking it there
NOT BUG:Originally-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Ensure EC private keys retain leading zeros
BUG:RFC5915 requires the use of the I2OSP primitive as defined in RFC3447 for storing an EC Private Key This converts the private key into an OCTETSTRING and retains any leading zeros This commit ensures that those leading zeros are present if required
NOT BUG:Clean up record layer
NOT BUG:Fix up various things that were missed during the record layer work All instances where we are breaking the encapsulation rules
NOT BUG:Fix record layer "make clean"
NOT BUG:The "clean" target in libssl has been updated to handle the new record layer sub-directory
NOT BUG:Fix some faults in util/mk1mf.pl
NOT BUG:When building on Unix there are times when the 'EX_LIB' MINFO variable contains valuable information Make sure to take care of it
NOT BUG:fixrules in util/pl/unix.pl was previously changed with a simpler fix of rules with a comment claiming that's compatible with -j Unfortunately this breaks multiline rules and doesn't change anything for single line rules While at it do not prefix pure echo lines with a 'cd $(TEST_D) &&' as that's rather silly
NOT BUG:Remove duplicate code
NOT BUG:Update code to use ASN1_TYPE_pack_sequence and ASN1_TYPE_unpack_sequence instead of performing the same operation manually
NOT BUG:New ASN1_TYPE SEQUENCE functions
NOT BUG:Add new functions ASN1_TYPE_pack_sequence and ASN1_TYPE_unpack_sequence: these encode and decode ASN.1 SEQUENCE using an ASN1_TYPE structure
NOT BUG:Update ordinals
NOT BUG:Rewrite X509_PKEY_new to avoid old ASN1 macros
NOT BUG:Remove unnecessary asn1_mac.h includes
NOT BUG:Initialised 'ok' and redo the logic
NOT BUG:The logic with how 'ok' was calculated didn't quite convey what's "ok" so the logic is slightly redone to make it less confusing
NOT BUG:sha/asm/sha512-armv4.pl: adapt for use in Linux kernel context
NOT BUG:Follow-up to sha256-armv4.pl in cooperation with Ard Biesheuvel (Linaro) and Sami Tolvanen (Google)
NOT BUG:sha/asm/sha256-armv4.pl: fix compile issue in kernel and eliminate little-endian dependency
BUG:Have a shared library version thats reasonable with our version scheme
NOT BUG:The FAQ says this:
NOT BUG:After the release of OpenSSL 1.0.0 the versioning scheme changed Letter releases (e.g 1.0.1a) can only contain bug and security fixes and no new features Minor releases change the last number (e.g 1.0.2) and can contain new features that retain binary compatibility Changes to the middle number are considered major releases and neither source nor binary compatibility is guaranteed
NOT BUG:With such a scheme (and with the thinking that it's nice if the shared library version stays on track with the OpenSSL version) it's rather futile to keep the minor release number in the shared library version The deed already done with OpenSSL 1.0.x can't be changed but with 1.x.y x=1 and on 1.x as shared library version is sufficient
NOT BUG:Add private/public key conversion tests
NOT BUG:Remove d2i_X509_PKEY and i2d_X509_PKEY
NOT BUG:Remove partially implemented d2i_X509_PKEY and i2d_X509_PKEY: nothing uses them and they don't work properly Update ordinals
NOT BUG:ec/asm/ecp_nistz256-x86_64.pl: update commentary with before-after performance data
NOT BUG:free NULL cleanup
NOT BUG:EVP_.*free; this gets: EVP_CIPHER_CTX_free EVP_PKEY_CTX_free EVP_PKEY_asn1_free EVP_PKEY_asn1_set_free EVP_PKEY_free EVP_PKEY_free_it EVP_PKEY_meth_free; and also EVP_CIPHER_CTX_cleanup
NOT BUG:Engage vpaes-armv8 module
NOT BUG:Add vpaes-amrv8.pl module
NOT BUG:Configure: remove unused variables
NOT BUG:Make asn1_ex_i2c asn1_ex_c2i static
NOT BUG:Remove combine option from ASN.1 code
NOT BUG:Remove the combine option This was used for compatibility with some non standard behaviour in ancient versions of OpenSSL: specifically the X509_ATTRIBUTE and DSAPublicKey handling Since these have now been revised it is no longer needed
NOT BUG:Simplify DSA public key handling
NOT BUG:DSA public keys could exist in two forms: a single Integer type or a SEQUENCE containing the parameters and public key with a field called "write_params" deciding which form to use These forms are non standard and were only used by functions containing "DSAPublicKey" in the name
NOT BUG:Simplify code to only use the parameter form and encode the public key component directly in the DSA public key method
NOT BUG:ASN1_TYPE documentation
NOT BUG:Add Record Layer documentation
BUG:Add some design documentation on how the record layer works to aid future maintenance
BUG:Fix formatting oddities
BUG:Fix some formatting oddities in rec_layer_d1.c
NOT BUG:Fix record.h formatting
NOT BUG:Fix some strange formatting in record.h This was probably originally introduced as part of the reformat work
NOT BUG:Define SEQ_NUM_SIZE
NOT BUG:Replace the hard coded value 8 (the size of the sequence number) with a constant defined in a macro
NOT BUG:Fix compilation on windows for record layer
NOT BUG:Rename record layer source files
NOT BUG:Remove some unneccessary macros
NOT BUG:Renamed record layer header files
NOT BUG:Reorganise header files
NOT BUG:Remove last trace of non-record layer code reading and writing sequence numbers directly
NOT BUG:Move last_write_sequence from s->d1 to s->rlayer.d Also push some usage of last_write_sequence out of dtls1_retransmit_message and into the record layer
NOT BUG:Move ssl3_record_sequence_update into record layer
NOT BUG:Move buffered_app_data from s->d1 to s->rlayer.d
NOT BUG:Move handshake_fragment handshake_fragment_len alert_fragment and alert_fragment_len from s->d1 to s->rlayer.d
NOT BUG:Fix seg fault in dtls1_new
NOT BUG:Moved processed_rcds and unprocessed_rcds from s->d1 to s->rlayer.d
NOT BUG:Move bitmap and next_bitmap from s->d1 to s->rlayer.d Create dtls_bitmap.h and dtls_bitmap.c
NOT BUG:Move r_epoch and w_epoch from s->d1 to s->rlayer.d
NOT BUG:Introduce a DTLS_RECORD_LAYER type for DTLS record layer state
NOT BUG:Move DTLS1_RECORD_DATA into rec_layer.h
BUG:Move read_sequence and write_sequence from s->s3 to s->rlayer
BUG:Move s->s3->wpend_* to s->rlayer
BUG:Move handshake_fragment handshake_fragment_len alert_fragment and alert_fragment_len from s->s3 into s->rlayer
BUG:Move s->s3->wnum to s->rlayer.wnum
NOT BUG:Move s->rstate to s->rlayer.rstate
NOT BUG:Move s->packet and s->packet_length into s->rlayer
NOT BUG:Remove unneccessary use of accessor function now code is moved into record layer
NOT BUG:Make rrec wrec rbuf and wbuf fully private to the record layer Also clean up some access to them Now that various functions have been moved into the record layer they no longer need to use the accessor macros
NOT BUG:Removed dependency on rrec from heartbeat processing
NOT BUG:Introduce macro RECORD_LAYER_setup_comp_buffer
NOT BUG:Fix bug where rrec was being released...should have been removed by one of the earlier record layer commits
NOT BUG:Move ssl3_pending into the record layer
NOT BUG:Remove RECORD_LAYER_set_ssl and introduce RECORD_LAYER_init
NOT BUG:Provide RECORD_LAYER_set_data function
NOT BUG:Introduce the functions RECORD_LAYER_release RECORD_LAYER_read_pending and RECORD_LAYER_write_pending
NOT BUG:Create RECORD_LAYER_clear function
NOT BUG:Tidy up rec_layer.h Add some comments regarding which functions should be being used for what purpose
NOT BUG:Moved s3_pkt.c s23_pkt.c and d1_pkt.c into the record layer
NOT BUG:Split out non record layer functions out of s3_pkt.c and d1_pkt.c into the new files s3_msg.c and s1_msg.c respectively
BUG:Move more SSL3_RECORD oriented functions into ssl3_record.c
BUG:Move SSL3_RECORD oriented functions into ssl3_record.c
NOT BUG:Move SSL3_BUFFER set up and release code into ssl3_buffer.c
BUG:Move s->s3->wrec to s>rlayer>wrec
BUG:Encapsulate s->s3->wrec
NOT BUG:Move s->s3->rrec to s->rlayer->rrec
BUG:Encapsulate s->s3->rrec
BUG:Move s->s3->wbuf to s->rlayer->wbuf
BUG:Encapsulate access to s->s3->wbuf
NOT BUG:Move s->s3->rrec into s->rlayer
BUG:Encapsulate SSL3_BUFFER and all access to s->s3->rbuf
NOT BUG:Create a RECORD_LAYER structure and move read_ahead into it
NOT BUG:update ordinals
NOT BUG:Move more internal only functions to asn1_locl.h
NOT BUG:free NULL cleanup
NOT BUG:This gets EC_GROUP_clear_free EC_GROUP_free EC_KEY_free EC_POINT_clear_free EC_POINT_free
NOT BUG:Resolve swallowed returns codes
NOT BUG:The recent updates to libssl to enforce stricter return code checking left a small number of instances behind where return codes were being swallowed (typically because the function they were being called from was declared as void) This commit fixes those instances to handle the return codes more appropriately
NOT BUG:make update
NOT BUG:Move internal only ASN.1 functions to asn1_locl.h
NOT BUG:Remove X509_ATTRIBUTE hack
NOT BUG:The X509_ATTRIBUTE structure includes a hack to tolerate malformed attributes that encode as the type instead of SET OF type This form is never created by OpenSSL and shouldn't be needed any more
NOT BUG:free NULL cleanup
NOT BUG:This commit handles BIO_ACCEPT_free BIO_CB_FREE BIO_CONNECT_free BIO_free BIO_free_all BIO_vfree
NOT BUG:Support key loading from certificate file
NOT BUG:Support loading of key and certificate from the same file if SSL_CONF_FLAG_REQUIRE_PRIVATE is set This is done by remembering the filename used for each certificate type and attempting to load a private key from the file when SSL_CONF_CTX_finish is called
NOT BUG:Update docs
NOT BUG:make depend
NOT BUG:make X509_NAME opaque
NOT BUG:Fix bug in s_client Previously default verify locations would only be loaded if CAfile or CApath were also supplied and successfully loaded first
NOT BUG:Fix HMAC to pass invalid key len test
NOT BUG:Add HMAC test for invalid key len
NOT BUG:Ensure that both the MD and key have been initialised before attempting to create an HMAC
NOT BUG:Inspired by BoringSSL commit 2fe7f2d0d9a6fcc75b4e594eeec306cc55acd594
NOT BUG:Add more HMAC tests
BUG:SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG was disabled in 0.9.8q and 1.0.0c This commit sets the value of SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG to zero
NOT BUG:Deprecate RAND_pseudo_bytes
NOT BUG:The justification for RAND_pseudo_bytes is somewhat dubious and the reality is that it is frequently being misused RAND_bytes and RAND_pseudo_bytes in the default implementation both end up calling ssleay_rand_bytes Both may return -1 in an error condition If there is insufficient entropy then both will return 0 but RAND_bytes will additionally add an error to the error queue They both return 1 on success Therefore the fundamental difference between the two is that one will add an error to the error queue with insufficient entory whilst the other will not Frequently there are constructions of this form:
BUG:if(RAND_pseudo_bytes(...) <= 1) goto err;
NOT BUG:In the above form insufficient entropy is treated as an error anyway so RAND_bytes is probably the better form to use
NOT BUG:This form is also seen: if(!RAND_pseudo_bytes(...)) goto err;
NOT BUG:This is technically not correct at all since a -1 return value is incorrectly handled - but this form will also treat insufficient entropy as an error
NOT BUG:Within libssl it is required that you have correctly seeded your entropy pool and so there seems little benefit in using RAND_pseudo_bytes Similarly in libcrypto many operations also require a correctly seeded entropy pool and so in most interesting cases you would be better off using RAND_bytes anyway There is a significant risk of RAND_pseudo_bytes being incorrectly used in scenarios where security can be compromised by insufficient entropy
NOT BUG:If you are not using the default implementation then most engines use the same function to implement RAND_bytes and RAND_pseudo_bytes in any case
NOT BUG:Given its misuse limited benefit and potential to compromise security RAND_pseudo_bytes has been deprecated
NOT BUG:RAND_bytes updates
NOT BUG:Ensure RAND_bytes return value is checked correctly and that we no longer use RAND_pseudo_bytes
NOT BUG:Fix return checks in GOST engine
NOT BUG:Filled in lots of return value checks that were missing the GOST engine and added appropriate error handling
BUG:Fix misc NULL derefs in sureware engine
BUG:Fix miscellaneous NULL pointer derefs in the sureware engine
NOT BUG:Add ticket length before buffering DTLS message
NOT BUG:In ssl3_send_new_session_ticket the message to be sent is constructed We skip adding the length of the session ticket initially then call ssl_set_handshake_header and finally go back and add in the length of the ticket Unfortunately in DTLS ssl_set_handshake_header also has the side effect of buffering the message for subsequent retransmission if required By adding the ticket length after the call to ssl_set_handshake_header the message that is buffered is incomplete causing an invalid message to be sent on retransmission
NOT BUG:Ensure last_write_sequence is saved in DTLS1.2
NOT BUG:In DTLS immediately prior to epoch change the write_sequence is supposed to be stored in s->d1->last_write_sequence The write_sequence is then reset back to 00000000 In the event of retransmits of records from the previous epoch the last_write_sequence is restored This commit fixes a bug in DTLS1.2 where the write_sequence was being reset before last_write_sequence was saved and therefore retransmits are sent with incorrect sequence numbers
NOT BUG:free NULL cleanup
NOT BUG:Start ensuring all OpenSSL "free" routines allow NULL and remove any if check before calling them This gets DH_free DSA_free RSA_free
NOT BUG:update ordinals
NOT BUG:Update ordinals
NOT BUG:Thanks to the change of mkdef.pl a few more deprecated functions were properly defined in util/libeay.num
BUG:Teach mkdef.pl to handle multiline declarations
BUG:For the moment this is specially crafted for DECLARE_DEPRECATED because that's where we found the problem but it can easily be expanded to other types of special delarations when needed
NOT BUG:Fix verify algorithm
NOT BUG:Disable loop checking when we retry verification with an alternative path This fixes the case where an intermediate CA is explicitly trusted and part of the untrusted certificate list By disabling loop checking for this case the untrusted CA can be replaced by the explicitly trusted case and verification will succeed
NOT BUG:make ASN1_OBJECT opaque
NOT BUG:Configuration file examples
NOT BUG:Make OCSP response verification more flexible
NOT BUG:If a set of certificates is supplied to OCSP_basic_verify use those in addition to any present in the OCSP response as untrusted CAs when verifying a certificate chain
NOT BUG:PR#3668
NOT BUG:make depend
NOT BUG:Move some EVP internals to evp_int.h
NOT BUG:Move EVP internals to evp_int.h remove -Ievp hack from crypto/Makefile
NOT BUG:Move some ASN.1 internals to asn1_int.h
NOT BUG:Move ASN.1 internals used across multiple directories into new internal header file asn1_int.h remove crypto/Makefile hack which allowed other directories to include "asn1_locl.h"
NOT BUG:free NULL cleanup
NOT BUG:Start ensuring all OpenSSL "free" routines allow NULL and remove any if check before calling them This gets ASN1_OBJECT_free and ASN1_STRING_free
NOT BUG:Fix malloc define typo
NOT BUG:Fix compilation failure when SCTP is compiled due to incorrect define
BUG:Reported-by: Conrad Kostecki <ck+gentoobugzilla@bl4ckb0x.de> URL: https://bugs.gentoo.org/543828
NOT BUG:RT#3758 Signed-off-by: Matt Caswell <matt@openssl.org>
NOT BUG:Use OPENSSL_malloc rather than malloc/calloc
NOT BUG:Fix eng_cryptodev to not depend on BN internals
NOT BUG:Adjust include path
NOT BUG:Thanks to a -I.. the path does work at least on unix However this doesn't work so well on VMS Correcting the path to not rely on given -I does work on both
NOT BUG:JPAKE Makefile missing 'files' target
NOT BUG:Remove old style ASN.1 support
NOT BUG:Remove old ASN.1 COMPAT type This was meant as a temporary measure so older ASN.1 code (from OpenSSL 0.9.6) still worked It's a hack which breaks constification and hopefully nothing uses it now if it ever did
BUG:return unexpected message when receiving kx with kDHr or kDHd
BUG:It was saying that it was an illegal parameter / unsupported cipher
BUG:Don't send a for ServerKeyExchange for kDHr and kDHd
NOT BUG:The certificate already contains the DH parameters in that case ssl3_send_server_key_exchange() would fail in that case anyway
NOT BUG:Make sure that cert is never NULL
NOT BUG:Also removes for it being NULL
NOT BUG:Fix build
NOT BUG:Remove x_exten.c and x_exten.o from crypto/asn1/Makefile: they've moved now
NOT BUG:make X509_EXTENSION opaque
NOT BUG:Fix SSL_clear unused return
NOT BUG:Fix missing return value check in dtls1_listen when calling SSL_clear()
NOT BUG:ssl3_set_handshake_header returns
NOT BUG:Change ssl_set_handshake_header from return void to returning int and handle error return code appropriately
NOT BUG:apps return value checks
NOT BUG:Ensure that all libssl functions called from within the apps have their return values checked where appropriate
NOT BUG:Fix missing return value checks
NOT BUG:Ensure that all functions have their return values checked where appropriate This covers all functions defined and called from within libssl
NOT BUG:Check libssl function returns
NOT BUG:Mark most functions returning a result defined in any libssl header file with __owur to warn if they are used without checking the return value Use -DUNUSED_RETURN compiler flag with gcc to activate these warnings Some functions returning a result are skipped if it is common and valid to use these functions without checking the return value
NOT BUG:Add -DDEBUG_UNUSED to --strict-warnings
NOT BUG:In order to receive warnings on unused function return values the flag -DDEBUG_UNUSED must be passed to the compiler This change adds that for the --strict-warnings Configure option
NOT BUG:Remove PREFIX as it's not used any more
NOT BUG:Actually remove TABLE from version control
NOT BUG:Follow up on the earlier "Do not keep TABLE in version control" Actually removing TABLE from version control was forgotten
NOT BUG:Don't check curves that haven't been sent
NOT BUG:Don't check that the curve appears in the list of acceptable curves for the peer if they didn't send us such a list (RFC 4492 does not require that the extension be sent)
NOT BUG:Remove deleted functions update ordinals
NOT BUG:Remove {i2d,d2i}_ASN1_BOOLEAN
NOT BUG:Remove {i2d,d2i}_ASN1_BOOLEAN
NOT BUG:Rewrite single occurrence of d2i_ASN1_BOOLEAN in asn1_parse2
NOT BUG:Remove old ASN.1 code
NOT BUG:Remove old M_ASN1_ macros and replace any occurences with the corresponding function
NOT BUG:Remove d2i_ASN1_bytes d2i_ASN1_SET i2d_ASN1_SET: no longer used internally
NOT BUG:sha/asm/sha256-armv4.pl: adapt for use in Linux kernel context
NOT BUG:In cooperation with Ard Biesheuvel (Linaro) and Sami Tolvanen (Google)
NOT BUG:Refer to $table{$target} rather than $table{$t}
NOT BUG:Using $t is an artifact from the earlier changes in Configure and was unfortunately forgotten as is
NOT BUG:Add AES unwrap test with invalid key
NOT BUG:This tests the unwrap algorithm with an invalid key The result should be rejected without returning any plaintext
NOT BUG:Fix memory leak
BUG:CRYPTO_128_unwrap(): Fix refactoring damage
BUG:crypto/modes/wrap128.c was heavily refactored to support AES Key Wrap with Padding and four bugs were introduced into CRYPTO_128_unwrap() at that time:
NOT BUG:- crypto_128_unwrap_raw()'s return value ('ret') is checked incorrectly and the function immediately returns 'ret' in (almost) all cases This makes the IV checking code later in the function unreachable but callers think the IV check succeeded since CRYPTO_128_unwrap()'s return value is non-zero
NOT BUG:FIX: Return 0 (error) if crypto_128_unwrap_raw() returned 0 (error)
NOT BUG:- crypto_128_unwrap_raw() writes the IV to the 'got_iv' buffer not to the first 8 bytes of the output buffer ('out') as the IV checking code expects This makes the IV check fail
NOT BUG:FIX: Compare 'iv' to 'got_iv' not 'out'
NOT BUG:- The data written to the output buffer ('out') is "cleansed" if the IV check fails but the code passes OPENSSL_cleanse() the input buffer length ('inlen') instead of the number of bytes that crypto_128_unwrap_raw() wrote to the output buffer ('ret') This means that OPENSSL_cleanse() could potentially write past the end of 'out'
NOT BUG:FIX: Change 'inlen' to 'ret' in the OPENSSL_cleanse() call
NOT BUG:- CRYPTO_128_unwrap() is returning the length of the input buffer ('inlen') instead of the number of bytes written to the output buffer ('ret') This could cause the caller to read past the end of 'out'
NOT BUG:FIX: Return 'ret' instead of 'inlen' at the end of the function
NOT BUG:PR#3749
NOT BUG:wrap128.c: Fix Doxygen comments
NOT BUG:Add DTLS tests to make test
NOT BUG:Updated test/testssl script to include the new DTLS capability in ssltest
NOT BUG:Add DTLS support to ssltest
NOT BUG:Add DTLS to SSL_get_version
NOT BUG:If the target is an old style debug- target it will not have debugging [cl]flags
NOT BUG:Fix a failure to NULL a pointer freed on error
BUG:Reported by the LibreSSL project as a follow on to CVE-2015-0209
NOT BUG:Update NEWS
NOT BUG:Resync NEWS with the latest version from 1.0.2
NOT BUG:Update CHANGES
NOT BUG:Resync CHANGES with the latest version from 1.0.2
NOT BUG:PKCS#7: avoid NULL pointer dereferences with missing content
NOT BUG:In PKCS#7 the ASN.1 content component is optional This typically applies to inner content (detached signatures) however we must also handle unexpected missing outer content correctly
NOT BUG:This patch only addresses functions reachable from parsing decryption and verification and functions otherwise associated with reading potentially untrusted data
NOT BUG:Correcting all low-level API calls requires further work
NOT BUG:CVE-2015-0289
NOT BUG:Thanks to Michal Zalewski (Google) for reporting this issue
NOT BUG:Fix ASN1_TYPE_cmp
NOT BUG:Fix segmentation violation when ASN1_TYPE_cmp is passed a boolean type This can be triggered during certificate verification so could be a DoS attack against a client or a server enabling client authentication
BUG:CVE-2015-0286
BUG:Fix DHE Null CKE vulnerability
NOT BUG:If client auth is used then a server can seg fault in the event of a DHE cipher being used and a zero length ClientKeyExchange message being sent by the client This could be exploited in a DoS attack
NOT BUG:CVE-2015-1787
NOT BUG:Fix for CVE-2015-0291
NOT BUG:If a client renegotiates using an invalid signature algorithms extension it will crash a server with a NULL pointer dereference
BUG:Thanks to David Ramos of Stanford University for reporting this bug
BUG:CVE-2015-0291
NOT BUG:Reject invalid PSS parameters
NOT BUG:Fix a bug where invalid PSS parameters are not rejected resulting in a NULL pointer exception This can be triggered during certificate verification so could be a DoS attack against a client or a server enabling client authentication
NOT BUG:Thanks to Brian Carpenter for reporting this issues
BUG:CVE-2015-0208
NOT BUG:Free up ADB and CHOICE if already initialised
BUG:CVE-2015-0287
NOT BUG:Fix Seg fault in DTLSv1_listen
NOT BUG:The DTLSv1_listen function is intended to be stateless and processes the initial ClientHello from many peers It is common for user code to loop over the call to DTLSv1_listen until a valid ClientHello is received with an associated cookie A defect in the implementation of DTLSv1_listen means that state is preserved in the SSL object from one invokation to the next that can lead to a segmentation fault Erorrs processing the initial ClientHello can trigger this scenario An example of such an error could be that a DTLS1.0 only client is attempting to connect to a DTLS1.2 only server
BUG:CVE-2015-0207
NOT BUG:Multiblock corrupted pointer fix
NOT BUG:OpenSSL 1.0.2 introduced the "multiblock" performance improvement This feature only applies on 64 bit x86 architecture platforms that support AES NI instructions A defect in the implementation of "multiblock" can cause OpenSSL's internal write buffer to become incorrectly set to NULL when using non-blocking IO Typically when the user application is using a socket BIO for writing this will only result in a failed connection However if some other BIO is used then it is likely that a segmentation fault will be triggered thus enabling a potential DoS attack
NOT BUG:CVE-2015-0290
NOT BUG:Configure: fold related configurations more aggressively and clean-up
NOT BUG:Correct the request of debug builds
NOT BUG:./config would translate -d into having the target get a 'debug-' prefix and then run './Configure LIST' to find out if such a debugging target exists or not
NOT BUG:With the recent changes the separate 'debug-foo' targets are disappearing and we're giving the normal targets debugging capabilities instead Unfortunately './config' wasn't changed to match this new behavior
NOT BUG:This change introduces the arguments '--debug' and '--release' - the latter just for orthogonality - to ./Configure and ./config now treats -d by adding '--debug' to the options for ./Configure
NOT BUG:Dead code removal from apps
NOT BUG:Some miscellaneous removal of dead code from apps Also fix an issue with error handling with pkcs7
NOT BUG:Remove dead code from crypto
NOT BUG:Some miscellaneous removal of dead code from lib crypto
NOT BUG:Fix probable_prime over large shift
NOT BUG:In the probable_prime() function we behave slightly different if the number of bits we are interested in is <= BN_BITS2 (the num of bits in a BN_ULONG) As part of the calculation we work out a size_limit as follows:
NOT BUG:size_limit = (((BN_ULONG)1) << bits) - BN_get_word(rnd) - 1;
NOT BUG:There is a problem though if bits == BN_BITS2 Shifting by that much causes undefined behaviour I did some tests On my system BN_BITS2 == 64 So I set bits to 64 and calculated the result of:
NOT BUG:(((BN_ULONG)1) << bits)
NOT BUG:I was expecting to get the result 0 I actually got 1! Strangely this..
BUG:(((BN_ULONG)0) << BN_BITS2)
NOT BUG:...does equal 0! This means that on my system at least size_limit will be off by 1 when bits == BN_BITS2
NOT BUG:This commit fixes the behaviour so that we always get consistent results
NOT BUG:Fix unintended sign extension
NOT BUG:The function CRYPTO_128_unwrap_pad uses an 8 byte AIV (Alternative Initial Value) The least significant 4 bytes of this is placed into the local variable |ptext_len| This is done as follows:
BUG:ptext_len = (aiv[4] << 24) | (aiv[5] << 16) | (aiv[6] << 8) | aiv[7];
NOT BUG:aiv[4] is an unsigned char but (aiv[4] << 24) is promoted to a *signed* int - therefore we could end up shifting into the sign bit and end up with a negative value |ptext_len| is a size_t (typically 64-bits) If the result of the shifts is negative then the upper bits of |ptext_len| will all be 1
NOT BUG:This commit fixes the issue by explicitly casting to an unsigned int
NOT BUG:Fix seg fault in s_time
NOT BUG:Passing a negative value for the "-time" option to s_time results in a seg fault This commit fixes it so that time has to be greater than 0
NOT BUG:Add sanity check to PRF
NOT BUG:The function tls1_PRF counts the number of digests in use and partitions security evenly between them There always needs to be at least one digest in use otherwise this is an internal error Add a sanity check for this
NOT BUG:Fix memset call in stack.c
NOT BUG:The function sk_zero is supposed to zero the elements held within a stack It uses memset to do this However it calculates the size of each element as being sizeof(char **) instead of sizeof(char *) This probably doesn't make much practical difference in most cases but isn't a portable assumption
NOT BUG:Move malloc fail checks closer to malloc
NOT BUG:Move memory allocation failure checks closer to the site of the malloc in dgst app Only a problem if the debug flag is set...but still should be fixed
NOT BUG:Add malloc failure checks
NOT BUG:Add some missing checks for memory allocation failures in ca app
NOT BUG:Do not keep TABLE in version control
NOT BUG:TABLE was always a debugging tool and permitted everyone to see the effect of changes in the string-format configs The hash-format configs being much more readable distributing TABLE becomes much less necessary
NOT BUG:Being able to produce a TABLE is kept however as it still is a useful debugging tool for configs what with multi-level inheritance and all
NOT BUG:Configuration cleanup: personal configs
NOT BUG:Move obviously personal configurations to personal files
NOT BUG:Note: those files should really not be in the main repo at all
NOT BUG:Updated TABLE
NOT BUG:Find debug- targets that can be combined with their non-debug counterparts and do so
NOT BUG:Change all the main configurations to the new format
NOT BUG:As part of this remove some levitte examples that never were relevant
NOT BUG:Rethink templates
BUG:Because base templates express inheritance of values the attribute is renamed to 'inherit_from' and texts about this talk about 'inheritance(s)' rather than base templates
NOT BUG:As they were previously implemented base templates that were listed together would override one another the first one acting as defaults for the next and so on
NOT BUG:However it was pointed out that a strength of inheritance would be to base configurations on several templates - for example one for CPU one for operating system and one for compiler - and that requires a different way of combining those templates With this change inherited values from several inheritances are concatenated by default (keep on reading)
NOT BUG:Also in-string templates with the double-curly syntax are removed replaced with the possibility to have a configuration value be a coderef (i.e a 'sub { /* your code goes here */ }') that gets the list of values from all inheritances as the list @_ The result of executing such a coderef on a list of values is assumed to become a string ANY OTHER FORM OF VALUE WILL CURRENTLY BREAK
BUG:As a matter of fact an attribute in the current config with no value is assumed to have this coderef as value:
NOT BUG:sub { join(' ' @_) }
NOT BUG:While we're at it rename debug-[cl]flags to debug_[cl]flags and nodebug-[cl]flags to release_[cl]flags
NOT BUG:Provide a few examples by converting my own strings to hash table configurations
NOT BUG:Add base template processing
NOT BUG:Base templates are templates that are used to inherit from They can loosely be compared with parent class inheritance in object orientation They can be used for the same purpose as the variables with multi-field strings are used in old-style string configurations
NOT BUG:Base templates are declared with the base_templates configuration attribute like so:
BUG:"example_target" => { base_templates => [ "x86_asm" .. ] .. }
NOT BUG:Note: The value of base_templates MUST be an array reference (an array enclosed in square brackets)
NOT BUG:Any configuration target can be used as a base template by another It is also possible to have a target that's a pure template and not meant to be used directly as a configuration target Such a target is marked with the template configuration attribute like so:
NOT BUG:"example_template" => { template => 1 cc => "mycc" .. }
NOT BUG:As part of this commit all variables with multi-field strings have been translated to pure templates The variables currently remain since we can't expect people to shift to hash table configurations immediately
NOT BUG:Add template reference processing
NOT BUG:Template references are words with double brackets and refer to the same field in the target pointed at the the double bracketed word
NOT BUG:For example if a target's configuration has the following entry:
NOT BUG:'cflags' => '-DFOO {{x86_debug}}'
NOT BUG:.. then {{x86_debug}} will be replaced with the 'cflags' value from target 'x86_debug'
NOT BUG:Note: template references are resolved recursively and circular references are not allowed
NOT BUG:Rewrite Configure to handle the target values as hash tables
NOT BUG:The reasoning is that configuration strings are hard to read and error prone and that a better way would be for them to be key => value hashes
NOT BUG:Configure is made to be able to handle target configuration values as a string as well as a hash It also does the best it can to combine a "debug-foo" target with a "foo" target given that they are similar except for the cflags and lflags values The latter are spliced into options that are common for "debug-foo" and "foo" options that exist only with "debug-foo" and options that exist only with "foo" and make them into combinable attributes that holds common cflags extra cflags for debuggin and extra cflags for non-debugging configurations
NOT BUG:The next step is to make it possible to have template configurations
NOT BUG:Make X509_ATTRIBUTE opaque
NOT BUG:Fix regression in ASN1_UTCTIME_cmp_time_t
NOT BUG:Previously ASN1_UTCTIME_cmp_time_t would return 1 if s > t -1 if s < t and 0 if s == t
NOT BUG:This behavior was broken in a refactor [0] resulting in the opposite time comparison behavior
BUG:[0]: 904348a4922333106b613754136305db229475ea
NOT BUG:PR#3706
NOT BUG:OPENSSL_NO_EC* merge; missed one file
NOT BUG:Missed one file in the #ifdef merge; thanks Kurt
NOT BUG:Update ordinals fix error message
NOT BUG:Update error messages to say "EC is disabled" these can then be picked up by mkdef.pl
NOT BUG:Update ordinals
NOT BUG:Remove ssl_cert_inst()
NOT BUG:It created the cert structure in SSL_CTX or SSL if it was NULL but they can never be NULL as the comments already said
NOT BUG:Avoid reading an unused byte after the buffer
NOT BUG:Other curves don't have this problem
NOT BUG:Fix undefined behaviour in shifts
BUG:Td4 and Te4 are arrays of u8 A u8 << int promotes the u8 to an int first then shifts If the mathematical result of a shift (as modelled by lhs * 2^{rhs}) is not representable in an integer behaviour is undefined In other words you can't shift into the sign bit of a signed integer Fix this by casting to u32 whenever we're shifting left by 24
BUG:(For consistency cast other shifts too.)
NOT BUG:Caught by -fsanitize=shift
NOT BUG:Submitted by Nick Lewycky (Google)
NOT BUG:Allocate string types directly
NOT BUG:Allocate and free ASN.1 string types directly instead of going through the ASN.1 item code
NOT BUG:Fix key wrapping mode with padding to conform to RFC 5649
BUG:According to RFC 5649 section 4.1 step 1) we should not add padding if plaintext length is multiply of 8 ockets
NOT BUG:This matches pseudo-code in http://dx.doi.org/10.6028/NIST.SP.800-38F on page 15 section 6.3 KWP algorithm 5 KWP-AE step 2
NOT BUG:PR#3675
NOT BUG:Remove obsolete declarations
NOT BUG:Remove DECLARE_ASN1_SET_OF and DECLARE_PKCS12_STACK_OF these haven't been used internally in OpenSSL for some time
NOT BUG:Update mkstack.pl to match safestack.h
NOT BUG:ASN.1 print fix
NOT BUG:When printing out an ASN.1 structure if the type is an item template don't fall thru and attempt to interpret as a primitive type
NOT BUG:additional configuration documentation
NOT BUG:Fix RSA_X931_derive_ex
NOT BUG:In the RSA_X931_derive_ex a call to BN_CTX_new is made This can return NULL on error However the return value is not tested until *after* it is derefed! Also at the top of the function a test is made to ensure that |rsa| is not NULL If it is we go to the "err" label Unfortunately the error handling code deref's rsa
NOT BUG:SSL_check_chain fix
NOT BUG:If SSL_check_chain is called with a NULL X509 object or a NULL EVP_PKEY or the type of the public key is unrecognised then the local variable |cpk| in tls1_check_chain does not get initialised Subsequently an attempt is made to deref it (after the "end" label) and a seg fault will result
NOT BUG:Fix missing return checks in v3_cpols.c
NOT BUG:Fixed assorted missing return value checks in c3_cpols.c
NOT BUG:Fix dsa_pub_encode
NOT BUG:The return value from ASN1_STRING_new() was not being checked which could lead to a NULL deref in the event of a malloc failure Also fixed a mem leak in the error path
NOT BUG:Fix dh_pub_encode
NOT BUG:The return value from ASN1_STRING_new() was not being checked which could lead to a NULL deref in the event of a malloc failure Also fixed a mem leak in the error path
NOT BUG:Fix asn1_item_print_ctx
NOT BUG:The call to asn1_do_adb can return NULL on error so we should check the return value before attempting to use it
NOT BUG:ASN1_primitive_new NULL param handling
NOT BUG:ASN1_primitive_new takes an ASN1_ITEM * param |it| There are a couple of conditional code paths that check whether |it| is NULL or not - but later |it| is deref'd unconditionally If |it| was ever really NULL then this would seg fault In practice ASN1_primitive_new is marked as an internal function in the public header file The only places it is ever used internally always pass a non NULL parameter for |it| Therefore change the code to sanity check that |it| is not NULL and remove the conditional checking
NOT BUG:Fix EVP_DigestInit_ex with NULL digest
NOT BUG:Calling EVP_DigestInit_ex which has already had the digest set up for it should be possible You are supposed to be able to pass NULL for the type However currently this seg faults
NOT BUG:Fix error handling in bn_exp
NOT BUG:In the event of an error |rr| could be NULL Therefore don't assume you can use |rr| in the error handling code
NOT BUG:ssl/s3_clnt.c: fix intermittent failures
NOT BUG:[and respect error return value in ssltest.c]
NOT BUG:Merge OPENSSL_NO_EC{DH,DSA} into OPENSSL_NO_EC
BUG:Suggested by John Foley <foleyj@cisco.com>
NOT BUG:Fix seg fault in ASN1_generate_v3/ASN1_generate_nconf
NOT BUG:Move Configurations* out of the way and rename them
NOT BUG:Configure would load the glob "Configurations*" The problem with this is that it also loads all kinds of backups of those configurations that some editors do like emacs' classic 'Configurations~' The solution is to give them an extension such as '.conf' and make sure to end the glob with that
NOT BUG:Also because 'Configurations.conf' makes for a silly name and because a possibly large number of configurations will become clutter move them to a subdirectory 'Configurations/' and rename them to something more expressive as well as something that sets up some form of sorting order Thus:
NOT BUG:Configurations -> Configurations/10-main.conf Configurations.team -> Configurations/90-team.conf
NOT BUG:Finally make sure that Configure sorts the list of files that 'glob' produces and adapt Makefile.org
NOT BUG:Cleanse buffers
NOT BUG:Cleanse various intermediate buffers used by the PRF
NOT BUG:Harmonize return values in dtls1_buffer_record
NOT BUG:Ensure all malloc failures return -1
NOT BUG:Reported by Adam Langley (Google)
NOT BUG:BIO_debug_callback: Fix output on 64-bit machines
BUG:BIO_debug_callback() no longer assumes the hexadecimal representation of a pointer fits in 8 characters
NOT BUG:Signed-off-by: Richard Levitte <levitte@openssl.org>
NOT BUG:Prevent handshake with unseeded PRNG
NOT BUG:Fix security issue where under certain conditions a client can complete a handshake with an unseeded PRNG The conditions are: - Client is on a platform where the PRNG has not been seeded and the user has not seeded manually - A protocol specific client method version has been used (i.e not SSL_client_methodv23) - A ciphersuite is used that does not require additional random data from the PRNG beyond the initial ClientHello client random (e.g PSK-RC4-SHA)
NOT BUG:If the handshake succeeds then the client random that has been used will have been generated from a PRNG with insufficient entropy and therefore the output may be predictable
NOT BUG:For example using the following command with an unseeded openssl will succeed on an unpatched platform:
NOT BUG:openssl s_client -psk 1a2b3c4d -tls1_2 -cipher PSK-RC4-SHA
NOT BUG:CVE-2015-0285
NOT BUG:Fix wrong numbers being passed as string lengths
NOT BUG:Signed-off-by: Richard Levitte <levitte@openssl.org>
NOT BUG:update ordinals
NOT BUG:Wrong SSL version in DTLS1_BAD_VER ClientHello
NOT BUG:Since commit 741c9959 ("DTLS revision.") we put the wrong protocol version into our ClientHello for DTLS1_BAD_VER The old DTLS code which used ssl->version was replaced by the more generic SSL3 code which uses ssl->client_version The Cisco ASA no longer likes our ClientHello
NOT BUG:RT#3711
NOT BUG:Fix DTLS1_BAD_VER regression
NOT BUG:Commit 9cf0f187 in HEAD and 68039af3 in 1.0.2 removed a version check from dtls1_buffer_message() which was needed to distinguish between DTLS 1.x and Cisco's pre-standard version of DTLS (DTLS1_BAD_VER)
BUG:Based on an original patch by David Woodhouse <dwmw2@infradead.org> RT#3703
NOT BUG:Cleanse PKCS#8 private key components
NOT BUG:New function ASN1_STRING_clear_free which cleanses an ASN1_STRING structure before freeing it
NOT BUG:Call ASN1_STRING_clear_free on PKCS#8 private key components
NOT BUG:Additional CMS documentation
NOT BUG:ARMv4 assembly pack: add Cortex-A15 performance data
BUG:GitHub 237: Use https for IETF links
NOT BUG:Signed-off-by: Rich Salz <rsalz@openssl.org>
NOT BUG:make errors
NOT BUG:Run make errors on master
NOT BUG:Update mkerr.pl for new format
NOT BUG:Make the output from mkerr.pl consistent with the newly reformatted code
NOT BUG:update TABLE
NOT BUG:Cleanup spaces
NOT BUG:Catch up the VMS build
NOT BUG:crypto/crypto-lib.com - catch up with the OCSP changes test/maketest.com and test/tests.com - catch up with the addition of test_evp_extra
NOT BUG:Make STACK_OF opaque
NOT BUG:update ordinals
NOT BUG:Make OCSP structures opaque
NOT BUG:Use constants not numbers
NOT BUG:This patch uses warning/fatal constants instead of numbers with comments for warning/alerts in d1_pkt.c and s3_pkt.c
NOT BUG:RT#3725
NOT BUG:Unchecked malloc fixes
NOT BUG:Miscellaneous unchecked malloc fixes Also fixed some mem leaks on error paths as I spotted them along the way
NOT BUG:add RIPEMD160 whirlpool tests
NOT BUG:Add RIPEMD160 and whirlpool test data Add Count keyword to repeatedly call EVP_DigestUpate
NOT BUG:Check public key is not NULL
BUG:CVE-2015-0288 PR#3708
NOT BUG:Fix format script
NOT BUG:The format script didn't correctly recognise some ASN.1 macros and didn't reformat some files as a result Fix script and reformat affected files
NOT BUG:Cleanup some doc files
NOT BUG:ACKNOWLEDGEMENTS is now spelled correctly :) README.ASN1 talked about 0.9.6 so it's deleted I turned doc/standards.txt into a set of one-line summaries of RFCs and also updated the pointers to original sources (to be web links)
NOT BUG:Remove experimental 56bit export ciphers
NOT BUG:These ciphers are removed: TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5 TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5 TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA TLS1_CK_DHE_DSS_WITH_RC4_128_SHA They were defined in a long-expired IETF internet-draft: draft-ietf-tls-56-bit-ciphersuites-01.txt
NOT BUG:Fix d2i_SSL_SESSION for DTLS1_BAD_VER
NOT BUG:Some Cisco appliances use a pre-standard version number for DTLS We support this as DTLS1_BAD_VER within the code
NOT BUG:This change fixes d2i_SSL_SESSION for that DTLS version
BUG:Based on an original patch by David Woodhouse <dwmw2@infradead.org>
BUG:RT#3704
NOT BUG:Fixed missing return value checks
NOT BUG:Added various missing return value checks in tls1_change_cipher_state
NOT BUG:Fix missing return value checks
NOT BUG:Fixed various missing return value checks in ssl3_send_newsession_ticket Also a mem leak on error
NOT BUG:reformat evp_test.c
NOT BUG:Add OCB support and test vectors for evp_test
NOT BUG:Skip unsupported digests in evp_test
NOT BUG:add MD4 test data
NOT BUG:Skip unsupported ciphers in evp_test
NOT BUG:Make OpenSSL compile with no-rc4
NOT BUG:Add algorithm skip support
NOT BUG:Add support for skipping disabled algorithms: if an attempt to load a public or private key results in an unknown algorithm error then any test using that key is automatically skipped
NOT BUG:Fix evp_extra_test.c with no-ec When OpenSSL is configured with no-ec then the new evp_extra_test fails to pass This change adds appropriate OPENSSL_NO_EC guards around the code
NOT BUG:Remove NETSCAPE_HANG_BUG NETSCAPE_HANG_BUG is a workaround for a browser bug from many years ago (2000) It predates DTLS so certainly has no place in d1_srvr.c In s3_srvr.c it forces the ServerDone to appear in the same record as the CertificateRequest when doing client auth
NOT BUG:BoringSSL have already made the same commit: 79ae85e4f777f94d91b7be19e8a62016cb55b3c5
NOT BUG:Removed support for SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG Also removed the "-hack" option from s_server that set this option
NOT BUG:Update the SHA* documentation Updates to include SHA224 SHA256 SHA384 and SHA512 In particular note the restriction on setting md to NULL with regards to thread safety
NOT BUG:Fix NAME section of d2i_ECPKParameters to prevent broken symlinks when using the extract-names.pl script
BUG:RT#3718
NOT BUG:Fix some minor documentation issues
NOT BUG:Remove pointless free and use preferred way of calling d2i_* functions
BUG:Add dire warnings about the "reuse" capability of the d2i_* functions
NOT BUG:Provide documentation for i2d_ECPrivateKey and d2i_ECPrivateKey
NOT BUG:Fix a failure to NULL a pointer freed on error
BUG:Inspired by BoringSSL commit 517073cd4b by Eric Roman <eroman@chromium.org>
BUG:CVE-2015-0209
NOT BUG:Import evp_test.c from BoringSSL Unfortunately we already have a file called evp_test.c so I have called this one evp_extra_test.c
NOT BUG:Add documentation for the -no_alt_chains option for various apps as well as the X509_V_FLAG_NO_ALT_CHAINS flag
NOT BUG:Add -no_alt_chains option to apps to implement the new X509_V_FLAG_NO_ALT_CHAINS flag Using this option means that when building certificate chains the first chain found will be the one used Without this flag if the first chain found is not trusted then we will keep looking to see if we can build an alternative chain instead
NOT BUG:Add flag to inhibit checking for alternate certificate chains Setting this behaviour will force behaviour as per previous versions of OpenSSL
NOT BUG:In certain situations the server provided certificate chain may no longer be valid However the issuer of the leaf or some intermediate cert is in fact in the trust store
NOT BUG:When building a trust chain if the first attempt fails then try to see if alternate chains could be constructed that are trusted
BUG:RT3637 RT3621
NOT BUG:Remove CVS filtering from find targets
NOT BUG:Move build config table to separate files
NOT BUG:Move the build configuration table into separate files The Configurations file is standard configs and Configurations.team is for openssl-team members Any other file Configurations* found in the same directory as the Configure script is loaded
NOT BUG:To add another file use --config=FILE flags (which should probably be an absolute path)
NOT BUG:Written by Stefen Eissing <stefan.eissing@greenbytes.de> and Rich Salz <rsalz@openssl.org> contributed by Akamai Technologies
NOT BUG:Document -no_explicit
NOT BUG:Fix crash in SPARC T4 XTS
NOT BUG:aes/asm/bsaes-armv7: fix kernel-side XTS and harmonize with Linux
BUG:XTS bug spotted and fix suggested by Adrian Kotelba
NOT BUG:Don't set no_protocol if -tls1 selected
NOT BUG:perlasm/x86masm.pl: make it work
NOT BUG:Though this doesn't mean that masm becomes supported the script is still provided on don't-ask-in-case-of-doubt-use-nasm basis See RT#3650 for background
NOT BUG:sha/asm/sha1-586.pl: fix typo
NOT BUG:The typo doesn't affect supported configuration only unsupported masm
NOT BUG:evp/evp_test.c: avoid crashes when referencing uninitialized pointers
NOT BUG:For some reason failure surfaced on ARM platforms
NOT BUG:typo
NOT BUG:Fix null-pointer dereference
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:Fix memory leak
NOT BUG:Avoid a double-free in an error path
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:Restore -DTERMIO/-DTERMIOS on Windows platforms
BUG:The previous defaulting to TERMIOS took away -DTERMIOS / -DTERMIO a bit too enthusiastically Windows/DOSish platforms of all sorts get identified as OPENSSL_SYS_MSDOS and they get a different treatment altogether UNLESS -DTERMIO or -DTERMIOS is explicitely given with the configuration The answer is to restore those macro definitions for the affected configuration targets
BUG:Assume TERMIOS is default remove TERMIO on all Linux
BUG:The rationale for this move is that TERMIOS is default supported by POSIX-1.2001 and most definitely on Linux For a few other systems TERMIO may still be the termnial interface of preference so we keep -DTERMIO on those in Configure
NOT BUG:crypto/ui/ui_openssl.c is simplified in this regard and will define TERMIOS for all systems except a select few exceptions
NOT BUG:Add additional EC documentation
NOT BUG:Use named curve parameter encoding by default
NOT BUG:Many applications require named curve parameter encoding instead of explicit parameter encoding (including the TLS library in OpenSSL itself) Set this encoding by default instead of requiring an explicit call to set it
NOT BUG:Add OPENSSL_EC_EXPLICT_CURVE define
NOT BUG:More RSA tests
NOT BUG:remove unused method declaration
NOT BUG:size_t for buffer functions
NOT BUG:Change BUF_MEM_grow and BUF_MEM_grow_clean to return size_t
NOT BUG:Add leak detection fix leaks
NOT BUG:Add EVP_PKEY test data
NOT BUG:Add some EVP_PKEY test data for sign and verify tests including failure cases
NOT BUG:EVP_PKEY support for evp_test
NOT BUG:Add two new keywords "PublicKey" and "PrivateKey" These will load a key in PEM format from the lines immediately following the keyword and assign it a name according to the value These will be used later for public and private key testing operations
NOT BUG:Add tests for Sign Verify VerifyRecover and Decrypt
NOT BUG:Add CMAC test data
NOT BUG:Add HMAC test data
NOT BUG:MAC support for evp_test
NOT BUG:New macro to set mac key
NOT BUG:Return error code is any tests fail
NOT BUG:Transfer a fix from 1.0.1
NOT BUG:manually picked from e7b85bc40200961984925604ca444517359a6067
NOT BUG:RT937: Enable pilotAttributeType uniqueIdentifier
NOT BUG:evp/evp.h: add missing camellia-ctr declarations
NOT BUG:RT3670: Check return from BUF_MEM_grow_clean
BUG:RT3684: rand_egd needs stddef.h
BUG:And remove backup definition of offsetof
NOT BUG:Missing OPENSSL_free on error path
NOT BUG:Engage ecp_nistz256-armv4 module
NOT BUG:Add ec/asm/ecp_nistz256-armv4.pl module
NOT BUG:Add Camellia CTR mode
NOT BUG:Add more Camellia OIDs
NOT BUG:Add SSL_SESSION_get0_ticket API function
NOT BUG:Correct reading back of tlsext_tick_lifetime_hint from ASN1
NOT BUG:When writing out the hint if the hint > 0 then we write it out otherwise we skip it
NOT BUG:Previously when reading the hint back in if were expecting to see one (because the ticket length > 0) but it wasn't present then we set the hint to -1 otherwise we set it to 0 This fails to set the hint to the same as when it was written out
NOT BUG:The hint should never be negative because the RFC states the hint is unsigned It is valid for a server to set the hint to 0 (this means the lifetime is unspecified according to the RFC) If the server set it to 0 it should still be 0 when we read it back in
NOT BUG:Provide the API functions SSL_SESSION_has_ticket and SSL_SESSION_get_ticket_lifetime_hint The latter has been reported as required to fix Qt for OpenSSL 1.1.0 I have also added the former in order to determine whether a ticket is present or not - otherwise it is difficult to know whether a zero lifetime hint is because the server set it to 0 or because there is no ticket
NOT BUG:Make tlsext_tick_lifetime_hint an unsigned long (from signed long)
NOT BUG:From RFC4507: "The ticket_lifetime_hint field contains a hint from the server about how long the ticket should be stored The value indicates the lifetime in seconds as a 32-bit unsigned integer in network byte order."
NOT BUG:ec/ecp_nistz256.c: fix compiler warnings
NOT BUG:Configure: disable warning C4090 in Windows builds
NOT BUG:ec/asm/ecp_nistz256-x86.pl: fix typos (error shows in Windows build)
NOT BUG:New evp_test updates
NOT BUG:Print usage message
NOT BUG:Print expected and got values if mismatch
NOT BUG:Add new test file
NOT BUG:Initial version of new evp_test program
NOT BUG:Fix hostname validation in the command-line tool to honour negative return values
NOT BUG:Specifically an ASN.1 NumericString in the certificate CN will fail UTF-8 conversion and result in a negative return value which the "x509 -checkhost" command-line option incorrectly interpreted as success
NOT BUG:Also update X509_check_host docs to reflect reality
NOT BUG:Thanks to Sean Burford (Google) for reporting this issue
NOT BUG:Remove some functions that are no longer used and break the build with: ./config --strict-warnings enable-deprecated
NOT BUG:HMAC_cleanup and HMAC_Init are stated as deprecated in the docs and source Mark them as such with OPENSSL_USE_DEPRECATED
NOT BUG:Remove -DOPENSSL_NO_DEPRECATED from --strict-warnings flags
NOT BUG:In master OPENSSL_NO_DEPRECATED is the default anyway By including it in --strict-warnings as well this means you cannot combine enable-deprecated with --strict-warnings
NOT BUG:Engage ecp_nistz256-x86 module
NOT BUG:Add ec/asm/ecp_nistz256-x86.pl module
NOT BUG:Support for alternative KDFs
NOT BUG:Don't hard code NID_id_pbkdf2 in PBES2: look it up in PBE table
NOT BUG:Bring objects.pl output even closer to new format
NOT BUG:bn/bn_add.c: fix dead code elimination that went bad
NOT BUG:Fix memory leak reporting
NOT BUG:Free up bio_err after memory leak data has been printed to it
NOT BUG:In int_free_ex_data if ex_data is NULL there is nothing to free up so return immediately and don't reallocate it
NOT BUG:Remove obsolete IMPLEMENT_ASN1_SET_OF
NOT BUG:evp/e_aes.c: fix pair of SPARC T4-specific problems:
BUG:- SIGSEGV/ILL in CCM (RT#3688); - SIGBUS in OCB;
NOT BUG:Remove stray "=back" This was causing newer versions of pod2man to choke
NOT BUG:Harmonize objects.pl output with new format
NOT BUG:des/asm/des_enc.m4: fix brown-bag typo in last commit
NOT BUG:Final (for me for now) dead code cleanup
NOT BUG:This is a final pass looking for '#if 0'/'#if 1' controls and removing the appropriate pieces
NOT BUG:Apache Traffic Server has a need to set the rbio without touching the wbio There is no mechanism to do that at the moment - SSL_set_bio makes changes to the wbio even if you pass in SSL_get_wbio()
NOT BUG:This commit introduces two new API functions SSL_set_rbio() and SSL_set_wbio() These do the same job as SSL_set_bio() except they enable you to manage the rbio and wbio individually
NOT BUG:ui_compat cleanup; makefiles and vms
NOT BUG:Remove ui_compat.h from Makefile dependencies And from two VMS build/install scripts
NOT BUG:Remove ui_compat
NOT BUG:This is the last of the old DES API
NOT BUG:Remove X509_PAIR
NOT BUG:Unused type; a pair X509 certificates Intended for LDAP support
NOT BUG:Live code cleanup: remove #if 1 stuff
NOT BUG:For code bracketed by "#if 1" then remove the alternate "#else . #endif" lines
NOT BUG:dead code cleanup: #if 0 in ssl
NOT BUG:I left many "#if 0" lines usually because I thought we would probably want to revisit them later or because they provided some useful internal documentation tips
NOT BUG:util/mkstack.pl now generates entire safestack.h
NOT BUG:The mkstack.pl script now generates the entire safestack.h file It generates output that follows the coding style Also removed all instances of the obsolete IMPLEMENT_STACK_OF macro
NOT BUG:Have mkdef.pl ignore APPLINK settings
NOT BUG:Remove OPENSSL_NO_HMAC
NOT BUG:Disabling HMAC doesn't work If it did it would end up disabling a lot of OpenSSL functionality (it is required for all versions of TLS for example)
NOT BUG:Remove support for SSL_OP_NETSCAPE_CA_DN_BUG
NOT BUG:This is an ancient bug workaround for Netscape clients The documentation talks about versions 3.x and 4.x beta
NOT BUG:Fix error handling in ssltest
NOT BUG:Use memset in bn_mont
NOT BUG:Use memset() not inline code Compilers are smarter now
NOT BUG:Live code cleanup; #if 1 removal
NOT BUG:A few minor cleanups to remove pre-processor "#if 1" stuff
NOT BUG:Fixed bad formatting in crypto/des/spr.h
NOT BUG:Fix various build breaks
NOT BUG:TABLE wasn't updated from a previous Configure change Missed an RMD160/RIPE/RIPEMD unification in mkdef.pl Makefile install_sw referenced file doc/openssl-shared.txt (RT3686) Needed to run 'make update' because - Various old code has been removed - Varous old #ifdef tests were removed
NOT BUG:fix windows build
NOT BUG:Updates to reformat script
NOT BUG:Don't change files if they're unmodified
NOT BUG:Indicate which files have changed and a summary
NOT BUG:More unused FIPS module code
NOT BUG:Remove fips_algvs.c
NOT BUG:Remove unused fips module build code from Configure and Makefile.org
NOT BUG:Make objxref.pl output in correct format
NOT BUG:Preliminary ASN1_TIME documentation
NOT BUG:Remove unused variables
NOT BUG:Dead code: crypto/dh,modes,pkcs12,ripemd,rsa,srp
NOT BUG:And an uncompiled C++ test file Also remove srp_lcl.h with help from Richard
NOT BUG:Add SSL_get_extms_support documentation
NOT BUG:Document SSL_get_extms_support()
NOT BUG:Modify behaviour of SSL_get_extms_support() so it returns -1 if the master secret support of the peer is not known (e.g handshake in progress)
NOT BUG:Add CHANGES entry
NOT BUG:Ctrl to retrieve extms support
NOT BUG:Add extms support to master key generation
NOT BUG:Update master secret calculation to support extended master secret TLS 1.2 client authentication adds a complication because we need to cache the handshake messages This is simpllified however because the point at which the handshake hashes are calculated for extended master secret is identical to that required for TLS 1.2 client authentication (immediately after client key exchange which is also immediately before certificate verify)
NOT BUG:Extended master secret extension support
NOT BUG:Add and retrieve extended master secret extension setting the flag SSL_SESS_FLAG_EXTMS appropriately
NOT BUG:Note: this just sets the flag and doesn't include the changes to master secret generation
NOT BUG:Rewrite ssl3_send_client_key_exchange to support extms
NOT BUG:Rewrite ssl3_send_client_key_exchange to retain the premaster secret instead of using it immediately
NOT BUG:This is needed because the premaster secret is used after the client key exchange message has been sent to compute the extended master secret
NOT BUG:Utility function to retrieve handshake hashes
NOT BUG:Retrieve handshake hashes in a separate function This tidies the existing code and will be used for extended master secret generation
NOT BUG:Add flags field to SSL_SESSION
NOT BUG:Add a "flags" field to SSL_SESSION This will contain various flags such as encrypt-then-mac and extended master secret support
NOT BUG:Check PKCS#8 pkey field is valid before cleansing
BUG:PR:3683
NOT BUG:old_des fix windows build remove docs
NOT BUG:Remove outdated doc files Fix windows build after old_des was removed
NOT BUG:Remove old DES API
BUG:Includes VMS fixes from Richard Includes Kurt's destest fixes (RT 1290) Closes tickets 1290 and 1291
NOT BUG:Dead code: if 0 removal from crypto/evp and an unused file
NOT BUG:Dead code removal; #if 0 from crypto/des
NOT BUG:Dead code cleanup: crypto/ec,ecdh,ecdsa
NOT BUG:Dead code cleanup; remove #if 0 from crypto/engine
NOT BUG:Dead code cleanup: #if 0 dropped from tests
NOT BUG:Dead code cleanup: crypto/*.c x509v3 demos
NOT BUG:Some of the #if 0 code in demo's was kept but given helpful #ifdef names to show more sample code
NOT BUG:cms-test.pl: "localize" /dev/null even further [as follow-up to VMS]
NOT BUG:Make the libssl opaque changes compile on VMS
NOT BUG:Add changes entry for opaquifying of libssl structures
NOT BUG:Remove OPENSSL_NO_SSL_INTERN as it is now redundant - all internals previously protected by this have been moved into non-public headers
NOT BUG:Make libssl opaque Move all structures that were previously protected by OPENSSL_NO_SSL_INTERN into internal header files
NOT BUG:Build correctly for me on FreeBSD 10
NOT BUG:Don't debug
NOT BUG:Dead code removal: #if 0 asn1 pkcs7
NOT BUG:Keep one #if 0 but rename the symbol to be more descriptive of what it's doing (you can disable support for old broken Netscape software)
NOT BUG:Dead code clean: #if 0 removal in apps
NOT BUG:Dead code removal #if 0 engines
NOT BUG:Dead code removal: #if 0 conf dso pqueue threads
NOT BUG:Mostly but not completely debugging print statements Some old logic kept for internal documentation reasons perhaps
NOT BUG:modes/gcm128.c: harmonize ctx->ghash assignment shortcut *_ctr32 in OPENSSL_SMALL_FOOTPRINT build remove undesired reformat artefact and inconsistency in pre-processor logic
NOT BUG:modes/gcm128.c: fix OPENSSL_SMALL_FOOTPRINT compile failure on affected platforms (PowerPC and AArch64)
NOT BUG:For reference minimalistic #ifdef GHASH is sufficient because it's never defined with OPENSSL_SMALL_FOOTPRINT and ctx->ghash is never referred
NOT BUG:Since SHA0 was completely removed also remove the related test
NOT BUG:Update on the use of logical names for OpenSSL configuration
NOT BUG:VMS exit codes weren't handled well enough and were unclear
NOT BUG:Making a specific variable $failure_code and a bit of commenting in the VMS section should help clear things up
NOT BUG:VMS adjustments:
NOT BUG:Add missing crypto modules and files to copy to crypto/install-crypto.com
NOT BUG:VMS adjustments:
NOT BUG:test/cms-test.pl adjusted to handle NL: instead of /dev/null on VMS
NOT BUG:VMS build changes
NOT BUG:crypto/crypto-lib.com: Remove all APPS building as they are gone Depend on the variable SDIRS that's defined by makevms.com Remake the whole partial module list mechanism to check for variables with a counter Define the logical name INTERNAL to allow for '#include "internal/foo.h"'
NOT BUG:makevms.com: Define SDIRS to allow for removal of crypto modules and pass that information to crypto/crypto-lib.com Allow for experimental modules Update the allowed things to disable Update the things disabled by default to match Configure Update headers to be copied
NOT BUG:VMS adjustments:
NOT BUG:catch up with the Unix build A number of new tests among others test/tocsp.com Define INTERNAL in ssl/ssl-lib.com to allow for '#include "internal/foo.h"'
NOT BUG:VMS adjustments:
NOT BUG:Add new symbols that are longer than 31 chars to symhacks VMS doesn't have <sys/un.h> reflect that in e_os.h MS_CALLBACK has been removed ssl_task.c needs adjustment
NOT BUG:dso_vms needs to add the .EXE extension if there is none already
NOT BUG:Dead code removal: #if 0 bio comp rand
NOT BUG:The start of removing dead code A remaining #if 0 in bss_conn.c needs more thought
NOT BUG:Make output consistency: remove blank line
NOT BUG:When you use "-s" in the make flag you see that engines outputs a blank line because EDIRS isn't set This is a debug echo that isn't needed
NOT BUG:clang on Linux x86_64 complains about unreachable code
NOT BUG:Fix various windows compilation issues
NOT BUG:Fix int/unsigned compiler complaint
NOT BUG:Remove support for opaque-prf
NOT BUG:An expired IETF Internet-Draft (seven years old) that nobody implements and probably just as good as NSA DRBG work
NOT BUG:Add missing declaration for lh_node_usage_stats
NOT BUG:Rename index to idx to avoid symbol conflicts
NOT BUG:Picky compilers with old index() string functions
BUG:Finish removal of DSS
NOT BUG:Fix warning on some compilers where variable index shadows a global declaration
BUG:Fix no-ocb for Windows
NOT BUG:Rationalise testing of AEAD modes
BUG:Harmonise use of EVP_CTRL_GET_TAG/EVP_CTRL_SET_TAG/EVP_CTRL_SET_IVLEN
NOT BUG:Replace EVP_CTRL_OCB_SET_TAGLEN with EVP_CTRL_SET_TAG for consistency with CCM
BUG:Dead code removal: Fortezza identifiers
BUG:Not interested in helping the NSA in the slightest And anyway it was never implemented #if'd out
NOT BUG:"#if 0" removal: header files
NOT BUG:Remove all "#if 0" blocks from header files
NOT BUG:OPENSSL_NO_XXX cleanup: OPENSSL_NO_BUF_FREELISTS
NOT BUG:Remove OPENSSL_NO_BUF_FREELISTS This was turned on by default so the work here is removing the 'maintain our own freelist' code Also removed a minor old Windows-multibyte/widechar conversion flag
NOT BUG:OPENSSL_NO_XXX cleanup: NO_TLS NO_TLS1
NOT BUG:TLS and TLS1 are no longer optional
NOT BUG:OPENSSL_NO_xxx cleanup: SHA
NOT BUG:Remove support for SHA0 and DSS0 (they were broken) and remove the ability to attempt to build without SHA (it didn't work) For simplicity remove the option of not building various SHA algorithms; you could argue that SHA_224/256/384/512 should be kept since they're like crypto algorithms but I decided to go the other way So these options are gone: GENUINE_DSA OPENSSL_NO_SHA0 OPENSSL_NO_SHA OPENSSL_NO_SHA1 OPENSSL_NO_SHA224 OPENSSL_NO_SHA256 OPENSSL_NO_SHA384 OPENSSL_NO_SHA512
BUG:OPENSSL_NO_xxx cleanup: RFC3779
NOT BUG:Remove OPENSSL_NO_RFCF3779
NOT BUG:Also makevms.com was ignored by some of the other cleanups so I caught it up Sorry I ignored you poor little VMS..
NOT BUG:OPENSSL_NO_xxx cleanup: many removals
NOT BUG:The following compile options (#ifdef's) are removed: OPENSSL_NO_BIO OPENSSL_NO_BUFFER OPENSSL_NO_CHAIN_VERIFY OPENSSL_NO_EVP OPENSSL_NO_FIPS_ERR OPENSSL_NO_HASH_COMP OPENSSL_NO_LHASH OPENSSL_NO_OBJECT OPENSSL_NO_SPEED OPENSSL_NO_STACK OPENSSL_NO_X509 OPENSSL_NO_X509_VERIFY
NOT BUG:This diff is big because of updating the indents on preprocessor lines
NOT BUG:OPENSSL_NO_xxx cleanup: DEC-CBCM removed
NOT BUG:A DES algorithm mode known attacks no EVP support Flushed
NOT BUG:Provide documentation for all SSL(_CTX)?_(get|set)(_default)?_read_ahead functions
NOT BUG:Remove explicit setting of read_ahead for DTLS It never makes sense not to use read_ahead with DTLS because it doesn't work Therefore read_ahead needs to be the default
NOT BUG:Make DTLS always act as if read_ahead is set The actual value of read_ahead is ignored for DTLS
NOT BUG:RT#3657
BUG:Configure: addendum to OPENSSL_NO_[RMD160|RIPEMD] harmonization
NOT BUG:des/asm/des_enc.m4: strip #ifdef OPENSSL_SYS_ULTRASPARC as part of pre-processor controls cleanup It doesn't mean that it no longer works on UltraSPARC only that it doesn't utilize sparcv9-specific features like branch prediction hints and load in little-endian byte order anymore This "costs" ~3% in EDE3 performance regression on UltraSPARC
NOT BUG:Remove obsolete support for old code
NOT BUG:Make OPENSSL_config truly ignore errors
NOT BUG:Per discussion: should not exit Should not print to stderr Errors are ignored Updated doc to reflect that and the fact that this function is to be avoided
NOT BUG:undef cleanup: use memmove
NOT BUG:Remove unused eng_rsax and related asm file
NOT BUG:ifdef cleanup part 4a: '#ifdef undef'
NOT BUG:This removes all code surrounded by '#ifdef undef' One case is left: memmove() replaced by open-coded for loop in crypto/stack/stack.c That needs further review
NOT BUG:Also removed a couple of instances of /* dead code */ if I saw them while doing the main removal
NOT BUG:Fix segfault with empty fields as last in the config
NOT BUG:Replace exit() with error return
NOT BUG:Keep disclaiming 16-bit support
NOT BUG:If you examine changes you are likely to wonder "but what about ILP64 elusive as they are don't they fall victim to 16-bit rationalization?" No the case was modeled and verified to work
NOT BUG:ifdef cleanup part 3: OPENSSL_SYSNAME
NOT BUG:Rename OPENSSL_SYSNAME_xxx to OPENSSL_SYS_xxx Remove MS_STATIC; it's a relic from platforms <32 bits
NOT BUG:Add assembly support to ios64-cross Fix typos in ios64-cross config line
NOT BUG:ifdef cleanup 2 remove OPENSSL_NO_SETVBUF_IONBF
NOT BUG:Use setbuf(fp NULL) instead of setvbuf() This removes some ifdef complexity because all of our platforms support setbuf
NOT BUG:Remove obsolete uncomiled dsagen semi-test
NOT BUG:Cleanup old doc/*; remove CHANGES.SSLeay
NOT BUG:Removed CHANGES.SSLeay
BUG:Udpate README to be current
NOT BUG:Updated fignerprints.txt to list only current release signers and to explain that is what it's used for
NOT BUG:Removed the following: c-indentation.el -- doesn't go with our coding style openssl-shared.txt -- old info about shared library aides openssl.txt -- old info about X509v3 extension support/syntax ssleay.txt -- old info about OpenSSL's predecessor back when programmers coded on COBOL sheets by candlelight
NOT BUG:Fix post-reformat errors preventing windows compilation
NOT BUG:Fix formatting error in pem.h
NOT BUG:Use inner algorithm when printing certificate
NOT BUG:Drop redundant and outdated __CYGWIN32__ tests Change OPENSSL_SYSNAME_CYGWIN32 to OPENSSL_SYSNAME_CYGWIN Drop outdated Cygwin targets
NOT BUG:RT#3605 Signed-off-by: Corinna Vinschen <vinschen@redhat.com>
NOT BUG:Fix macosx-ppc build (and typos in unwind info)
NOT BUG:sha256-armv4.pl: fix typo
NOT BUG:More comment realignment
NOT BUG:Re-align some comments after running the reformat script This should be a one off operation (subsequent invokation of the script should not move them)
NOT BUG:Rerun util/openssl-format-source -v -c 
NOT BUG:Run util/openssl-format-source -v -c 
NOT BUG:More tweaks for comments due indent issues
NOT BUG:Conflicts: ssl/ssl_ciph.c ssl/ssl_locl.h
NOT BUG:Conflicts: ssl/s2_srvr.c ssl/ssl.h
NOT BUG:Tweaks for comments due to indent's inability to handle them
NOT BUG:Conflicts: demos/tunala/tunala.h engines/e_padlock.c ssl/s2_clnt.c ssl/s2_lib.c ssl/s2_srvr.c ssl/s3_srvr.c
NOT BUG:Move more comments that confuse indent
NOT BUG:Delete trailing whitespace from output
NOT BUG:Add -d debug option to save preprocessed files
BUG:Test option -nc
NOT BUG:Add option -nc which sets COMMENTS=true but disables all indent comment reformatting options
NOT BUG:ec/ecp_nistz256.c: further harmonization with latest rules
NOT BUG:Add ecp_nistz256.c to list of files skipped by openssl-format-source
NOT BUG:Manually reformat aes_x86core.c and add it to the list of files skipped by openssl-format-source
NOT BUG:crypto/ofb128.c: make it indent-friendly
NOT BUG:modes/ctr128.c: make it indent-friendly
NOT BUG:modes/cfb128.c: make it indent-friendly
NOT BUG:ec/ecp_nistz256.c: harmonize with latest indent script
NOT BUG:Fix indent comment corruption issue
NOT BUG:Amend openssl-format-source so that it give more repeatable output
NOT BUG:bn/bn_const.c: make it indent-friendly
NOT BUG:bn/asm/x86_64-gcc.cL make it indent-friendly
NOT BUG:bn/bn_asm.c: make it indent-friendly
NOT BUG:bn/bn_exp.c: make it indent-friendly
NOT BUG:Manually reformat aes_core.c Add aes_core.c to the list of files not processed by openssl-format-source
NOT BUG:Add obj_dat.h to the list of files that will not be processed by openssl-format-source
NOT BUG:Fix strange formatting by indent
NOT BUG:modes/modes_lcl.h: make it indent-friendly
NOT BUG:indent has problems with comments that are on the right hand side of a line Sometimes it fails to format them very well and sometimes it corrupts them! This commit moves some particularly problematic ones
NOT BUG:modes/gcm128.c: make it indent-friendly
NOT BUG:modes/cts128.c: make it indent-friendly
NOT BUG:crypto/mem_dbg.c: make it indent-friendly
NOT BUG:More indent fixes for STACK_OF
NOT BUG:Fix indent issue with functions using STACK_OF
NOT BUG:Fix indent issue with engine.h
NOT BUG:Fix logic to check for indent.pro
NOT BUG:crypto/cryptlib.c: make it indent-friendly
NOT BUG:bn/bntest.c: make it indent-friendly
NOT BUG:bn/bn_recp.c: make it indent-friendly
NOT BUG:engines/e_ubsec.c: make it indent-friendly
NOT BUG:apps/srp.c: make it indent-friendly
NOT BUG:apps/speed.c: make it indent-friendly
NOT BUG:bn/rsaz_exp.c: make it indent-friendly
NOT BUG:Fix make errors
NOT BUG:Make the script a little more location agnostic
BUG:Provide script for filtering data initialisers for structs/unions indent just can't handle it
NOT BUG:Script fixes
NOT BUG:Don't use double newline for headers Don't interpret ASN1_PCTX as start of an ASN.1 module
NOT BUG:Run expand before perl to make sure things are properly aligned
NOT BUG:Force the use of our indent profile
NOT BUG:Provide source reformating script Requires GNU indent to be available
NOT BUG:Script written by Tim Hudson with amendments by Steve Henson Rich Salz and Matt Caswell
NOT BUG:Fix source where indent will not be able to cope
NOT BUG:Yet more comments
NOT BUG:Conflicts: crypto/dsa/dsa_asn1.c crypto/pem/pem_all.c fips/dh/dh_gen.c fips/dh/fips_dh_check.c fips/dh/fips_dh_gen.c ssl/ssl_ciph.c
NOT BUG:Conflicts: ssl/d1_clnt.c
NOT BUG:Conflicts: ssl/s2_pkt.c
NOT BUG:More comments
NOT BUG:Conflicts: crypto/dsa/dsa_vrf.c crypto/ec/ec2_smpl.c crypto/ec/ecp_smpl.c
NOT BUG:Conflicts: demos/bio/saccept.c ssl/d1_clnt.c
NOT BUG:Conflicts: bugs/dggccbug.c demos/tunala/cb.c
NOT BUG:Further comment changes for reformat (master)
NOT BUG:Cleanup OPENSSL_NO_xxx part 1
NOT BUG:OPENSSL_NO_RIPEMD160 OPENSSL_NO_RIPEMD merged into OPENSSL_NO_RMD160 OPENSSL_NO_FP_API merged into OPENSSL_NO_STDIO Two typo's on #endif comments fixed: OPENSSL_NO_ECB fixed to OPENSSL_NO_OCB OPENSSL_NO_HW_SureWare fixed to OPENSSL_NO_HW_SUREWARE
NOT BUG:Add Broadwell performance results
NOT BUG:Remove use of BN_init BN_RECP_CTX_init from bntest
NOT BUG:BN_init and BN_RECP_CTX_init are deprecated and are not exported from shared libraries on some platforms (e.g Windows) convert bntest to use BN_new and BN_RECP_CTX_new instead
NOT BUG:For master windows build dsa.h is now needed
NOT BUG:Make output from openssl version -f consistent with previous versions
NOT BUG:Fix warning where BIO_FLAGS_UPLINK was being redefined This warning breaks the build in 1.0.0 and 0.9.8
NOT BUG:Avoid deprecation problems in Visual Studio 13
NOT BUG:Ensure internal header files are used from mk1mf based builds
NOT BUG:RT3548: Remove unsupported platforms
NOT BUG:This last one for this ticket Removes WIN16 So long MS_CALLBACK and MS_FAR We won't miss you
BUG:Allow multiple IDN xn-- indicators
NOT BUG:Update the X509v3 name parsing to allow multiple xn-- international domain name indicators in a name Previously only allowed one at the beginning of a name which was wrong
NOT BUG:RT3548: Remove some unsupported platforms
NOT BUG:This commit removes NCR Tandem Cray Regenerates TABLE Removes another missing BEOS fluff The last platform remaining on this ticket is WIN16
BUG:RT478: Add uninstall make target
NOT BUG:Add INSTALLDIRS variable list of directories where things get installed Change install_html_docs to use perl mkdir-p script
BUG:Add uninstall uninstall_sw uninstall_docs uninstall_html_docs to Makefile.org The actions of these targets were figured out by "inverting" the install target
BUG:Recurse into subdirs to do uninstall as needed Added uninstall targets whose actions were similarly figured out by "inverting" the install target
NOT BUG:Also remove some 'space before tab' complaints in Makefile.org
NOT BUG:Fix no-deprecated on Windows
NOT BUG:make update
NOT BUG:Remove redundant DSO_METHOD_beos declaration in dso.h BEOS support has been removed
NOT BUG:Make build reproducible
NOT BUG:It contained a date on when it was build
NOT BUG:Further windows specific .gitignore entries
NOT BUG:Update .gitignore with windows files to be excluded from git
NOT BUG:Fix build failure on Windows due to undefined cflags identifier
NOT BUG:A memory leak can occur in dtls1_buffer_record if either of the calls to ssl3_setup_buffers or pqueue_insert fail The former will fail if there is a malloc failure whilst the latter will fail if attempting to add a duplicate record to the queue This should never happen because duplicate records should be detected and dropped before any attempt to add them to the queue Unfortunately records that arrive that are for the next epoch are not being recorded correctly and therefore replays are not being detected Additionally these "should not happen" failures that can occur in dtls1_buffer_record are not being treated as fatal and therefore an attacker could exploit this by sending repeated replay records for the next epoch eventually causing a DoS through memory exhaustion
NOT BUG:Thanks to Chris Mueller for reporting this issue and providing initial analysis and a patch Further analysis and the final patch was performed by Matt Caswell from the OpenSSL development team
NOT BUG:CVE-2015-0206
NOT BUG:Unauthenticated DH client certificate fix
NOT BUG:Fix to prevent use of DH client certificates without sending certificate verify message
NOT BUG:If we've used a client certificate to generate the premaster secret ssl3_get_client_key_exchange returns 2 and ssl3_get_cert_verify is never called
NOT BUG:We can only skip the certificate verify message in ssl3_get_cert_verify if the client didn't send a certificate
BUG:Thanks to Karthikeyan Bhargavan for reporting this issue CVE-2015-0205
BUG:Fix for CVE-2014-3570 (with minor bn_asm.c revamp)
NOT BUG:Follow on from CVE-2014-3571 This fixes the code that was the original source of the crash due to p being NULL Steve's fix prevents this situation from occuring - however this is by no means obvious by looking at the code for dtls1_get_record This fix just makes things look a bit more sane
NOT BUG:Fix crash in dtls1_get_record whilst in the listen state where you get two separate reads performed - one for the header and one for the body of the handshake record
BUG:CVE-2014-3571
NOT BUG:fix error discrepancy
NOT BUG:Fix irix-cc build
NOT BUG:use correct credit in CHANGES
NOT BUG:Only inherit the session ID context in SSL_set_SSL_CTX if the existing context was also inherited (matches that of the existing SSL_CTX)
NOT BUG:use correct function name
NOT BUG:RT3662: Allow leading  in nameConstraints
NOT BUG:Change by SteveH from original by John Denker (in the RT)
NOT BUG:Some cleanup of L<> markup in pod files
NOT BUG:Show only the #define not the values in BIO_f_buffer Data abstraction and we can remove a "see also" entry
NOT BUG:Remove internal forward reference to NOTES in EVP_EncryptInit; just say "see below" as we do in the other pages
NOT BUG:Add missing (3) in pem.pod so the L<> entry is consistent Fix entry to point to the "master" page not the symlink'd one
NOT BUG:Fix memory leak
NOT BUG:Fix memory leak by freeing up saved_message.data if it is not NULL
BUG:PR#3489
NOT BUG:Further comment amendments to preserve formatting prior to source reformat
NOT BUG:Remove blank line from start of cflags character array in buildinf.h
NOT BUG:CHANGES: mention "universal" ARM support
NOT BUG:This is re-commit without unrelated modification
NOT BUG:Revert "CHANGES: mention "universal" ARM support."
NOT BUG:This reverts commit 4fec91506975f62a2f93be71a46acc7fae7eef45
NOT BUG:CHANGES: mention "universal" ARM support
NOT BUG:fix compilation error
NOT BUG:Only allow ephemeral RSA keys in export ciphersuites
NOT BUG:OpenSSL clients would tolerate temporary RSA keys in non-export ciphersuites It also had an option SSL_OP_EPHEMERAL_RSA which enabled this server side Remove both options as they are a protocol violation
BUG:Thanks to Karthikeyan Bhargavan for reporting this issue (CVE-2015-0204)
NOT BUG:ECDH downgrade bug fix
NOT BUG:Fix bug where an OpenSSL client would accept a handshake using an ephemeral ECDH ciphersuites with the server key exchange message omitted
BUG:Thanks to Karthikeyan Bhargavan for reporting this issue
BUG:CVE-2014-3572
NOT BUG:RT3546: Remove #define IRIX_CC_BUG
NOT BUG:Leftovers from commit 448155e9bbda27cbba365ff549a7e2044a8a399f Remove now-unused #define's
NOT BUG:update ordinals
NOT BUG:(cherry picked from commit 31c65a7bc0de7ff1446645d41af388893362f579)
NOT BUG:Ensure that the session ID context of an SSL* is updated when its SSL_CTX is updated
BUG:From BoringSSL commit https://boringssl.googlesource.com/boringssl/+/a5dc545bbcffd9c24cebe65e9ab5ce72d4535e3a
NOT BUG:Constify ASN1_TYPE_cmp add X509_ALGOR_cmp
NOT BUG:Fix various certificate fingerprint issues
NOT BUG:By using non-DER or invalid encodings outside the signed portion of a certificate the fingerprint can be changed without breaking the signature Although no details of the signed portion of the certificate can be changed this can cause problems with some applications: e.g those using the certificate fingerprint for blacklists
NOT BUG:1 Reject signatures with non zero unused bits
NOT BUG:If the BIT STRING containing the signature has non zero unused bits reject the signature All current signature algorithms require zero unused bits
NOT BUG:2 Check certificate algorithm consistency
NOT BUG:Check the AlgorithmIdentifier inside TBS matches the one in the certificate signature NB: this will result in signature failure errors for some broken certificates
NOT BUG:3 Check DSA/ECDSA signatures use DER
NOT BUG:Reencode DSA/ECDSA signatures and compare with the original received signature Return an error if there is a mismatch
BUG:This will reject various cases including garbage after signature (thanks to Antti Karjalainen and Tuomo Untinen from the Codenomicon CROSS program for discovering this case) and use of BER or invalid ASN.1 INTEGERs (negative or with leading zeroes)
BUG:CVE-2014-8275
NOT BUG:Additional fix required for no-srtp to work
BUG:RT3638
NOT BUG:Fix building with no-srtp
BUG:RT3638
NOT BUG:Add a clang build target for linux-x86_64
NOT BUG:This change documents the world as-is by turning all warnings on and then turning warnings that trigger off again
NOT BUG:Remove inconsistency in ARM support This facilitates "universal" builds ones that target multiple architectures e.g ARMv5 through ARMv7 See commentary in Configure for details
NOT BUG:ecp_nistz256-x86_64.pl: fix occasional failures
NOT BUG:RT: 3607
NOT BUG:RT2914: NULL check missing in X509_name_canon
NOT BUG:Check for NULL return from X509_NAME_ENTRY_new()
NOT BUG:Remove SGC restart flag
NOT BUG:Remove MS SGC
BUG:MS Server gated cryptography is obsolete and dates from the time of export restrictions on strong encryption and is only used by ancient versions of MSIE
NOT BUG:Clear existing extension state
NOT BUG:When parsing ClientHello clear any existing extension state from SRP login and SRTP profile
BUG:Thanks to Karthikeyan Bhargavan for reporting this issue
NOT BUG:typo in s_client
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:remove duplicate defines
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:constify tls 1.2 lookup tables
NOT BUG:None of this should live in writable memory
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:Add missing include of sys/time.h
NOT BUG:gettimeofday was undefined
NOT BUG:mark all block comments that need format preserving so that indent will not alter them when reformatting comments
NOT BUG:Make "run" volatile
NOT BUG:RT#3629
NOT BUG:Document openssl dgst -hmac option
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:dlfcn: always define _GNU_SOURCE
NOT BUG:We need this for the freebsd kernel with glibc as used in the Debian kfreebsd ports There shouldn't be a problem defining this on systems not using glibc
NOT BUG:Fix memory leak in the apps
NOT BUG:The BIO_free() allocated ex_data again that we already freed
NOT BUG:RT3548: Remove unsupported platforms
BUG:This commit removes DG-UX It also flushes out some left-behinds in config And regenerates TABLE from Configure (hadn't been done in awhile)
BUG:RT3548: unsupported platforms
BUG:This commit removes Sinix/ReliantUNIX RM400 (And a missed piece of BEOS fluff)
NOT BUG:RT3548: Remove unsupported platforms
BUG:This commit removes MPE/iX
NOT BUG:Improves certificates HOWTO
NOT BUG:* adds links to various related documents * fixes a few typos * rewords a few sentences
NOT BUG:Small typo
BUG:RT3548: Remvoe unsupported platforms
BUG:This commit removes SunOS (a sentimental favorite of mine)
NOT BUG:Fix incorrect OPENSSL_assert() usage
NOT BUG:Return an error code for I/O errors instead of an assertion failure
BUG:PR#3470
BUG:RT3548: Remove outdated platforms
NOT BUG:This commit removes all mention of NeXT and NextStep
NOT BUG:Fix a problem if CFLAGS is too long cversion.c fails to compile when config is run with --strict-warnings
NOT BUG:Made it an error to define OPENSSL_USE_DEPRECATED if OpenSSL has been built with OPENSSL_NO_DEPRECATED defined
NOT BUG:Update CHANGES for deprecated updates
NOT BUG:make update following changes to default config settings
NOT BUG:Change all instances of OPENSSL_NO_DEPRECATED to OPENSSL_USE_DEPRECATED Introduce use of DECLARE_DEPRECATED
NOT BUG:Remove redundant OPENSSL_NO_DEPRECATED suppression
NOT BUG:Turn on OPENSSL_NO_DEPRECATED by default Also introduce OPENSSL_USE_DEPRECATED If OPENSSL_NO_DEPRECATED is defined at config stage then OPENSSL_USE_DEPRECATED has no effect - deprecated functions are not available If OPENSSL_NO_DEPRECATED is not defined at config stage then applications must define OPENSSL_USE_DEPRECATED in order to access deprecated functions Also introduce compiler warnings for gcc for applications using deprecated functions
NOT BUG:RT3548: Remove some obsolete platforms
BUG:This commit removes Sony NEWS4
NOT BUG:Return error when a bit string indicates an invalid amount of bits left
NOT BUG:Fix yet anoither 'make clean' breakage
NOT BUG:RT3548: Remove some obsolete platforms
NOT BUG:This commit removes BEOS
BUG:RT3544: Restore MWERKS for NetWare
NOT BUG:Reject invalid constructed encodings
NOT BUG:According to X6.90 null object identifier boolean integer and enumerated types can only have primitive encodings: return an error if any of these are received with a constructed encoding
BUG:Add a comment noting the padding oracle
NOT BUG:Revert "RT3425: constant-time evp_enc"
NOT BUG:Causes more problems than it fixes: even though error codes are not part of the stable API several users rely on the specific error code and the change breaks them Conversely we don't have any concrete use-cases for constant-time behaviour here
NOT BUG:This reverts commit 4aac102f75b517bdb56b1bcfd0a856052d559f6e
NOT BUG:Build fixes
NOT BUG:Various build fixes mostly uncovered by clang's unused-const-variable and unused-function errors
NOT BUG:(cherry picked from commit 0e1c318ece3c82e96ae95a34a1badf58198d6b28)
NOT BUG:Premaster secret handling fixes
NOT BUG:From BoringSSL - Send an alert when the client key exchange isn't correctly formatted - Reject overly short RSA ciphertexts to avoid a (benign) out-of-bounds memory access
NOT BUG:Clear warnings/errors within RL_DEBUG code sections (RL_DEBUG should be renamed)
NOT BUG:Clear warnings/errors within TLS_DEBUG code sections
NOT BUG:Clear warnings/errors within KSSL_DEBUG code sections
NOT BUG:Clear warnings/errors within CIPHER_DEBUG code sections
NOT BUG:Clear warnings/errors within CIPHER_DEBUG code sections
NOT BUG:Clear warnings/errors within BN_CTX_DEBUG code sections
BUG:Check for invalid divisors in BN_div
NOT BUG:Invalid zero-padding in the divisor could cause a division by 0
NOT BUG:(cherry picked from commit a43bcd9e96c5180e5c6c82164ece643c0097485e)
NOT BUG:The dtls1_output_cert_chain function no longer exists so remove it from ssl_locl.h
NOT BUG:Don't set client_version to the ServerHello version
NOT BUG:The client_version needs to be preserved for the RSA key exchange
NOT BUG:This change also means that renegotiation will like TLS repeat the old client_version rather than advertise only the final version (Either way version change on renego is not allowed.) This is necessary in TLS to work around an SChannel bug but it's not strictly necessary in DTLS
NOT BUG:(From BoringSSL)
NOT BUG:Add more meaningful OPENSSL_NO_ECDH error message for suite b mode
NOT BUG:Rename gost2814789t.c to gost2814789test.c The old name caused problems for dummytest if gost is compiled out since the name of the test is not standard (dummytest segfaults) Also the old name caused problems for git because the executable was not in the .gitignore file
BUG:Add missing OPENSSL_NO_EC guards
BUG:Add OPENSSL_NO_ECDH guards
NOT BUG:Remove extraneous white space and add some braces
NOT BUG:DTLS fixes for signed/unsigned issues
BUG:RT3497: The ticket that keeps on giving
NOT BUG:Don't remove c_rehash that wasn't created by make; this script is created by configure
BUG:This fix brought to you by the letter "f" and
NOT BUG:Allow using -SSLv2 again when setting Protocol in the config
BUG:RT#3625
NOT BUG:RT3497: Fix; don't remove header files
NOT BUG:Doing 'config ; make clean' broke because clean removed header files that normal build didn't create So don't remove those files Hopefully will be better addressed by Geoff's no-symlinks patch
NOT BUG:Fix unused variable warning
NOT BUG:The temporary variable causes unused variable warnings in opt mode with clang because the subsequent assert is compiled out
NOT BUG:Fixed memory leak if BUF_MEM_grow fails
NOT BUG:RT1688: Add dependencies for parallel make
NOT BUG:make update
NOT BUG:Minor doc fixes
NOT BUG:In EVP_EncryptInit remove duplicate mention of EVP_idea_cbc() In EVP_PKEY_CTX_ctrl.pod remove EVP_PKEY_get_default_digest_nid since it is documented elsewhere
NOT BUG:RT3497: Clean up "dclean" targets
NOT BUG:Some Makefiles had actions for "dclean" that really belonged to the "clean" target This is wrong because clean ends up well not really cleaning everything
BUG:RT3543: Remove #ifdef LINT
NOT BUG:I also replaced some exit/return wrappers in various programs (from main) to standardize on return
NOT BUG:Remove old private pod2man
NOT BUG:Include Richard's point to remove the 'sh -c' wrapper
NOT BUG:capi_ctrl capi_vtrace: check for NULL after allocating and free it
NOT BUG:tree_print: check for NULL after allocating err
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:tls1_heartbeat: check for NULL after allocating buf
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:tls1_process_heartbeat: check for NULL after allocating buffer
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:SSL_set_session: check for NULL after allocating s->kssl_ctx->client_princ
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:serverinfo_process_buffer: check result of realloc(ctx->cert->key->serverinfo) and don't leak memory if it fails
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:ssl3_digest_cached_records: check for NULL after allocating s->s3->handshake_dgst
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:ssl3_get_certificate_request: check for NULL after allocating s->cert->ctypes
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:SSL_COMP_add_compression_method: exit if allocating the new compression method struct fails
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:Move bn internal functions into bn_int.h and bn_lcl.h
NOT BUG:Update documentation following BN opaquify
NOT BUG:Make bn opaque
NOT BUG:Update apps for bn opaque change
NOT BUG:Disable engines that will fail to build when bn is made opaque
NOT BUG:Implement internally opaque bn access from ts
NOT BUG:Implement internally opaque bn access from srp
NOT BUG:Implement internally opaque bn access from rsa
NOT BUG:Implement internally opaque bn access from evp
NOT BUG:Implement internally opaque bn access from ec
NOT BUG:Implement internally opaque bn access from dsa
NOT BUG:Implement internally opaque bn access from dh
NOT BUG:Implement internally opaque bn access from asn1
NOT BUG:Prepare exptest for bn opaquify
NOT BUG:Prepare for bn opaquify Implement internal helper functions
NOT BUG:Remove internal bn dependancies from speed.c
NOT BUG:Include <openssl/foo.h> instead of "foo.h"
NOT BUG:Exported headers shouldn't be included as "foo.h" by code from the same module it should only do so for module-internal headers This is because the symlinking of exported headers (from include/openssl/foo.h to crypto/foo/foo.h) is being removed and the exported headers are being moved to the include/openssl/ directory instead
NOT BUG:Change-Id: I4c1d80849544713308ddc6999a549848afc25f94 Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Fixed memory leak in the event of a failure of BUF_MEM_grow
NOT BUG:Fix memory leak in SSL_new if errors occur
NOT BUG:Remove fips directories from mkfiles.pl
NOT BUG:Remove references to deleted fips directory from Makefile.org
NOT BUG:remove OPENSSL_FIPSAPI
NOT BUG:remove FIPS_*_SIZE_T
NOT BUG:remove FIPS module code from crypto/evp
NOT BUG:remove FIPS module code from crypto/bn
NOT BUG:remove FIPS module code from crypto/ecdh
NOT BUG:remove FIPS module code from crypto/ecdsa
NOT BUG:Remove FIPS module code from crypto/dh
NOT BUG:remove FIPS module code from crypto/dsa
NOT BUG:remove FIPS module code from crypto/rsa
NOT BUG:Remove FIPS error library from openssl.ec mkerr.pl
NOT BUG:make depend
NOT BUG:Remove fips.h reference
NOT BUG:Remove fips_constseg references
NOT BUG:remove another FIPSCANISTER reference
NOT BUG:remove unnecessary OPENSSL_FIPS reference
NOT BUG:Remove OPENSSL_FIPSCANISTER code
NOT BUG:OPENSSL_FIPSCANISTER is only set if the fips module is being built (as opposed to being used) Since the fips module wont be built in master this is redundant
NOT BUG:Remove FIPSCANISTERINTERNAL reference
NOT BUG:Remove fips utility build rules from test/Makefile
NOT BUG:The fips test utilities are only build if an FIPS module is being built from source As this isn't done in master these are redundant
NOT BUG:Remove fipscanister build functionality from makefiles
NOT BUG:Remove fipscanister from Configure delete fips directory
NOT BUG:Remove some unnecessary OPENSSL_FIPS references
NOT BUG:FIPS_mode() exists in all versions of OpenSSL but always returns 0 if OpenSSL is not FIPS capable
NOT BUG:Add CHANGES entry for OCB
BUG:Added OPENSSL_NO_OCB guards
NOT BUG:Add documentation for OCB mode
NOT BUG:Add tests for OCB mode
NOT BUG:Add EVP support for OCB mode
NOT BUG:Add support for OCB mode as per RFC7253
NOT BUG:Clarify the return values for SSL_get_shared_curve
NOT BUG:Add extra checks for odd-length EC curve lists
BUG:Odd-length lists should be rejected everywhere upon parsing Nevertheless be extra careful and add guards against off-by-one reads
BUG:Also drive-by replace inexplicable double-negation with an explicit comparison
NOT BUG:Reject elliptic curve lists of odd lengths
NOT BUG:The Supported Elliptic Curves extension contains a vector of NamedCurves of 2 bytes each so the total length must be even Accepting odd-length lists was observed to lead to a non-exploitable one-byte out-of-bounds read in the latest development branches (1.0.2 and master) Released versions of OpenSSL are not affected
NOT BUG:Thanks to Felix Groebert of the Google Security Team for reporting this issue
NOT BUG:Fix broken build
NOT BUG:Add includes missing from commit 33eab3f6af51c6d7fe68ee4960930df4f1616bd5
NOT BUG:Replace GOST_R_MALLOC_FAILURE and GOST_R_NO_MEMORY with ERR_R_MALLOC_FAILURE
NOT BUG:capi_get_provname: Check return values
NOT BUG:ssl_create_cipher_list: check whether push onto cipherstack succeeds
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:ssl_cert_dup: Fix memory leak
NOT BUG:Always use goto err on failure and call ssl_cert_free() on the error path so all fields and "ret" itself are freed
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:dtls1_new: free s on error path
NOT BUG:dtls1_heartbeat: check for NULL after allocating s->cert->ctypes
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:dtls1_process_heartbeat: check for NULL after allocating buffer
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:capi_get_key: check for NULL after allocating key
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:capi_cert_get_fname: check for NULL after allocating wfname
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:capi_get_provname: free name on error if it was malloc'ed
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:pkey_gost_mac_keygen: check for NULL after allocating keydata
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:pkey_gost_ctrl: check for NULL after allocating pctx->shared_ukm
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:Update changes to indicate that SSLv2 support has been removed
NOT BUG:Remove incorrect code inadvertently introduced through commit 59669b6ab
BUG:Remove SSLv2 support
BUG:The only support for SSLv2 left is receiving a SSLv2 compatible client hello
NOT BUG:New location on website for binaries
NOT BUG:Remove "#if 0" code
NOT BUG:Only use the fallback mtu after 2 unsuccessful retransmissions if it is less than the mtu we are already using
NOT BUG:Updates to s_client and s_server to remove the constant 28 (for IPv4 header and UDP header) when setting an mtu This constant is not always correct (e.g if using IPv6) Use the new DTLS_CTRL functions instead
NOT BUG:If we really get a situation where the underlying mtu is less than the minimum we will support then dtls1_do_write can go into an infinite loop This commit fixes that
NOT BUG:Fix dtls_query_mtu so that it will always either complete with an mtu that is at least the minimum or it will fail There were some instances in dtls1_query_mtu where the final mtu can end up being less than the minimum i.e where the user has set an mtu manually This shouldn't be allowed Also remove dtls1_guess_mtu that despite having logic for guessing an mtu was actually only ever used to work out the minimum mtu to use
NOT BUG:Remove instances in libssl of the constant 28 (for size of IPv4 header + UDP) and instead use the value provided by the underlying BIO Also provide some new DTLS_CTRLs so that the library user can set the mtu without needing to know this constant These new DTLS_CTRLs provide the capability to set the link level mtu to be used (i.e including this IP/UDP overhead) The previous DTLS_CTRLs required the library user to subtract this overhead first
NOT BUG:There are a number of instances throughout the code where the constant 28 is used with no explanation Some of this was introduced as part of RT#1929 The value 28 is the length of the IP header (20 bytes) plus the UDP header (8 bytes) However use of this constant is incorrect because there may be instances where a different value is needed e.g an IPv4 header is 20 bytes but an IPv6 header is 40 Similarly you may not be using UDP (e.g SCTP) This commit introduces a new BIO_CTRL that provides the value to be used for this mtu "overhead" It will be used by subsequent commits
NOT BUG:The first call to query the mtu in dtls1_do_write correctly checks that the mtu that we have received is not less than the minimum If its less it uses the minimum instead The second call to query the mtu does not do that but instead uses whatever comes back We have seen an instance in RT#3592 where we have got an unreasonably small mtu come back This commit makes both query checks consistent
NOT BUG:The SSL_OP_NO_QUERY_MTU option is supposed to stop the mtu from being automatically updated and we should use the one provided instead Unfortunately there are a couple of locations where this is not respected
NOT BUG:Verify that we have a sensible message len and fail if not RT#3592 provides an instance where the OPENSSL_assert that this commit replaces can be hit I was able to recreate this issue by forcing the underlying BIO to misbehave and come back with very small mtu values This happens the second time around the while loop after we have detected that the MTU has been exceeded following the call to dtls1_write_bytes
NOT BUG:Use the SSLv23 method by default
NOT BUG:If SSLv2 and SSLv3 are both disabled we still support SSL/TLS
NOT BUG:Remove all .cvsignore files
NOT BUG:Check for FindNextFile when defining it rather than FindFirstFile
NOT BUG:[PR3597] Advance to the next state variant when reusing messages
BUG:Previously state variant was not advanced which resulted in state being stuck in the st1 variant (usually "_A")
NOT BUG:This broke certificate callback retry logic when accepting connections that were using SSLv2 ClientHello (hence reusing the message) because their state never advanced to SSL3_ST_SR_CLNT_HELLO_C variant required for the retry code path
NOT BUG:Reported by Yichun Zhang (agentzh)
NOT BUG:Signed-off-by: Piotr Sikora <piotr@cloudflare.com>
NOT BUG:Correct some layout issues convert all remaining tabs to appropriate amounts of spaces
NOT BUG:Improves the proxy certificates howto doc
NOT BUG:The current documentation contains a bunch of spelling and grammar mistakes I also found it hard to understand some paragraphs so here is my attempt to improve its readability
NOT BUG:Fix warning in ssl2_enc
NOT BUG:Remove more references to dtls1_enc
NOT BUG:Check EVP_Cipher return values for SSL2
NOT BUG:Delete unused file
NOT BUG:Add checks to the return value of EVP_Cipher to prevent silent encryption failure
BUG:PR#1767
NOT BUG:Remove redundant checks in ssl_cert_dup This was causing spurious error messages when using GOST
BUG:PR#3613
NOT BUG:Tidy up ocsp help output
NOT BUG:Add documentation on -timeout option in the ocsp utility
NOT BUG:PR#3612
NOT BUG:NetWare compilation fix
NOT BUG:Workaround for NetWare CodeWarrior compiler which doesn't properly lookup includes when in same directory as the C file which includes it
BUG:PR#3569
NOT BUG:Updates to X509_NAME_get_index_by_NID.pod submitted by user Bernardh via the wiki Minor changes made by Matt Caswell
NOT BUG:Updates to X509_NAME_add_entry_by_txt.pod submitted by user Bernardh via the wiki Minor changes made by Matt Caswell
NOT BUG:Updates to EVP_PKEY_encrypt.pod submitted by user Bernardh via the wiki Minor changes made by Matt Caswell
NOT BUG:Add include of ssl.h which is required by srtp.h
NOT BUG:Fixed memory leak due to incorrect freeing of DTLS reassembly bit mask
NOT BUG:PR#3608
NOT BUG:Corrected comments in ssl.h about SSLv23_method and friends
NOT BUG:PR#3574
NOT BUG:Print out Suite B status
NOT BUG:When using the -xcert option to test certificate validity print out if we pass Suite B compliance We print out "not tested" if we aren't in Suite B mode
NOT BUG:Fix SuiteB chain checking logic
BUG:RT2679: Fix error if keysize too short
NOT BUG:In keygen return KEY_SIZE_TOO_SMALL not INVALID_KEYBITS
NOT BUG:** I also increased the minimum from 256 to 512 which is now documented in CHANGES file **
NOT BUG:RT3488: Update doc for OPENSSL_config
NOT BUG:Fix CONF_load_modules to CONF_modules_load Document that it calls exit Advise against using it now Add an error print to stderr
NOT BUG:Do not resume a session if the negotiated protocol version does not match the session's version (server)
NOT BUG:See also BoringSSL's commit bdf5e72f50e25f0e45e825c156168766d8442dde
NOT BUG:When using EVP_PKEY_derive with a KDF set a negative error from ECDH_compute_key is silently ignored and the KDF is run on duff data
NOT BUG:Thanks to github user tomykaira for the suggested fix
NOT BUG:Clean up CHANGES
NOT BUG:Ensure SSL3_FLAGS_CCS_OK (or d1->change_cipher_spec_ok for DTLS) is reset once the ChangeCipherSpec message is received Previously the server would set the flag once at SSL3_ST_SR_CERT_VRFY and again at SSL3_ST_SR_FINISHED This would allow a second CCS to arrive and would corrupt the server state
BUG:(Because the first CCS would latch the correct keys and subsequent CCS messages would have to be encrypted a MitM attacker cannot exploit this though.)
NOT BUG:Thanks to Joeri de Ruiter for reporting this issue
BUG:Always require an advertised NewSessionTicket message
NOT BUG:The server must send a NewSessionTicket message if it advertised one in the ServerHello so make a missing ticket message an alert in the client
NOT BUG:An equivalent change was independently made in BoringSSL see commit 6444287806d801b9a45baf1f6f02a0e3a16e144c
NOT BUG:Remove ssl3_check_finished
NOT BUG:The client sends a session ID with the session ticket and uses the returned ID to detect resumption so we do not need to peek at handshake messages: s->hit tells us explicitly if we're resuming
NOT BUG:An equivalent change was independently made in BoringSSL see commit 407886f589cf2dbaed82db0a44173036c3bc3317
NOT BUG:Set s->hit when resuming from external pre-shared secret
NOT BUG:The same change was independently made in BoringSSL see commit 9eaeef81fa2d4fd6246dc02b6203fa936a5eaf67
NOT BUG:Reset s->tlsext_ticket_expected in ssl_scan_serverhello_tlsext This ensures that it's zeroed even if the SSL object is reused (as in ssltest.c) It also ensures that it applies to DTLS too
NOT BUG:Fix s_server -ssl2 Previously this reported "Error setting EC curve"
BUG:Fix excert logic
NOT BUG:If no keyfile has been specified use the certificate file instead
NOT BUG:Fix typo: we need to check the chain is not NULL not the chain file
NOT BUG:(cherry picked from commit 786370b1b09b919d9306f27336e13783e4fe3fd0)
NOT BUG:New option no-ssl3-method which removes SSLv3_*method
NOT BUG:When no-ssl3 is set only make SSLv3 disabled by default Retain -ssl3 options for s_client/s_server/ssltest
NOT BUG:When no-ssl3-method is set SSLv3_*method() is removed and all -ssl3 options
NOT BUG:We should document this somewhere e.g wiki FAQ or manual page
NOT BUG:Only handle RI extension for SSLv3
NOT BUG:Don't send or parse any extensions other than RI (which is needed to handle secure renegotation) for SSLv3
NOT BUG:Process signature algorithms before deciding on certificate
NOT BUG:The supported signature algorithms extension needs to be processed before the certificate to use is decided and before a cipher is selected (as the set of shared signature algorithms supported may impact the choice)
NOT BUG:(cherry picked from commit 56e8dc542bd693b2dccea8828b3d8e5fc6932d0c)
NOT BUG:Conflicts: ssl/ssl.h ssl/ssl_err.c
NOT BUG:Added references to RFC 7027
NOT BUG:Prevent use of binary curves when OPENSSL_NO_EC2M is defined
NOT BUG:Fixed cms-test.pl for no-ec2m
NOT BUG:Updated comment references to draft-ietf-tls-ecc-12 to refer to RFC4492 instead
NOT BUG:Don't use msg on error
NOT BUG:Don't attempt to access msg structure if recvmsg returns an error
BUG:PR#3483
NOT BUG:Add whrlpool and camellia .s files to perlasm list
BUG:Change-Id: I626d751f19f24df6b967c17498d6189cc0acb96c Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Add missing SRC variable
NOT BUG:This is the only Makefile without SRC defined This change enables a standard Makefile include directive to cover crypto/jpake/*.d files
BUG:This was automatically applied by AddSrcVarIfNeeded() in: https://code.google.com/p/mike-bland/source/browse/openssl/update_makefiles.py
BUG:Change-Id: I030204a1bc873b5de5b06c8ddc0b94bb224c6650 Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Remove redundant test targets outside of test/
NOT BUG:These correspond to targets of the same name in test/Makefile that clash when using the single-makefile build method using GitConfigure and GitMake
BUG:Change-Id: If7e900c75f4341b446608b6916a3d76f202026ea Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Improve variable parsing when generating MINFO
NOT BUG:Before this change variables for which a '=' appeared in the assignment would be parsed as the entire string up until the final '=' For example:
BUG:BUILD_CMD=shlib_target=; if [ -n "$(SHARED_LIBS)" ]; then \
NOT BUG:would result in the variable name "BUILD_CMD=shlib_target" This doesn't appear to harm the current generation of MINFO but creates problems for other Makefile-related work I'm attempting
BUG:Change-Id: I1f3a606d67fd5464bb459e8f36c23b3e967b77e1 Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:{,darwin64-}debug-test-64-clang Configure targets
NOT BUG:These are based on debug-ben-debug-64-clang and is intended to produce consistent settings for folks involved in the unit testing effort detailed at:
NOT BUG:http://wiki.openssl.org/index.php/Unit_Testing
NOT BUG:-fsanitize has been removed from the set of clang flags for now Apparently clang 3.1 which ships with FreeBSD 9.1 completely ignores -fsanitize Clang 3.3 which ships with FreeBSD 9.2 compiles with it but fails to link due to the absence of libasan:
NOT BUG:http://lists.freebsd.org/pipermail/freebsd-hackers/2013-December/043995.html https://www.mail-archive.com/cfe-commits@cs.uiuc.edu/msg92260.html http://reviews.llvm.org/D2644
NOT BUG:We need -Wno-error=unused-const-variable because of this error: .../crypto/ec/ec_lib.c:74:19: error: unused variable 'EC_version' [-Werror,-Wunused-const-variable] static const char EC_version[] = "EC" OPENSSL_VERSION_PTEXT;
BUG:Change-Id: I2cba53537137186114c083049ea1233550a741f9 Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Emit PERLASM_SCHEME to fix GitMake on OS X
NOT BUG:This fixes the errors when trying to assemble .s files using GitMake on OS X
BUG:Change-Id: I2221f558619302d22e0c57d7203173d634155678 Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Add cscope.out and .d files to .gitignore
NOT BUG:cscope.out is generated by cscope as described in: http://wiki.openssl.org/index.php/Testing_and_Development_Tools_and_Tips
NOT BUG:.d files are compiler-generated Makefile dependency files (e.g using 'gcc -MMD -MP foo.c')
BUG:Change-Id: I2338858a6b6ee0527837d10a8b55cff1689023fd Signed-off-by: Mike Bland <mbland@acm.org> Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Additional output for ssltest
NOT BUG:Print out more details of the conection in ssltest specifically: server certificate curve name for EC server temporary key (if any) and peer signing digest
NOT BUG:Add SSL_CONF support to ssltest
NOT BUG:Add command line support for SSL_CONF: server side arguments are prefixed by -s_ (e.g -s_no_ssl3) and client side with -c_
NOT BUG:Fix cross reference table generator
NOT BUG:If the hash or public key algorithm is "undef" the signature type will receive special handling and shouldn't be included in the cross reference table
NOT BUG:Fixes a minor typo in the EVP docs
NOT BUG:Out is the buffer which needs to contain at least inl + cipher_block_size - 1 bytes Outl is just an int*
NOT BUG:Correct timestamp output when clock_precision_digits > 0
NOT BUG:PR#3535
BUG:Fix free of garbage pointer PR#3595
NOT BUG:Fix warning about negative unsigned intergers
BUG:Fix datarace reported by valgrind/helgrind
NOT BUG:This doesn't really fix the datarace but changes it so it can only happens once This isn't really a problem since we always just set it to the same value We now just stop writing it after the first time
BUG:PR3584 https://bugs.debian.org/534534
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
BUG:Fix spelling of EECDH
NOT BUG:armv4cpuid.S: fix compilation error in pre-ARMv7 build
BUG:PR: 3474
NOT BUG:Fix WIN32 build by disabling bn* calls
NOT BUG:The trial division and probable prime with coprime tests are disabled on WIN32 builds because they use internal functions not exported from the WIN32 DLLs
NOT BUG:ec/asm/ecp_nistz256-x86_64.pl: fix inconsistency in path handling
NOT BUG:md32_common.h: address compiler warning in HOST_c2l
NOT BUG:Use only unsigned arithmetic in constant-time operations
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:Tighten session ticket handling
NOT BUG:Tighten client-side session ticket handling during renegotiation: ensure that the client only accepts a session ticket if the server sends the extension anew in the ServerHello Previously a TLS client would reuse the old extension state and thus accept a session ticket if one was announced in the initial ServerHello
BUG:Add missing CHANGES interval [1.0.1h 1.0.1i]
NOT BUG:Sync CHANGES
NOT BUG:Fix ssltest logic when some protocols are compiled out
NOT BUG:Copy negotiated parameters in SSL_set_SSL_CTX
NOT BUG:SSL_set_SSL_CTX is used to change the SSL_CTX for SNI keep the supported signature algorithms and raw cipherlist
NOT BUG:Process signature algorithms in ClientHello late
NOT BUG:ecp_nistz256 update
NOT BUG:Facilitate switch to custom scatter-gather routines This modification does not change algorithms only makes it possible to implement alternative This is achieved by a) moving precompute table to assembly (perlasm parses ecp_nistz256_table.c and is free to rearrange data to match gathering algorithm); b) adhering to explicit scatter subroutine (which for now is simply a memcpy) First implementations that will use this option are 32-bit assembly implementations ARMv4 and x86 where equivalent of current read-whole-table-select-single-value algorithm is too time-consuming [On side note switching to scatter-gather on x86_64 would allow to improve server-side ECDSA performance by ~5%]
NOT BUG:Configure: add ios64 target
NOT BUG:Add missing credit
NOT BUG:Fix and improve SSL_MODE_SEND_FALLBACK_SCSV documentation
BUG:When processing ClientHello.cipher_suites don't ignore cipher suites listed after TLS_FALLBACK_SCSV
NOT BUG:RT: 3575
NOT BUG:Keep old method in case of an unsupported protocol
NOT BUG:When we're configured with no-ssl3 and we receive an SSL v3 Client Hello we set the method to NULL We didn't used to do that and it breaks things This is a regression introduced in 62f45cc27d07187b59551e4fad3db4e52ea73f2c Keep the old method since the code is not able to deal with a NULL method at this time
BUG:CVE-2014-3569 PR#3571
NOT BUG:no-ssl2 with no-ssl3 does not mean drop the ssl lib
NOT BUG:RT3547: Add missing static qualifier
NOT BUG:Add constant_time_locl.h to HEADERS so the Win32 compile picks it up correctly
NOT BUG:Conflicts: crypto/Makefile
NOT BUG:Include "constant_time_locl.h" rather than "../constant_time_locl.h" The different -I compiler parameters will take care of the rest..
NOT BUG:Conflicts: crypto/evp/evp_enc.c crypto/rsa/rsa_oaep.c crypto/rsa/rsa_pk1.c
NOT BUG:Updates to NEWS file
NOT BUG:Updates CHANGES file
NOT BUG:Fix no-ssl3 configuration option
BUG:CVE-2014-3568
NOT BUG:Fix for session tickets memory leak
BUG:CVE-2014-3567
NOT BUG:Fix SRTP compile issues for windows
BUG:Related to CVE-2014-3513
BUG:This fix was developed by the OpenSSL Team
NOT BUG:Conflicts: util/mkdef.pl util/ssleay.num
NOT BUG:Fix for SRTP Memory Leak
BUG:CVE-2014-3513
BUG:This issue was reported to OpenSSL on 26th September 2014 based on an original issue and patch developed by the LibreSSL project Further analysis of the issue was performed by the OpenSSL team
BUG:The fix was developed by the OpenSSL team
NOT BUG:Fix SSL_R naming inconsistency
NOT BUG:aesni-x86_64.pl: make ECB subroutine Windows ABI compliant
NOT BUG:RT: 3553
NOT BUG:Add TLS_FALLBACK_SCSV documentation and move s_client -fallback_scsv handling out of #ifndef OPENSSL_NO_DTLS1 section
NOT BUG:Support TLS_FALLBACK_SCSV
NOT BUG:Remove reference to deleted md4.c
NOT BUG:Disable encrypt them mac for SSL 3.0 and stream ciphers (RC4 only)
NOT BUG:Removed duplicate definition of PKCS7_type_is_encrypted
BUG:Patch supplied by Matthieu Patou <mat@matws.net> and modified to also remove duplicate definition of PKCS7_type_is_digest
NOT BUG:PR#3551
NOT BUG:Fix single makefile
BUG:RT3462: Document actions when data==NULL
NOT BUG:If data is NULL return the size needed to hold the derived key No other API to do this so document the behavior
NOT BUG:DTLS 1.2 support has been added to 1.0.2
NOT BUG:crypto/cast/asm/cast-586.pl: +5% on PIII and remove obsolete readme
NOT BUG:RT3549: Remove obsolete files in crypto
NOT BUG:RT2910: Remove des.c and its Makefile target
NOT BUG:RT2309: Fix podpage MMNNFFPPS->MNNFFPPS
NOT BUG:Parse custom extensions after internal extensions
NOT BUG:e_os.h: refine inline override logic (to address warnings in debug build)
NOT BUG:crypto/bn/bn_nist.c: bring original failing code back for reference
BUG:RT: 3541
NOT BUG:Add additional explanation to CHANGES entry
NOT BUG:Add additional DigestInfo checks
NOT BUG:Reencode DigestInto in DER and check against the original: this will reject any improperly encoded DigestInfo structures
NOT BUG:Note: this is a precautionary measure there is no known attack which can exploit this
NOT BUG:Thanks to Brian Smith for reporting this issue
NOT BUG:Remove #ifdef's for IRIX_CC_BUG
NOT BUG:RT3544: Must update TABLE after Configure change
NOT BUG:Also add comment to Configure reminding people to do that
NOT BUG:Add missing tests
NOT BUG:Accidentally omitted from commit 455b65dfab0de51c9f67b3c909311770f2b3f801
NOT BUG:Use correct function name: CMS_add1_signer()
NOT BUG:crypto/bn/bn_nist.c: work around MSC ARM compiler bug
BUG:RT: 3541
NOT BUG:e_os.h: allow inline functions to be compiled by legacy compilers
BUG:RT3544: Remove MWERKS support
NOT BUG:The following #ifdef tests were all removed: __MWERKS__ MAC_OS_pre_X MAC_OS_GUSI_SOURCE MAC_OS_pre_X OPENSSL_SYS_MACINTOSH_CLASSIC OPENSSL_SYS_MACOSX_RHAPSODY
BUG:RT3425: constant-time evp_enc
NOT BUG:Do the final padding check in EVP_DecryptFinal_ex in constant time to avoid a timing leak from padding failure
NOT BUG:RT3067: simplify patch
NOT BUG:(Original commit adb46dbc6dd7347750df2468c93e8c34bcb93a4b)
NOT BUG:Use the new constant-time methods consistently in s3_srvr.c
NOT BUG:RT3066: rewrite RSA padding checks to be slightly more constant time
NOT BUG:Also tweak s3_cbc.c to use new constant-time methods Also fix memory leaks from internal errors in RSA_padding_check_PKCS1_OAEP_mgf1
NOT BUG:This patch is based on the original RT submission by Adam Langley <agl@chromium.org> as well as code from BoringSSL and OpenSSL
NOT BUG:make update
NOT BUG:Sync libeay.num from 1.0.2
NOT BUG:Note i2d_re_X509_tbs and related changes in CHANGES
NOT BUG:(cherry picked from commit e9128d9401ad617e17c5eb3772512c24b038b967)
NOT BUG:CHANGES: mention ECP_NISTZ256
NOT BUG:crypto/rsa/rsa_chk.c: harmonize error codes
NOT BUG:crypto/ecp_nistz256.c: harmonize error codes
NOT BUG:Fixed error introduced in commit f2be92b94dad3c6cbdf79d99a324804094cf1617 that fixed PR#3450 where an existing cast masked an issue when i was changed from int to long in that commit
NOT BUG:Picked up on z/linux (s390) where sizeof(int)!=sizeof(long)
NOT BUG:Harmonize Tru64 and Linux make rules
BUG:RT: 3333,3165
NOT BUG:Fix warning
BUG:RT3291: Add -crl and -revoke options to CA.pl
NOT BUG:Document the new features
BUG:RT2301: GetDIBits not GetBitmapBits in rand_win
NOT BUG:GetDIBits has been around since Windows2000 and BitBitmapBits is an old Win16 compatibility function that is much slower
NOT BUG:crypto/bn/asm/x86_64-mont*.pl: add missing clang detection
NOT BUG:Configure: engage ECP_NISTZ256
NOT BUG:RT: 3149
NOT BUG:Add ECP_NISTZ256 by Shay Gueron Intel Corp
NOT BUG:RT: 3149
NOT BUG:Reserve option to use BN_mod_exp_mont_consttime in ECDSA
NOT BUG:Submitted by Shay Gueron Intel Corp RT: 3149
NOT BUG:perlasm/x86_64-xlate.pl: handle inter-bank movd
NOT BUG:RT2772 update: c_rehash was broken
BUG:Move the readdir() lines out of the if statement so that flist is available globally
NOT BUG:RT3271 update; extra; semi-colon; confuses; some;
NOT BUG:RT2560: missing NULL check in ocsp_req_find_signer
NOT BUG:If we don't find a signer in the internal list then fall through and look at the internal list; don't just return NULL
NOT BUG:RT2196: Clear up some README wording
NOT BUG:Say where to email bug reports Mention general RT tracker info in a separate paragraph
NOT BUG:RT3192: spurious error in DSA verify
NOT BUG:This is funny; Ben commented in the source Matt opend a ticket and Rich is doing the submit Need more code-review? :)
NOT BUG:Merge: 843921f b999f66
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
NOT BUG:Previous commit was reviewed by Geoff not Stephen:
NOT BUG:RT3271: Don't use "if !" in shell lines
NOT BUG:For portability don't use "if ! expr"
NOT BUG:RT3271: Don't use "if !" in shell lines
NOT BUG:For portability don't use "if ! expr"
NOT BUG:RT1909: Omit version for v1 certificates
NOT BUG:When calling X509_set_version to set v1 certificate that should mean that the version number field is omitted
NOT BUG:RT3506: typo's in ssltest
NOT BUG:RT2841: Extra return in check_issued
NOT BUG:RT2626: Change default_bits from 1K to 2K
NOT BUG:This is a more comprehensive fix It changes all keygen apps to use 2K keys It also changes the default to use SHA256 not SHA1 This is from Kurt's upstream Debian changes
NOT BUG:RT2600: Change Win line-endings to Unix
NOT BUG:For consistency
NOT BUG:RT2272: Add old-style hash to c_rehash
NOT BUG:In addition to Matthias's change I also added -n to not remove links And updated the manpage
BUG:RT671: export(i2s|s2i|i2v|v2i)_ASN1_(IA5|BIT)STRING
NOT BUG:The EXT_BITSTRING and EXT_IA5STRING are defined in x509v3.h but the low-level functions are not public They are useful no need to make them static Note that BITSTRING already was exposed since this RT was created so now we just export IA5STRING functions
BUG:RT468: SSL_CTX_sess_set_cache_size wrong
BUG:The documentation is wrong about what happens when the session cache fills up
BUG:RT3301: Discard too-long heartbeat requests
BUG:RT3291: Add -crl and -revoke options to CA.pl
NOT BUG:I added some error-checking while integrating this patch
NOT BUG:RT2518: fix pod2man errors
NOT BUG:pod2man now complains when item tags are not sequential Also complains about missing =back and other tags Silence the warnings; most were already done
BUG:RT992: RSA_check_key should have a callback arg
NOT BUG:The original RT request included a patch By the time we got around to doing it however the callback scheme had changed So I wrote a new function RSA_check_key_ex() that uses the BN_GENCB callback But thanks very much to Vinet Sharma <vineet.sharma@gmail.com> for the initial implementation
BUG:RT3108: OPENSSL_NO_SOCK should imply OPENSSL_NO_DGRAM
NOT BUG:RT3031: Need to #undef some names for win32
NOT BUG:Copy the ifdef/undef stanza from x509.h to x509v3.h
NOT BUG:RT2849: Redundant check of "dsa" variable
NOT BUG:In the current code the check isn't redundant And in fact the REAL check was missing This avoids a NULL-deref crash
NOT BUG:RT2843: Remove another spurious close-comment token
NOT BUG:RT2842: Remove spurious close-comment marker
NOT BUG:Also I (rsalz) changed "#ifdef undef" to "#if 0"
NOT BUG:Merge: 4f13dab b0e659c
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
NOT BUG:empty merge; script hiccup
NOT BUG:RT1834: Fix PKCS7_verify return value
NOT BUG:The function returns 0 or 1 only
NOT BUG:RT1832: Fix PKCS7_verify return value
NOT BUG:The function returns 0 or 1 only
NOT BUG:RT1771: Add string.h include
NOT BUG:RT1325,2973: Add more extensions to c_rehash
NOT BUG:Regexp was bracketed wrong
NOT BUG:make update
NOT BUG:Add i2d_re_X509_tbs
BUG:i2d_re_X509_tbs re-encodes the TBS portion of the certificate
NOT BUG:Add CHANGES entry for SCT viewer code
NOT BUG:sync ordinals with 1.0.2
NOT BUG:psk_client_callback 128-byte id bug
NOT BUG:Fix a bug in handling of 128 byte long PSK identity in psk_client_callback
NOT BUG:OpenSSL supports PSK identities of up to (and including) 128 bytes in length PSK identity is obtained via the psk_client_callback implementors of which are expected to provide a NULL-terminated identity However the callback is invoked with only 128 bytes of storage thus making it impossible to return a 128 byte long identity and the required additional NULL byte
NOT BUG:This CL fixes the issue by passing in a 129 byte long buffer into the psk_client_callback As a safety precaution this CL also zeroes out the buffer before passing it into the callback uses strnlen for obtaining the length of the identity returned by the callback and aborts the handshake if the identity (without the NULL terminator) is longer than 128 bytes
NOT BUG:(Original patch amended to achieve strnlen in a different way.)
BUG:Followup on RT3334 fix: make sure that a directory that's the empty string returns 0 with errno = ENOENT
BUG:RT3334: Fix crypto/LPdir_win.c
NOT BUG:RT3140: Possibly-unit variable in pem_lib.c
NOT BUG:Can't really happen but the flow of control isn't obvious Add an initializer
NOT BUG:Make the inline const-time functions static
NOT BUG:"inline" without static is not correct as the compiler may choose to ignore it and will then either emit an external definition or expect one
NOT BUG:RT3508: Remove unused variable introduced by b09eb24
NOT BUG:RT3511: doc fix; req default serial is random
NOT BUG:RT842 closed back in 2004 changed the default serial number to be a random number rather than zero Finally time to update the doc
NOT BUG:Add explanatory note to crypto/store/README
NOT BUG:RT1325,2973: Add more extensions to c_rehash
NOT BUG:Add .crt/.cer/.crl to the filenames parsed
NOT BUG:I also updated the podpage (since it didn't exist when this ticket was first created nor when it was re-created seven years later)
NOT BUG:Configure: add configuration for crypto/ec/asm extensions
NOT BUG:md5-x86_64.pl: work around warning
NOT BUG:x86[_64] assembly pack: add Silvermont performance data
NOT BUG:Remove some outdated README files to avoid confusing people
NOT BUG:RT2820: case-insensitive filenames on Darwin
BUG:Andy pointed out there is also darwin64 so tweak the pattern
NOT BUG:RT2119,3407: Updated to dgst.pod
NOT BUG:Re-order algorithm list Be consistent in command synopsis Add content about signing Add EXAMPLE section Add some missing options: -r -fips-fingerprint -non-fips-allow Various other fixes
NOT BUG:RT2379: Additional typo fix
BUG:Andy found an additional typo "can be can be" Now I have that silly "Que sera sera" song stuck in my head
NOT BUG:RT1941: c_rehash.pod is missing
NOT BUG:Add the file written by James Westby graciously contributed under the terms of the OpenSSL license
NOT BUG:apps/speed.c: add -misalign command-line argument
NOT BUG:New option allows to perform benchmarks on misaligned data
BUG:RT2379: Bug in BIO_set_accept_port.pod
NOT BUG:The doc says that port can be "*" to mean any port That's wrong
NOT BUG:Fixed double inclusion of string.h
BUG:PR2693
BUG:RT2880: HFS is case-insensitive filenames
NOT BUG:Add Darwin to list of case-insensitive filenames when installing manapges When doing this I noticed that we weren't setting "filecase" for the HTML doc install
BUG:RT3246: req command prints version number wrong
NOT BUG:Make X509_REQ_print_ex do the same thing that X509_REQ_print does
NOT BUG:RT1665,2300: Crypto doc cleanups
BUG:RT1665: aes documentation
NOT BUG:Paul Green wrote a nice aes.pod file But we now encourage the EVP interface So I took his RT item and used it as impetus to add the AES modes to EVP_EncryptInit.pod I also noticed that rc4.pod has spurious references to some other cipher pages so I removed them
NOT BUG:RT2300: Clean up MD history (merged into RT1665)
NOT BUG:Put HISTORY section only in EVP_DigestInit.pod Also add words to discourage use of older cipher-specific API and remove SEE ALSO links that point to them
NOT BUG:Make sure digest pages have a NOTE that says use EVP_DigestInit
NOT BUG:Review feedback: More cleanup in EVP_EncryptInit.pod Fixed SEE ALSO links in ripemd160.pod sha.pod mdc2.pod blowfish.pod rc4.d and des.pod Re-order sections in des.pod for consistency
BUG:RT2193: #ifdef errors in bss_dgram.c
NOT BUG:Problem with #ifdef in the BIO_CTRL_DGRAM_MTU_DISCOVER case that is different from the BIO_CTRL_DGRAM_QUERY_MTU one which seems correct
NOT BUG:RT3102: Document -verify_error_return flag
NOT BUG:Also moved some options around so all the "verify" options are clumped together
NOT BUG:Fix comments add new test
NOT BUG:Fix comments in ssltest.c: return value of 0 now means extension is omitted and add_cb is not called for servers if the corresponding extension is absent in ClientHello
NOT BUG:Test add_cb is not called if extension is not received
NOT BUG:Custom extension documentation
NOT BUG:Rename some callbacks fix alignment
NOT BUG:Use consistent function naming
NOT BUG:Instead of SSL_CTX_set_custom_cli_ext and SSL_CTX_set_custom_srv_ext use SSL_CTX_add_client_custom_ext and SSL_CTX_add_server_custom_ext
NOT BUG:New function SSL_extension_supported()
NOT BUG:New extension callback features
NOT BUG:Support separate parse and add callback arguments Add new callback so an application can free extension data Change return value for send functions so < 0 is an error 0 omits extension and > 0 includes it This is more consistent with the behaviour of other functions in OpenSSL
NOT BUG:Modify parse_cb handling so <= 0 is an error
NOT BUG:Make SSL_CTX_set_custom_cli_ext and SSL_CTX_set_custom_cli_ext argument order consistent
NOT BUG:NOTE: these changes WILL break existing code
NOT BUG:Remove (now inaccurate) in line documentation
NOT BUG:Callback revision
NOT BUG:Use "parse" and "add" for function and callback names instead of "first" and "second"
NOT BUG:Change arguments to callback so the extension type is unsigned int and the buffer length is size_t Note: this *will* break existing code
NOT BUG:Remove serverinfo checks
NOT BUG:Since sanity checks are performed for all custom extensions the serverinfo checks are no longer needed
NOT BUG:Add custom extension sanity checks
NOT BUG:Reject attempts to use extensions handled internally
NOT BUG:Add flags to each extension structure to indicate if an extension has been sent or received Enforce RFC5246 compliance by rejecting duplicate extensions and unsolicited extensions and only send a server extension if we have sent the corresponding client extension
NOT BUG:Custom extension revision
NOT BUG:Use the same structure for client and server custom extensions
NOT BUG:Add utility functions in new file t1_ext.c Use new utility functions to handle custom server and client extensions and remove a lot of code duplication
NOT BUG:fix warning
NOT BUG:Constant-time utilities
NOT BUG:Pull constant-time methods out to a separate header add tests
NOT BUG:RT2400: ASN1_STRING_to_UTF8 missing initializer
NOT BUG:Merge: 17e80c6 f34a572
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
NOT BUG:Gah I hate when I forget to pull before merging
NOT BUG:RT2308: Add extern "C" { .. } wrapper
NOT BUG:Add the wrapper to all public header files (Configure generates one) Don't bother for those that are just lists of #define's that do renaming
NOT BUG:Explicitly check for empty ASN.1 strings in d2i_ECPrivateKey
NOT BUG:The old code implicitly relies on the ASN.1 code returning a \0-prefixed buffer when the buffer length is 0 Change this to verify explicitly that the ASN.1 string has positive length
NOT BUG:RT3065: automatically generate a missing EC public key
NOT BUG:When d2i_ECPrivateKey reads a private key with a missing (optional) public key generate one automatically from the group and private key
BUG:RT3065: ec_private_key_dont_crash
NOT BUG:This change saves several EC routines from crashing when an EC_KEY is missing a public key The public key is optional in the EC private key format and without this patch running the following through `openssl ec` causes a crash:
NOT BUG:-----BEGIN EC PRIVATE KEY----- MBkCAQEECAECAwQFBgcIoAoGCCqGSM49AwEH -----END EC PRIVATE KEY-----
NOT BUG:RT2210: Add missing EVP_cleanup to example
NOT BUG:I also removed some trailing whitespace and cleaned up the "see also" list
NOT BUG:Add tags/TAGS target; rm tags/TAGS in clean
NOT BUG:Merge: fa60b90 a4d266b
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
NOT BUG:Stupid git tricks :(
BUG:RT1744: SSL_CTX_set_dump_dh() doc feedback
NOT BUG:The description of when the server creates a DH key is confusing This cleans it up (rsalz: also removed trailing whitespace.)
BUG:RT1744: SSL_CTX_set_dump_dh() doc feedback
NOT BUG:The description of when the server creates a DH key is confusing This cleans it up (rsalz: also removed trailing whitespace.)
NOT BUG:RT1804: fix EXAMPLE in EVP_EncryptInit.pod
NOT BUG:The EXAMPLE that used FILE and RC2 doesn't compile due to a few minor errors Tweak to use IDEA and AES-128 Remove examples about RC2 and RC5
NOT BUG:Typo fixes to evp documentation
NOT BUG:This patch was submitted by user "Kox" via the wiki
NOT BUG:RT 3060: amend patch
NOT BUG:Use existing error code SSL_R_RECORD_TOO_SMALL for too many empty records
NOT BUG:For ease of backporting the patch to release branches
NOT BUG:RT3061: slightly amend patch
NOT BUG:Add an extra NULL dereference check
NOT BUG:Improve EVP_PKEY_sign documentation
NOT BUG:Clarify the intended use of EVP_PKEY_sign Make the code example compile
BUG:RT3142: Extra initialization in state_machine
NOT BUG:Remove extra initialization calls in the sample program
NOT BUG:define inline for Visual Studio
NOT BUG:In Visual Studio inline is available in C++ only however __inline is available for C see http://msdn.microsoft.com/en-us/library/z8y1yy88.aspx
NOT BUG:Fix build when BSAES_ASM is defined but VPAES_ASM is not
NOT BUG:bn/asm/rsaz-*.pl: allow spaces in Perl path name
NOT BUG:RT: 2835
NOT BUG:sha1-mb-x86_64.pl: add commentary
NOT BUG:PR2490: Remove unused local variable bn ecp_nist.c
NOT BUG:crypto/evp/e_aes_cbc_hmac_sha[1|256].c: fix compiler warnings
NOT BUG:sha1-mb-x86_64.pl: fix typo
NOT BUG:RT2847: Don't "check" uninitialized memory
NOT BUG:Don't check err variable until after it's been set
NOT BUG:RT2848: Remove extra NULL check
NOT BUG:Don't need to check auth for NULL since we did when we assigned to it
BUG:RT2513: Fix typo's paramter-->parameter
NOT BUG:I also found a couple of others (padlock and signinit) and fixed them
NOT BUG:Merge: 76b10e1 bcd3e36
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
BUG:PR2401: Typos in FAQ
NOT BUG:Also rewrite section on compiler bugs; Matt pointed out that it has some grammatical issues
BUG:PR2401: Typos in FAQ
NOT BUG:Also rewrite section on compiler bugs; Matt pointed out that it has some grammatical issues
NOT BUG:RT2724: Remove extra declaration
NOT BUG:Extra SSL_get_selected_srtp_profile() declaration in ssl/srtp.h causes -Werror builds to fail
NOT BUG:RT2492: Remove extra NULL check
NOT BUG:RT2489: Remove extra "sig" local variable
NOT BUG:RT2942: CRYPTO_set_dynlock_create_callback doc fix
NOT BUG:The file param is "const char*" not "char*"
NOT BUG:RT2163: Remove some unneeded #include's
NOT BUG:Several files #include stdio.h and don't need it Also per tjh remove BN_COUNT
NOT BUG:RT1815: More const'ness improvements
NOT BUG:Add a dozen more const declarations where appropriate These are from Justin; while adding his patch I noticed ASN1_BIT_STRING_check could be fixed too
NOT BUG:pub_decode_gost94 pub_decode_gost01: check for NULL after allocating databuf pub_encode_gost94 pub_encode_gost01: check for NULL after allocating databuf and octet
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:engine_md_copy: check for NULL after allocating to_md->HashBuffer
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:process_pci_value: free (*policy)->data before setting to NULL after failed realloc
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:do_ext_i2d: free ext_der or ext_oct on error path
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:do_othername: check for NULL after allocating objtmp
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:NETSCAPE_SPKI_b64_encode: free der_spki and b64_str on error path
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:get_cert_by_subject: check for NULL when allocating hent
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:UI_construct_prompt: check for NULL when allocating prompt
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
BUG:hashbn: check for NULL result when allocating bin and return an error if it fails all (in)direct callers of hashbn: propagate potential error in hashbn
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:JPAKE_CTX_new: check for NULL result when allocating ctx
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:old_hmac_encode: check for NULL result when allocating *pder
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:dev_crypto_md5_copy: return error if allocating to_md->data fails
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:dev_crypto_md5_update: check result of realloc(md_data->data) and don't leak memory if it fails
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:dev_crypto_cipher: return immediately if allocating cin/cout failed
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:dev_crypto_init_key: return error if allocating CDATA(ctx)->key failed
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:Add support for Camellia HMAC-Based cipher suites from RFC6367
BUG:While RFC6367 focuses on Camellia-GCM cipher suites it also adds a few cipher suites that use SHA-2 based HMAC that can be very easily added
NOT BUG:Tested against gnutls 3.3.5
NOT BUG:PR#3443
NOT BUG:Fixed out-of-bounds read errors in ssl3_get_key_exchange
BUG:PR#3450
BUG:RT2751: Declare get_issuer_sk() earlier
NOT BUG:Add a declaration for get_issuer_sk() so that other functions in x509_vf.c could use it (Planned work around cross-certification chains.)
NOT BUG:cryptodev_digest_copy: return error if allocating dstate->mac_data fails
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:cryptodev_digest_update: don't leak original state->mac_data if realloc fails
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:cms_SignerInfo_content_sign: free sig on failure path
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:rtcp_new: return failure if allocation of bi->ptr failed
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:multi_split: check for NULL when allocating parts and bpart and for failure of sk_BIO_push()
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
BUG:BIO_new_dgram_sctp dgram_sctp_read: zero entire authchunks
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:mime_hdr_addparam: free tmpname tmpval and mparam on error path and check whether sk_MIME_PARAM_push succeeds
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:mime_hdr_new: free mhdr tmpname tmpval on error path
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:ASN1_verify ASN1_item_verify: cleanse and free buf_in on error path
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:SetBlob: free rgSetBlob on error path
NOT BUG:Signed-off-by: Kurt Roeckx <kurt@openssl.org>
NOT BUG:Fix use after free bug
BUG:RT783: Minor optimization to ASN1_INTEGER_set
NOT BUG:Remove local variable and avoid extra assignment
NOT BUG:RT2465: Silence some gcc warnings
NOT BUG:"Another machine another version of gcc another batch of compiler warnings." Add "=NULL" to some local variable declarations that are set by passing thier address into a utility function; confuses GCC it might not be set
BUG:RT3023: Redundant logical expressions
NOT BUG:Remove some redundant logical expressions
NOT BUG:Merge: 14e9619 b83294f
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
NOT BUG:RT3268: Fix spelling errors in CHANGES file
NOT BUG:Fix a bunch of typo's and speling (sic) errors in the CHANGES file
NOT BUG:Revision of custom extension code
NOT BUG:Move custom extension structures from SSL_CTX to CERT structure
NOT BUG:This change means the form can be revised in future without binary compatibility issues Also since CERT is part of SSL structures so per-SSL custom extensions could be supported in future as well as per SSL_CTX
NOT BUG:Include error messages on extension check failure
NOT BUG:make depend
NOT BUG:Further improve/fix ec_GFp_simple_points_make_affine (ecp_smpl.c) and group_order_tests (ectest.c) Also fix the EC_POINTs_mul documentation (ec.h)
BUG:RT1665: Fix podpath to get xref's right
NOT BUG:In Makefile when build manpages put the current directory at the start of the podpath so that cross-refs find the local directory first
NOT BUG:RT3239: Extra comma in NAME lines of two manpages
NOT BUG:In two OpenSSL manual pages in the NAME section the last word of the name list is followed by a stray trailing comma While this may seem minor it is worth fixing because it may confuse some makewhatis(8) implementations
NOT BUG:While here also add the missing word "size" to the one line description in SSL_CTX_set_max_cert_list(3)
NOT BUG:Reviewed by: Dr Stephen Henson <shenson@drh-consultancy.co.uk>
NOT BUG:Merge: cde8ad1 16caa9a
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
BUG:PR 719: Configure not exiting with child status
NOT BUG:If subcommand fails just die
BUG:PR 718: Configure not exiting with child status
NOT BUG:If subcommand fails just die
NOT BUG:PR 2580: dgst missing current SHA algorithms
NOT BUG:Update the dgst.pod page to include SHA224...512 algorithms Update apps/progs.pl to add them to the digest command table
NOT BUG:Revert "RT 2820: Case-insensitive filenames on Darwin"
BUG:This reverts commit 691edc997a35682eb7fa29445036182d2c9eb1de
NOT BUG:RT2609: Typo in EXAMPLE section of req.pod
NOT BUG:The x509_extensions should be req_extensions in the config example in req.pod
NOT BUG:Fix d4a4370050f7d72239b92a60ab9d4a2dd5e9fd84
NOT BUG:Fully remove old error per drH
NOT BUG:RT 2820: Case-insensitive filenames on Darwin
NOT BUG:Add darwin-*-cc as one of the systems for case-insensitive filenames Fixes the manpage install so it doesn't create looping symlinks
NOT BUG:Merge: cbfc8ba 590bdcc
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
NOT BUG:Undo 77bf69dced875200f6f0e385a4a270298f8d3c45
NOT BUG:Not approved; mistakenly pushed commit that added README.md
NOT BUG:RT 2517: Various typo's
NOT BUG:Many of these were already fixed this catches the last few that were missed
NOT BUG:RT 2517: Various typo's
NOT BUG:Many of these were already fixed this catches the last few that were missed
NOT BUG:Add README.md
BUG:A small markdown README for GitHub users; points them to the right README and the website and RT tracker
NOT BUG:Fix SRP authentication ciphersuites
NOT BUG:The addition of SRP authentication needs to be checked in various places to work properly Specifically:
NOT BUG:A certificate is not sent A certificate request must not be sent Server key exchange message must not contain a signature If appropriate SRP authentication ciphersuites should be chosen
NOT BUG:Test SRP authentication ciphersuites
NOT BUG:Undo a90081576c94f9f54de1755188a00ccc1760549a
NOT BUG:Undo unapproved commit that removed DJGPP and WATT32
NOT BUG:RT 1988: Add "const" to SSL_use_RSAPrivateKey_ASN1
NOT BUG:The "unsigned char *d" should be const
BUG:RT 1505: Use SSL3_AL_FATAL not "2"
NOT BUG:Use SSL3_AL_FATAL instead of the literal constant "2" Every bit of cleanup helps
NOT BUG:Remove DJGPP (and therefore WATT32) #ifdef's
NOT BUG:DJGPP is no longer a supported platform Remove all #ifdef etc. cases that refer to it DJGPP also #define'd WATT32 so that is now removed as well
NOT BUG:Check SRP parameters early
NOT BUG:Check SRP parameters when they are received so we can send back an appropriate alert
NOT BUG:Fix SRP buffer overrun vulnerability
NOT BUG:Invalid parameters passed to the SRP code can be overrun an internal buffer Add sanity check that g A B < N to SRP code
BUG:Thanks to Sean Devlin and Watson Ladd of Cryptography Services NCC Group for reporting this issue
NOT BUG:Fix SRP ciphersuite DoS vulnerability
NOT BUG:If a client attempted to use an SRP ciphersuite and it had not been set up correctly it would crash with a null pointer read A malicious server could exploit this in a DoS attack
BUG:Thanks to Joonas Kuorilehto and Riku Hietamäki from Codenomicon for reporting this issue
BUG:CVE-2014-2970
NOT BUG:Fix race condition in ssl_parse_serverhello_tlsext
BUG:CVE-2014-3509
NOT BUG:Fix OID handling:
NOT BUG:- Upon parsing reject OIDs with invalid base-128 encoding - Always NUL-terminate the destination buffer in OBJ_obj2txt printing function
BUG:CVE-2014-3508
NOT BUG:Fix DTLS anonymous EC(DH) denial of service
BUG:CVE-2014-3510
BUG:Fix protocol downgrade bug in case of fragmented packets
BUG:CVE-2014-3511
NOT BUG:Remove some duplicate DTLS code
NOT BUG:In a couple of functions a sequence number would be calculated twice
NOT BUG:Additionally in |dtls1_process_out_of_seq_message| we know that |frag_len| <= |msg_hdr->msg_len| so the later tests for |frag_len < msg_hdr->msg_len| can be more clearly written as |frag_len != msg_hdr->msg_len| since that's the only remaining case
NOT BUG:Applying same fix as in dtls1_process_out_of_seq_message A truncated DTLS fragment would cause *ok to be clear but the return value would still be the number of bytes read
NOT BUG:Problem identified by Emilia Käsper based on previous issue/patch by Adam Langley
NOT BUG:Fix return code for truncated DTLS fragment
NOT BUG:Previously a truncated DTLS fragment in |dtls1_process_out_of_seq_message| would cause *ok to be cleared but the return value would still be the number of bytes read This would cause |dtls1_get_message| not to consider it an error and it would continue processing as normal until the calling function noticed that *ok was zero
NOT BUG:I can't see an exploit here because |dtls1_get_message| uses |s->init_num| as the length which will always be zero from what I can see
NOT BUG:Fix memory leak from zero-length DTLS fragments
NOT BUG:The |pqueue_insert| function can fail if one attempts to insert a duplicate sequence number When handling a fragment of an out of sequence message |dtls1_process_out_of_seq_message| would not call |dtls1_reassemble_fragment| if the fragment's length was zero It would then allocate a fresh fragment and attempt to insert it but ignore the return value leaking the fragment
NOT BUG:This allows an attacker to exhaust the memory of a DTLS peer
BUG:Fixes CVE-2014-3507
NOT BUG:Fix DTLS handshake message size checks
NOT BUG:In |dtls1_reassemble_fragment| the value of |msg_hdr->frag_off+frag_len| was being checked against the maximum handshake message size but then |msg_len| bytes were allocated for the fragment buffer This means that so long as the fragment was within the allowed size the pending handshake message could consume 16MB + 2MB (for the reassembly bitmap) Approx 10 outstanding handshake messages are allowed meaning that an attacker could consume ~180MB per DTLS connection
NOT BUG:In the non-fragmented path (in |dtls1_process_out_of_seq_message|) no check was applied
BUG:Fixes CVE-2014-3506
NOT BUG:Wholly based on patch by Adam Langley with one minor amendment
BUG:Added comment for the frag->reassembly == NULL case as per feedback from Emilia
NOT BUG:Avoid double free when processing DTLS packets
NOT BUG:The |item| variable in both of these cases may contain a pointer to a |pitem| structure within |s->d1->buffered_messages| It was being freed in the error case while still being in |buffered_messages| When the error later caused the |SSL*| to be destroyed the item would be double freed
BUG:Thanks to Wah-Teh Chang for spotting that the fix in 1632ef74 was inconsistent with the other error paths (but correct)
BUG:Fixes CVE-2014-3505
NOT BUG:Update $default_depflags to match current defaults
NOT BUG:Sync with clean-up 1.0.2 CHANGES file (If a change is already present in 1.0.1f or 1.0.1h don't list it again under changes between 1.0.1h and 1.0.2.)
NOT BUG:Sync with current 1.0.2 CHANGES file
NOT BUG:Simplify and fix ec_GFp_simple_points_make_affine (which didn't always handle value 0 correctly)
NOT BUG:Add conditional unit testing interface
NOT BUG:Don't call internal functions directly call them through SSL_test_functions() This also makes unit testing work on Windows and platforms that don't export internal functions from shared libraries
NOT BUG:By default unit testing is not enabled: it requires the compile time option "enable-unit-test"
NOT BUG:Don't call setenv in gost2814789t.c
NOT BUG:The call to setenv in gost2814789t.c is not portable and may not reflect the location of the GOST ENGINE on all platforms anyway Instead set OPENSSL_ENGINES in test/Makefile
NOT BUG:Remove demos/tunala
NOT BUG:This has been unmaintained for a long time If it's still of interest to anyone it can be obtained easily enough by reverting this commit (It could join other demo code in some other repository perhaps.) In any case we don't want it taking up space in the baseline source package so <snip>
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:CHANGES: mention new platforms
BUG:"EC_POINT_invert" was checking "dbl" function pointer instead of "invert"
BUG:PR#2569
BUG:Remove old unused and unmaintained demonstration code
NOT BUG:sha1-ppc.pl: shave off one cycle from BODY_20_39 and improve performance by 10% on POWER[78]
NOT BUG:Minor documentation update removing "really" and a statement of opinion rather than a fact
NOT BUG:Add test header sync ordinals with 1.0.2
NOT BUG:Engage GHASH for PowerISA 2.0.7
NOT BUG:[and split ppccap.c to ppccap.c and ppc_arch.h]
NOT BUG:Add GHASH for PowerISA 2.0.7
NOT BUG:Windows build fixes
NOT BUG:Add cmac.h to mkdef.pl Remove ENGINE_load_rsax from engine.h: no longer built Update ordinals
NOT BUG:Fix documentation for RSA_set_method(3)
NOT BUG:PR#1675
NOT BUG:Check the test registry size during add_test()
NOT BUG:Update heartbeat_test #includes
NOT BUG:ssl/ssl_locl.h now comes first to ensure that it will compile standalone test/testutil.h is considered to be in the same directory as the test file since the test file will be linked into test/ and built there
NOT BUG:Use testutil registry in heartbeat_test
NOT BUG:test/testutil.c test registry functions
NOT BUG:These help standardize the structure of main() and result reporting
BUG:RFC 5649 support
NOT BUG:Add support for RFC5649 key wrapping with padding
NOT BUG:Add RFC5649 tests to evptests.txt
BUG:Based on PR#3434 contribution by Petr Spacek <pspacek@redhat.com>
NOT BUG:EVP support and minor changes added by Stephen Henson
NOT BUG:Doxygen comment block updates by Tim Hudson
NOT BUG:Make *Final work for key wrap again
NOT BUG:Sanity check lengths for AES wrap algorithm
NOT BUG:Fix typo add reference
NOT BUG:PR#3456
NOT BUG:Disabled XTS mode in enc utility as it is not supported
NOT BUG:PR#3442
NOT BUG:Revert "Add GHASH for PowerISA 2.07."
BUG:This reverts commit 927f2e5dea1da17bcc2c3d2baf7258318b57515c
NOT BUG:Revert "Engage GHASH for PowerISA 2.07."
BUG:This reverts commit 14aaf883d93fb2e321ef1fe25f687fb7b62ef8fe
NOT BUG:Engage GHASH for PowerISA 2.07
NOT BUG:Add GHASH for PowerISA 2.07
NOT BUG:Add Matt Caswell's fingerprint and general update on the fingerprints file to bring it up to date
NOT BUG:Clarify -Verify and PSK
BUG:PR#3452
NOT BUG:Fix DTLS certificate requesting code
NOT BUG:Use same logic when determining when to expect a client certificate for both TLS and DTLS
BUG:PR#3452
NOT BUG:Don't allow -www etc options with DTLS
NOT BUG:The options which emulate a web server don't make sense when doing DTLS Exit with an error if an attempt is made to use them
BUG:PR#3453
NOT BUG:Merge: 9d6253c 1c3e9a7
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
NOT BUG:Use case insensitive compare for servername
BUG:PR#3445
NOT BUG:document -nextprotoneg option in man pages
NOT BUG:Add description of the option to advertise support of Next Protocol Negotiation extension (-nextprotoneg) to man pages of s_client and s_server
BUG:PR#3444
NOT BUG:Use more common name for GOST key exchange
NOT BUG:Fix typo
NOT BUG:Add tags/TAGS; approved by tjh
NOT BUG:Fixed valgrind complaint due to BN_consttime_swap reading uninitialised data This is actually ok for this function but initialised to zero anyway if PURIFY defined
NOT BUG:This does have the impact of masking any *real* unitialised data reads in bn though
NOT BUG:Patch based on approach suggested by Rich Salz
NOT BUG:PR#3415
NOT BUG:Add names of GOST algorithms
BUG:PR#3440
BUG:* crypto/ui/ui_lib.c: misplaced brace in switch statement Detected by dcruette@qualitesys.com
BUG:Don't clean up uninitialised EVP_CIPHER_CTX on error (CID 483259)
BUG:Fix memory leak in BIO_free if there is no destroy function Based on an original patch by Neitrino Photonov <neitrinoph@gmail.com>
BUG:PR#3439
NOT BUG:x86_64 assembly pack: improve masm support
NOT BUG:Please Clang's sanitizer addendum
NOT BUG:Please Clang's sanitizer
NOT BUG:PR: #3424,#3423,#3422
NOT BUG:apps/speed.c: fix compiler warnings in multiblock_speed()
NOT BUG:sha[1|512]-x86_64.pl: fix logical errors with $shaext=0
NOT BUG:Prevent infinite loop loading config files
BUG:PR#2985
NOT BUG:Improve X509_check_host() documentation
NOT BUG:Based on feedback from Jeffrey Walton
NOT BUG:Update API to use (char *) for email addresses and hostnames
NOT BUG:Reduces number of silly casts in OpenSSL code and likely most applications Consistent with (char *) for "peername" value from X509_check_host() and X509_VERIFY_PARAM_get0_peername()
NOT BUG:Usage for -hack and -prexit -verify_return_error
NOT BUG:Document certificate status request options
NOT BUG:s_server usage for certificate status requests
BUG:Sanity check keylength in PVK files
BUG:PR#2277
NOT BUG:Added reference to platform specific cryptographic acceleration such as AES-NI
NOT BUG:Fixed error in pod files with latest versions of pod2man
NOT BUG:sha512-x86_64.pl: fix typo
NOT BUG:PR: #3431
NOT BUG:s3_pkt.c: fix typo
NOT BUG:apps/speed.c: add multi-block benchmark
BUG:Return smaller of ret and f
BUG:PR#3418
NOT BUG:Set optional peername when X509_check_host() succeeds
NOT BUG:Pass address of X509_VERIFY_PARAM_ID peername to X509_check_host() Document modified interface
NOT BUG:New peername element in X509_VERIFY_PARAM_ID
NOT BUG:Declaration memory management accessor and documentation
NOT BUG:Reduce casting nastiness
NOT BUG:Reduce casting nastiness
NOT BUG:Don't limit message sizes in ssl3_get_cert_verify
NOT BUG:PR#319 (reoponed version)
NOT BUG:Add license info
NOT BUG:typo (cherry picked from commit 2cfbec1caea8f9567bdff85d33d22481f2afb40a)
NOT BUG:Remove all RFC5878 code
NOT BUG:Remove RFC5878 code It is no longer needed for CT and has numerous bugs
NOT BUG:Update ticket callback docs
BUG:Close 3170 remove reference to Ariel Glenn's old 0.9.8 doc
NOT BUG:RT 1638; EVP_*Final() should mention they no longer cleanup the ctx
NOT BUG:RT3408; fix some (not all suggested) typo's in openssl.cnf
NOT BUG:Merge: aab3560 fc1d88f
NOT BUG:Merge branch 'rsalz-docfixes'
BUG:Close a whole bunch of documentation-related tickets: 298 424 656 882 939 1630 1807 2263 2294 2311 2424 2623 2637 2686 2697 2921 2922 2940 3055 3112 3156 3177 3277
NOT BUG:e_os.h: limit _MSC_VER trickery to older compilers
BUG:PR: #3390
NOT BUG:bn_exp.c: fix x86_64-specific crash with one-word modulus
NOT BUG:PR: #3397
NOT BUG:Fix doc typo
NOT BUG:ERR_get_error(3) references the non-existent ERR_get_last_error_line_data instead of the one that does exist ERR_peek_last_error_line_data
NOT BUG:PR#3283
NOT BUG:Make disabling last cipher work
NOT BUG:ASN1 sanity check
NOT BUG:Primitive encodings shouldn't use indefinite length constructed form
BUG:PR#2438 (partial)
NOT BUG:Add support for SHA2 in CAPI ENGINE
BUG:PR#2706 though patch is from PR#3366
NOT BUG:Fix possible buffer overrun
NOT BUG:(cherry picked from commit 2db3ea29298bdc347f15fbfab6d5746022f05101)
NOT BUG:Conflicts: ssl/t1_lib.c
NOT BUG:RT 1528; misleading debug print "pre-master" should be "master key"
NOT BUG:perlasm/ppc-xlate.pl update
NOT BUG:Engage SHA256/512 for PowerISA 2.07
NOT BUG:Add SHA256/512 for PowerISA 2.07
NOT BUG:RT 1530; fix incorrect comment
NOT BUG:RT 1229; typo in comment "dont't"->"don't"
BUG:RT 3245; it's "bitwise or" not "logical or"
NOT BUG:Fix RT 3211; "and are" -->"are"
NOT BUG:Fix RT 2567; typo in pkeyutl page
NOT BUG:Fix RT 2430; typo's in ca.pod
NOT BUG:Fix RT 3193
NOT BUG:sha512-x86_64.pl: fix linking problem under Windows
NOT BUG:Windows build fixes
NOT BUG:Fix warning (cherry picked from commit c97ec5631bb08a2171a125008d2f0d2a75687aaa)
NOT BUG:Make NO_SYS_UN_H compile
NOT BUG:Accessor functions for app_data in ECDSA_METHOD
NOT BUG:Test copying of contexts in evp_test
NOT BUG:Test EVP_CIPHER_CTX_copy in evp_test This will catch any problems with copying in underlying ciphers
NOT BUG:Make depend
NOT BUG:Fix copy for CCM GCM and XTS
NOT BUG:Internal pointers in CCM GCM and XTS contexts should either be NULL or set to point to the appropriate key schedule This needs to be adjusted when copying contexts
NOT BUG:Don't core dump when using CMAC with dgst
NOT BUG:We can't unfortunately print the CMAC cipher used without extending the API
BUG:PR#2579
NOT BUG:Clarified that the signature's buffer size `s` is not used as an IN parameter
NOT BUG:Under the old docs the only thing stated was "at most EVP_PKEY_size(pkey) bytes will be written" It was kind of misleading since it appears EVP_PKEY_size(pkey) WILL be written regardless of the signature's buffer size
NOT BUG:More constification
NOT BUG:Make EVP_CIPHER_CTX_copy work in GCM mode
NOT BUG:PR#3272
NOT BUG:Add 3072 7680 and 15360 bit RSA tests to openssl speed
NOT BUG:PR#3412
NOT BUG:Constification - mostly originally from Chromium
NOT BUG:Merge: 327f3c0 44724be
NOT BUG:Merge branch 'master' of git.openssl.org:openssl
NOT BUG:Fix typo in message (RT 3107)
NOT BUG:Fix memory leak
BUG:PR#2531
NOT BUG:Typo
NOT BUG:PR#3173
NOT BUG:Show errors on CSR verification failure
NOT BUG:If CSR verify fails in ca utility print out error messages Otherwise some errors give misleading output: for example if the key size exceeds the library limit
BUG:PR#2875
BUG:Make no-ssl3 no-ssl2 do more sensible things
NOT BUG:Clarify protocols supported
NOT BUG:Update protocols supported and note that SSLv2 is effectively disabled by default
BUG:PR#3184
NOT BUG:Handle BER length encoding
NOT BUG:Tolerate BER length encoding which may include leading zeroes
BUG:PR#2746
NOT BUG:x86_64 assembly pack: refine clang detection
NOT BUG:Typo
NOT BUG:PR#3107
NOT BUG:Don't disable state strings with no-ssl2
NOT BUG:Some state strings were erronously not compiled when no-ssl2 was set
BUG:PR#3295
NOT BUG:Fix compilation with -DSSL_DEBUG -DTLS_DEBUG -DKSSL_DEBUG
NOT BUG:PR#3141
NOT BUG:Fix typo in ideatest.c
NOT BUG:Remove redundant check
BUG:PR#3174
NOT BUG:Fix for EVP_PBE_alg_add()
NOT BUG:In EVP_PBE_alg_add don't use the underlying NID for the cipher as it may have a non-standard key size
BUG:PR#3206
NOT BUG:bn/asm/rsaz-avx2.pl: fix occasional failures
NOT BUG:RT 487 Mention that generated primes are "at least" B<bits> long
NOT BUG:Tolerate critical AKID in CRLs
BUG:PR#3014
NOT BUG:Add SHA256 Camellia ciphersuites from RFC5932
NOT BUG:PR#2800
NOT BUG:Handle IPv6 addresses in OCSP_parse_url
BUG:PR#2783
BUG:Don't advertise ECC ciphersuits in SSLv2 compatible client hello
BUG:PR#3374
NOT BUG:Clarify docs
NOT BUG:Document that the certificate passed to SSL_CTX_add_extra_chain_cert() should not be freed by the application
NOT BUG:PR#3409
NOT BUG:Rebuild OID table
NOT BUG:Fix OID encoding for one component
NOT BUG:OIDs with one component don't have an encoding
NOT BUG:PR#2556 (Bug#1)
NOT BUG:Memory leak and NULL dereference fixes
BUG:PR#3403
NOT BUG:Make sure BN_sqr can never return a negative value
BUG:PR#3410
NOT BUG:Remove ancient obsolete files under pkcs7
NOT BUG:bn_exp.c: move check for AD*X to rsaz-avx2.pl
NOT BUG:This ensures high performance is situations when assembler supports AVX2 but not AD*X
NOT BUG:aesp8-ppc.pl: rigid input verification in key setup
NOT BUG:aesv8-armx.pl: rigid input verification in key setup
NOT BUG:x86_64 assembly pack: addendum to last clang commit
NOT BUG:x86_64 assembly pack: allow clang to compile AVX code
NOT BUG:aesv8-armx.pl: inclrease interleave factor
BUG:This is to compensate for higher aes* instruction latency on Cortex-A57
NOT BUG:ARMv8 assembly pack: add Cortex performance numbers
NOT BUG:One more typo when changing !result to result <= 0
NOT BUG:Fix typo in last commit
BUG:Multiple verifier reference identities
NOT BUG:Implemented as STACK_OF(OPENSSL_STRING)
NOT BUG:Implement sk_deep_copy
NOT BUG:More complete input validation of X509_check_mumble
NOT BUG:X509_check_mumble() failure is <= 0 not just 0
NOT BUG:Drop hostlen from X509_VERIFY_PARAM_ID
NOT BUG:Just store NUL-terminated strings This works better when we add support for multiple hostnames
NOT BUG:More complete X509_check_host documentation
NOT BUG:Fix off-by-one errors in ssl_cipher_get_evp()
NOT BUG:In the ssl_cipher_get_evp() function fix off-by-one errors in index validation before accessing arrays
BUG:Bug discovered and fixed by Miod Vallat from the OpenBSD team
NOT BUG:PR#3375
NOT BUG:Revert "Fix off-by-one errors in ssl_cipher_get_evp()"
BUG:This reverts commit abfb989fe0b749ad61f1aa4cdb0ea4f952fc13e0
NOT BUG:Incorrect attribution
NOT BUG:Fixed Windows compilation failure
NOT BUG:Fix minor typos
NOT BUG:add references to verify(1) man page for args_verify() options
NOT BUG:cms ocsp s_client s_server and smime tools also use args_verify() for parsing options that makes them most of the same options verify tool does Add those options to man pages and reference their explanation in the verify man page
NOT BUG:sort the options in verify man page alphabetically
NOT BUG:just making sure the options are listed in the alphabetical order both in SYNOPSIS and DESCRIPTION no text changes
NOT BUG:add description of missing options to verify man page
NOT BUG:The options related to policy used for verification verification of subject names in certificate and certificate chain handling were missing in the verify(1) man page This fixes this issue
NOT BUG:smime man page: add missing options in SYNOPSIS
NOT BUG:-CAfile and -CApath is documented in OPTIONS but is missing in SYNOPSIS add them there
NOT BUG:Document -trusted_first option in man pages and help
NOT BUG:Add -trusted_first description to help messages and man pages of tools that deal with certificate verification
NOT BUG:Tidied up added include to stdlib removed "goto bad" usage
NOT BUG:Conform to whitespace conventions
NOT BUG:Added documentation for -iter for PKCS#8
NOT BUG:Added custom PBKDF2 iteration count to PKCS8 tool
NOT BUG:Fix signed/unsigned comparisons
NOT BUG:Fix shadow declaration
NOT BUG:aesni-sha[1|256]-x86_64.pl: fix logical error and MacOS X build
NOT BUG:aesp8-ppc.pl: add CTR mode
NOT BUG:Enforce _X509_CHECK_FLAG_DOT_SUBDOMAINS internal-only
NOT BUG:Accept CCS after sending finished
NOT BUG:Allow CCS after finished has been sent by client: at this point keys have been correctly set up so it is OK to accept CCS from server Without this renegotiation can sometimes fail
BUG:PR#3400
NOT BUG:evp/e_aes_cbc_sha[1|256].c: fix -DPEDANTIC build
NOT BUG:aesni-sha256-x86_64.pl: add missing rex in shaext
NOT BUG:PR: 3405
NOT BUG:sha1-x86_64.pl: add missing rex prefix in shaext
NOT BUG:PR: 3405
NOT BUG:Fixed incorrect return code handling in ssl3_final_finish_mac Based on an original patch by Joel Sing (OpenBSD) who also originally identified the issue
NOT BUG:Revert "Fixed incorrect return code handling in ssl3_final_finish_mac"
NOT BUG:This reverts commit 2f1dffa88e1b120add4f0b3a794fbca65aa7768d
NOT BUG:Missing attribution
BUG:Client-side namecheck wildcards
NOT BUG:A client reference identity of ".example.com" matches a server certificate presented identity that is any sub-domain of "example.com" (e.g "www.sub.example.com)
BUG:With the X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS flag it matches only direct child sub-domains (e.g "www.sub.example.com")
NOT BUG:Fix off-by-one errors in ssl_cipher_get_evp()
NOT BUG:In the ssl_cipher_get_evp() function fix off-by-one errors in index validation before accessing arrays
NOT BUG:PR#3375
NOT BUG:Facilitate back-porting of AESNI and SHA modules Fix SEH and stack handling in Win64 build
NOT BUG:Added OPENSSL_assert check as per PR#3377 reported by Rainer Jung <rainer.jung@kippdata.de>
NOT BUG:Fix Windows build (cherry picked from commit 5f4c5a902b0508eab235adecb34b236cdc0048a5)
NOT BUG:Enable multi-block support by default
NOT BUG:Fix compilation with no-comp
NOT BUG:ghash-x86_64.pl: optimize for upcoming Atom
NOT BUG:Add support for Intel SHA extension
BUG:Separate the SCT List parser from the SCT List viewer
NOT BUG:Fixed incorrect return code handling in ssl3_final_finish_mac
NOT BUG:aesni-mb-x86_64.pl: add Win64 SEH
NOT BUG:add ECC strings to ciphers(1) point out difference between DH and ECDH
NOT BUG:* Make a clear distinction between DH and ECDH key exchange * Group all key exchange cipher suite identifiers first DH then ECDH * add descriptions for all supported *DH* identifiers * add ECDSA authentication descriptions * add example showing how to disable all suites that offer no authentication or encryption
NOT BUG:Create test/testutil.h for unit test helper macros
NOT BUG:Defines SETUP_TEST_FIXTURE and EXECUTE_TEST and updates ssl/heartbeat_test.c using these macros SETUP_TEST_FIXTURE makes use of the new TEST_CASE_NAME macro defined to use __func__ or __FUNCTION__ on platforms that support those symbols or to use the file name and line number otherwise This should fix several reported build problems related to lack of C99 support
NOT BUG:Fix null pointer errors
BUG:PR#3394
NOT BUG:SRP ciphersuite correction
NOT BUG:SRP ciphersuites do not have no authentication They have authentication based on SRP Add new SRP authentication flag and cipher string
NOT BUG:Update strength_bits for 3DES
BUG:Fix strength_bits to 112 for 3DES
NOT BUG:Link heartbeat_test with the static version of the libraries
NOT BUG:It's using an internal API that that might not be available in the shared library
BUG:Create ~/.rnd with mode 0600 instead of 0666
BUG:Because of a missing include <fcntl.h> we don't have O_CREATE and don't create the file with open() using mode 0600 but fall back to using fopen() with the default umask followed by a chmod()
BUG:Problem found by Jakub Wilk <jwilk@debian.org>
BUG:Make tls_session_secret_cb work with CVE-2014-0224 fix
NOT BUG:If application uses tls_session_secret_cb for session resumption set the CCS_OK flag
NOT BUG:Add official extension value
NOT BUG:Encrypt then MAC now has an official extension value see:
NOT BUG:http://www.ietf.org/id/draft-ietf-tls-encrypt-then-mac-02.txt
NOT BUG:Fixed minor duplication in docs
NOT BUG:ARM assembly pack: get ARMv7 instruction endianness right
NOT BUG:Pointer out and suggested by: Ard Biesheuvel
NOT BUG:sha[1|512]-armv8.pl: get instruction endianness right
NOT BUG:Submitted by: Ard Biesheuvel
NOT BUG:Engage GHASH for ARMv8
NOT BUG:Add GHASH for ARMv8 Crypto Extension
NOT BUG:Result of joint effort with Ard Biesheuvel
NOT BUG:Update NEWS
NOT BUG:aesv8-armx.pl update:
NOT BUG:- fix 32-bit build (submitted by Ard Biesheuvel); - fix performance issue in CTR;
NOT BUG:Update value to use a free bit
BUG:Fix for CVE-2014-0195
BUG:A buffer overrun attack can be triggered by sending invalid DTLS fragments to an OpenSSL DTLS client or server This is potentially exploitable to run arbitrary code on a vulnerable client or server
NOT BUG:Fixed by adding consistency check for DTLS fragments
NOT BUG:Thanks to Jüri Aedla for reporting this issue (cherry picked from commit 1632ef744872edc2aa2a53d487d3e79c965a4ad3)
BUG:Fix for CVE-2014-0224
NOT BUG:Only accept change cipher spec when it is expected instead of at any time This prevents premature setting of session keys before the master secret is determined which an attacker could use as a MITM attack
NOT BUG:Thanks to KIKUCHI Masashi (Lepidum Co Ltd.) for reporting this issue and providing the initial fix this patch is based on (cherry picked from commit bc8923b1ec9c467755cd86f7848c50ee8812e441)
BUG:Additional CVE-2014-0224 protection
NOT BUG:Return a fatal error if an attempt is made to use a zero length master secret (cherry picked from commit 006cd7083f76ed5cb0d9a914857e9231ef1bc317)
BUG:Fix CVE-2014-0221
NOT BUG:Unnecessary recursion when receiving a DTLS hello request can be used to crash a DTLS client Fixed by handling DTLS hello request without recursion
BUG:Thanks to Imre Rad (Search-Lab Ltd.) for discovering this issue (cherry picked from commit d3152655d5319ce883c8e3ac4b99f8de4c59d846)
BUG:Fix CVE-2014-3470
BUG:Check session_cert is not NULL before dereferencing it (cherry picked from commit 8011cd56e39a433b1837465259a9bd24a38727fb)
NOT BUG:aesp8-ppc.pl: fix typos
NOT BUG:evp/e_aes.c: add erroneously omitted break;
NOT BUG:Corrected OPENSSL_NO_EC_NISTP_64_GCC_128 usage in ec_lcl.h PR#3370
NOT BUG:Check there is enough room for extension
NOT BUG:Free up s->d1->buffered_app_data.q properly
NOT BUG:PR#3286
NOT BUG:evp/e_aes.c: populate HWAES_* to remaning modes
NOT BUG:Submitted by: Ard Biesheuvel
NOT BUG:Allow reordering of certificates when signing
NOT BUG:Add certificates if -nocerts and -certfile specified when signing in smime application This can be used this to specify the order certificates appear in the PKCS#7 structure: some broken applications require a certain ordering
BUG:PR#3316
BUG:Typo: set i to -1 before goto
BUG:PR#3302
NOT BUG:Engage POWER8 AES support
NOT BUG:Added SSLErr call for internal error in dtls1_buffer_record
BUG:Delays the queue insertion until after the ssl3_setup_buffers() call due to use-after-free bug PR#3362
NOT BUG:armv4cpuid.S: switch to CNTVCT tick counter
NOT BUG:sha[1|256]-armv4: harmonize with arm_arch.h
NOT BUG:Engage ARMv8 AES support
NOT BUG:Recognise padding extension
NOT BUG:Option to disable padding extension
NOT BUG:Add TLS padding extension to SSL_OP_ALL so it is used with other "bugs" options and can be turned off
BUG:This replaces SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG which is an ancient option referring to SSLv2 and SSLREF
BUG:PR#3336
NOT BUG:linux-aarch64: engage SHA modules
NOT BUG:Add SHA for ARMv8
NOT BUG:Add linux-aarch64 taget
NOT BUG:armcap.c is shared between 32- and 64-bit builds and features link-time detection of getauxval
NOT BUG:Submitted by: Ard Biesheuvel
NOT BUG:Merge: 3009244 5fc3a5f
NOT BUG:Merge branch 'erbridge-probable_primes'
NOT BUG:Credit to Felix
NOT BUG:Closes #116
NOT BUG:Tidy up don't exceed the number of requested bits
BUG:Constify and reduce coprime random bits to allow for multiplier
NOT BUG:Zero prime doits
NOT BUG:Add option to run all prime tests
NOT BUG:Add a test to check we're really generating probable primes
NOT BUG:Remove unused BIGNUMs
NOT BUG:Only count successful generations
NOT BUG:Refactor the first prime index
NOT BUG:Try skipping over the adding and just picking a new random number
NOT BUG:Generates a number coprime to 2 3 5 7 11
BUG:Speed: Trial div (add) : trial div (retry) : coprime 1 : 0.42 : 0.84
BUG:Remove editor barf on updating copyright
NOT BUG:Add python script to generate the bits needed for the prime generator
NOT BUG:Generate safe primes not divisible by 3 5 or 7
NOT BUG:~2% speed improvement on trial division
NOT BUG:Add a method to generate a prime that is guaranteed not to be divisible by 3 or 5
NOT BUG:Possibly some reduction in bias but no speed gains
NOT BUG:Run the prime speed tests for 10 seconds
NOT BUG:Tidy up speed.c a little
NOT BUG:Add speed test for prime trial division
NOT BUG:Remove static from probable_prime_dh
NOT BUG:Remove indentation from the goto targets
NOT BUG:Strip trailing whitespace from Configure
NOT BUG:Add a new target to Configure for me
NOT BUG:Set default global mask to UTF8 only
NOT BUG:Allocate extra space when NETSCAPE_HANG_BUG defined
NOT BUG:Make sure there is an extra 4 bytes for server done message when NETSCAPE_HANG_BUG is defined
NOT BUG:PR#3361
BUG:Initialise alg
BUG:PR#3313
BUG:Use correct digest when exporting keying material
BUG:PR#3319
NOT BUG:Don't compile heartbeat test code on Windows (for now)
NOT BUG:add description of -attime to man page
NOT BUG:the verify app man page didn't describe the usage of attime option even though it was listed as a valid option in the -help message
NOT BUG:This patch fixes this omission
NOT BUG:add description of -no_ecdhe option to s_server man page
NOT BUG:While the -help message references this option the man page doesn't mention the -no_ecdhe option This patch fixes this omission
NOT BUG:aesv8-armx.pl: add CTR implementation
NOT BUG:Submitted by: Ard Biesheuvel
NOT BUG:Set version number correctly
BUG:PR#3249
NOT BUG:Fix memory leak
BUG:PR#3278
NOT BUG:remove duplicate 0x for default RSASSA-PSS salt len
NOT BUG:aesp8-ppc.pl: optimize CBC decrypt even further
NOT BUG:10-19% improvement depending on key length and endianness
BUG:Fix for test_bn regular expression to work on Windows using MSYS PR#3346
NOT BUG:Changed -strictpem to use PEM_read_bio
NOT BUG:Added -strictpem parameter to enable processing of PEM files with data prior to the BEGIN marker
NOT BUG:Fix cast of boolean where cast of LHS intended
NOT BUG:Closes #74
BUG:Fixed error in args for SSL_set_msg_callback and SSL_set_msg_callback_arg
NOT BUG:Make it build
NOT BUG:Closes #31
NOT BUG:add test case to makefiles
NOT BUG:Implement tests for PKCS#5 PBKDF2 HMAC
NOT BUG:Don't use expired certificates if possible
NOT BUG:When looking for the issuer of a certificate if current candidate is expired continue looking Only return an expired certificate if no valid certificates are found
NOT BUG:PR#3359
NOT BUG:Rename vpm_int.h to x509_lcl.h
NOT BUG:Fix for non compilation with TLS_DEBUG defined
NOT BUG:Only copy opensslconf.h at init time
NOT BUG:Modify the description of -noout to match the manpage PR#3364
NOT BUG:Add an NSS output format to sess_id to export to export the session id and the master key in NSS keylog format PR#3352
NOT BUG:OpenSSL is able to generate a certificate with name constraints with any possible subjectAltName field The Name Contraint example in x509v3_config(5) even use IP as an example:
BUG:nameConstraints=permitted;IP:192.168.0.0/255.255.0.0
NOT BUG:However until now the verify code for IP name contraints did not exist Any check with a IP Address Name Constraint results in a "unsupported name constraint type" error
NOT BUG:This patch implements support for IP Address Name Constraint (v4 and v6) This code validaded correcly certificates with multiple IPv4/IPv6 address checking against a CA certificate with these constraints:
BUG:permitted;IP.1=10.9.0.0/255.255.0.0 permitted;IP.2=10.48.0.0/255.255.0.0 permitted;IP.3=10.148.0.0/255.255.0.0 permitted;IP.4=fdc8:123f:e31f::/ffff:ffff:ffff::
NOT BUG:Signed-off-by: Luiz Angelo Daros de Luca <luizluca@gmail.com>
NOT BUG:aesp8-ppc.pl: add optimized CBC decrypt
NOT BUG:vpaes-ppc.pl: comply with ABI
NOT BUG:Merge: eb33348 647c70f
BUG:Merge branch 'heartbeat-test' of git://github.com/mbland/openssl
NOT BUG:Fix heartbeat_test for -DOPENSSL_NO_HEARTBEATS
BUG:Replaces the entire test with a trivial implementation when OPENSSL_NO_HEARTBEATS is defined
NOT BUG:Check length first in BUF_strnlen()
NOT BUG:Fixed minor copy&paste error and stray space causing rendering problem
NOT BUG:Fixed unterminated B tag causing build to fail with newer pod2man versions
NOT BUG:Remove redundant test
NOT BUG:Implement BUF_strnlen() and use it instead of strlen()
NOT BUG:Fixes to host checking
NOT BUG:Fixes to host checking wild card support and add support for setting host checking flags when verifying a certificate chain
NOT BUG:Fix for PKCS12_create if no-rc2 specified
NOT BUG:Use triple DES for certificate encryption if no-rc2 is specified
BUG:PR#3357
NOT BUG:Change default cipher in smime app to des3
BUG:PR#3357
NOT BUG:aesv8-armx.pl: fix typo
NOT BUG:aesv8-armx.pl: optimize by adding 128-bit code paths
NOT BUG:Don't allocate more than is needed in BUF_strndup()
NOT BUG:For portability use BUF_strndup instead of strndup
NOT BUG:Adding padding extension to trace code
NOT BUG:Fix bug in signature algorithm copy
NOT BUG:Fix a wrong parameter count ERR_add_error_data
NOT BUG:Merge: 5727e4d 2ec52dc
BUG:Merge branch 'mbland-heartbeat-test'
NOT BUG:Fixup for ancient compilers
NOT BUG:Zero-initialize heartbeat test write buffer
NOT BUG:The previous calls to memset() were added to tear_down() when I noticed the test spuriously failing in opt mode with different results each time This appeared to be because the allocator zeros out memory in debug mode but not in opt mode Since the heartbeat functions silently drop the request on error without modifying the contents of the write buffer whatever random contents were in memory before being reallocated to the write buffer used in the test would cause nondeterministic test failures in the Heartbleed regression cases Adding these calls allowed the test to pass in both debug and opt modes
NOT BUG:Ben Laurie notified me offline that the test was aborting in debug-ben-debug-64-clang mode configured with GitConfigure and built with GitMake Looking into this I realized the first memset() call was zeroing out a reference count used by SSL_free() that was checked in debug-ben-debug-64-clang mode but not in the normal debug mode
NOT BUG:Removing the memset() calls from tear_down() and adding a memset() for the write buffer in set_up() addresses the issue and allows the test to successfully execute in debug opt and debug-ben-debug-64-clang modes
NOT BUG:More through error checks in set_up
NOT BUG:Checks the return values of ssl_init_wbio_buffer() and ssl3_setup_buffers()
NOT BUG:Make it build/run
NOT BUG:Unit/regression test for TLS heartbeats
BUG:Regression test against CVE-2014-0160 (Heartbleed)
NOT BUG:More info: http://mike-bland.com/tags/heartbleed.html
NOT BUG:Add "teaser" AES module for ARMv8
NOT BUG:"Teaser" means that it's initial proof-of-concept to build EVP module upon
NOT BUG:Moved note about lack of support for AEAD modes out of BUGS section to SUPPORTED CIPHERS section (bug has been fixed but still no support for AEAD)
NOT BUG:Enc doesn't support AEAD ciphers (cherry picked from commit 09184dddead165901700b31eb39d540ba30f93c5)
NOT BUG:Fix grammar error in verify pod PR#3355
NOT BUG:Add information to BUGS section of enc documentation PR#3354
NOT BUG:Corrected POD syntax errors PR#3353
NOT BUG:Have the .pc files depend on each other rather than duplicating the various link settings PR#3332
BUG:Check sk_SSL_CIPHER_num() after assigning sk
NOT BUG:Correct the return type on the signature for X509_STORE_CTX_get_ex_data given in the pod file
NOT BUG:Replace manual ASN1 decoder with ASN1_get_object
NOT BUG:Replace manual ASN.1 decoder with ASN1_get object This will decode the tag and length properly and check against it does not exceed the supplied buffer length
BUG:PR#3335
NOT BUG:Correct example
NOT BUG:Add "teaser" AES module for PowerISA 2.07
NOT BUG:"Teaser" means that it's not integrated yet and purpose of this such as how to handle alignment and endianness In other words it's proof-of-concept code that EVP module will build upon
NOT BUG:Fixed NULL pointer dereference See PR#3321
NOT BUG:Set authkey to NULL and check malloc return value
BUG:dgram_sctp_ctrl: authkey memory leak
NOT BUG:PR: 3327
BUG:Avoid out-of-bounds write in SSL_get_shared_ciphers
NOT BUG:PR: 3317
NOT BUG:Fix infinite loop PR#3347
NOT BUG:Move length check earlier to ensure we don't go beyond the end of the user's buffer PR#3320
NOT BUG:safety check to ensure we dont send out beyond the users buffer
NOT BUG:Fixed CRLF in file
NOT BUG:Return an error if no recipient type matches
NOT BUG:If the key type does not match any CMS recipient type return an error instead of using a random key (MMA mitigation) This does not leak any useful information to an attacker
BUG:PR#3348
NOT BUG:s_client/s_server: support unix domain sockets
NOT BUG:The "-unix <path>" argument allows s_server and s_client to use a unix domain socket in the filesystem instead of IPv4 ("-connect" "-port" "-accept" etc) If s_server exits gracefully such as when "-naccept" is used and the requested number of SSL/TLS connections have occurred then the domain socket file is removed On ctrl-C it is likely that the stale socket file will be left over such that s_server would normally fail to restart with the same arguments For this reason s_server also supports an "-unlink" option which will clean up any stale socket file before starting
NOT BUG:If you have any reason to want encrypted IPC within an O/S instance this concept might come in handy Otherwise it just demonstrates that there is nothing about SSL/TLS that limits it to TCP/IP in any way
NOT BUG:(There might also be benchmarking and profiling use in this path as unix domain sockets are much lower overhead than connecting over local IP addresses)
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:coverity 966576 - close socket in error path
NOT BUG:PR#3342 fix resource leak coverity issue 966577
NOT BUG:fix coverity issue 966597 - error line is not always initialised
NOT BUG:Fixed NULL pointer dereference in PKCS7_dataDecode reported by David Ramos in PR#3339
NOT BUG:evp: prevent underflow in base64 decoding
BUG:This patch resolves RT ticket #2608
BUG:Thanks to Robert Dugal for originally spotting this and to David Ramos for noticing that the ball had been dropped
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
BUG:bignum: allow concurrent BN_MONT_CTX_set_locked()
NOT BUG:The lazy-initialisation of BN_MONT_CTX was serialising all threads as noted by Daniel Sands and co at Sandia This was to handle the case that 2 or more threads race to lazy-init the same context but stunted all scalability in the case where 2 or more threads are doing unrelated things! We favour the latter case by punishing the former The init work gets done by each thread that finds the context to be uninitialised and we then lock the "set" logic after that work is done - the winning thread's work gets used the losing threads throw away what they've done
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Initialize num properly
BUG:PR#3289 PR#3345
NOT BUG:Set Enveloped data version to 2 if ktri version not zero
NOT BUG:- fix coverity issues 966593-966596
NOT BUG:apps/s_server: document '-naccept' cmd-line argument
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:md5/asm/md5-[586|x86_64].pl: +15% on Atom
BUG:[MD5 is hardly relevant just cleaning up repository]
BUG:C64x+ assembply pack: add RC4 module
BUG:C64x+ assembly pack: make it work with older toolchain
NOT BUG:sha/asm/sha1-armv4-large.pl: add NEON and ARMv8 code paths sha/asm/sha256-armv4.pl: add ARMv8 code path
NOT BUG:crypto/armcap.c: detect ARMv8 capabilities [in 32-bit build]
NOT BUG:Double free in i2o_ECPublicKey
NOT BUG:PR: 3338
NOT BUG:dso: eliminate VMS code on non-VMS systems
NOT BUG:Even though the meat of dso_vms.c is compiled out on non-VMS builds the (pre-)compiler still traverses some of the macro handling This trips up at least one non-VMS build configuration so this commit makes the skip-VMS case more robust
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:typo in SSL_get_peer_cert_chain docs
NOT BUG:RT: 3304
NOT BUG:Fixed spelling error in error message Fix supplied by Marcos Marado
NOT BUG:bignum: fix boundary condition in montgomery logic
NOT BUG:It's not clear whether this inconsistency could lead to an actual computation error but it involved a BIGNUM being passed around the montgomery logic in an inconsistent state This was found using flags -DBN_DEBUG -DBN_DEBUG_RAND and working backwards from this assertion in 'ectest';
NOT BUG:ectest: bn_mul.c:960: BN_mul: Assertion `(_bnum2->top == 0) || (_bnum2->d[_bnum2->top - 1] != 0)' failed
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:More warnings
NOT BUG:Merge: b5450d6 fa9d77d
NOT BUG:Fix SSL_CONF_cmd missing =back
NOT BUG:Fixed minor errors in docs
NOT BUG:PKCS5_PBKDF2_HMAC documentation submitted by Jeffrey Walton
NOT BUG:doc: Add missing =back directive
BUG:Signed-off-by: Chris Rorvick <chris@rorvick.com>
NOT BUG:Fix version documentation
NOT BUG:Specify -f is for compilation flags Add -d to synopsis section
NOT BUG:Closes #77
NOT BUG:Fix eckey_priv_encode()
NOT BUG:Fix eckey_priv_encode to return an error on failure of i2d_ECPrivateKey
NOT BUG:make depend
NOT BUG:apps: constify some string parameters
BUG:There are certainly many more constifiable strings in the various interfaces which I hope to get to eventually
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:util/mkerr.pl: fix perl warning
NOT BUG:Gets rid of this;
NOT BUG:defined(@array) is deprecated at ../util/mkerr.pl line 792 (Maybe you should just omit the defined()?) defined(@array) is deprecated at ../util/mkerr.pl line 800 (Maybe you should just omit the defined()?)
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Remove latest version it's pretty redundant and just one more thing to keep up to date with releases Reported because http://www.openssl.org/support/faq.html#MISC1 was out of date
NOT BUG:util/mkdef.pl: o_time.h doesn't exist any more
NOT BUG:o_time.h was removed in commit ff49a94 which breaks "make update" unless mkdir.pl is updated accordingly
NOT BUG:Signed-off-by: Geoff Thorpe <geoff@openssl.org>
NOT BUG:Add new sponsors
NOT BUG:bn/asm/armv4-gf2m.pl modes/asm/ghash-armv4.pl: faster multiplication algorithm suggested in following paper:
NOT BUG:Câmara D.; Gouvêa C P L.; López J & Dahab R.: Fast Software Polynomial Multiplication on ARM Processors using the NEON Engine
NOT BUG:http://conradoplg.cryptoland.net/files/2010/12/mocrysen13.pdf
NOT BUG:aes/asm/bsaes-x86_64.pl: Atom-specific optimization
NOT BUG:Fix use after free
NOT BUG:Fix double frees
NOT BUG:Fix SSL_CTX_get{first,next}_certificate
NOT BUG:Fix typo that stopped SSL_CTX_get_{first,next}_certificate from working
NOT BUG:Document -debug_decrypt option
NOT BUG:Extension checking fixes
NOT BUG:When looking for an extension we need to set the last found position to -1 to properly search all extensions
NOT BUG:PR#3309
NOT BUG:Clarify CMS_decrypt behaviour
NOT BUG:Add new key fingerprint
NOT BUG:Fix free errors in ocsp utility
NOT BUG:Keep copy of any host path and port values allocated by OCSP_parse_url and free as necessary
NOT BUG:ssleay_rand_add returns a value in 1.1.0
NOT BUG:Update NEWS
NOT BUG:Return if ssleay_rand_add called with zero num
NOT BUG:Treat a zero length passed to ssleay_rand_add a no op: the existing logic zeroes the md value which is very bad OpenSSL itself never does this internally and the actual call doesn't make sense as it would be passing zero bytes of entropy
BUG:Thanks to Marcus Meissner <meissner@suse.de> for reporting this bug (cherry picked from commit 5be1ae28ef3c4bdec95b94f14e0e939157be550a)
BUG:Add heartbeat extension bounds check
BUG:A missing bounds check in the handling of the TLS heartbeat extension can be used to reveal up to 64k of memory to a connected client or server
BUG:Thanks for Neel Mehta of Google Security for discovering this bug and to Adam Langley <agl@chromium.org> and Bodo Moeller <bmoeller@acm.org> for preparing the fix (CVE-2014-0160) (cherry picked from commit 96db9023b881d7cd9f379b0c154650d6c108e9a3)
NOT BUG:Document -verify_return_error option
NOT BUG:crypto/modes/gcm128.c: more strict aliasing fixes
NOT BUG:vpaes-[x86_64|ppc].pl: fix typo which for some reason triggers rkhunter
NOT BUG:Set TLS padding extension value
NOT BUG:Enable TLS padding extension using official value from:
BUG:http://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml
NOT BUG:For more than 160 bits of security disable SHA1 HMAC
NOT BUG:Update security framework docs
NOT BUG:Update FAQ
NOT BUG:Use correct length when prompting for password
BUG:Use bufsiz - 1 not BUFSIZ - 1 when prompting for a password in the openssl utility
BUG:Thanks to Rob Mackinnon Leviathan Security for reporting this issue
NOT BUG:Document new crl option
NOT BUG:Add option to generate old hash format
NOT BUG:New -hash_old to generate CRL hashes using old (before OpenSSL 1.0.0) algorithm
NOT BUG:Fix base64 decoding bug
NOT BUG:A short PEM encoded sequence if passed to the BIO and the file had 2 \n following would fail
BUG:PR#3289
NOT BUG:Don't try and verify signatures if key is NULL (CVE-2013-0166) Add additional check to catch this in ASN1_item_verify too (cherry picked from commit 66e8211c0b1347970096e04b18aa52567c325200)
NOT BUG:Fix warning
NOT BUG:Add initial security framework docs
NOT BUG:Set security level in cipher string
NOT BUG:Allow setting of security level in cipher string using the @SECLEVEL=N syntax
NOT BUG:Set security level to zero is ssltest
NOT BUG:Since ssltest needs to test low security ciphersuites and keys set security level to zero so they aren't rejected
NOT BUG:Security callback debug print out
NOT BUG:Add a debugging security callback option to s_client/s_server This will print out each security parameter as it is accepted or rejected
NOT BUG:Security framework
BUG:Security callback: selects which parameters are permitted including sensible defaults based on bits of security
NOT BUG:The "parameters" which can be selected include: ciphersuites curves key sizes certificate signature algorithms supported signature algorithms DH parameters SSL/TLS version session tickets and compression
NOT BUG:In some cases prohibiting the use of a parameters will mean they are not advertised to the peer: for example cipher suites and ECC curves In other cases it will abort the handshake: e.g DH parameters or the peer key size
NOT BUG:Documentation to follow..
NOT BUG:Check return value of ssl3_output_cert_chain
NOT BUG:Allow return of supported ciphers
NOT BUG:New function ssl_cipher_disabled
NOT BUG:Check for disabled client ciphers using ssl_cipher_disabled
NOT BUG:New function to return only supported ciphers
NOT BUG:New option to ciphers utility to print only supported ciphers
NOT BUG:Auto DH support
NOT BUG:Add auto DH parameter support This is roughly equivalent to the ECDH auto curve selection but for DH An application can just call
NOT BUG:SSL_CTX_set_auto_dh(ctx 1);
NOT BUG:and appropriate DH parameters will be used based on the size of the server key
NOT BUG:Unlike ECDH there is no way a peer can indicate the range of DH parameters it supports Some peers cannot handle DH keys larger that 1024 bits for example In this case if you call:
NOT BUG:SSL_CTX_set_auto_dh(ctx 2);
NOT BUG:Only 1024 bit DH parameters will be used
NOT BUG:If the server key is 7680 bits or more in size then 8192 bit DH parameters will be used: these will be *very* slow
NOT BUG:The old export ciphersuites aren't supported but those are very insecure anyway
NOT BUG:Add functions returning security bits
NOT BUG:Add functions to return the "bits of security" for various public key algorithms Based on SP800-57
NOT BUG:Fix memory leak with client auth (cherry picked from commit bc5ec653ba65fedb1619c8182088497de8a97a70)
NOT BUG:Add -no_resumption_on_reneg to SSL_CONF (cherry picked from commit 1f44dac24d1cb752b1a06be9091bb03a88a8598e)
NOT BUG:Update chain building function
NOT BUG:Don't clear verification errors from the error queue unless SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR is set
NOT BUG:If errors occur during verification and SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR is set return 2 so applications can issue warnings (cherry picked from commit 2dd6976f6d02f98b30c376951ac38f780a86b3b5)
NOT BUG:Allow duplicate certs in ssl_build_cert_chain
NOT BUG:Workaround for some CMS signature formats
NOT BUG:Some CMS SignedData structure use a signature algorithm OID such as SHA1WithRSA instead of the RSA algorithm OID Workaround this case by tolerating the signature if we recognise the OID
NOT BUG:Retry callback only after ClientHello received
NOT BUG:Update ordinals
NOT BUG:Use a previously unused value as we will be updating multiple released branches (cherry picked from commit 0737acd2a8cc688902b5151cab5dc6737b82fb96)
BUG:Fix for CVE-2014-0076
BUG:Fix for the attack described in the paper "Recovering OpenSSL ECDSA Nonces Using the FLUSH+RELOAD Cache Side-channel Attack" by Yuval Yarom and Naomi Benger Details can be obtained from: http://eprint.iacr.org/2014/140
BUG:Thanks to Yuval Yarom and Naomi Benger for discovering this flaw and to Yuval Yarom for supplying a fix (cherry picked from commit 2198be3483259de374f91e57d247d0fc667aef29)
NOT BUG:Conflicts:
NOT BUG:CHANGES
NOT BUG:typo
NOT BUG:Simplify ssl_add_cert_chain logic
NOT BUG:Remove -WX option from debug-VC-WIN32 (cherry picked from commit 7a3e67f029969620966b8a627b8485d83692cca5)
NOT BUG:engines/ccgost/gosthash.c: simplify and avoid SEGV
BUG:PR: 3275
NOT BUG:SPARC T4 assembly pack: treat zero input length in CBC
NOT BUG:The problem is that OpenSSH calls EVP_Cipher which is not as protective as EVP_CipherUpdate Formally speaking we ought to do more checks in *_cipher methods including rejecting lengths not divisible by block size (unless ciphertext stealing is in place) But for now I implement check for zero length in low-level based on precedent
BUG:PR: 3087 2775
NOT BUG:dh_check.c: check BN_CTX_get's return value
NOT BUG:test/Makefile: allow emulated test (e.g under wine)
NOT BUG:Submitted by: Roumen Petrov
NOT BUG:bss_dgram.c,d1_lib.c: make it compile with mingw
NOT BUG:Submitted by: Roumen Petrov
NOT BUG:For self signed root only indicate one error (cherry picked from commit bdfc0e284c89dd5781259cc19aa264aded538492)
NOT BUG:PKCS#8 support for alternative PRFs
NOT BUG:Add option to set an alternative to the default hmacWithSHA1 PRF for PKCS#8 private key encryptions This is used automatically by PKCS8_encrypt if the nid specified is a PRF
NOT BUG:Add option to pkcs8 utility
NOT BUG:Update docs (cherry picked from commit b60272b01fcb4f69201b3e1659b4f7e9e9298dfb)
NOT BUG:Fix memory leak (cherry picked from commit 124d218889dfca33d277404612f1319afe04107e)
NOT BUG:Add function to free compression methods
NOT BUG:Although the memory allocated by compression methods is fixed and cannot grow over time it can cause warnings in some leak checking tools The function SSL_COMP_free_compression_methods() will free and zero the list of supported compression methods This should *only* be called in a single threaded context when an application is shutting down to avoid interfering with existing contexts attempting to look up compression methods (cherry picked from commit 976c58302b13d085edb3ab822f5eac4b2f1bff95)
NOT BUG:Makefile.org: fix syntax error on Solaris
BUG:PR: 3271
NOT BUG:Configure: mark unixware target as elf-1
NOT BUG:perlasm/x86asm.pl: recognize elf-1 denoting old ELF platforms
NOT BUG:perlasm/x86gas.pl: limit special OPENSSL_ia32cap_P treatment to ELF
NOT BUG:rc4/asm/rc4-586.pl: allow for 386-only build
NOT BUG:des/asm/des-586.pl: shortcut reference to DES_SPtrans
BUG:CABForum EV OIDs for Subject Jurisdiction of Incorporation or Registration
NOT BUG:Fix for WIN32 builds with KRB5 (cherry picked from commit 3eddd1706a30cdf3dc9278692d8ee9038eac8a0d)
NOT BUG:sha/asm/sha256-586.pl: don't try to compile SIMD with no-sse2
NOT BUG:sha/asm/sha512-x86_64.pl: fix compilation error on Solaris
NOT BUG:Configure: blended processor target in solaris-x86-cc
NOT BUG:ssl/t1_enc.c: check EVP_MD_CTX_copy return value
BUG:PR: 3201
NOT BUG:aes/asm/vpaes-ppc.pl: fix traceback info
BUG:Don't use BN_ULLONG in n2l8 use SCTS_TIMESTAMP (cherry picked from commit 3678161d717d0f46c5b5b052a6d6a33438b1df00)
NOT BUG:Fix for v3_scts.c
NOT BUG:Not all platforms define BN_ULLONG Define SCTS_TIMESTAMP as a type which should work on all platforms (cherry picked from commit 6634416732b94627eba1c47de3c3a6321a5458f0)
NOT BUG:Add -show_chain option to print out verified chain
NOT BUG:Avoid Windows 8 Getversion deprecated errors
BUG:Windows 8 SDKs complain that GetVersion() is deprecated
BUG:We only use GetVersion like this:
BUG:(GetVersion() < 0x80000000)
NOT BUG:which checks if the Windows version is NT based Use a macro check_winnt() which uses GetVersion() on older SDK versions and true otherwise
BUG:Parse non-v1 SCTs less awkwardly
NOT BUG:ms/do_win64a.bat: forward to NUL not NUL:
NOT BUG:Allegedly formwarding to NUL: sometimes creates NUL file in file system
NOT BUG:PR: 3250
NOT BUG:BC-32.pl: refresh Borland C support
NOT BUG:PR: 3251 Suggested by: Thorsten Sch\F6ning
NOT BUG:x509/by_dir.c: fix run-away pointer (and potential SEGV) when adding duplicates in add_cert_dir
BUG:PR: 3261 Reported by: Marian Done
NOT BUG:config: recognize ARMv8/AArch64 target
NOT BUG:Only set current certificate to valid values
NOT BUG:When setting the current certificate check that it has a corresponding private key
NOT BUG:New chain building flags
NOT BUG:New flags to build certificate chains The can be used to rearrange the chain so all an application needs to do is add all certificates in arbitrary order and then build the chain to check and correct them
NOT BUG:Add verify error code when building chain
NOT BUG:Update docs
NOT BUG:Option to set current cert to server certificate
NOT BUG:aes/asm/aesni-x86[_64].pl: minor Atom-specific performance tweak
NOT BUG:fix WIN32 warnings (cherry picked from commit b709f8ef54b1c9ad513878ba0213aa651a9acef8)
NOT BUG:make depend
NOT BUG:Move CT viewer extension code to crypto/x509v3
NOT BUG:make depend
NOT BUG:Remove references to o_time.h
NOT BUG:Move gmtime functions to crypto.h
NOT BUG:Make i2r_sctlist static
NOT BUG:Reverse export of o_time.h
NOT BUG:Merge: 6ecbc2b b263f21
BUG:Merge branch 'sct-viewer-master' of https://github.com/robstradling/openssl into sct-viewer
NOT BUG:Move the SCT List extension parser into libssl Add the extension parser in the s_client ocsp and x509 apps
NOT BUG:Don't use CRYPTO_AES_CTR if it isn't defined
NOT BUG:Restore SSL_OP_MSIE_SSLV2_RSA_PADDING
NOT BUG:The flag SSL_OP_MSIE_SSLV2_RSA_PADDING hasn't done anything since OpenSSL 0.9.7h but deleting it will break source compatibility with any software that references it Restore it but #define to zero (cherry picked from commit b17d6b8d1d49fa4732deff17cfd1833616af0d9c)
NOT BUG:Don't use getcwd in non-copy builds
NOT BUG:Remove duplicate statement
NOT BUG:Add support for aes-128/192/256-ctr to the cryptodev engine This can be used to speed up SRTP with libsrtp e.g on TI omap/sitara based devices
NOT BUG:Show the contents of the RFC6962 Signed Certificate Timestamp List Certificate/OCSP Extensions Add the RFC6962 OIDs to the objects table
NOT BUG:Use defaults bits in req when not given
NOT BUG:If you use "-newkey rsa" it's supposed to read the default number of bits from the config file However the value isn't used to generate the key but it does print it's generating such a key The set_keygen_ctx() doesn't call EVP_PKEY_CTX_set_rsa_keygen_bits() and you end up with the default set in pkey_rsa_init() (1024) Afterwards the number of bits gets read from the config file but nothing is done with that anymore
NOT BUG:We now read the config first and use the value from the config file when no size is given
NOT BUG:PR: 2592
NOT BUG:Fix additional pod errors with numbered items
NOT BUG:Fix various spelling errors
NOT BUG:Document pkcs12 -password behavior
NOT BUG:apps/pkcs12.c accepts -password as an argument The document author almost certainly meant to write "-password -passin"
NOT BUG:However that is not correct either Actually the code treats -password as equivalent to -passin EXCEPT when -export is also specified in which case -password as equivalent to -passout
NOT BUG:ssl/s3_pkt.c: detect RAND_bytes error in multi-block
NOT BUG:x86[_64]cpuid.pl: add low-level RDSEED
NOT BUG:aes/asm/aesni-x86_64.pl: further optimization for Atom Silvermont
NOT BUG:Improve CBC decrypt and CTR by ~13/16% which adds up to ~25/33% improvement over "pre-Silvermont" version [Add performance table to aesni-x86.pl]
NOT BUG:Include TA in checks/callback with partial chains
NOT BUG:When a chain is complete and ends in a trusted root checks are also performed on the TA and the callback notified with ok==1 For consistency do the same for chains where the TA is not self signed
NOT BUG:Don't do loop detection for self signed check
BUG:Add suppot for ASCII with CRLF canonicalisation
NOT BUG:fix error discrepancy (cherry picked from commit a2317c3ffde3f1f73bd7fa3f08e420fb09043905)
NOT BUG:evp/e_aes_cbc_hmac_sha*.c: improve cache locality
NOT BUG:ghash-x86[_64].pl: ~15% improvement on Atom Silvermont (other processors unaffected)
NOT BUG:Fix warning
NOT BUG:Build on MacOS
NOT BUG:Return previous compression methods when setting them
NOT BUG:Oops get selection logic right
NOT BUG:Fix warnings
NOT BUG:Don't break out of the custom extension callback loop - continue instead The contract for custom extension callbacks has changed - all custom extension callbacks are triggered
NOT BUG:Fix whitespace new-style comments
NOT BUG:Re-add alert variables removed during rebase Whitespace fixes
NOT BUG:Updating DTCP authorization type to expected value
NOT BUG:Update custom TLS extension and supplemental data 'generate' callbacks to support sending an alert
NOT BUG:If multiple TLS extensions are expected but not received the TLS extension and supplemental data 'generate' callbacks are the only chance for the receive-side to trigger a specific TLS alert during the handshake
NOT BUG:Removed logic which no-op'd TLS extension generate callbacks (as the generate callbacks need to always be called in order to trigger alerts) and updated the serverinfo-specific custom TLS extension callbacks to track which custom TLS extensions were received by the client where no-ops for 'generate' callbacks are appropriate
NOT BUG:Return per-certificate chain if extra chain is NULL
NOT BUG:If an application calls the macro SSL_CTX_get_extra_chain_certs return either the old "shared" extra certificates or those associated with the current certificate
NOT BUG:This means applications which call SSL_CTX_use_certificate_chain_file and retrieve the additional chain using SSL_CTX_get_extra_chain_certs will still work An application which only wants to check the shared extra certificates can call the new macro SSL_CTX_get_extra_chain_certs_only
NOT BUG:e_aes_cbc_hmac_sha[1|256].c: fix compiler warning
NOT BUG:ssl/s3_pkt.c: move multi-block processing to ssl3_write_bytes
NOT BUG:This allows to process multiple fragmets of maximum fragment size as opposite to chopping maximum-sized fragments to multiple smaller ones This approach relies on dynamic allocation of larger buffers which we trade for performance improvement for several *times* in some situations
NOT BUG:evp/e_aes_cbc_hmac_sha*.c: additional CTRL to query buffer requirements
NOT BUG:[aesni|sha*]-mb-x86_64.pl: add data prefetching
NOT BUG:s3_pkt.c: move ssl3_release_write_buffer to ssl3_write_bytes
NOT BUG:If application has more data than maximum fragment hold to buffer for whole write as opposite to per-fragment strategy
NOT BUG:Add quotes as CC can contain spaces
BUG:PR#3253
NOT BUG:New ctrl to set current certificate
NOT BUG:New ctrl sets current certificate based on certain criteria Currently two options: set the first valid certificate as current and set the next valid certificate as current Using these an application can iterate over all certificates in an SSL_CTX or SSL structure
NOT BUG:Demo of use of errors in applications
NOT BUG:modes/asm/ghash-s390x.pl: +15% performance improvement on z10
NOT BUG:crypto/aes/asm/aesni-x86[_64].pl update up to 14% improvement on Atom Silvermont On other CPUs one can observe 1% loss on some algorithms
NOT BUG:crypto/sha/asm/sha1-x86_64.pl update:
NOT BUG:+5% on Atom Silvermont up to +8% improvement of legacy code Harmonize sha1-586.pl and aesni-sha1-x86_86.p with sha1-x86_64.pl
NOT BUG:Clarify docs
NOT BUG:Remove reference to ERR_TXT_MALLOCED in the error library as that is only used internally Indicate that returned error data must not be freed (cherry picked from commit f2d678e6e89b6508147086610e985d4e8416e867)
NOT BUG:typo
NOT BUG:Check i before r[i]
BUG:PR#3244 (cherry picked from commit 9614d2c676ffe74ce0c919d9e5c0d622a011cbed)
NOT BUG:Fix demo comment: 0.9.9 never released
NOT BUG:Add loaded dynamic ENGINEs to list
NOT BUG:Always add a dynamically loaded ENGINE to list Otherwise it can cause problems when multiply loaded especially if it adds new public key methods For all current engines we only want a single implementation anyway
NOT BUG:New function to set compression methods so they can be safely freed
NOT BUG:Compare encodings in X509_cmp as well as hash
NOT BUG:Add cert callback retry test
NOT BUG:Certificate callback doc
NOT BUG:Support retries in certificate callback
NOT BUG:Add new function SSL_CTX_get_ssl_method()
NOT BUG:Partial fix for PR#3183
NOT BUG:Omit initial status request callback check
BUG:PR#3178
NOT BUG:typo
NOT BUG:Use rdrand as additional entropy source
NOT BUG:If available rdrand is used as an additional entropy source for the PRNG and for additional input in FIPS mode
NOT BUG:typo
NOT BUG:typo
NOT BUG:Fix bug in X509_V_FLAG_IGNORE_CRITICAL CRL handling
NOT BUG:update remaining documentation to move from EDH to DHE
NOT BUG:change documentation and comments to indicate that we prefer the standard "DHE" naming scheme everywhere over the older "EDH"
NOT BUG:Replace EDH-RSA-DES-CBC-SHA etc with DHE-RSA-DES-CBC-SHA
NOT BUG:Replace the full ciphersuites with "EDH-" in their labels with "DHE-" so that all DHE ciphersuites are referred to in the same way
NOT BUG:Leave backward-compatible aliases for the ciphersuites in question so that configurations which specify these explicitly will continue working
NOT BUG:change SSL3_CK_EDH_* to SSL_CK_DHE_* (with backward-compatibility)
BUG:This change normalizes the SSL_CK_DHE_ #defines to use the common term "DHE" while permitting older code that uses the more uncommon "EDH" constants to compile properly
NOT BUG:documentation should use "DHE" instead of "EDH"
NOT BUG:use SSL_kDHE throughout instead of SSL_kEDH
NOT BUG:DHE is the standard term used by the RFCs and by other TLS implementations It's useful to have the internal variables use the standard terminology
NOT BUG:This patch leaves a synonym SSL_kEDH in place though so that older code can still be built against it since that has been the traditional API SSL_kEDH should probably be deprecated at some point though
NOT BUG:emit "DHE" instead of "edh" for kX packet trace output
BUG:other parts of packet tracing emit the standard "DHE" label instead of "edh" This change brings the output of ssl_print_client_keyex() and ssl_print_server_keyex() into accordance with the standard term
BUG:Allow "DHE" and "kDHE" as synonyms of "EDH" and "kEDH" when specifiying ciphers
NOT BUG:The standard terminology in https://tools.ietf.org/html/rfc5426 is "DHE" "openssl ciphers" outputs "DHE" (for the most part) But users of the library currently cannot specify "DHE" they must currently specify "EDH"
NOT BUG:This change allows users to specify the common term in cipher suite strings without breaking backward compatibility
NOT BUG:use SSL_kECDHE throughout instead of SSL_kEECDH
BUG:ECDHE is the standard term used by the RFCs and by other TLS implementations It's useful to have the internal variables use the standard terminology
NOT BUG:This patch leaves a synonym SSL_kEECDH in place though so that older code can still be built against it since that has been the traditional API SSL_kEECDH should probably be deprecated at some point though
BUG:emit "ECDHE" instead of "EECDH" for kX packet trace output
BUG:other parts of packet tracing emit the standard "ECDHE" label instead of "EECDH" This change brings the output of ssl_print_client_keyex() and ssl_print_server_keyex() into accordance with the standard term
BUG:Allow "ECDHE" as a synonym of "EECDH" when specifiying ciphers
BUG:The standard terminology in https://tools.ietf.org/html/rfc4492 is ECDHE "openssl ciphers" outputs ECDHE But users of the library currently cannot specify ECDHE they must specify EECDH
NOT BUG:This change allows users to specify the common term in cipher suite strings without breaking backward compatibility
NOT BUG:bn/asm/x86_64-mont5.pl: fix compilation error on Solaris
NOT BUG:update FAQ
NOT BUG:PPC assembly pack: relax 64-bit requirement for little-endian support
NOT BUG:aes/asm/vpaes-ppc.pl: add little-endian support
NOT BUG:update NEWS
NOT BUG:Add fix for CVE-2013-4353 (cherry picked from commit 6b42ed4e7104898f4b5b69337589719913b36404)
NOT BUG:Sync NEWS
NOT BUG:sha/asm/sha256-armv4.pl: add NEON code path (and shave off cycle even from integer-only code)
NOT BUG:aesni-sha1-x86_64.pl: refine Atom-specific optimization (and update performance data and fix typo)
NOT BUG:Add ServerInfoFile to SSL_CONF update docs
NOT BUG:Use algorithm specific chains for certificates
NOT BUG:Fix a limitation in SSL_CTX_use_certificate_chain_file(): use algorithm specific chains instead of the shared chain
NOT BUG:Update docs
NOT BUG:ssl/t1_enc.c: optimize PRF (suggested by Intel)
NOT BUG:aesni-sha1-x86_64.pl: add stiched decrypt procedure but keep it disabled too little gain.. Add some Atom-specific optimization
NOT BUG:Don't change version number if session established
NOT BUG:When sending an invalid version number alert don't change the version number to the client version if a session is already established
BUG:Thanks to Marek Majkowski for additional analysis of this issue
BUG:PR#3191
NOT BUG:Update curve list size (cherry picked from commit cfa86987a8d9d2b8cc5e5fea2d3260c46542cdb9)
NOT BUG:sparcv9cap.c: omit random detection
BUG:PR: 3202
NOT BUG:FAQ: why SIGILL?
NOT BUG:ARM assembly pack: make it work with older toolchain
BUG:Canonicalise input in CMS_verify
NOT BUG:If content is detached and not binary mode translate the input to CRLF format Before this change the input was verified verbatim which lead to a discrepancy between sign and verify
NOT BUG:Fix DTLS retransmission from previous session
BUG:For DTLS we might need to retransmit messages from the previous session so keep a copy of write context in DTLS retransmission buffers instead of replacing it after sending CCS CVE-2013-6450 (cherry picked from commit 34628967f1e65dc8f34e000f0f5518e21afbfc7b)
NOT BUG:Ignore NULL parameter in EVP_MD_CTX_destroy (cherry picked from commit a6c62f0c25a756c263a80ce52afbae888028e986)
NOT BUG:sha1-x86_64.pl: harmonize Win64 SE handlers for SIMD code pathes (and ensure stack alignment in the process)
NOT BUG:evp/e_[aes|camellia].c: fix typo in CBC subroutine
NOT BUG:It worked because it was never called
NOT BUG:PPC assembly pack update addendum
BUG:sha512.c: fullfull implicit API contract in SHA512_Transform
NOT BUG:SHA512_Transform was initially added rather as tribute to tradition than for practucal reasons But use was recently found in ssl/s3_cbc.c and it turned to be problematic on platforms that don't tolerate misasligned references to memory and lack assembly subroutine
NOT BUG:PPC assembly pack: improve AIX support (enable vpaes-ppc)
NOT BUG:Check EVP errors for handshake digests
BUG:Partial mitigation of PR#3200 (cherry picked from commit 0294b2be5f4c11e60620c0018674ff0e17b14238)
NOT BUG:Update demo
NOT BUG:Add opaque ID structure
NOT BUG:Move the IP email and host checking fields from the public X509_VERIFY_PARAM structure into an opaque X509_VERIFY_PARAM_ID structure By doing this the structure can be modified in future without risk of breaking any applications (cherry picked from commit adc6bd73e3bd10ce6e76867482e8d137071298d7)
NOT BUG:Conflicts:
NOT BUG:crypto/x509/x509_vpm.c
BUG:Update to pad extension
NOT BUG:Fix padding calculation for different SSL_METHOD types Use the standard name as used in draft-agl-tls-padding-02
NOT BUG:Fix for partial chain notification
NOT BUG:For consistency with other cases if we are performing partial chain verification with just one certificate notify the callback with ok==1 (cherry picked from commit 852553d9005e13aed7feb986a5d71cb885b994c7)
NOT BUG:Verify parameter retrieval functions
NOT BUG:New functions to retrieve internal pointers to X509_VERIFY_PARAM for SSL_CTX and SSL structures (cherry picked from commit be0c9270690ed9c1799900643cab91de146de857)
NOT BUG:Don't use rdrand engine as default unless explicitly requested (cherry picked from commit 16898401bd47a153fbf799127ff57fdcfcbd324f)
NOT BUG:remove obsolete STATUS file
NOT BUG:Add release dates to NEWS
NOT BUG:x86_64-xlate.pl: minor update
NOT BUG:bn/asm/x86_64-mont5.pl: add MULX/AD*X code path
NOT BUG:This also eliminates code duplication between x86_64-mont and x86_64-mont and optimizes even original non-MULX code
NOT BUG:bn/asm/armv4-mont.pl: add NEON code path
BUG:perlasm/ppc-xlate.pl: add support for AltiVec/VMX and VSX
NOT BUG:Suggested by: Marcello Cerri
NOT BUG:perlasm/ppc-xlate.pl: improve linux64le support
NOT BUG:Suggested by: Marcello Cerri
NOT BUG:aes/asm/vpaes-ppc.pl: comply with ABI
NOT BUG:Configure: remove vpaes-ppc from aix targets
NOT BUG:AIX assembler doesn't hanle .align which is essential for vpaes module
NOT BUG:bn/asm/x86_64-mont5.pl: comply with Win64 ABI
NOT BUG:PR: 3189 Submitted by: Oscar Ciurana
NOT BUG:crypto/bn/asm/rsaz-x86_64.pl: make it work on Win64
NOT BUG:crypto/bn/rsaz*: fix licensing note
NOT BUG:rsaz_exp.c: harmonize line terminating; asm/rsaz-*.pl: minor optimizations
NOT BUG:bn/asm/rsaz-x86_64.pl: fix prototype
NOT BUG:Simplify and update openssl.spec
NOT BUG:vpaes-ppc.pl: fix bug in IV handling and comply with ABI
NOT BUG:ppc64-mont.pl: eliminate dependency on GPRs' upper halves
NOT BUG:Take vpaes-ppc module into loop
NOT BUG:Add Vector Permutation AES for PPC
NOT BUG:New functions to retrieve certificate from SSL_CTX
NOT BUG:New functions to retrieve current certificate or private key from an SSL_CTX
NOT BUG:Constify SSL_get_private_key()
NOT BUG:Don't define SSL_select_next_proto if OPENSSL_NO_TLSEXT set
NOT BUG:Use correct header length in ssl3_send_certifcate_request
NOT BUG:Constify (cherry picked from commit 1abfa78a8ba714f7e47bd674db53dbe303cd1ce7)
BUG:Fix compilation with no-nextprotoneg
BUG:PR#3106
NOT BUG:Flag to disable automatic copying of contexts
NOT BUG:Some functions such as EVP_VerifyFinal only finalise a copy of the passed context in case an application wants to digest more data Doing this when it is not needed is inefficient and many applications don't require it
NOT BUG:For compatibility the default is to still finalise a copy unless the flag EVP_MD_CTX_FLAG_FINALISE is set in which case the passed context is finalised an *no* further data can be digested after finalisation
NOT BUG:Allow match selecting of current certificate
NOT BUG:If pointer comparison for current certificate fails check to see if a match using X509_cmp succeeds for the current certificate: this is useful for cases where the certificate pointer is not available
NOT BUG:Additional "chain_cert" functions
BUG:PR#3169
NOT BUG:This patch which currently applies successfully against master and 1_0_2 adds the following functions:
NOT BUG:SSL_[CTX_]select_current_cert() - set the current certificate without disturbing the existing structure
NOT BUG:SSL_[CTX_]get0_chain_certs() - get the current certificate's chain
NOT BUG:SSL_[CTX_]clear_chain_certs() - clear the current certificate's chain
NOT BUG:The patch also adds these functions to and fixes some existing errors in SSL_CTX_add1_chain_cert.pod
NOT BUG:Delete duplicate entry
BUG:PR#3172
NOT BUG:Configure: add linux-ppc64le target
NOT BUG:Submitted by: Marcelo Cerri
NOT BUG:srp/srp_grps.h: make it Compaq C-friendly
NOT BUG:PR: 3165 Submitted by: Daniel Richard G
NOT BUG:modes/asm/ghash-alpha.pl: fix typo
NOT BUG:Make Makefiles OSF-make-friendly
NOT BUG:PR: 3165
NOT BUG:Fix memory leak
NOT BUG:Support setting of "no purpose" for trust
NOT BUG:If the oid parameter is set to NULL in X509_add1_trust_object create an empty list of trusted purposes corresponding to "no purpose" if trust is checked
NOT BUG:Update FAQ
NOT BUG:Makfile.org: make FIPS build work with BSD make
NOT BUG:Update FAQ with PGP note
NOT BUG:Fix for some platforms where "char" is unsigned
NOT BUG:Document RSAPublicKey_{in,out} options
NOT BUG:Add CMS_SignerInfo_get0_signature function
NOT BUG:Add function to retrieve the signature from a CMS_SignerInfo structure: applications can then read or modify it
NOT BUG:Check for missing components in RSA_check
NOT BUG:modes/asm/ghash-alpha.pl: make it work with older assembler for real
NOT BUG:PR: 3165
NOT BUG:engines/ccgost/gost89.h: make word32 defintion unconditional
NOT BUG:Original definition depended on __LONG_MAX__ that is not guaranteed to be present As we don't support platforms with int narrower that 32 bits it's appropriate to make defition inconditional
NOT BUG:PR: 3165
NOT BUG:modes/asm/ghash-alpha.pl: make it work with older assembler
NOT BUG:PR: 3165
BUG:Experimental workaround TLS filler (WTF) extension
NOT BUG:Based on a suggested workaround for the "TLS hang bug" (see FAQ and PR#2771): if the TLS Client Hello record length value would otherwise be > 255 and less that 512 pad with a dummy extension containing zeroes so it is at least 512
NOT BUG:To enable it use an unused extension number (for example 0x4242) using e.g -DTLSEXT_TYPE_wtf=0x4242
NOT BUG:WARNING: EXPERIMENTAL SUBJECT TO CHANGE
NOT BUG:Enable PSK in FIPS mode
NOT BUG:Enable PSK ciphersuites with AES or DES3 in FIPS mode
NOT BUG:Sync error codes with 1.0.2-stable
NOT BUG:Initialise context before using it (cherry picked from commit a4947e4e064d2d5bb622ac64cf13edc4a46ed196)
NOT BUG:PBKDF2 should be efficient Contributed by Christian Heimes <christian@python.org>
NOT BUG:Add brainpool curves to trace output (cherry picked from commit bd80d0229c9a154f569b046365bc85d76b59cfc5)
BUG:DTLS/SCTP struct authchunks Bug
BUG:PR: 2809
NOT BUG:DTLS/SCTP requires DATA and FORWARD-TSN chunks to be protected with SCTP-AUTH It is checked if this has been activated successfully for the local and remote peer Due to a bug however the gauth_number_of_chunks field of the authchunks struct is missing on FreeBSD and was therefore not considered in the OpenSSL implementation This patch sets the corresponding pointer for the check correctly whether or not this bug is present (cherry picked from commit f596e3c491035fe80db5fc0c3ff6b647662b0003)
NOT BUG:DTLS/SCTP Finished Auth Bug
BUG:PR: 2808
NOT BUG:With DTLS/SCTP the SCTP extension SCTP-AUTH is used to protect DATA and FORWARD-TSN chunks The key for this extension is derived from the master secret and changed with the next ChangeCipherSpec whenever a new key has been negotiated The following Finished then already uses the new key Unfortunately the ChangeCipherSpec and Finished are part of the same flight as the ClientKeyExchange which is necessary for the computation of the new secret Hence these messages are sent immediately following each other leaving the server very little time to compute the new secret and pass it to SCTP before the finished arrives So the Finished is likely to be discarded by SCTP and a retransmission becomes necessary To prevent this issue the Finished of the client is still sent with the old key (cherry picked from commit 9fb523adce6fd6015b68da2ca8e4ac4900ac2be2)
NOT BUG:Fix SSL_OP_SINGLE_ECDH_USE
NOT BUG:Don't require a public key in tls1_set_ec_id if compression status is not needed This fixes a bug where SSL_OP_SINGLE_ECDH_USE wouldn't work (cherry picked from commit 5ff68e8f6dac3b0d8997b8bc379f9111c2bab74f)
NOT BUG:Add -ecdh_single option
NOT BUG:Add -ecdh_single option to set SSL_OP_SINGLE_ECDH_USE on the command line (cherry picked from commit f14a4a861d2d221ed565a75441a218f85b8db530)
NOT BUG:Fix warning
NOT BUG:Fix warning
NOT BUG:sha/asm/sha512-ppc.pl: fix typo
NOT BUG:Submitted by: Marcelo Cerri
NOT BUG:perlas/ppc-xlate.pl: fix typo
NOT BUG:aes/asm/aes-ppc.pl: add little-endian support
NOT BUG:Submitted by: Marcelo Cerri
NOT BUG:perlasm/ppc-xlate.pl: add .quad directive sha/asm/sha512-ppc.pl: add little-endian support
NOT BUG:Submitted by: Marcelo Cerri
NOT BUG:sha/asm/sha1-ppc.pl: add little-endian support
NOT BUG:Submitted by: Marcelo Cerri
NOT BUG:engines/e_aep.c: make it BN_ULONG-size and endian "neutral"
NOT BUG:bn/asm/x86_64-mont.pl: minor optimization [for Decoded ICache]
NOT BUG:POD: Fix list termination
NOT BUG:This fixes problems in POD list formatting: extra or missing =back sequences
NOT BUG:doc/ssl/SSL_CTX_set1_curves.pod around line 90: =back without =over doc/ssl/SSL_CTX_set1_verify_cert_store.pod around line 73: =back without =over doc/ssl/SSL_CTX_add1_chain_cert.pod around line 82: =back without =over doc/crypto/evp.pod around line 40: '=item' outside of any '=over' crypto/des/des.pod around line 184: You forgot a '=back' before '=head1'
BUG:PR#3147
NOT BUG:POD: Fix item numbering
NOT BUG:Newer pod2man considers =item [1-9] part of a numbered list while =item 0 starts an unnumbered list Add a zero effect formatting mark to override this
NOT BUG:doc/apps/smime.pod around line 315: Expected text after =item not a number ..
NOT BUG:PR#3146
NOT BUG:Update test server details
NOT BUG:Add SSL_CONF command to set DH Parameters
NOT BUG:Fix argument processing
NOT BUG:Constification
NOT BUG:Update demos/bio/README
NOT BUG:Remove unused variable
NOT BUG:Fix another gmt_unix_time case in server_random
NOT BUG:Do not include a timestamp in the Client/ServerHello Random field
NOT BUG:Instead send random bytes unless SSL_SEND_{CLIENT,SERVER}RANDOM_MODE is set
BUG:This is a forward-port of commits: 4af793036f6ef4f0a1078e5d7155426a98d50e37 f4c93b46edb51da71f09eda99e83eaf193a33c08 3da721dac9382c48812c8eba455528fd59af2eef 2583270191a8b27eed303c03ece1da97b9b69fd3
NOT BUG:While the gmt_unix_time record was added in an ostensible attempt to mitigate the dangers of a bad RNG its presence leaks the host's view of the current time in the clear This minor leak can help fingerprint TLS instances across networks and protocols.. and what's worse it's doubtful thet the gmt_unix_time record does any good at all for its intended purpose since:
NOT BUG:* It's quite possible to open two TLS connections in one second
BUG:* If the PRNG output is prone to repeat itself ephemeral handshakes (and who knows what else besides) are broken
NOT BUG:Fix various typos
NOT BUG:Modify sample accept.cnf
BUG:Remove gratuitous patent references
NOT BUG:Add demo for SSL server using SSL_CONF
NOT BUG:Extend SSL_CONF
NOT BUG:Extend SSL_CONF to return command value types
NOT BUG:Add certificate and key options
NOT BUG:Update documentation
NOT BUG:Typo
NOT BUG:Time value for various platforms
NOT BUG:The function gettimeofday() is not supported on all platforms Use more portable versions Adapted from FIPS code
NOT BUG:Prevent use of RSA+MD5 in TLS 1.2 by default
NOT BUG:Removing RSA+MD5 from the default signature algorithm list prevents its use by default
NOT BUG:If a broken implementation attempts to use RSA+MD5 anyway the sanity checking of signature algorithms will cause a fatal alert
NOT BUG:Add clang debug target
NOT BUG:PPC assembly pack: make new .size directives profiler-friendly
NOT BUG:Suggested by: Anton Blanchard
NOT BUG:Add brainpool curves to NID table too
NOT BUG:Fix warning
NOT BUG:Add test vectors from RFC7027
BUG:RFC7027 (Brainpool for TLS) support
NOT BUG:Sync OID numbers with 1.0.2 branch
NOT BUG:PPC assembly pack: add .size directives
NOT BUG:bn/asm/*x86_64*.pl: correct assembler requirement for ad*x
NOT BUG:Initial aarch64 bits
NOT BUG:MIPS assembly pack: get rid of deprecated instructions
NOT BUG:Latest MIPS ISA specification declared 'branch likely' instructions obsolete To makes code future-proof replace them with equivalent
NOT BUG:evp/e_aes_cbc_hmac_sha*.c: limit multi-block fragmentation to 1KB
BUG:Excessive fragmentation put additional burden (of addtional MAC calculations) on the other size and limiting fragments it to 1KB limits the overhead to ~6%
NOT BUG:aes/asm/bsaes-x86_64.pl: fix Windows-specific bug in XTS
NOT BUG:PR: 3139
NOT BUG:bn/asm/rsax-avx2.pl: minor optimization [for Decoded ICache]
NOT BUG:bn/bn_exp.c: prefer MULX/AD*X over AVX2
NOT BUG:Configure: recognize experimental-multiblock
NOT BUG:ssl/s3_pkt.c: add initial multi-block encrypt
NOT BUG:evp/e_aes_cbc_hmac_sha*.c: harmonize names fix bugs
NOT BUG:evp/evp.h: add multi-block contstants and parameter type
NOT BUG:sha/asm/sha*-mb-x86_64.pl: commentary update
NOT BUG:Constification
NOT BUG:aes/asm/bsaes-*.pl: improve decrypt performance
NOT BUG:Improve decrypt performance by 10-20% depending on platform Thanks to Jussi Kivilinna for providing valuable hint Also thanks to Ard Biesheuvel
NOT BUG:Support new asm files
NOT BUG:evp/e_des3.c: fix typo with potential integer overflow on 32-bit platforms
BUG:Submitted by: Yuriy Kaminskiy
NOT BUG:perlasm/sparcv9_modes.pl: make it work even with seasoned perl
BUG:PR: 3130
NOT BUG:bn/asm/x86_64-mont*.pl: add MULX/ADCX/ADOX code path
NOT BUG:rsaz-x86_64.pl: add MULX/ADCX/ADOX code path
NOT BUG:x86_64-xlate.pl: fix jrcxz in nasm case
NOT BUG:evp/e_aes_cbc_hmac_sha*.c: multi-block glue code
NOT BUG:Configire: take multi-block modules into build loop
NOT BUG:x86_64 assembly pack: add multi-block AES-NI SHA1 and SHA256
NOT BUG:evp/e_aes_cbc_hmac_sha256.c: enable is on all AES-NI platforms not only on AVX
NOT BUG:aes/asm/*-armv*.pl: compensate for inconsistencies in tool-chains
NOT BUG:Suggested by: Ard Biesheuvel
BUG:Produce PEM we would consume
NOT BUG:Show useful errors
NOT BUG:Conflicts: apps/s_server.c
NOT BUG:Mix time into the pool to avoid repetition of the Android duplicated PID problem
NOT BUG:Merge: 79b9209 deda5ea
NOT BUG:Merge remote-tracking branch 'trevp/pemfix' into trev-pem-fix
NOT BUG:More diagnostics for invalid OIDs
NOT BUG:aes-armv4.pl bsaes-armv7.pl: add Linux kernel and Thumb2 support
NOT BUG:Submitted by: Ard Biesheuvel
NOT BUG:Add functions to set ECDSA_METHOD structure
NOT BUG:Add various functions to allocate and set the fields of an ECDSA_METHOD structure
NOT BUG:Fix error code clashes
NOT BUG:DTLS version usage fixes
NOT BUG:Make DTLS behave like TLS when negotiating version: record layer has DTLS 1.0 message version is 1.2
NOT BUG:Tolerate different version numbers if version hasn't been negotiated yet
NOT BUG:Move change note for SSL_OP_SAFARI_ECDHE_ECDSA_BUG (This went into 1.0.2 too so it's not actually a change between 1.0.x and 1.1.0.)
NOT BUG:Move the change note for partial chain verification: this is code from the main branch (http://cvs.openssl.org/chngview?cn=19322) later added to the 1.0.2 branch (http://cvs.openssl.org/chngview?cn=23113) and thus not a change "between 1.0.2 and 1.1.0"
BUG:Redo deletion of some serverinfo code that supplemental data code mistakenly reinstated
NOT BUG:Sync CHANGES and NEWS files
NOT BUG:(Various changes from the master branch are now in the 1.0.2 branch too.)
BUG:Fix overly lenient comparisons:
NOT BUG:- EC_GROUP_cmp shouldn't consider curves equal just because the curve name is the same (They really *should* be the same in this case but there's an EC_GROUP_set_curve_name API which could be misused.)
BUG:- EC_POINT_cmp shouldn't return 0 for ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED or EC_R_INCOMPATIBLE_OBJECTS errors because in a cmp API 0 indicates equality (not an error)
NOT BUG:Reported by: king cope
NOT BUG:crypto/armcap.c: fix typo in rdtsc subroutine
NOT BUG:PR: 3125 Submitted by: Kyle McMartin
NOT BUG:Add support for Cygwin-x86_64
NOT BUG:PR: 3110 Submitted by Corinna Vinschen
NOT BUG:bsaes-armv7.pl: remove partial register operations in CTR subroutine
NOT BUG:bsaes-armv7.pl: remove byte order dependency and minor optimization
NOT BUG:Added support for ARM/NEON based bit sliced AES in XTS mode
NOT BUG:Signed-off-by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
NOT BUG:Update docs to mention "BEGIN SERVERINFO FOR "
NOT BUG:Require ServerInfo PEMs to be named "BEGIN SERVERINFO FOR"..
BUG:Redo deletion of some serverinfo code that supplemental data code mistakenly reinstated
NOT BUG:Update CHANGES
NOT BUG:Tidy up comments
NOT BUG:Use TLS version supplied by client when fingerprinting Safari
NOT BUG:Fix compilation with no-ec and/or no-tlsext
NOT BUG:typo
BUG:Initialize next_proto in s_server - resolves incorrect attempts to free
NOT BUG:Constification
NOT BUG:crypto/modes/asm/aesni-gcm-x86_64.pl: minor optimization
NOT BUG:Avoid occasional up to 8% performance drops
NOT BUG:crypto/bn/asm/x86_64-mont.pl: minor optimization
NOT BUG:Remove ancient PATENTS section and FAQ reference
NOT BUG:Partial path fix
NOT BUG:When verifying a partial path always check to see if the EE certificate is explicitly trusted: the path could contain other untrusted certificates
NOT BUG:Document extension clash
NOT BUG:Experimental encrypt-then-mac support
NOT BUG:Experimental support for encrypt then mac from draft-gutmann-tls-encrypt-then-mac-02.txt
NOT BUG:To enable it set the appropriate extension number (0x10 for the test server) using e.g -DTLSEXT_TYPE_encrypt_then_mac=0x10
NOT BUG:For non-compliant peers (i.e just about everything) this should have no effect
NOT BUG:Set TLS v1.2 disabled mask properly
NOT BUG:Const fix
NOT BUG:Free generated supp data after handshake completion add comment regarding use of num_renegotiations in TLS and supp data generation callbacks
NOT BUG:More cleanup
NOT BUG:Make it build
NOT BUG:Add callbacks supporting generation and retrieval of supplemental data entries facilitating RFC 5878 (TLS auth extensions) Removed prior audit proof logic - audit proof support was implemented using the generic TLS extension API Tests exercising the new supplemental data registration and callback api can be found in ssltest.c Implemented changes to s_server and s_client to exercise supplemental data callbacks via the -auth argument as well as additional flags to exercise supplemental data being sent only during renegotiation
BUG:s/recommend/recommended/
BUG:misspellings fixes by https://github.com/vlajos/misspell_fixer
NOT BUG:Clean up layout
BUG:Add an "-xmpphost" option to s_client
BUG:* Many XMPP servers are configured with multiple domains (virtual hosts) * In order to establish successfully the TLS connection you have to specify which virtual host you are trying to connect * Test this for example with :: * Fail: openssl s_client -connect talk.google.com:5222 -starttls xmpp * Works: openssl s_client -connect talk.google.com:5222 -starttls xmpp -xmpphost gmail.com
BUG:Add "xmpp" to the list of supported starttls protocols on s_client manpage
BUG:Fix infinite loop on s_client starttls xmpp
NOT BUG:* When the host used in "-connect" is not what the remote XMPP server expects the server will return an error like this: <stream:error> <host-unknown xmlns='urn:ietf:params:xml:ns:xmpp-streams'/> </stream:error> * But the actual code will stay on the loop forever because the stop condition "/stream:features>" will never happen * Make this more robust: The stop condition should be that BIO_read failed * Test if for example with ::
BUG:openssl s_client -connect random.jabb3r.net:5222 -starttls xmpp
BUG:Fix XMPP code detection on s_client starttls xmpp
NOT BUG:* Some XMPP Servers (OpenFire) use double quotes * This makes s_client starttls work with this servers * Tested with OpenFire servers from http://xmpp.net/ ::
BUG:openssl s_client -connect coderollers.com:5222 -starttls xmpp
NOT BUG:Don't prefer ECDHE-ECDSA ciphers when the client appears to be Safari on OS X OS X 10.8..10.8.3 has broken support for ECDHE-ECDSA ciphers
NOT BUG:Document supported curve functions
NOT BUG:Document -force_pubkey option
NOT BUG:Correct ECDSA example
NOT BUG:Correctly test for no-ec
NOT BUG:Fix compile errors
NOT BUG:Typo: don't call RAND_cleanup during app startup (cherry picked from commit 90e7f983b573c3f3c722a02db4491a1b1cd87e8c)
NOT BUG:Add documentation
NOT BUG:Preliminary documentation for chain and verify stores and certificate chain setting functions
NOT BUG:Don't run ECDH CMS tests if EC disabled
NOT BUG:Make no-ec compilation work
NOT BUG:Return 1 when setting ECDH auto mode
NOT BUG:Add the server 'hang' issue to the FAQ
NOT BUG:DTLS message_sequence number wrong in rehandshake ServerHello
NOT BUG:This fix ensures that * A HelloRequest is retransmitted if not responded by a ClientHello * The HelloRequest "consumes" the sequence number 0 The subsequent ServerHello uses the sequence number 1 * The client also expects the sequence number of the ServerHello to be 1 if a HelloRequest was received earlier This patch fixes the RFC violation
NOT BUG:DTLS handshake fix
BUG:Reported by: Prashant Jaikumar <rmstar@gmail.com>
NOT BUG:Fix handling of application data received before a handshake
NOT BUG:Fix for PEM_X509_INFO_read_bio
NOT BUG:PR: 3028 Fix bug introduced in PEM_X509_INFO_bio which wouldn't process RSA keys correctly if they appeared first
NOT BUG:Update cms docs
NOT BUG:Add X9.42 DH test
NOT BUG:Add X9.42 DH certificate to S/MIME test
NOT BUG:CMS RFC2631 X9.42 DH enveloped data support
NOT BUG:Add KDF for DH
NOT BUG:Add X9.42 DH KDF Move sharedinfo generation code to CMS library as the same structure is used by DH and ECDH
NOT BUG:Move ASN1_OBJECT typedef to ossl_typ.h so it can be picked up by dh headers without the need to use ASN1
NOT BUG:Extend DH parameter generation support
NOT BUG:Add support for DH parameter generation using DSA methods including FIPS 186-3
NOT BUG:Enhance DH dup functions
NOT BUG:Make DHparams_dup work properly with X9.42 DH parameters
NOT BUG:If present print j seed and counter values for DH
NOT BUG:Minor optimisation to KDF algorithm
NOT BUG:Don't need to use temporary buffer if remaining length equals digest length
NOT BUG:Algorithm parameter support
NOT BUG:Check and set AlgorithmIdenfier parameters for key wrap algorithms Currently these just set parameters to NULL
NOT BUG:crypto/evp/e_aes.c: fix logical pre-processor bug and formatting
NOT BUG:Bug would emerge when XTS is added to bsaes-armv7.pl Pointed out by Ard Biesheuvel of Linaro
NOT BUG:crypto/bn/asm/rsax-x86_64.pl: make it work on Darwin
NOT BUG:crypto/sha/asm/sha*-x86_64.pl: comply with Win64 ABI
NOT BUG:Various custom extension fixes
NOT BUG:Force no SSL2 when custom extensions in use Don't clear extension state when cert is set Clear on renegotiate
NOT BUG:Add tests for ALPN functionality
NOT BUG:Conflicts: ssl/ssltest.c
NOT BUG:Add a no-opt 64-bit target
NOT BUG:Support ALPN
NOT BUG:This change adds support for ALPN[1] in OpenSSL ALPN is the IETF blessed version of NPN and we'll be supporting both ALPN and NPN for some time yet
NOT BUG:[1] https://tools.ietf.org/html/draft-ietf-tls-applayerprotoneg-00
BUG:Conflicts: ssl/ssl3.h ssl/t1_lib.c
BUG:Make ecdsatest work with nonces
NOT BUG:Update ecdsatest to use ECDSA_sign_setup and ECDSA_sign_ex this avoids the nonce generation which would otherwise break the test
BUG:Reinstate ecdsatest
NOT BUG:Temporarily disable ECDSA test
BUG:Disable ECDSA test temporarily: it is incompatible with ECDSA nonces
NOT BUG:New CMS tests
NOT BUG:Add some ECDH CMS tests
NOT BUG:Scripts to recreate S/MIME test certificates
NOT BUG:Add a script to generate keys and certificates for the S/MIME and CMS tests
NOT BUG:Update certificates and add EC examples
NOT BUG:Custom key wrap option for cms utility
NOT BUG:Return correct enveloped data type in ASN1 methods
NOT BUG:For RSA and DSA keys return an appropriate RecipientInfo type By setting CMS_RECIPINFO_NONE for DSA keys an appropriate error is returned if an attempt is made to use DSA with enveloped data
NOT BUG:Add support for ECDH KARI
NOT BUG:Add support for ECDH in enveloped data The CMS ctrls for the EC ASN1 method decode/encode the appropriate parameters from the CMS ASN1 data and send appropriate data to the EC public key method
NOT BUG:Add support for X9.62 KDF
NOT BUG:Add X9.62 KDF to EC EVP_PKEY_METHOD
NOT BUG:Add new OIDs from RFC5753
NOT BUG:Add OIDs for KDF schemes from RFC5753 and add cross references for each type and the appropriate digest to use
BUG:CMS support for key agreeement recipient info
NOT BUG:Add hooks to support key agreement recipient info type (KARI) using algorithm specific code in the relevant public key ASN1 method
NOT BUG:Set CMS EnvelopedData version correctly
NOT BUG:EVP support for wrapping algorithms
NOT BUG:Add support for key wrap algorithms via EVP interface
NOT BUG:Generalise AES wrap algorithm and add to modes making existing AES wrap algorithm a special case
NOT BUG:Move test code to evptests.txt
NOT BUG:Typo
NOT BUG:Avoid need to change function code
NOT BUG:Keep original function names for nonce versions so we don't have to change error function codes
NOT BUG:Make `safe' (EC)DSA nonces the default
NOT BUG:This change updates 8a99cb29 to make the generation of (EC)DSA nonces using the message digest the default It also reverts the changes to (EC)DSA_METHOD structure
NOT BUG:In addition to making it the default removing the flag from EC_KEY means that FIPS modules will no longer have an ABI mismatch
NOT BUG:bn/asm/rsaz-avx2.pl: Windows-specific fix
NOT BUG:Fix verify loop with CRL checking
BUG:PR #3090 Reported by: Franck Youssef <fry@open.ch>
NOT BUG:If no new reason codes are obtained after checking a CRL exit with an error to avoid repeatedly checking the same CRL
NOT BUG:This will only happen if verify errors such as invalid CRL scope are overridden in a callback
NOT BUG:Clarify FIXME
NOT BUG:Note non-export of CC
NOT BUG:Support new rsaz asm stuff
BUG:s/rsaz_eligible/rsaz_avx2_eligible/
NOT BUG:sha512-586.pl: fix typo
NOT BUG:Submitted by: Gisle Vanem
NOT BUG:Remove RSAX engine superseded by RSAZ module
NOT BUG:Take RSAZ modules into build loop add glue and engage
BUG:RT: 2582 2850
NOT BUG:Add RSAZ assembly modules
BUG:RT: 2582 2850
NOT BUG:bn/asm/x86_86-mont.pl: optimize reduction for Intel Core family
NOT BUG:bn/bn_exp.c: harmonize
NOT BUG:Fix multiple cosmetic typos
NOT BUG:Initialise CMS signature buffer length properly
NOT BUG:config: fix executable format detection on latest FreeBSD
BUG:Submitted by: Bryan Drewery PR: 3075
NOT BUG:bn/bn_exp.c: Solaris-specific fix T4 MONTMUL relies on alloca
NOT BUG:x86_64-xlate.pl: Windows fixes
NOT BUG:aesni-sha256-x86_64.pl: fix typo in Windows SEH
NOT BUG:Cosmetic touchups
NOT BUG:Fix duplicate error code
NOT BUG:Update CHANGES
NOT BUG:Update cms docs
NOT BUG:Document use of -keyopt to use RSA-PSS and RSA-OAEP modes
NOT BUG:Add new CMS tests
NOT BUG:Add new tests to cms-test.pl covering PSS and OAEP
NOT BUG:Add -keyopt option to cms utility
NOT BUG:Add support for custom public key parameters in the cms utility using the -keyopt switch Works for -sign and also -encrypt if -recip is used
NOT BUG:CMS RSA-OAEP and RSA-PSS support
NOT BUG:Extend RSA ASN1 method to support CMS PSS signatures for both sign and verify
NOT BUG:For signing the EVP_PKEY_CTX parameters are read and the appropriate CMS structures set up
NOT BUG:For verification the CMS structures are analysed and the corresponding parameters in the EVP_PKEY_CTX set
NOT BUG:Also add RSA-OAEP support
NOT BUG:For encrypt the EVP_PKEY_CTX parameters are used
NOT BUG:For decrypt the CMS structure is uses to set the appropriate EVP_PKEY_CTX parameters
NOT BUG:CMS public key parameter support
NOT BUG:Add support for customisation of CMS handling of signed and enveloped data from custom public key parameters
NOT BUG:This will provide support for RSA-PSS and RSA-OAEP but could also be applied to other algorithms
NOT BUG:Update to OAEP support
NOT BUG:Add OAEP ctrls to retrieve MD and label Return errors if an attempt is made to set or retrieve OAEP parameters when padding mode is not OAEP
NOT BUG:Add control to retrieve signature MD
NOT BUG:Add new OID to pSpecified from PKCS#1
NOT BUG:Cleanup of custom extension stuff
NOT BUG:serverinfo rejects non-empty extensions
NOT BUG:Omit extension if no relevant serverinfo data
NOT BUG:Improve error-handling in serverinfo callback
NOT BUG:Cosmetic cleanups
NOT BUG:s_client documentation
NOT BUG:s_server documentation
NOT BUG:SSL_CTX_serverinfo documentation
NOT BUG:Cleaup -1 and NULL callback handling for custom extensions add tests
NOT BUG:Cleanup ssl_rsa.c serverinfo code
NOT BUG:Whitespace cleanup
NOT BUG:Improve comments in ssl.h for serverinfo
NOT BUG:Whitespace
NOT BUG:Cosmetic cleanup
NOT BUG:Reject non-zero-len serverinfo extensions
NOT BUG:Whitespace
NOT BUG:Make it build
NOT BUG:SPARC T4 DES support: fix typo
NOT BUG:Optimize SPARC T4 MONTMUL support
BUG:Improve RSA sing performance by 20-30% by: - switching from floating-point to integer conditional moves; - daisy-chaining sqr-sqr-sqr-sqr-sqr-mul sequences; - using MONTMUL even during powers table setup;
NOT BUG:PA-RISC assembler pack: switch to bve in 64-bit builds
BUG:PR: 3074
NOT BUG:Add secure DSA nonce flag
NOT BUG:This change adds the option to calculate (EC)DSA nonces by hashing the message and private key along with entropy to avoid leaking the private key if the PRNG fails
NOT BUG:Limit the number of empty records that will be processed consecutively in order to prevent ssl3_get_record from never returning
NOT BUG:Reported by "oftc_must_be_destroyed" and George Kadianakis
NOT BUG:Don't SEGFAULT when trying to export a public DSA key as a private key
NOT BUG:This change alters the processing of invalid RSA pre-master secrets so that bad encryptions are treated like random session keys in constant time
NOT BUG:Ignore one-makefile stuff
NOT BUG:Document updates from wiki
BUG:PR#3071
NOT BUG:The primary changes made are: - Updates to the "NAME" section of many pages to correctly reflect the functions defined on those pages This section is automatically parsed by the util/extract-names.pl script so if it is not correct then running "man" will not correctly locate the right manual pages - Updates to take account of where functions are now deprecated - Full documentation of the ec sub-library - A number of other typo corrections and other minor tweaks
BUG:Exetended OAEP support
NOT BUG:Extend OAEP support Generalise the OAEP padding functions to support arbitrary digests Extend EVP_PKEY RSA method to handle the new OAEP padding functions and add ctrls to set the additional parameters
NOT BUG:Typo
NOT BUG:Add support for arbitrary TLS extensions
NOT BUG:Contributed by Trevor Perrin
NOT BUG:Add aesni-sha256-x86_64
NOT BUG:aesni-sha1-x86_64.pl: update performance data
NOT BUG:aesni-sha256-x86_64.pl: harmonize with latest sha512-x86_64.pl
NOT BUG:sha1-x86_64.pl: add AVX2+BMI code path
NOT BUG:sha512-x86_64.pl: upcoming-Atom-specific optimization
NOT BUG:sha[256|512]-586.pl: add more SIMD code paths
NOT BUG:ghash-x86_64.pl: add Haswell performance data
NOT BUG:x86cpuid.pl: fix extended feature flags detection
NOT BUG:Fix PSS signature printing
NOT BUG:Fix PSS signature printing: consistently use 0x prefix for hex values for padding length and trailer fields
NOT BUG:Reencode with X509_CRL_ctx_sign too
NOT BUG:Ensure that when generating small primes the result is actually of the requested size Fixes OpenSSL #2701
NOT BUG:This change does not address the cases of generating safe primes or where the |add| parameter is non-NULL
NOT BUG:Conflicts: crypto/bn/bn.h crypto/bn/bn_err.c
NOT BUG:Ensure that x**0 mod 1 = 0
NOT BUG:Add volatile qualifications to two blocks of inline asm to stop GCC from eliminating them as dead code
NOT BUG:Both volatile and "memory" are used because of some concern that the compiler may still cache values across the asm block without it and because this was such a painful debugging session that I wanted to ensure that it's never repeated
NOT BUG:Remove added ;
NOT BUG:Missing prototypes
NOT BUG:crypto/bn/bn_exp.c: SPARC portability fix
NOT BUG:aesni-x86_64.pl: optimize XTS
NOT BUG:PR: 3042
NOT BUG:aesni-sha1-x86_64.pl: Atom-specific optimization
NOT BUG:sha512-x86_64.pl: +16% optimization for Atom
NOT BUG:(and pending AVX2 changes)
NOT BUG:vpaes-x86[_64].pl: minor Atom-specific optimization
NOT BUG:Add AES-SHA256 stitch
NOT BUG:x86_64-xlate.pl: minor size/performance improvement
NOT BUG:aesni-x86_64.pl: minor CTR performance improvement
NOT BUG:Tests pass!
NOT BUG:Ugly hack to avoid recompiling the same thing multiple times in parallel
NOT BUG:Reencode certificates in X509_sign_ctx
NOT BUG:Reencode certificates in X509_sign_ctx as well as X509_sign
NOT BUG:This was causing a problem in the x509 application when it modified an existing certificate
NOT BUG:bsaes-armv7.pl: add bsaes_cbc_encrypt and bsaes_ctr32_encrypt_blocks
NOT BUG:Submitted by: Ard Biesheuvel <ard.biesheuvel@linaro.org>
NOT BUG:Contributor claims ~50% improvement in CTR and ~9% in CBC decrypt on Cortex-A15
NOT BUG:bsaes-armv7.pl: take it into build loop
NOT BUG:Typo
NOT BUG:Fix Windows linking error in GOST test case
NOT BUG:crypto/modes/modes_lcl.h: let STRICT_ALIGNMENT be on ARMv7
NOT BUG:While ARMv7 in general is capable of unaligned access not all instructions actually are And trouble is that compiler doesn't seem to differentiate those capable and incapable of unaligned access Side effect is that kernel goes into endless loop retrying same instruction triggering unaligned trap Problem was observed in xts128.c and ccm128.c modules It's possible to resolve it by using (volatile u32*) casts but letting STRICT_ALIGNMENT be feels more appropriate
NOT BUG:Suite B support for DTLS 1.2
NOT BUG:Check for Suite B support using method flags instead of version numbers: anything supporting TLS 1.2 cipher suites will also support Suite B
NOT BUG:Return an error if an attempt to use DTLS 1.0 is made in Suite B mode
NOT BUG:Always return errors in ssl3_get_client_hello
NOT BUG:If we successfully match a cookie don't set return value to 2 as this results in other error conditions returning 2 as well
NOT BUG:Instead set return value to -2 which can be checked later if everything else is OK
NOT BUG:Dual DTLS version methods
NOT BUG:Add new methods DTLS_*_method() which support both DTLS 1.0 and DTLS 1.2 and pick the highest version the peer supports during negotiation
NOT BUG:As with SSL/TLS options can change this behaviour specifically SSL_OP_NO_DTLSv1 and SSL_OP_NO_DTLSv1_2
NOT BUG:Set s->d1 to NULL after freeing it
NOT BUG:Asm build portability
NOT BUG:Don't use Win32 specific options in mk1mf.pl to build assembly language files
NOT BUG:Make sure all tests are actually run plus some fixups for things that turn out to be made somewhere by existing Makefiles
BUG:Use original alltests target for definitive test list
NOT BUG:Missing semicolon
NOT BUG:Fix non-copy builds
NOT BUG:Only use -MMD and .sinclude in copy builds: other platforms don't support them
NOT BUG:Missing file
NOT BUG:Make executable
NOT BUG:Helper scripts for one makefile build
NOT BUG:Merge go back to copy-if-different
NOT BUG:Fix test_ss
NOT BUG:Add new asm target
NOT BUG:Show start/end of tests
NOT BUG:Avoid collisions
NOT BUG:Make session ID test work
NOT BUG:Make S/MIME test work
NOT BUG:Make RSA test work
NOT BUG:Make PKCS#7 test work
NOT BUG:Make OCSP test work
NOT BUG:More progress towards working tests
NOT BUG:Get closer to a working single Makefile with test support
NOT BUG:Fix warnings
NOT BUG:Make TLS 1.2 ciphers work again
NOT BUG:Since s->method does not reflect the final client version when a client hello is sent for SSLv23_client_method it can't be relied on to indicate if TLS 1.2 ciphers should be used So use the client version instead
NOT BUG:cryptlib.c: fix typo in OPENSSL_showfatal
NOT BUG:aesni-x86_64.pl: optimize CBC decrypt
BUG:Give CBC decrypt approximately same treatment as to CTR and collect 25%
NOT BUG:e_aes.c: reserve for future extensions
NOT BUG:gcm128.c: fix linking problems in 32-bit Windows build
NOT BUG:dest4-sparcv9.pl: add clarification comment
NOT BUG:evptests.txt: add XTS test vectors
NOT BUG:Use $(PERL) when calling scripts in mk1mf.pl
NOT BUG:Typo
NOT BUG:Add support for SPARC T4 DES opcode
NOT BUG:des_enc.m4: add missing #include
NOT BUG:Submitted by: David Miller
NOT BUG:Add AES-NI GCM stitch
NOT BUG:aesni-x86_64.pl: fix typo and optimize small block performance
NOT BUG:Call RAND_cleanup in openssl application (cherry picked from commit 944bc29f9004cf8851427ebfa83ee70b8399da57)
NOT BUG:Enable TLS 1.2 ciphers in DTLS 1.2
NOT BUG:Port TLS 1.2 GCM code to DTLS Enable use of TLS 1.2 only ciphers when in DTLS 1.2 mode too
NOT BUG:Update fixed DH requirements
NOT BUG:The relaxed signing requirements for fixed DH certificates apply to DTLS 1.2 too
NOT BUG:DTLS 1.2 cached record support
NOT BUG:Add DTLS1.2 support for cached records when computing handshake macs instead of the MD5+SHA1 case for DTLS < 1.2 (this is a port of the equivalent TLS 1.2 code to DTLS)
NOT BUG:Make binary curve ASN.1 work in FIPS mode
NOT BUG:Don't check for binary curves by checking methods: the values will be different in FIPS mode as they are redirected to the validated module version
NOT BUG:Provisional DTLS 1.2 support
NOT BUG:Add correct flags for DTLS 1.2 update s_server and s_client to handle DTLS 1.2 methods
NOT BUG:Currently no support for version negotiation: i.e if client/server selects DTLS 1.2 it is that or nothing
NOT BUG:Remove versions test from dtls1_buffer_message
NOT BUG:Since this is always called from DTLS code it is safe to assume the header length should be the DTLS value This avoids the need to check the version number and should work with any version of DTLS (not just 1.0)
NOT BUG:Extend DTLS method macros
NOT BUG:Extend DTLS method creation macros to support version numbers and encryption methods Update existing code
NOT BUG:Enable various DTLS extensions
NOT BUG:Some TLS extensions were disabled for DTLS Possibly because they caused problems with the old duplicated code Enable them again
NOT BUG:aesni-x86_64.pl: optimize CTR even further
NOT BUG:Based on suggestions from Shay Gueron and Vlad Krasnov PR: 3021
NOT BUG:ghash-x86_64.pl: add AVX code path
NOT BUG:aesni-x86_64.pl: optimize CTR even further
NOT BUG:ghash-x86_64.pl: minor optimization
NOT BUG:Disable compression for DTLS
NOT BUG:The only standard compression method is stateful and is incompatible with DTLS
NOT BUG:Typo
NOT BUG:e_aes_cbc_hmac_sha1.c: fix rare bad record mac on AES-NI plaforms
NOT BUG:PR: 3002
BUG:Use enc_flags when deciding protocol variations
NOT BUG:Use the enc_flags field to determine whether we should use explicit IV signature algorithms or SHA256 default PRF instead of hard coding which versions support each requirement
NOT BUG:Use appropriate versions of SSL3_ENC_METHOD
NOT BUG:DTLS revision
NOT BUG:Revise DTLS code There was a *lot* of code duplication in the DTLS code that generates records This makes it harder to maintain and sometimes a TLS update is omitted by accident from the DTLS code
NOT BUG:Specifically almost all of the record generation functions have code like this:
NOT BUG:some_pointer = buffer + HANDSHAKE_HEADER_LENGTH; .. Record creation stuff .. set_handshake_header(ssl SSL_MT_SOMETHING message_len);
BUG:..
NOT BUG:write_handshake_message(ssl);
NOT BUG:Where the "Record creation stuff" is identical between SSL/TLS and DTLS or in some cases has very minor differences
NOT BUG:By adding a few fields to SSL3_ENC to include the header length some flags and function pointers for handshake header setting and handshake writing the code can cope with both cases
NOT BUG:Note: although this passes "make test" and some simple DTLS tests there may be some minor differences in the DTLS code that have to be accounted for
NOT BUG:Avoid unnecessary fragmentation
NOT BUG:Encode INTEGER correctly
NOT BUG:If an ASN1_INTEGER structure is allocated but not explicitly set encode it as zero: don't generate an invalid zero length INTEGER (cherry picked from commit 1643edc63c3e15b6db5a15a728bc288f2cc2bbc7)
NOT BUG:Typo (cherry picked from commit 1546fb780bc11556a18d70c5fb29af4a9d5beaff)
NOT BUG:DTLS trace support
NOT BUG:Add DTLS record header parsing different client hello format and add HelloVerifyRequest message type
NOT BUG:Add code to d1_pkt.c to send message headers to the message callback
NOT BUG:evptests.txt: additional GCM test vectors
NOT BUG:GCM and CCM test support
NOT BUG:Add code to support GCM an CCM modes in evp_test On encrypt this will compare the expected ciphertext and tag On decrypt it will compare the expected plaintext: tag comparison is done internally
NOT BUG:Add a simple CCM test case and convert all tests from crypto/modes/gcm128.c
NOT BUG:Add CCM ciphers to tables
NOT BUG:ghash-x86_64.pl: fix length handling bug
NOT BUG:Thanks to Shay Gueron & Vlad Krasnov for report
NOT BUG:typo
NOT BUG:Initial CCM code
NOT BUG:Simple example of CCM code use: translated from the FIPS self tests
NOT BUG:Use CFLAG for LFLAGS instead of the nonexistent CFLAGS
NOT BUG:Ignore mk1mf.pl output directories
NOT BUG:Remove unused variable
NOT BUG:Actually comment out the cpuid asm!
NOT BUG:Merge: 654d227 71a1694
NOT BUG:Merge branch 'master' of openssl.net:openssl
NOT BUG:Conflicts: util/mk1mf.pl
NOT BUG:Fix WIN32 build
NOT BUG:Make assembly language handling conditional on the "copy" platform as Windows does its own thing here
NOT BUG:x86cpuid.pl: make it work with older CPUs
NOT BUG:PR: 3005
NOT BUG:Only copy headers if they've changed
NOT BUG:Don't make CPUID stuff twice
NOT BUG:Handle assembler files
NOT BUG:Missing MINFO generation
NOT BUG:Override local vars for MINFO build
NOT BUG:Allow variables to be overridden on the command line
NOT BUG:Take the first definition of a variable
NOT BUG:Use "copy" instead of "auto"
BUG:Remove pointless diagnostic
NOT BUG:Preserve the C compiler
NOT BUG:Inherit CFLAGS when plaform is "auto"
NOT BUG:Include correctly
NOT BUG:Remove empty command
NOT BUG:Spelling
NOT BUG:Add dependency on destination directory
NOT BUG:Spelling
NOT BUG:Add reallyclean target
NOT BUG:x86_64-gf2m.pl: fix typo
NOT BUG:x86_64-gf2m.pl: add missing Windows build fix for #2963
NOT BUG:PR: 3004
NOT BUG:Ignore MINFO
NOT BUG:Missing files target
NOT BUG:Add function CMS_RecipientInfo_encrypt
NOT BUG:Add CMS_RecipientInfo_encrypt: this function encrypts an existing content encryption key to match the key in the RecipientInfo structure: this is useful if a new recpient is added to and existing enveloped data structure
NOT BUG:Add documentation
NOT BUG:Fix error codes
NOT BUG:Demo code for SSL_CONF API
NOT BUG:Two example programs one for command line argument processing and one for configuration file processing
NOT BUG:Update SSL_CONF docs
NOT BUG:Fix some typos and update version number first added: it has now been backported to OpenSSL 1.0.2
NOT BUG:Fix ignored return value warnings
NOT BUG:Not sure why I am getting these now and not before
NOT BUG:make depend
NOT BUG:Fix POD errors to stop make install_docs dying with pod2man 2.5.0+
BUG:podlators 2.5.0 has switched to dying on POD syntax errors This means that a bunch of long-standing erroneous POD in the openssl documentation now leads to fatal errors from pod2man halting installation
NOT BUG:Unfortunately POD constraints mean that you have to sort numeric lists in ascending order if they start with 1: you cannot do 1 0 2 even if you want 1 to appear first I've reshuffled such (alas I wish there were a better way but I don't know of one)
NOT BUG:sha256-586.pl: code refresh
NOT BUG:sha1-586.pl: code refresh
NOT BUG:ghash-x86[_64].pl: code refresh
NOT BUG:[aesni-]sha1-x86_64.pl: code refresh
NOT BUG:sha512-x86_64.pl: add AVX2 code path
NOT BUG:bn_nist.c: work around clang 3.0 bug
NOT BUG:Upate FAQ
NOT BUG:Add description of "allocate and encode" operation for ASN1 routines
NOT BUG:Document how versioning will for after the letter release reaches y
NOT BUG:Check DTLS_BAD_VER for version number
NOT BUG:The version check for DTLS1_VERSION was redundant as DTLS1_VERSION > TLS1_1_VERSION however we do need to check for DTLS1_BAD_VER for compatibility
NOT BUG:PR:2984
NOT BUG:Fix in ssltest is no-ssl2 configured (cherry picked from commit cbf9b4aed3e209fe8a39e1d6f55aaf46d1369dc4)
NOT BUG:update FAQ
NOT BUG:FAQ/README: we are now using Git instead of CVS (cherry picked from commit f88dbb8385c199a2a28e9525c6bba3a64bda96af)
NOT BUG:sparccpuid.S: work around emulator bug on T1
NOT BUG:s3_cbc.c: make CBC_MAC_ROTATE_IN_PLACE universal
NOT BUG:s3_cbc.c: get rid of expensive divisions
NOT BUG:s3_cbc.c: fix warning [in Windows build]
NOT BUG:e_aes_cbc_hmac_sha1.c: align calculated MAC at cache line
NOT BUG:It also ensures that valgring is happy
NOT BUG:ssl/*: revert "remove SSL_RECORD->orig_len" and merge "fix IV"
NOT BUG:Revert is appropriate because binary compatibility is not an issue in 1.1
NOT BUG:Fix for EXP-RC2-CBC-MD5
NOT BUG:MD5 should use little endian order Fortunately the only ciphersuite affected is EXP-RC2-CBC-MD5 (TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5) which is a rarely used export grade ciphersuite (cherry picked from commit f306b87d766e6ecf30824635c7c395b67cff9dbc)
NOT BUG:e_aes_cbc_hmac_sha1.c: cleanse temporary copy of HMAC secret (cherry picked from commit 529d27ea472fc2c7ba9190a15a58cb84012d4ec6)
NOT BUG:e_aes_cbc_hmac_sha1.c: address the CBC decrypt timing issues
NOT BUG:Address CBC decrypt timing issues and reenable the AESNI+SHA1 stitch (cherry picked from commit 125093b59f3c2a2d33785b5563d929d0472f1721)
NOT BUG:ssl/*: remove SSL3_RECORD->orig_len to restore binary compatibility
NOT BUG:Kludge alert This is arranged by passing padding length in unused bits of SSL3_RECORD->type so that orig_len can be reconstructed (cherry picked from commit 8bfd4c659f180a6ce34f21c0e62956b362067fba)
NOT BUG:Don't access EVP_MD_CTX internals directly (cherry picked from commit 04e45b52ee3be81121359cc1198fd01e38096e9f)
NOT BUG:s3/s3_cbc.c: allow for compilations with NO_SHA256|512 (cherry picked from commit d5371324d978e4096bf99b9d0fe71b2cb65d9dc8)
NOT BUG:ssl/s3_cbc.c: md_state alignment portability fix
BUG:RISCs are picky and alignment granted by compiler for md_state can be insufficient for SHA512 (cherry picked from commit 36260233e7e3396feed884d3f501283e0453c04f)
NOT BUG:ssl/s3_cbc.c: uint64_t portability fix
NOT BUG:Break dependency on uint64_t It's possible to declare bits as unsigned int because TLS packets are limited in size and 32-bit value can't overflow (cherry picked from commit cab13fc8473856a43556d41d8dac5605f4ba1f91)
NOT BUG:typo (cherry picked from commit 34ab3c8c711ff79c2b768f0b17e4b2a78fd1df5d)
NOT BUG:Add ordinal for CRYPTO_memcmp: since this will affect multiple branches it needs to be in a "gap" (cherry picked from commit 81ce0e14e72e8e255ad1bd9c7cfaa47a6291919c)
NOT BUG:Timing fix mitigation for FIPS mode We have to use EVP in FIPS mode so we can only partially mitigate timing differences
NOT BUG:Make an extra call to EVP_DigestSignUpdate to hash additonal blocks to cover any timing differences caused by removal of padding (cherry picked from commit b908e88ec15aa0a74805e3f2236fc4f83f2789c2)
NOT BUG:Oops Add missing file (cherry picked from commit 014265eb02e26f35c8db58e2ccbf100b0b2f0072)
NOT BUG:Update DTLS code to match CBC decoding in TLS
NOT BUG:This change updates the DTLS code to match the constant-time CBC behaviour in the TLS (cherry picked from commit 9f27de170d1b7bef3d46d41382dc4dafde8b3900)
NOT BUG:Don't crash when processing a zero-length TLS >= 1.1 record
NOT BUG:The previous CBC patch was bugged in that there was a path through enc() in s3_pkt.c/d1_pkt.c which didn't set orig_len orig_len would be left at the previous value which could suggest that the packet was a sufficient length when it wasn't (cherry picked from commit 6cb19b7681f600b2f165e4adc57547b097b475fd)
NOT BUG:Make CBC decoding constant time
NOT BUG:This patch makes the decoding of SSLv3 and TLS CBC records constant time Without this a timing side-channel can be used to build a padding oracle and mount Vaudenay's attack
NOT BUG:This patch also disables the stitched AESNI+SHA mode pending a similar fix to that code
NOT BUG:In order to be easy to backport this change is implemented in ssl/ rather than as a generic AEAD mode In the future this should be changed around so that HMAC isn't in ssl/ but crypto/ as FIPS expects (cherry picked from commit e130841bccfc0bb9da254dc84e23bc6a1c78a64e)
NOT BUG:Add and use a constant-time memcmp
NOT BUG:This change adds CRYPTO_memcmp which compares two vectors of bytes in an amount of time that's independent of their contents It also changes several MAC compares in the code to use this over the standard memcmp which may leak information about the size of a matching prefix (cherry picked from commit 2ee798880a246d648ecddadc5b91367bee4a5d98)
NOT BUG:Fix for trace code: SSL3 doesn't include a length value for encrypted premaster secret value
NOT BUG:x86_64 assembly pack: keep making Windows build more robust
NOT BUG:PR: 2963 and a number of others
NOT BUG:Don't use C++ style comments
NOT BUG:Fix warning: lenmax isn't used any more
NOT BUG:Don't include comp.h in cmd_cd.c if OPENSSL_NO_COMP set
BUG:fix domd
NOT BUG:x86_64 assembly pack: make Windows build more robust
NOT BUG:PR: 2963 and a number of others
NOT BUG:TABLE update
NOT BUG:Configure: update linux-mips* lines
NOT BUG:bn/asm/mips.pl: hardwire local call to bn_div_words
NOT BUG:sha512-ppc.pl: minimize stack frame
NOT BUG:gost2814789t.c: portability fixes
NOT BUG:Fix warnings
NOT BUG:Don't include comp.h if no-comp set
NOT BUG:Improve WINCE support
NOT BUG:Submitted by: Pierre Delaage
NOT BUG:Merge: 6f0a93b bd2bceb
NOT BUG:Merge branch 'master' of openssl.net:openssl
NOT BUG:More .gitignore adjustments
NOT BUG:Merge: ed60d9d a0dcb8d
NOT BUG:Merge branch 'master' of openssl.net:openssl
NOT BUG:Remove kludge to use RC4 asm
NOT BUG:Build/test cleanly on MacOS
NOT BUG:gost_crypt.c: add assertions
NOT BUG:Submitted by: Seguei Leontiev PR: 2821
NOT BUG:engines/ccgost: add test case
NOT BUG:Submitted by: Serguei Leontiev PR: 2821
NOT BUG:sha512-ppc.pl: add PPC32 code >2x improvement on in-order cores
BUG:Remove extraneous brackets (clang doesn't like them)
NOT BUG:Can't check a size_t for < 0
NOT BUG:Make "make depend" work on MacOS out of the box
NOT BUG:.gitignore adjustments
BUG:Typo (PR2959)
NOT BUG:Fix some clang warnings
BUG:Correct EVP_PKEY_verifyrecover to EVP_PKEY_verify_recover (RT 2955)
NOT BUG:Change default bits to 1024
NOT BUG:Add some missing files make paths absolute
NOT BUG:Fix warning
NOT BUG:Initial .gitignore
NOT BUG:make no-comp compile
NOT BUG:make JPAKE work again fix memory leaks
NOT BUG:stop warning when compiling with no-comp
NOT BUG:Portability fix: use BIO_snprintf and pick up strcasecmp alternative definitions from e_os.h
NOT BUG:missing tab
NOT BUG:typo
NOT BUG:Fix tocsp: we don't need -trust_other any more
NOT BUG:Fix typo
NOT BUG:Make partial chain checking work if we only have the EE certificate in the trust store
NOT BUG:add missing newline
NOT BUG:revert OCSP_basic_verify changes: they aren't needed now we support partial chain verification and can pass verify options to ocsp utility
NOT BUG:Update test OCSP script "tocsp" to use shell functions and to use December 17th as check date to avoid certificate expiry errors
NOT BUG:gost_crypt.c: more intuitive ceiling
NOT BUG:correct CHANGES
NOT BUG:engines/cchost/gost_crypt.c: fix typo
NOT BUG:engines/e_capi.c: fix typo
NOT BUG:Submitted by: Pierre Delaage
NOT BUG:engine/cchost: fix bugs
NOT BUG:PR: 2821 Submitted by: Dmitry Belyavsky Serguei Leontiev
NOT BUG:dso/dso_win32.c: fix compiler warning
NOT BUG:util/pl/VC-32.pl fix typo
BUG:Use client version when deciding which cipher suites to disable
NOT BUG:util/pl/VC-32.pl: refresh switch to ws2 add crypt32 fix typo (based on suggestions from Pierre Delaage)
NOT BUG:VC-32.pl: fix typo
NOT BUG:Submitted by: Pierre Delaage
NOT BUG:d1_lib.c,bss_dgram.c: eliminate dependency on _ftime
NOT BUG:add -rmd option to set OCSP response signing digest
NOT BUG:Check chain is not NULL before assuming we have a validated chain
NOT BUG:The modification to the OCSP helper purpose breaks normal OCSP verification It is no longer needed now we can trust partial chains
NOT BUG:Return success when the responder is active
NOT BUG:Don't verify our own responses
NOT BUG:typo
NOT BUG:Add support for '-' as input and output filenames in ocsp utility
NOT BUG:Recognise verification arguments
NOT BUG:oops revert committed in error
NOT BUG:apps/ocsp.c
BUG:Documentation improvements by Chris Palmer (Google)
NOT BUG:fips/fipsld: improve cross-compile support
NOT BUG:Use new partial chain flag instead of modifying input parameters
NOT BUG:New verify flag to return success if we have any certificate in the trusted store instead of the default which is to return an error if we can't build the complete chain
NOT BUG:Document -pubkey
NOT BUG:Improve my 64-bit debug target
NOT BUG:add -crl_download option to s_server
NOT BUG:add -cert_chain option to s_client
NOT BUG:Make openssl verify return errors
NOT BUG:Update ignores
NOT BUG:Tabification Remove accidental duplication
NOT BUG:revert SUITEB128ONLY patch anything wanting to use P-384 can use SUITEB128 instead
NOT BUG:add -badsig option to ocsp utility too
NOT BUG:allow ECDSA+SHA384 signature algorithm in SUITEB128ONLY mode
NOT BUG:send out the raw SSL/TLS headers to the msg_callback and display them in SSL_trace
NOT BUG:Fix OCSP checking
NOT BUG:typo
NOT BUG:really fix automatic ;-)
NOT BUG:documentation fixes
NOT BUG:fix handling of "automatic" in file mode
NOT BUG:Add code to download CRLs based on CRLDP extension
NOT BUG:Just a sample real world applications would have to be cleverer
NOT BUG:remove print_ssl_cert_checks() from openssl application: it is no longer used
NOT BUG:Fix two bugs which affect delta CRL handling:
NOT BUG:Use -1 to check all extensions in CRLs Always set flag for freshest CRL
NOT BUG:Integrate host email and IP address checks into X509_verify
NOT BUG:Add new verify options to set checks
NOT BUG:Remove previous -check* commands from s_client and s_server
NOT BUG:aes-s390x.pl: fix XTS bugs in z196-specific code path
NOT BUG:don't print verbose policy check messages when -quiet is selected even on error
NOT BUG:ghash-sparcv9.pl: shave off one more xmulx improve T3 performance by 7%
NOT BUG:initial support for delta CRL generations by diffing two full CRLs
NOT BUG:make -subj always override config file
NOT BUG:check mval for NULL too
NOT BUG:fix leak
NOT BUG:oops really check brief mode only ;-)
NOT BUG:don't check errno is zero just print out message
BUG:if no error code and -brief selected print out connection closed instead of read error
BUG:add -badsig option to corrupt CRL signatures for testing too
NOT BUG:New option to add CRLs for s_client and s_server
NOT BUG:add option to get a certificate or CRL from a URL
NOT BUG:return error if Suite B mode is selected and TLS 1.2 can't be used Correct error coded
NOT BUG:cryptlib.c: fix logical error
NOT BUG:aesni-x86_64.pl: CTR face lift +25% on Bulldozer
NOT BUG:aes-s390x.pl: harmonize software-only code path [and minor optimization]
NOT BUG:Add new test option set the version in generated certificates: this is needed to test some profiles/protocols which reject certificates with unsupported versions
BUG:PR: 2803 Submitted by: jean-etienne.schwartz@bull.net
NOT BUG:In OCSP_basic_varify return an error if X509_STORE_CTX_init fails
NOT BUG:add wrapper function for certificate download
NOT BUG:constify
NOT BUG:Generalise OCSP I/O functions to support dowloading of other ASN1 structures using HTTP Add wrapper function to handle CRL download
BUG:C64x+ assembly pack: improve EABI support
NOT BUG:Update support for Intel compiler: add linux-x86_64-icc and fix problems
NOT BUG:New functions to set lookup_crls callback and to retrieve internal X509_STORE from X509_STORE_CTX
NOT BUG:Print out point format list for clients too
NOT BUG:Use default point formats extension for server side as well as client side if possible
NOT BUG:Don't advertise compressed char2 for SuiteB as it is not supported
NOT BUG:change inaccurate error message
NOT BUG:set auto ecdh parameter selction for Suite B
NOT BUG:set cmdline flag in s_server
NOT BUG:option to output corrupted signature in certificates for testing purposes
NOT BUG:AES for SPARC T4: add XTS reorder subroutines to improve TLB locality
NOT BUG:add Suite B 128 bit mode offering only combination 2
NOT BUG:Don't display messages about verify depth in s_server if -quiet it set
NOT BUG:Add support for separate verify and chain stores in s_client
NOT BUG:Add support for printing out and retrieving EC point formats extension
NOT BUG:reject zero length point format list or supported curves extensions
NOT BUG:support -quiet with -msg or -trace
NOT BUG:curves can be set in both client and server
NOT BUG:use correct return values when callin cmd
NOT BUG:only use a default curve if not already set
NOT BUG:Reorganise parameters for OPENSSL_gmtime_diff
NOT BUG:Make ASN1_UTCTIME_cmp_time_t more robust by using the new time functions
NOT BUG:Submitted by: Florian Weimer <fweimer@redhat.com> PR: 2909
NOT BUG:Update test cases to cover internal error return values
NOT BUG:Remove IDNA wildcard filter
NOT BUG:PR: 2908 Submitted by: Dmitry Belyavsky <beldmit@gmail.com>
NOT BUG:Fix DH double free if parameter generation fails
NOT BUG:fix printout of expiry days if -enddate is used in ca
NOT BUG:don't use psec or pdays if NULL
NOT BUG:first parameter is difference in days not years
NOT BUG:reorganise SSL_CONF_cmd manual page and update some links
NOT BUG:fix leaks
BUG:with -rev close connection if client sends "CLOSE"
NOT BUG:update usage messages
NOT BUG:correct docs
NOT BUG:document -trace and -msgfile options
NOT BUG:update docs for s_server/s_client
NOT BUG:make depend
NOT BUG:new function ASN1_TIME_diff to calculate difference between two ASN1_TIME structures
BUG:x86_64-gcc.c: resore early clobber constraint
NOT BUG:Submitted by: Florian Weimer
NOT BUG:make depend
NOT BUG:don't call gethostbyname if OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL is set
NOT BUG:remove obsolete code
NOT BUG:fix typo and warning
NOT BUG:clarify docs
NOT BUG:fix manual page file name
NOT BUG:document -naccept option
NOT BUG:add -naccept <n> option to s_server to automatically exit after <n> connections
BUG:PR: 2880 Submitted by: "Florian RÃ¼chel" <florian.ruechel@ruhr-uni-bochum.de>
NOT BUG:Correctly handle local machine keys in the capi ENGINE
NOT BUG:PR: 2909 Contributed by: Florian Weimer <fweimer@redhat.com>
NOT BUG:Fixes to X509 hostname and email address checking Wildcard matching support New test program and manual page
NOT BUG:remove redundant code from demo
NOT BUG:cryptlib.c: revert typo
NOT BUG:Extend OPENSSL_ia32cap_P with extra word to accomodate AVX2 capability
BUG:perlasm/sparcv9_modes.pl: addendum to commit#22966
NOT BUG:fix error messages
NOT BUG:Delegate command line handling for many common options in s_client/s_server to the SSL_CONF APIs
NOT BUG:This is complicated a little because the SSL_CTX structure is not available when the command line is processed: so just check syntax of commands initially and store them ready to apply later
NOT BUG:initial decription of GCM/CCM usage via EVP
BUG:Support for SPARC T4 MONT[MUL|SQR] instructions
NOT BUG:Submitted by: David Miller Andy Polyakov
NOT BUG:fix typos in SSL_CONF documentation
NOT BUG:add SSL_CONF functions and documentation
NOT BUG:typo
NOT BUG:update ciphers documentation to indicate implemented fixed DH ciphersuites
NOT BUG:initial update of ciphers doc
NOT BUG:new command line option -stdname to ciphers utility
NOT BUG:add "missing" TLSv1.2 cipher alias
NOT BUG:aes-x86_64.pl: Atom-specific optimizations +10% vpaes-x86_64.pl: minor performance squeeze
NOT BUG:aes-586.pl: Atom-specific optimization +44/29% minor improvement on others vpaes-x86.pl: minor performance squeeze
NOT BUG:ppccap.c: fix typo
NOT BUG:ppccap.c: restrict features on AIX 5
NOT BUG:bn_word.c: fix overflow bug in BN_add_word
NOT BUG:new feature: if ctx==NULL in SSL_CTX_ctrl perform syntax checking only for some operations (currently curves and signature algorithms)
BUG:contify
NOT BUG:crypto/modes: even more strict aliasing fixes [and fix bug in cbc128.c from previous cbc128.c commit]
NOT BUG:More strict aliasing fix
NOT BUG:correct error function code
NOT BUG:cbc128.c: fix strict aliasing warning
NOT BUG:e_camillia.c: remove copy-n-paste artifact EVP_CIPH_FLAG_FIPS and leave comment about CTR mode
NOT BUG:ghash-sparcv9.pl: 22% improvement on T4
NOT BUG:Remove unused static function
NOT BUG:Fix gcc 4.8 warning (strict aliasing violation)
NOT BUG:mk1mf.pl: correct flags
NOT BUG:e_os.h: keep stdin redifinitions to "normal" Windows
NOT BUG:util/fipslink.pl: further adjustments
NOT BUG:util/fipslink.pl: fix typo
NOT BUG:e_os.h: skip redundant headers in fipscanister build
NOT BUG:util/fipslink.pl: allow for single-step link
NOT BUG:util/pl/VC-32.pl: make fipscanister.lib universally usable
NOT BUG:typo
NOT BUG:test_t4: cover even Camellia
NOT BUG:SPARCv9 assembly pack: harmonize ABI handling (so that it's handled in one place at a time by pre-processor in .S case and perl - in .s)
NOT BUG:[aes|cmll]t4-sparcv9.pl: unify argument handling
NOT BUG:perlasm/sparcv9_modes.pl: fix typo in IV save code and switch to less aggressive ASI
NOT BUG:oops add missing asn_mstbl.c
NOT BUG:ghash-sparcv9.pl: add VIS3 code path
NOT BUG:New config module for string tables This can be used to add new multi string components (as used in DN fields or request attributes) or change the values of existing ones
NOT BUG:use correct year automatically
NOT BUG:linux-pcc: make it more robust and recognize KERNEL_BITS variable
NOT BUG:Add VIS3-capable sparcv9-gf2m module
NOT BUG:Add VIS3 Montgomery multiplication
NOT BUG:fix ASN1_STRING_TABLE_add so it can override existing string table values
NOT BUG:fix error code
NOT BUG:add simple AES GCM code example
NOT BUG:Don't require tag before ciphertext in AESGCM mode
NOT BUG:aix[64]-cc: get MT support right (gcc targets are not affected)
NOT BUG:sparcv9_modes.pl: membars are reported as must-have
NOT BUG:md5-sparcv9.pl: avoid %asi modifications improve short input performance by 30-20%
NOT BUG:[md5|sha1|sha512]-sparcv9.pl: "cooperative" optimizations based on suggestions from David Miller
NOT BUG:[aes|cmll]t4-sparcv9.pl: addendum to previous sparcv9_modes.pl commit
NOT BUG:perlasm/sparcv9_modes.pl: "cooperative" optimizations based on suggestions from David Miller
NOT BUG:Add SPARC T4 Camellia support
NOT BUG:Submitted by: David Miller
NOT BUG:aest4-sparcv9.pl: split it to AES-specific and reusable part
NOT BUG:oops fix compilation errors in s_server
NOT BUG:New functions to check a hostname email or IP address against a certificate Add options to s_client s_server and x509 utilities to print results of checks
NOT BUG:Add SPARC T4 AES support
NOT BUG:Submitted by: David Miller
NOT BUG:Fix EC_KEY initialization race
NOT BUG:Submitted by: Adam Langley
NOT BUG:If OPENSSL_SSL_DEBUG_BROKEN_PROTOCOL is set allow the use of "SCSV" as a ciphersuite to position the SCSV value in different places for testing purposes
NOT BUG:sha[1|512]-sparcv9.pl: add hardware SPARC T4 support
NOT BUG:Submitted by: David Miller
NOT BUG:md5-sparcv9.pl: add hardware SPARC T4 support
NOT BUG:Submitted by: David Miller
NOT BUG:sparc_arch.h: add assembler helpers (and make it work on Solaris)
NOT BUG:Submitted by: David Miller
NOT BUG:md5-sparcv9.pl: more accurate performance result
BUG:Fix Valgrind warning
NOT BUG:Submitted by: Adam Langley
NOT BUG:* Configure: make the debug-levitte-linux{elf,noasm} less extreme
NOT BUG:Add md5-sparcv9.pl
NOT BUG:sparcv9cap.c: add SPARC-T4 feature detection
NOT BUG:Submitted by: David Miller
NOT BUG:* ssl/t1_enc.c (tls1_change_cipher_state): Stupid bug Fortunately in debugging code that's seldom used
NOT BUG:config: detect linux-mips* targets
NOT BUG:Configure: allow for compiler options starting with double dash
BUG:MIPS assembly pack: add support for SmartMIPS ASE
NOT BUG:Fix warning
NOT BUG:Submitted by: Chromium Authors
NOT BUG:Configure: add MIPS targets
NOT BUG:MIPS assembly pack: add MIPS[32|64]R2 code
NOT BUG:aes-mips.pl: interleave load and integer instructions for better performance
NOT BUG:sha512-sparcv9.pl: fix binutils compilation error
NOT BUG:Submitted by: David Miller
NOT BUG:e_aes.c: uninitialized variable in aes_ccm_init_key
NOT BUG:PR: 2874 Submitted by: Tomas Mraz
NOT BUG:Add -rev test option to s_server to just reverse order of characters received by client and send back to server Also prints an abbreviated summary of the connection parameters
BUG:Add -brief option to s_client and s_server to summarise connection details
NOT BUG:New option -verify_quiet to shut up the verify callback unless there is an error
NOT BUG:Add ctrl and utility functions to retrieve raw cipher list sent by client in client hello message Previously this could only be retrieved on an initial connection and it was impossible to determine the cipher IDs of any uknown ciphersuites
NOT BUG:enhance EC method to support setting curve type when generating keys and add parameter encoding option
NOT BUG:fix memory leak
NOT BUG:Minor enhancement to PR#2836 fix Instead of modifying SSL_get_certificate change the current certificate (in s->cert->key) to the one used and then SSL_get_certificate and SSL_get_privatekey will automatically work
NOT BUG:Call OCSP Stapling callback after ciphersuite has been chosen so the right response is stapled Also change SSL_get_certificate() so it returns the certificate actually sent See http://rt.openssl.org/Ticket/Display.html?id=2836
NOT BUG:fix memory leak
NOT BUG:update README
NOT BUG:Extend certificate creation examples to include CRL generation and sample scripts running the test OCSP responder
NOT BUG:New -valid option to add a certificate to the ca index.txt that is valid and not revoked
NOT BUG:new ctrl to retrive value of received temporary key in server key exchange message print out details in s_client
NOT BUG:store and print out message digest peer signed with in TLS 1.2
NOT BUG:bsaes-armv7.pl: closest shave While 0.3 cpb improvement on S4 appears insignificant it's actually 4 cycles less for 14 instructions sequence!
NOT BUG:bsaes-armv7.pl: even closer shave
NOT BUG:bsaes-armv7.pl: minor performance squeeze on Snapdragon S4
NOT BUG:sha512-armv4.pl: optimize for Snapdragon S4
NOT BUG:bn_lcl.h: gcc removed support for "h" constraint which broke inline assembler
NOT BUG:Don't load GOST ENGINE if it is already loaded
NOT BUG:Multiple copies of the ENGINE will cause problems when it is cleaned up as the methods are stored in static structures which will be overwritten and freed up more than once
NOT BUG:Set static methods to NULL when the ENGINE is freed so it can be reloaded
NOT BUG:perform sanity checks on server certificate type as soon as it is received instead of waiting until server key exchange
NOT BUG:make EC test certificates usable for ECDH
NOT BUG:give more meaningful error if presented with wrong certificate type by server
NOT BUG:x86cpuid.pl: hide symbols [backport from x86_64]
BUG:TABLE update addendum to commit#22775
NOT BUG:Harmonize CHANGES in HEAD
NOT BUG:Add linux-x32 target
NOT BUG:Add compilation flag to disable certain protocol checks and allow use of some invalid operations for testing purposes Currently this can be used to sign using digests the peer doesn't support EC curves the peer doesn't support and use certificates which don't match the type associated with a ciphersuite
NOT BUG:oops typo
NOT BUG:New compile time option OPENSSL_SSL_TRACE_CRYPTO when set this passes all derived keys to the message callback
NOT BUG:Add code to SSL_trace to include support for printing out keys
NOT BUG:update debug-steve* configurations
NOT BUG:PR: 2786 Reported by: Tomas Mraz <tmraz@redhat.com>
NOT BUG:Treat a NULL value passed to drbg_free_entropy callback as non-op This can happen if the call to fips_get_entropy fails
NOT BUG:sha1-armv4-large.pl: comply with ABI
NOT BUG:Configure: add mips-mont to MIPS32 builds
NOT BUG:MIPS assembly pack: assign default value to $flavour
NOT BUG:Oops - didn't mean to change Makefile on previous submit
NOT BUG:Enable message names for TLS 1.1 1.2 with -msg
NOT BUG:Add three Suite B modes to TLS code supporting RFC6460
NOT BUG:bss_dgram.c: fix compilation failure and warning on Windows with contemporary SDK
NOT BUG:gosthash.c: use memmove in circle_xor8 as input pointers can be equal
NOT BUG:PR: 2858
NOT BUG:./Configure: libcrypto.a can grow to many GB because of ar bug
BUG:PR: 2838
NOT BUG:gcm128.c: fix AAD-only case with AAD length not divisible by 16
BUG:PR: 2859 Submitted by: John Foley
NOT BUG:sha512-x86_64.pl: revert previous change and solve the problem through perlasm/x86_64-xlate.pl instead
NOT BUG:sha512-x86_64.pl: minimum gas requirement for AMD XOP
NOT BUG:update ordinals
NOT BUG:Rename Suite B functions for consistency
NOT BUG:New function X509_chain_up_ref to dup and up the reference count of a STACK_OF(X509): replace equivalent functionality in several places by the equivalent call
NOT BUG:add suite B chain validation flags and associated verify errors
NOT BUG:Make tls1_check_chain return a set of flags indicating checks passed by a certificate chain Add additional tests to handle client certificates: checks for matching certificate type and issuer name comparison
NOT BUG:Print out results of checks for each candidate chain tested in s_server/s_client
NOT BUG:Abort handshake if signature algorithm used not supported by peer
BUG:check EC tmp key matches preferences
NOT BUG:typo
NOT BUG:Add support for certificate stores in CERT structure This makes it possible to have different stores per SSL structure or one store in the parent SSL_CTX Include distint stores for certificate chain verification and chain building New ctrl SSL_CTRL_BUILD_CERT_CHAIN to build and store a certificate chain in CERT structure: returing an error if the chain cannot be built: this will allow applications to test if a chain is correctly configured
NOT BUG:Note: if the CERT based stores are not set then the parent SSL_CTX store is used to retain compatibility with existing behaviour
NOT BUG:update NEWS
NOT BUG:set ciphers to NULL before calling cert_cb
NOT BUG:stop warning
NOT BUG:add ssl_locl.h to err header files rebuild ssl error strings
NOT BUG:Don't ignore (\!) reference count in X509_STORE_free
NOT BUG:New function ssl_set_client_disabled to set masks for any ciphersuites that are disabled for this session (as opposed to always disabled by configuration)
NOT BUG:reinclude crypto.h: this is needed in HEAD only to get the __fips_constseg definition
NOT BUG:update trace messages
NOT BUG:sha1-[586|x86_64].pl: shave off one instruction from body_40_59 it's 2% less instructions in SIMD code paths so 2% improvement in average:-)
BUG:mk1mf.pl: replace chop to make it work in mixture of perls for Windows
NOT BUG:test_aesni: harmonize with AES-NI support at EVP layer
NOT BUG:wp-x86_64.pl: ~10% performance improvement
NOT BUG:sha512-s390x.pl: lingering comment update
NOT BUG:sha512-ia64.pl: 15-20% performance improvement
NOT BUG:sha256-armv4.pl: 4% performance improvement
NOT BUG:sha1-s390x.pl: lingering comment update
NOT BUG:rc5.h: stop wasting space on 64-bit platforms [breaks binary compatibility!]
NOT BUG:wp-mmx.pl: ~10% performance improvement
NOT BUG:sha512-586.pl: optimize SSE2 code path +5-7% on most CPUs +13% on AMD K8
NOT BUG:sha1-586.pl: let masm compile AVX code
NOT BUG:x86gas.pl: treat OPENSSL_ia32cap_P accordingly to .hidden status
NOT BUG:Add new ctrl to retrieve client certificate types print out details in s_client
NOT BUG:Also add ctrl to set client certificate types If not used sensible values will be included based on supported signature algorithms: for example if we don't include any DSA signing algorithms the DSA certificate type is omitted
NOT BUG:Fix restriction in old code where certificate types would be truncated if it exceeded TLS_CT_NUMBER
NOT BUG:Install srtp.h
NOT BUG:Add d1_srtp and t1_trce
NOT BUG:Add the missing modules for Camellia as well as dh_rfc5114 and evp_cnf
NOT BUG:Harmonise symhacks.h in this branch with lower versions Add aliases for SSL_CTX_set_not_resumable_session_callback and SSL_set_not_resumable_session_callback on top of that
NOT BUG:add missing evp_cnf.c file
BUG:PR: 2840 Reported by: David McCullough <david_mccullough@mcafee.com>
NOT BUG:Restore fips configuration module from 0.9.8
NOT BUG:Fix memory leak
NOT BUG:Always perform nexproto callback argument initialisation in s_server otherwise we use uninitialised data if -nocert is specified
NOT BUG:cert_flags is unsigned
NOT BUG:add support for client certificate callbak fix memory leak
NOT BUG:new function SSL_is_server to which returns 1 is the corresponding SSL context is for a server
NOT BUG:no need to check s->server as default_nid is never used for TLS 1.2 client authentication
NOT BUG:Separate client and server permitted signature algorithm support: by default the permitted signature algorithms for server and client authentication are the same but it is now possible to set different algorithms for client authentication only
NOT BUG:bn_nist.c: compensate for VC bug [with optimization off!]
NOT BUG:PR: 2837
NOT BUG:crypto/bn/*.h: move PTR_SIZE_INT to private header
NOT BUG:remove unnecessary attempt to automatically call OPENSSL_init
NOT BUG:Fix Win32 build
NOT BUG:recognise OPENSSL_NO_SSL_TRACE
NOT BUG:bss_dgram.c: fix typos in Windows code
NOT BUG:sha256-586.pl: fix typos
NOT BUG:Add certificate callback If set this is called whenever a certificate is required by client or server An application can decide which certificate chain to present based on arbitrary criteria: for example supported signature algorithms Add very simple example to s_server This fixes many of the problems and restrictions of the existing client certificate callback: for example you can now clear existing certificates and specify the whole chain
NOT BUG:Function tls1_check_ec_server_key is now redundant as we make appropriate checks in tls1_check_chain
NOT BUG:Add new "valid_flags" field to CERT_PKEY structure which determines what the certificate can be used for (if anything) Set valid_flags field in new tls1_check_chain function Simplify ssl_set_cert_masks which used to have similar checks in it
NOT BUG:Add new "cert_flags" field to CERT structure and include a "strict mode" This enforces some TLS certificate requirements (such as only permitting certificate signature algorithms contained in the supported algorithms extension) which some implementations ignore: this option should be used with caution as it could cause interoperability issues
NOT BUG:don't use pseudo digests for default values of keys
NOT BUG:x86_64 assembly pack: make it possible to compile with Perl located on path with spaces
NOT BUG:PR: 2835
NOT BUG:sha512-x86_64.pl: fix typo
NOT BUG:Reorganise supported signature algorithm extension processing
NOT BUG:Only store encoded versions of peer and configured signature algorithms Determine shared signature algorithms and cache the result along with NID equivalents of each algorithm
NOT BUG:sha512-x86_64.pl: add SIMD code paths
NOT BUG:Add support for application defined signature algorithms for use with TLS v1.2 These are sent as an extension for clients and during a certificate request for servers
NOT BUG:TODO: add support for shared signature algorithms respect shared algorithms when deciding which ciphersuites and certificates to permit
NOT BUG:oops add -debug_decrypt option which was accidenatally left out
NOT BUG:sha512-x86_64.pl: fix typo
NOT BUG:sha256-586.pl: fix linking error
NOT BUG:fix clashing error code
NOT BUG:Make it possible to delete all certificates from an SSL structure
NOT BUG:Initial record tracing code Print out all fields in SSL/TLS records for debugging purposes Needs "enable-ssl-trace" configuration option
NOT BUG:New functions to retrieve certificate signatures and signature OID NID
BUG:sha256t.c: make sure unrolled loop is tested
NOT BUG:sha256-586.pl: add AVX and XOP code paths
NOT BUG:sha256-586.pl: squeeze some more most notably ~10% on Nehalem
NOT BUG:x86[_64] assembly pack: update benchmark results
NOT BUG:print out issuer and subject unique identifier fields in certificates
NOT BUG:bss_dgram.c: add BIO_CTRL_DGRAM_SET_DONT_FRAG
NOT BUG:PR: 2830 Submitted by: Robin Seggelmann
NOT BUG:bss_dgram.c: make getsockopt work in cases when optlen is 64-bit value
NOT BUG:Fix memory leak
NOT BUG:b_sock.c: make getsockopt work in cases when optlen is 64-bit value
NOT BUG:Rearrange and test authz extension
NOT BUG:Fix memory leak
NOT BUG:Parse authz correctly
NOT BUG:Revert random changes from commit#22606
BUG:Version skew reduction: trivia (I hope)
BUG:RFC 5878 support
NOT BUG:Build on FreeBSD with gcc 4.6
NOT BUG:sha256-586.pl: full unroll to deliver additional ~16% add Sandy Bridge- specific code path
NOT BUG:sha512-x86_64.pl: >5% better performance
NOT BUG:aesni-x86_64.pl: make it possibel to use in Linux kernel
NOT BUG:sha256-586.pl: tune away regression on Nehalem core and incidentally improve performance on Atom and P4
NOT BUG:sha256-586.pl optimization
NOT BUG:s2_clnt.c: compensate for compiler bug
NOT BUG:ppccap.c: assume no features under 32-bit AIX kernel
BUG:PR: 2810
BUG:PR: 2813 Reported by: Constantine Sapuntzakis <csapuntz@gmail.com>
NOT BUG:Fix possible deadlock when decoding public keys
BUG:PR: 2811 Reported by: Phil Pennock <openssl-dev@spodhuis.org>
NOT BUG:Make renegotiation work for TLS 1.2 1.1 by not using a lower record version client hello workaround if renegotiating
NOT BUG:Fix warning
NOT BUG:Padlock doesn't build I don't even know what it is
BUG:PR: 2806 Submitted by: PK <runningdoglackey@yahoo.com>
NOT BUG:Correct ciphersuite signature algorithm definitions
NOT BUG:Sanity check record length before skipping explicit IV in TLS 1.2 1.1 and DTLS to fix DoS attack
BUG:Thanks to Codenomicon for discovering this issue using Fuzz-o-Matic fuzzing as a service testing platform (CVE-2012-2333)
NOT BUG:update FAQ
BUG:Reported by: Solar Designer of Openwall
NOT BUG:Make sure tkeylen is initialised properly when encrypting CMS messages
NOT BUG:Correct environment variable is OPENSSL_ALLOW_PROXY_CERTS
NOT BUG:perlasm: fix symptom-less bugs missing semicolons and 'my' declarations
NOT BUG:ppccpuid.pl: branch hints in OPENSSL_cleanse impact small block performance of digest algorithms mosty SHA on Power7 Mystery of century why SHA why slower algorithm are affected more.. PR: 2794 Submitted by: Ashley Lai
NOT BUG:Don't try to use unvalidated composite ciphers in FIPS mode
NOT BUG:update NEWS
NOT BUG:update FAQ
NOT BUG:CHANGES: clarify
NOT BUG:CHANGES: fix typos and clarify
NOT BUG:Change value of SSL_OP_NO_TLSv1_1 to avoid clash with SSL_OP_ALL and OpenSSL 1.0.0 Add CHANGES entry noting the consequences
NOT BUG:s23_clnt.c: ensure interoperability by maitaining client "version capability" vector contiguous PR: 2802
NOT BUG:Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Reviewed by: steve Improved localisation of TLS extension handling and code tidy
NOT BUG:oops not yet ;-)
NOT BUG:update NEWS
NOT BUG:objxref.pl: improve portability
NOT BUG:correct error code
NOT BUG:check correctness of errors before updating them so we don't get bogus errors added
NOT BUG:correct old FAQ answers
BUG:PR: 2239 Submitted by: Dominik Oepen <oepen@informatik.hu-berlin.de>
BUG:Add Brainpool curves from RFC5639
BUG:Original patch by Annie Yousar <a.yousar@informatik.hu-berlin.de>
NOT BUG:e_rc4_hmac_md5.c: last commit was inappropriate for non-x86[_64] platforms PR: 2792
BUG:Check for potentially exploitable overflows in asn1_d2i_read_bio BUF_mem_grow and BUF_mem_grow_clean Refuse attempts to shrink buffer in CRYPTO_realloc_clean
BUG:Thanks to Tavis Ormandy Google Security Team for discovering this issue and to Adam Langley <agl@chromium.org> for fixing it (CVE-2012-2110)
NOT BUG:update FAQ
NOT BUG:Makefile.org: clear yet another environment variable PR: 2793
NOT BUG:recognise X9.42 DH certificates on servers
NOT BUG:correct error codes
NOT BUG:e_rc4_hmac_md5.c: harmonize zero-length fragment handling with e_aes_cbc_hmac_sha1.c (mostly for aesthetic reasons)
NOT BUG:e_rc4_hmac_md5.c: oops can't use rc4_hmac_md5_cipher on legacy Intel CPUs
BUG:PR: 2792
NOT BUG:C64x+ assembler pack linux-c64xplus build is *not* tested nor can it be tested because kernel is not in shape to handle it *yet* The code is committed mostly to stimulate the kernel development
NOT BUG:Disable SHA-2 ciphersuites in < TLS 1.2 connections
NOT BUG:(TLS 1.2 clients could end up negotiating these with an OpenSSL server with TLS 1.2 disabled which is problematic.)
NOT BUG:Submitted by: Adam Langley
NOT BUG:Additional workaround for PR#2771
NOT BUG:If OPENSSL_MAX_TLS1_2_CIPHER_LENGTH is set then limit the size of client ciphersuites to this value A value of 50 should be sufficient
NOT BUG:Document workarounds in CHANGES
NOT BUG:Partial workaround for PR#2771
NOT BUG:Some servers hang when presented with a client hello record length exceeding 255 bytes but will work with longer client hellos if the TLS record version in client hello does not exceed TLS v1.0 Unfortunately this doesn't fix all cases..
BUG:OPENSSL_NO_SOCK fixes PR: 2791 Submitted by: Ben Noordhuis
NOT BUG:Minor compatibility fixes PR: 2790 Submitted by: Alexei Khlebnikov
NOT BUG:s3_srvr.c: fix typo PR: 2538
NOT BUG:e_aes_cbc_hmac_sha1.c: handle zero-length payload and engage empty frag countermeasure
BUG:PR: 2778
NOT BUG:ghash-s390x.pl: fix typo [that can induce SEGV in 31-bit build]
NOT BUG:Add options to set additional type specific certificate chains to s_server
NOT BUG:use different variable for chain iteration
NOT BUG:fix reset fix
NOT BUG:make reinitialisation work for CMAC
NOT BUG:update rather ancient EVP digest documentation
NOT BUG:aes-s390x.pl: fix crash in AES_set_decrypt_key in linux32-s390x build
BUG:Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr>
NOT BUG:Localize client hello extension parsing in t1_lib.c
NOT BUG:Add support for automatic ECDH temporary key parameter selection When enabled instead of requiring an application to hard code a (possibly inappropriate) parameter set and delve into EC internals we just automatically use the preferred curve
NOT BUG:add FAQ about version numbers
NOT BUG:aes-armv4.pl: make it more foolproof [inspired by aes-s390x.pl in 1.0.1]
NOT BUG:aes-s390x.pl: make it more foolproof [inspired by 1.0.1]
BUG:ssl/ssl_ciph.c: interim solution for assertion in d1_pkt.c(444)
BUG:PR: 2778
NOT BUG:Tidy up EC parameter check code: instead of accessing internal structures add utility functions to t1_lib.c to check if EC certificates and parameters are consistent with peer
NOT BUG:Update ordinals
NOT BUG:CHANGES: harmonize with 1.0.0 and 1.0.1
NOT BUG:PR: 2778(part) Submitted by: John Fitzgibbon <john_fitzgibbon@yahoo.com>
NOT BUG:Time is always encoded as 4 bytes not sizeof(Time)
NOT BUG:modes_lcl.h: make it work on i386 PR: 2780
NOT BUG:vpaes-x86[_64].pl: handle zero length in vpaes_cbc_encrypt PR: 2775
NOT BUG:util/cygwin.sh update PR: 2761 Submitted by: Corinna Vinschen
NOT BUG:don't shadow
NOT BUG:bn/bn_gf2m.c: make new BN_GF2m_mod_inv work with BN_DEBUG_RAND
NOT BUG:modes/gcm128.c: fix self-test
NOT BUG:sha512-armv4.pl: optimize NEON code path by utilizing vbsl bitwise select
NOT BUG:perlasm/x86masm.pl: fix last fix
BUG:ans1/tasn_prn.c: avoid bool in variable names PR: 2776
NOT BUG:Initial revision of ECC extension handling
NOT BUG:Tidy some code up
NOT BUG:Don't allocate a structure to handle ECC extensions when it is used for default values
NOT BUG:Make supported curves configurable
NOT BUG:Add ctrls to retrieve shared curves: not fully integrated with rest of ECC code yet
NOT BUG:fix leak
BUG:Submitted by: Markus Friedl <mfriedl@gmail.com>
NOT BUG:Fix memory leaks in 'goto err' cases
NOT BUG:use client version when deciding whether to send supported signature algorithms extension
NOT BUG:e_padlock-x86[_64].pl: better understanding of prefetch errata and proper workaround
NOT BUG:eng_all.c: revert previous "disable Padlock" commit which was unjustified
NOT BUG:Always use SSLv23_{client,server}_method in s_client.c and s_server.c the old code came from SSLeay days before TLS was even supported
NOT BUG:vpaes-x86_64.pl: out-of-date Apple assembler fails to calculate distance between local labels PR: 2762
NOT BUG:bsaes-x86_64.pl: optimize key conversion
NOT BUG:bsaes-armv7.pl: optmize Sbox and key conversion
NOT BUG:oops revert unrelated patches
NOT BUG:update FAQ NEWS
NOT BUG:ghash-x86.pl: omit unreferenced rem_8bit from no-sse2 build
BUG:ssl/t1_enc.c: pay attention to EVP_CIPH_FLAG_CUSTOM_CIPHER
NOT BUG:x86_64-xlate.pl: remove old kludge PR: 2435,2440
NOT BUG:corrected fix to PR#2711 and also cover mime_param_cmp
NOT BUG:Fix for CMS/PKCS7 MMA If RSA decryption fails use a random key and continue with symmetric decryption process to avoid leaking timing information to an attacker
NOT BUG:Thanks to Ivan Nestlerode <inestlerode@us.ibm.com> for discovering this issue (CVE-2012-0884)
NOT BUG:update NEWS
NOT BUG:PR: 2744 Submitted by: Dmitry Belyavsky <beldmit@gmail.com>
NOT BUG:CMS support for ccgost engine
BUG:Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr>
NOT BUG:Add more extension names in s_cb.c extension printing code
BUG:PR: 2756 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fix DTLS timeout handling
NOT BUG:check return value of BIO_write in PKCS7_decrypt
NOT BUG:New ctrls to retrieve supported signature algorithms and curves and extensions to s_client and s_server to print out retrieved valued
NOT BUG:Extend CERT structure to cache supported signature algorithm data
BUG:PR: 2755 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Reduce MTU after failed transmissions
BUG:PR: 2748 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fix possible DTLS timer deadlock
NOT BUG:don't do loop check for single self signed certificate
NOT BUG:Configure: make no-whirlpool work
NOT BUG:bsaes-armv7.pl: change preferred contact
NOT BUG:Add bit-sliced AES for ARM NEON This initial version is effectively reference implementation it does not interface to OpenSSL yet
NOT BUG:PR: 2743 Reported by: Dmitry Belyavsky <beldmit@gmail.com>
NOT BUG:Fix memory leak if invalid GOST MAC key given
NOT BUG:PR: 2742 Reported by: Dmitry Belyavsky <beldmit@gmail.com>
NOT BUG:If resigning with detached content in CMS just copy data across
NOT BUG:Fix memory leak cause by race condition when creating public keys
NOT BUG:Thanks to Ivan Nestlerode <inestlerode@us.ibm.com> for reporting this bug
NOT BUG:x86cpuid.pl: fix processor capability detection on pre-586
BUG:PR: 2736 Reported by: Remi Gacogne <rgacogne-bugs@coredump.fr>
NOT BUG:Preserve unused bits value in non-canonicalised ASN1_STRING structures by using ASN1_STRING_copy which preseves flags
BUG:PR: 2737 Submitted by: Remi Gacogne <rgacogne-bugs@coredump.fr>
NOT BUG:Fix double free in PKCS12_parse if we run out of memory
BUG:PR: 2739 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fix padding bugs in Heartbeat support
BUG:PR: 2735
BUG:Make cryptodev digests work Thanks to Nikos Mavrogiannopoulos for this fix
NOT BUG:free headers after use in error message
NOT BUG:Detect symmetric crypto errors in PKCS7_decrypt
NOT BUG:Thanks to Ivan Nestlerode <inestlerode@us.ibm.com> for reporting this bug
NOT BUG:Configure: I remove adding of -D_XPG4_2 -D__EXTENSIONS__ in sctp builds for following reasons:
NOT BUG:- it's not the way to engage XPG4v2 mode defining _XOPEN_SOURCE to value less than 500 is (see standards(5)); - we need to work out strategy to handle _XOPEN_SOURCE current state when we define e.g _XOPEN_SOURCE to 500 in some files is inappropriate; - sctp implementation on Solaris is incomplete in sense that bss_dgram.c doesn't compile because not all structures are defined so that enabling sctp doesn't work anyway;
NOT BUG:seed.c: incredibly enough seed.c can fail to compile on Solaris with certain flags because SS is defined after inclusion of <stdlib.h> in <sys/regset.h>
BUG:PR: 2730 Submitted by: Arpadffy Zoltan <Zoltan.Arpadffy@scientificgames.se>
NOT BUG:VMS fixes: disable SCTP by default
NOT BUG:ABI fixes from 1.0.1-stable
NOT BUG:PR: 2711 Submitted by: Tomas Mraz <tmraz@redhat.com>
NOT BUG:Tolerate bad MIME headers in parser
BUG:PR: 2696 Submitted by: Rob Austein <sra@hactrn.net>
BUG:Fix inverted range problem in RFC3779 code
NOT BUG:Thanks to Andrew Chi for generating test cases for this bug
BUG:PR: 2727 Submitted by: Bruce Stephens <bruce.stephens@isode.com>
NOT BUG:Use same construct for EXHEADER in srp/Makefile as other makefiles to cope with possibly empty EXHEADER
NOT BUG:ABI compliance fixes
NOT BUG:Move new structure fields to end of structures
NOT BUG:SSL export fixes (from Adam Langley) [original from 1.0.1]
NOT BUG:initialise i if n == 0
NOT BUG:Add new APIs EC_curve_nist2nid and EC_curve_nid2nist which convert between NIDs and the more common NIST names such as "P-256" Enhance ecparam utility and ECC method to recognise the NIST names for curves
NOT BUG:Fix bug in CVE-2011-4619: check we have really received a client hello before rejecting multiple SGC restarts
NOT BUG:Additional compatibility fix for MDC2 signature format
NOT BUG:Update RSA EVP_PKEY_METHOD to use the OCTET STRING form of MDC2 signature: this will make all versions of MDC2 signature equivalent
NOT BUG:An incompatibility has always existed between the format used for RSA signatures and MDC2 using EVP or RSA_sign This has become more apparent when the dgst utility in OpenSSL 1.0.0 and later switched to using the EVP_DigestSign functions which call RSA_sign
NOT BUG:This means that the signature format OpenSSL 1.0.0 and later used with dgst -sign and MDC2 is incompatible with previous versions
NOT BUG:Add detection in RSA_verify so either format works
NOT BUG:Note: MDC2 is disabled by default in OpenSSL and very rarely used in practice
NOT BUG:PR: 2713 Submitted by: Tomas Mraz <tmraz@redhat.com>
NOT BUG:Move libraries that are not needed for dynamic linking to Libs.private in the .pc files
NOT BUG:PR: 2717 Submitted by: Tim Rice <tim@multitalents.net>
NOT BUG:Make compilation work on OpenServer 5.0.7
NOT BUG:PR: 2716 Submitted by: Adam Langley <agl@google.com>
NOT BUG:Fix handling of exporter return value and use OpenSSL indentation in s_client s_server
BUG:PR: 2703 Submitted by: Alexey Melnikov <alexey.melnikov@isode.com>
NOT BUG:Fix some memory and resource leaks in CAPI ENGINE
BUG:PR: 2705 Submitted by: Alexey Melnikov <alexey.melnikov@isode.com>
NOT BUG:Only create ex_data indices once for CAPI engine
BUG:Submitted by: Eric Rescorla <ekr@rtfm.com>
NOT BUG:Further fixes for use_srtp extension
NOT BUG:apps/s_cb.c: recognized latest TLS version
BUG:PR: 2704 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr>
NOT BUG:Fix srp extension
NOT BUG:PR: 2710 Submitted by: Tomas Mraz <tmraz@redhat.com>
NOT BUG:Check return codes for load_certs_crls
NOT BUG:PR: 2714 Submitted by: Tomas Mraz <tmraz@redhat.com>
NOT BUG:Make no-srp work
NOT BUG:only cleanup ctx if we need to save ctx flags when we do
NOT BUG:add fips blocking overrides to command line utilities
BUG:Submitted by: Eric Rescorla <ekr@rtfm.com>
NOT BUG:Fix encoding of use_srtp extension to be compliant with RFC5764
NOT BUG:oops revert unrelated changes
NOT BUG:Modify client hello version when renegotiating to enhance interop with some servers
NOT BUG:typo
NOT BUG:bn_nist.c: make new optimized code dependent on BN_LLONG
NOT BUG:hpux-parisc2-*: engage assembler
NOT BUG:Add support for distinct certificate chains per key type and per SSL structure
NOT BUG:Before this the only way to add a custom chain was in the parent SSL_CTX (which is shared by all key types and SSL structures) or rely on auto chain building (which is performed on each handshake) from the trust store
NOT BUG:code tidy
NOT BUG:Revise ssl code to use a CERT_PKEY structure when outputting a certificate chain instead of an X509 structure
NOT BUG:This makes it easier to enhance code in future and the chain output functions have access to the CERT_PKEY structure being used
NOT BUG:Tidy/enhance certificate chain output code
NOT BUG:New function ssl_add_cert_chain which adds a certificate chain to SSL internal BUF_MEM Use this function in ssl3_output_cert_chain and dtls1_output_cert_chain instead of partly duplicating code
NOT BUG:allow key agreement for SSL/TLS certificates
NOT BUG:initialise dh_clnt
NOT BUG:ghash-x86.pl: engage original MMX version in no-sse2 builds
NOT BUG:add example for DH certificate generation
NOT BUG:add support for use of fixed DH client certificates
NOT BUG:oops revert debug change
NOT BUG:return error if md is NULL
NOT BUG:x86_64-xlate.pl: proper solution for RT#2620
BUG:Fix for DTLS DoS issue introduced by fix for CVE-2011-4109 Thanks to Antonio Martin Enterprise Secure Access Research and Development Cisco Systems Inc for discovering this bug and preparing a fix (CVE-2012-0050)
NOT BUG:fix CHANGES entry
NOT BUG:Support for fixed DH ciphersuites
NOT BUG:The cipher definitions of these ciphersuites have been around since SSLeay but were always disabled Now OpenSSL supports DH certificates they can be finally enabled
NOT BUG:Various additional changes were needed to make them work properly: many unused fixed DH sections of code were untested
BUG:cryptlib.c: sscanf warning
BUG:Fix OPNESSL vs OPENSSL typos PR: 2613 Submitted by: Leena Heino
NOT BUG:fix warning
NOT BUG:cryptlib.c: make even non-Windows builds "strtoull-agnostic"
NOT BUG:sha512-sparcv9.pl: work around V8+ warning
NOT BUG:aes-ppc.pl sha512-ppc.pl: comply even with Embedded ABI specification (most restrictive about r2 and r13 usage)
NOT BUG:Sanitize usage of <ctype.h> functions It's important that characters are passed zero-extended not sign-extended PR: 2682
BUG:ec_pmeth.c: fix typo in commentary PR: 2677 Submitted by: Annue Yousar
BUG:doc/apps: formatting fixes PR: 2683 Submitted by: Annie Yousar
BUG:speed.c: typo in pkey_print_message PR: 2681 Submitted by: Annie Yousar
BUG:ecdsa.pod: typo PR: 2678 Submitted by: Annie Yousar
NOT BUG:asn1/t_x509.c: fix serial number print harmonize with a_int.c PR: 2675 Submitted by: Annie Yousar
NOT BUG:aes-sparcv9.pl: clean up regexp PR: 2685
NOT BUG:fix warning (revert original patch)
NOT BUG:cmac.c: optimize make_kn and move zero_iv to const segment
NOT BUG:bn_nist.c: harmonize buf in BN_nist_mod_256 with other mod functions
BUG:Update for 0.9.8s and 1.0.0f and for 1.0.1 branch
NOT BUG:(While the 1.0.0f CHANGES entry on VOS PRNG seeding was missing in HEAD the actual code is here already.)
NOT BUG:Fix usage indentation
NOT BUG:Fix for builds without DTLS support
BUG:Submitted by: Brian Carlstrom
NOT BUG:PR: 2671 Submitted by: steve
NOT BUG:Update maximum message size for certifiate verify messages to support 4096 bit RSA keys again as TLS v1.2 messages is two bytes longer
NOT BUG:Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
BUG:Send fatal alert if heartbeat extension has an illegal value
NOT BUG:disable heartbeats if tlsext disabled
NOT BUG:update CHANGES
BUG:Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Michael Tuexen <tuexen@fh-muenster.de> Reviewed by: steve
BUG:Fix for DTLS plaintext recovery attack discovered by Nadhem Alfardan and Kenny Paterson
NOT BUG:Clear bytes used for block padding of SSL 3.0 records (CVE-2011-4576)
NOT BUG:Only allow one SGC handshake restart for SSL/TLS (CVE-2011-4619)
NOT BUG:fix CHANGES
NOT BUG:Check GOST parameters are not NULL (CVE-2012-0027)
BUG:Prevent malformed RFC3779 data triggering an assertion failure (CVE-2011-4577)
NOT BUG:update FAQ
NOT BUG:fix warnings
NOT BUG:Submitted by: Adam Langley <agl@chromium.org> Reviewed by: steve
NOT BUG:Fix memory leaks
NOT BUG:oops revert wrong patch
NOT BUG:only send heartbeat extension from server if client sent one
NOT BUG:incomplete provisional OAEP CMS decrypt support
NOT BUG:recognise HEARTBEATS in mkdef.pl script
NOT BUG:update CHANGES
BUG:PR: 2658 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Support for TLS/DTLS heartbeats
NOT BUG:make update
NOT BUG:update default depflags
NOT BUG:fix error code
NOT BUG:fix deprecated statement
BUG:PR: 1794 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Reviewed by: steve
BUG:- remove some unncessary SSL_err and permit an srp user callback to allow a worker to obtain a user verifier
NOT BUG:- cleanup and comments in s_server and demonstration for asynchronous srp user lookup
BUG:PR: 2326 Submitted by: Tianjie Mao <tjmao@tjmao.net> Reviewed by: steve
BUG:Fix incorrect comma expressions and goto f_err as alert has been set
BUG:recognise no-sctp
NOT BUG:recognise SCTP in mkdef.pl script
BUG:PR: 2535 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
BUG:Add SCTP support for DTLS (RFC 6083)
NOT BUG:typo
NOT BUG:recognise DECLARE_PEM_write_const update ordinals
NOT BUG:delete unimplemented function from header file update ordinals
NOT BUG:sync and update ordinals
NOT BUG:remove prototype for deleted SRP function
NOT BUG:New ctrl values to clear or retrieve extra chain certs from an SSL_CTX New function to retrieve compression method from SSL_SESSION structure
NOT BUG:Delete SSL_SESSION_get_id_len and SSL_SESSION_get0_id functions as they duplicate functionality of SSL_SESSION_get_id Note: these functions have never appeared in any release version of OpenSSL
BUG:PR: 2563 Submitted by: Paul Green <Paul.Green@stratus.com> Reviewed by: steve
NOT BUG:Improved PRNG seeding for VOS
NOT BUG:update CHANGES
NOT BUG:update CHANGES
NOT BUG:apps/speed.c: fix typo in last commit
NOT BUG:apps/speed.c: Cygwin alarm() fails sometimes PR: 2655
NOT BUG:vpaes-x86.pl: revert previous commit and solve the problem through x86masm.pl PR: 2657
BUG:PR: 1794 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Reviewed by: steve
NOT BUG:Remove unnecessary code for srp and to add some comments to s_client
NOT BUG:- the callback to provide a user during client connect is no longer necessary since rfc 5054 a connection attempt with an srp cipher and no user is terminated when the cipher is acceptable
BUG:- comments to indicate in s_client the (non-)usefulness of th primalaty tests for non known group parameters
NOT BUG:Add private keys and generation scripts for test certificates in apps directory
NOT BUG:vpaes-x86.pl: portability fix PR: 2657
NOT BUG:Remove redundant TLS exporter
NOT BUG:Padlock engine doesn't build (the asm parts are not built for some reason) so remove for now
NOT BUG:Fix warning
NOT BUG:Back out redundant verification time change
NOT BUG:Make it possible to set a time for verification
NOT BUG:modexp512-x86_64.pl: Solaris protability fix
NOT BUG:PR: 2656
NOT BUG:detect and use older PKITS data
NOT BUG:Updates from fips2 branch: close streams in test utilities use cofactor ECDH add new key and signature generation tests to fips_test_suite
NOT BUG:add cofactor ECDH support from fips branch
NOT BUG:use different names for asm temp files to avoid problems on some platforms
NOT BUG:add commented out option to allow use of older PKITS data
NOT BUG:update CHANGES
NOT BUG:implement -attime option as a verify parameter then it works with all relevant applications
NOT BUG:perlasm/x86gas.pl: give a hand old assemblers assembling loop instruction
NOT BUG:x86-mont.pl: fix bug in integer-only squaring path PR: 2648
NOT BUG:Replace expired test server and client certificates with new ones
NOT BUG:transparently handle X9.42 DH parameters
NOT BUG:fix error discrepancy
NOT BUG:Document RFC5114 "generation" options
NOT BUG:Initial experimental support for X9.42 DH parameter format to handle RFC5114 parameters and X9.42 DH public and private keys
NOT BUG:The default CN prompt message can be confusing when often the CN needs to be the server FQDN: change it [Reported by PSW Group]
NOT BUG:Resolve a stack set-up race condition (if the list of compression methods isn't presorted it will be sorted on first read)
NOT BUG:Submitted by: Adam Langley
BUG:Fix ecdsatest.c
BUG:Submitted by: Emilia Kasper
NOT BUG:Update HEAD CHANGES file
NOT BUG:Fix BIO_f_buffer()
NOT BUG:Submitted by: Adam Langley Reviewed by: Bodo Moeller
BUG:Update DH_check() to peform sensible checks when q parameter is present
NOT BUG:Correct some parameter values
NOT BUG:bn/asm/mips.pl: fix typos
NOT BUG:return error if counter exceeds limit and seed value supplied
NOT BUG:check counter value against 4 * L not 4096
BUG:PR: 1794 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Reviewed by: steve
BUG:Make SRP conformant to rfc 5054
NOT BUG:Changes are:
NOT BUG:- removal of the addition state after client hello - removal of all pre-rfc srp alert ids - sending a fatal alert when there is no srp extension but when the server wants SRP - removal of unnecessary code in the client
NOT BUG:Fix NPN implementation for renegotiation (Problem pointed out by Ben Murphy.)
NOT BUG:Submitted by: Adam Langley
NOT BUG:sync and update ordinals
NOT BUG:add cryptlib.h to mkdef.pl
NOT BUG:sync and update ordinals
NOT BUG:add strp.h to mkdef.pl headers
NOT BUG:move internal functions to ssl_locl.h
NOT BUG:bcmp doesn't exist on all platforms replace with memcmp
NOT BUG:bsaes-x86_64.pl: fix buffer overrun in tail processing
NOT BUG:In EC_KEY_set_public_key_affine_coordinates include explicit check to see passed components do not exceed field order
BUG:Add TLS exporter
NOT BUG:Add DTLS-SRTP
NOT BUG:Configure: reimplement commit#21695
NOT BUG:Configure e_aes.c: allow for XTS assembler implementation
BUG:Fix some warnings caused by __owur Temporarily (I hope) remove the more aspirational __owur annotations
NOT BUG:bsaes-x86_64.pl: add Win64 SEH and "hadrware" calls to aes-x86_64.pl
NOT BUG:bn_nist.c: fix strict-aliasing compiler warning
NOT BUG:Add RFC5114 DH parameters to OpenSSL Add test data to dhtest
BUG:PR: 1794 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Reviewed by: steve
NOT BUG:Document unknown_psk_identify alert remove pre-RFC 5054 string from ssl_stat.c
NOT BUG:rc4test.c: commit#21684 broke x86_64 shared Linux build This is temporary solution so that one can build rc4test..
NOT BUG:e_aes.c: additional sanity check in aes_xts_cipher
NOT BUG:cryptlib.c etc.: fix linker warnings in 64-bit Darwin build
NOT BUG:Configure x86gas.pl: fix linker warnings in 32-bit Darwin build
NOT BUG:engines/: get rid of cvs warnings on MacOS X proper clean in ccgost
NOT BUG:Makefile.org: proper libclean on MacOS X
NOT BUG:portability fix for some perl versions
NOT BUG:bsaes-x86_64.pl: add bsaes_xts_[en|de]crypt
NOT BUG:arm_arch.h: allow to specify __ARM_ARCH__ elsewhere
NOT BUG:x86cpuid.pl: compensate for imaginary virtual machines
NOT BUG:Configure: harmonize darwin64-x86_64-cc line with assembler pack
NOT BUG:config: KERNEL_BITS envrionment variable to control choice between 32- and 64-bit Solaris builds
NOT BUG:config: KERNEL_BITS envrionment variable to control choice between 32- and 64-bit darwin builds
NOT BUG:Configure: initial support for iOS
NOT BUG:Configure: allow ./config to pass compiler flags with white spaces
NOT BUG:fips_canister.c: add cross-compiler support for iOS (it applies even to MacOS X because it's easier to handle it this way)
NOT BUG:fips_premain.c: fix warning about _exit on MacOS X
NOT BUG:fipsld incore: switch to new cross-compile support
NOT BUG:e_aes.c: fold aesni_xts_cipher and [most importantly] fix aes_xts_cipher's return value after custom flag was rightly reverted
NOT BUG:check for unset entropy and nonce callbacks
NOT BUG:Update fips_test_suite to take multiple command line options and an induced error checking function
NOT BUG:typo
NOT BUG:make post failure simulation reversible in all cases
NOT BUG:typo: use key for POST callback
NOT BUG:fix set but unused warnings
NOT BUG:armv4cpuid.S armv4-gf2m.pl: make newest code compilable by older assembler
BUG:x86cpuid.pl: don't punish "last-year" OSes on "this-year" CPUs PR: 2633
BUG:ppc.pl: fix bug in bn_mul_comba4 PR: 2636 Submitted by: Charles Bryant
NOT BUG:Add single call public key sign and verify functions
NOT BUG:Add support for memory leak checking in fips_algvs
NOT BUG:Fix many memory leaks in algorithm test utilities
NOT BUG:Remove duplicate test from health check Fix memory leaks by uninstantiating DRBG before reinitialising it
NOT BUG:Print out an error for "make test" in FIPS builds (from FIPS stable)
NOT BUG:Add fips_algvs utility (from FIPS 2.0 stable branch)
NOT BUG:Typo..
NOT BUG:bsaes-x86_64.pl: add CBC decrypt and engage it in e_aes.c
NOT BUG:Add missing algorithms to disable and in particular disable EC_NISTP_64_GCC_128 by default as GCC isn't currently supported on VMS Synchronise with Unix
NOT BUG:Teach mkshared.com to have a look for disabled algorithms in opensslconf.h
NOT BUG:bn_exp.c: fix corner case in new constant-time code
BUG:Submitted by: Emilia Kasper
NOT BUG:bsaes-x86_64.pl: optimize InvMixColumns
NOT BUG:bsaes-x86_64.pl: add decryption procedure (with unoptimized reference InvMixColumns)
BUG:PR: 2628 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
BUG:Send alert instead of assertion failure for incorrectly formatted DTLS fragments
BUG:PR: 2628 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fix for ECC keys and DTLS
BUG:PR: 2632 Submitted by: emmanuel.azencot@bull.net Reviewed by: steve
BUG:Return -1 immediately if not affine coordinates as BN_CTX has not been set up
NOT BUG:Use correct tag for SRP username
NOT BUG:typo
NOT BUG:e_aes.c: fold even aesni_ccm_cipher
NOT BUG:e_aes.c: prevent potential DoS in aes_gcm_tls_cipher
NOT BUG:cryptlib.c: remove stdio dependency in Windows fipscanister.lib
NOT BUG:No need for custom flag in XTS mode: block length is 1
NOT BUG:fips_canister.c: harmonize fingerprinting for all Windows CE or not
NOT BUG:config: in cross-compile case interrogate cross-compiler not host work around sub-shell limitation
NOT BUG:Check for selftest failure in various places
NOT BUG:x86gas.pl: relax .init segment alignment
NOT BUG:mk1mk.pl: cleanup engines' handling and make fips build work on WIN64I
NOT BUG:Update error codes
NOT BUG:fips.c: remove preprocessor artefact
NOT BUG:fix (?) AVX clearing
NOT BUG:Check for uninitialised DRBG_CTX and don't free up default DRBG_CTX
NOT BUG:fips.c: x86[_64] capability masking
NOT BUG:armcap.c: auto-setup processor capability vector
NOT BUG:Fix error codes
NOT BUG:fips/fips_[canister|premain].c: make it work with VC6 and add sentinels even to code segments
NOT BUG:sha1-mips.pl: fix typo
NOT BUG:Drain unused MacOS directory
NOT BUG:Add "nopass" for empty password too
NOT BUG:add authentication parameter to FIPS_module_mode_set
NOT BUG:vxworks-mips: unify and add assembler
NOT BUG:Remove superseded MIPS assembler modules
NOT BUG:fips_canister.c: more cross-compiler platfroms verified
NOT BUG:arm_arch.h: add missing pre-defined macro __ARM_ARCH_5TEJ__
NOT BUG:"make update" (partial)
BUG:BN_BLINDING multi-threading fix
BUG:Submitted by: Emilia Kasper (Google)
NOT BUG:Typo (?)
NOT BUG:Build fipscanister.o only by default Utility build now needs make build_tests
NOT BUG:Recognise new option
NOT BUG:Fix indentation
NOT BUG:Fix warnings Also use the common Configure mechanism for enabling/disabling the 64-bit ECC code
NOT BUG:Update premain fingerprint
NOT BUG:Improve optional 64-bit NIST-P224 implementation and add NIST-P256 and NIST-P521 (Now -DEC_NISTP_64_GCC_128 enables all three of these; -DEC_NISTP224_64_GCC_128 no longer works.)
NOT BUG:Submitted by: Google Inc
NOT BUG:fipssyms.h: assign alias to newly introduced bn_gather5
BUG:fips/*: extend fipsro segmenting to all _MSC_VER builds (including WinCE)
NOT BUG:fips_enc.c: assign minimal block size to bad_cipher [to avoid arithmetic exceptions in TLS layer]
NOT BUG:engines/.cvsignore: stop whining about e_padlock-*.s
NOT BUG:evp/e_aes.c: fold AES-NI modes that heavily rely on indirect calls (trade 2% small-block performance) engage bit-sliced AES in GCM
NOT BUG:x86_64-xlate.pl: make vpaes-x86_64.pl and rc4-md5-x86_64 work with ml64 fix bug in .crt section alignment PR: 2620 2624
NOT BUG:bsaes-x86_64.pl: make it work with ml64
NOT BUG:[bs|vp]aes-x86[_64].pl: typos and clarifications
NOT BUG:c_allc.c: add aes-xts to loop
NOT BUG:Do global replace to remove assembly language object files
NOT BUG:bn_mont.c: get corner cases right in updated BN_from_montgomery_word
NOT BUG:bn_exp.c: further optimizations using more ideas from http://eprint.iacr.org/2011/239
NOT BUG:x86_64-mont.pl: minor optimization
NOT BUG:bn_mont.c: simplify BN_from_montgomery_word
NOT BUG:bn_shift.c: minimize reallocations which allows BN_FLG_STATIC_DATA to be shifted in specific cases
NOT BUG:Engage bsaes-x86_64.pl bit-sliced AES
BUG:L=3072 N=256 provides 128 bits of security not 112
NOT BUG:Add android-x86
NOT BUG:Clarify usage message
NOT BUG:more vxworks patches
NOT BUG:Allow override of GCCVER and noexecstack checking from environment
NOT BUG:Vxworks support
NOT BUG:Don't use TPREFIX shell variable for minimal script
NOT BUG:Add usage messages
NOT BUG:e_aes.c: fix bug in aesni_gcm_tls_cipher
NOT BUG:aesni-x86[_64].pl: fix bug in CCM code
NOT BUG:Remove eng_aesni.c as AES-NI support is integrated directly at EVP
NOT BUG:use -no_ecdhe when using -no_dhe
BUG:Oops - ectest.c finds further problems beyond those exposed by bntext.c
NOT BUG:Avoid failed assertion in BN_DEBUG builds
NOT BUG:Make CTR mode behaviour consistent with other modes: - clear ctx->num in EVP_CipherInit_ex - adapt e_eas.c changes from http://cvs.openssl.org/chngview?cn=19816 for eng_aesni.c
BUG:Submitted by: Emilia Kasper
NOT BUG:Clarify warning
NOT BUG:typo
BUG:In ssl3_clear preserve s3->init_extra along with s3->rbuf
NOT BUG:Submitted by: Bob Buckholz <bbuckholz@google.com>
NOT BUG:Fix OPENSSL_BN_ASM_MONT5 for corner cases; add a test
BUG:Submitted by: Emilia Kasper
NOT BUG:Print curve type for signature tests
NOT BUG:increase test RSA key size to 1024 bits
NOT BUG:Update README.FIPS for new FIPS 2.0 testvectors
NOT BUG:Remove o_init.o special case from Makefile: this doesn't work
NOT BUG:Skip ECDH sanity check Add --compare-all to run comparison tests on all files instead of sanity checks
NOT BUG:Handle partial test where H is absent: needed to check g generation
NOT BUG:Update instructions
NOT BUG:Updates to handle some verification of v2 tests
NOT BUG:Now enable v2 by default and require a --disable-v2 option to run the old v1 tests
NOT BUG:Handle broken test on verify too
NOT BUG:ECDH POST selftest failure inducing support
NOT BUG:Fix warnings
NOT BUG:Only include one ECDH selftest
BUG:e_padlock-x86[_64].pl: protection against prefetch errata
NOT BUG:update pkey method initialisation and copy
NOT BUG:print out subgroup order if present
NOT BUG:def_rsa_finish not used any more
NOT BUG:remove some debugging code
NOT BUG:fix leak properly this time..
NOT BUG:add GCM ciphers in SSL_library_init
NOT BUG:disable GCM if not available
NOT BUG:Don't disable TLS v1.2 by default now
NOT BUG:Synv ordinals with 1.0.1-stable
NOT BUG:fix CHANGES entry
NOT BUG:fix memory leaks
NOT BUG:e_padlock-x86_64.pl: brown-bag bug in stack pointer handling
NOT BUG:Sync ordinals with 1.0.1-stable
BUG:PR: 2482 Submitted by: Rob Austein <sra@hactrn.net> Reviewed by: steve
BUG:Don't allow inverted ranges in RFC3779 code discovered by Frank Ellermann
NOT BUG:e_padlock-x86[_64].pl: SHA fixes comply with specification and fix bug
NOT BUG:Add fips/ecdh directory
NOT BUG:New -force_pubkey option to x509 utility to supply a different public key to the one in a request This is useful for cases where the public key cannot be used for signing e.g DH
NOT BUG:use client version when eliminating TLS v1.2 ciphersuites in client hello
NOT BUG:? crypto/aes/aes-armv4.S ? crypto/aes/aesni-sha1-x86_64.s ? crypto/aes/aesni-x86_64.s ? crypto/aes/foo.pl ? crypto/aes/vpaes-x86_64.s ? crypto/bn/.bn_lib.c.swp ? crypto/bn/armv4-gf2m.S ? crypto/bn/diffs ? crypto/bn/modexp512-x86_64.s ? crypto/bn/x86_64-gf2m.s ? crypto/bn/x86_64-mont5.s ? crypto/ec/bc.txt ? crypto/ec/diffs ? crypto/modes/a.out ? crypto/modes/diffs ? crypto/modes/ghash-armv4.S ? crypto/modes/ghash-x86_64.s ? crypto/modes/op.h ? crypto/modes/tst.c ? crypto/modes/x.h ? crypto/objects/.obj_xref.txt.swp ? crypto/rand/diffs ? crypto/sha/sha-512 ? crypto/sha/sha1-armv4-large.S ? crypto/sha/sha256-armv4.S ? crypto/sha/sha512-armv4.S Index: crypto/objects/obj_xref.c =================================================================== RCS file: /v/openssl/cvs/openssl/crypto/objects/obj_xref.c,v retrieving revision 1.9 diff -u -r1.9 obj_xref.c --- crypto/objects/obj_xref.c 5 Nov 2008 18:38:58 -0000 1.9 +++ crypto/objects/obj_xref.c 6 Oct 2011 20:30:21 -0000 @@ -110,8 +110,10 @@ #endif if (rv == NULL) return 0; - *pdig_nid = rv->hash_id; - *ppkey_nid = rv->pkey_id; + if (pdig_nid) + *pdig_nid = rv->hash_id; + if (ppkey_nid) + *ppkey_nid = rv->pkey_id; return 1; }
BUG:@@ -144,7 +146,8 @@ #endif if (rv == NULL) return 0; - *psignid = (*rv)->sign_id; + if (psignid) + *psignid = (*rv)->sign_id; return 1; }
NOT BUG:Index: crypto/x509/x509type.c =================================================================== RCS file: /v/openssl/cvs/openssl/crypto/x509/x509type.c,v retrieving revision 1.10 diff -u -r1.10 x509type.c --- crypto/x509/x509type.c 26 Oct 2007 12:06:33 -0000 1.10 +++ crypto/x509/x509type.c 6 Oct 2011 20:36:04 -0000 @@ -100,20 +100,26 @@ break; }
NOT BUG:- i=X509_get_signature_type(x); - switch (i) + i=OBJ_obj2nid(x->sig_alg->algorithm); + if (i && OBJ_find_sigid_algs(i NULL &i)) { - case EVP_PKEY_RSA: - ret|=EVP_PKS_RSA; - break; - case EVP_PKEY_DSA: - ret|=EVP_PKS_DSA; - break; - case EVP_PKEY_EC: - ret|=EVP_PKS_EC; - break; - default: - break; + + switch (i) + { + case NID_rsaEncryption: + case NID_rsa: + ret|=EVP_PKS_RSA; + break; + case NID_dsa: + case NID_dsa_2: + ret|=EVP_PKS_DSA; + break; + case NID_X9_62_id_ecPublicKey: + ret|=EVP_PKS_EC; + break; + default: + break; + } }
NOT BUG:if (EVP_PKEY_size(pk) <= 1024/8)/* /8 because it's 1024 bits we look
NOT BUG:e_padlock: add CTR mode
NOT BUG:e_padlock-x86_64.pl: fix typo
NOT BUG:e_padlock-x86*.pl: Nano-related update
NOT BUG:Make fips algorithm test utilities use RESP_EOL for end of line character(s) This should be CRLF even under *nix
NOT BUG:e_padlock-x86.pl: previous C3-specific fix was incomplete
NOT BUG:e_padlock-x86.pl: make it work on VIA C3 (which doesn't support SSE2)
BUG:Never echo Num lines for PQGGen DSA2 test
NOT BUG:make depend
NOT BUG:Add FIPS selftests for ECDH algorithm
NOT BUG:Remove s = s * P deferral
NOT BUG:Check return codes properly
NOT BUG:Fix output format for DSA2 parameter generation
NOT BUG:bsaes-x86_64.pl: add due credit
NOT BUG:fix signed/unsigned warning
NOT BUG:Add a --disable-all option to disable all tests
NOT BUG:Handle provable prime parameters for canonical g generation which are sometimes erroneously included
NOT BUG:Add bit-sliced AES x86_64 assembler see http://homes.esat.kuleuven.be/~ekasper/#software for background information It's not integrated into build system yet
NOT BUG:make sure eivlen is initialised
NOT BUG:use keyformat for -x509toreq don't hard code PEM
BUG:PR: 2606 Submitted by: Christoph Viethen <cv@kawo2.rwth-aachen.de> Reviewed by: steve
NOT BUG:Handle timezones correctly in UTCTime
NOT BUG:PR: 2602 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fix DTLS bug which prevents manual MTU setting
NOT BUG:PR: 2347 Submitted by: Tomas Mraz <tmraz@redhat.com> Reviewed by: steve
NOT BUG:Fix usage message
NOT BUG:Run PQGVer test before DSA2 tests
NOT BUG:Typo
NOT BUG:Use function name FIPS_drbg_health_check() for health check function
NOT BUG:Add explanatory comments to health check code
NOT BUG:Don't print out errors in cases where errors are expected: testing DSA parameter validity and EC public key validity
NOT BUG:Remove unused variable
NOT BUG:Perform health check on all reseed operations not associated with prediction resistance requests Although SP 800-90 is arguably unclear on whether this is necessary adding an additional check has minimal penalty (very few applications will make an explicit reseed request)
NOT BUG:Revise DRBG to split between internal and external flags
NOT BUG:One demand health check function
NOT BUG:Perform generation test in fips_test_suite
NOT BUG:Option to skip dh test if fips_test_suite
NOT BUG:Update error codes
BUG:Allow reseed interval to be set
NOT BUG:Make latest assembler additions (vpaes and e_padlock) work in Windows build
NOT BUG:sha256-586.pl: minor optimization +0-2% on all CPUs +7% on Westmere
NOT BUG:sha512-x86_64.pl: +15% better performance on Westmere and incidentally Atom Other Intel processors +5% Opteron -2%
NOT BUG:Sync error codes with 1.0.1-stable
NOT BUG:clarify comment
NOT BUG:Minor code tidy and bug fix: need to set t = s after first pass and t and s do not need to have independent values after the first pass so set t = s
NOT BUG:Don't use vpaes in fips builds and exclude from restricted tarball
NOT BUG:Integrate Vector Permutation AES into build system
NOT BUG:Make HMAC kat symbols static
NOT BUG:Fix warning
NOT BUG:Allow for dynamic base in Win64 FIPS module
NOT BUG:Update CMAC/HMAC sefltests to use NIDs instead of function pointers
NOT BUG:Simplify HMAC selftest as each test currently uses the same key and hash data
NOT BUG:Remove fipsdso target: it isn't supported in the 2.0 module
NOT BUG:new function to lookup FIPS supported ciphers by NID
NOT BUG:More extensive DRBG health check New function to call health check for all DRBG combinations
NOT BUG:Check length of additional input in DRBG generate function
NOT BUG:Delete strength parameter from FIPS_drbg_generate It isn't very useful (strength can be queried using FIPS_drbg_get_strength ) and adds a substantial extra overhead to health check (need to check every combination of parameters)
NOT BUG:Check we recognise DRBG type in fips_drbgvs.c initialised DRBG_CTX if we don't set type in FIPS_drbg_new()
NOT BUG:vpaes-x86[_64]*.pl: fix typo
NOT BUG:Add so called Vector Permutation AES x86[_64] assembler see http://crypto.stanford.edu/vpaes/ for background information It's not integrated into build system yet
NOT BUG:Fix 3DES Monte Carlo test file output which previously outputted extra bogus lines Update fipsalgtest.pl to tolerate the old format
NOT BUG:Add support for Dual EC DRBG from SP800-90 Include updates to algorithm tests and POST code
NOT BUG:Add /fixed option to linker with fips builds
NOT BUG:Put quick DRBG selftest return after first generate operation
NOT BUG:engines/asm/e_padlock-x86_64.pl: name it right and fix small bug
NOT BUG:Add error codes for DRBG KAT failures
NOT BUG:Add abbreviated DRBG KAT for POST which only performs a single generate operations instead of four
NOT BUG:Padlock engine: make it independent of inline assembler
NOT BUG:Initialise X509_STORE_CTX properly so CRLs with nextUpdate date in the past produce an error (CVE-2011-3207)
NOT BUG:Update FAQ
NOT BUG:config: don't add -Wa options with no-asm
NOT BUG:crypto/bn/bn_gf2m.c: make it work with BN_DEBUG
BUG:Check reseed interval before generating output
NOT BUG:Place DRBG in error state if health check fails
NOT BUG:oops
NOT BUG:Fix session handling
NOT BUG:Fix d2i_SSL_SESSION
NOT BUG:(EC)DH memory handling fixes
NOT BUG:Submitted by: Adam Langley
NOT BUG:Fix memory leak on bad inputs
NOT BUG:make update
NOT BUG:Fix expected DEFFLAG for default config
NOT BUG:Fix error codes
NOT BUG:Synchronize with 1.0.1 CHANGES file
NOT BUG:Don't perform full DRBG health check on all DRBG types on power up just one shorter KAT per mechanism
NOT BUG:Update dependencies
NOT BUG:Add header to Makefile
NOT BUG:Extension of DRBG selftests using new data
NOT BUG:Test PR and no PR and test initial generate before the reseed too
NOT BUG:Move selftest data to separate fips_drbg_selftest.h header file
NOT BUG:Rename some more symbols for fips module
BUG:Don't use *from++ in tolower as this is implemented as a macro on some platforms Thanks to Shayne Murray <Shayne.Murray@Polycom.com> for reporting this issue
NOT BUG:PR: 2576 Submitted by: Doug Goldstein <cardoe@gentoo.org> Reviewed by: steve
NOT BUG:Include header file stdlib.h which is needed on some platforms to get getenv() declaration
NOT BUG:Sync ordinals with 1.0.1-stable
BUG:PR: 2340 Submitted by: "Mauro H Leggieri" <mxmauro@caiman.com.ar> Reviewed by: steve
NOT BUG:Stop warnings if OPENSSL_NO_DGRAM is defined
NOT BUG:make timing attack protection unconditional
NOT BUG:Stop warnings
BUG:PR: 2573 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fix DTLS buffering and decryption bug
BUG:PR: 2589 Submitted by: Thomas Jarosch <thomas.jarosch@intra2net.com> Reviewed by: steve
NOT BUG:Initialise p pointer
BUG:PR: 2588 Submitted by: Thomas Jarosch <thomas.jarosch@intra2net.com> Reviewed by: steve
NOT BUG:Close file pointer
BUG:PR: 2586 Submitted by: Thomas Jarosch <thomas.jarosch@intra2net.com> Reviewed by: steve
NOT BUG:Zero structure fields properly
BUG:PR: 2586 Submitted by: Thomas Jarosch <thomas.jarosch@intra2net.com> Reviewed by: steve
BUG:Fix brace mismatch
NOT BUG:Print private key component is -exout parameter is given
NOT BUG:Fix ecdh primitives test command line
NOT BUG:bn_exp.c: improve portability
NOT BUG:util/incore: fix typo
NOT BUG:Add support for DSA2 PQG generation of g parameter
NOT BUG:Add support for canonical generation of DSA parameter g Modify fips_dssvs to support appropriate file format
NOT BUG:Fix warning
NOT BUG:Don't use some object files in FIPS build
NOT BUG:Rename sparc symbols
NOT BUG:Add RC4-MD5 and AESNI-SHA1 "stitched" implementations
NOT BUG:eng_rsax.c: improve portability
NOT BUG:Correct maximum request length SP800-90 quotes maximum bits not bytes
NOT BUG:modexp512-x86_64.pl: make it work with ml64
NOT BUG:Fix fipsalgtest.pl to still work with old test vectors
NOT BUG:typo
NOT BUG:Update instructions to recommend use of included incore script
NOT BUG:Makefile.org: get commit#21249 right
NOT BUG:Delete library install from Makefile.fips: it isn't used
NOT BUG:Revert change to Makefile.org: it breaks install
NOT BUG:quote LIBS to copy with empty string
NOT BUG:Enable rsa-pss0 for non-v2 tests
NOT BUG:Remove hard coded ecdsaWithSHA1 hack in ssl routines and check for RSA using OBJ xref utilities instead of string comparison with OID name
NOT BUG:This removes the arbitrary restriction on using SHA1 only with some ECC ciphersuites
NOT BUG:bn_div.c: remove duplicate code by merging BN_div and BN_div_no_branch
NOT BUG:x86_64-mont5.pl: add missing Win64 support
NOT BUG:eng_rdrand.c: make it link in './config 386' case
NOT BUG:armv4-mont.pl: profiler-assisted optimization gives 8%-14% improvement (more for longer keys) on RSA/DSA
NOT BUG:SPARC assembler pack: fix FIPS linking errors
NOT BUG:x86_64-xlate.pl: fix movzw
NOT BUG:This commit completes recent modular exponentiation optimizations on x86_64 platform It targets specifically RSA1024 sign (using ideas from http://eprint.iacr.org/2011/239) and adds more than 10% on most platforms Overall performance improvement relative to 1.0.0 is ~40% in average with best result of 54% on Westmere Incidentally ~40% is average improvement even for longer key lengths
NOT BUG:alphacpuid.pl: fix alignment bug alpha-mont.pl: fix typo PR: 2577
NOT BUG:aesni TLS GCM support
NOT BUG:prevent compilation errors and warnings
NOT BUG:Include armcap.c in fips tarball
NOT BUG:Remove redundant assignment
BUG:Add provisory support for RDRAND instruction
NOT BUG:x86_64-mont.pl: futher optimization resulting in up to 48% improvement (4096-bit RSA sign benchmark on Core2) in comparison to initial version from 2005
NOT BUG:Add HMAC DRBG from SP800-90
NOT BUG:Use "resp" for default directory name for .rsp files
NOT BUG:Fix DSA to skip EOL test when parsing mod line
NOT BUG:Initial support for tests for 2.0 module Not complete and not all working yet
NOT BUG:Allow test type to be determined by a regexp on the pathname So tests like:
NOT BUG:DSA/SigVer DSA2/SigVer ECDSA/SigVer ECDSA2/SigVer can all be distinguished
NOT BUG:aes/asm/aesni-*.pl: fix CCM and further optimize it modes/ccm128.c: minor branch optimization
NOT BUG:fix memory leak
NOT BUG:Expand range of ctrls for AES GCM to support retrieval and setting of invocation field
NOT BUG:Add complete support for AES GCM ciphersuites including all those in RFC5288 and RFC5289
BUG:recognise ecdsaWithSHA1 OID
NOT BUG:Fix warnings
NOT BUG:Update CHANGES
NOT BUG:oops remove debug option
NOT BUG:Add HMAC ECC ciphersuites from RFC5289 Include SHA384 PRF support and prohibit use of these ciphersuites for TLS < 1.2
NOT BUG:cryptlib.c: OPENSSL_ia32cap environment variable to interpret ~ as cpuid mask
NOT BUG:More symbol renaming
NOT BUG:Make sure OPENSSL_FIPSCANISTER is visible to ARM assembly language files
NOT BUG:util/incore: fix brown-bag bug
NOT BUG:util/incore: make transition smoother
NOT BUG:fips_canister.c: add support for embedded ppc linux
NOT BUG:stop warnings
NOT BUG:Rename another symbol
NOT BUG:aes-ppc.pl: minor optimization favoring embedded processors (performance of "big" processors is unaffected)
NOT BUG:Add RSAX builtin engine It optimizes RSA1024 sign benchmark
NOT BUG:PR: 2559 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fix DTLS socket error bug
NOT BUG:PR: 2555 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fix DTLS sequence number bug
NOT BUG:PR: 2550 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fix DTLS HelloVerifyRequest Timer bug
NOT BUG:sha512-sparcv9.pl: minor optimization of sha256
NOT BUG:Add support for ECCCDH test format
NOT BUG:ARM assembler pack: add platform run-time detection
NOT BUG:PR: 2556 (partial) Reported by: Daniel Marschall <daniel-marschall@viathinksoft.de> Reviewed by: steve
NOT BUG:Fix OID routines
NOT BUG:Check on encoding leading zero rejection should start at beginning of encoding
NOT BUG:Allow for initial digit when testing when to use BIGNUMs which can increase first value by 2 * 40
NOT BUG:fips/Makefile: HP-UX-specific update
NOT BUG:ms/uplink.c: fix Visual Studio 2010 warning
NOT BUG:config: detect if assembler supports --noexecstack and pass it down
NOT BUG:perlasm/cbc.pl: fix tail processing bug PR: 2557
NOT BUG:ssl/ssl_ciph.c: allow to switch to predefined "composite" cipher/mac combos that can be implemented as AEAD ciphers
NOT BUG:ssl/t1_enc.c: initial support for AEAD ciphers
NOT BUG:evp.h: add flag to distinguish AEAD ciphers and pair of control codes..
NOT BUG:Fix typo
BUG:Submitted by: Jim Morrison
NOT BUG:Add a tool that (semi)automatically created the API documentation required for FIPS
NOT BUG:Rename symbol
NOT BUG:x86_64-mont.pl: add squaring procedure and improve RSA sign performance by up to 38% (4096-bit benchmark on Core2)
NOT BUG:Add functions to return FIPS module version
NOT BUG:x86_64-xlate.pl: sha1 and md5 warnings made it to nasm 2.09 extend gnu assembler workaround to all assemblers
NOT BUG:sha1-x86_64.pl: nasm 2.07 screws up labels if AVX path is compiled
NOT BUG:s390x-gf2m.pl: commentary update (final performance numbers turned to be higher)
NOT BUG:If make clean fails it is not a fatal error
NOT BUG:Additional error checking
NOT BUG:sha1-x86_64.pl: fix win64-specific typos and add masm support
NOT BUG:x86_64-xlate.pl: masm-specific update
NOT BUG:Delete any EXARG value first
NOT BUG:Add no-asm argument to Configure if needed
NOT BUG:Recognise fipscheck option and call fipsas for WIN64 builds
NOT BUG:crypto/aes/Makefile: make it work on IRIX
NOT BUG:crypto/whrlpool/wp_block.c: harmonize OPENSSL_ia32cap_P
NOT BUG:crypto/sha/asm/sha[1|512]-mips.pl: minor updates
NOT BUG:rc4-586.pl: add Atom performance results
NOT BUG:md5-x86_86.pl: remove redundant instructions
NOT BUG:crypto/bn/Makefile: fix typo
NOT BUG:auto detect configuration using KERNEL_BITS and CC
NOT BUG:Configure: clean up linux32-s390x line
NOT BUG:s390x assembler pack: add s390x-gf2m.pl and harmonize AES_xts_[en|de]crypt
NOT BUG:rc4-x86_64.pl: commentary update
NOT BUG:Minor x86_64 perlasm update
NOT BUG:Fix CPRNG test for Hash DRBG
NOT BUG:typo
NOT BUG:Add stub for HMAC DRBG
NOT BUG:allow KERNEL_BITS to be specified in the environment
NOT BUG:get the filename right
NOT BUG:Add sparcv9cap.c to restricted tarball
NOT BUG:Add a symbol for the first parameter to OPENSSL_showfatal()
NOT BUG:Add symbols for the parameters on a couple more functions
NOT BUG:PR: 2470 Submitted by: Corinna Vinschen <vinschen@redhat.com> Reviewed by: steve
NOT BUG:Don't call ERR_remove_state from DllMain
NOT BUG:PR: 2543 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Correctly handle errors in DTLSv1_handle_timeout()
BUG:PR: 2540 Submitted by: emmanuel.azencot@bull.net Reviewed by: steve
NOT BUG:Prevent infinite loop in BN_GF2m_mod_inv()
NOT BUG:correctly encode OIDs near 2^32
NOT BUG:typo
NOT BUG:stop complaints about no CVS version
NOT BUG:Now the FIPS capable OpenSSL is available simplify the various FIPS test build options
NOT BUG:All fispcanisterbuild builds only build fipscanister.o and include symbol renaming
NOT BUG:Move all renamed symbols to fipssyms.h
NOT BUG:Update README.FIPS
NOT BUG:add symbol rename
NOT BUG:allow MD5 use for computing old format hash links
NOT BUG:Don't set FIPS rand method at same time as RAND method as this can cause the FIPS library to fail Applications that want to set the FIPS rand method can do so explicitly and presumably they know what they are doing..
NOT BUG:Add prototype for null cipher
NOT BUG:make EVP_dss() work for DSA signing
NOT BUG:typo
NOT BUG:add null cipher to FIPS module
NOT BUG:Correction
NOT BUG:Strip CRs when installing fips_premain.c Correct compat library rule in FIPS mode
NOT BUG:Initial FIPS capable OpenSSL information
NOT BUG:Give parameters names in prototypes
NOT BUG:Option "fipscheck" which checks to see if FIPS is autodetected in a build Use this for WIN32 builds
NOT BUG:Don't include des.h any more: it is not needed
NOT BUG:Update to mk1mf.pl and ms\do_fips.bat to install relevant files for WIN32 FIPS builds
NOT BUG:Fix the version history: changes going into 1.1.0 that are also going into 1.0.1 should not be listed as "changes between 1.0.1 and 1.0.0"
NOT BUG:This makes the OpenSSL_1_0_1-stable and HEAD versions of this file consistent with each other (the HEAD version has the additional 1.1.0 section but doesn't otherwise differ)
NOT BUG:set FIPS allow before initialising ctx
NOT BUG:make sure custom cipher flag doesn't use any mode bits
NOT BUG:Allow applications to specify alternative FIPS RAND methods if they are sure they are OK
NOT BUG:API to retrieve FIPS rand method
NOT BUG:sync and update ordinals
BUG:Don't export functions marked as FIPSCAPABLE
NOT BUG:Use FIPSCAPABLE for FIPS module functions used in FIPS capable OpenSSL
NOT BUG:HMAC fips prototypes
NOT BUG:CMAC FIPS prototypes
NOT BUG:#undef bn_div_words as it is defined for FIPS builds
NOT BUG:Update dependencies for m_dss.c too
NOT BUG:Remove x509.h from SHA1 clone digests update dependencies
NOT BUG:Install FIPS module in FIPSDIR if set
NOT BUG:more prototypes in fips.h
NOT BUG:Add more prototypes
NOT BUG:fix memory leak
NOT BUG:Add flags for DH FIPS method
NOT BUG:Update/fix prototypes in fips.h
NOT BUG:Set flags in ECDH and ECDSA methods for FIPS
NOT BUG:rc4_skey.c: remove dead/redundant code (it's never compiled) and misleading/obsolete comment
NOT BUG:Add prototypes for some FIPS EC functions
NOT BUG:Set SSL_FIPS flag in ECC ciphersuites
NOT BUG:Move function prototype to fips.h
NOT BUG:e_aes.c: move AES-NI run-time switch and implement the switch for remaining modes
NOT BUG:x86_64cpuid.pl: fix typo
NOT BUG:x86[_64]cpuid.pl: add function accessing rdrand instruction
NOT BUG:No spaces in assignements in a shell script..
NOT BUG:fix error discrepancy
NOT BUG:license correction no EAY code included in this file
NOT BUG:Add "OPENSSL_FIPSCAPABLE" define for a version of OpenSSL which is FIPS capable: i.e FIPS module is supplied externally
NOT BUG:Constify RSA signature buffer
NOT BUG:Typo
NOT BUG:Remove FIPS RSA functions from crypto/rsa
NOT BUG:Move FIPS RSA function definitions to fips.h
NOT BUG:New function to lookup digests by NID in module
NOT BUG:Minor optimisation: if supplied hash is NULL to FIPS RSA functions and we are using PKCS padding get digest NID from otherwise unused saltlen parameter instead
NOT BUG:Simple automated certificate creation demo
NOT BUG:Clone digest prototypes
NOT BUG:Add DSA and ECDSA "clone digests" to module for compatibility with old applications
NOT BUG:typo
BUG:set FIPS permitted flag before initalising digest
NOT BUG:Fake CPU caps so fips_standalone_sha1 compiles
NOT BUG:Initialise update function for bad digest inits
NOT BUG:Don't round up partitioned premaster secret length if there is only one digest in use: this caused the PRF to fail for an odd premaster secret length
BUG:Output supported curves in preference order instead of numerically
NOT BUG:e_aes.c: fix typo
NOT BUG:e_aes.c: fix aes_cfb1_cipher
NOT BUG:e_aes.c: integrate AESNI directly into EVP
NOT BUG:aesni-x86[_64].pl: relax alignment requirement
NOT BUG:Add more cipher prototypes
NOT BUG:Prototypes for more FIPS functions for use in FIPS capable OpenSSL
NOT BUG:Various mingw64 fixes
NOT BUG:sha1-586|x86_64.pl: minor portability fix
NOT BUG:x86cpuid.pl: last commit broke platforms with perl with 64-bit integer
NOT BUG:sha1-586|x86_64.pl: add SSSE3 and AVX code paths
NOT BUG:Add FIPS_digestinit prototype for FIPS capable OpenSSL
NOT BUG:Add prototypes for FIPS EVP implementations: for use in FIPS capable OpenSSL
NOT BUG:aes-ppc.pl: handle unaligned data on page boundaries
NOT BUG:Rename many internal only module functions from FIPS_* to fips_*
NOT BUG:rc4-x86_64.pl: fix due credit
NOT BUG:rc4-x86_64.pl: RC4_options fix-up
NOT BUG:x86[_64]cpuid.pl: harmonize usage of reserved bits #20 and #30
BUG:PPC assembler pack: adhere closer to ABI specs add PowerOpen traceback data
NOT BUG:rc4-x86_64.pl: major optimization for contemporary Intel CPUs
NOT BUG:rc4-586.pl: optimize even further..
NOT BUG:Typo
NOT BUG:Use FIPSLD_LIBCRYPTO for consistency with other env variables in fipsld Use current directory for fips_premain_dso
NOT BUG:In fipsld use FIPSLIBCRYPTO environment variable to specify an alternative location for libcrypto.a support shared library builds in different source tree
NOT BUG:Install fips_standalone_sha1 and make use of it in fipsld script
NOT BUG:x86_64cpuid.pl: get AVX masking right
NOT BUG:Only install FIPS related files for fipscanisteronly build
NOT BUG:More symbol renaming
NOT BUG:Don't advertise or use MD5 for TLS v1.2 in FIPS mode
BUG:PR: 2533 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Setting SSL_MODE_RELEASE_BUFFERS should be ignored for DTLS but instead causes the program to crash This is due to missing version checks and is fixed with this patch
BUG:PR: 2529 Submitted by: Marcus Meissner <meissner@suse.de> Reviewed by: steve
NOT BUG:Call ssl_new() to reallocate SSL BIO internals if we want to replace the existing internal SSL structure
BUG:PR: 2527 Submitted by: Marcus Meissner <meissner@suse.de> Reviewed by: steve
NOT BUG:Set cnf to NULL to avoid possible double free
NOT BUG:Fix the ECDSA timing attack mentioned in the paper at:
BUG:http://eprint.iacr.org/2011/232.pdf
BUG:Thanks to the original authors Billy Bob Brumley and Nicola Tuveri for bringing this to our attention
NOT BUG:Fix the ECDSA timing attack mentioned in the paper at:
BUG:http://eprint.iacr.org/2011/232.pdf
BUG:Thanks to the original authors Billy Bob Brumley and Nicola Tuveri for bringing this to our attention
NOT BUG:Some nextproto patches broke DTLS: fix
NOT BUG:Oops use up to date patch for PR#2506
BUG:PR: 2512 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
BUG:Fix BIO_accept so it can be bound to IPv4 or IPv6 sockets consistently
BUG:PR: 2506 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fully implement SSL_clear for DTLS
BUG:PR: 2505 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fix DTLS session resumption timer bug
NOT BUG:use TLS1_get_version macro to check version so TLS v1.2 changes don't interfere with DTLS
NOT BUG:e_padlock.c: fix typo
NOT BUG:rc4-586.pl: optimize unused code path
NOT BUG:e_padlock.c: last x86_64 commit didn't work with some optimizers
NOT BUG:rc4-586.pl: 50% improvement on Core2 and 80% on Westmere
BUG:PR: 2522 Submitted by: Henrik Grindal Bakken <henribak@cisco.com>
NOT BUG:Don't compare past end of buffer
NOT BUG:spacrv9cap.c: addenum to recent EC optimizations
NOT BUG:aesni-x86[_64].pl: optimize for Sandy Bridge and add XTS mode
NOT BUG:x86_64-gf2m.pl: add Win64 SEH
NOT BUG:ppccap.c: addenum to recent EC optimizations
NOT BUG:ec_cvt.c: ARM comparison results were wrong clarify the background
NOT BUG:ec_cvt.c: avoid EC_GFp_nist_method on platforms with bn_mul_mont [see commentary for details]
NOT BUG:PR: 2295 Submitted by: Alexei Khlebnikov <alexei.khlebnikov@opera.com> Reviewed by: steve
NOT BUG:OOM checking Leak in OOM fix Fall-through comment Duplicate code elimination
NOT BUG:Add CHANGES entry: add FIPS support to ssl
NOT BUG:Implement FIPS_mode and FIPS_mode_set
NOT BUG:oops
NOT BUG:update date
NOT BUG:inherit HMAC flags from MD_CTX
NOT BUG:set encodedPoint to NULL after freeing it
NOT BUG:aesni-x86_64.pl: make it compile on MacOS X
NOT BUG:x86gas.pl: don't omit .comm OPENSSL_ia32cap_P on MacOS X
NOT BUG:x86_64-xlate.pl: add inter-register movq and make x86_64-gfm.s compile on Solaris MacOS X elderly gas..
NOT BUG:x86_64cpuid.pl: allow shared build to work without -Bsymbolic PR: 2466
NOT BUG:e_padlock.c: make it compile on MacOS X
NOT BUG:x86[_64]cpuid.pl: handle new extensions
NOT BUG:ppc-xlate.pl: get linux64 declaration right
NOT BUG:cms-test.pl: make it work with not-so-latest perl
NOT BUG:x86gas.pl: add palignr and move pclmulqdq
NOT BUG:x86_64 assembler pack: add x86_64-gf2m module
NOT BUG:x86_64-xlate.pl: allow "base-less" effective address add palignr move pclmulqdq
NOT BUG:new flag to stop ENGINE methods being registered
NOT BUG:NULL is a valid cspname
NOT BUG:Typo
NOT BUG:typo
NOT BUG:Recognise NO_NISTP224-64-GCC-128
NOT BUG:Enter FIPS mode by calling FIPS_module_mode_set in openssl.c until FIPS_mode_set is implemented
NOT BUG:Provisional support for TLS v1.2 client authentication: client side only
NOT BUG:Parse certificate request message and set digests appropriately
NOT BUG:Generate new TLS v1.2 format certificate verify message
NOT BUG:Keep handshake caches around for longer as they are needed for client auth
NOT BUG:Process signature algorithms during TLS v1.2 client authentication
NOT BUG:Make sure message is long enough for signature algorithms
NOT BUG:Fix error discrepancy
NOT BUG:Add SSL_INTERN definition
NOT BUG:Sync ordinals
NOT BUG:make kerberos work with OPENSSL_NO_SSL_INTERN
NOT BUG:bn_nist.c: fix shadowing warnings
NOT BUG:fips_canister.c: pick more neutral macro name
NOT BUG:Reorder signature algorithms in strongest hash first order
NOT BUG:Set FIPS mode for values other than 1 The only current effect is to return a consistent value So calling FIPS_module_mode_set(n) for n != 0 will result in FIPS_module_mode() returning n This will support future expansion of more FIPS modes e.g a Suite B mode
NOT BUG:Rename FIPS_mode_set and FIPS_mode Theses symbols will be defined in the FIPS capable OpenSSL
NOT BUG:Inlcude README.ECC in FIPS restricted tarball
NOT BUG:Add NSA sublicense info
NOT BUG:Update instructions
NOT BUG:Typo
NOT BUG:fips_canister.c: fix typo
NOT BUG:fips_canister.c: initial support for cross-compiling "Initial" refers to the two-entry list of verified platforms in #ifndef FIPS_REF_POINT_IS_SAFE_TO_CROSS_COMPILE pre-processor section
NOT BUG:Initialise rc
NOT BUG:Initial TLS v1.2 client support Include a default supported signature algorithms extension (including everything we support) Swicth to new signature format where needed and relax ECC restrictions
NOT BUG:Not TLS v1.2 client certifcate support yet but client will handle case where a certificate is requested and we don't have one
NOT BUG:Call fipsas.pl directly for pa-risc targets
NOT BUG:Optimized bn_nist.c Performance improvement varies from one benchmark and platform to another It was measured to deliver 20-30% better performance on x86 platforms and 30-40% on x86_64 on nistp384 benchmark
NOT BUG:allow SHA384 SHA512 wit DSA
NOT BUG:Remove gf2m modules from bn_asm if no-ec2m set
NOT BUG:Remove FIXME comments
NOT BUG:Omit GF2m properly this time ;-)
NOT BUG:Don't include GF2m source files is NOEC2M set
NOT BUG:IA-64 assembler pack: fix typos and make it work on HP-UX
NOT BUG:x86 assembler pack: add bn_GF2m_mul_2x2 implementations (see x86-gf2m.pl for details and performance data)
NOT BUG:Fixes for WIN64 FIPS build
NOT BUG:Get OPENSSL_FIPSSYMS from environment in fipsas.pl include ppccap.c and .S files in fipsdist
NOT BUG:Don't fail WIN32 builds on warnings
NOT BUG:Return error codes for selftest failure instead of hard assertion errors
NOT BUG:Continuing TLS v1.2 support: add support for server parsing of signature algorithms extension and correct signature format for server key exchange
NOT BUG:All ciphersuites should now work on the server but no client support and no client certificate support yet
NOT BUG:Hide more symbols
NOT BUG:ARM assembler pack: engage newly introduced armv4-gf2m module
NOT BUG:Fix warning of signed/unsigned comparison
NOT BUG:ARM assembler pack Add bn_GF2m_mul_2x2 implementation (see source code for details and performance data)
NOT BUG:Remove superfluous PRNG self tests
NOT BUG:Print timer resolution
BUG:xts128.c: minor optimizaton
NOT BUG:Update status
NOT BUG:Remove debugging print
NOT BUG:Explicitly use LINKDIRS for fipsdist links
NOT BUG:bn_gf2m.c: optimized BN_GF2m_mod_inv delivers sometimes 2x of ECDSA sign Exact improvement coefficients vary from one benchmark and platform to another e.g it performs 70%-33% better on ARM hereafter less for longer keys and 100%-90% better on x86_64
NOT BUG:Fix warning
NOT BUG:Include fipssyms.h for ARM builds to translate symbols
NOT BUG:Translate arm symbol to fips_*
BUG:Remove useless setting
BUG:PR: 2499 Submitted by: "James 'J.C.' Jones" <james.jc.jones@gmail.com>
NOT BUG:Typos
NOT BUG:Fix do_fips script
NOT BUG:Use faster curves for ECDSA self test
NOT BUG:Use more portable clock_gettime() for fips_test_suite timing
NOT BUG:Output times of each subtest
NOT BUG:Stop warning in VxWorks
NOT BUG:Quick hack to time POST
NOT BUG:Two more symbol renames
NOT BUG:Handle multiple CPUID_OBJ correctly
NOT BUG:Rename some more symbols
NOT BUG:Include crypto.h in ppccap.c
NOT BUG:Add ppc_cap.c to restricted tarball
NOT BUG:For FIPS algorithm test utilities use our own version of strcasecmp and strncasecmp to cover cases where platforms don't support them
NOT BUG:Some changes to support VxWorks in the validted module
NOT BUG:Disable SHA256 if not supported
NOT BUG:Update symbol translation table
NOT BUG:no need to include memory.h
NOT BUG:Initial incomplete TLS v1.2 support New ciphersuites added new version checking added SHA256 PRF support added
NOT BUG:At present only RSA key exchange ciphersuites work with TLS v1.2 as the new signature format is not yet implemented
NOT BUG:Initial "opaque SSL" framework If an application defines OPENSSL_NO_SSL_INTERN all ssl related structures are opaque and internals cannot be directly accessed Many applications will need some modification to support this and most likely some additional functions added to OpenSSL
NOT BUG:The advantage of this option is that any application supporting it will still be binary compatible if SSL structures change
BUG:Don't assume version of rm supports -rf: use RM instead
NOT BUG:Stop warnings about undefined _exit on Android
NOT BUG:Additional script output options to fipsalgtest.pl
NOT BUG:Fix warning
NOT BUG:Recognise invalid enable/disable options
NOT BUG:Option to shut up bogus warnings
NOT BUG:Clarification
NOT BUG:gcm128.c: minor optimization
NOT BUG:ccm128.c: add CRYPTO_ccm128_[en|de]crypt_ccm64 and minor optimization
NOT BUG:fips_check_dsa_prng() should only be built when OPENSSL_FIPS is defined
NOT BUG:Error discrepancy corrected
NOT BUG:More fixes for DSA FIPS overrides
NOT BUG:Make sure overrides work for RSA/DSA
NOT BUG:Oops work out expanded buffer length before allocating it..
NOT BUG:Always return multiple of block length bytes from default DRBG seed callback
NOT BUG:Handle case where no multiple of the block size is in the interval [min_len max_len]
NOT BUG:Add PRNG security strength checking
BUG:xts128.c: fix bug introduced in commit#20704 Bug affected encryption of vectors whose lenght was not multiples of 16 bytes
NOT BUG:Return errors instead of aborting when selftest fails
NOT BUG:Add XTS test vector support to fipsalgtest.pl
NOT BUG:Rewrite OutputValue to avoid use of buffer when printing out hex values
NOT BUG:Delete unused functions from fips_utl.h
NOT BUG:Increase xts line buffer
NOT BUG:Initial do_fips.bat build script for WIN32 fipscanister
NOT BUG:Reconise no-ec-nistp224-64-gcc-128 option
NOT BUG:Make fipscanisteronly auto detect work on WIN32
NOT BUG:Fix WIN32 warning
NOT BUG:Update ordinals
NOT BUG:Add continuous RNG test to entropy source Entropy callbacks now need to specify a "block length"
NOT BUG:Update DRBG to use new POST scheme
NOT BUG:Add periodic DRBG health checks as required by SP800-90
NOT BUG:Add partial GCM tests to fipsalgtest.pl
NOT BUG:Add partial DH and ECDH primitives only testing to fipsalgtest.pl
NOT BUG:Warn if lines are truncated in algorithm test utilities
NOT BUG:Support for new test files: DRBG and CCM
NOT BUG:xts128.c: minor optimization and clarified prototype
NOT BUG:perlasm/x86gas.pl: make OPENSSL_instrument_bus[2] compile
NOT BUG:Add AES CCM selftest
NOT BUG:Use 0 for tbslen to perform strlen
NOT BUG:Add fips/cmac directory to WIN32 build
NOT BUG:Fix EVP CCM decrypt Add decrypt support to algorithm test program
NOT BUG:Typo
NOT BUG:ccm128.c: fix Win32 compiler warning
NOT BUG:perlasm/x86[nm]asm.pl: make OPENSSL_instrument_bus[2] compile
NOT BUG:ccm128.c: fix STRICT_ALIGNMENT another bug in CRYPTO_ccm128_decrypt
NOT BUG:Override flag for XTS length limit
NOT BUG:CCM encrypt algorithm test support
NOT BUG:Initial untested CCM support via EVP
NOT BUG:Compile ccm128.c move some structures to modes_lcl.h add prototypes
NOT BUG:Don't need separate tag buffer for GCM mode: use EVP_CIPHER_CTX buf field which is not unused for custom ciphers
NOT BUG:Remove shlib_wrap.sh as it is not needed (all algorithm tests are staticly linked to fipscanister.o) Add option to generate a shell script to run all tests: this is useful for platforms that don't have perl
BUG:Multiple assembler packs: add experimental memory bus instrumentation
NOT BUG:Remove PSS salt length detection hack from fipslagtest.pl by allowing a regexp search of the file to determine its type This will be needed for other tests later..
NOT BUG:ccm128.c: minor optimization and bugfix in CRYPTO_ccm128_[en|de]crypt
NOT BUG:Add "post" option to fips_test_suite to run the POST only and exit
BUG:Add length limitation from SP800-38E
NOT BUG:Add XTS selftest include in fips_test_suite
NOT BUG:Add algorithm driver for XTS mode Fix several bugs in EVP XTS implementation
NOT BUG:Add new POST support to X9.31 PRNG
NOT BUG:Report each cipher used with CMAC tests
NOT BUG:Only add one error to error queue if a specific test type fails
BUG:Revise fips_test_suite to use table of IDs for human readable strings
NOT BUG:Modify HMAC selftest callbacks to notify each digest type used
NOT BUG:Update CMAC HMAC GCM to use new POST system
NOT BUG:Fix crash if callback not set
NOT BUG:Remove several of the old obsolete FIPS_corrupt_*() functions
NOT BUG:Initial incomplete POST overhaul: add support for POST callback to allow status of POST to be monitored and/or failures induced
NOT BUG:Remove duplicate flag
NOT BUG:Use consistent FIPS tarball name
NOT BUG:Add XTS to FIPS build
NOT BUG:Hide XTS symbol names
NOT BUG:Provisional AES XTS support
NOT BUG:Update fips_pkey_signature_test: use fixed string if supplies tbs is NULL Always allocate signature buffer
NOT BUG:Update ECDSA selftest to use fips_pkey_signature_test Add copyright notice to file
NOT BUG:Complete rewrite of FIPS_selftest_dsa() Use hardcoded 2048 bit DSA key and SHA384 Use fips_pkey_signature_test()
NOT BUG:Update RSA selftest code to use a 2048 bit RSA and only a single KAT for PSS+SHA256
NOT BUG:Fix memory leaks: uninstantiate DRBG during health checks Cleanup md_ctx when performing ECDSA selftest
NOT BUG:Stop warning and fix memory leaks
NOT BUG:No need to disable leak checking for FIPS builds now we use internal memory callbacks
NOT BUG:Update ECDSA selftest to use hard coded private keys Include tests for prime and binary fields
NOT BUG:Update fips_premain.c fingerprint
NOT BUG:Update copyright year
NOT BUG:Zero ciphertext and plaintext temporary buffers
NOT BUG:Check FIPS_cipher() return value
NOT BUG:Use correct version number
NOT BUG:Add mem_clr.c explicity for no-asm builds
NOT BUG:Fix warning
NOT BUG:Set length to 41 (40 hex characters + null)
NOT BUG:Reorder headers to get definitions before they are used
NOT BUG:Don't give dependency warning for fips builds
NOT BUG:Give error for "make depend" in restricted tarball builds
NOT BUG:Document how restricted tarballs work
NOT BUG:Typo: fix duplicate call
NOT BUG:fix fipscanisteronly autodetect
NOT BUG:Auto detect no-ec2m add option to make no-ec2m tarball
NOT BUG:set OPENSSL_FIPSSYMS for restricted buils and auto detect no-ec2m
NOT BUG:Clarify README.FIPS
NOT BUG:Auto configure for fips is from restricted tarball
NOT BUG:Remove more unnecessary files form fips tarball
NOT BUG:Remove unused build targets from Makefile.fips add cmac to dist list
NOT BUG:remove ENGINE dependency from ecdh
NOT BUG:Add error for health check failure
NOT BUG:Rebuild all FIPS error codes to clean out old obsolete codes
NOT BUG:Before initalising a live DRBG (i.e not in test mode) run a complete health check on a DRBG of the same type
NOT BUG:New function to return security strength of PRNG
NOT BUG:DH keys have an (until now) unused 'q' parameter When creating from DSA copy q across and if q present generate DH key in the correct range
NOT BUG:Only use fake rand once per operation This stops the EC pairwise consistency test interfering with the test
NOT BUG:Update CHANGES
NOT BUG:Add fips hmac key to dgst utility
NOT BUG:Update OpenSSL DRBG support code Use date time vector as additional data Set FIPS RAND_METHOD at same time as OpenSSL RAND_METHOD
NOT BUG:Add missing error code strings
NOT BUG:Remove rand files from fipscanister.o
NOT BUG:check buffer is larger enough before overwriting
NOT BUG:updated FIPS status
NOT BUG:Update fipssyms.h to keep all symbols in FIPS,fips namespace
NOT BUG:Rename drbg_cprng_test to fips_drbg_cprng_test
NOT BUG:Remove rand files from Makefile.fips
NOT BUG:Extensive reorganisation of PRNG handling in FIPS module: all calls now use an internal RAND_METHOD All dependencies to OpenSSL standard PRNG are now removed: it is the applications resposibility to setup the FIPS PRNG and initalise it
NOT BUG:Initial OpenSSL RAND_init_fips() function that will setup the DRBG for the "FIPS capable OpenSSL"
NOT BUG:Rename deprecated FIPS_rand functions to FIPS_x931 These shouldn't be used by applications directly and the X9.31 PRNG is deprecated by new FIPS140-2 rules anyway
NOT BUG:FIPS mode support for openssl utility: doesn't work properly yet due to missing DRBG support in libcrypto
NOT BUG:Updated error codes for FIPS library
NOT BUG:Set error code is additional data callback fails
NOT BUG:Use environment when builds libcrypto shared library so CC value is picked up in FIPS builds
NOT BUG:Change FIPS locking functions to macros so we get useful line information
NOT BUG:Set fips_thread_set properly
NOT BUG:gcm128.c: fix shadow warnings
NOT BUG:Disable test fprintf
NOT BUG:Change RNG test to block oriented instead of request oriented add option to test a "stuck" DRBG
NOT BUG:check RAND_pseudo_bytes return value
NOT BUG:PR: 2462 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fix DTLS Retransmission Buffer Bug
BUG:PR: 2458 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Don't change state when answering DTLS ClientHello
BUG:PR: 2457 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve
NOT BUG:Fix DTLS fragment reassembly bug
NOT BUG:Make WIN32 static builds work again
NOT BUG:ARM assembler pack: add missing arm_arch.h
NOT BUG:ARM assembler pack: profiler-assisted optimizations and NEON support
NOT BUG:gcm128.c: tidy up minor optimization rearrange gcm128_context
NOT BUG:restore .cvsignore
NOT BUG:restore .cvsignore
NOT BUG:delete lib file
BUG:temporarily update .cvsignore
NOT BUG:Only zeroise sensitive parts of DRBG context so the type and flags are undisturbed
NOT BUG:Allow setting of "rand" callbacks for DRBG
NOT BUG:Allow FIPS malloc callback setting Automatically set some callbacks in OPENSSL_init()
NOT BUG:Add additional OPENSSL_init() handling add dummy call to (hopefully) ensure OPENSSL_init() is always linked into an application
NOT BUG:Provisional support for auto called OPENSSL_init() function This can be used to set up any appropriate functions such as FIPS callbacks without requiring an explicit application call
NOT BUG:Initial switch to DRBG base PRNG in FIPS mode Include bogus seeding for test applications
NOT BUG:Unused untested provisional RAND interface for DRBG
NOT BUG:Remove redundant definitions Give error code if DRBG sefltest fails
NOT BUG:Reorganise DRBG API so the entropy and nonce callbacks can return a pointer to a buffer instead of copying to a fixed length buffer This removes the entropy and nonce length restrictions
NOT BUG:fix warnings
NOT BUG:Update .cvsignore
NOT BUG:Add .cvsignore
NOT BUG:Have all algorithm test programs call fips_algtest_init() at startup: this will perform all standalone operations such as setting error callbacks entering FIPS mode etc
NOT BUG:Disable cmac tests by default so the old algorithm test vectors work
NOT BUG:Corrections to the VMS build system Submitted by Steven M Schweda <sms@antinode.info>
NOT BUG:Allow setting of get_entropy and get_nonce callbacks outside test mode Test mode is now set when a DRBG context is initialised
NOT BUG:Add .cvsignore
NOT BUG:Remove unused function
NOT BUG:Fix compiler warnings
NOT BUG:Make some Unix builds work again
NOT BUG:Typo
NOT BUG:For VMS implement the possibility to choose 64-bit pointers with different options: "64" The build system will choose /POINTER_SIZE=64=ARGV if the compiler supports it otherwise /POINTER_SIZE=64 "64=" The build system will force /POINTER_SIZE=64 "64=ARGV" The build system will force /POINTER_SIZE=64=ARGV
NOT BUG:make update
NOT BUG:* Configure crypto/ec/ec.h crypto/ec/ecp_nistp224.c util/mkdef.pl: Have EC_NISTP224_64_GCC_128 treated like any algorithm and have disabled by default If we don't do it this way it screws up libeay.num * util/libeay.num: make update
NOT BUG:* fips/cmac/fips_cmac_selftest.c: Because the examples in SP_800-38B aren't trustworthy (see examples 13 and 14 they have the same mac as do examples 17 and 18) use examples from official test vectors instead
NOT BUG:* fips/fipsalgtest.pl: Test the testvectors for all the CMAC ciphers we support
NOT BUG:* fips/cmac/fips_cmactest.c: Some say TDEA others say TDES Support both names
NOT BUG:* fips/cmac/fips_cmactest.c: Changed to accept all the ciphers we support (Two Key TDEA is not supported) to handle really big messages (some of the test vectors have messages 65536 bytes long) and to handle cases where there are several keys (Three Key TDEA)
NOT BUG:* Makefile.fips: Update and add details about cmac
NOT BUG:make update
NOT BUG:Implement FIPS CMAC
NOT BUG:* fips/fips_test_suite.c fips/fipsalgtest.pl test/Makefile: Hook in test cases and build test program
NOT BUG:Implement FIPS CMAC
NOT BUG:* fips/cmac/*: Implement the basis for FIPS CMAC using FIPS HMAC as an example * crypto/cmac/cmac.c: Enable the FIPS API Change to use M_EVP macros where possible * crypto/evp/evp.h: (some of the macros get added with this change) * fips/fips.h fips/utl/fips_enc.c: Add a few needed functions and use macros to have cmac.c use these functions * Makefile.org fips/Makefile fips/fips.c: Hook it in
NOT BUG:make update (1.1.0-dev)
NOT BUG:This meant alarger renumbering in util/libeay.num due to symbols appearing in 1.0.0-stable and 1.0.1-stable However since there's been no release on this branch yet it should be harmless
NOT BUG:* crypto/crypto-lib.com: Add a few more missing modules
NOT BUG:* util/mkdef.pl: Add crypto/o_str.h and crypto/o_time.h Maybe some more need to be added..
NOT BUG:Use a signed value to check return value of do_cipher()
NOT BUG:Free DRBG context in self tests
NOT BUG:* apps/makeapps.com: Add srp
NOT BUG:* apps/makeapps.com: Forgot to end the check for /POINTER_SIZE=64=ARGV with turning trapping back on * test/maketests.com: Do the same check for /POINTER_SIZE=64=ARGV here * test/clean-test.com: A new script for cleaning up
NOT BUG:* apps/openssl.c: For VMS take care of copying argv if needed much earlier directly in main() 'if needed' also includes when argv is a 32 bit pointer in an otherwise 64 bit environment * apps/makeapps.com: When using /POINTER_SIZE=64 try to use the additional =ARGV but only if it's supported Fortunately DCL is very helpful telling us in this case
NOT BUG:A few more long symbols need shortening
NOT BUG:Add missing source Also have the compile also use [.MODES] as include directory as other parts (notably EVP) seem to need it
NOT BUG:After some adjustments apply the changes OpenSSL 1.0.0d on OpenVMS submitted by Steven M Schweda <sms@antinode.info>
NOT BUG:Typo
NOT BUG:Implement continuous RNG test for SP800-90 DRBGs
NOT BUG:Implement health checks needed by SP800-90
NOT BUG:Fix warnings
NOT BUG:Instantiate DRBGs at maximum strength
NOT BUG:Fix warnings about ignored return values
NOT BUG:Fix broken SRP error/function code assignment
NOT BUG:Add extensive DRBG selftest data and option to corrupt it in fips_test_suite
NOT BUG:Missing SRP files
NOT BUG:Fix Tom Wu's email
BUG:PR: 2469 Submitted by: Jim Studt <jim@studt.net> Reviewed by: steve
NOT BUG:Check mac is present before trying to retrieve mac iteration count
NOT BUG:Fix warnings: signed/unisgned comparison shadowing (in some cases global functions such as rand() )
NOT BUG:Remove redundant check to stop compiler warning
NOT BUG:Note SRP support
NOT BUG:Add SRP support
NOT BUG:Fix warning
NOT BUG:Check requested security strength in DRBG Add function to retrieve the security strength
NOT BUG:make no-dsa work again
NOT BUG:Update status
NOT BUG:Make no-ec2m work again
NOT BUG:Add a few more symbol renames
NOT BUG:Add ECDH to validated module
NOT BUG:Enter FIPS mode in fips_dhvs Support file I/O in fips_ecdsavs
NOT BUG:Update fips_dhvs to handle functional test by generating keys
NOT BUG:Update .cvsignore
NOT BUG:Typo
NOT BUG:New initial DH algorithm test driver
NOT BUG:New SP 800-56A compliant version of DH_compute_key()
NOT BUG:Add meaningful error codes to DRBG
NOT BUG:Add file I/O to fips_drbgvs program
NOT BUG:Support I/O with files in new fips_gcmtest program
NOT BUG:Remove redirection from fipsalgtest.pl script
NOT BUG:Remove need for redirection on RNG and DSS algorithm test programs: some platforms don't support it
NOT BUG:Uninstantiate and free functions for DRBG
NOT BUG:Fix couple of bugs in CTR DRBG implementation
NOT BUG:Updates to DRBG: fix bugs in infrastructure Add initial experimental algorithm test generator
NOT BUG:Initial provisional subject to wholesale change untested probably not working incomplete and unused SP800-90 DRBGs for CTR and Hash modes
NOT BUG:Did I say this was untested?
NOT BUG:ia64-mont.pl: optimize short-key performance
NOT BUG:ghash-x86.pl: optimize for Sandy Bridge
NOT BUG:xts128.c: minor optimization
NOT BUG:s390x assembler pack: tune-up and support for new z196 hardware
NOT BUG:Update status information
NOT BUG:Stop warnings
NOT BUG:Use more portable options when making links in Makefile.fips
NOT BUG:Add DllMain to fips symbols: will need to call this in FIPS capable OpenSSL
NOT BUG:Add new symbols to fipssyms.h
NOT BUG:Make -DOPENSSL_FIPSSYMS work under WIN32: run perl script when WIN32 assembly language files are created add norunasm option to just translate and not run the assembler
NOT BUG:Make mkfiles.pl work with fipscanisteronly
NOT BUG:Include ms directory for fips distribution
NOT BUG:Make fipscanisteronly work with WIN32 build system
NOT BUG:Add fips/ecdsa directory to mkfiles.pl
NOT BUG:Remove duplicate test rule
NOT BUG:Add modes_lcl.h to header list
NOT BUG:Removing debugging print
NOT BUG:Don't try and update c_rehash for fipscanisteronly builds
NOT BUG:Make "make links" work in fipscanisteronly builds
NOT BUG:typo
NOT BUG:Initial perl script to filter out unneeded files for a fips tarball
NOT BUG:Call Makefile.fips when making a fips tarball
NOT BUG:Remove debugging option
NOT BUG:*** empty log message ***
NOT BUG:Remove unnecessary link directories
NOT BUG:Update dependencies
NOT BUG:Create fips links even if not compiling in fips mode
NOT BUG:Remove unnecessary dependencies
NOT BUG:Need to link additional directories for fipscanisteronly build
NOT BUG:x509v3.h header file not needed in fips algorithm test utilities
NOT BUG:tools and rehash not needed for fips build
NOT BUG:*** empty log message ***
NOT BUG:Make fipscanisteronly build only required files
NOT BUG:Move gcm128_context definition to modes_lcl.h (along with some related definitions) so we can use it in EVP GCM code avoiding need to allocate it
NOT BUG:add ECDSA POST
NOT BUG:AES GCM selftests
NOT BUG:Make -DOPENSSL_FIPSSYMS work for assembly language builds
NOT BUG:Experimental perl script to edit assembly language source files call the assembler then restore original file
NOT BUG:This makes OPENSSL_FIPSSYMS work for assembly language builds
NOT BUG:Correct fipssyms.h for more assembly language symbols
NOT BUG:Update auto generated comment
NOT BUG:Remove debugging command
NOT BUG:Reorder fipssyms.h to include assembly language symbols at the end
NOT BUG:Don't need err library for Makefile.fips
NOT BUG:Include openssl/crypto.h first in several other files so FIPS renaming is picked up
NOT BUG:Experimental FIPS symbol renaming
NOT BUG:Fixups under fips/ to make symbol renaming work
NOT BUG:Experimental symbol renaming to avoid clashes with regular OpenSSL
NOT BUG:Make sure crypto.h is included first in any affected files
NOT BUG:Add pairwise consistency test to EC
NOT BUG:Use SHA-256 in fips_test_suite
NOT BUG:Update pairwise consistency checks to use SHA-256
NOT BUG:Add non-FIPS algorithm blocking and selftest checking
NOT BUG:Add FIPS flags to AES ciphers and SHA* digests
NOT BUG:Ignore final '\n' when checking if hex line length is odd
BUG:Add support for SigGen and KeyPair tests
NOT BUG:Update ECDSA test program to handle ECDSA2 format files Correctly handle hex strings with an odd number of digits
NOT BUG:Add .cvsignore
NOT BUG:Add ECDSA functionality to fips module Initial very incomplete version of algorithm test program
NOT BUG:Include support for an add_lock callback to tiny FIPS locking API
NOT BUG:Don't use FIPS api for ec2_oct.c
NOT BUG:Reorganise ECC code for inclusion in FIPS module
NOT BUG:Move compression point2oct and oct2point functions into separate files
NOT BUG:Add a flags field to EC_METHOD
NOT BUG:Add a flag EC_FLAGS_DEFAULT_OCT to use the default compession and oct functions (all existing methods do this) This removes dependencies from EC_METHOD while keeping original functionality
NOT BUG:Use BN_nist_mod_func to avoid need to peek error queue
NOT BUG:New function BN_nist_mod_func which returns an appropriate function if the passed prime is a NIST prime
NOT BUG:Remove dependency of dsa_sign.o and dsa_vrf.o: new functions FIPS_dsa_sig_new and FIPS_dsa_sig_free reimplment DSA_SIG_new and DSA_SIG_free from ASN1 library
NOT BUG:Change FIPS source and utilities to use the "FIPS_" names directly instead of using regular OpenSSL API names
NOT BUG:Make no-ec2m work on Win32 build Add nexprotoneg support too
NOT BUG:Disable some functions in headers with no-ec2m
NOT BUG:New option to disable characteristic two fields in EC code
NOT BUG:dso_dlfcn.c: make it work on Tru64 4.0 PR: 2316
NOT BUG:Configure: engage assembler in Android target
NOT BUG:gcm128.c: make it work with no-sse2
NOT BUG:Add Makefile.fips
NOT BUG:New "fispcanisteronly" build option: only build fipscanister.o and associated utilities This functionality will be used by the validated tarball
NOT BUG:Make Windows build work with GCM
NOT BUG:In FIPS mode only use "Generation by Testing Candidates" equivalent
NOT BUG:Return security strength for supported DSA parameters: will be used later
NOT BUG:Free keys if DSA pairwise error
NOT BUG:x86gas.pl: make data_short work on legacy systems
NOT BUG:xts128.c: initial draft
NOT BUG:Disable FIPS restrictions when doing GCM testing
NOT BUG:Add GCM IV generator Add some FIPS restrictions to GCM Update fips_gcmtest
NOT BUG:ccm128.c: initialize ctx->block (what I was smoking?)
NOT BUG:ccm128.c: initial draft
NOT BUG:Equally experimental encrypt side for fips_gcmtest Currently this uses IVs in the request file need to update it to generate IVs once we have an IV generator in place
NOT BUG:Sync with 1.0.1 branch (CVE-2011-0014 OCSP stapling fix has been applied to HEAD as well.)
NOT BUG:Set values to NULL after freeing them
NOT BUG:Experimental incomplete AES GCM algorithm test program
NOT BUG:OCSP stapling fix (OpenSSL 0.9.8r/1.0.0d)
BUG:Submitted by: Neel Mehta Adam Langley Bodo Moeller
NOT BUG:Link GCM into FIPS module Check return value in EVP gcm
NOT BUG:Synchronize with 1.0.0 branch
NOT BUG:gcm128.c: add boundary condition checks
NOT BUG:Initial *very* experimental EVP support for AES-GCM Note: probably very broken and subject to change
NOT BUG:Add CRYPTO_gcm128_tag() function to retrieve the tag
NOT BUG:Use 0 not -1 (since type is size_t) for finalisation argument to do_cipher: the NULL value for the input buffer is sufficient to notice this case
NOT BUG:Typo
NOT BUG:New flags EVP_CIPH_FLAG_CUSTOM_CIPHER in cipher structures if an underlying cipher handles all cipher symantics itself
NOT BUG:Fix memory leak
NOT BUG:Use default ASN1 if flag set
NOT BUG:gcm128.c: allow multiple calls to CRYPTO_gcm128_aad
NOT BUG:gcm128.c: fix bug in OPENSSL_SMALL_FOOTPRINT decrypt PR: 2432 Submitted by: Michael Heyman
NOT BUG:Fix duplicate code and typo
NOT BUG:Remove unneeded functions make some functions and variables static
NOT BUG:Add FIPS support to the WIN32 build system
NOT BUG:Transfer error redirection to fips.h add OPENSSL_FIPSAPI to source files that use it
NOT BUG:Rename crypto/fips_err.c to fips_ers.c to avoid clash with other fips_err.c
NOT BUG:Include fips header file in err_all.c if needed
NOT BUG:Add FIPS error codes
NOT BUG:add -stripcr option to copy.pl from 0.9.8
NOT BUG:Add Windows FIPS build utilities
NOT BUG:For now disable EC_GFp_nistp224_method() for WIN32 so the WIN32 build completes without linker errors
NOT BUG:Add FIPS support to mkdef.pl script update ordinals
NOT BUG:Use single X931 key generation source file for FIPS and non-FIPS builds
NOT BUG:Assorted bugfixes: - safestack macro changes for C++ were incomplete - RLE decompression boundary case - SSL 2.0 key arg length check
NOT BUG:Submitted by: Google (Adam Langley Neel Mehta Bodo Moeller)
NOT BUG:fix omissions
NOT BUG:CVE-2010-4180 fix (from OpenSSL_1_0_0-stable)
NOT BUG:make update
NOT BUG:Fix error codes
NOT BUG:Cope with new DSA2 file format where some p/q only tests are made
NOT BUG:Fix target config errors
NOT BUG:Make no-asm work in fips mode Add android platform
NOT BUG:Add sign/verify digest API to handle an explicit digest instead of finalising a context
NOT BUG:Remove DSA parameter generation from DSA selftest It is unnecessary and can be very slow on embedded platforms Hard code DSA parameters instead
NOT BUG:Don't try to set pmd if it is NULL
NOT BUG:Add DSA2 support to final algorithm tests: keypair and keyver
NOT BUG:Support more DSA2 tests
NOT BUG:Tolerate mixed case and leading zeroes when comparing
NOT BUG:fixes for DSA2 parameter generation
NOT BUG:update README.FIPS
NOT BUG:Since FIPS 186-3 specifies we use the leftmost bits of the digest we shouldn't reject digest lengths larger than SHA256: the FIPS algorithm tests include SHA384 and SHA512 tests
NOT BUG:Provisional experimental support for DSA2 parameter generation algorithm Not properly integrated or tested yet
NOT BUG:stop warnings about no previous prototype when compiling shared engines
NOT BUG:Fix shared build for fips
NOT BUG:Add fips option into Configure disable endian code for no-asm and FIPS Make shared library default for fips
NOT BUG:add fiplibdir and basedir options to Configure
NOT BUG:use different default fips install directory
NOT BUG:update version to 2.0
NOT BUG:typo
NOT BUG:don't descend fips directory if not in fips mode
NOT BUG:Add preliminary FIPS information
NOT BUG:Move all FIPSAPI renames into fips.h header file include early in crypto.h if needed
NOT BUG:Modify source tree to handle change
NOT BUG:add .cvsignore
NOT BUG:add FIPS API malloc/free
NOT BUG:Redirect FIPS memory allocation to FIPS_malloc() routine remove OpenSSL malloc dependencies
NOT BUG:add fips_dsatest.c file
NOT BUG:Update source files to handle new FIPS_lock() location Add FIPS_lock() definition Remove stale function references from fips.h
NOT BUG:Change OPENSSL_FIPSEVP to OPENSSL_FIPSAPI as it doesn't just refer to EVP any more
NOT BUG:Move locking #define into fips.h
NOT BUG:Set FIPS locking callbacks at same time as OpenSSL locking callbacks
NOT BUG:Include thread ID code in fips module
NOT BUG:New FIPS_lock() function for minimal FIPS locking API: to avoid dependencies on OpenSSL locking code Use API in some internal FIPS files
NOT BUG:Remove redundant ENGINE defines from fips.h
NOT BUG:Move locking and thread ID functions into new files lock.c and thr_id.c redirect locking to minimal FIPS_lock() function where required
NOT BUG:use FIPSEVP in some bn and rsa files
NOT BUG:update .cvsignore
NOT BUG:Internal version of BN_mod_inverse allowing checking of no-inverse without need to inspect error queue
NOT BUG:FIPS changes to test/Makefile: rules to build FIPS test applications
NOT BUG:Use ARX in crypto/Makefile
NOT BUG:FIPS HMAC changes:
NOT BUG:Use EVP macros
NOT BUG:Use tiny EVP in FIPS mode
NOT BUG:Change AR to ARX to allow exclusion of fips object modules
NOT BUG:FIPS mode ERR changes Redirect errors to tiny FIPS callbacks to avoid ERR library dependencies
NOT BUG:FIPS DH changes: selftest checks and key range checks
NOT BUG:FIPS mode DSA changes:
NOT BUG:Check for selftest failures
NOT BUG:Pairwise consistency test for RSA key generation
NOT BUG:Use some EVP macros instead of EVP functions
NOT BUG:Use minimal FIPS EVP where needed
NOT BUG:Key size restrictions
NOT BUG:FIPS mode RSA changes:
NOT BUG:Check for selftest failures
NOT BUG:Pairwise consistency test for RSA key generation
NOT BUG:Use some EVP macros instead of EVP functions
NOT BUG:Use minimal FIPS EVP where needed
NOT BUG:add new RAND errors
NOT BUG:FIPS mode EVP changes:
NOT BUG:Set EVP_CIPH_FLAG_FIPS on approved ciphers
NOT BUG:Support "default ASN1" flag which avoids need for ASN1 dependencies in FIPS code
NOT BUG:Include some defines to redirect operations to a "tiny EVP" implementation in some FIPS source files
NOT BUG:Change m_sha1.c to use EVP_PKEY_NULL_method: the EVP_MD sign/verify functions are not used in OpenSSL 1.0 and later for SHA1 and SHA2 ciphers: the EVP_PKEY API is used instead
NOT BUG:FIPS mode changes to make RNG compile (this will need updating later as we need a whole new PRNG for FIPS)
NOT BUG:1 avoid use of ERR_peek()
NOT BUG:2 If compiling with FIPS use small FIPS EVP and disable ENGINE
NOT BUG:Add fipscanisterbuild configuration option and update Makefile.org: doesn't compile yet
NOT BUG:FIPS_allow_md5() no longer exists and is no longer required
NOT BUG:Add rsa_crpt
NOT BUG:update mkerr.pl for use fips directory add arx.pl script
NOT BUG:add fips_premain.c.sha1
NOT BUG:add fips_sha1_selftest.c
NOT BUG:add fips/sha files
NOT BUG:add fips/aes/Makefile
NOT BUG:add fips/des/Makefile
NOT BUG:add fips/Makefile
NOT BUG:add some missing fips files
NOT BUG:And so it begins.. again
NOT BUG:Initial FIPS 140-2 code ported to HEAD Doesn't even compile yet may have missing files extraneous files and other nastiness
BUG:In other words: it's experimental ATM OK?
NOT BUG:Move RSA encryption functions to new file crypto/rsa/rsa_crpt.c to separate crypto and ENGINE dependencies in RSA library
NOT BUG:Move BN_options function to bn_print.c to remove dependency for BIO printf routines from bn_lib.c
NOT BUG:Move DSA_sign DSA_verify to dsa_asn1.c and include separate versions of DSA_SIG_new() and DSA_SIG_free() to remove ASN1 dependencies from DSA_do_sign() and DSA_do_verify()
NOT BUG:recalculate DSA signature if r or s is zero (FIPS 186-3 requirement)
NOT BUG:revert Makefile change
BUG:PR: 2433 Submitted by: Chris Wilson <chris@qwirx.com> Reviewed by: steve
NOT BUG:Constify ASN1_STRING_set_default_mask_asc()
NOT BUG:New function EC_KEY_set_affine_coordinates() this performs all the NIST PKV tests
NOT BUG:check EC public key isn't point at infinity
BUG:PR: 1612 Submitted by: Robert Jackson <robert@rjsweb.net> Reviewed by: steve
NOT BUG:Fix EC_POINT_cmp function for case where b but not a is the point at infinity
NOT BUG:oops revert mistakenly committed EC changes
NOT BUG:Add additional parameter to dsa_builtin_paramgen to output the generated seed to: this doesn't introduce any binary compatibility issues as the function is only used internally
NOT BUG:The seed output is needed for FIPS 140-2 algorithm testing: the functionality used to be in DSA_generate_parameters_ex() but was removed in OpenSSL 1.0.0
NOT BUG:add va_list version of ERR_add_error_data
NOT BUG:stop warning with no-engine
NOT BUG:PR: 2425 Synchronise VMS build with Unixly build
NOT BUG:Constify
NOT BUG:Fix warning
NOT BUG:missed change in ACKNOWLEDGEMENTS file
NOT BUG:move some string utilities to buf_str.c to reduce some dependencies (from 0.9.8 branch)
NOT BUG:add X9.31 prime generation routines from 0.9.8 branch
BUG:PR: 2407 Fix fault include Submitted by Arpadffy Zoltan <Zoltan.Arpadffy@scientificgames.se>
NOT BUG:Don't use decryption_failed alert for TLS v1.1 or later
NOT BUG:Since DTLS 1.0 is based on TLS 1.1 we should never return a decryption_failed alert
NOT BUG:oops missed an assert
BUG:PR: 2411 Submitted by: Rob Austein <sra@hactrn.net> Reviewed by: steve
NOT BUG:Fix corner cases in RFC3779 code
NOT BUG:Fix escaping code for string printing If *any* escaping is enabled we must escape the escape character itself (backslash)
BUG:PR: 2410 Submitted by: Rob Austein <sra@hactrn.net> Reviewed by: steve
NOT BUG:Use OPENSSL_assert() instead of assert()
NOT BUG:PR: 2413 Submitted by: Michael Bergandi <mbergandi@gmail.com> Reviewed by: steve
NOT BUG:Fix typo in crypto/bio/bss_dgram.c
NOT BUG:avoid verification loops in trusted store when path building
NOT BUG:Part of the IF structure didn't get pasted here.. PR: 2393
NOT BUG:e_capi.c: rearrange #include-s to improve portability PR: 2394
NOT BUG:First attempt at adding the possibility to set the pointer size for the builds on VMS PR: 2393
NOT BUG:Support routines for ASN1 scanning function doesn't do much yet
NOT BUG:e_capi.c: change from ANSI to TCHAR domain This makes it compilable on Windows CE/Mobile yet keeps it normal Windows loop PR: 2350
BUG:apps/x590.c: harmonize usage of STDout and out_err PR: 2323
NOT BUG:bss_file.c: refine UTF8 logic PR: 2382
NOT BUG:ignore leading null fields
NOT BUG:update FAQ
NOT BUG:PR: 2386 Submitted by: Stefan Birrer <stefan.birrer@adnovum.ch> Reviewed by: steve
NOT BUG:Correct SKM_ASN1_SET_OF_d2i macro
NOT BUG:fix doc typos
NOT BUG:use right version this time in FAQ
NOT BUG:update FAQ
NOT BUG:Configure: make -mno-cygwin optional on mingw platforms PR: 2381
NOT BUG:PR: 2385 Submitted by: Stefan Birrer <stefan.birrer@adnovum.ch> Reviewed by: steve
NOT BUG:Zero key->pkey.ptr after it is freed so the structure can be reused
NOT BUG:Better method for creating SSLROOT: Make sure to include the path to evptest.txt
NOT BUG:TABLE update
NOT BUG:s390x assembler pack: adapt for -m31 build see commentary in Configure for more details
NOT BUG:apply J-PKAKE fix to HEAD (original by Ben)
NOT BUG:Some of the MS_STATIC use in crypto/evp is a legacy from the days when EVP_MD_CTX was much larger: it isn't needed anymore
BUG:PR: 2240 Submitted by: Jack Lloyd <lloyd@randombit.net> "Mounir IDRASSI" <mounir.idrassi@idrix.net> steve Reviewed by: steve
NOT BUG:As required by RFC4492 an absent supported points format by a server is not an error: it should be treated as equivalent to an extension only containing uncompressed
NOT BUG:using_ecc doesn't just apply to TLSv1
NOT BUG:fix typo in HMAC redirection add HMAC INIT tracing
NOT BUG:VERY EXPERIMENTAL HMAC redirection example in OpenSSL ENGINE Untested at this stage and probably wont work properly
NOT BUG:add "missing" functions to copy EVP_PKEY_METHOD and examine info
NOT BUG:oops revert invalid change
NOT BUG:use generalise mac API for SSL key generation
NOT BUG:constify EVP_PKEY_new_mac_key()
BUG:INSTALL.W32: document trouble with symlinks under MSYS PR: 2377
NOT BUG:Use the same directory for architecture dependent header files as in the branches OpenSSL-1_0_0-stable and OpenSSL-1_0_1-stable
NOT BUG:Implement bc test strategy as submitted by Steven M Schweda <sms@antinode.info> Make sure we move to '__here' before trying to use it to build local sslroot:
NOT BUG:Print openssl version information at the end of the tests
NOT BUG:Give the architecture dependent directory higher priority
NOT BUG:Don't define an empty CFLAGS it's much more honest not to defined it at all Make sure to remove any [.CRYTO]BUILDINF.H so it doesn't get used instead of [.''ARCH'.CRYPTO]BUILDINF.H
NOT BUG:* tests.com: Add the symbol openssl_conf so the openssl application stops complaining about a missing configuration file Define the logical name PERL_ENV_TABLES with values to Perl considers the DCL symbol table as part of the environment (see 'man perlvms' for details) so cms-test.pl can get the value of EXE_DIR from tests.com among others * cms-test.pl: Make changes to have it work on VMS as well Upper or mixed case options need to be quoted and the openssl command needs a VMS-specific treatment It all should work properly on Unix I hope it does on Windows as well..
NOT BUG:Better way to build tests Taken from OpenSSL-1_0_1-stable
NOT BUG:Synchronise with Unix and do all other needed modifications to have it build on VMS again
NOT BUG:s390x.S: fix typo in bn_mul_words PR: 2380
NOT BUG:Taken from OpenSSL_1_0_0-stable:
BUG:Include proper header files for time functions Submitted by Arpadffy Zoltan <Zoltan.Arpadffy@scientificgames.se>
NOT BUG:add pice of PR#2295 not committed to HEAD
NOT BUG:PR: 2376 Submitted by: Guenter <lists@gknw.net> Reviewed by: steve
NOT BUG:Cleanup alloca use fix Win32 target for OpenWatcom
NOT BUG:PR: 2375 Submitted by: Guenter <lists@gknw.net> Reviewed by: steve
NOT BUG:cleanup/fix e_aep.c for OpenWatcom
NOT BUG:PR: 2374 Submitted by: Guenter <lists@gknw.net> Reviewed by: steve
NOT BUG:Don't compile capi ENGINE on mingw32
NOT BUG:Tell the user what test is being performed
BUG:We expect these scripts not to bail on error so make sure that's what happens
NOT BUG:Synchronise with Unix tests
NOT BUG:We redid the structure on architecture dependent source files but apparently forgot to adapt the copying to the installation directory
NOT BUG:remove duplicate statement
NOT BUG:compile cts128.c on VMS
NOT BUG:fix no SIGALRM case in speed.c
BUG:PR: 2372 Submitted by: "W.C.A Wijngaards" <wouter@nlnetlabs.nl> Reviewed by: steve
NOT BUG:Fix OpenBSD compilation failure
NOT BUG:oops reinstate TLSv1 string
NOT BUG:Don't assume a decode error if session tlsext_ecpointformatlist is not NULL: it can be legitimately set elsewhere
NOT BUG:bring HEAD up to date add CVE-2010-3864 fix update NEWS files
NOT BUG:add TLS v1.1 options to s_server
NOT BUG:If EVP_PKEY structure contains an ENGINE the key is ENGINE specific and we should use its method instead of any generic one
NOT BUG:Only use explicit IV if cipher is in CBC mode
NOT BUG:Get correct GOST private key instead of just assuming the last one is correct: this isn't always true if we have more than one certificate
NOT BUG:preliminary acknowledgments file
NOT BUG:Submitted By: Bogdan Harjoc <harjoc@gmail.com> Add missing debug WIN64 targets
NOT BUG:PR: 2366 Submitted by: Damien Miller <djm@mindrot.org> Reviewed by: steve
NOT BUG:Stop pkeyutl crashing if some arguments are missing Also make str2fmt tolerate NULL parameter
BUG:Submitted by: Jonathan Dixon <joth@chromium.org> Reviewed by: steve
NOT BUG:If store is NULL set flags correctly
NOT BUG:Configure: update mips[32|64]_asm lines
NOT BUG:sha512-mips.pl: add missing 64-bit byte swap
NOT BUG:Add aes-mips.pl assembler module
NOT BUG:sha512-mips.pl: fix "little-endian" typos
NOT BUG:PR: 2295 Submitted by: Alexei Khlebnikov <alexei.khlebnikov@opera.com> Reviewed by: steve
NOT BUG:OOM checking Leak in OOM fix Fall-through comment Duplicate code elimination
NOT BUG:x86_64-xlate.pl: fix LNK4078 and LNK4210 link warnings PR 2356
NOT BUG:move CHANGES entry to correct place
BUG:PR: 2314 Submitted by: Mounir IDRASSI <mounir.idrassi@idrix.net> Reviewed by: steve
NOT BUG:Fix for double free bug in ssl/s3_clnt.c CVE-2010-2939
NOT BUG:We can't always read 6 bytes in an OCSP response: fix so error statuses are read correctly for non-blocking I/O
NOT BUG:fix signature printing routines
NOT BUG:fix warnings
NOT BUG:Minor documentation fixes PR#2345
NOT BUG:Minor documentation fixes PR#2344
NOT BUG:Typo PR#2346
NOT BUG:Add call to ENGINE_register_all_complete() to ENGINE_load_builtin_engines() this means that some implementations will be used automatically e.g aesni we do this for cryptodev anyway
NOT BUG:Setup cpuid in ENGINE_load_builtin_engines() too as some ENGINEs use it
NOT BUG:sha512-mips.pl: add missing byte swap for little-endians
NOT BUG:MIPS assembler pack: enable it in Configure add SHA2 module fix make rules update commentary..
NOT BUG:Add unified mips.pl which will replace mips3.s
NOT BUG:sha1-mips.pl mips-mont.pl: unify MIPS assembler modules in respect to ABI and binutils
NOT BUG:ghash-s390x.pl: reschedule instructions for better performance
NOT BUG:s390x assembler pack: extend OPENSSL_s390xcap_P to 128 bits
NOT BUG:VC-32.pl: default to nasm if neither nasm or nasmw is is found at the moment PR: 2338
NOT BUG:Alpha assembler pack: adapt for Linux PR: 2335
BUG:sha1-armv4-large.pl: more readable input pickup
NOT BUG:Configure: remove redundant -DMD32_REG_T=int
NOT BUG:crypto/ppc[cpuid|cap]: call CPU detection once and detect AltiVec
NOT BUG:crypto/bn/asm/s390x.S: drop redundant instructions
NOT BUG:Add ghash-s390x.pl
NOT BUG:modes/asm/ghash-*.pl: switch to [more reproducible] performance results collected with 'apps/openssl speed ghash'
NOT BUG:ghash-ia64.pl: 50% performance improvement of gcm_ghash_4bit
BUG:sparcv9cap.c: disengange Solaris-specific CPU detection routine in favour of unified procedure relying on SIGILL PR: 2321
NOT BUG:Fixes to NPN from Adam Langley
NOT BUG:NPN tests
NOT BUG:Fix warnings
NOT BUG:make no-gost work on Windows
NOT BUG:fix bug in AES_unwrap()
NOT BUG:More C language police work
NOT BUG:C conformity fixes: Move declarations before statements in all blocks
NOT BUG:C conformity fixes: - Move declarations before statements in all blocks - Where 64-bit type is required use it explicitly (not 1l)
BUG:PR: 1833 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fix other cases not covered by original patch
NOT BUG:Update version numbers
NOT BUG:For better forward-security support add functions SSL_[CTX_]set_not_resumable_session_callback
BUG:Submitted by: Emilia Kasper (Google)
NOT BUG:[A part of this change affecting ssl/s3_lib.c was accidentally commited separately together with a compilation fix for that file; see s3_lib.c CVS revision 1.133 (http://cvs.openssl.org/chngview?cn=19855).]
BUG:Patch from PR #1833 was broken: there's no s->s3->new_session (only s->new_session)
NOT BUG:(formatting error)
NOT BUG:New 64-bit optimized implementation EC_GFp_nistp224_method() This will only be compiled in if explicitly requested (#ifdef EC_NISTP224_64_GCC_128)
BUG:Submitted by: Emilia Kasper (Google)
NOT BUG:sync and update ordinals
BUG:PR: 1833 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de>
BUG:Support for abbreviated handshakes when renegotiating
NOT BUG:ECC library bugfixes
BUG:Submitted by: Emilia Kasper (Google)
NOT BUG:Harmonize with OpenSSL_1_0_1-stable version of CHANGES
NOT BUG:util/cygwin.sh: maintainer's update
NOT BUG:Submitted by: Corinna Vinschen
NOT BUG:engine/Makefile: harmonize engine install rule for .dylib extension on MacOS X PR: 2319
NOT BUG:gcm128.c: fix typo in CRYPTO_gcm128_encrypt_ctr32 name
NOT BUG:Makefile.share: fix brown-bag typo in link_o.darwin
NOT BUG:crypto/modes/Makefile: fix typo in ghash-parisc.s rule
BUG:PR: 2315
NOT BUG:Use consistent calculation for PSS salt length
NOT BUG:sha1-armv4-large.pl: reschedule instructions for dual-issue pipeline
NOT BUG:rc5_locl.h: make inline assembler clang-friendly
NOT BUG:gcm128.c: add CRYPTO_gcm128_[en|de]crypt_ctr32
NOT BUG:md32_common.h: modify MD32_REG_T pre-processing logic [triggered by clang]
NOT BUG:Fix ctr mode properly this time...
NOT BUG:Make ctr mode behaviour consistent with other modes
NOT BUG:Add Next Protocol Negotiation
NOT BUG:alphacpuid.pl: fix brown-bag bug
NOT BUG:Sign mismatch
NOT BUG:Missing prototype
NOT BUG:aes-x86_64.pl: commit#19797 was overzealous partially reverse
NOT BUG:Replace alphacpuid.s with alphacpuid.pl to ensure it makes to release tar-balls PR: 2309
NOT BUG:ms/: update do_win64*.bat and remove redundant mingw32.bat
NOT BUG:sha1-alpha.pl: commentary update
NOT BUG:rc4-s390x.pl: harmonize build rule with other similar rules
NOT BUG:ghash-ia64.pl: excuse myself from implementing "528B" variant
NOT BUG:modes/Makefile: update clean rule
NOT BUG:eng_aesni.c: switch to CRYPTO_ctr128_encrypt_ctr32
NOT BUG:aes-x86_64.pl: remove redundant instructions
NOT BUG:perlasm/x86_64-xlate.pl: extend SSE>2 to ml64
NOT BUG:aesni-x86_64.pl: fix typos
NOT BUG:perlasm/x86asm.pl: move aesni and pclmulqdq opcodes to aesni-x86.pl and ghash-x86.pl
NOT BUG:Add new type ossl_ssize_t instead of ssize_t and move definitions to e_os2.h this should fix WIN32 compilation issues and hopefully avoid conflicts with other headers which may workaround ssize_t in different ways
NOT BUG:#if out deleted function from headers so it isn't picked up by WIN32 build system
NOT BUG:WIN32 build fix
NOT BUG:Sync ordinals and update
NOT BUG:Update symhacks
NOT BUG:Add modes.h and cmac to WIN32 build system
NOT BUG:aesni-x86[_64].pl: fine-tune add CCM subroutine add performance data
NOT BUG:Fix WIN32 build system to correctly link ENGINE DLLs contained in a directory: currently the GOST ENGINE is the only case
NOT BUG:Add call to ENGINE_register_all_complete() to ENGINE_load_builtin_engines() this means that some implementations will be used automatically e.g aesni we do this for cryptodev anyway
NOT BUG:Setup cpuid in ENGINE_load_builtin_engines() too as some ENGINEs use it
BUG:PR: 1830 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de> Steve Henson
NOT BUG:Support for RFC5705 key extractor
NOT BUG:oops revert wrong patch.
NOT BUG:Fix warnings (From HEAD original patch by Ben)
NOT BUG:Makefile.shared: link_o.darwin comment update
NOT BUG:Configure: suppress $multilib with non-system $prefix PR: 2307
NOT BUG:Makefile.shared: debugging line slipped through in previous commit
NOT BUG:Makefile.shared: update link_o.dawrin rule PR: 2306
NOT BUG:aes-s390x.pl: revisit buffer allocation and add performance data
NOT BUG:sha1-armv4-large.pl: add performance data for Cortex A8 core
NOT BUG:ARM assembler pack: reschedule instructions for dual-issue pipeline Modest improvement coefficients mean that code already had some parallelism and there was not very much room for improvement Special thanks to Ted Krovetz for benchmarking the code with such patience
NOT BUG:PR: 2297 Submitted by: Antony Benoy <bantony@ebay.com> Approved by: steve@openssl.org
NOT BUG:Fix bug in AES wrap code when t > 0xff
NOT BUG:Configure: fix aes_ctr.o regexp
NOT BUG:INSTALL.W32: mention _OPENSSL_isservice() PR: 2194
NOT BUG:gcm128.c: API modification and readability improvements add ghash benchmark to apps/speed.c
NOT BUG:Rework framework for assembler support for AES counter mode and add AES_ctr32_encrypt to aes-s390x.pl
NOT BUG:Harmonize s390x assembler modules with "catch-all" rules from commit#19749
NOT BUG:armv4-mont.pl: addenum to previous commit#19749
NOT BUG:crypto/*/Makefile: unify "catch-all" assembler make rules and harmonize ARM assembler modules
NOT BUG:rand_nw.c: compensate for gcc bug (using %edx instead of %eax at -O3) PR: 2296
NOT BUG:PROBLEMS: MacOS X is not necessarily a problem anymore
NOT BUG:sparcv9cap.c: reiterate CPU detection logic
NOT BUG:i variable is used on some platforms
NOT BUG:ghash-armv4.pl: excuse myself from implementing "528B" flavour
NOT BUG:ghash-sparcv9.pl: fix Makefile rule and add performance data for T1
NOT BUG:crypto/sparc*: eliminate _sparcv9_rdwrasi
NOT BUG:SPARCv9 assembler pack: refine CPU detection on Linux fix for "unaligned opcodes detected in executable segment" error
NOT BUG:no need for empty fragments with TLS 1.1 and later due to explicit IV
NOT BUG:clarify comment
NOT BUG:Fix warnings
NOT BUG:VC-32.pl: fix /Fd name generation PR: 2284
NOT BUG:ghash-x86_64.pl: "528B" variant delivers further >30% improvement
NOT BUG:ghash-x86.pl: commentary updates
NOT BUG:ghash-x86.pl: "528B" variant of gcm_ghash_4bit_mmx gives 20-40% improvement
NOT BUG:x86 perlasm: add support for 16-bit values
NOT BUG:update FAQ
NOT BUG:add CVE-2010-0742 and CVS-2010-1633 fixes
BUG:VC-32.pl: unconditionally generate symbols.pdb
NOT BUG:x86_64-xlate.pl: refine mingw support and regexps update commentary
NOT BUG:Configure: update mingw config-lines
NOT BUG:fix PR#2261 in a different way
NOT BUG:PR: 2278 Submitted By: Mattias Ellert <mattias.ellert@fysast.uu.se>
NOT BUG:Fix type checking macro SKM_ASN1_SET_OF_i2d
NOT BUG:update NEWS
NOT BUG:PR: 2262 Submitted By: Victor Wagner <vitus@cryptocom.ru>
NOT BUG:Fix error reporting in load_key function
BUG:PR: 2261 Submitted By: De Rudder Stephen L." <s_derudder@tditx.com>
NOT BUG:Workaround for newer Windows headers which define EADDRINUSE but not to the same value as WSAEADDRINUSE
BUG:PR: 2258 Submitted By: Ger Hobbelt <ger@hobbelt.com>
NOT BUG:Base64 BIO fixes:
NOT BUG:Use OPENSSL_assert() instead of assert() Use memmove() as buffers overlap Fix write retry logic
BUG:PR: 2266 Submitted By: Jonathan Gray <jsg@goblin.cx>
BUG:Correct ioctl definitions
NOT BUG:gcm128.c: P.-M Hager has tipped about possibility to fold reductions in gcm_ghash_4bit Taking the idea a step further I've added extra 256+16 bytes of per-key storage so that one can speak about 3rd variant in addition to "256B" and "4KB": "528B" one Commonly it should be ~50% faster than "256B" implementation or ~25% slower than "4KB" one
NOT BUG:Avoid use of ex_data free function in Chil ENGINE so it can be safely reloaded
NOT BUG:ghash-x86.pl: MMX optimization (+20-40%) and commentary update
NOT BUG:gcm128.c: commentary update
BUG:PR: 2254 Submitted by: Ger Hobbelt <ger@hobbelt.com> Approved by: steve@openssl.org
NOT BUG:Check for <= 0 i2d return value
NOT BUG:PR: 2251 Submitted by: Ger Hobbelt <ger@hobbelt.com> Approved by: steve@openssl.org
BUG:Memleak BIO chain leak and realloc checks in v3_pci.c
NOT BUG:Stop compiler complaining in pedantic mode: may be a better way to do this..
NOT BUG:oops typo
NOT BUG:Update cms-test.pl to handle some Unix like Windows environments where calling shlib_wrap.sh doesn't work
BUG:PR: 2259 Submitted By: Artem Chuprina <ran@cryptocom.ru>
NOT BUG:Check return values of HMAC in tls_P_hash and tls1_generate_key_block
NOT BUG:Although the previous version could in theory crash that would only happen if a digest call failed The standard software methods can never fail and only one ENGINE currently uses digests and it is not compiled in by default
NOT BUG:oops revert test patch
BUG:PR: 2253 Submitted By: Ger Hobbelt <ger@hobbelt.com>
NOT BUG:Check callback return value when outputting errors
BUG:PR: 2255 Submitted By: Ger Hobbelt <ger@hobbelt.com>
NOT BUG:Place RSA dependent variable under #ifndef OPENSSL_NO_RSA
NOT BUG:rc4-x86_64.pl: "Westmere" optimization
NOT BUG:ghash-x86[_64].pl: add due credit
NOT BUG:GCM "jumbo" update: - gcm128.c: support for Intel PCLMULQDQ readability improvements; - asm/ghash-x86.pl: splitted vanilla MMX PCLMULQDQ subroutines; - asm/ghash-x86_64.pl: add PCLMULQDQ implementations
NOT BUG:x86asm.pl: consistency imrovements
NOT BUG:x86_64-xlate.pl: refine some regexp's and add support for OWORD/QWORD PTR
NOT BUG:Revert previous Linux-specific/centric commit#19629 If it really has to be done it's definitely not the way to do it So far answer to the question was to ./config -Wa,--noexecstack (adopted by RedHat)
NOT BUG:Non-executable stack in asm
NOT BUG:"Jumbo" update for crypto/modes: - introduce common modes_lcl.h; - ctr128.c: implement additional CRYPTO_ctr128_encrypt_ctr32 interface; - gcm128.c: add omitted ARM initialization remove ctx.ctr;
NOT BUG:Add ghash-armv4.pl
BUG:PR: 2252 Submitted By: Ger Hobbelt <ger@hobbelt.com>
NOT BUG:Update docs to BIO_f_buffer()
BUG:PR: 2230 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fix bug in bitmask macros and stop warnings
BUG:PR: 2244 Submitted By: "PMHager" <hager@dortmund.net>
NOT BUG:Initialise pkey callback to 0
BUG:PR: 2250 Submitted By: Ger Hobbelt <ger@hobbelt.com>
NOT BUG:Don't overwrite return value with strlen(f)
NOT BUG:experimental function to convert ASN1_TIME to tm not used or even compiled in yet
NOT BUG:Missing declarations no assembler in PEDANTIC
NOT BUG:bss_file.c: refine UTF-8 logic on Windows
NOT BUG:Add ghash-parisc.pl
NOT BUG:Take gcm128.c and ghash assembler modules into the build loop
NOT BUG:bss_file.c: reserve for option to encode file name with UTF-8
NOT BUG:md5-ia64.S: fix assembler warning
BUG:PR: 2241 Submitted By: Artemy Lebedev <vagran.ast@gmail.com>
NOT BUG:Typo
NOT BUG:new function to diff tm structures
NOT BUG:oops revert patch not part of Configure diff
NOT BUG:oops commit Configure part of PR#2234
BUG:PR: 2234 Submitted By: Matthias Andree <matthias.andree@gmx.de>
NOT BUG:Use correct path to openssl utility in c_rehash script
BUG:PR: 2235 Submitted By: Bruce Stephens <bruce.stephens@isode.com>
NOT BUG:Make ts/Makefile consistent with other Makefiles
NOT BUG:x86_64cpuid.pl: ml64 is allergic to db on label line
NOT BUG:gcm128.c and assembler modules: change argument order for gcm_ghash_4bit ghash-x86*.pl: fix performance numbers for Core2 as it turned out previous ones were "tainted" by variable clock frequency
NOT BUG:update FAQ
NOT BUG:[co]fb128.c: fix "n=0" bug
NOT BUG:fix signed/unsigned comparison warnings
NOT BUG:fix bug in ccgost CFB mode code
NOT BUG:check ASN1 type before using it
BUG:PR: 2230 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fix various DTLS fragment reassembly bugs
BUG:PR: 2229 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Don't drop DTLS connection if mac or decryption failed
BUG:PR: 2228 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fix DTLS buffer record MAC failure bug
NOT BUG:aes-ppc.pl: 10% performance improvement on Power6
NOT BUG:AESNI engine: update test_aesni
NOT BUG:gcm128.c: commentary and formatting updates
BUG:cts128.c: add support for NIST "Ciphertext Stealing" proposal
NOT BUG:AESNI engine: add counter mode
NOT BUG:perlasm/x86*: add support to SSE>2 and pclmulqdq x86_64-xlate.pl provides correct solution to problem addressed in committ #19244
NOT BUG:sha1-alpha.pl: addenum till commit #19547
NOT BUG:ctr129.c: fix typo simplify ctr128_inc and fix "n=0" bug
NOT BUG:Add ghash-alpha.pl assembler module
NOT BUG:sha1-alpha.pl: engage it in build
NOT BUG:sparccpuid.S: some assembler is allergic to apostrophes in comments
NOT BUG:alpha-mont.pl: comply with stack alignment requirements
NOT BUG:make GOST MAC work again
NOT BUG:Add SHA2 algorithms to SSL_library_init() Although these aren't used directly by SSL/TLS SHA2 certificates are becoming more common and applications that only call SSL_library_init() and not OpenSSL_add_all_alrgorithms() will fail when verifying certificates
NOT BUG:Update docs
NOT BUG:Remove obsolete PRNG note Add comment about use of SHA256 et al
BUG:PR: 2209 Submitted Daniel Mentz <danielml@sent.com>
NOT BUG:Documentation typo
BUG:PR: 2218 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fixes for DTLS replay bug
BUG:PR: 2219 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fixes for DTLS buffering bug
BUG:PR: 2223 Submitted By: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Fixes for DTLS timeout bug
NOT BUG:PR: 2220
NOT BUG:Fixes to make OpenSSL compile with no-rc4
NOT BUG:fix FAQ (again)
NOT BUG:update FAQ
NOT BUG:fix FAQ
NOT BUG:update FAQ
NOT BUG:update FAQ
NOT BUG:update HEAD FAQ
NOT BUG:cryptlib.c: allow application to override OPENSSL_isservice PR: 2194
NOT BUG:ARMv4 assembler: fix compilation failure Fix is actually unconfirmed but I can't think of any other cause for failure
NOT BUG:dso_dlfcn.c: fix compile failure on Tru64
BUG:PR: 1696
NOT BUG:Check return value if d2i_PBEPARAM()
BUG:PR: 1763
NOT BUG:Remove useless num = 0 assignment
NOT BUG:Remove redundant cases on sock_ctrl(): default case handles them
NOT BUG:sync ordinals with 1.0.0
BUG:PR: 1904 Submitted by: David Woodhouse <dwmw2@infradead.org>
NOT BUG:Pass passphrase minimum length down to UI
BUG:PR: 1813 Submitted by: Torsten Hilbrich <torsten.hilbrich@secunet.com>
NOT BUG:Fix memory leak when engine name cannot be loaded
NOT BUG:update FAQ
BUG:Fix for "Record of death" vulnerability CVE-2010-0740
NOT BUG:Also add missing CHANGES entry for CVE-2009-3245 (code changes submitted to this branch on 23 Feb 2010) and further harmonize this version of CHANGES with the versions in the current branches
NOT BUG:initialise buf if wrong_info not used
BUG:PR: 1731 and maybe 2197
NOT BUG:Clear error queue in a few places in SSL code where errors are expected so they don't stay in the queue
NOT BUG:rand_win.c: fix logical bug in readscreen
NOT BUG:bss_file.c: fix MSC 6.0 warning
NOT BUG:GHASH assembler: new ghash-sparcv9.pl module and saner descriptions
NOT BUG:e_capi.c: fix typo
NOT BUG:Fix UPLINK typo
NOT BUG:ghash-ia64.pl: new file GHASH for Itanium ghash-x86_64.pl: minimize stack frame usage ghash-x86.pl: modulo-scheduling MMX loop in respect to input vector results in up to 10% performance improvement
NOT BUG:workaround for missing definition in some headers
NOT BUG:print signature parameters with CRLs too
NOT BUG:free up sigopts STACK
NOT BUG:clear bogus errors in ca utility
NOT BUG:update CHANGES
NOT BUG:add -sigopt option to ca utility
NOT BUG:add X509_CRL_sign_ctx function
NOT BUG:new sigopt and PSS support for req and x509 utilities
BUG:PR: 2192 Submitted By: Jaroslav Imrich <jaroslav.imrich@disig.sk>
NOT BUG:The prompt_info and wrong_info parameters can be empty strings which can produce confusing prompts Treat empty string same as NULL
NOT BUG:missing goto meant signature was never printed out
NOT BUG:This entry was in 0.9.8m changelog but missing from here since it's security relevent we'd better list it
NOT BUG:Submitted by: Martin Kaiser
NOT BUG:Reject PSS signatures with unsupported trailer value
NOT BUG:alg2 can be NULL
NOT BUG:Add GHASH x86_64 assembler
NOT BUG:typo
NOT BUG:RSA PSS ASN1 signing method
NOT BUG:typo
NOT BUG:ctrl operations to retrieve RSA algorithm settings
NOT BUG:Add support for new PSS functions in RSA EVP_PKEY_METHOD
NOT BUG:Extend PSS padding code to support different digests for MGF1 and message
NOT BUG:Algorithm specific ASN1 signing functions
NOT BUG:update cms code to use X509_ALGOR_set_md instead of internal function
NOT BUG:New function X509_ALGOR_set_md() to set X509_ALGOR (DigestAlgorithmIdentifier) from a digest algorithm
NOT BUG:don't leave bogus errors in the queue
NOT BUG:Add GHASH x86 assembler
BUG:PR: 2188 Submitted By: Jaroslav Imrich <jaroslav.imrich@disig.sk>
NOT BUG:Add "missing" functions to get and set prompt constructor
NOT BUG:PR: 2186 Submitted By: "Joel Rabinovitch" <Joel.Rabinovitch@tecsys.com>
NOT BUG:Detect aix64-gcc
NOT BUG:reserve a few more bits for future cipher modes
NOT BUG:gcm128.c: add option for streamed GHASH simple benchmark minor naming change
NOT BUG:RSA PSS verification support including certificates and certificate requests Add new ASN1 signature initialisation function to handle this case
NOT BUG:correct error code
NOT BUG:print outermost signature algorithm parameters too
NOT BUG:oops
NOT BUG:The OID sanity check was incorrect It should only disallow *leading* 0x80 values
NOT BUG:although AES is a variable length cipher AES EVP methods have a fixed key length
NOT BUG:oops make EVP ctr mode work again
NOT BUG:typo
NOT BUG:add separate PSS decode function rename PSS parameters to RSA_PSS_PARAMS
NOT BUG:add MGF1 digest ctrl
NOT BUG:update ASN1 sign/verify to use EVP_DigestSign and EVP_DigestVerify
NOT BUG:don't add digest alias if signature algorithm is undefined
NOT BUG:Add PSS algorithm printing This is an initial step towards full PSS support
NOT BUG:Uses ASN1 module in Martin Kaiser's PSS patch
NOT BUG:fix indent newline
NOT BUG:Add algorithm specific signature printing An individual ASN1 method can now print out signatures instead of the standard hex dump
NOT BUG:More complex signatures (e.g PSS) can print out more meaningful information
NOT BUG:Sample DSA version included that prints out the signature parameters r s
NOT BUG:[Note EVP_PKEY_ASN1_METHOD is an application opaque structure so adding new fields in the middle has no compatibility issues]
NOT BUG:Fix memory leak: free up ENGINE functional reference if digest is not found in an ENGINE
NOT BUG:Add -engine_impl option to dgst which will use an implementation of an algorithm from the supplied engine instead of just the default one
NOT BUG:option to replace extensions with new ones: mainly for creating cross-certificates
BUG:PR: 2183
NOT BUG:PR#1999 broke fork detection by assuming HAVE_FORK was set for all platforms Include original HAVE_FORK detection logic while allowing it to be overridden on specific platforms with -DHAVE_FORK=1 or -DHAVE_FORK=0
BUG:Submitted by: Tomas Hoger <thoger@redhat.com>
NOT BUG:Fix for CVE-2010-0433 where some kerberos enabled versions of OpenSSL could be crashed if the relevant tables were not present (e.g chrooted)
NOT BUG:don't mix definitions and code
NOT BUG:Initial version of Galois Counter Mode implementation Interface is still subject to change..
NOT BUG:ppccap.c: portability fix
NOT BUG:Fix s390x-specific HOST_l2c|c2l
BUG:Submitted by: Andreas Krebbel
BUG:PR: 2178 Submitted by: "Kennedy Brendan" <brendan.kennedy@intel.com>
NOT BUG:Handle error codes correctly: cryptodev returns 0 for success whereas OpenSSL returns 1
NOT BUG:use supplied ENGINE in genrsa
NOT BUG:oops reinstate correct prototype
NOT BUG:'typo'
NOT BUG:make USE_CRYPTODEV_DIGESTS work
BUG:load cryptodev if HAVE_CRYPTODEV is set too
NOT BUG:update cryptodev to match 1.0.0 stable branch version
NOT BUG:Fix warnings (note that gcc 4.2 has a bug that makes one of its warnings hard to fix without major surgery)
NOT BUG:algorithms field has changed in 1.0.0 and later: update
NOT BUG:oops revert verify.c change
NOT BUG:Add Kerberos fix which was in 0.9.8-stable but never committed to HEAD and 1.0.0 Original fix was on 2007-Mar-09 and had the log message: "Fix kerberos ciphersuite bugs introduced with PR:1336."
NOT BUG:include TVS 1.1 version string
NOT BUG:Revert CFB block length change Despite what SP800-38a says the input to CFB mode does *not* have to be a multiple of the block length and several other specifications (e.g PKCS#11) do not require this
NOT BUG:oops use correct date
NOT BUG:update NEWS
NOT BUG:update FAQ
NOT BUG:add -trusted_first option and verify flag
NOT BUG:tidy verify code xn not used any more and check for self signed more efficiently
NOT BUG:Experimental support for partial chain verification: if an intermediate certificate is explicitly trusted (using -addtrust option to x509 utility for example) the verification is sucessful even if the chain is not complete
NOT BUG:allow setting of verify names in command line utilities and print out verify names in verify utility
NOT BUG:verify parameter enumeration functions
NOT BUG:Include self-signed flag in certificates by checking SKID/AKID as well as issuer and subject names Although this is an incompatible change it should have little impact in pratice because self-issued certificates that are not self-signed are rarely encountered
NOT BUG:add anyExtendedKeyUsage OID
NOT BUG:prevent warning
NOT BUG:Reserve for option to implement AES counter in assembler
NOT BUG:Add AES counter mode to EVP
NOT BUG:Add assigned OIDs as well as "anonymous" ones for AES counter mode
NOT BUG:The meaning of the X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY and X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT error codes were reversed in the verify application documentation
NOT BUG:Always check bn_wexpend() return values for failure (CVE-2009-3245)
NOT BUG:(The CHANGES entry covers the change from PR #2111 as well submitted by Martin Olsson.)
BUG:Submitted by: Neel Mehta
NOT BUG:Fix X509_STORE locking
NOT BUG:clarify documentation
NOT BUG:OR default SSL_OP_LEGACY_SERVER_CONNECT so existing options are preserved
NOT BUG:Allow renegotiation if SSL_OP_LEGACY_SERVER_CONNECT is set as well as initial connection to unpatched servers There are no additional security concerns in doing this as clients don't see renegotiation during an attack anyway
NOT BUG:PR: 2100 Submitted by: James Baker <jbaker@tableausoftware.com> et al
NOT BUG:Workaround for slow Heap32Next on some versions of Windows
BUG:Submitted by: Dmitry Ivanov <vonami@gmail.com>
NOT BUG:Don't leave dangling pointers in GOST engine if calls fail
NOT BUG:PR: 2171 Submitted by: Tomas Mraz <tmraz@redhat.com>
NOT BUG:Since SSLv2 doesn't support renegotiation at all don't reject it if legacy renegotiation isn't enabled
NOT BUG:Also can now use SSL2 compatible client hello because RFC5746 supports it
NOT BUG:The "block length" for CFB mode was incorrectly coded as 1 all the time It should be the number of feedback bits expressed in bytes For CFB1 mode set this to 1 by rounding up to the nearest multiple of 8
NOT BUG:Correct ECB mode EVP_CIPHER definition: IV length is 0
NOT BUG:add EVP_CIPH_FLAG_LENGTH_BITS from 0.9.8-stable
BUG:PR: 2164 Submitted by: "Noszticzius Istvan" <inoszticzius@rightnow.com>
NOT BUG:Don't clear the output buffer: ciphers should correctly the same input and output buffers
NOT BUG:update references to new RI RFC
BUG:PR: 2170 Submitted by: Magnus Lilja <lilja.magnus@gmail.com>
NOT BUG:Make -c option in dgst work again
NOT BUG:Fix memory leak in ENGINE autoconfig code Improve error logging
NOT BUG:update year
NOT BUG:Use supplied ENGINE when initialising CMAC Restore pctx setting
NOT BUG:add cvsignore
NOT BUG:Make update
NOT BUG:Make CMAC API similar to HMAC API Add methods for CMAC
NOT BUG:Initial experimental CMAC implementation
NOT BUG:make update
NOT BUG:oops use new value for new flag
NOT BUG:Add missing function EVP_CIPHER_CTX_copy() Current code uses memcpy() to copy an EVP_CIPHER_CTX structure which may have problems with external ENGINEs who need to duplicate internal handles etc
NOT BUG:don't assume 0x is at start of string
NOT BUG:tolerate broken CMS/PKCS7 implementations using signature OID instead of digest
NOT BUG:PR: 2161 Submitted by: Doug Goldstein <cardoe@gentoo.org> Steve
NOT BUG:Make no-dsa no-ecdsa and no-rsa compile again
BUG:PR: 2160 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Make session tickets work with DTLS
BUG:PR: 2159 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Typo in PR#1949 bug oops!
NOT BUG:Typo
NOT BUG:The previous take went wrong try again
NOT BUG:Architecture specific header files need special handling
NOT BUG:If opensslconf.h and buildinf.h are to be in an architecture specific directory place it in the same tree as the other architecture specific things
NOT BUG:typo
NOT BUG:Experimental renegotiation support in s_server test -www server
NOT BUG:In engine_table_select() don't clear out entire error queue: just clear out any we added using ERR_set_mark() and ERR_pop_to_mark() otherwise errors from other sources (e.g SSL library) can be wiped
NOT BUG:oops revert test code accidentally committed
NOT BUG:revert previous change
BUG:reword RI description
NOT BUG:revert wrongly committed test code
NOT BUG:update documentation to reflect new renegotiation options
NOT BUG:Some shells print out the directory name if CDPATH is set breaking the pod2man test Use ./util instead to avoid this
NOT BUG:typo
BUG:PR: 2157 Submitted by: "Green Paul" <Paul.Green@stratus.com>
NOT BUG:Typo
NOT BUG:Have the VMS build system catch up with the 1.0.0-stable branch
NOT BUG:Apparently test/testtsa.com was only half done
NOT BUG:size_t doesn't compare less than zero..
NOT BUG:PR: 1949 Submitted by: steve@openssl.org
NOT BUG:More robust fix and workaround for PR#1949 Don't try to work out if there is any write pending data as this can be unreliable: always flush
BUG:PR: 2138 Submitted by: Kevin Regan <k.regan@f5.com>
NOT BUG:Clear stat structure if -DPURIFY is set to avoid problems on some platforms which include unitialised fields
NOT BUG:Add flags functions which were added to 0.9.8 for fips but not 1.0.0 and later
NOT BUG:OPENSSL_isservice is now defined on all platforms not just WIN32
NOT BUG:export OPENSSL_isservice and make update
NOT BUG:Typo
NOT BUG:parisc-mont.pl: PA-RISC 2.0 code path optimization based on intruction- level profiling data resulted in almost 50% performance improvement PA-RISC 1.1 is also reordered in same manner mostly to be consistent as no gain was observed not on PA-7100LC
BUG:PR: 2149 Submitted by: Douglas Stebila <douglas@stebila.ca>
BUG:Fix wap OIDs
NOT BUG:There's really no need to use $ENV::HOME
NOT BUG:Forgot to correct the definition of __arch in this file Submitted by Steven M Schweda <sms@antinode.info>
NOT BUG:It seems like sslroot: needs to be defined for some tests to work Submitted by Steven M Schweda <sms@antinode.info>
NOT BUG:Compile t1_reneg on VMS as well Submitted by Steven M Schweda <sms@antinode.info>
NOT BUG:A few more macros for long symbols Submitted by Steven M Schweda <sms@antinode.info>
NOT BUG:ia64cpuid.S: OPENSSL_cleanse to accept zero length parameter
BUG:PR: 2153 2125 Submitted by: steve@openssl.org
NOT BUG:The original fix for PR#2125 broke compilation on some Unixware platforms: revert and make conditional on VMS
NOT BUG:pariscid.pl: OPENSSL_cleanse to compile on PA-RISC 2.0W and to accept zero length parameter
NOT BUG:OPENSSL_cleanse to accept zero length parameter [matching C implementation]
NOT BUG:The fix for PR#1949 unfortunately broke cases where the BIO_CTRL_WPENDING ctrl is incorrectly implemented (e.g some versions of Apache) As a workaround call both BIO_CTRL_INFO and BIO_CTRL_WPENDING if it returns zero This should both address the original bug and retain compatibility with the old behaviour
NOT BUG:Tolerate PKCS#8 DSA format with negative private key
NOT BUG:If legacy renegotiation is not permitted then send a fatal alert if a patched server attempts to renegotiate with an unpatched client
NOT BUG:typo
NOT BUG:fix comments
NOT BUG:oops
NOT BUG:update NEWS file
NOT BUG:Update demo
NOT BUG:Support -L options in VC++ link
NOT BUG:rand_win.c: fix time limit logic
NOT BUG:The use of NIDs in the password based encryption table can result in algorithms not found when an application uses PKCS#12 and only calls SSL_library_init() instead of OpenSSL_add_all_algorithms() Simple work around is to add the missing algorithm (40 bit RC2) in SSL_library_init()
BUG:PR: 2141 Submitted by: "NARUSE Yui" <naruse@airemix.jp>
NOT BUG:Remove non-ASCII comment which causes compilation errors on some versions of VC++
BUG:PR: 2144 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Better fix for PR#2144
NOT BUG:Enable PA-RISC assembler in Configure (feedback from PA-RISC 2.0 is still needed)
NOT BUG:x86_64-xlate.pl: refine sign extension logic when handling lea PR: 2094,2095
NOT BUG:rand_win.c: handle GetTickCount wrap-around
NOT BUG:s390x assembler update: add support for run-time facility detection
NOT BUG:apps/speed.c: limit loop counters to 2^31 in order to avoid overflows in performance calculations For the moment there is only one code fast enough to suffer from this: Intel AES-NI engine PR: 2096
NOT BUG:Minor updates to ppccap.c and ppccpuid.pl
NOT BUG:bn_lcl.h: add MIPS III-specific BN_UMULT_LOHI as alternative to porting crypto/bn/asm/mips3.s from IRIX Performance improvement is not as impressive as with complete assembler but still.. it's almost 2.5x [on R5000]
NOT BUG:ia64-mont.pl: add shorter vector support ("shorter" refers to 512 bits and less)
NOT BUG:PR: 2135 Submitted by: Mike Frysinger <vapier@gentoo.org>
NOT BUG:Change missed references to lib to $(LIBDIR)
NOT BUG:PR: 2144 Submitted by: steve@openssl.org
NOT BUG:Fix DTLS connection so new_session is reset if we read second client hello: new_session is used to detect renegotiation
NOT BUG:PR: 2133 Submitted by: steve@openssl.org
NOT BUG:Add missing DTLS state strings
NOT BUG:convert to Unix EOL form
NOT BUG:make update
NOT BUG:PR: 2125 Submitted by: "Alon Bar-Lev" <alon.barlev@gmail.com>
NOT BUG:Fix gcc-aix compilation issue
NOT BUG:Fix version handling so it can cope with a major version >3
NOT BUG:Although it will be many years before TLS v2.0 or later appears old versions of servers have a habit of hanging around for a considerable time so best if we handle this properly now
NOT BUG:Modify compression code so it avoids using ex_data free functions This stops applications that call CRYPTO_free_all_ex_data() prematurely leaking memory
NOT BUG:update and sync ordinals
NOT BUG:PR: 2136 Submitted by: Willy Weisz <weisz@vcpc.univie.ac.at>
NOT BUG:Add options to output hash using older algorithm compatible with OpenSSL versions before 1.0.0
NOT BUG:Simplify RI+SCSV logic:
NOT BUG:1 Send SCSV is not renegotiating never empty RI 2 Send RI if renegotiating
NOT BUG:ia64-mont.pl: addp4 is not needed when referring to stack (this is 32-bit HP-UX thing)
NOT BUG:http://cvs.openssl.org/chngview?cn=19053 made me wonder if bind() and connect() are as finicky as sendto() when it comes to socket address length As it turned out they are therefore the fix Note that you can't reproduce the problem on Linux it was failing on Solaris FreeBSD most likely on more..
BUG:sendto is reportedly picky about destination socket address length PR: 2114 Submitted by: Robin Seggelmann
NOT BUG:Fix compilation on older Linux Linux didn't always have sockaddr_storage not to mention that first sockaddr_storage had __ss_family not ss_family In other words it makes more sense to avoid sockaddr_storage..
NOT BUG:Updates to conform with draft-ietf-tls-renegotiation-03.txt:
NOT BUG:1 Add provisional SCSV value 2 Don't send SCSV and RI at same time 3 Fatal error is SCSV received when renegotiating
NOT BUG:Missing commit from change ofr compress_meth to unsigned
NOT BUG:compress_meth should be unsigned
NOT BUG:ENGINE_load_capi() now exists on all platforms (but no op on non-WIN32)
NOT BUG:ppc64-mont.pl: commentary update
NOT BUG:Add Montgomery multiplication module for IA-64
BUG:PR: 2102 Submitted by: John Fitzgibbon <john_fitzgibbon@yahoo.com>
NOT BUG:Remove duplicate definitions
NOT BUG:Typo
NOT BUG:PR: 2132 Submitted by: steve
NOT BUG:Fix bundled pod2man.pl to handle alternative comment formats
NOT BUG:Remove tabs on blank lines: they produce warnings in pod2man
NOT BUG:Client side compression algorithm sanity checks: ensure old compression algorithm matches current and give error if compression is disabled and server requests it (shouldn't happen unless server is broken)
NOT BUG:Compression handling on session resume was badly broken: it always used compression algorithms in client hello (a legacy from when the compression algorithm wasn't serialized with SSL_SESSION)
NOT BUG:Include CHANGES entry for external cache
NOT BUG:b_sock.c: correct indirect calls on WinSock platforms PR: 2130 Submitted by: Eugeny Gostyukhin
NOT BUG:Adapt mingw config for newer mingw environment Note modified conditional compilation in e_capi.c PR: 2113
NOT BUG:ppccap.c: fix compiler warning and perform sanity check outside signal masking ppc64-mont.pl: clarify comment and fix spelling
NOT BUG:Deploy multilib config-line parameter It was added in February to allow for kind of installation suggested in ticket #2003 from August What it effectively does now is arrange pre-configured default $libdir value Note that it also fixes ENGINESDIR i.e harmonizes it with install path
NOT BUG:PA-RISC assembler: missing symbol and typos
NOT BUG:return v1.1 methods for client/server
NOT BUG:Add simple external session cache to s_server This serialises sessions just like a "real" server making it easier to trace any problems
NOT BUG:Typo
NOT BUG:Update RI to match latest spec
NOT BUG:MCSV is now called SCSV
NOT BUG:Don't send SCSV if renegotiating
NOT BUG:Also note if RI is empty in debug messages
NOT BUG:Update sha512-parisc.pl and add make rules
NOT BUG:Throw in more PA-RISC assembler
NOT BUG:Switch to new uplink assembler
NOT BUG:ppccap.c: tidy up ppc64-mont.pl: missing predicate in commentary
NOT BUG:ppc64-mont.pl: adapt for 32-bit and engage for all builds
BUG:Traditional Yuletide commit ;-)
NOT BUG:Add Triple DES CFB1 and CFB8 to algorithm list and NID translation
NOT BUG:Use properly local variables for thread-safety
NOT BUG:Submitted by: Martin Rex
NOT BUG:Constify crypto/cast
NOT BUG:Constify crypto/cast
NOT BUG:Alert to use is now defined in spec: update code
NOT BUG:PR: 2127 Submitted by: Tomas Mraz <tmraz@redhat.com>
NOT BUG:Check for lookup failures in EVP_PBE_CipherInit()
NOT BUG:New option to enable/disable connection to unpatched servers
NOT BUG:Allow initial connection (but no renegoriation) to servers which don't support RI
NOT BUG:Reorganise RI checking code and handle some missing cases
NOT BUG:Move SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION out of SSL_OP_ALL and move SSL_OP_NO_TLSv1_1
NOT BUG:clarify docs
NOT BUG:Document option clearning functions
NOT BUG:Initial secure renegotiation documentation
NOT BUG:remove DEBUG_UNUSED from config for now
BUG:Check s3 is not NULL
NOT BUG:Add patch to crypto/evp which didn't apply from PR#2124
NOT BUG:Revert lhash patch for PR#2124
BUG:PR: 2124 Submitted by: Jan Pechanec <Jan.Pechanec@Sun.COM>
NOT BUG:Check for memory allocation failures
NOT BUG:Add ctrls to clear options and mode
NOT BUG:Change RI ctrl so it doesn't clash
NOT BUG:Send no_renegotiation alert as required by spec
NOT BUG:Add ctrl and macro so we can determine if peer support secure renegotiation
NOT BUG:Add support for magic cipher suite value (MCSV) Make secure renegotiation work in SSLv3: initial handshake has no extensions but includes MCSV if server indicates RI support then renegotiation handshakes include RI
NOT BUG:NB: current MCSV value is bogus for testing only will be updated when we have an official value
NOT BUG:Change mismatch alerts to handshake_failure as required by spec
NOT BUG:Also have some debugging fprintfs so we can clearly see what is going on if OPENSSL_RI_DEBUG is set
BUG:PR: 2121 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de>
NOT BUG:Add extension support to DTLS code mainly using existing implementation for TLS
NOT BUG:Initial experimental TLSv1.1 support
NOT BUG:PR: 2111 Submitted by: Martin Olsson <molsson@opera.com>
NOT BUG:Check for bn_wexpand errors in bn_mul.c
NOT BUG:Update CHANGES
NOT BUG:Replace the broken SPKAC certification with the correct version
NOT BUG:Check it actually compiles this time ;-)
NOT BUG:PR: 2120 Submitted by: steve@openssl.org
NOT BUG:Initialize fields correctly if pem_str or info are NULL in EVP_PKEY_asn1_new()
NOT BUG:Ooops..
NOT BUG:check DSA_sign() return value properly
NOT BUG:PR: 2115 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:Add Renegotiation extension to DTLS fix DTLS ClientHello processing bug
BUG:PR: 1432 Submitted by: "Andrzej Chmielowiec" <achmielowiec@enigma.com.pl> steve@openssl.org Approved by: steve@openssl.org
BUG:Truncate hash if it is too large: as required by FIPS 186-3
BUG:PR: 2118 Submitted by: Mounir IDRASSI <mounir.idrassi@idrix.net> Approved by: steve@openssl.org
NOT BUG:Check return value of ECDSA_sign() properly
NOT BUG:typo
NOT BUG:bss_dgram.c: re-fix BIO_CTRL_DGRAM_GET_PEER PR: 2110
NOT BUG:Experimental CMS password based recipient Info support
NOT BUG:Make CHANGES in CVS head consistent with the CHANGES files in the branches
NOT BUG:This means that http://www.openssl.org/news/changelog.html will finally describe 0.9.8l
BUG:Add OID for PWRI KEK algorithm
NOT BUG:Add PBKFD2 prototype
NOT BUG:Split PBES2 into cipher and PBKDF2 versions This tidies the code somewhat and is a pre-requisite to adding password based CMS support
NOT BUG:cms-test.pl: use EXE_EXT PR: 2107
NOT BUG:util/pl/VC-32.pl: bufferoverflowu.lib only when actually needed and eliminate duplicate code PR: 2086
NOT BUG:Servers can't end up talking SSLv2 with legacy renegotiation disabled
NOT BUG:Don't use SSLv2 compatible client hello if we don't tolerate legacy renegotiation
NOT BUG:Include a more meaningful error message when rejecting legacy renegotiation
BUG:PR: 2103 Submitted by: Rob Austein <sra@hactrn.net> Approved by: steve@openssl.org
BUG:Initialise atm.flags to 0
NOT BUG:PR: 2101 (additional) Submitted by: Roumen Petrov <openssl@roumenpetrov.info> Approved by: steve@openssl.org
NOT BUG:Another mingw fix
NOT BUG:OPENSSL_ia32cap.pod update
NOT BUG:Add sha512-parisc.pl
NOT BUG:SHA1 assembler show off: minor performance updates and new modules for forgotten CPUs
NOT BUG:sha512.c: there apparently is ILP32 PowerPC platform where it is safe to inline 64-bit assembler instructions Normally it's inappropriate because signalling doesn't preserve upper halves of general purpose registers Meaning that it's only safe if signals are blocked for the time "wide" code executes PR: 1998
NOT BUG:x86_64-xlate.pl: new gas requires sign extention in lea instruction This resolves md5-x86_64.pl and sha1-x86_64.pl bugs but without modifying the code PR: 2094,2095
NOT BUG:x86masm.pl: eliminate linker "multiple sections found with different attributes" warning
BUG:bss_dgram.c: more elegant solution to PR#2069 Use socklen_t heuristic from b_sock.c don't assume that caller always passes pointer to buffer large enough to hold sockaddr_storage PR: 2069
NOT BUG:b_sock.c: fix compiler warning
NOT BUG:aesni-x86.pl: eliminate development comments
NOT BUG:PR: 2101 Submitted by: Doug Kaufman <dkaufman@rahul.net> Approved by: steve@openssl.org
NOT BUG:Fixes for tests in cms-test.pl
BUG:PR: 2088 Submitted by: Aleksey Samsonov <s4ms0n0v@gmail.com> Approved by: steve@openssl.org
NOT BUG:Fix memory leak in d2i_PublicKey()
NOT BUG:set engine to NULL after releasing it
NOT BUG:Update from 1.0.0-stable
NOT BUG:PR: 2098 Submitted by: Corinna Vinschen <vinschen@redhat.com> Approved by: steve@openssl.org
NOT BUG:For Cygwin enable zlib and mdc2 by default
NOT BUG:add missing parts of reneg port fix apps patch
BUG:PR: 1686 Submitted by: Hanno BÃÂ¶ck <hanno@hboeck.de> Approved by: steve@openssl.org
NOT BUG:Create engines dir if it doesn't already exist
NOT BUG:PR: 2091 Submitted by: Martin Kaiser <lists@kaiser.cx> Stephen Henson Approved by: steve@openssl.org
BUG:If an OID has no short name or long name return the numerical representation
NOT BUG:PR: 2090 Submitted by: Martin Kaiser <lists@kaiser.cx> Stephen Henson Approved by: steve@openssl.org
NOT BUG:Improve error checking in asn1_gen.c
NOT BUG:First cut of renegotiation extension (port to HEAD)
NOT BUG:update CHANGES
BUG:make udpate
NOT BUG:Remove BF_PTR2 from configuration: it doesn't improve performance any more and causes gcc warnings about arrays out of range
NOT BUG:If it is a new session don't send the old TLS ticket: send a zero length ticket to request a new session
NOT BUG:Ooops revert committed conflict
NOT BUG:PR: 2089 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:DTLS Fragment size bug fix
NOT BUG:Add missing functions to allow access to newer X509_STORE_CTX status information Add more informative message to verify callback to indicate when CRL path validation is taking place
NOT BUG:Add option to allow in-band CRL loading in verify utility Add function load_crls and tidy up load_certs Remove useless purpose variable from verify utility: now done with args_verify
NOT BUG:Generate stateless session ID just after the ticket is received instead of when a session is loaded This will mean that applications that just hold onto SSL_SESSION structures and never call d2i_SSL_SESSION() will still work
NOT BUG:Move CHANGES entry to 0.9.8l section
BUG:Fix statless session resumption so it can coexist with SNI
NOT BUG:Don't attempt session resumption if no ticket is present and session ID length is zero
NOT BUG:oops!
NOT BUG:PR: 2085 Submitted by: Mike Frysinger <vapier@gentoo.org> Approved by: steve@openssl.org
NOT BUG:Change domd test to match 1.0.0+ version: check $MAKEDEPEND ends in "gcc" to support cross compilers
NOT BUG:Add -no_cache option to s_server
NOT BUG:Don't replace whole AR line
NOT BUG:PR: 2081 Submitted by: Mike Frysinger <vapier@gentoo.org> Approved by: steve@openssl.org
NOT BUG:Respect AR and RANLIB environment variables if set
NOT BUG:PR: 2080 Submitted by: Mike Frysinger <vapier@gentoo.org> Approved by: steve@openssl.org
NOT BUG:Respect MAKE environment variable if set
BUG:PR: 2078 Submitted by: Dale Anderson <dra@redevised.net> Approved by: steve@openssl.org
NOT BUG:Corrections to bn_internal documentation
NOT BUG:Clarification
NOT BUG:Add an FAQ
NOT BUG:If not checking all certificates don't attempt to find a CRL for the leaf certificate of a CRL path
NOT BUG:Need to check <= 0 here
BUG:PR: 2070 Submitted by: Alexander Nikitovskiy <Nikitovski@ya.ru> Approved by: steve@openssl.org
NOT BUG:Fix wrong cast
NOT BUG:make update
NOT BUG:Use new X509_STORE_set_verify_cb function instead of old macro
NOT BUG:take install prefix from the environment
NOT BUG:Document more error codes
NOT BUG:Verification callback functions
NOT BUG:Add "missing" function X509_STORE_set_verify_cb()
NOT BUG:Clarification
NOT BUG:Preliminary documentation for X509_VERIFY_PARAM
NOT BUG:Add docs for X509_STORE_CTX_new() and related functions
NOT BUG:More X509 verification docs
NOT BUG:Typo
NOT BUG:Manual page for X509_verify_cert()
BUG:PR: 2074 Submitted by: Bram Neijt <bneijt@gmail.com> Approved by: steve@openssl.org
BUG:Typo: "contet"
NOT BUG:PR: 2072 Submitted by: Tomas Mraz <tmraz@redhat.com> Approved by: steve@openssl.org
BUG:Avoid potential doublefree and reuse of freed handshake_buffer
NOT BUG:PR: 2073 Submitted by: Tomas Mraz <tmraz@redhat.com> Approved by: steve@openssl.org
NOT BUG:Don't access freed SSL_CTX in SSL_free()
NOT BUG:Fixes to CROSS_COMPILE don't override command line option from environment
NOT BUG:Fix for WIN32 and possibly other platforms which don't define in_port_t
NOT BUG:Update ordinals
BUG:PR: 2069 Submitted by: Michael Tuexen <tuexen@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:IPv6 support for DTLS
NOT BUG:PR: 1847 Submitted by: Tomas Mraz <tmraz@redhat.com> Approved by: steve@openssl.org
NOT BUG:Integrated patches to CA.sh to bring it into line with CA.pl functionality
NOT BUG:Revert extra changes from previous commit
NOT BUG:PR: 2066 Submitted by: Guenter <lists@gknw.net> Approved by: steve@openssl.org
NOT BUG:Add -r option to dgst to produce format compatible with core utilities
NOT BUG:Rename CROSS_COMPILE_PREFIX to CROSS_COMPILE
NOT BUG:Allow uname values to be overridden by the environment
NOT BUG:Allow cross compilation prefix to come from CROSS_COMPILE environment variable
NOT BUG:Combat gcc 4.4.1 aliasing rules
BUG:Fix unitialized warnings
NOT BUG:Fix warnings about ignoring fgets return value
NOT BUG:Prevent ignored return value warning
NOT BUG:Prevent aliasing warning
NOT BUG:Typo
NOT BUG:Yes it is a typo ;-)
BUG:PR: 2061 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org
NOT BUG:Correct i2b_PVK_bio error handling in rsa.c dsa.c
BUG:PR: 2062 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org
NOT BUG:Correct BN_rand error handling in bntest.c
BUG:PR: 2059 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org
NOT BUG:Correct EVP_SealInit error handling in pem_seal.c
BUG:PR: 2056 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org
NOT BUG:Correct BIO_wirte error handling in asn1_par.c
BUG:PR: 2055 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org
NOT BUG:Correct BIO_ctrl error handling in s2_srvr.c
BUG:PR: 2054 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org
NOT BUG:Correct BIO_ctrl error handling
BUG:PR: 2063 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org
NOT BUG:Correct BIO_write error handling in ocsp_prn.c
BUG:PR: 2057 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org
NOT BUG:Correct BIO_write BIO_printf i2a_ASN1_INTEGER and i2a_ASN1_OBJECT error handling in OCSP print routines
BUG:PR: 2058 Submitted by: Julia Lawall <julia@diku.dk> Approved by: steve@openssl.org
NOT BUG:Correct EVP_DigestVerifyFinal error handling
NOT BUG:Change version from 0.9.9 to 1.0.0 in docs
NOT BUG:PR: 2064 728 Submitted by: steve@openssl.org
NOT BUG:Add support for custom headers in OCSP requests
NOT BUG:Free SSL_CTX after BIO
NOT BUG:Fixup sureware ENGINE to handle new RAND_METHOD
NOT BUG:Audit libcrypto for unchecked return values: fix all cases enountered
NOT BUG:Add more return value checking attributes to evp.h and hmac.h
NOT BUG:Add DEBUG_UNUSED to debug-steve* entries
NOT BUG:Add attribute to check if return value of certain functions is incorrectly ignored
BUG:PR: 2050 Submitted by: Michael Tuexen <tuexen@fh-muenster.de> Approved by: steve@openssl.org
BUG:Fix handling of ENOTCONN and EMSGSIZE for dgram BIOs
NOT BUG:PR: 2047 Submitted by: David Lee <live4thee@gmail.com> steve@openssl.org Approved by: steve@openssl.org
NOT BUG:Fix for IPv6 handling in BIO_get_accept_socket()
NOT BUG:Ooops missing close quote
NOT BUG:Don't use __try+__except unless on VC++
NOT BUG:add version info for VC-WIN64I too
NOT BUG:PR: 2048 Submitted by: john blair <mailtome200420032002@yahoo.com> Approved by: steve@openssl.org
NOT BUG:Add version info in VC-WIN64A too
NOT BUG:cmll-x86_64.pl: small buglet in CBC subroutine PR: 2035
NOT BUG:PR: 2039 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:DTLS listen bug fix
BUG:Submitted by: Julia Lawall <julia@diku.dk>
NOT BUG:The functions ENGINE_ctrl() OPENSSL_isservice() EVP_PKEY_sign() CMS_get1_RecipientRequest() and RAND_bytes() can return <=0 on error fix so the return code is checked correctly
BUG:PR: 2023 Submitted by: James Beckett <jmb.openssl@nospam.hackery.net> steve Approved by: steve@openssl.org
NOT BUG:Fix documentation errors in d2i_X509 manual pages
NOT BUG:PR: 2025 Submitted by: Tomas Mraz <tmraz@redhat.com> Approved by: steve@openssl.org
NOT BUG:Constify SSL_CIPHER_description
NOT BUG:PR: 1411 Submitted by: steve@openssl.org
NOT BUG:Allow use of trusted certificates in SSL_CTX_use_chain_file()
NOT BUG:PR: 2038 Submitted by: Artem Chuprina <ran@cryptocom.ru> Approved by: steve@openssl.org
NOT BUG:Avoid double call to BIO_free()
NOT BUG:PR: 2033 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:DTLS listen support
NOT BUG:Add new option --strict-warnings to Configure script This is used to add in devteam warnings into other configurations
NOT BUG:Seed PRNG with DSA and ECDSA digests for additional protection against possible PRNG state duplication
NOT BUG:PR: 2031 Submitted by: steve@openssl.org
NOT BUG:Tolerate application/timestamp-response which some servers send out
NOT BUG:Typo presumably...
NOT BUG:Make update deleting bogus DTLS error code
NOT BUG:PR: 1644 Submitted by: steve@openssl.org
NOT BUG:Fix to make DHparams_dup() et al work in C++
NOT BUG:For 1.0 fix the final argument to ASN1_dup() so it is void * Replace some *_dup macros with functions
NOT BUG:PR: 2028 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:Fix DTLS cookie management bugs
NOT BUG:Correction: salt is now default
NOT BUG:Oops s can be NULL
BUG:PR: 2020 Submitted by: Keith Beckman <kbeckman@mcg.edu> Tomas Mraz <tmraz@redhat.com> Checked by: steve@openssl.org
NOT BUG:Fix improperly capitalized references to WWW::Curl::Easy
NOT BUG:PR: 2029 Submitted by: Tomas Mraz <tmraz@redhat.com> Checked by: steve@openssl.org
NOT BUG:Fix so that the legacy digest EVP_dss1() still works
NOT BUG:PR: 2013 Submitted by: steve@openssl.org
NOT BUG:Include a flag ASN1_STRING_FLAG_MSTRING when a multi string type is created This makes it possible to tell if the underlying type is UTCTime GeneralizedTime or Time when the structure is reused and X509_time_adj_ex() can handle each case in an appropriate manner
NOT BUG:Add error checking to CRL generation in ca utility when nextUpdate is being set
NOT BUG:PR: 2009 Submitted by: "Alexei Khlebnikov" <alexei.khlebnikov@opera.com> Approved by: steve@openssl.org
NOT BUG:Avoid memory leak and fix error reporting in d2i_SSL_SESSION() NB: although the ticket mentions buffer overruns this isn't a security issue because the SSL_SESSION structure is generated internally and it should never be possible to supply its contents from an untrusted application (this would among other things destroy session cache security)
NOT BUG:PR: 2022 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:Fix DTLS record header length bug
NOT BUG:Tidy up and fix verify callbacks to avoid structure dereference use of obsolete functions and enhance to handle new conditions such as policy printing
NOT BUG:Missing break
NOT BUG:PR: 2005 Submitted by: steve@openssl.org
NOT BUG:Some systems have broken IPv6 headers and/or implementations If OPENSSL_USE_IPV6 is set to 0 IPv6 is not used if it is set to 1 it is used and if undefined an attempt is made to detect at compile time by checking if AF_INET6 is set and excluding known problem platforms
NOT BUG:PR: 2006 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:Do not use multiple DTLS records for a single user message
NOT BUG:PR: 2015 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
BUG:Define LIBDIR properly
NOT BUG:sha1-x86* assembler update: F_40_59 and Atom-specific optimizations
NOT BUG:Stop unused variable warning on WIN32 et al
NOT BUG:Use SHA1 and not deprecated MD5 in demos
NOT BUG:Update default dependency flags Make error name discrepancies a fatal error Fix error codes make update
NOT BUG:Enable mdc2 support by default as the patent has now expired
NOT BUG:Update README with bug report and contribution details
NOT BUG:PR: 1997 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:DTLS timeout handling fix
NOT BUG:Typo
NOT BUG:PR: 1999 Submitted by: "Bayram Kurumahmut" <kbayram@ubicom.com> Approved by: steve@openssl.org
NOT BUG:Don't use HAVE_FORK in apps/speed.c it can conflict with configured version
NOT BUG:PR: 2004 Submitted by: Peter Sylvester <peter.sylvester@edelweb.fr> Approved by: steve@openssl.org
BUG:Handle fractional seconds properly in ASN1_GENERALIZEDTIME_print
NOT BUG:PR: 2003 Make it possible to install OpenSSL in directories with name other than "lib" for example "lib64" Based on patch from Jeremy Utley
NOT BUG:Add COMP error strings
NOT BUG:Fix error code
BUG:Reject leading 0x80 in OID subidentifiers
NOT BUG:PR: 2002 Submitted by: Tomas Mraz <tmraz@redhat.com> Obtained from: steve@openssl.org
NOT BUG:Fix bug in libssl and krb5 linking in Makefile.org
NOT BUG:Oops!
NOT BUG:Update from 1.0.0-stable
NOT BUG:PR: 2001 Submitted by: Tomas Mraz <tmraz@redhat.com> Approved by: steve@openssl.org
NOT BUG:Add patch: http://cvs.openssl.org/chngview?cn=14635 which never made it to 1.0.0 HEAD
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Fix warnings
NOT BUG:Update from 0.9.8-stable
NOT BUG:Remove MD2 test from WIN32 as we don't compile it in by default any more
NOT BUG:Fix typos
NOT BUG:New debug targets from 1.0.0-stable
NOT BUG:PR: 1990
NOT BUG:Update from 0.9.8-stable
NOT BUG:Document removal of digest+signature algorithm link
BUG:PR: 1993
NOT BUG:Fix from 0.9.8-stable
NOT BUG:Fix from 0.9.8-stable
NOT BUG:Update from 0.9.8-stable
NOT BUG:Update from 0.9.8-stable
NOT BUG:Update from 0.9.8-stable
NOT BUG:Use correct extension and OSX detection
NOT BUG:Updates from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Updates from 1.0.0-stable
NOT BUG:Updates from 1.0.0-stable
BUG:Document MD2 deprecation
NOT BUG:Update from 1.0.0-stable
NOT BUG:Use new time routines to avoid possible overflow
NOT BUG:Update from 0.9.8-stable
NOT BUG:PR: 1624 Submitted by: "Simon L Nielsen" <simon@FreeBSD.org> Obtained from: steve@openssl.org
NOT BUG:Correct FreeBSD check
NOT BUG:Update from 1.0.0-stable
NOT BUG:Make update
NOT BUG:Delete MD2 from algorithm tables as in 0.9.8-stable However since this is a new branch we can also disable it by default
NOT BUG:Fix warnings
NOT BUG:PR: 1981 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:DTLS record header bugfix
NOT BUG:Upadte from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 0.9.8-stable
NOT BUG:Typo
NOT BUG:Use common verify parameters instead of the small ad-hoc subset in s_client s_server
NOT BUG:Updates from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Allow setting of verify depth in verify parameters (as opposed to the depth implemented using the verify callback)
NOT BUG:Update from 0.9.8-stable
NOT BUG:Fix from 0.9.8-stable
NOT BUG:Update from 0.9.8-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Stop warnings in gcc where "a" is const passed as a non-const argument
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update FAQ with note about online docs
NOT BUG:Initialize outlen
NOT BUG:Add beos as a supported DSO scheme
BUG:Rename asc2uni and uni2asc functions to avoid clashes
NOT BUG:Update from 1.0.0-stable
BUG:PR: 1958 Submitted by: Sean Boudreau <seanb@qnx.com> Approved by: steve@openssl.org
BUG:qnx6 support
NOT BUG:PR: 1956 Submitted by: Guenter <lists@gknw.net> Approved by: steve@openssl.org
NOT BUG:Netware doesn't have strings.h
NOT BUG:Submitted by: Peter Gutmann <pgut001@cs.auckland.ac.nz> Approved by: steve@openssl.org
NOT BUG:Check return values for NULL in case of malloc failure
NOT BUG:PR: 1946 Submitted by: Guenter <lists@gknw.net> Approved by: steve@openssl.org
NOT BUG:Netware header fix
NOT BUG:Submitted by: Artem Chuprina <ran@cryptocom.ru> Reviewed by: steve@openssl.org
NOT BUG:Various GOST ciphersuite and ENGINE fixes Including..
NOT BUG:Allow EVP_PKEY_set_derive_peerkey() in encryption operations
NOT BUG:New flag when certificate verify should be omitted in client key exchange
NOT BUG:Update from 0.9.8-stable
NOT BUG:Fix error codes
NOT BUG:Update from 1.0.0-stable
NOT BUG:PR: 1952 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Reviewed by: steve@openssl.org
NOT BUG:ECDH negotiation bug
NOT BUG:Updates from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:PR: 1946 Submitted by: Guenter <lists@gknw.net> Reviewed by: steve@openssl.org
NOT BUG:Get timeval definition on Netware
NOT BUG:PR: 1938 Submitted by: Mark Phalan <Mark.Phalan@Sun.COM> Reviewed by: steve@openssl.org
NOT BUG:Patch to pem and hmac manual pages NAME sections
NOT BUG:PR: 1945 Submitted by: Guenter <lists@gknw.net> Approved by: steve@openssl.org
NOT BUG:Netware compilation fix for nonexistent header
NOT BUG:Oops update CHANGES entry
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Add ignored FIPS options to evp.h change clashing flag value
NOT BUG:Update from 0.9.8-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Sync ordinals from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Add CHANGES entries from 0.9.8-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Stupid typo
NOT BUG:Fix from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0 stable branch
NOT BUG:PR: 1929 Submitted by: Robin Seggelmann <seggelmann@fh-muenster.de> Approved by: steve@openssl.org
NOT BUG:DTLS MTU bug
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Functional VMS changes submitted by sms@antinode.info (Steven M Schweda) Thank you\! (note: not tested for now a few nightly builds should give indications though)
NOT BUG:Have mkdef.pl also handle VAX and Non-VAX differences for VMS
NOT BUG:Add a comment about libeay.num and ssleay.num
NOT BUG:x86[_64]cpuid.pl: further refine shared cache detection
NOT BUG:Update from stable branch
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from stable branch
NOT BUG:x86cpuid.pl: sync OPENSSL_ia32_cpuid with x86_64cpuid.pl
NOT BUG:x86_64cpuid.pl: refine shared cache detection logic
NOT BUG:x86_64-xlate.pl: small commentary update
NOT BUG:e_padlock.c: fix typo (missing #endif) and switch to __builtin_alloca (with introduction of 64-bit support alloca must be declared and there is no standard way of doing that switching to __bultin_alloca is considered appropriate because code explicitly targets gcc anyway)
NOT BUG:Forgotten comma..
NOT BUG:Typo
NOT BUG:Typo
NOT BUG:Update from 1.0.0-stable branch
NOT BUG:Do not try to link the support file(s) as they aren't a complete engine ;-)
NOT BUG:Make sure the padlock code compiles correctly even on hardware that doesn't have padlocks
NOT BUG:Synchronise VMS with Unixly build
NOT BUG:Fix from 1.0.0-stable
NOT BUG:Move the time fetching code to its own static function and thereby make sure that BOTH instances of said code get the VMS modification
BUG:cryptlib.c: refine logic in OpenSSLDie (addenum to commit#18118)
NOT BUG:libeay.num: add ENGINE_load_aesni
BUG:Avoid double dialogs in OpenSSLDie on Windows
NOT BUG:Make it possible to compile CAPI engine under mingw64
NOT BUG:Make CAPI engine UNICODE aware (it didn't work on Win64)
NOT BUG:eng_aesni.c: win32 fix
NOT BUG:Engage cmll-x86_64.pl in Win64 build and make it compile correctly
NOT BUG:cryptlib.c: eliminate dependency on _strtoui64 older Windows CRT don't have it
NOT BUG:ec_mult.c: fix C4334 win64 compiler warning
NOT BUG:eng_aesni.c: fix assembler declarations
NOT BUG:aesni-x86_64.pl: resolve LNK1223 error
NOT BUG:AES-NI engine jumbo update
NOT BUG:Updates from 1.0.0 stable branch
NOT BUG:Make the NULL definition of OPENSSL_ia32cap_loc() compatible with the declaration in crypto.h
NOT BUG:Typo
NOT BUG:Update from 1.0.0-stable
NOT BUG:Reimplement time check for VMS to mimic the way it's done on Windows Reason: gettimeofday() is deprecated
NOT BUG:Stupid typo
BUG:v3_alt.c: otherName parsing fix
BUG:Submitted by: Love Hörnquist Åstrand
NOT BUG:Update test/test_padlock script
NOT BUG:aesni-x86.pl: fix another typo and add test script
NOT BUG:aesni-x86.pl: fix typos
NOT BUG:Intel AES-NI engine
BUG:Submitted by: Huang Ying
NOT BUG:Add padlock data Redo the loop so it really compiles all objects for one engine then links the engine (until now it still thought every file was an engine of its own...)
NOT BUG:Update from 1.0.0-stable
NOT BUG:e_padlock: add support for x86_64 gcc
NOT BUG:Minor shaX-s390x.pl update
NOT BUG:Improve readability of bio/b_sock.c
NOT BUG:Engage nasm optimizations in Win64 build
NOT BUG:Addenum to commit#18074: Expand OPENSSL_ia32cap to 64 bits
NOT BUG:AESNI perlasm update
NOT BUG:Handle push/pop %rbx in epi/prologue (this is Win64 SEH thing)
NOT BUG:Expand OPENSS_ia32cap to 64 bits
NOT BUG:Add local symbol hacks for OpenVMS
NOT BUG:Cast to avoid signedness confusion
NOT BUG:Include sys/time.h to declare gettimeofday()
NOT BUG:A DTLS1 symbol needs to be chopped off a bit
NOT BUG:Merge from 1.0.0-stable branch
NOT BUG:Updates from 1.0.0-stable branch
NOT BUG:Updates from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Changes from 1.0.0-stable
NOT BUG:Update from 0.9.8-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Updates from 1.0.0-stable
NOT BUG:Camellia update: make it respect NO_[INLINE_]ASM and typo in assembler
NOT BUG:Autogeneration seems to have changed slightly
NOT BUG:Updates from 1.0.0-stable
NOT BUG:Update version info
NOT BUG:Merge from 1.0.0-stable branch
NOT BUG:Update from 1.0.0-stable
NOT BUG:Update from 1.0.0-stable
NOT BUG:Fix from 1.0.0-stable
NOT BUG:Ooops reverse previous patch
NOT BUG:Update from 0.9.8-stable
NOT BUG:Stop warnings
NOT BUG:HEAD is now 1.1.0 The 1.0.0 branch is now OpenSSL_1_0_0-stable
NOT BUG:Update STATUS and NEWS
NOT BUG:Allow use of algorithm and cipher names for dgsts and enc utilities instead of having to manually include each one
NOT BUG:Nothing to see here.. move along...
NOT BUG:Update NEWS file
NOT BUG:Fix typo in CHANGES
NOT BUG:Update from stable branch
NOT BUG:Update CHANGES
NOT BUG:Update FAQ
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Typo in usage message
NOT BUG:Submitted by: Victor B Wagner <vitus@cryptocom.ru> Reviewed by: steve@openssl.org
NOT BUG:Check return codes properly in md BIO and dgst command
NOT BUG:aes-390x.pl: commentary update
NOT BUG:Make SPARC assembler modules *really* Purify-friendly
NOT BUG:Submitted by: "Victor B Wagner" <vitus@cryptocom.ru> Reviewed by: steve@openssl.org
NOT BUG:Update ccgost engine to support parameter files
NOT BUG:Excuse myself from integrating sha1-sparcv9a.pl into build system but make it Purify-friendly..
NOT BUG:Make SPARC assembler Pirify-friendly (Purify can't cope with certain PIC constructs)
NOT BUG:Use OPENSSL_assert() instead of assert
NOT BUG:Use correct ctx name
NOT BUG:Fix from stable branch
NOT BUG:Update from stable branch
BUG:PR: 1864 Submitted by: Ger Hobbelt <ger@hobbelt.com> Reviewed by: steve@openssl.org
NOT BUG:Check return value
NOT BUG:Update from stable branch
NOT BUG:Submitted by: Victor Duchovni <Victor.Duchovni@morganstanley.com> Reviewed by: steve@openssl.org
NOT BUG:Check return value of sk_SSL_COMP_find() properly
BUG:PR: 1862
NOT BUG:Typo
NOT BUG:Update from stable branch
NOT BUG:PR: 1854 Submitted by: Oliver Martin <oliver@volatilevoid.net> Reviewed by: steve@openssl.org
NOT BUG:Support GeneralizedTime in ca utility
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Typo
BUG:Print IPv6 all 0s correctly (Rob Austein)
NOT BUG:Update from stable branch
NOT BUG:Don't ask for -iv for ciphers that need no IV
NOT BUG:Use the right length (reported by Quanhong Wang)
NOT BUG:Submitted by: "Victor B Wagner" <vitus@cryptocom.ru> Approved by: steve
NOT BUG:Recognise "enable-zlib" in mkdef.pl to handle "zlib" option when passed to Configure
NOT BUG:Fix memory leak
NOT BUG:Make STORE an experimental feature
NOT BUG:Make it possible to disable STORE
NOT BUG:Reference bug
BUG:PR: 1778
NOT BUG:Increase default verify depth to 100
NOT BUG:Submitted by: "Victor B Wagner" <vitus@cryptocom.ru> Reviewed by: steve@openssl.org
NOT BUG:Change default Gost parameter set to id_Gost28147_89_CryptoPro_A_ParamSet
NOT BUG:PR: 1843 Use correct array size for SHA1 hash
NOT BUG:Data not initialised Notified by Gerardo Ganis <gerardo.ganis@cern.ch>
NOT BUG:Stop warning about use of *printf() without a format
NOT BUG:Make no-engine work again
NOT BUG:Use new common flags and fix resulting warnings
NOT BUG:PR: 1835 Submitted by: Damien Miller <djm@mindrot.org> Approved by: steve@openssl.org
NOT BUG:Fix various typos
NOT BUG:Return correct exit code
NOT BUG:Avoid leaks in pkcs8 app tidy code up
NOT BUG:rc4-s390x.pl: allow for older assembler and optimize character loop
NOT BUG:RC4 for s390x
NOT BUG:Add error checking to obj_xref.pl and add command line support for data file locations
BUG:Submitted by: Peter Sylvester <Peter.Sylvester@edelweb.fr> Reviewed by: steve
NOT BUG:If tagging is universal and SET or SEQUENCE set constructed bit
NOT BUG:s390x-mont.pl: optimize prologue
NOT BUG:linux-s390x failed link after assembler pack update
NOT BUG:sha1-sparcv9a.pl: fix bug in commentary section
NOT BUG:s390x assembler pack update
NOT BUG:Reserve for "multilib" suffix the one allowing to perform multi-ABI installations It's not enabled in Makefiles yet
NOT BUG:Just to be awkward Ubuntu 8.10 doesn't like _XOPEN_SOURCE_EXTENDED..
NOT BUG:For -hex print just one \n
NOT BUG:-hex option for openssl rand
NOT BUG:PR: 1831 Submitted by: Damien Miller
NOT BUG:Put back a variable deleted by the previous revision but used in the code
NOT BUG:Print out UTF8 and NumericString types in ASN1 parsing utility
NOT BUG:Update from stable branch
NOT BUG:Typo: just copy across an unknown type
BUG:Because DEC C - sorry HP C - is picky about features we need to define _XOPEN_SOURCE_EXTENDED to reach fd_set and timeval types and functionality
NOT BUG:Hopefully resolve signed vs unsigned issue
NOT BUG:Do the Camellia part right
NOT BUG:Synchronise with Unix build
NOT BUG:Allow CC to be overridden
NOT BUG:Update certificate hash line format to handle canonical format and avoid MD5 dependency
NOT BUG:Make PKCS#8 the standard write format for private keys replacing the ancient SSLeay format
NOT BUG:Add CRYPTO_MDEBUG_ABORT to abort() is there are any memory leaks This will cause "make test" failures and make resource leaks more obvious
NOT BUG:Fix warnings properly this time ;-)
NOT BUG:Fix missing prototype warnings then fix different prototype warnings ;-)
NOT BUG:Fix sign-compare warnings
NOT BUG:Add a set of standard gcc warning options which are designed to be the minimum requirement for committed code Added to debug-steve* config targets for now
NOT BUG:Add missing entry
NOT BUG:Updatde from stable branch
NOT BUG:Update FAQ
NOT BUG:Add UltraSPARC VIS-powered SHA1 block procedure
NOT BUG:Fix compilation with -no-comp by adding some more #ifndef OPENSSL_NO_COMP
NOT BUG:Some #include statements were not properly protected This will go unnoted on most systems as openssl/comp.h tends to be installed as a system header file by default but may become visible when cross compiling
NOT BUG:VMS stuff I forgot..
NOT BUG:srvr_ecdh cannot be NULL at this point (Coverity ID 232)
NOT BUG:Makefile.shared: improve portability of commit#17753
BUG:Calculate offset correctly (Coverity ID 233)
NOT BUG:Styling update to makefiles: eliminate redundant pipes
NOT BUG:Document dead code
BUG:Styling update to makefiles: $() to denote make substitutions and $${} - shell ones
NOT BUG:Apparently s->ctx could be NULL (Coverity ID 147)
NOT BUG:Apparently s->ctx could be NULL at this point (see earlier test) (Coverity ID 148)
NOT BUG:If we're going to return errors (no matter how stupid) then we should test for them!
NOT BUG:Make sure a bad parameter to RSA_verify_PKCS1_PSS() doesn't lead to a crash (Coverity ID 135)
NOT BUG:bn_lib.c: [re-]fix Win64 compiler warning
NOT BUG:Fix "possible loss of data" Win64 compiler warnings
NOT BUG:Die earlier if hash is NULL (Coverity IDs 137 & 138)
NOT BUG:Reverse incorrect earlier fix
NOT BUG:Die earlier if we have no hash function
NOT BUG:Add standard .cvsignore file
NOT BUG:Update steve-debug* options
NOT BUG:x86_64-xlate.pl: support for binary constants such as 0b1010101
NOT BUG:Add modes/cts128.c Ciphertext Stealing implementation
NOT BUG:cmll-x86_64.pl: fix bug in cbc tail processing and comply with Win64 ABI spec
BUG:Revisit RT#1801 and complete fix
NOT BUG:Remove dead code (Coverity ID 2)
NOT BUG:Check scalar->d before we use it (in BN_num_bits()) (Coverity ID 129)
NOT BUG:Deal with the unlikely event that EVP_MD_CTX_size() returns an error (Coverity ID 140)
NOT BUG:Handle the unlikely event that BIO_get_mem_data() returns -ve
BUG:More synchronisation with Unix
NOT BUG:Remove misleading dead code Constify (Coverity ID 142)
NOT BUG:!a && !a->b is clearly wrong! Changed to !a || !a->b (Coverity ID 145)
NOT BUG:pval must always be set when pk7_cb() does anything (Coverity ID 146)
NOT BUG:In BIO_write() update the write statistics not the read statistics PR: 1803
BUG:Further synchronisation with Unix
NOT BUG:Windows-specific addenum to "engage crypto/modes" commit #17716
NOT BUG:Patch the omission from prvious commit #17716
NOT BUG:Engage crypto/modes
NOT BUG:crypto/modes: make modes.h selfsufficient and rename block_f to block128_t
NOT BUG:Optimize CAST for size on 64-bit platforms For reference CAST_LONG being unsigned long must be attributed to 16-bit support As we don't support 16-bit platoforms anymore there is no reason to waste twice required space on CAST S-boxes (16KB vs 8KB) or key schedule
NOT BUG:cmll-x86_64.pl: Win64 SEH section to handle pushf/popf in CBC routine
NOT BUG:Optimize #undef DES_UNROLL for size
NOT BUG:Incidentally http://cvs.openssl.org/chngview?cn=17710 also made it possible to build the library without -D_CRT_NONSTDC_NO_DEPRECATE This commit expands it even to apps catalog and actually omits the macro in question from Configure
NOT BUG:This _WIN32-specific patch makes it possible to "wrap" OpenSSL in another .DLL in particular static build The issue has been discussed in RT#1230 and later on openssl-dev and mutually exclusive approaches were suggested This completes compromise solution suggested in RT#1230 PR: 1230
NOT BUG:Make no-engine work again
NOT BUG:make depend to work with cross-gcc compensate for msys glitch PR: 1753 Submitted by: Alon Bar-Lev
NOT BUG:cmll-x86_64.pl: bug fix and size optimization of Win64 SEH section
NOT BUG:x86_64 assembler pack: add support for Win64 SEH
NOT BUG:x86_64-xlate.pl: fix masm hexadecimal constants
NOT BUG:perlasm/x86* update: support for 3 and 4 argument instructions
NOT BUG:SEGV in AES_cbc_encrypt in aes-x86_64 assembler module PR: 1801 Submitted by: Huang Ying
NOT BUG:Constify where needed
BUG:Remove extraneous semicolons
NOT BUG:Stack changes made dso_vms.c not compile properly
NOT BUG:A few more symbols that are a little bit long for VMS
NOT BUG:Synchronise VMS build system with the Unixly one
NOT BUG:128-bit block cipher modes consolidation As consolidated functions rely on indirect call to block functions they are not as fast as non-consolidated routines However performance loss(*) is within measurement error and consolidation advantages are considered to outweigh it
NOT BUG:(*) actually one can observe performance *improvement* on e.g CBC benchmarks thanks to optimization which also becomes shared among ciphers
NOT BUG:SEED to support OPENSSL_SMALL_FOOTPRINT: ~2x size decrease on x86
NOT BUG:Bring C bn_mul_mont template closer to assembler
NOT BUG:no-asm didn't exclude Camellia assembler
NOT BUG:Back out pointless change
NOT BUG:*** empty log message ***
NOT BUG:Return error if DH_new() fails (Coverity ID 150)
NOT BUG:Check for NULL before use (Coverity ID 203)
NOT BUG:Missing return values (Coverity ID 204)
NOT BUG:Fix from stable branch
NOT BUG:apps/speed.c: children should not inherit buffered I/O PR: 1787 Submitted by: Artur Klauser <aklauser@google.com>
NOT BUG:Oops should check zero_pos >= 0
NOT BUG:Handle case where v6stat.zero_pos == 0 correctly
NOT BUG:Reported by: Kurt Roeckx <kurt@roeckx.be> Tobias Ginzler <ginzler@fgan.de> (Debian bug #506111)
NOT BUG:Add Camellia assembler x86 and x86_64 modules
NOT BUG:experimental-foo support for mk1mf.pl
NOT BUG:Implement Configure option pattern "experimental-foo" (specifically "experimental-jpake")
NOT BUG:Don't stop -cipher from working
NOT BUG:Update from stable branch
NOT BUG:Fix compilation with -DOPENSSL_NO_DEPRECATED
NOT BUG:Clarify a 'chil' engine param that is a little unintuitive
NOT BUG:Submitted by: Sander Temme <sander@temme.net>
NOT BUG:Update libeay.num
NOT BUG:Stop warning about different const qualifiers
NOT BUG:Update from stable-branch
NOT BUG:Set memory BIOs up properly when stripping text headers from S/MIME messages
NOT BUG:Allow the CHIL engine to load even if dynamic locks aren't registered
NOT BUG:Submitted by: Sander Temme
NOT BUG:Integrate J-PAKE and TLS-PSK Increase PSK buffer size Fix memory leaks
NOT BUG:Ignore generated ASM
NOT BUG:Don't disable JPAKE by default in head..
BUG:PR: 1574 Submitted by: Jouni Malinen <j@w1.fi> Approved by: steve@openssl.org
NOT BUG:Ticket override support for EAP-FAST
NOT BUG:x86_64-xlate.pl update engage x86_64 assembler in mingw64
BUG:warnings (mostly)
BUG:Aftermath of a clashing size_t fix (now only format changes)
NOT BUG:Ignore saved Makefile
NOT BUG:J-PAKE is not experimental in HEAD
NOT BUG:Oops..
NOT BUG:mk1mf.pl update from stable branch
NOT BUG:Revert another size_t change
NOT BUG:Update from stable branch
NOT BUG:Reinstate camellia header fix patch
NOT BUG:Configure update: clean-ups and most notably engage x86_64 assembler on MacOS X
NOT BUG:Update make rules for x86_64 assembler pack
NOT BUG:x86_64 assembler pack to comply with updated styling x86_64-xlate.pl rules
NOT BUG:x86_64-xlate.pl to support MacOS X and mingw64
NOT BUG:Revert commit #17603 it should have been part of #17617
NOT BUG:Revert the size_t modifications from HEAD that had led to more knock-on work than expected - they've been extracted into a patch series that can be completed elsewhere or in a different branch before merging back to HEAD
NOT BUG:Tolerate -----BEGIN PKCS #7 SIGNED DATA----- header lines as used by some implementations
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:symbol deobnoxification
NOT BUG:Make -DKSSL_DEBUG work again
NOT BUG:Clarify (non-)blocking behavior of EGD socket interface used by RAND_egd()
NOT BUG:PR: 1777 Submitted by: "Alon Bar-Lev" <alon.barlev@gmail.com> Approved by: steve@openssl.org
NOT BUG:Fix some size_t issues
NOT BUG:Update obsolete email address..
NOT BUG:Don't use clobbered 'i' for checking UTCTime and GeneralizedTime length
NOT BUG:Only one of these needs to be signed
NOT BUG:Formatting
NOT BUG:Add initial support for mingw64 PR: 1693 Submitted by: Alon Bar-Lev
NOT BUG:Minor perlasm updates
NOT BUG:Not sure about this one.. seems to be needed to make 64 bit release builds work properly..
NOT BUG:Fix prototypes
NOT BUG:Use stddef.h to pick up size_t def
NOT BUG:Fix prototypes
NOT BUG:Update HMAC functions to return an error where relevant
NOT BUG:Fix warnings: printf format mismatches on 64 bit platforms Change assert to OPENSSL_assert() Fix e_padlock prototype
NOT BUG:Fix asserts Fix incorrect dependency
NOT BUG:Fix warnings about mismatched prototypes undefined size_t and value computed not used
NOT BUG:Fix warnings
NOT BUG:Fix warning
NOT BUG:Fix bss_log.c on Windows
BUG:More size_tification
BUG:size_tification
NOT BUG:Fix SHA512 and optimize BN for mingw64
NOT BUG:Fix warnings after commit#17578
NOT BUG:size_t-fy EVP_CIPHER Note that being size_t-fied it doesn't require underlying cipher to be size_t-fied it allows for size_t signed and unsigned long It maintains source and even binary compatibility
NOT BUG:size_t-fy AES Camellia and RC4
NOT BUG:Add install target to crypto/jpake/Makefile
NOT BUG:Fix warning
NOT BUG:randfile.c: .rnd can become orphaned on VMS
NOT BUG:Submitted by: David North
NOT BUG:.cvsignore update: ignore all flavors of shared objects
NOT BUG:Fix typo in ./config
NOT BUG:Submitted by: Sander Temme
NOT BUG:ec2_mult.c readability update
NOT BUG:Minor clean-up in bn_lib.c: constification and optimization
NOT BUG:Fix crash in BN_rshift PR: 1663
NOT BUG:Harmonize Camellia API with version 1.x
BUG:Camellia update Quoting camellia.c:
NOT BUG:/* * This release balances code size and performance In particular key * schedule setup is fully unrolled because doing so *significantly* * reduces amount of instructions per setup round and code increase is * justifiable In block functions on the other hand only inner loops * are unrolled as full unroll gives only nominal performance boost * while code size grows 4 or 7 times Also unlike previous versions * this one "encourages" compiler to keep intermediate variables in * registers which should give better "all round" results in other * words reasonable performance even with not so modern compilers */
NOT BUG:x86_64-xlate.pl update: refine SEH support
NOT BUG:Win32 fixes.. add new directory to build system Fix warnings
NOT BUG:Fix warnings and various issues
NOT BUG:C++ style comments Signed/unsigned warning in apps.c Missing targets in jpake/Makefile
NOT BUG:Add JPAKE
NOT BUG:Add support for -crlnumber option in crl utility
NOT BUG:Add permanentIdentifier OID
NOT BUG:Create function of the form OBJ_bsearch_xxx() in bsearch typesafe macros with the appropriate parameters which calls OBJ_bsearch() A compiler will typically inline this
NOT BUG:This avoids the need for cmp_xxx variables and fixes unchecked const issues with CHECKED_PTR_OF()
BUG:Apparently '__top' is also risky obfuscate further (All this to avoid inlines...)
BUG:Allow detection of input EOF in quiet mode by adding -no_ign_eof option to s_client application PR: #1761 Submitted by: David Woodhouse <dwmw2@infradead.org>
NOT BUG:Use of a 'top' var creates "shadow variable" warnings
NOT BUG:Reinstate obj_xref.h as it is not auto generated on all platforms
NOT BUG:Fix a shed load or warnings:
NOT BUG:Duplicate const Use of ; outside function
NOT BUG:Add missing "-d" to option list of openssl version
BUG:Submitted by: Alex Chen <alex_chen@filemaker.com>
NOT BUG:Constification
NOT BUG:Fix Warning..
NOT BUG:Fix multiple ; warning
NOT BUG:Fix warning a different way
NOT BUG:Fix argument order in BN_nnmod call and implement rigorous boundary condition check
NOT BUG:Optimize bn_correct_top
NOT BUG:Remove redundant BN_ucmp fix boundary condition in BN_nist_mod_224 and reimplement BN_nist_mod_521
NOT BUG:Set comparison function in v3_add_canonize()
BUG:Add XMPP STARTTLS support
NOT BUG:Ooops.. remove code accidentally commited from FIPS version
NOT BUG:Add missing lock definitions..
NOT BUG:Add missing lock definitions
NOT BUG:Type-safe OBJ_bsearch_ex
NOT BUG:Remove the DTLS1_BAD_VER thing from 0.9.9-dev It is present in 0.9.8 but has been omitted from HEAD (0.9.9) see commit http://cvs.openssl.org/chngview?cn=16627 by appro
BUG:Half of the commit for 0.9.8 as the bitmap handling has changed (Firstly.. ommitted)
BUG:Secondly it wasn't even _dropping_ the offending packets in the non-blocking case It was just returning garbage instead PR: #1752 Submitted by: David Woodhouse <dwmw2@infradead.org>
NOT BUG:Type-checked (and modern C compliant) OBJ_bsearch
NOT BUG:Add missing DTLS1_BAD_VER (hope I got the value right)
NOT BUG:When the underlying BIO_write() fails to send a datagram we leave the offending record queued as 'pending' The DTLS code doesn't expect this and we end up hitting an OPENSSL_assert() in do_dtls1_write()
BUG:The simple fix is just _not_ to leave it queued In DTLS dropping packets is perfectly acceptable -- and even preferable If we wanted a service with retries and guaranteed delivery we'd be using TCP PR: #1703 Submitted by: David Woodhouse <dwmw2@infradead.org>
NOT BUG:Experimental new date handling routines These fix issues with X509_time_adj() and should avoid any OS date limitations such as the year 2038 bug
NOT BUG:Fix incorrect command for assember file generation on IA64
NOT BUG:Submitted by: Amadeu A Barbosa Jr <amadeu@tecgraf.puc-rio.br>
NOT BUG:Fix EC_KEY_check_key
NOT BUG:Make sure that SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG can't enable disabled ciphersuites
NOT BUG:From branch OpenSSL_0_9_8-stable: Allow soft-loading engines
NOT BUG:Also fix CHANGES (consistency with stable branch)
NOT BUG:Add missing CHANGES entry
NOT BUG:from 0.9.8 branch
NOT BUG:Update FAQ
NOT BUG:Fix yesterday typos in bss_dgram.c
NOT BUG:Fix build warnings
NOT BUG:update comment
NOT BUG:Winsock handles SO_RCVTIMEO in unique manner.. PR: 1648
NOT BUG:oops
NOT BUG:dtls1_write_bytes consumers expect amount of bytes written per call not overall PR: 1604
NOT BUG:Fix SSL state transitions
BUG:Submitted by: Nagendra Modadugu
NOT BUG:Note about CVS branch inconsistency
NOT BUG:Really get rid of unsafe double-checked locking
NOT BUG:Also "CHANGES" clean-ups
NOT BUG:Some precautions to avoid potential security-relevant problems
NOT BUG:DTLS didn't handle alerts correctly PR: 1632
NOT BUG:AIX build updates
NOT BUG:Add SSL_FIPS flag for FIPS 140-2 approved ciphersuites and add a new strength "FIPS" to represent all FIPS approved ciphersuites without NULL encryption
NOT BUG:Ignoring errors in makedepend can hide problems
NOT BUG:Fix warning
NOT BUG:Fix from stable branch
NOT BUG:Do not discard cached handshake records during resumed sessions: they are used for mac computation
NOT BUG:Make no-tlsext compile
NOT BUG:Perl script to run and verify OpenSSL against PKITS RFC3280 compliance test suite
NOT BUG:Initial support for delta CRLs If "use deltas" flag is set attempt to find a delta CRL in addition to a full CRL Check and search delta in addition to the base
NOT BUG:Add support for CRLs partitioned by reason code
NOT BUG:Tidy CRL scoring system
NOT BUG:Add new CRL path validation error
NOT BUG:Add support for freshest CRL extension
NOT BUG:Initial indirect CRL support
NOT BUG:Support for certificateIssuer CRL entry extension
NOT BUG:Don't use assertions to check application-provided arguments; and don't unnecessarily fail on input size 0
NOT BUG:sanity check
NOT BUG:PR: 1679
NOT BUG:fix error function codes
BUG:Mention ERR_remove_state() deprecation and ERR_remove_thread_state(NULL)
NOT BUG:Initial support for CRL path validation This supports distinct certificate and CRL signing keys
NOT BUG:Initial code to support distinct certificate and CRL signing keys where the CRL issuer is not part of the main path
NOT BUG:Not complete yet and not compiled in because the CRL issuer certificate is not validated
NOT BUG:Support for policy mappings extension
NOT BUG:Delete X509_POLICY_REF code
NOT BUG:Fix handling of invalid policy extensions to return the correct error
NOT BUG:Add command line option to inhibit policy mappings
NOT BUG:Initial support for name constraints certificate extension
NOT BUG:TODO: robustness checking on name forms
NOT BUG:Correct the FAQ and the threads man page re: CRYPTO_THREADID changes
NOT BUG:Remove the dual-callback scheme for numeric and pointer thread IDs deprecate the original (numeric-only) scheme and replace with the CRYPTO_THREADID object This hides the platform-specifics and should reduce the possibility for programming errors (where failing to explicitly check both thread ID forms could create subtle platform-specific bugs)
NOT BUG:Thanks to Bodo for invaluable review and feedback
NOT BUG:sha1-armv4-large cosmetics
NOT BUG:sha1-armv4-large.pl performance improvement On PXA255 it gives +10% on 8KB block +60% on 1KB +160% on 256B..
NOT BUG:Fix signed/unsigned warning
NOT BUG:Correctly handle errors in CMS I/O code
NOT BUG:Fix error codes for memory-saving patch
NOT BUG:Also get rid of compile-time switch OPENSSL_NO_RELEASE_BUFFERS because it was rather pointless (the new behavior has to be explicitly requested by setting SSL_MODE_RELEASE_BUFFERS anyway)
NOT BUG:Add support for nameRelativeToCRLIssuer field in distribution point name fields
NOT BUG:Make explicit_policy handling match expected RFC3280 behaviour
NOT BUG:Refer to SSL_pending from the man page for SSL_read
NOT BUG:Initial support for alternative CRL issuing certificates
NOT BUG:Allow inibit any policy flag to be set in apps
NOT BUG:Policy validation fixes
NOT BUG:Inhibit any policy count should ignore self issued certificates Require explicit policy is the number certificate before an explict policy is required
NOT BUG:remove a doubled entry for '-binary' in the usage message
NOT BUG:Split ms/uplink.pl to corresponding platform versions
NOT BUG:perlasm update: implement dataseg directive
NOT BUG:x86_64-xlate.pl: implement indirect jump/calls support for Win64 SEH
NOT BUG:We should check the eight bytes starting at p[-9] for rollback attack detection or the probability for an erroneous RSA_R_SSLV3_ROLLBACK_ATTACK will be larger than necessary
NOT BUG:PR: 1695
NOT BUG:mem_dbg.c: avoid compiler warnings PR: 1693 Submitted by: Stefan Neis
NOT BUG:Remove junk argument to function_begin in sha/asm/*-586.pl PR: 1681
NOT BUG:x86masm.pl: harmonize functions' alignment
NOT BUG:Make sure not to read beyond end of buffer
NOT BUG:x86_64cpuid.pl cosmetics: harmonize $dir treatment with other modules
NOT BUG:des-596.pl update: short-circuit reference to DES_SPtrans
NOT BUG:x86masm.pl cosmetics
NOT BUG:x86nasm.pl update: use pre-defined macros and allow for /safeseh link
NOT BUG:Reaffirm that NASM is the only supported assembler for Win32 build
NOT BUG:Zero is a valid value for any_skip and map_skip
NOT BUG:We support inhibit any policy extension add to table
NOT BUG:X509 verification fixes
NOT BUG:Ignore self issued certificates when checking path length constraints
NOT BUG:Duplicate OIDs in policy tree in case they are allocated
NOT BUG:Use anyPolicy from certificate cache and not current tree level
NOT BUG:If --prefix="C:\foo\bar" is supplied to Configure for a windows target then the backslashes need escaping to avoid being treated as switches in the auto-generated strings in opensslconf.h Perl users are welcome to suggest a less hokey way of doing this ..
NOT BUG:Avoid warnings with -pedantic specifically:
NOT BUG:Conversion between void * and function pointer Value computed not used Signed/unsigned argument
NOT BUG:Revert my earlier CRYPTO_THREADID commit I will commit a reworked version some time soon
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:avoid potential infinite loop in final reduction round of BN_GF2m_mod_arr()
BUG:Submitted by: Huang Ying Reviewed by: Douglas Stebila
NOT BUG:Update ordinals
NOT BUG:Fix from stable branch
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Add acknowledgement
NOT BUG:Sync ordinals
NOT BUG:Fix memory leak The canonical X509_NAME_ENTRY STACK is reallocated rather than referencing existing X509_NAME_ENTRY structures so needs to be completely freed
NOT BUG:Remove uidlg library from VC-32.pl it is now bound at runtime
NOT BUG:Don't change _WIN32_WINNT and detect GetConsoleWindow() and CryptUIDlgSelectCertificateFromStore() at runtime Add callback function for selection mechanism
NOT BUG:Update from stable branch
NOT BUG:Update CHANGES
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Sync ordinals with stable branch
NOT BUG:Link in extra CryptoAPI related libraries if needed
NOT BUG:Update from stable branch
NOT BUG:Remove test fprintf
NOT BUG:Compilation option to use a specific ssl client auth engine automatically
NOT BUG:Use an appropriate Window for selection dialog
NOT BUG:Add support for Windoes dialog box based certificate selection
NOT BUG:Remove old non-safestack code
NOT BUG:Tidy up and add comments to selection code
NOT BUG:Make DSO WIN32 compile again
NOT BUG:Update ordinals
NOT BUG:Remove store from Windows build
NOT BUG:More type-checking
NOT BUG:Avoid name clash
NOT BUG:Only include windows headers when under windows
NOT BUG:Add initial support for multiple SSL client certifcate selection in CryptoAPI ENGINE
NOT BUG:Match empty CA list to anything for ssl client auth in CryptoAPI engine
NOT BUG:Add support for client cert engine setting in s_client app Add appropriate #ifdefs round client cert functions in headers
NOT BUG:Add preliminary SSL client auth callback to CryptoAPI ENGINE
NOT BUG:Prevent signed/unsigned warning on VC++
NOT BUG:Memory saving patch
NOT BUG:Update year
NOT BUG:Windows batch file to rebuild error codes for CryptoAPI ENGINE
NOT BUG:#undef OCSP_RESPONSE: CryptoAPI uses this too
NOT BUG:Fix indentation
NOT BUG:Avoid case in ca.c fix
NOT BUG:Revert doesn't fix warning :-(
NOT BUG:Avoid cast with wrapper function
NOT BUG:Free old store name (if any)
NOT BUG:Add ctrl for alternative certificate store names
BUG:Use keyspec for DSA too
NOT BUG:Get and note keyspec when signing
NOT BUG:Release engine reference when calling SSL_CTX_free()
NOT BUG:Allow ENGINE client cert callback to specify a set of other certs for the rest of the certificate chain Currently unused
NOT BUG:Update error codes
NOT BUG:Add client cert engine to SSL routines
NOT BUG:Update error codes move typedef of SSL SSL_CTX to ossl_typ.h
NOT BUG:Add support for ENGINE supplied SSL client auth
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Update VC-32.pl and load CryptoAPI engine in the right place
NOT BUG:More CryptoAPI engine code from stable branch
NOT BUG:Add CryptoAPI error file too
NOT BUG:Add CryptoAPI ENGINE from stable branch
NOT BUG:Recognize LHASH_OF()
NOT BUG:Stop const mismatch warning
NOT BUG:Stop warning about extra ';' outside of function
NOT BUG:Stop const mismatch warning in VC++
NOT BUG:Everyone's had a few years to port their favorite additions to 0.9.7 to HEAD (and the 0.9.8 branch) Remove the reminder
NOT BUG:Fix from stable branch
NOT BUG:sync with 0.9.8 branch
NOT BUG:From HEAD:
NOT BUG:Fix flaw if 'Server Key exchange message' is omitted from a TLS handshake which could lead to a cilent crash as found using the Codenomicon TLS test suite (CVE-2008-1672)
NOT BUG:Reviewed by: openssl-security@openssl.org
NOT BUG:Obtained from: mark@awe.com
NOT BUG:From HEAD:
NOT BUG:Fix double-free in TLS server name extensions which could lead to a remote crash found by Codenomicon TLS test suite (CVE-2008-0891)
NOT BUG:Reviewed by: openssl-security@openssl.org
NOT BUG:Obtained from: jorton@redhat.com
NOT BUG:grammar
NOT BUG:year 2008
NOT BUG:Avoid "duplicate const" warnings
NOT BUG:Avoid warning about empty structures and always define CHECKED_PTR_OF
NOT BUG:C++ style comments fixed
NOT BUG:LHASH revamp make depend
NOT BUG:Add README about removed root CA certificates
BUG:Reword comment to be much shorter to stop other people from complaining about "overcommenting"
NOT BUG:Clear error queue when starting SSL_CTX_use_certificate_chain_file PR: 1417 1513 Submitted by: Erik de Castro Lopo <mle+openssl@mega-nerd.com>
NOT BUG:Remove all root CA files (beyond test CAs including private key) from the OpenSSL distribution
NOT BUG:Typo
NOT BUG:Typo
NOT BUG:Update ordinals
NOT BUG:Update from stable branch
NOT BUG:Fix from stable branch
NOT BUG:Correctly adjust location of comment
NOT BUG:Submitted by: Ben Laurie <ben@links.org>
NOT BUG:Fix two invalid memory reads in RSA OAEP mode Submitted by: Ivan Nestlerode <inestlerode@us.ibm.com> Reviewed by: steve
BUG:Change use of CRYPTO_THREADID so that we always use both the ulong and ptr members
BUG:(So if the id_callback is bogus we still have &errno.)
NOT BUG:Disable code that clearly doesn't currently serve any useful purpose (Buggy line reported by Matthias Koenig.)
NOT BUG:Document "openssl s_server" -crl_check* options
NOT BUG:Submitted by: Daniel Black <daniel.subs@internode.on.net>
NOT BUG:Provide information about "openssl dgst" -hmac option
NOT BUG:Typo (From 0.9.8-stable/S Henson) PR: 1672
BUG:Another occurance of possible valgrind/purify "uninitialized memory" complaint related to the PRNG: with PURIFY policy don't feed uninitialized memory into the PRNG
NOT BUG:Submitted by: Bodo Moeller <bmoeller@openssl.org> :-)
NOT BUG:Fix from stable branch
NOT BUG:Add missing cast
BUG:Depict future Win64/x64 development
NOT BUG:Clarifying comment
NOT BUG:New function CMS_add1_crl()
NOT BUG:Indicate support for digest init ctrl
NOT BUG:Typo
NOT BUG:Use "cont" consistently in cms-examples.pl
NOT BUG:Add a -certsout option to output any certificates in a message
NOT BUG:Add test for example 4.11
NOT BUG:Montgomery-related minor cleanups/documentation
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Oops!
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Fix auto-discovery of ENGINEs See the CHANGES entry for details (and/or ticket #1668)
NOT BUG:PR: 1668 Submitted by: Ian Lister Reviewed by: Geoff Thorpe
BUG:Paul Sheer optimised the OpenSSL to/from libGMP conversions for the case where they both use the same limb size I've tweaked his patch slightly so blame me if it breaks
NOT BUG:Submitted by: Paul Sheer Reviewed by: Geoff Thorpe
NOT BUG:Don't send zero length session ID if stateless session resupmtion is successful Check be seeing if there is a cache hit
NOT BUG:Disable debugging fprintf
NOT BUG:Add 64-bit support to BN_nist_mod_244 and engage BN_nist_mod_* on 64-bit platforms
NOT BUG:Compensate inline assembler in sha512.c for gcc 2.7.2 compiler bug PR: 1667
NOT BUG:Takanori Yanagisawa has shown how to correctly use pre-computed values So in a sense this commit reverts few latest ones fixing bugs in original code and improving it most notably adding 64-bit support [though not in BN_nist_mod_224 yet] PR: 1593
NOT BUG:Resolve __DECC warning and keep disclaiming support for 16-bit platforms
NOT BUG:Fix remaining BN_nist_mod_* PR: 1593
NOT BUG:Make certs argument work in CMS_sign() add test case PR:1664
NOT BUG:Add missing 'extern "C" {' to some _err.h files in crypto/engines/ PR: 1609
NOT BUG:Another minor update from the mingw development PR: 1552 Submitted by: Roumen Petrov <openssl@roumenpetrov.info>
NOT BUG:Synchronise with Unix
NOT BUG:Fix incorrect return value in apps/apps.c:parse_yesno() PR: 1607 Submitted by: "Christophe MacÃ©" <mace.christophe@gmail.com>
NOT BUG:Correctly handle case of bad arguments supplied to rsautl PR: 1659
NOT BUG:Apply mingw patches as supplied by Roumen Petrov an Alon Bar-Lev PR: 1552 Submitted by: Roumen Petrov <openssl@roumenpetrov.info> "Alon Bar-Lev" <alon.barlev@gmail.com>
BUG:Further synchronisation with Unix build I hadn't noticed pq_compat.h was gone..
NOT BUG:Provide other forms for symbols that are too long or that clash with others
NOT BUG:Detached encrypt/decrypt example fix decrypt sample
NOT BUG:Correct argument order for CMS_decrypt() in docs
NOT BUG:Fix prototype for CMS_decrypt() don't free up detached content
NOT BUG:Revert argument swap change.. oops CMS_uncompress() was consistent..
NOT BUG:Fix comments
NOT BUG:Make CMS_uncompress() argument order consistent with other functions
NOT BUG:CMS compressed data examples
NOT BUG:Fix for compression and updated CMS_final()
NOT BUG:PKCS#7 examples converted to CMS
NOT BUG:Synchronise with Unix build
NOT BUG:Reformat fix typos and clarify CMS API docs
NOT BUG:Correct HISTORY reference
NOT BUG:Typo
NOT BUG:Add docs for CMS_final() and BIO_new_CMS()
NOT BUG:Add additional parameter to CMS_final() to handle detached content
BUG:Ignore nonsensical flags for signed receipts
NOT BUG:Add CMS signed receipt genration and verification docs
NOT BUG:Spellcheck CMS docs
NOT BUG:Signed receipt request function documentation
NOT BUG:Correct references to smime in cms app
NOT BUG:Update docs
NOT BUG:Add CMS_uncompress manual page
NOT BUG:Add CMS_compress() docs
NOT BUG:More CMS API documentation
NOT BUG:Clarifying comment
NOT BUG:Do BN_nist_mod_384 by the book as cheating doesn't work Other functions will be revised too PR: 1593
NOT BUG:Fix various typos update SMIMECapabilities description
NOT BUG:Correct d2i/i2d typos
NOT BUG:Initial CMS API documentation
NOT BUG:Implement CMS_NOCRL
BUG:Fix URI of OpenSSL Request Tracker information PR: 1661
NOT BUG:Set contentType attribute just before signing to allow encapsulated content type to be set at any time in applications
NOT BUG:Fix typo and add header files to err library
NOT BUG:Give consistent return value and add error code for duplicate certificates
NOT BUG:Delete nonexistant function from pkcs7.h header file WIN32 build fix from stable branch Sync and update ordinals
NOT BUG:Make mk1mf.pl recognize no-cms
NOT BUG:Rename runex.pl to cms-examples.pl
NOT BUG:Update CHANGES
NOT BUG:Update CHANGES
NOT BUG:Since OID NIDs with 0.9.8
NOT BUG:Avoid warnings
NOT BUG:Add signed receipt tests
NOT BUG:Fix fast reduction on NIST curves (as well BN_NIST_ADD_ONE macro) PR: 1593
NOT BUG:Fix it properly this time...
NOT BUG:Fix macro
NOT BUG:Use correct headers for signed receipts Use consistent naming
NOT BUG:Update cms-test.pl to support OpenSSL 0.9.8
NOT BUG:Update dependencies
NOT BUG:Remove unnecessary header
NOT BUG:Update docs
NOT BUG:Signed receipt generation code
NOT BUG:Support for verification of signed receipts
NOT BUG:There was a need to support thread ID types that couldn't be reliably cast to 'unsigned long' (ie odd platforms/compilers) so a pointer-typed version was added but it required portable code to check *both* modes to determine equality This commit maintains the availability of both thread ID types but deprecates the type-specific accessor APIs that invoke the callbacks - instead a single type-independent API is used This simplifies software that calls into this interface and should also make it less error-prone - as forgetting to call and compare *both* thread ID accessors could have led to hard-to-debug/infrequent bugs (that might only affect certain platforms or thread implementations) As the CHANGES note says there were corresponding deprecations and replacements in the thread-related functions for BN_BLINDING and ERR too
NOT BUG:Update tunala so it builds ok with OPENSSL_NO_DEPRECATED and improve the autoungunk.sh logic (autobits have grown since I last tried this...)
NOT BUG:Add support for signed receipt request printout and generation
NOT BUG:Signed Receipt Request utility functions and option on CMS utility to print out receipt requests
NOT BUG:Add signed receipt ASN1 structures Initial GENERAL_NAME utility functions
NOT BUG:Add support for CMS structure printing in cms utility
NOT BUG:Fix duplicate asn1 ctrl values
NOT BUG:Update dependencies
NOT BUG:Preliminary documentation for CMS utility
NOT BUG:Comment out a (currently) unused CMS function (Sorry Steve but I need -Werror right now to help me code-by-domino :-)
NOT BUG:Fork my debug configuration into 32-bit and 64-bit versions
NOT BUG:Allow alternate eContentType oids to be set in cms utility
NOT BUG:Add id-ct-asciiTextWithCRLF OID
NOT BUG:Give more meaninful error message is attempt to use key ID from a certificate without a key ID
NOT BUG:Rebuild CMS error codes
NOT BUG:Add support for KEK decrypt in cms utility
NOT BUG:Produce meaningful error if sanity check fails
NOT BUG:Delete trailing whitespace from objects.txt
NOT BUG:Delete duplicate NIDs
NOT BUG:Additional sanity check
NOT BUG:Add support for KEKRecipientInfo in cms application
NOT BUG:Make 3DES default cipher in cms utility
NOT BUG:Delete standard out and err temp files too
NOT BUG:Delete tmp files silence openssl commands compare extracted content
NOT BUG:Add enveloped data keyid test
NOT BUG:Uninitialized variable bug fix
NOT BUG:Fixes for S/MIME consistency checker and flexibility enhancements
NOT BUG:Add extensive PCKS7 and CMS consistency test script
NOT BUG:Various tidies/fixes:
NOT BUG:Make streaming support in cms cleaner
NOT BUG:Note errors in various S/MIME functions if CMS_final() fails
NOT BUG:Add streaming support for enveloped data
BUG:More support for KEK RecipientInfo
NOT BUG:Generalise RecipientInfo and enveloped data handling so applications can add their own key lookup routines as well as using the standard ones
NOT BUG:Partial support for KEKRecipientInfo type
NOT BUG:Preliminary support for enveloped data content type creation
NOT BUG:Fix signed data creation so versions are only corrected if structure is being created
NOT BUG:Fix a variety of warnings generated by some elevated compiler-fascism OPENSSL_NO_DEPRECATED etc Steve please double-check the CMS stuff..
NOT BUG:Fix some warnings
BUG:Fix a nasty cast issue that my compiler was choking on
NOT BUG:Fix my debug-geoff configuration
NOT BUG:Adapt to diffrent OpenSSL utility locations
NOT BUG:Remove deleted function from header file update mkfiles.pl
NOT BUG:Don't need to check for examples directory any more
NOT BUG:Extend runex.pl to extract examples directly from RFC text
NOT BUG:Add support for random key generation: this will be needed by enveloped data
NOT BUG:Initial support for enveloped data decrypt Extent runex.pl to cover these examples All RFC4134 examples can now be processed
NOT BUG:Initial support for enveloped data decrypt Extent runex.pl to cover these examples All RFC4134 examples can not be processed
NOT BUG:Check for cipher BIO errors and set key length after parameter decode
NOT BUG:Return error if no cipher set for encrypted data type
NOT BUG:Update CHANGES
NOT BUG:Initial support for Encrypted Data type generation
NOT BUG:Delete temp files
NOT BUG:Typos
NOT BUG:Reorganise encrypted content info code to avoid duplication and be more consistent with other content types
NOT BUG:Encrypted Data type processing Add options to cms utility and run section 7 tests in RFC4134
NOT BUG:New utility functions for encryptedData content type which will also be used by envelopedData
NOT BUG:Use PRE and not POST when freeing up RecipientInfo
NOT BUG:Only call free once in CHOICE type
NOT BUG:RFC4134 S/MIME examples test script
NOT BUG:.cvignore file for cms
NOT BUG:Free up additional data in RecipientInfo structure
NOT BUG:And so it begins..
NOT BUG:Initial support for CMS
NOT BUG:Add zlib compression BIO
NOT BUG:Add AES key wrap implementation
NOT BUG:Generalize S/MIME MIME code to support CMS and/or PKCS7
NOT BUG:Update year
NOT BUG:#undef X509_EXTENSIONS to avoid conflict with CryptoAPI
NOT BUG:We already have an object for "zlib compression" but it was a place holder and its actual encoding never used
NOT BUG:Just as well because it's value looks like it was made up in the mists of time..
NOT BUG:Now there is a registered value for zlib compression (used in S/MIME compressedData content type) use that instead
NOT BUG:Avoid warnings
NOT BUG:Fix error code function name mismatches in GOST engine rebuild errors
NOT BUG:Fix typo and avoid warning
NOT BUG:Make x86_64-mont.pl work with debug Win64 build
NOT BUG:fix BIGNUM flag handling
NOT BUG:Clarification and fix typo
NOT BUG:Use default value for $dir if it is empty
NOT BUG:Make sure to set indent-tabs-mode so that we get tabs not spaces
NOT BUG:Support for NASM>=2 in Win64/x64 build
NOT BUG:Add OIDs for compressedData content type and zlib compression
NOT BUG:Typo
NOT BUG:Utility attribute function to retrieve attribute data from an expected type Useful for many attributes which are single valued and can only have one type
NOT BUG:Extend attribute setting routines to support non-string types
NOT BUG:Ad-hockery for Platform SDK ml64
NOT BUG:Support custom primitive type printing routines and add one to LONG type
BUG:Micro-profiling assisted "optimization" for Power6 Essentially it's so to say educational commit Reordering instructions doesn't improve performance much rather exhibits Power6 limitations
NOT BUG:ppc64-mont optimization
NOT BUG:Add missing colon in manpage
NOT BUG:Submitted by: Richard Hartmann <richih.mailinglist@gmail.com>
NOT BUG:Add Global Sign root CA
NOT BUG:Clarify FAQ
NOT BUG:Clarify BITLIST format and include an example
NOT BUG:rc5/asm/rc5-586.pl was erroneously omitted from last perlasm unification
NOT BUG:crypto/rc5/Makefile was erroneously omitted from last perlasm unification Also remove obsolete and now misleading comments
NOT BUG:<strings.h> does not exist under WIN32
NOT BUG:Unify ppc assembler make rules
NOT BUG:Automate assembler support for Win64 targets (more work is needed)
NOT BUG:Allow to specify filename on sha1-ia64.pl command line
NOT BUG:Make all x86_64 modules independent on current working directory
NOT BUG:rc4-x86_64 portability fix
NOT BUG:Missing headers
NOT BUG:Unify x86 perlasm make rules
NOT BUG:Automate assembler support in mk1mf even further
NOT BUG:Experimental support for import of more options from Configure (via top level Makefile) into mk1mf builds This avoids the need to duplicate the CFLAG handling and can auto build assembly language source files from perl scripts
NOT BUG:Extend VC-WIN32 Configure entry to include new options
NOT BUG:Update perl asm scripts include paths for perlasm
NOT BUG:Fix unsigned/signed warnings in ssl
NOT BUG:Cygwin compatibility fix to apps/ocsp.c
NOT BUG:Compensate for BSDi shell bug
NOT BUG:engine/ccgost Win32 portability fixes
NOT BUG:Make aes-x86_64 work with debug Win64 build
NOT BUG:Make AES_T[ed] private to aes-586 module
NOT BUG:Include Mont asm files in WIN32 build
NOT BUG:Add extra SHA2 defines
NOT BUG:Last dso_dlfcn.c check-in said "Use Dl_info only on systems where it is known to exist It does not exist on AIX 4.3.3 AIX 5.1 SCO 5 or Cygwin" and disabled it on banch of systems it's known to exists such as FreeBSD Solaris 64-bit HP-UX MacOS X Get it straight
NOT BUG:x86gas.pl update
NOT BUG:Add sha2 defines
NOT BUG:Update netware to use new SHA2 assembly language modules
NOT BUG:Update WIN32 nasm build to use new asm files
NOT BUG:Avoid WIN32 signed/unsigned warnings
NOT BUG:Move CHANGES entry Revert include file install line
NOT BUG:Netware support Submitted by: Guenter Knauf <eflash@gmx.net>
NOT BUG:NASM has recently changed name of win32 pre-compiled binary PR: 1627
BUG:Add quotes to Win32 install directories Submitted by: Mladen Turk <mturk@apache.org>
NOT BUG:perlasm/x86*.pl updates
NOT BUG:Final (for this commit series) optimized version and with commentary section
NOT BUG:This is also informational commit exposing loop modulo scheduling "factor."
NOT BUG:New Montgomery multiplication module ppc64-mont.pl Reference non-optimized implementation This is essentially informational commit
NOT BUG:ppc-xlate.pl update
NOT BUG:Source readability fix which incidentally works around XLC compiler bug
NOT BUG:Engage x86 assembler in Mac OS X build
NOT BUG:Mac OS X x86 assembler support
BUG:Disable support for Metrowerks assembler Assembler itself is broken specifically it incorrectly encodes EA offsets between 128 and 255
NOT BUG:x86 perlasm overhaul
NOT BUG:Avoid aliasing warning
NOT BUG:Update ordinals
BUG:Initialize sigsize
NOT BUG:Handle non-SHA1 digests for certids in OCSP test responder
NOT BUG:gmp engine was non-operational
NOT BUG:Submitted by: Victor B Wagner <vitus@cryptocom.ru> steve
NOT BUG:Use default algorithms for OCSP request and response signing New command line option to support other digest use for OCSP certificate IDs
NOT BUG:Change submitted by Doug Kaufman He writes:
NOT BUG:I just compiled the 9.9-dev version from the 12022007 tarball under DJGPP There were only 2 changes needed one for b_sock.c since DJGPP with WATT32 doesn't define socklen_t and one for testtsa to handle DOS style path separators I also noted what seems to be a typographical error in ts.pod The test suite passes The patch is attached
NOT BUG:Since I am in the US I have sent notifications to the Bureau of Industry and Security and to the NSA
NOT BUG:Some assembler are allergic to lea reg,BYTE PTR[...]
NOT BUG:Submitted by: Guenter Knauf
NOT BUG:Structure symbol decorations optimize label handling..
NOT BUG:Rebuild OID database: duplicates got in there somehow??
NOT BUG:Fix from stable branch
NOT BUG:Add caRepository OID and sync object NIDs with OpenSSL 0.9.8
NOT BUG:Synchronize x86nasm.pl with x86unix.pl
BUG:Combat [bogus] relocations in some assember modules
NOT BUG:Lookup public key ASN1 methods by string by iterating through all implementations instead of all added ENGINEs to cover case where an ENGINE is not added
NOT BUG:Submitted by: "Victor B Wagner" <vitus@cryptocom.ru>
NOT BUG:Update gost algorithm print routines
NOT BUG:Avoid warning
NOT BUG:Update debug-steve targets
NOT BUG:Submitted by: "Victor B Wagner" <vitus@cryptocom.ru>
NOT BUG:Make {d2i,i2d}_PrivateKey() fall back to PKCS#8 format if no legacy format supported Add support in d2i_AutoPrivateKey()
NOT BUG:Rebuild object cross reference table
NOT BUG:Typos in man pages: dependant->dependent
NOT BUG:Submitted by: Tobias Stoeckmann <tobias@bugol.de>
NOT BUG:Should reject signatures that we can't properly verify and couldn't generate (as pointed out by Ernst G Giessmann)
NOT BUG:fix typos
NOT BUG:Submitted by: Ernst G Giessmann
NOT BUG:Fix buffer overflow
NOT BUG:The hash length check wasn't strict enough as pointed out by Ernst G Giessmann
NOT BUG:Fix warnings
NOT BUG:Commit #16325 fixed one thing but broke DH with certain moduli
NOT BUG:Fix from stable branch
NOT BUG:Add OIDs by CMP (RFC 4210) and CRMF (RFC 4211)
NOT BUG:Submitted by: Martin Peylo <martinmeis@googlemail.com>
NOT BUG:Fix duplicate error codes
NOT BUG:GOST ENGINE information
NOT BUG:1 Changes for s_client.c to make it return non-zero exit code in case of handshake failure
NOT BUG:2 Changes to x509_certificate_type function (crypto/x509/x509type.c) to make it recognize GOST certificates as EVP_PKT_SIGN|EVP_PKT_EXCH (required for s3_srvr to accept GOST client certificates)
NOT BUG:3 Changes to EVP - adding of function EVP_PKEY_CTX_get0_peerkey - Make function EVP_PKEY_derive_set_peerkey work for context with ENCRYPT operation because we use peerkey field in the context to pass non-ephemeral secret key to GOST encrypt operation - added EVP_PKEY_CTRL_SET_IV control command It is really GOST-specific but it is used in SSL code so it has to go in some header file available during libssl compilation
NOT BUG:4 Fix to HMAC to avoid call of OPENSSL_cleanse on undefined data
NOT BUG:5 Include des.h if KSSL_DEBUG is defined into some libssl files to make debugging output which depends on constants defined there work and other KSSL_DEBUG output fixes
NOT BUG:6 Declaration of real GOST ciphersuites two authentication methods SSL_aGOST94 and SSL_aGOST2001 and one key exchange method SSL_kGOST
NOT BUG:7 Implementation of these methods
NOT BUG:8 Support for sending unsolicited serverhello extension if GOST ciphersuite is selected It is require for interoperability with CryptoPro CSP 3.0 and 3.6 and controlled by SSL_OP_CRYPTOPRO_TLSEXT_BUG constant This constant is added to SSL_OP_ALL because it does nothing if non-GOST ciphersuite is selected and all implementation of GOST include compatibility with CryptoPro
NOT BUG:9 Support for CertificateVerify message without length field It is another CryptoPro bug but support is made unconditional because it does no harm for draft-conforming implementation
NOT BUG:10 In tls1_mac extra copy of stream mac context is no more done When I've written currently commited code I haven't read EVP_DigestSignFinal manual carefully enough and haven't noticed that it does an internal digest ctx copying
NOT BUG:This implementation was tested against 1 CryptoPro CSP 3.6 client and server 2 Cryptopro CSP 3.0 server
NOT BUG:Release OpenSSL 0.9.8g with various fixes to issues introduced with 0.9.8f
NOT BUG:Fix from stable branch
NOT BUG:Don't let DTLS ChangeCipherSpec increment handshake sequence number PR: 1587
NOT BUG:Don't lookup zero length session ID PR: 1591
NOT BUG:Fix from stable branch
NOT BUG:Make ssl compile [from 098-stable bug is masked by default]
NOT BUG:Bunch of constifications
NOT BUG:Fix warnings in d1_both.c [from 0.9.8-stable]
NOT BUG:DTLS fixes from 0.9.8-stable
NOT BUG:Synchronize CHANGES between 0.9.8 and HEAD
BUG:0.9.8f
NOT BUG:Update CHANGES Keep ordinals consistent
NOT BUG:New release
NOT BUG:Respect cookie length set by app_gen_cookie_cb
BUG:Submitted by: Alex Lam
NOT BUG:Make DTLS1 record layer MAC calculation RFC compliant
BUG:Submitted by: Alex Lam
BUG:Addendum to commit #16654
NOT BUG:size_t-fy crypto/buffer
NOT BUG:ignore a few additionally generated files
BUG:Addendum to commit #16651
NOT BUG:Make it possible to link VC static lib with either /MT or /MD application PR: 1230
BUG:Prohibit RC4 in DTLS
NOT BUG:Fix from fips branch
NOT BUG:Off by one fix from stable branch
NOT BUG:Switch to bn-s390x (it's faster on keys longer than 512 bits) and mention s390x assembler pack in CHANAGES
NOT BUG:Oops! This was erroneously left out commit #16632
BUG:Basic idea behind explicit IV is to make it unpredictable for attacker Until now it was xor between CBC residue and 1st block from last datagram or in other words still predictable
NOT BUG:Make ChangeCipherSpec compliant with DTLS RFC4347
BUG:DTLS RFC4347 says HelloVerifyRequest resets Finished MAC
BUG:DTLS RFC4347 requires client to use rame random field in reply to HelloVerifyRequest
NOT BUG:Switch to RFC-compliant version encoding in DTLS
NOT BUG:Move no status notification to ssl_check_serverhello_tlsext() to ensure no status is notified even if no server extensions are present
NOT BUG:Typo
NOT BUG:Yet another ARM update It appears to be more appropriate to make developers responsible for -march choice
NOT BUG:Move -march=armv4t to ./config
NOT BUG:Minor ARMv4 update
NOT BUG:ARMv4 assembler pack
NOT BUG:10% performance tweak in 64-bit mode
NOT BUG:Support for certificate status TLS extension
NOT BUG:Make sha512-armv4.pl byte-order neutral
NOT BUG:Clarify commentary in sha512-sparcv9.pl
NOT BUG:Typos PR: 1578 Submitted by: Charles Longeau <chl@tuxfamily.org>
NOT BUG:Port from 0.9.8-stable
NOT BUG:Use accept flag for new session ticket write
NOT BUG:properly handle length-zero opaque PRF input values (which are pointless but still might occur)
NOT BUG:fix length parameter in SSL_set_tlsext_opaque_prf_input() calls
NOT BUG:Implement the Opaque PRF Input TLS extension (draft-rescorla-tls-opaque-prf-input-00.txt) and do some cleanups and bugfixes on the way In particular this fixes the buffer bounds checks in ssl_add_clienthello_tlsext() and in ssl_add_serverhello_tlsext()
NOT BUG:Note that the opaque PRF Input TLS extension is not compiled by default; see CHANGES
NOT BUG:Fix indentation in d1_both.c
NOT BUG:Fix dependencies Make depend
NOT BUG:The other half of make errors
NOT BUG:make errors
NOT BUG:fix warning
NOT BUG:Clean up error codes a bit (engines/ccgost/ remains utter chaos though; "make errors" is not happy.)
NOT BUG:Addenum to "Constify obj_dat.[ch]."
NOT BUG:Minor formatting fixes in crypto/sha/asm
NOT BUG:Wire RC4 key_table to read-only segment
NOT BUG:Constify obj_dat.[ch] as well as minimize linker relocations
NOT BUG:Wire DES weak_keys to read-only segment
NOT BUG:Eliminate redundant make rule
BUG:Minimize stack utilization in probable_prime
BUG:Remove excessive whitespaces from bio.h
NOT BUG:Make sure that BN_from_montgomery keeps the BIGNUMS in proper format
NOT BUG:Update from stable branch
NOT BUG:Update from stable branch
NOT BUG:Mention aes in enc.pod PR: 1529
NOT BUG:Mention SHA2 in openssl.pod PR: 1575
NOT BUG:Remove pq_compat.h
NOT BUG:Minor sha[256|512]-586 performance tweaks
NOT BUG:It's inappropraite to override application signal nor is it appropriate to shut down Winsock unless we know it won't be used [and we never do] PR: 1439
NOT BUG:Minor fix in link_[oa].hpux
NOT BUG:BSD run-time linkers apparently demand RPATH on .so objects PR: 1381
BUG:Make bn2dec work on "SIXTY_FOUR_BIT" platforms PR: 1456
NOT BUG:Remove sha512-sse2.pl
NOT BUG:Engage new x86 assembler modules
NOT BUG:More Intel cc fix-ups
NOT BUG:Handle empty case in X509_NAME canonical encoding
NOT BUG:Commentary updates
NOT BUG:SHA512 for ARMv4
NOT BUG:SHA256/512 for x86
NOT BUG:Typo? Why did this work anyway?
NOT BUG:Fix warning: print format option not compatible with size_t
NOT BUG:Fix another warning
NOT BUG:Change safestack reimplementation to match 0.9.8
NOT BUG:Fix additional gcc 4.2 value not used warnings
NOT BUG:Fix warnings: computed value not use incompatible pointer initialization and cast from pointer to int of different size (linux-x86_64 and align)
NOT BUG:Add sha512_block implementation optimized for small register bank On x86 it gives same performance while code size shrinks >10 times
NOT BUG:Update ssl code to support digests other than MD5+SHA1 in handshake
NOT BUG:Submitted by: Victor B Wagner <vitus@cryptocom.ru>
NOT BUG:Constify seed and md2
NOT BUG:Offer darwin64-x86_64-cc as option
BUG:Compress and more aggressively constify ec_curve.c [the latter is achieved by minimizing link relocations]
NOT BUG:Check return code when attempting to receive new session ticket message
NOT BUG:Unify RC4 settings among darwin platforms
NOT BUG:Add darwin64-x86_64-cc target
BUG:aes_ige suffered SIGBUS on RISC platforms
NOT BUG:Improve cache locality in linux64-sparcv9
NOT BUG:Make naming more consistent
NOT BUG:Make room for Camellia assembler
NOT BUG:Add ctrls to set and get RFC4507bis keys to enable several contexts to reuse the same tickets
NOT BUG:Add Google sponsorship note
NOT BUG:shlib_wrap commentary update
NOT BUG:shlib_wrap update IRIX section
NOT BUG:IRIX and Tru64 platform updates
NOT BUG:Update from stable branch
NOT BUG:Document ticket disabling option
NOT BUG:Add usage message for -sess_out -sess_in
NOT BUG:Make x86_64 modules work under Win64/x64
NOT BUG:Workaround MSVC6 compiler bug
NOT BUG:Docs and usage messages for RFC4507bis support
NOT BUG:VAX C can't handle 64 bit integers making SHA512 impossible..
NOT BUG:Use SHA256 for ticket HMAC if possible
NOT BUG:Fix for asm/no-asm on WIN32
NOT BUG:OPENSSL_NO_TLS1 WIN32 build support Fix so normal build works again
NOT BUG:Fix warning and make no-tlsext work
NOT BUG:Typo
NOT BUG:Fix warnings
NOT BUG:Remove debugging fprintfs fix typo
BUG:RFC4507 (including RFC4507bis) TLS stateless session resumption support for OpenSSL
NOT BUG:Typos in ./config PR: 1563
NOT BUG:MacOS X update
NOT BUG:Proper support for shared build under MacOS X
NOT BUG:Typo in ppccpuid.pl
NOT BUG:document -S and -nopad options in usage information
NOT BUG:Buglet fixes and minor optimization in aes-x86_86 assembler
NOT BUG:Make preprocessor logic more fail-safe
NOT BUG:As for inline vs __inline The original code implies that most compilers understand inline while WIN32 ones insist on __inline Well there are other compilers that insist on __inline At the same time it turned out that most compilers understand both __inline and inline I could find only one that doesn't understand __inline Sun C In other words it seems that __inline as preferred choice provides better coverage..
NOT BUG:Make ppccpuid AIX friendly
NOT BUG:Respect ISO aliasing rules PR: 1296
NOT BUG:AES for IA64 update
NOT BUG:ia64cpuid update
NOT BUG:x86 perlasm updates
NOT BUG:Configure update from 098
NOT BUG:Update debug-steve
NOT BUG:Allow for option to skip hardware support
NOT BUG:md32_common.h update
NOT BUG:x86*cpuid update
NOT BUG:Complete synchronization of aes-x86_64 with aes-586
NOT BUG:Lppc_AES_[en|de]crypt_compact: size optimization
NOT BUG:Minor optimization in AES_set_encryption_key for x86_64
NOT BUG:_x86_64_AES_[en|de]crypt_compact: size optimization and aggressive T[ed]4 prefetch
NOT BUG:WIN32 VC++ build fixes
NOT BUG:shlib_wrap.sh update
NOT BUG:gas -g doesn't tolerate unpadded .bytes in code segment
NOT BUG:Various minor updates to AES assembler modules
NOT BUG:Add _x86_64_AES_[en|de]crypt_compact
BUG:EVP_*_cfb1 was broken PR: 1318
NOT BUG:bn_mul_recursive doesn't handle all cases correctly which results in BN_mul failures at certain key-length mixes PR: 1427
NOT BUG:Typo in str_lib.c PR: 1177
NOT BUG:Fix build problem on Tru64
NOT BUG:Latest bn_mont.c modification broke ECDSA test I've got math wrong which is fixed now
NOT BUG:Fix warning
NOT BUG:Inline function declarations have to be prototypes
NOT BUG:Flush output in x86_64cpuid.pl
NOT BUG:Typo in x86_64-mont.pl PR: 1549
NOT BUG:CHANGES update from 098-stable
NOT BUG:Optimize OPENSSL_cleanse
NOT BUG:bn_asm for s390x
NOT BUG:Typo in Linux part of sparcv9cap.c PR: 1532
NOT BUG:Make some shortcuts in sparcv9cap.c Trouble is that di_walk_node result is inconsistent among CPU generations
NOT BUG:SPARC Solaris and Linux assemblers treat .align directive differently PR: 1547
NOT BUG:Update from stable branch
NOT BUG:Update .cvsignore
NOT BUG:Make ordinals consistent with OpenSSL 0.9.8
NOT BUG:Eliminate conditional final subtraction in Montgomery assembler modules
BUG:Privatize BN_*_no_branch
NOT BUG:Commentary updates and minor optimization for bn_mont.c
NOT BUG:Eliminate conditional final subtraction in Montgomery multiplication
NOT BUG:WIN32 fixes
NOT BUG:Remove unnecessary casts and avoid some warnings with gcc 4.2
NOT BUG:Finish gcc 4.2 changes
NOT BUG:Back out safestack.h change for now: seems to break some things
NOT BUG:Avoid use of function pointer casts in pem library Modify safestack to always use inline functions
NOT BUG:Update ssl library to support EVP_PKEY MAC API Include generic MAC support
NOT BUG:Handle NULL parameter in some EVP utility functions
NOT BUG:Fix for GOST engine on platforms where sizeof(size_t) != sizeof(int)
NOT BUG:AES_set_[en|de]crypt_key for ARMv4
NOT BUG:s390x gas can't handle .align 128
NOT BUG:AES_set_[en|de]crypt_key for s390x
NOT BUG:Update ordinals
NOT BUG:Fix X509_REQ_print_ex() to process extension options
NOT BUG:Revert broken change to ccgost
NOT BUG:Initialize context properly for HMAC pkey method
NOT BUG:SHA256 for ARMv4
NOT BUG:Fix crypto/ec/ec_mult.c to work properly with scalars of value 0
NOT BUG:Typo
NOT BUG:Fixes for dgst tool Initialize md_name sig_name properly Return error code on failure Keep output format consistent with previous versions
NOT BUG:Also flush stdout after printing ACCEPT in s_server
NOT BUG:Fix warning and back out bad modification
NOT BUG:OPENSSL_IMPLEMENT_GLOBAL caused more grief than it's worth (it's used twice in legacy code) I'd rather just remove it along with legacy interface but it's probably not as appropriate as I'd like Reimplement the macro
BUG:Padlock engine fails to compile with -O0 -fPIC
NOT BUG:Typo in aes-ppc.pl
NOT BUG:--enable-auto-image-base in cygwin build PR: 1517 Submitted by: vinschen@redhat.com
NOT BUG:Typo in x509_txt.c
NOT BUG:Submitted by: Martin.Kraemer@Fujitsu-Siemens.com
NOT BUG:x86cpuid fixes PR: 1526
NOT BUG:ppc-xlate.pl update
NOT BUG:sparccpuid.s update
NOT BUG:Initial draft of AES for PPC
NOT BUG:Updated GOST MAC support
NOT BUG:Submitted by: vitus@cryptocom.ru
NOT BUG:Initial GOST MAC support Not fully working yet..
NOT BUG:Add .cvsignore to seed dir
NOT BUG:Set len to buffer size
NOT BUG:Prepend signature name in dgst output
NOT BUG:Use default md if none specified in dgst utility
NOT BUG:Use EVP_DigestVerify() in dgst.c if verifying
BUG:PR: 1516
NOT BUG:Revert change in 1516 because it breaks Windows build Use a modified version of the headers from s_client.c which has used similar functionality without any problems
NOT BUG:Fix error code name
NOT BUG:New function EVP_PKEY_asn1_copy() Use default MD if type param is NULL
NOT BUG:Change C++ style comments
NOT BUG:Throw in ppccpuid module
NOT BUG:Fix linking error after adding alphacpuid.s
NOT BUG:Add alphacpuid.s
NOT BUG:Profiling revealed that OPENSSL_cleanse consumes *more* CPU time than sha1_block_data_order when hashing short messages Move OPENSSL_cleanse to "cpuid" assembler module and gain 2x
NOT BUG:x86_64 assembler updates
NOT BUG:As all assembler modules are alignment neutral allow C to pass unaligned content
NOT BUG:Make sha*-ia64 modules alignment neutral
BUG:More IGE speedup
BUG:AES IGE mode speedup
NOT BUG:Document streaming options
NOT BUG:Improve error detection when streaming S/MIME
NOT BUG:Only use streaming when appropriate for detached data in smime utility
NOT BUG:Tidy up docs remove warning
NOT BUG:More useful ASN1 macros for static allocation functions
NOT BUG:Mention Core2 in sha1-x86_64
NOT BUG:Commentary updates to SHA for sparcv9
NOT BUG:Detect UltraSPARC T1 in ./config
NOT BUG:Engage SHA for sparcv9
NOT BUG:SHA for sparcv9
NOT BUG:Fix bug introduced in cn#16195
NOT BUG:Fine reading of manual suggests that km can return non-normal completion code
NOT BUG:Fix s390x bugs and correct performance coefficients
NOT BUG:Synchronise VMS with Unix
BUG:Revert irrelevant changes from commit #16191
BUG:rll does not seem to be available on legacy s390
NOT BUG:Typo in commit #16187
NOT BUG:Typo in s390x_asm
NOT BUG:Bug in apps/dgst.c
NOT BUG:s390x optimizations
NOT BUG:Engage s390x assembler modules
NOT BUG:s390x assembler pack
NOT BUG:Reimplement rc4-586.pl relicense rc4-x86_64.pl
NOT BUG:fix function codes for error
NOT BUG:remove leftover from editing ..
BUG:All ciphersuites should have a strength designator
NOT BUG:Add SEED encryption algorithm
NOT BUG:PR: 1503 Submitted by: KISA Reviewed by: Bodo Moeller
NOT BUG:fix error codes
BUG:don't violate the bn_check_top assertion in BN_mod_inverse_no_branch()
NOT BUG:New function ASN1_STRING_copy() to copy to an already alloacted ASN1_STRING structure
NOT BUG:Sample text files for S/MIME test programs
NOT BUG:Add a bunch of S/MIME sample programs and data
NOT BUG:Flush b64 BIO
BUG:Don't finalize signerinfo if reuse and partial both set
NOT BUG:PKCS7_sign_add_signer() docs
NOT BUG:More docs for streaming functions
NOT BUG:Typo
NOT BUG:d2i_PKCS7_bio_stream() docs
NOT BUG:Oops..
NOT BUG:Update docs
NOT BUG:Update docs
NOT BUG:Update smime utility to support streaming for -encrypt and -sign -nodetach options Add new streaming i2d (though strictly speaking it is BER format when streaming) and PEM functions
NOT BUG:These all process content on the fly without storing it all in memory
NOT BUG:Copy update callback across when copying EVP_MD_CTX
NOT BUG:Remove unnecessary reference to EVP_MD_CTX in HMAC pkey method
NOT BUG:New -mac and -macopt options to dgst utility Reimplement -hmac option in terms of new API
NOT BUG:Update CHANGES
NOT BUG:Experimental HMAC support via EVP_PKEY_METHOD
NOT BUG:Constification
NOT BUG:Don't ignore config_name parameter passed to OPENSSL_config() Use "openssl_conf" in config file if config_name variable is missing
NOT BUG:Fix from stable branch
NOT BUG:Fix digest signing so digest type is set after init
BUG:Preliminary support for signctx/verifyctx callbacks
NOT BUG:New -sigopt option for dgst utility
NOT BUG:Yet another resource leak Coverity ID 123
NOT BUG:If you're going to check for negative use an signed integer! Coverity ID 122
NOT BUG:Don't copy from a nonexistent next Coverity ID 47
NOT BUG:Fix duplicate error number
NOT BUG:Errors should actually be errors
NOT BUG:Don't dereference NULL argument Coverity ID 52
NOT BUG:Missing config file
NOT BUG:Don't use a negative number as a length Coverity ID 57
NOT BUG:Avoid overrun Coverity ID 60
NOT BUG:Free memory Coverity ID 62
NOT BUG:check return value of ASN1_item_i2d() Coverity ID 55
NOT BUG:Resource leak
NOT BUG:Handle bad content type Coverity ID 99
NOT BUG:Fix buffer overrun Coverity ID 106
NOT BUG:Don't free a NULL Coverity ID 112
NOT BUG:Missing return on error Coverity ID 115
NOT BUG:Return an error if the serial number is badly formed (Coverity ID 116)
NOT BUG:Die if serial number is invalid
NOT BUG:Make sure we detect corruption
BUG:check correct pointer before freeing it (Coverity CID 79,86)
BUG:check if pointer is != NULL before dereferencing it (Coverity CID 40)
NOT BUG:RC4_set_key for x86_64 and Core2 optimization PR: 1447
BUG:Don't die if the value is NULL (Coverity CID 98)
NOT BUG:Fix warning
NOT BUG:Update x86cpuid.pl to correctly detect shared cache and to support new RC4_set_key
NOT BUG:Reserve for assembler implementation of RC4_set_key and implement x86 one
NOT BUG:Apply a more modern way to get the definition of select() except for VMS Submitted by Corinna Vinschen <vinschen@redhat.com>
BUG:make BN_FLG_CONSTTIME semantics more fool-proof
BUG:Change to mitigate branch prediction attacks
NOT BUG:Submitted by: Matthew D Wood Reviewed by: Bodo Moeller
NOT BUG:Allow shared builds for aix[64]-gcc targets
NOT BUG:aix[64]-cc config lines update
NOT BUG:Stage 1 GOST ciphersuite support
NOT BUG:Submitted by: ran@cryptocom.ru Reviewed by: steve@openssl.org
NOT BUG:Synchronise the VMS build with recent movements in the Unix build
NOT BUG:Fixes for aix-shared rules
NOT BUG:stricter session ID context matching
NOT BUG:clarification regarding libdes files
NOT BUG:link warnings caused by nasm modules
NOT BUG:Two extra instructions in RC4 character loop give 80% performance improvement on Core2 I still need to detect Core2 and choose this path..
NOT BUG:Remove obsolete comment
NOT BUG:Various PowerPC config updates
NOT BUG:nasm fixes
NOT BUG:sparcv9a-mont was modified to handle 32-bit aligned input but check for 64-bit alignment was not removed
NOT BUG:Win32 fixes Add GOST algorithm to mkdef update ordinals Signed/unsigned fixes
NOT BUG:Fix from stable branch
NOT BUG:size_t -> int
NOT BUG:remove unused file
NOT BUG:Initialize "buf" to 0 to make valgrind happy :-) Note: the RAND_bytes() manual page says: RAND_bytes() puts num cryptographically strong pseudo-random bytes into buf It does not talk about using the previous contents of buf so we are working as documented
NOT BUG:Do not use uninitialized memory to seed the PRNG as it may confuse code checking tools PR: 1499
NOT BUG:Update from stable branch
NOT BUG:small cosmetics: align title with the other similar manual page
NOT BUG:allow EVP_PKEY_CTX_free(NULL)
NOT BUG:remove dead code
NOT BUG:include complete 0.9.7 history include release date of 0.9.8e
NOT BUG:use 2007 copyright for generated files
NOT BUG:Update FAQ,NEWS in HEAD
NOT BUG:Fix incorrect substitution that happened during the recent ciphersuite selection remodeling
BUG:Submitted by: Victor Duchovni
NOT BUG:Fix problem with multi line responses in -starttls by using a buffering BIO and BIO_gets()
BUG:Extend SMTP and IMAP protocol handling to perform the required EHLO or CAPABILITY handshake before sending STARTTLS
NOT BUG:Submitted by: Goetz Babin-Ebell <goetz@shomitefo.de>
NOT BUG:Add automatic detection for Linux on SuperH PR: 1152 Submitted by: Mike Frysinger <vapier@gentoo.org>
NOT BUG:Add support for m68k linux PR: 1277 Submitted by: Mike Frysinger <vapier@gentoo.org>
NOT BUG:Fix incorrect handling of special characters PR: 1459 Submitted by: tnitschke@innominate.com Reviewed by: steve@openssl.org
NOT BUG:Update from 0.9.7-stable
NOT BUG:prefer SHA1 over MD5 (this affects the Kerberos ciphersuites)
NOT BUG:delete obsolete comment
NOT BUG:SSL_kKRB5 ciphersuites shouldn't be preferred by default
BUG:Improve ciphersuite order stability when disabling ciphersuites Change ssl_create_cipher_list() to prefer ephemeral ECDH over ephemeral DH
NOT BUG:fix a typo in the new ciphersuite ordering code
NOT BUG:Include "!eNULL" in SSL_DEFAULT_CIPHER_LIST to make sure that a ciphersuite string such as "DEFAULT:RSA" cannot enable authentication-only ciphersuites
NOT BUG:Also change ssl_create_cipher_list() so that it no longer starts with an arbitrary ciphersuite ordering but instead uses the logic that we previously had in SSL_DEFEAULT_CIPHER_LIST SSL_DEFAULT_CIPHER_LIST simplifies into just "ALL:!aNULL:!eNULL"
NOT BUG:fix warnings for CIPHER_DEBUG builds
NOT BUG:fix warnings/inconsistencies caused by the recent changes to the ciphersuite selection code in HEAD
BUG:Submitted by: Victor Duchovni
NOT BUG:fix incorrect strength bit values for certain Kerberos ciphersuites
BUG:Submitted by: Victor Duchovni
NOT BUG:Updates from 0.9.8-stable branch
NOT BUG:Reorganize the data used for SSL ciphersuite pattern matching This change resolves a number of problems and obviates multiple kludges A new feature is that you can now say "AES256" or "AES128" (not just "AES" which enables both)
NOT BUG:In some cases the ciphersuite list generated from a given string is affected by this change I hope this is just in those cases where the previous behaviour did not make sense
NOT BUG:ensure that the EVP_CIPHER_CTX object is initialized
NOT BUG:PR: 1490
BUG:Add STARTTLS support for IMAP and FTP Submitted by Kees Cook <kees@outflux.net>
NOT BUG:- use OPENSSL_malloc() etc in zlib - move zlib_stateful_ex_idx initialization to COMP_zlib()
NOT BUG:PR: 1468
BUG:avoid shifting input
NOT BUG:use user-supplied malloc functions for persistent kssl objects
NOT BUG:PR: 1467 Submitted by: Andrei Pelinescu-Onciul <andrei@iptel.org>
NOT BUG:remove unreachable code
BUG:PR: 1483
NOT BUG:Add support for GOST 28147-89 in Gost ENGINE
NOT BUG:Add -hmac option to dgst from 0.9.7 stable branch
NOT BUG:remove unused variable
NOT BUG:ensure that a ec key is used
NOT BUG:PR: 1476
NOT BUG:After objects have been freed NULLify the pointers so there will be no double free of those objects
NOT BUG:fix typo
NOT BUG:add note about 56 bit ciphers
NOT BUG:PR: 1461
BUG:Update from fips2 branch
NOT BUG:add support for DSA with SHA2
NOT BUG:fix documentation
NOT BUG:PR: 1466
NOT BUG:fix potential memory leaks
NOT BUG:PR: 1462
NOT BUG:Minimize aes_core.c footprint when AES_[en|de]crypt is implemented in assembler
NOT BUG:Minor touch to aes-armv4.pl
NOT BUG:AES for ARMv4
NOT BUG:Minor optimization for sha1-armv4 module
NOT BUG:Update from 0.9.7-stable
NOT BUG:SHA1 for ARMv4 and Thumb
NOT BUG:Constify version strings is ssl lib
NOT BUG:Constify version strings and some structures
BUG:Add AOL an AOLTW root CAs to bundle
NOT BUG:Make armv4t-mont module backward binary compatible with armv4 and rename it accordingly
NOT BUG:Update to new home page
NOT BUG:Montgomery multiplication for ARMv4
NOT BUG:remove undefined constant
BUG:opensslwrap.sh to respect $OPENSSL_ENGINES
NOT BUG:#include <stddef.h> in digest headers
NOT BUG:Submitted by: Kurt Roeckx <kurt@roeckx.be>
NOT BUG:Montgomery multiplication for MIPS III/IV Not engaged
NOT BUG:Minor clean-up in crypto/bn/asm
NOT BUG:Minor clean-up in crypto/engine
NOT BUG:Allow opensslwrap.sh to access engines from build tree
NOT BUG:Move eng_padlock.c to ./engines
NOT BUG:Submitted by: Michal Ludvig <michal@logix.cz>
NOT BUG:Minor performance improvements to x86-mont.pl
NOT BUG:Fix for "strange errors" exposed by ccgost engine The fix is two extra insructions in sqradd loop at line #503
NOT BUG:fix return value of get_cert_chain()
NOT BUG:PR: 1441
NOT BUG:Synchronise a bit more with Unixly build
NOT BUG:Needed definition of _XOPEN_SOURCE_EXTENDED so DEC C on VMS will see the declarations of fd_set select() and so on
BUG:Replace strdup() with BUF_strdup()
NOT BUG:Synchronise with Unixly build again ;-)
NOT BUG:Add bit I missed from PKCS#7 streaming encoder
NOT BUG:Experimental streaming PKCS#7 support
NOT BUG:I thought it was about time I dusted this off This stuff had been sitting on my hard drive for *ages* (2003 in fact) Hasn't been tested well and may not work properly
NOT BUG:Nothing uses it at present which is just as well
BUG:Think of this as a traditional Christmas present which looks far more impressive in the adverts and on the box some of the bits are missing and falls to bits if you play with it too much
NOT BUG:Synchronise with Unixly build
NOT BUG:Oops! New prototype code creeped through..
NOT BUG:Make sha.h more "portable."
NOT BUG:x86-mont.pl sse2 tune-up and integer-only squaring procedure
NOT BUG:use OPENSSL_NO_DYNAMIC_ENGINE macro disable debug messages
NOT BUG:PR: 1440 Submitted by: Victor B Wagner" <vitus@cryptocom.ru>
NOT BUG:fix typos
NOT BUG:PR: 1354 1355 1398 1408
NOT BUG:update pkcs12 help message + manpage
BUG:PR: 1443 Submitted by: Artem Chuprina <ran@cryptocom.ru>
NOT BUG:fix order
NOT BUG:PR: 1442
NOT BUG:update
NOT BUG:add support for ecdsa-with-sha256 etc
BUG:remove trailing '\'
NOT BUG:PR: 1438
NOT BUG:Fix the BIT STRING encoding of EC points or parameter seeds (need to prevent the removal of trailing zero bits)
NOT BUG:fix order
NOT BUG:properly initialize SSL context check return value
NOT BUG:use const ASN1_TIME *
NOT BUG:Eliminate 64-bit alignment limitation in sparcv9a-mont
NOT BUG:Engage alpha-mont module Actually verified on Tru64 only
NOT BUG:alpha-mont.pl: gcc portability fix and make-rule
NOT BUG:Minor +10% tune-up for x86_64-mont.pl
NOT BUG:Montgomery multiplication routine for Alpha
NOT BUG:Update from 0.9.7-stable branch
NOT BUG:Sync OID NIDs with OpenSSL 0.9.8
NOT BUG:Fix change to OPENSSL_NO_RFC3779
NOT BUG:fix documentation
NOT BUG:PR: 1343
NOT BUG:avoid duplicate entries in add_cert_dir()
NOT BUG:PR: 1407 Submitted by: Tomas Mraz <tmraz@redhat.com>
NOT BUG:return 0 if 'noout' is used and no error has occurred
NOT BUG:PR: 1435 Submitted by: "Haridharan" <haridharan@gmail.com>
NOT BUG:allocate a new attributes entry in X509_REQ_add_extensions() if it's NULL (in case of a malformed pkcs10 request)
NOT BUG:PR: 1347 Submitted by: Remo Inverardi <invi@your.toilet.ch>
NOT BUG:add "Certificate Issuer" and "Subject Directory Attributes" OIDs
NOT BUG:PR: 1433
NOT BUG:Eliminate redundant variable in Camellia CBC routine
NOT BUG:Improve Camellia code readability
NOT BUG:Fix bugs in Camellia CBC routine
NOT BUG:Camellia portability fixes
NOT BUG:Submitted by: Masashi Fujita NTT
NOT BUG:add support for whirlpool in apps/speed
NOT BUG:PR: 1338 Submitted by: justin@soze.net
NOT BUG:Fix default dependency flags
BUG:Import ordinals from 0.9.8 and update
NOT BUG:Update dependencies
NOT BUG:Win32 fixes from stable branch
NOT BUG:replace macros with functions
NOT BUG:Submitted by: Tracy Camp <tracyx.e.camp@intel.com>
BUG:fix support for receiving fragmented handshake messages
NOT BUG:Clarify HAL SPARC64 support situation in sparcv9a-mont.pl
NOT BUG:Minor optimizations based on intruction level profiler feedback
NOT BUG:Modulo-schedule loops in sparcv9a-mont.pl Overall improvement factor over 0.9.8 is up to 3x on USI&II cores and up to 80% - on USIII&IV
NOT BUG:This is "informational" commit Its mere purpose is to expose "modulo factor" in inner loops
NOT BUG:Non-SSE2 path to bn_mul_mont But it's disabled because it currently doesn't give performance improvement
NOT BUG:Add RFC 3779 support
NOT BUG:sha512-ppc.pl mutli-thread safety fix
NOT BUG:register the engine as default engine in ENGINE_set_default()
NOT BUG:PR: 1431
NOT BUG:Add .cvsignore
NOT BUG:Update from 0.9.8 stable Eliminate duplicate error codes
NOT BUG:wording (can't really call shared libs experimental after several years in the major Linux distributions)
NOT BUG:Update ordinals
NOT BUG:Remove illegal IMPLEMENT macros from header file
NOT BUG:Remove redundant PREDECLARE statement
NOT BUG:Initial incomplete support for typesafe macros without using function casts
NOT BUG:Don't assume requestorName is present for signed requests ASN1 OCSP module fix: certs field is OPTIONAL
NOT BUG:OCSP library tidy Use extension to encode OCSP extensions instead of doing it manually Make OCSP_CERTID_dup() a real function instead of a macro
NOT BUG:Fix various warnings
BUG:Make TSA tests use the noprompt mode of utilities rather than piping the result into interative utilities
NOT BUG:Avoid shadow warning
NOT BUG:Don't add the TS EKU by default in openssl.cnf because it then makes certificates genereated by ca CA.pl etc useless for anything else
NOT BUG:Typo
NOT BUG:Fix link for ASN1_generate_nconf
NOT BUG:Typo
NOT BUG:Add v3 ref to see also sections
BUG:Add documentetion for noCheck extension and add a few cross references to the extension documentation
NOT BUG:fix warning
NOT BUG:remove SSLEAY_MACROS code
NOT BUG:update md docs
NOT BUG:fix OPENSSL_NO_foo defines
NOT BUG:Initialize old_priv_encode old_priv_decode
NOT BUG:Minor portability update to c_rehash
NOT BUG:Further mingw build procedure updates
NOT BUG:Harmonize dll naming in mingw builds
NOT BUG:Yet another mingw warning
NOT BUG:OPENSSL_ia32cap.pod update
NOT BUG:Fix mingw warnings
NOT BUG:Switch Win32/64 targets to Winsock2 Updates to ISNTALL.W32 cover even recent mingw modifications
NOT BUG:Allow for mingw cross-compile configuration
NOT BUG:Make c_rehash more platform neutral and make it work in mixed environment such as MSYS with "native" Win32 perl
NOT BUG:Rudimentary support for cross-compiling
NOT BUG:Align data payload for better performance
BUG:Avoid application relink on every make invocation
NOT BUG:Gcc over-optimizes PadLock AES CFB codepath tell it not to
NOT BUG:Temporary fix for sha256 IA64 assembler
NOT BUG:Fix bug in big-endian path and optimize it for size
NOT BUG:Typo in perlasm/x86asm.pl
NOT BUG:Further synchronizations with md32_common.h update consistent naming for low-level SHA block routines
NOT BUG:bn/asm/ppc.pl to use ppc-xlate.pl
BUG:Further synchronizations with md32_common.h update
NOT BUG:VIA-specific Montgomery multiplication routine
NOT BUG:Synchronize SHA1 assembler with md32_common.h update
NOT BUG:Support for .asciz directive in perlasm modules
NOT BUG:Linking errors on IA64 and typo in aes-ia64.S
NOT BUG:Re-implement md32_common.h [make it simpler!] and eliminate code rendered redundant as result
NOT BUG:Typo
NOT BUG:return an error if the supplied precomputed values lead to an invalid signature
NOT BUG:ASN1_item_verify needs to initialize ctx before any "goto err" can happen; the new code for the OID cross reference table failed to do so
NOT BUG:Place standard CRL behaviour in default X509_CRL_METHOD new functions to create free and set default CRL method
NOT BUG:Initialise ctx to NULL to avoid uninitialized free noticed by Steve Kiernan
NOT BUG:All 0.9.8d patches have been applied to HEAD now so we no longer need the redundant entries under the 0.9.9 heading
NOT BUG:Introduce limits to prevent malicious keys being able to cause a denial of service (CVE-2006-2940) [Steve Henson Bodo Moeller]
BUG:include 0.9.8d and 0.9.7l information
NOT BUG:Fix ASN.1 parsing of certain invalid structures that can result in a denial of service (CVE-2006-2937) [Steve Henson]
BUG:Fix buffer overflow in SSL_get_shared_ciphers() function (CVE-2006-3738) [Tavis Ormandy and Will Drewry Google Security Team]
BUG:Fix SSL client code which could crash if connecting to a malicious SSLv2 server (CVE-2006-4343) [Tavis Ormandy and Will Drewry Google Security Team]
NOT BUG:Fixes for the following claims:
NOT BUG:1) Certificate Message with no certs
NOT BUG:OpenSSL implementation sends the Certificate message during SSL handshake however as per the specification these have been omitted
NOT BUG:-- RFC 2712 -- CertificateRequest and the ServerKeyExchange shown in Figure 1 will be omitted since authentication and the establishment of a master secret will be done using the client's Kerberos credentials for the TLS server The client's certificate will be omitted for the same reason -- RFC 2712 --
NOT BUG:3) Pre-master secret Protocol version
NOT BUG:The pre-master secret generated by OpenSSL does not have the correct client version
NOT BUG:RFC 2712 says if the Kerberos option is selected the pre-master secret structure is the same as that used in the RSA case
NOT BUG:TLS specification defines pre-master secret as: struct { ProtocolVersion client_version; opaque random[46]; } PreMasterSecret;
NOT BUG:where client_version is the latest protocol version supported by the client
NOT BUG:The pre-master secret generated by OpenSSL does not have the correct client version The implementation does not update the first 2 bytes of random secret for Kerberos Cipher suites At the server-end the client version from the pre-master secret is not validated
BUG:PR: 1336
NOT BUG:Initialize new callbacks and make sure hent is always initialized
NOT BUG:Complete the change for VMS
NOT BUG:Submitted by: Brad Spencer <spencer@jacknife.org> Reviewed by: steve
NOT BUG:Buffer size handling fix for enc
BUG:PR:1374
NOT BUG:Using correct lock for X509_REQ
BUG:PR:1348
NOT BUG:Update length if copying MSB set in asn1_string_canon()
NOT BUG:Updated file
NOT BUG:Add missing prototype Fix various warnings (C++ comments ; outside function)
NOT BUG:Make int_rsa_sign function match prototype
NOT BUG:PR: 1383
NOT BUG:Compile in gost engine
NOT BUG:Updated version of gost engine
NOT BUG:Do CRL method init after other operations
NOT BUG:Tidy up CRL handling by checking for critical extensions when it is loaded Add new function X509_CRL_get0_by_serial() to lookup a revoked entry to avoid the need to access the structure directly
NOT BUG:Add new X509_CRL_METHOD to allow common CRL operations (verify lookup) to be redirected
NOT BUG:Build error on non-unix PR: 1390
NOT BUG:Race condition in ms/uplink.c PR: 1382
NOT BUG:As x86ms.pl is out remove do_masm.bat and mention to it in INSTALL.W32
NOT BUG:Remove x86ms.pl and reimplement x86*.pl
NOT BUG:Improve 386 portability of aes-586.pl
BUG:Ensure that the addition mods[i]+delta cannot overflow in probable_prime()
BUG:[Problem pointed out by Adam Young <adamy (at) acm.org>]
NOT BUG:Overhaul of by_dir code to handle dynamic loading of CRLs
NOT BUG:GOST public key algorithm ENGINE donated to the OpenSSL by Cryptocom
NOT BUG:Very early version doesn't do much yet not even added to the build system
NOT BUG:Support for AKID in CRLs and partial support for IDP Overhaul of CRL handling to support this
NOT BUG:Update docs
NOT BUG:Update
NOT BUG:Fixes for new CRL/cert callbacks Update CRL processing code to use new callbacks
NOT BUG:ensure that ciphersuite strings such as "RC4-MD5" match the SSL 2.0 ciphersuite as well
NOT BUG:Add verify callback functions to lookup a STACK of matching certs or CRLs based on subject name
NOT BUG:New thread safe functions to retrieve matching STACK from X509_STORE
NOT BUG:Cache some IDP components
NOT BUG:Make sure the int_rsa_verify() prototype matches the implementation (m_len currently is 'unsigned int' not 'size_t')
NOT BUG:Submitted by: Gisle Vanem
BUG:Additional detail
NOT BUG:update information on "current version" ..
NOT BUG:Add an FAQ
NOT BUG:Remove non-functional part of recent patch after discussion with Colin Percival (this would have caused more problems than solved and isn't really necessary anyway)
NOT BUG:Make consistent with 0.9.8-branch version of this file
NOT BUG:Every change so far that is in the 0.9.8 branch is (or should be) in HEAD
BUG:Avoid PKCS #1 v1.5 signature attack discovered by Daniel Bleichenbacher (CVE-2006-4339)
BUG:Submitted by: Ben Laurie Google Security Team Reviewed by: bmoeller mjc shenson
NOT BUG:Rewrite sha1-586.pl
NOT BUG:Fix bug in aes-586.pl
NOT BUG:Fix bug in x86unix.pl introduced in latest update PR: 1380
BUG:Kill more C++ comments
NOT BUG:Fix C++ style comments change assert to OPENSSL_assert stop warning with pedantic mode
NOT BUG:Fix leak
BUG:Forward port of IGE mode
NOT BUG:Make things static that should be Declare stuff in headers that should be Fix warnings
NOT BUG:According to documentation including time.h declares select() on OpenVMS and possibly more
NOT BUG:Ref: http://h71000.www7.hp.com/doc/82final/6529/6529pro_019.html#r_select
BUG:Correct warnings about signedness
NOT BUG:Use gmtime on cygwin Submitted by: Corinna Vinschen
BUG:+20% tune-up for Power5
NOT BUG:Revised AES_cbc_encrypt in x86 assembler module
NOT BUG:Correct punctuation PR: 1367
NOT BUG:Agressively prefetch S-box in SSE codepatch relax alignment requirement check for SSE bit instead of MMX as pshufw was introduces in PIII minor optimization typos..
NOT BUG:Switch to compact S-box when generating AES key schedule
NOT BUG:Switch to compact S-box when generating AES key schedule
NOT BUG:Real Bourne shell doesn't interpret == but =
NOT BUG:Engage assembler in solaris64-x86_64-cc
NOT BUG:perlasm/x86unix.pl update
NOT BUG:Next generation aes-586.pl featuring AES_[en|de]crypt accessing exclusively 256 byte S-box AES_cbc_encrypt needs further work as it should also use slow routines when processing smaller amount of data
NOT BUG:Camellia IPR information
NOT BUG:Support for multiple CRLs with same issuer name in X509_STORE Modify verify logic to try to use an unexpired CRL if possible
NOT BUG:Cache some CRL related extensions
NOT BUG:Avoid warning
NOT BUG:Avoid WIN32 warning
NOT BUG:Avoid warnings
NOT BUG:Use correct pointer types for various functions
NOT BUG:New Camellia implementation (replacing previous version)
BUG:Submitted by: NTT
NOT BUG:Camellia information
NOT BUG:Store canonical encodings of Name structures Update X509_NAME_cmp() to use them
BUG:Reimplement outer rounds as "compact" in x86 assembler This has rather strong impact on decrypt performance 20-25% One probably should consider switching between slower and faster routines depending on how much data we were asked to process
NOT BUG:WIN32 fixes signed/unsigned issues and slightly socket semantics
NOT BUG:Update .cvsignore again
NOT BUG:Update .cvsignore
NOT BUG:Fix various error codes to match functions
NOT BUG:Add -timeout option to ocsp utility
NOT BUG:New non-blocking OCSP functionality
NOT BUG:Add option for "compact" rounds to aes_x86core.c "Compact" rounds are those referencing compact 256-byte S-boxes
NOT BUG:There is should be no need to rewind the input stream any more
NOT BUG:For S/MIME multipart/signed type the signature is calculated on the fly
NOT BUG:For other detached data forms the stream isn't used after the single pass to calculate signatures
NOT BUG:For non-detached the data is stored in a memory BIO
NOT BUG:In genpkey also look for algorithm string name in any supplied ENGINE
NOT BUG:Bugfix: don't look in internal table for signature if found in application supplied list
NOT BUG:Typo
NOT BUG:New docs for EVP_Digest{Sign,Verify}*() function Update existing docs
NOT BUG:Add docs for pkeyparam Update some existing docs
NOT BUG:Update some usage messages
NOT BUG:make update
NOT BUG:Allow digests to supply S/MIME micalg values from a ctrl
NOT BUG:Send ctrls to EVP_PKEY_METHOD during signing of PKCS7 structure so customisation is possible
NOT BUG:New functions to add and free up application defined signature OIDs
NOT BUG:Set detached flag in PKCS7 structure earlier to avoid eating up memory
BUG:PR: 1071
NOT BUG:Public key comparison and printing routine functions
NOT BUG:EVP_PKEY_get_default_digest() manual page
NOT BUG:EVP_PKEY_CTX_ctrl() docs
NOT BUG:Update docs
NOT BUG:New functions to enumerate digests and ciphers
NOT BUG:Keygen docs
NOT BUG:EVP_PKEY_derive() docs
NOT BUG:Add some examples
NOT BUG:EVP_PKEY_verify() docs
NOT BUG:New docs
NOT BUG:Update docs
NOT BUG:Add some EVP_PKEY_METHOD docs
NOT BUG:Update docs with algorithm options
NOT BUG:Typo
NOT BUG:Initial docs for pkeyutl
NOT BUG:Docs for new utilities
NOT BUG:Add documentation for new smime options
NOT BUG:Fix compiler warnings
NOT BUG:Unsigned vs signed comparison warning
NOT BUG:Typos(?) in HEAD/crypto/evp/p_lib.c
NOT BUG:dsa_pub_cmp() doesn't need to check parameters because that is done in EVP_PKEY_cmp()
NOT BUG:Make return value from EVP_PKEY_cmp() and EVP_PKEY_cmp_parameters() consistent
NOT BUG:Prepare playground for AES experimental code
NOT BUG:documentation for "HIGH" vs "MEDIUM" was not up-to-date
NOT BUG:use <poll.h> as by Single Unix Specification
NOT BUG:always read in RAND_poll() if we can't use select because of a too large FD: it's non-blocking mode anyway
NOT BUG:Mitigate the hazard of cache-collision timing attack on last round The only chance for T[ed]4 to get evicted in this module is when its cache "overlaps" with last 128 bits of key schedule
NOT BUG:Mitigate the hazard of cache-collision timing attack on last round Well prefetch could have been moved closer to Td4 references Something for later consideration..
NOT BUG:Mitigate cache-collision timing attack on last round
NOT BUG:Fix EVP_PKEY_CTX_dup() to return correct value and handle NULL keys in the source
NOT BUG:Use poll() when possible to gather Unix randomness entropy
NOT BUG:New functions CRYPTO_set_idptr_callback() CRYPTO_get_idptr_callback() CRYPTO_thread_idptr() for a 'void *' type thread ID since the 'unsigned long' type of the existing thread ID does not always work well
NOT BUG:Change in 0.9.8 branch: Put ECCdraft ciphersuites back into default build (but disabled unless specifically requested)
NOT BUG:Remove ECC ciphersuites from 0.9.8 branch (should use 0.9.9 branch)
NOT BUG:Change array representation of binary polynomials to make GF2m part of the BN library more generally useful
BUG:Submitted by: Douglas Stebila
NOT BUG:another thread-safety fix
NOT BUG:Error messages for client ECC cert verification
NOT BUG:Also change the default ciphersuite to give some prefererence to ciphersuites with forwared secrecy (rather than using a random order)
NOT BUG:Call 'print_stuff' even if a handshake failed
NOT BUG:Fix algorithm handling for ECC ciphersuites: Adapt to recent changes and allow more general RSA OIDs for ECC certs with RSA CA sig
NOT BUG:Fix another new bug in the cipherstring logic
NOT BUG:Fix another bug introduced yesterday when deleting Fortezza stuff: make sure 'mask' is initialized in ssl_cipher_get_disabled()
NOT BUG:Also simplify code by removing some unused arguments in static functions
NOT BUG:Oops .. deleted too much in the previous commit when I deleted the Fortezza stuff
NOT BUG:Disable invalid ciphersuites
NOT BUG:Ciphersuite string bugfixes and ECC-related (re-)definitions
NOT BUG:Make sure that AES ciphersuites get priority over Camellia ciphersuites in the default cipher string
NOT BUG:Thread-safety fixes
NOT BUG:Fix a bug recently introduced when updating this file to use the new keygen API: make sure that 'pkey_type' is actually visible to MAIN()
BUG:Keep synchronised with Unix
NOT BUG:Camellia cipher contributed by NTT
NOT BUG:Submitted by: Masashi Fujita Reviewed by: Bodo Moeller
NOT BUG:Keep synchronised with the Unix build
NOT BUG:Camellia cipher contributed by NTT
NOT BUG:Submitted by: Masashi Fujita Reviewed by: Bodo Moeller
NOT BUG:Camellia cipher contributed by NTT
NOT BUG:Submitted by: Masashi Fujita Reviewed by: Bodo Moeller
BUG:Output MIME parameter micalg according to RFC3851 and RFC4490 instead of hard coding it to "sha1"
NOT BUG:Add AES and GOST S/MIME capabilities if algorithms are supported
NOT BUG:Fix obvious typo
NOT BUG:Clarify comment and add #ifdef
NOT BUG:Complete EVP_PKEY_ASN1_METHOD ENGINE support
NOT BUG:Sync aes.h with http://cvs.openssl.org/chngview?cn=15336
NOT BUG:Reimplement AES_ofb128_encrypt
NOT BUG:Correct logical error in STRICT_ALIGNMENT check and remove copy of eay licence as module is practically rewritten from scratch [well even original submission was obviously "almost but not quite entirely unlike" any other eay *_cfb.c module not to mention new functions]
NOT BUG:Minor ppc-xlate.pl update
NOT BUG:Add sha512-ppc.pl module
NOT BUG:Minor sha1-ppc.pl update
NOT BUG:A few more ENGINE strings that need shortening
NOT BUG:Synchronise with Unix
NOT BUG:Make update
NOT BUG:Initial public key ASN1 method engine support Not integrated yet
NOT BUG:Automatically free up dynamically allocated public key methods when and ENGINE is destroyed
NOT BUG:Extend default method string to include public key methods
NOT BUG:Add missing prototypes
NOT BUG:Fix engine method lookup
NOT BUG:Typo
NOT BUG:Add ENGINE support for EVP_PKEY_METHOD including lookups of ENGINE implementations and functional reference counting when a context is allocated free or copied
NOT BUG:Synchronise with the Unixly build
NOT BUG:Fix error code make update
NOT BUG:Add missing prototype Extend engine utility to print public key algorithms
NOT BUG:Add engine table for EVP_PKEY_METHOD Doesn't do much yet
NOT BUG:Because all object files are now in a file we don't need to mention any of them on the linker command line Besides OBJECT_FILE now represents the last compiled file and using it here only results in getting warnings about multiple definitions of the symbols in that file
NOT BUG:New pkey functions for keygen callbacks and retrieving operation type
NOT BUG:Tune up AES CFB Performance improvement varies from 10% to 50% from platform to platform Its absolute value is within few percents marginal from that of ECB
NOT BUG:Use a new signed int ii instead of j (which is unsigned) to handle the return value from sk_SSL_CIPHER_find()
NOT BUG:Deal with another name that's longer than 31 characters
NOT BUG:rslen is unsigned so it can never go below 0
NOT BUG:Install openssl.cnf to OPENSSLDIR in mk1mf.pl
NOT BUG:Flush p7bio when all data has been copied
NOT BUG:Fix warnings
NOT BUG:Update pkeyutl to use size_t for pkey functions
NOT BUG:Signed vs unsigned conflict
NOT BUG:There was a problem with too long command lines so I rebuilt to make it work better
NOT BUG:Allow any supported cipher to be used with smime -encrypt
NOT BUG:Add prototypes update Win32 ordinals
NOT BUG:Keep in sync with Unix
NOT BUG:Update EVP_MD_CTX_copy_ex() to use EVP_PKEY_CTX_dup()
NOT BUG:New function to dup EVP_PKEY_CTX This will be needed to make new signing functions and EVP_MD_CTX_copy work properly
NOT BUG:New functions for enchanced digest sign/verify
NOT BUG:Fix warnings
NOT BUG:Use size_t for new crypto size parameters
NOT BUG:Fix smime -pk7out
NOT BUG:Add ctrl to EVP_MD and EVP_PKEY_CTX to EVP_MD_CTX These will be used for enhanced sign/verify operations
NOT BUG:Tiny up hpux targets
NOT BUG:Add -resign and -md options to smime command to support resigning an existing structure and using alternative digest for signing
NOT BUG:Code tidy
NOT BUG:Typo
NOT BUG:make update
NOT BUG:More S/MIME tidy Place some common attribute operations in utility functions
NOT BUG:Remove old digest type hacks for non RSA keys
NOT BUG:Multiple signer support in smime application
NOT BUG:Reformat smime.c utility
NOT BUG:New option to pkcs12 utility to set alternative MAC digest algorithm
NOT BUG:Don't try to print PBE information if it can't be decoded
NOT BUG:PKCS#12 mac key length should equal digest length
NOT BUG:Tidy up of S/MIME code and add new functions which will make is easier to create S/MIME signed data with multiple signers
NOT BUG:Extended PBES2 function supporting application supplied IV and PRF NID
NOT BUG:Oops..
NOT BUG:HMAC OIDs from RFC4231
NOT BUG:Gather keygen options in req and only use them after all other options have been processed This allows any ENGINE changing operations to be processed first (for example a config file)
NOT BUG:Add PRF preference ctrl to ciphers
NOT BUG:Change builting PBE to use static table Add entries for HMAC and MD5 GOST
NOT BUG:Update old **EVIL** PEM_X509_INFO_read_bio() function to correctly assign private keys
NOT BUG:FIXME: this function should really be rewritten because it is *horrible*
NOT BUG:Bugfix: the NONE string for PBE algorithms wasn't working
NOT BUG:Correctly handle missing DSA parameters
NOT BUG:Add feature to PKCS12_create() if the encryption NID corresponds to a supported encryption algorithm instead of a PBE NID then use that algorithm with PBES2
NOT BUG:Extend PBE code to support non default PKCS#5 v2.0 PRFs
NOT BUG:Check for deprecated private key types before PKCS#8 types
NOT BUG:Typo
NOT BUG:Add includes in synopsis Submitted by: Mike Frysinger <vapier@gentoo.org>
NOT BUG:In interactive mode only config OpenSSL once
NOT BUG:Stop warnings about deprecated -mcpu option
NOT BUG:make update
NOT BUG:Someone made a mistake and some function and reason codes got duplicate numbers Renumbering
NOT BUG:Typo
NOT BUG:Update 'req' command to use new keygen API
NOT BUG:New functions to get key types without dereferncing EVP_PKEY
NOT BUG:More error checking for RSA pmeth
NOT BUG:Update PKCS#7 decrypt routines to use new API
NOT BUG:Update PKCS#7 enveloped data to new API
NOT BUG:Update S/MIME code to use default digest
NOT BUG:Add support for default public key digest type ctrl
NOT BUG:Fix from stable branch
NOT BUG:bug fix PR: 1326 Submitted by: John Skodon
NOT BUG:Futher minor PPC assembler update
NOT BUG:Update from stable branch
NOT BUG:Update FAQ
NOT BUG:Minor PPC assembler updates
NOT BUG:PPC assembler distiller update
NOT BUG:Typo in linux-ppc line
NOT BUG:Update from stable branch
NOT BUG:Bug fix
NOT BUG:PR: 1307 Submitted by: Oliver Tappe <zooey@hirschkaefer.de>
NOT BUG:SHA1 for PowerPC
NOT BUG:Yet another "teaser" Montgomery multiplication module for PowerPC
NOT BUG:Update EVP_PKEY_cmp() and X509_check_private() to return sensible values and handle unsupported key types
NOT BUG:Fix from stable branch
NOT BUG:Replace RSA specific PKCS7_RECIP_INFO set up with an public key algorithm ctrl
NOT BUG:Code tidy
NOT BUG:New function to extract AlgorithmIdentifier for PKCS7_RECIP_INFO
NOT BUG:Don't free up parameter The public key ASN1 method can do that if it needs to
NOT BUG:Fix usage message for pkeyutl
NOT BUG:Add prototypes and pkey accessor function for EVP_PKEY_CTX
NOT BUG:Correct copyright notice.. this doesn't contain any SSLeay code
NOT BUG:Add 'flags' parameter to EVP_PKEY_asn1_meth_new() to set algorithm flags
NOT BUG:undo accidental commit
NOT BUG:as we encrypt every bit separately we need to loop through the number of bits; thanks to Michael McDougall <mmcdouga@saul.cis.upenn.edu>
BUG:PR: 1318
NOT BUG:make local function static
NOT BUG:Remove dss1 hack from S/MIME code
NOT BUG:Remove link between digests and signature algorithms
NOT BUG:Use cross reference table in ASN1_item_sign() ASN1_item_verify() to eliminate the need for algorithm specific code
NOT BUG:Remove comment from SSLeay days about EVP_PKEY_METHOD
NOT BUG:Make sure obj_xref.h is updated during a "make update"
NOT BUG:Synchronise with Unixly build (Geez a lot is happening right now eh? :-))
NOT BUG:Add OID cross reference table
NOT BUG:Fix some typos in GOST OIDs
NOT BUG:Update dependencies
NOT BUG:Synchronise
NOT BUG:Allow public key ASN1 methods to set PKCS#7 SignerInfo structures
NOT BUG:If we include winsock2.h then FD_SET wants an unsigned type for an fd
NOT BUG:Fix (most) WIN32 warnings and errors
NOT BUG:Provisional support for EC pkey method supporting ECDH and ECDSA
NOT BUG:SHA-1 for x86_64
NOT BUG:Use more flexible method of determining output length by setting &outlen value of the passed output buffer is NULL
NOT BUG:The old method of using EVP_PKEY_size(pkey) isn't flexible enough to cover all cases where the output length may depend on the operation or the parameters associated with it
NOT BUG:Fix from 0.9.7-stable branch
NOT BUG:Revert to original..
NOT BUG:Oops..
NOT BUG:If cipher list contains a match for an explicit ciphersuite only match that one suite
BUG:Got sick and tired of duplicating.. Too error-prone (i.e I forget to update both...)!
NOT BUG:Update copyright notices on a few files where all original SSLeay code has been deleted
NOT BUG:Print out zero length string properly
NOT BUG:Add functions to allow setting and adding external EVP_PKEY_METHOD
NOT BUG:Complete key derivation support
NOT BUG:Update dependencies
NOT BUG:Add key derivation support
NOT BUG:Change the option setting command line switch to "-pkeyopt" to avoid confusion with algorithm parameters
NOT BUG:Synchronise what what's happening with the Unix build
NOT BUG:Typo
NOT BUG:Extend DH ASN1 method add DH EVP_PKEY_METHOD
NOT BUG:Fix leak
NOT BUG:PKCS#3 DH PKCS#8 ASN1 support
NOT BUG:declare as in prototype Submitted by: Gisle Vanem
NOT BUG:Extend DH ASN1 method to support public key encode/decode and parameter utilities
NOT BUG:Compare parameters when comparing public keys
NOT BUG:Add file dso_beos.c missing from original commit
BUG:PR: 1312
NOT BUG:Support for DSA keygen fix for genpkey
NOT BUG:Initial DSA EVP_PKEY_METHOD Fixup some error codes
NOT BUG:Add BeOS support
NOT BUG:PR: 1312 Submitted by: Oliver Tappe <zooey@hirschkaefer.de> Reviewed by: Ulf Moeller
NOT BUG:manual pages as HTML Submitted by: Oliver Tappe <zooey@hirschkaefer.de>
NOT BUG:Use Dl_info only on systems where it is known to exist It does not exist on AIX 4.3.3 AIX 5.1 SCO 5 or Cygwin
NOT BUG:uncomment; that one slipped through
NOT BUG:improve make dclean to remove files generated during build
NOT BUG:PR: 1308 Submitted by: Oliver Tappe <zooey@hirschkaefer.de> Reviewed by: Ulf Moeller
NOT BUG:Fix parameter error messages
NOT BUG:Write parameters if -genparam option include
NOT BUG:Add parameter generation option to genpkey
NOT BUG:Add support for setting keybits and public exponent value for pkey RSA keygen
NOT BUG:Initial keygen support
NOT BUG:ctrls to set PSS salt length
NOT BUG:Preliminary PSS support
BUG:Beginnings of PSS support
NOT BUG:Synchronise with the Unix build
NOT BUG:Change operation values so they can be used as a mask
NOT BUG:Fix rsa_pkey_method
NOT BUG:Implementation of pkey_rsa_verify Some constification
NOT BUG:New utility function to reverse a buffer either by copying or in-place
NOT BUG:Store digests as EVP_MD instead of a NID
NOT BUG:Add digest size sanity checks
NOT BUG:Constification
NOT BUG:Bugfix X9.31 padding
NOT BUG:Support for digest signing and X931 in rsa_pkey_meth
NOT BUG:Add checking to padding ctrl
NOT BUG:Add RSA ctrl for padding mode add ctrl support in pkeyutl
NOT BUG:Fix typo Add EVP_PKEY_CTX control function for later use by command line utilities
NOT BUG:Reformat pkeyutl.c add support for verify operation but nothing actually supports it (yet)
NOT BUG:Update dependencies
NOT BUG:Implement encrypt/decrypt using RSA
NOT BUG:Initial functions for RSA EVP_PKEY_METHOD
NOT BUG:Update dependencies
BUG:If <operatio>_init function is zero interpret as noop
NOT BUG:New utility 'pkeyutl' a general purpose version of 'rsautl'
NOT BUG:Include EVP_PKEY argument in EVP_PKEY_CTX_new() This avoids the need for a separate EVP_PKEY parameter in the other operation initialization routines
NOT BUG:Initial functions for main EVP_PKEY_METHOD operations No method implementations yet
NOT BUG:Updated to EVP_PKEY_METHOD code.. still doesn't do much
NOT BUG:Initial definitions and a few functions for EVP_PKEY_METHOD: an extension of the EVP routines to public key algorithms
NOT BUG:Remove ECC extension information from external representation of the session -- we don't really need it once the handshake has completed
NOT BUG:New function to add dynamic alias
NOT BUG:Last arg to EVP_PKEY_assign() should be void *
NOT BUG:Rebuild mac table to avoid duplicates
NOT BUG:Typos in a few OID names
NOT BUG:Typo
NOT BUG:Minor object name edit
NOT BUG:Add an explicit load_config() call so any added algorithms are visible
NOT BUG:Fix dynamic public key method lookup
NOT BUG:New function to retrieve ASN1 info on public key algorithms New command line option to print out info
NOT BUG:Stop warning
NOT BUG:Update and add last (?) set of GOST OIDs
NOT BUG:clarification
NOT BUG:check length properly
BUG:Submitted by: Peter Sylvester
NOT BUG:simplify: use s2n macro
NOT BUG:Avoid hard-coded table length where we can use sizeof
NOT BUG:Submitted by: Peter Sylvester Reviewed by: Bodo Moeller
NOT BUG:fix memory leak
BUG:Submitted by: Peter Sylvester
NOT BUG:Change chop to chomp when reading lines so CRLF is properly processed on the operating systems where they are the normal line endings
NOT BUG:More GOST OIDs
NOT BUG:Add GOST parameter set OIDs
NOT BUG:Don't free up key in priv_decode
NOT BUG:Initialize pval
NOT BUG:If we declare a function like d2i_TS_MSG_IMPRINT_bio() we'd better *define* it too or things like shared libraries might be a bit sad
NOT BUG:Fix gost OIDs
NOT BUG:Synchronise with recent changes
NOT BUG:The -config option flag needs to be in the SSLEAY_CONFIG value
BUG:PR: 1300
NOT BUG:fix for hostname extension
BUG:Submitted by: Kaspar Brand Peter Sylvester
NOT BUG:Implement Supported Elliptic Curves Extension
BUG:Submitted by: Douglas Stebila
NOT BUG:Change default curve (for compatibility with a soon-to-be-widely-deployed implementation that doesn't support the previous default)
BUG:Submitted by: Douglas Stebila
NOT BUG:Implement cipher-suite selection logic given Supported Point Formats Extension
BUG:Submitted by: Douglas Stebila
NOT BUG:Fix typo
NOT BUG:Add some GOST OIDs
NOT BUG:Add missing function declaration
NOT BUG:Fix bug where freed OIDs could be accessed in EVP_cleanup() by defering freeing in OBJ_cleanup()
NOT BUG:Typo
NOT BUG:New utility pkeyparam Enhance and bugfix algorithm specific parameter functions to support it
NOT BUG:New general public key utility 'pkey'
NOT BUG:Small bug apps/CA.sh and apps/CA.com look at SSLEAY_CONFIG not OPENSSL_CONF
NOT BUG:Since we're moving between directories let's get an absolute path to openssl.exe
NOT BUG:Simplify ASN.1 for point format list
BUG:Submitted by: Douglas Stebila
NOT BUG:Only try to remove the tsa.dir subdirectory if it actually exists
NOT BUG:Initial support for generalized public key parameters
NOT BUG:Add support for legacy PEM format private keys in EVP_PKEY_ASN1_METHOD
NOT BUG:Typo
NOT BUG:Fix bug in DSA EC methods
NOT BUG:Add information and pem strings Update dependencies
NOT BUG:Make EVP_PKEY_ASN1_METHOD opaque Add application level functions to initialize it Initial support for application added public key ASN1
NOT BUG:Keep up with the changes in the Unix build system
NOT BUG:Move algorithm specific print code from crypto/asn1/t_pkey.c to separate *_prn.c files in each algorithm directory
NOT BUG:Gather printing routines into EVP_PKEY_ASN1_METHOD
NOT BUG:VMS doesn't support includes of paths very well
NOT BUG:Synchronise with recent changes
NOT BUG:DH EVP_PKEY_ASN1_METHOD doesn't do much (yet?)
NOT BUG:Transfer parameter handling and key comparison to algorithm methods
NOT BUG:Initial support for pluggable public key ASN1 support Process most public key ASN1 handling through a single EVP_PKEY_ASN1_METHOD structure and move the spaghetti algorithm specific code to a single ASN1 module for each algorithm
NOT BUG:Stop compiler warnings
NOT BUG:fix last commit: return NULL is TS_RESP_CTX_set_status_info_cond() failed
NOT BUG:ensure the pointer is valid before using it
NOT BUG:check if con != NULL before using it
NOT BUG:remove unnecessary code
NOT BUG:Typo..
NOT BUG:*** empty log message ***
NOT BUG:Clarification for CPU specific config options
NOT BUG:fix for OPENSSL_NO_EC
NOT BUG:PR: 1293
NOT BUG:fix problems found by coverity: remove useless code
NOT BUG:tlsext_ecpointformatlist_length is unsigned so check if it's less than zero will only result in pissing of some compilers..
NOT BUG:create BN_CTX object
NOT BUG:fix error found by coverity: check if ctx is != NULL before calling BN_CTX_end()
NOT BUG:fix error found by coverity: check if ctx is != NULL before calling BN_CTX_end()
NOT BUG:signed vs unsigned
NOT BUG:Oh now I noticed Bodo's change that made tlsext_ecpointformatlist unsigned..
NOT BUG:Resolve signed vs unsigned issues
NOT BUG:fix sign problems
NOT BUG:remove unused variables
NOT BUG:udpate Supported Point Formats Extension code
BUG:Submitted by: Douglas Stebila
NOT BUG:fix comment
BUG:Submitted by: Peter Sylvester
NOT BUG:use BIO_snprintf() instead of snprintf + use BIO_FP_TEXT for text output
NOT BUG:Submitted by: Gisle Vanem
NOT BUG:note that SSL_library_init() is not reentrant
NOT BUG:Implement the Supported Point Formats Extension for ECC ciphersuites
BUG:Submitted by: Douglas Stebila
NOT BUG:clarification
NOT BUG:fix signed vs unsigned warning
NOT BUG:fix "missing initializer" warning
NOT BUG:fix signed vs unsigned warning
NOT BUG:make update
NOT BUG:add initial support for RFC 4279 PSK SSL ciphersuites
NOT BUG:PR: 1191 Submitted by: Mika Kousa and Pasi Eronen of Nokia Corporation Reviewed by: Nils Larsch
NOT BUG:Remember to *build* WP_TEST on VMS as well :-)
NOT BUG:fix function name in error message
NOT BUG:unused function
NOT BUG:The actual whirlpool test was missing on VMS..
NOT BUG:constify some print and ts functions
NOT BUG:Typo
NOT BUG:no need to cast away the const
NOT BUG:make some parameters const
NOT BUG:Make shorter TS symbols for OpenVMS Don't convert a function pointer to a void* ISO C doesn't like that
BUG:Forgot the TSA application..
NOT BUG:Check EVP_DigestInit_ex() return value in EVP_BytesToKey()
BUG:force C locale when using [a-z] in sed expressions
NOT BUG:PR: 1283 Submitted by: Mike Frysinger
NOT BUG:fix "#ifndef HZ" statement
NOT BUG:PR: 1287
NOT BUG:TS bugfixes: Do not hardcode message digest algorithms; fix ASN1 decoding
BUG:Submitted by: Zoltan Glozik <zglozik@opentsa.org>
NOT BUG:Synchronise with openss.cnf
NOT BUG:Add a TSA test testtsa.com is a manual sh to dcl translation of testtsa
NOT BUG:Add TS to the VMS build
NOT BUG:Break out deltree in its' own command procedure
NOT BUG:fix no-dh configure option; patch supplied by Peter Meerwald
NOT BUG:Print out <INVALID> if an OID value is invalid
NOT BUG:Tolerate a SEQUENCE in DN components
NOT BUG:ignore
NOT BUG:message style
NOT BUG:oops
NOT BUG:wrap shlib for testtsa Submitted by: David Somers <dsomers@omz13.com>
NOT BUG:make some internal functions static; patch supplied by Kurt Roeckx
NOT BUG:fix typos
NOT BUG:PR: 1280
NOT BUG:Fix from stable branch
NOT BUG:Fix warnings
NOT BUG:shorter filenames
NOT BUG:use asn1 callbacks for new free and d2i
NOT BUG:don't use the l length modifier for int
NOT BUG:use stricter prototypes fix warnings
NOT BUG:fix warning: add missing prototype
NOT BUG:fix warning
NOT BUG:fix typo: pass pre-computed parameters to the underlying signature function; thanks to Lucas Newman
NOT BUG:*** empty log message ***
NOT BUG:make update
BUG:time stamp Makefile test files Submitted by: Zoltan Glozik <zglozik@opentsa.org>
NOT BUG:RFC 3161 compliant time stamp request creation response generation and response verification
BUG:Submitted by: Zoltan Glozik <zglozik@opentsa.org> Reviewed by: Ulf Moeller
NOT BUG:Minor clarification
NOT BUG:Add FAQ about AKID
NOT BUG:Document the building macros
NOT BUG:As an effect of revisions 1.261 BUILD_CMD was changed so $(DIRS) wasn't respected when using it to build different parts of OpenSSL 1.269 was an attempt to correct that but unfortunately meant that we built every part that was given i $(DIRS) 7 times This change puts back the original intent with BUILD_CMD via the new macro BUILD_ONE_CMD while keeping the intent with RECURSIVE_BUILD_CMD
BUG:Fix warnings about "sin" conflicting with sin(3) definition
NOT BUG:Avoid warnings about shadowed definitions
NOT BUG:Update from 0.9.7-stable
NOT BUG:remove unnecessary check
NOT BUG:p could be uninitialized
NOT BUG:move new member of SSL_SESSION to the end (minimize changes to binary format)
BUG:Submitted by: Peter Sylvester
NOT BUG:Update filenames in makefiles
NOT BUG:Recognize mingw in perlasm
NOT BUG:fix if statement: call conn_state() if the BIO is not in the BIO_CONN_S_OK state
NOT BUG:Ignore zero length constructed segments
NOT BUG:Typo
NOT BUG:Submitted by: Girish Venkatachalam <girish1729@gmail.com>
NOT BUG:add additional checks + cleanup
NOT BUG:Submitted by: David Hartman <david_hartman@symantec.com>
NOT BUG:Fixes for BOOL handling: produce errors for invalid string for mini-compiler correctly encode FALSE for BOOL in ASN1_TYPE
NOT BUG:recent changes from 0.9.8: fix cipher list order in s3_lib.c make "no-ssl2" work again
NOT BUG:PR: 1217
NOT BUG:Fix from stable branch
NOT BUG:Typo
NOT BUG:Update from stable branch
NOT BUG:signed vs unsigned clash
BUG:support numeric strings in ASN1_generate_nconf
NOT BUG:fix comment
NOT BUG:PR: 1270
NOT BUG:2 is a prime
NOT BUG:PR: 1266
NOT BUG:Further TLS extension improvements
BUG:Submitted by: Peter Sylvester
NOT BUG:Forgot to initialize CC6DISABLEWARNINGS properly..
NOT BUG:Typo..
NOT BUG:improvements for alert handling
NOT BUG:More TLS extension related changes
BUG:Submitted by: Peter Sylvester
NOT BUG:Further TLS extension updates
BUG:Submitted by: Peter Sylvester
NOT BUG:Disable the Mixed Linkage warning for some selected modules This is because the Compaq C compiler will not accept that a variable be declared extern then defined static without a warning
NOT BUG:Avoid contradictive error code assignments "make errors"
NOT BUG:Detect more errors Change assignment strategy: rathern than using max+r for new codes find first hole in list of existing codes
NOT BUG:Detect SSL error code mishandling
NOT BUG:include max codes in debug output
NOT BUG:Some error code cleanups (SSL lib used SSL_R_.. codes reserved for alerts)
NOT BUG:There's no such things as DTLS1_AD_MISSING_HANDSHAKE_MESSAGE For now anyway
NOT BUG:prepare for additional RFC3546 alerts
NOT BUG:make sure that the unrecognized_name alert actually gets sent
BUG:Submitted by: Peter Sylvester
NOT BUG:complete and correct RFC3546 error codes
NOT BUG:Fixes for TLS server_name extension
BUG:Submitted by: Peter Sylvester
NOT BUG:Add names for people who provided the TLS extension patch
NOT BUG:The VMS I run on doesn't know socklen_t and uses size_t instead
NOT BUG:Fix signed/unsigned char clashes
NOT BUG:In ASN1_parse() show tag value for ASN1 tags > 30
NOT BUG:Various changes in the new TLS extension code including the following: - fix indentation - rename some functions and macros - fix up confusion between SSL_ERROR_.. and SSL_AD_.. values
NOT BUG:Make sure that after the change from revision 1.261 it's still possible to do a partial build
NOT BUG:Missing files in the VMS installation
NOT BUG:C style fix-up
NOT BUG:Support TLS extensions (specifically HostName)
BUG:Submitted by: Peter Sylvester
BUG:Refine login in b_sock.c
NOT BUG:Compile Windows with winsock2.h But note that we still link with wsock32! This works because wsock32 commonly loads ws2_32 anyway and we [intend to] check upon presense of winsock2-specific API at run-time
NOT BUG:Fix typo and purify logic in b_sock.c
NOT BUG:./util update which covers various issues but most importantly mkerr.pl and mkdef.pl spinning in endless loop
NOT BUG:Typo in win32_globallookup
NOT BUG:Make b_sock.c IPv6 savvy
NOT BUG:"Relax" prototype and rename DSO_global_lookup_func to DSO_global_lookup
NOT BUG:util/mkerr.pl update to address various mkerr.pl problems [such as failure to handle multi-line comments and endless loop while parsing overloaded gnu-ish __attribute__]
NOT BUG:Fix mapping "leak" in newly introduced win32_globallookup
NOT BUG:Oops! Remove junk..
BUG:Rewrite timeout computation in a way that is less prone to overflow
NOT BUG:(Problem reported by Peter Sylvester.)
NOT BUG:Add DSO_global_lookup_func implementation See commentary in dso_lib.c for further details
NOT BUG:Fix CFB and OFB modes in eng_padlock.c Engine was consistent with itself but not interoperable with the rest of the world test_padlock script is added mostly for reference
NOT BUG:Minor sparcv9 clean-ups
NOT BUG:Lower PADLOCK_CHUNK till value which doesn't affect the benchmark results Well it's even contrary 512 was observed to *improve* performance by 5% Excuse ourselves from treating C7 specially
NOT BUG:Whoops we were copying instead of comparing at the end of trying to find a queue element
BUG:Notified by nagendra modadugu <nagendra@cs.stanford.edu>
NOT BUG:As SPARCV9 CPU flavor is [expected to be] detected at run-time we can afford to relax SPARCV9/8+ compiler command line and produce "unversal" binaries as we used to
NOT BUG:comments
NOT BUG:Eliminate possible mapping leak
NOT BUG:Typo in sparcv8cap.c
NOT BUG:Keep disclaiming 16-bit platform support For now remove WIN16 references from .h files..
NOT BUG:Missing CFLAG in couple of depend: targets PR: 1247 Submitted by: Doug Kaufman
NOT BUG:Put back OPENSSL_SYS_MSDOS definition to revive DJGPP built PR: 1247
BUG:Make bio.h resistant to gnu-ish __attribute__ redefenitions PR: 1252
BUG:Fix typos in osf1 shared rules PR: 1248 Submitted by: Nikola Milutinovic
NOT BUG:Unify sparcv9 assembler naming and build rules among 32- and 64-bit builds Engage run-time switch between bn_mul_mont_fpu and bn_mul_mont_int
NOT BUG:Make framework for Whirlpool assembler flexible
NOT BUG:Engage Whirlpool assembler and mention Whirlpool in CHANGES
NOT BUG:Make room for Whirlpool assembler in Configure
NOT BUG:Allow for warning-free passing of -Wl options on config command line One possible usage is to pass -Wl,-z,-noexecstack on Linux to ensure the stack is marked non-executable Well -Wa,--noexecstack works fine too..
NOT BUG:Mention bn(64,64) to bn(64,32) switch on 64-bit SPARCv9 targets in CHANGES
NOT BUG:We all make typos:-) Fix just introduced ones in bn.h
NOT BUG:Eliminate warning induced by http://cvs.openssl.org/chngview?cn=14690 and keep disclaiming narrower than 32-bit support
NOT BUG:To exclude contention for shared FPU on T1 trade 3% of DES performance
NOT BUG:sparccpuid module update
NOT BUG:Add IALU-only bn_mul_mont for SPARCv9 See commentary section for details
NOT BUG:Switch 64-bit sparcv9 platforms from bn(64,64) to bn(64,32) This doesn't have impact on performance because amount of multiplications does not increase with this switch not on sparcv9 that is On the contrary it actually improves performance because it spares a load of instructions used to chase carries Not to mention that BN assembler modules can be shared more freely between 32- and 64-bit builts
NOT BUG:Allow for bn(64,32) on LP64 platforms
NOT BUG:update TLS-ECC code
BUG:Submitted by: Douglas Stebila
NOT BUG:comment
NOT BUG:Minor aes-sparcv9.pl optimization
NOT BUG:Engage AES for UltraSPARC in sparcv9 targets
NOT BUG:Revoke the option to share AES S-boxes between C and assembler It wastes space but gives total flexibility [back]
NOT BUG:Initial draft for AES for UltraSPARC assembler
NOT BUG:Support for indirect calls in x86 assembler modules
NOT BUG:Add cpuid code to VC++ build
NOT BUG:Don't include zlib header dir if it is not defined
NOT BUG:Fix typos in wp-mmx.pl
NOT BUG:Initial attempt at Whirlpool assembler support on VC++
NOT BUG:Avoid warnings on VC++ 2005
NOT BUG:Update from 0.9.8-stable
NOT BUG:Update from stable branch
NOT BUG:Make mk1mf.pl and friends recognize Whirlpool
NOT BUG:Make ZLIB without ZLIB_SHARED compiled again
NOT BUG:Couple other benchmark comparisons for wp-x86_64.pl
NOT BUG:x86cpuid.pl update
NOT BUG:Oops..
NOT BUG:Update ordinals and include changes from 0.9.8
NOT BUG:New functions to support opaque EVP_CIPHER_CTX handling
NOT BUG:Add error checking to avoid crashing when zlib cannot be loaded
NOT BUG:Include EVP_whirlpool() prototype in evp.h
BUG:wq instead of wp? That's gotta be among the more amazing typos I've made..
NOT BUG:Whirlpool was added to EVP so let's build it on VMS as well
NOT BUG:Whirlpool for x86_64
NOT BUG:Mention Whirlpool in dgst -help
NOT BUG:Add Whirlpool to EVP
NOT BUG:Adapt Whirlpool API for EVP
NOT BUG:Fix typos in wp-mmx.pl
NOT BUG:Typo
NOT BUG:Make CA.pl script use CA extensions when creating a root CA
NOT BUG:Build Whirlpool on VMS as well
NOT BUG:Add Whirlpool OID
NOT BUG:Remove development leftover from whrlpool/asm/wp-mmx.pl
NOT BUG:Add missing Makefile and fix couple of typos in commentary
NOT BUG:Whirlpool hash implementation The fact that subdirectory and .h file are called whrlpool is not a typo but a way to keep the names shorter than 8 characters Remaining TODO list comprises adding OID EVP corresponding flag to apps/openssl dgst benchmark engage assembler..
NOT BUG:When using POSIXly functions we need to define _POSIX_C_SOURCE at least when the source is compiled with ANSI settings
NOT BUG:Extensive OID code enhancement and fixes
NOT BUG:Synchronise with the Unix build
NOT BUG:deFUDify: don't require OPENSSL_EC_BIN_PT_COMP
NOT BUG:disable some invalid ciphersuites
NOT BUG:deFUDify: don't require OPENSSL_EC_BIN_PT_COMP
BUG:Keep shutting up VC8 PR: 1243
BUG:Apply "better safe than sorry" approach after addressing sporadic SEGV in bn_sub_words to the rest of the sparcv8plus.S
BUG:Attempt to resolve sporadic SEGV crashes in bn_sub_words in OpenSSH I'm baffled why it crashes and does it sporadically..
NOT BUG:Update from stable branch
NOT BUG:Throw in comment so that one doesn't get tempted to optimize it away
NOT BUG:Avoid end-less loop when libcrypto.a is manually deleted but 'make clean' was not executed It doesn't excuse user from running 'make clean' it simply avoids process table exhaustion PR: 1236 Submitted by: Michael Richardson
NOT BUG:Mention PROBLEMS in FAQ
NOT BUG:AIX -blibpath is not accumulative one apparently has to specify even self-obvious /usr/lib:/lib PR: 1239
NOT BUG:Minor perlasm clean-up
NOT BUG:Tidying up WinCE support
NOT BUG:Improve cross-compiler portability of applink.c module and mention CRYPTO_malloc_init in FAQ
NOT BUG:Update docs
NOT BUG:Update from stable branch
BUG:One of Win64 rules lacked bufferoverflowu.lib
NOT BUG:Move declaration for optional bn_mul_mont to bn_lcl.h in order to hide it from mkdef.pl
NOT BUG:Address MASM-specific problems introduced with http://cvs.openssl.org/chngview?cn=14547
NOT BUG:Eliminate VC compiler warning
NOT BUG:First draft for WCE PortSDK support Once again! It's *draft* which requires more work i.e more modifications are due..
NOT BUG:Make DLL engines the default in 0.9.9 and VC++
NOT BUG:Add symbols for ASN1 print functions update ordinal file
NOT BUG:Update from stable branch
BUG:Revive app_tminterval for Netware
BUG:Revive app_tminterval for vxworks
BUG:Revive app_tminterval for VMS
NOT BUG:Keep removing references to tmdiff
NOT BUG:The typos never stop Fix one in apps/apps.c
NOT BUG:x86_64-xlate.pl commentary section update
NOT BUG:Fix newly introduced typos and warnings in ./apps
NOT BUG:Collect timing procedures in apps/apps.c It's a bit cruel patch as it temporarily[!] removes support for couple of esoteric platforms [well Netware vxWorks and VMS]
NOT BUG:Eliminate crypto/tmdiff.[ch]
NOT BUG:Eliminate remaining calls to stat in apps/apps.c and unify WIN32_rename for all Windows targets
NOT BUG:Eliminate dependency on read/write/stat in apps under _WIN32
NOT BUG:Engage OPENSSL_NO_POSIX_IO on Windows CE
NOT BUG:Make cygwin work in directories mounted with 'text' attribute
NOT BUG:Get rid of arcane reference to _fmode in apps/apps.h Binary open is handles properly by bss_file.c which renders _fmode redundant
NOT BUG:Mask libcrypto references to stat with OPENSSL_NO_POSIX_IO
NOT BUG:Reserve for OPENSSL_NO_POSIX_IO macro which is to eliminate references to open/read/write/close First OPENSSL_NO_POSIX_IO target would be Windows CE
NOT BUG:Disable BIO_s_fd on CE and disable fd:N as password passing option on all _WIN32 [see commentary for clarification]
NOT BUG:Make pshufw optional and update performance table in sha512-sse2.pl [as per http://cvs.openssl.org/chngview?cn=14551]
NOT BUG:fix typo pointed out by Patrick Guio
BUG:compile sstrsep only if HAVE_FORK is defined; patch supplied by Johan Gill <johane@lysator.liu.se>
NOT BUG:Document it
NOT BUG:Fix numerous bugs in the Win32 path splitter
NOT BUG:A slight change in documentation that makes it so much more comprehensible
NOT BUG:Include kerberos libraries (if used) when linking test apps: some need it
NOT BUG:Add -install_name in link_a.darwin rule PR: 1218
NOT BUG:Add fixes for CAN-2005-2969 (This were in 0.9.7-stable and 0.9.8-stable but not in HEAD so far.)
NOT BUG:fix stupid typo
NOT BUG:harmonize with 0.9.7-stable and 0.9.8-stable variants of CHANGES
NOT BUG:Fix install problems on MacOS X and HP-UX PR: 1218,1185
NOT BUG:+20% SHA512 performance improvement on x86
NOT BUG:Eliminate false preprocessor dependencies introduced with VOS support
NOT BUG:Fix typos in macos x targets
NOT BUG:Eliminate ~3.5KB of duplicate code in des-586.pl and reserve for folded loop option which can give further 3KB code reduction
NOT BUG:Move DES_SPtrans to where it really belongs dec_enc to be specific
NOT BUG:Clarify binary compatibility with HAL/Fujitsu SPARC64 family
NOT BUG:Integrate sparcv9a-mont.pl into UltraSPARC builds
NOT BUG:bn_asm.c update
NOT BUG:Eliminate gcc warning in bn_mont.c
NOT BUG:Add support for 32-bit ABI to sparcv9a-mont.pl module
NOT BUG:Change bn_mul_mont declaration and BN_MONT_CTX Update CHANGES
NOT BUG:Add rudimentary aix64-gcc target
NOT BUG:Submitted by: Stefan Neis
NOT BUG:util/pl/OS2-EMX.pl sync
NOT BUG:Submitted by: Stefan Neis Brian Havard
NOT BUG:one time CAN->CVE update
NOT BUG:Yet another "teaser" Montgomery multiply module for UltraSPARC It's not integrated yet but it's tested and benchmarked [see commentary section for further details]
NOT BUG:Add in CHANGES for 0.9.7i
NOT BUG:Flip saved argument block and tp [required for non-SSE2 path]
NOT BUG:Make sure x86-mont.pl returns zero even if compiled with no-sse2
NOT BUG:Fix bug in SMALL_FOOTPRINT path and clarify comment
NOT BUG:Broaden compatibility amount Win32 headers even further [some don't have SIZE_T]
NOT BUG:Make sure head CHANGES is up to date we refer to this in announce.txt
BUG:Renumber to follow what happens with 0.9.8
NOT BUG:Add timestamp to x86-mont.pl
NOT BUG:Throw in bn/asm/x86-mont.pl Montgomery multiplication "teaser"
NOT BUG:Add PVK support to dsa utility
NOT BUG:Avoid warning on Win32
NOT BUG:New option SSL_OP_NO_COMP to disable compression New ctrls to set maximum send fragment size Allocate I/O buffers accordingly
NOT BUG:x86_64-mont.pl readability improvement
NOT BUG:Throw in Montgomery multiplication assembler for x86_64
NOT BUG:Refine logic in bn_mont.c and eliminate redundant BN_CTX pulls
BUG:Leave the decision to call/implement bn_sqr_mont to assembler developer
NOT BUG:Initialize bignum constants using BN_bin2bn() instead of BN_hex2bn() This saves a bit of space and avoids a compiler warning about string length
NOT BUG:Mention "no-dso doesn't remove -ldl" in PROBLEMS PR: 1160
NOT BUG:Fix typo in INSTALL.WCE
BUG:Zap DES_UNROLL when SMALL_FOOTPRINT is in effect
NOT BUG:Fix typo in exptest.c
NOT BUG:Reserve for SMALL_FOOTPRINT bn_asm.c Currently OPENSSL_SMALL_FOOTPRINT is defined on Windows CE targets
BUG:Add reference implementation for bn_[mul|sqr]_mont new candidates for assembler implementation
NOT BUG:Oops :-)
NOT BUG:Make OPENSSL_NO_COMP work under Win32
NOT BUG:new option "openssl ciphers -V"
NOT BUG:Fix compilation without OPENSSL_NO_COMP :-)
NOT BUG:Make OPENSSL_NO_COMP compile again
NOT BUG:successfully updating the db shouldn't result in an error message
NOT BUG:Fix typo
NOT BUG:Fix missing applink call
NOT BUG:Change a comment so it corresponds to reality Put back a character that was previously replaced with a NUL for parsing purposes This seems to fix a very weird parsing bug involving two variable references in the same value
NOT BUG:Update from stable branch
NOT BUG:protect BN_BLINDING_invert with a write lock and BN_BLINDING_convert with a read lock
NOT BUG:Submitted by: Leandro Santi <lesanti@fiuba7504.com.ar>
NOT BUG:Fix SunOS 4 building issue PR: 1196
NOT BUG:Broaden compatibility among Windows SDK versions Elder versions don't have ULONG_PTR so we replace it with equally wide SIZE_T
NOT BUG:128 bit AES ciphersuites should be classified as HIGH
NOT BUG:Latest MSVCR80 doesn't tolerate unsupported signal numbers throwing fatal exceptions
BUG:"Overload" SunOS 4.x memcmp which ruins ASN1_OBJECT table lookups PR: 1196 Submitted by: Russel Ruby
NOT BUG:IA-32 BN tune-up Performance imrpovement varies with platform and keylength this time larger improvement for shorter keys and reaches 15% Both SSE2 and IALU code pathes are improved
NOT BUG:Fix typo: "powepc" vs "powerpc." G-r-r-r-r PR: 1198
NOT BUG:MD5 x86_64 assembler update
BUG:Submitted by: Marc Bevand and Charles Liu
NOT BUG:Refine AIX support PR: 1198
NOT BUG:BC-32.pl updates
BUG:Submitted by: Old Wolf Jon Bright
NOT BUG:Proper solution to nasm compilation problems in Borland context
NOT BUG:Mention BN_sqr failure on x86 platforms in ./RPOBLEMS PR: 1176 [and others]
NOT BUG:Another missing space in VC-32.pl [from 0.9.8]
NOT BUG:Missing space in VC-32.pl
NOT BUG:Oops-type typo PR: 1195
BUG:bswapl usage should be masked by I386_ONLY PR: 1195
NOT BUG:cleanup doxygen comments
NOT BUG:add some doxygen comments
NOT BUG:Change openssl.cnf to use UTF8Strings by default and not always include issuer and serial versions of AKID
NOT BUG:Fix for Win32
NOT BUG:fix typos
NOT BUG:PR: 1201
NOT BUG:correct+extend publication info
NOT BUG:bugfix: register engine as default engine in ENGINE_set_default_DSA
BUG:Submitted by: Jonathon Green
NOT BUG:Remove warnings about signed vs unsigned..
NOT BUG:Synchronise VMS build with Unixly build
NOT BUG:fix function name in error
NOT BUG:Update print macro properly this time..
NOT BUG:Update ASN1 print implement macro
NOT BUG:Update asn1t.h too for ASN1 print
NOT BUG:Update to ASN1 printing code
NOT BUG:Two new verify flags functions
NOT BUG:fix typo in sbgp names
NOT BUG:PR: 1194
NOT BUG:don't try to load cert/key when the "-nocert" option is set
NOT BUG:Extend callback function to support print customization
NOT BUG:Return 2 from X509_NAME printing routine to add newline
NOT BUG:Update ASN1 printing code and add a -print option to 'pkcs7' utility for initial testing
NOT BUG:Synchronise with Unixly build
NOT BUG:Initial support for ASN1 print code
NOT BUG:WARNING WARNING WARNING experimental code handle with care use at your own risk may contain nuts
NOT BUG:Integrated support for PVK files
NOT BUG:Last synchronisationn with Unixly build I hope..
NOT BUG:fix warnings when building openssl with the following compiler options: -Wmissing-prototypes -Wcomment -Wformat -Wimplicit -Wmain -Wmultichar -Wswitch -Wshadow -Wtrigraphs -Werror -Wchar-subscripts -Wstrict-prototypes -Wreturn-type -Wpointer-arith -W -Wunused -Wno-unused-parameter -Wuninitialized
BUG:More synchronisation with the Unixly build
NOT BUG:Fix warnings
NOT BUG:Synchronise with Unix changes
NOT BUG:Keep cipher lists sorted in the source instead of sorting them at runtime thus removing the need for a lock Add a test to ssltest to verify that the cipher lists are sorted
NOT BUG:Generate primes too
NOT BUG:recent DH change does not avoid *all* possible small-subgroup attacks; let's be clear about that
NOT BUG:avoid potential spurious BN_free()
NOT BUG:Submitted by: David Heine <dlheine@suif.Stanford.EDU>
NOT BUG:initialize cipher/digest methods table in SSL_library_init() and hence remove the need for a lock
NOT BUG:add missing file
NOT BUG:Make D-H safer include well-known primes
NOT BUG:Fix warning
NOT BUG:Use correct date and filename
NOT BUG:Command line support for RSAPublicKey format
NOT BUG:Delete old ASN1_METHOD files
NOT BUG:Add file which includes new ASN1 NETSCAPE format for certificates
NOT BUG:Update from stable branch
NOT BUG:Remove ASN1_METHOD code replace with new ASN1 alternative
NOT BUG:New version of ASN1 print code still not compiled in though
NOT BUG:Let the TLSv1_method() etc functions return a const SSL_METHOD pointer and make the SSL_METHOD parameter in SSL_CTX_new SSL_CTX_set_ssl_version and SSL_set_ssl_method const
NOT BUG:Eliminate reference to removed platform line
NOT BUG:Pedantic polish to WCE-specific #if clause in ectest.c
NOT BUG:Fix typo in WCE section in VC-32.pl
NOT BUG:Mention wcecompat update INSTALL.WCE
NOT BUG:Fix Intel assembler warnings
NOT BUG:Suppress "deprecated" warnings introduced in VC8
NOT BUG:Add support for more recent WCE SDK
NOT BUG:a ssl object needs it's own instance of a ecdh key; remove obsolete comment
NOT BUG:remove unused internal foo_base_method functions
NOT BUG:Final(?) WinCE update
NOT BUG:avoid infinite recursion if dynamic engine isn't loaded
NOT BUG:Submitted by: Jonathon Green <jonathon_au@yahoo.com>
NOT BUG:Initialize SSL_METHOD structures at compile time This removes the need for locking code The CRYPTO_LOCK_SSL_METHOD lock is now no longer used
NOT BUG:fix potential memory leak + improved error checking
NOT BUG:PR: 1182
NOT BUG:Allow PKCS7_decrypt() to work if no cert supplied
NOT BUG:3-4 times better RSA/DSA performance on WIN64A target Well on AMD64 CPU EMT64T will hardly exhibit better performance..
NOT BUG:WCE update mostly typos
NOT BUG:PIC-ify SPARC assembler in alternative manner to eliminate dependency on OPENSSL_PIC macro
NOT BUG:Abstain from GUI calls in rand_win.c in NT service context
NOT BUG:WCE-specific update for VC-32.pl
NOT BUG:WCE-specific fix for cryptlib.c
NOT BUG:Keep disclaiming 16-bit support
NOT BUG:Optimize for space on embedded WCE
NOT BUG:Stick to -DWCE_PLATFORM_$wceplatf as that's what is apparently set by Visual Studio IDE
BUG:Eliminate bogus #if WCEPLATFORM!=MS_HPC_PRO [which by the way unconditionally invalidated the whole clause] and replace it with #if _WIN32_WCE>=210
NOT BUG:Type in OSF1 platform name
BUG:Implement complementary LoadLibraryA shim under WCE
BUG:Eliminate dependency on 3rd party wcedefs.mak
BUG:Fix #if _MSC_VER clause in aes_locl.h
NOT BUG:add comment
NOT BUG:remove unused variable
NOT BUG:improved error checking and some fixes
NOT BUG:PR: 1170 Submitted by: Yair Elharrar Reviewed and edited by: Nils Larsch
NOT BUG:Handle case where it==NULL
NOT BUG:Update ASN1 printing code Highly experimental not working properly (neither did the old code) and not compiled in yet..
NOT BUG:Add declaration for IDP ASN1 functions
NOT BUG:bytes_to_long_long isn't used anywhere any more so let's remove it entirely
BUG:I'm reversing this change as it seems the error is somewhere else
NOT BUG:Silence two more generated files
NOT BUG:add a .cvsignore
NOT BUG:"make update"
NOT BUG:Change my debug build for amd64
NOT BUG:Fix compilation when HAVE_LONG_LONG isn't defined
NOT BUG:Fix signed/unsigned warnings
NOT BUG:Fix PEDANTIC compilation using the same trick as elsewhere
NOT BUG:Fix 64-bit compilation when PQ_64BIT_IS_INTEGER isn't defined
NOT BUG:fix BN_mod_word and give a more reasonable return value if an error occurred
NOT BUG:Add support for setting IDP too
NOT BUG:Don't use @syntax for extended CRLDP format
NOT BUG:Allow setting of all fields in CRLDP Few cosmetic changes to output
BUG:Typo which prevents mult valued RDNs being created
NOT BUG:Commentary section update in sha512-x86_64.pl
NOT BUG:Unify VC-32.pl and VC-CE.pl scripts and update INSTALL.W32
NOT BUG:Pull up mkdef.pl from 0.9.8
NOT BUG:Eliminate gcc warning in dso_win32.c
NOT BUG:Engage SHA-256/-512 x86_64 assembler module
NOT BUG:SHA-256/-512 x86_64 assembler module
NOT BUG:Print out previously unsupported fields in CRLDP by i2r instead of i2v
NOT BUG:Cosmetic changes to IDP printout
NOT BUG:Initial print only support for IDP CRL extension
NOT BUG:Fix some signed/unsigned warnings
NOT BUG:set correct bn->top value
NOT BUG:the final byte of a pkcs7 padded plaintext can never be 0
NOT BUG:Submitted by: K S Sreeram <sreeram@tachyontech.net>
NOT BUG:Pedantic polish to aes-ia64 and sha512-ia64
NOT BUG:Pedantic polish to md5-ia64.S
NOT BUG:Syncronize BSD-ia64 with other IA64-based platforms
NOT BUG:Pedantic polish to rc4-ia64.pl
NOT BUG:Typo in version number
NOT BUG:Perl stylistic/cosmetic update for aes-x86_64.pl
NOT BUG:Fix bug [SHA1 IA-64 being disabled] introduced with Stratus VOS update PR: 1130
NOT BUG:Engage MD5 assembler module
NOT BUG:This update gets endianness-neutrality right and adds second required entry point md5_block_asm_data_order
NOT BUG:MD5 IA-64 assembler implementation Original copy for reference purposes
NOT BUG:Submitted by: David Mosberger
NOT BUG:Obtained from: http://www.hpl.hp.com/research/linux/crypto/
NOT BUG:Retire original rc4-ia64.S
NOT BUG:Switch to new RC4 IA-64 module
NOT BUG:This update implements following improvements
NOT BUG:1 Original submission required minor modification to RC4_set_key which we don't want to tolerate and therefore we fix assembler instead 2 Eliminate remaining byte-order dependence [look for RC4_BIG_ENDIAN] 3 Eliminate logical error [when key->x is referred prior key is verified] 4 HP-UX assembler puked on MODSCHED_RC4 macro with "syntax error," macro has to be splitted in two 5 Deploy parallel compare in function prologue 6 Eliminate redundant instuctions and nops 7 Eliminate assembler warnings
NOT BUG:Unrolled RC4 IA-64 loop gives 40% improvement over current assembler implementation [as predicted]
NOT BUG:Submitted by: David Mosberger
NOT BUG:Obtained from: http://www.hpl.hp.com/research/linux/crypto/
NOT BUG:Fix unwind directives in IA-64 assembler modules This helps symbolic debugging and doesn't affect functionality
NOT BUG:Submitted by: David Mosberger
NOT BUG:Obtained from: http://www.hpl.hp.com/research/linux/crypto/
NOT BUG:~15% better AES x86_64 assembler
NOT BUG:fix typo
NOT BUG:bugfix: 0 - w (w != 0) is actually negative
NOT BUG:make ./configure no-deprecated [no-dsa] [no-dh] [no-ec] [no-rsa] make depend all test work again
BUG:PR: 1159
NOT BUG:add missing entries for "-multivalue-rdn" and "-utf8" in ca.pod and req.pod
NOT BUG:PR: 1158 Submitted by: Michael Bell <michael.bell@cms.hu-berlin.de>
NOT BUG:Commentary section update
NOT BUG:the second argument of d2i_X509 d2i_X509_CRL and d2i_X509_REQ is const
NOT BUG:PR: 1156 Submitted by: Michael Bell <michael.bell@cms.hu-berlin.de>
NOT BUG:complementary x86_64-xlate.pl update
NOT BUG:AES x86_64 assembler implementation
NOT BUG:Latest Intel compiler means every word in "if copying [with memcpy] takes place between objects that overlap the behavior is undefined." It's hard to comprehend but it reportedly manages to be case
NOT BUG:On case insensitive systems 'install' gets mixed up with the existing file 'INSTALL' so we need to put some force into installing
NOT BUG:Changes from the 0.9.8 branch
NOT BUG:Changes from the 0.9.8 branch
NOT BUG:CHANGES and TABLE sync with 0.9.8
NOT BUG:Pull up Win64 support from 0.9.8
NOT BUG:Add libcrypto.pc and libssl.pc and install them along with openssl.pc
NOT BUG:PR: 1143
NOT BUG:Update from stable branch
NOT BUG:The private key should never have ended up in newreq.pem Now it ends up in newkey.pem instead
NOT BUG:Fix bugs in bug-fix to x509/by_dir.c PR: 1131
NOT BUG:Trap condition should be 64-bit when it's due
NOT BUG:More elegant solution to "sparse decimal printout on PPC" problem
NOT BUG:Decimal printout of a BN is wrong on PPC it's sparse with very few significant digits As soon it verifies elsewhere it goes to 0.9.8 and 0.9.7
NOT BUG:initialize newly allocated data
NOT BUG:PR: 1145
NOT BUG:Pedantic polish to aes-586.pl:-)
NOT BUG:Typos in commentary section
NOT BUG:AES_cbc_encrypt to allow end-user to retain small blocks performance by aligning the key schedule in a specific manner
NOT BUG:Check PKCS7 structures in PKCS#12 files are of type data
BUG:Actually the 64bit format specifier differs between SIXTY_FOUR_BIT and SIXTY_FOUR_BIT_LONG
BUG:Brought forward from 0.9.8 - 64 bit warning fixes and fussy compiler fixes
NOT BUG:Fix warnings
NOT BUG:asn1parse doesn't support any TXT format so let's stop pretending it does
NOT BUG:remove OPENSSL_NO_ASM dependency
NOT BUG:Replace _int64 with __int64 which is more widely accepted among Win32 compiler vendors
NOT BUG:A report suggests that there're nasm version which defaults to 16-bit segmenting..
NOT BUG:Mention hpux64-ia64-cc blowfish failure in PROBLEMS
NOT BUG:There are a few showstoppers Unfortunately I only remember one Please fill this in
NOT BUG:Eliminate dependency on UNICODE macro
NOT BUG:Fix typos in apps/apps.c
NOT BUG:Sync libeay.num
NOT BUG:Unify some SCO targets
NOT BUG:Minor (final?) Makefiles polish
NOT BUG:Minimum requirement for Solaris x86 was always Pentium Reflect this in Configure line TABLE update accomodates other recent ./Configure changes..
NOT BUG:Omit padding in RC4_KEY on IA-64 The idea behind padding was to reserve room for aligning of the key schedule itself [specific alignment is required for future performance improvements] but OpenSSH "abuses" our API by making copies and restoring RC4_KEY thus ruining the alignment and making it impossible to recover the key schedule PR: 1114
NOT BUG:Updated status from 0.9.8-stable
BUG:Replace emms with finit in x86cpuid
NOT BUG:Add Argen root CAs
BUG:Someone did some cutting and pasting and didn't quite finish the job :-)
BUG:Notified by Steffen Pankratz <kratz00@gmx.de>
BUG:Wrap the inclusion of openssl/engine.h with a protective check for the absence of OPENSSL_NO_ENGINE
BUG:Wrap the inclusion of openssl/engine.h with a protective check for the absence of OPENSSL_NO_ENGINE
NOT BUG:PR: 1123
NOT BUG:Do not defined des_crypt() since it clashes with Solaris crypt.h
NOT BUG:PR: 1125
NOT BUG:Initialise dir to avoid a compiler warning
NOT BUG:The NAME section of a man page is required to have a dash followed by a short description at least according to pod2man
NOT BUG:PR: 1127
NOT BUG:DCC doesn't like argument names in returned function pointers
BUG:PR: 1122
BUG:Update for Stratus VOS
BUG:PR: 1130
BUG:Configure update for Stratus VOS
BUG:PR: 1129
NOT BUG:Change dir_ctrl to check for the environment variable before using the default directory instead of the other way around
BUG:PR: 1131
NOT BUG:Strip the engine shared libraries as well
NOT BUG:Submitted by Corinna Vinschen <vinschen@redhat.com>
NOT BUG:Darwin specific update for Configure and Makefile.shared
NOT BUG:Missed -c in IRIX rules
NOT BUG:Typo in bn-mips3 rule
NOT BUG:Rename mips3.o to bn-mips3.o [it's better in long run] and adjust the rule to accomodate gcc4 which no longer support SGI as
NOT BUG:HP-UX specific updates to Makefile.org and Makefile.shared
BUG:Jumbo Makfiles update
NOT BUG:- eliminate ambiguities between GNU-ish and SysV-ish make flavors; - switch [back] to -e; - fold/unify rules;
BUG:This is follow-up to the patch introducing common BUILDENV Idea is to collect as much parameters in $(TOP) as possible and "strip" lower Makefiles for most variables [and thus makes them more readable]
NOT BUG:no-asm didn't prevent make from compiling assembler modules
NOT BUG:TABLE was out-of-sync
NOT BUG:Solaris-specific Makefile.shared update from 098
NOT BUG:Typo
NOT BUG:Fix extension ordering
NOT BUG:Do no try to pretend we're at the end of anything unless we're at the end of a 4-character block
NOT BUG:Check for 'usage' and 'Usage' Submitted by Tim Rice <tim@multitalents.net> His comment is:
NOT BUG:I noticed "make report" didn't show the cc version on most of my System V platforms This patch corrects this
NOT BUG:Fix typo in ssl/d1_pkt.c
NOT BUG:Refine ELF detection on BSD platforms
NOT BUG:Solaris x86_64 /usr/ccs/bin/as support
BUG:Handle wrap-arounds and revive missing assignment
NOT BUG:Add crypto/bn/bn_prime.h to the collection of generated files In the update target place the dependency on depend last so all necessary files are generated *before* the dependencies are figured out
NOT BUG:PR: 1121
NOT BUG:With DJGPP it seems like the return code from grep even when in the middle of a pipe is noted Counter that by forcing a true return code when the return code has no importance
NOT BUG:PR: 1085
BUG:Undefine DECRANDOM before redefining it
BUG:PR: 1110
NOT BUG:Add better documentation on how id_function() should be defined and what issues there are
BUG:PR: 1096
NOT BUG:Move the definition of DEVRANDOM for DJGPP from Configure to e_os.h That should solve the issues with propagating it through the Makefiles
BUG:PR: 1110
NOT BUG:Only define ZLIB_SHARED if it hasn't already been defined (on the command line for example)
NOT BUG:PR: 1112
NOT BUG:Have pod2man.pl accept '=for comment ...' before the '=head1 NAME' line
BUG:PR: 1113
NOT BUG:clear dso pointer in case of an error
NOT BUG:PR: 816
NOT BUG:update for the cswift engine: - fix the problem described in bug report 825 - fix a segfault when the engine fails to initialize - let the engine switch to software when keysize > 2048
NOT BUG:PR: 825 826 Submitted by: Frédéric Giudicelli
NOT BUG:Do not undefine _XOPEN_SOURCE This is currently experimental and will be firmed up as soon as it's been verified not to break anything
NOT BUG:0.9.8-beta5 works on Gentoo/arml but not /armb and works on Linux AMD64
NOT BUG:Data about which Cygwin versions 0.9.8-beta5 work on
BUG:0.9.8-beta5 works on SuSE 9.3
NOT BUG:0.9.8-beta5 works on Cygwin
NOT BUG:update FAQ
NOT BUG:0.9.8-beta5 works on VMS/Alpha
NOT BUG:Status update
BUG:Netware patch submitted by Verdon Walker" <VWalker@novell.com> in PR 1107 He says:
NOT BUG:This is a followup to the NetWare patch that was applied to beta3 It does the following:
NOT BUG:- Fixes a problem in the CLib build with undefined symbols
NOT BUG:- Adds the ability to use BSD sockets as the default for the OpenSSL socket BIO NetWare supports 2 flavors of sockets and our Apache developers need BSD sockets as a configurable option when building OpenSSL This adds that for them
NOT BUG:- Updates to the INSTALL.NW file to explain new options
NOT BUG:I have tried very hard to make sure all the changes are in NetWare specific files or guarded carefully to make sure they only impact NetWare builds I have tested the Windows build to make sure it does not break that since we have made changes to mk1mf.pl
NOT BUG:We are still working the gcc cross compile for NetWare issue and hope to have a patch for that before beta 6 is released
NOT BUG:Show what the offending target was
NOT BUG:PR: 1108
NOT BUG:replace the deprecated "-m486" gcc option with "-march=i486"
NOT BUG:PR: 1049
NOT BUG:- let SSL_CTX_set_cipher_list and SSL_set_cipher_list return an error if the cipher list is empty - fix last commit in ssl_create_cipher_list - clean up ssl_create_cipher_list
NOT BUG:Eliminate gcc -pedantic warnings
NOT BUG:Allow for dso load by explicit path on HP-UX
NOT BUG:When the return type of the function is int it's better to return an in than NULL especially when an error is signalled with a negative value
NOT BUG:use "=" instead of "|=" fix typo
NOT BUG:Avoid endless loops Really we were using the same variable for two different conditions..
BUG:ssl_create_cipher_list should return an error if no cipher could be collected (see SSL_CTX_set_cipher_list manpage) Fix handling of "cipher1+cipher2" expressions in ssl_cipher_process_rulestr
BUG:PR: 836 + 1005
NOT BUG:"Liberate" dtls from BN dependency Fix bug in replay/update
NOT BUG:Fix for padding X9.31 padding check and zero padding bytes
BUG:Allow BIO_s_file to open and sequentially access files larger than 2GB on affected platforms PR: 973
NOT BUG:FAQ to mention no-sha512 as option for compilers without support for 64-bit integer type
NOT BUG:Pass INSTALL_PREFIX in BUILDENV
NOT BUG:PR: 1100
NOT BUG:Skipping all tests just because one algorithm is disabled seems a bit harsch
BUG:PR: 1089
NOT BUG:Change mention of Makefile.ssl to Makefile
NOT BUG:_GNU_SOURCE needs to be defined before any standard header
NOT BUG:Update from 0.9.8-stable
NOT BUG:Further change pq_compat.h to generate the flag macros PQ_64BIT_IS_INTEGER and PQ_64BIT_IS_BIGNUM with the values 0 (for false) and 1 (for true) depending on which is true Use those flags everywhere else to provide the correct implementation for handling certain operations in q PQ_64BIT
NOT BUG:Document the change and update the version number (d'oh!)
NOT BUG:Remove the incorrect installation of '%{openssldir}/lib'
NOT BUG:PR: 1074
NOT BUG:Change pq_compat.h to trust the macros defined by bn.h a bit more and thereby provide better generic support for environments that do not have 64-bit integers Among others this should solve PR 1086
NOT BUG:gcc 2.95.3 on Ultrix supports long long
BUG:PR: 1091
NOT BUG:Correct typo ia64.o -> bn-ia64.o
BUG:PR: 1094
NOT BUG:Add support for the new Intel compiler icc Submitted by Keith Thompson <kst@sdsc.edu>
NOT BUG:PR: 1095
NOT BUG:Old typo..
NOT BUG:PR: 1097
BUG:Updated support for NetWare submitted by Verdon Walker <VWalker@novell.com>
NOT BUG:PR: 1098
NOT BUG:New function DSO_pathbyaddr to find pathname for loaded shared object by an address within it Tested on Linux Solaris IRIX Tru64 Darwin HP-UX Win32 few BSD flavors..
NOT BUG:Unify BSDi target
NOT BUG:./PROBLEMS to mention workarounds for ULTRIX build problems PR: 1092
NOT BUG:The macro THREADS was changed to OPENSSL_THREADS a long time ago
BUG:PR: 1096
NOT BUG:From 0.9.8-stable:
NOT BUG:handshake_write_seq is an unsigned short so treat it like one
NOT BUG:Use correct name for config file env variable
NOT BUG:Typo
NOT BUG:Update CHANGES
NOT BUG:Fix inconsistensy between 8 and HEAD
NOT BUG:PSS update [from 0.9.7]
NOT BUG:check return value
NOT BUG:Update from 0.9.7-stable
NOT BUG:Synchronise yet a little more with the Unixly build
NOT BUG:clear error queue on success and return NULL if no cert could be read
NOT BUG:PR: 1088
BUG:fix assertion
NOT BUG:Synchronise more with the Unix build
NOT BUG:changes from 0.9.8
NOT BUG:include opensslconf.h if OPENSSL_NO_* is used
NOT BUG:"Show" more respect to no-sha* config options PR: 1086
NOT BUG:Mention more GCC bugs in ./PROBLEMS
NOT BUG:Missing sparcv8.o rule PR: 1082
NOT BUG:Fix typo in ./config
NOT BUG:Platform update from 8-stable
NOT BUG:Platform update from 8-stable
NOT BUG:Merge from 0.9.8-stable
NOT BUG:Merge in the new news from 0.9.8-stable
NOT BUG:DJGPP changes Contributed by Doug Kaufman <dkaufman@rahul.net>
NOT BUG:pqueue and dtls uses 64-bit values Unfortunately OpenSSL doesn't have a uniform representation for those over all architectures so a little bit of hackery is needed
BUG:Contributed by nagendra modadugu <nagendra@cs.stanford.edu>
NOT BUG:Synchronise with Unixly build
NOT BUG:Change all relevant occurences of 'ncipher' to 'chil' That's what nCipher always wanted..
NOT BUG:Update from stable branch
NOT BUG:Change the source and output paths for 'chil' and '4758cca' engines so that dynamic loading is consistent with respect to engine ids
BUG:We have some source with \r\n as line ends DEC C informs about that and I really can't be bothered..
NOT BUG:Typo
NOT BUG:Add pss/x931 files
NOT BUG:Update from 0.9.7-stable Also repatch and rebuild error codes
NOT BUG:Use BN_with_flags() in a cleaner way
NOT BUG:Assing check_{cert,crl}_time to 'ok' variable so it returns errors on expiry
NOT BUG:make sure DSA signing exponentiations really are constant-time
NOT BUG:check BN_copy() return value
NOT BUG:Handle differences between engine IDs and their dynamic library names (and source files for that matter) by tolerating the alternatives It would be preferable to also change the generated shared library names but that will be taken up separately
NOT BUG:It seems like mkdef.pl couldn't quite understand that #ifdef OPENSSL_NO_SHA512 was still active when it came down to the functions mkdef.pl should really be corrected but that'll be another day..
NOT BUG:Typo correction
NOT BUG:DEC C complains about bad subscript but we know better so let's shut it up
NOT BUG:Be more consistent with OPENSSL_NO_SHA256
NOT BUG:OPENSSL_NO_SHA512 to mask even SHA512_CTX declaration This is done to make no-sha512 more effective on platforms which don't support 64-bit integer type of *any* kind
NOT BUG:Still SEGV trouble in .init segment under Solaris x86..
NOT BUG:When _XOPEN_SOURCE is defined make sure it's defined to 500 Required in http://www.opengroup.org/onlinepubs/007908799/xsh/compilation.html
NOT BUG:Notified by David Wolfe <dwolfe5272@yahoo.com>
NOT BUG:Default to no-sse2 on selected platforms
NOT BUG:Patches for Cygwin provided by Corinna Vinschen <vinschen@redhat.com>
BUG:Propagate BUILDENV into subdirectories
NOT BUG:Move _WIN32_WINNT definition from command line to e_os.h The change is inspired by VC6 failure report In addition abstain from taking screen snapshots when running in NT service context
NOT BUG:fix typo add prototype
NOT BUG:fix potential memory leak
NOT BUG:Submitted by: Goetz Babin-Ebell
NOT BUG:update ecdsa doc
NOT BUG:FAQ to mention no-sse2
NOT BUG:Update status information
NOT BUG:fix "dereferencing type-punned pointer will break strict-aliasing rules" warning when using gcc 4.0
NOT BUG:make the type parameter const when ID2_OF_const() is used
NOT BUG:FAQ update to mention Applink
NOT BUG:Don't emit SSE2 instructions unless were asked to PR: 1073
NOT BUG:Engage Applink in mingw Note that application-side module is not compiled into *our* aplpications That's because mingw is always consistent with itself Having library-side code linked into .dll makes it possible to deploy the .dll with user-code compiled with another compiler [which is pretty much the whole point behind Applink]
NOT BUG:Version changes where needed
NOT BUG:I just branched 0.9.8 so HEAD needs to be bumped to 0.9.9-dev
NOT BUG:The 0.9.8 branch is called OpenSSL_0_9_8-stable
NOT BUG:Engage Applink for VC builds
NOT BUG:Keep disclaming 16-bit support
NOT BUG:simplify EC_KEY_dup
NOT BUG:mdc2test is not built by default anymore
NOT BUG:fix memory leak (BIO_free_all needs pointer to first BIO)
NOT BUG:PR: 1070
NOT BUG:OPENSSL_Applink update
NOT BUG:Disclaim 16-bit support
NOT BUG:Move cryptlib.h prior bio.h Actually it makes sense to include cryptlib.h first everywhere in crypto and skip stdio.h and string.h [because it includes them]
NOT BUG:Improve shell portability of new rules in Makefile.shared
NOT BUG:Change wording for BN_mod_exp_mont_consttime() entry
NOT BUG:Further BUILDENV refinement further fool-proofing of Makefiles and [most importantly] put back dependencies accidentaly eliminated in check-in #13342
NOT BUG:Further BUILDENV clean-up 'make depend' is operational again
NOT BUG:ecc api cleanup; summary: - hide the EC_KEY structure definition in ec_lcl.c + add some functions to use/access the EC_KEY fields - change the way how method specific data (ecdsa/ecdh) is attached to a EC_KEY - add ECDSA_sign_ex and ECDSA_do_sign_ex functions with additional parameters for pre-computed values - rebuild libeay.num from 0.9.7
BUG:Implement fixed-window exponentiation to mitigate hyper-threading timing attacks
NOT BUG:BN_FLG_EXP_CONSTTIME requests this algorithm and this done by default for RSA/DSA/DH private key computations unless RSA_FLAG_NO_EXP_CONSTTIME/DSA_FLAG_NO_EXP_CONSTTIME/ DH_FLAG_NO_EXP_CONSTTIME is set
NOT BUG:Submitted by: Matthew D Wood Reviewed by: Bodo Moeller
NOT BUG:rebuild to synchronize with additions to 0.9.7 branch
NOT BUG:make update
NOT BUG:Make Makefile.shared quiet again
NOT BUG:Simplify shared rules link run-path into applications only
NOT BUG:Consolidate BUILDENV [idea is to keep all variables in one place]
NOT BUG:+20% performance improvement of P4-specific RC4_CHAR loop
BUG:Fool-proofing Makefiles
NOT BUG:Make update
NOT BUG:Make -CSP option work again in pkcs12 utility by checking for attribute in EVP_PKEY structure
NOT BUG:openssl_fcast should always be defined not just with DEBUG_SAFESTACK
NOT BUG:Some C compilers produce warnings or compilation errors if an attempt is made to directly cast a function of one type to what it considers and incompatible type In particular gcc 3.4.2
NOT BUG:Add new openssl_fcast macro to place functions into a form where the compiler will allow them to be cast
NOT BUG:The current version achives this by casting to: void function(void)
NOT BUG:Avoid warnings
NOT BUG:Fix from stable branch
NOT BUG:Typo
NOT BUG:fix msg_callback() arguments for SSL 2.0 compatible client hello (previous revision got this wrong)
NOT BUG:Move another item into ChangeLog.0_9_7-stable_not-in-head_FIPS
NOT BUG:Don't use the SSL 2.0 Client Hello format if SSL 2.0 is disabled with the SSL_OP_NO_SSLv2 option
NOT BUG:There must be an explicit way to build the .o!
NOT BUG:Move some entries from ChangeLog.0_9_7-stable_not-in-head to ChangeLog.0_9_7-stable_not-in-head_FIPS
NOT BUG:Fix more error codes
NOT BUG:(Also improve util/ck_errf.pl script and occasionally fix source code formatting.)
NOT BUG:use 'p' as conversion specifier for printf to avoid truncation of pointers on 64 bit platforms Patch supplied by Daniel Gryniewicz via Mike Frysinger <vapier@gentoo.org>
NOT BUG:PR: 1064
NOT BUG:give EC_GROUP_new_by_nid a more meanigful name: EC_GROUP_new_by_nid -> EC_GROUP_new_by_curve_name
NOT BUG:improve command line argument checking
NOT BUG:PR: 1061
NOT BUG:Comply with optimization manual (no data should share cache-line with code)
NOT BUG:Allow for 64-bit cache-line alignments in code segment
NOT BUG:Update util/ck_errf.pl script and have it run automatically during "make errors" and thus during "make update"
NOT BUG:Fix lots of bugs that util/ck_errf.pl can detect automatically Various others of these are still left to fix; that's why "make update" will complain loudly when run now
NOT BUG:rebuild (starting with state from 0.9.7-stable branch) to avoid clutter
NOT BUG:improve comment readability
NOT BUG:give EC_GROUP_*_nid functions a more meaningful name EC_GROUP_get_nid -> EC_GROUP_get_curve_name EC_GROUP_set_nid -> EC_GROUP_set_curve_name
NOT BUG:give EC_GROUP_*_nid functions a more meaningful name EC_GROUP_get_nid -> EC_GROUP_get_curve_name EC_GROUP_set_nid -> EC_GROUP_set_curve_name
NOT BUG:Eliminate "statement with no effect" warning when OPENSSL_assert macro is used with constant assertion
NOT BUG:I was incorrect about VMS/Alpha Defining BN_LLONG with SIXTY_FOUR_BIT could cause havoc so don't (it's lucky bn.h undefines BN_LLONG when SIXTY_FOUR_BIT is defined)
BUG:x86_64 assembler translator update
NOT BUG:Fix constants PR: 1059
NOT BUG:Since BN_LLONG will only be defined for Alpha/VMS and not VAX/VMS there's no need to undefine it here Then let's get a bit paranoid and not define BN_ULLONG on THIRTY_TWO_BIT machines when BN_LLONG isn't defined
NOT BUG:Actually C on VMS/Alpha knows very well what a long long is and knows how to make use of it So let's stop pretending the Alpha doesn't know long long..
NOT BUG:fix compiler warning; pow10 is also in math.h
NOT BUG:A few more fingerprints..
NOT BUG:Commentary update motivating code update in 0.9.7
BUG:x86_64 assembler translator update
NOT BUG:Cvs missed adapted module itself here it goes..
NOT BUG:Engage md5-x86_64 assembler module
NOT BUG:Throw in md5-x86_64 assembler
NOT BUG:Cygwin doesn't expose Win32 [not "officially"]
NOT BUG:Commentary update
NOT BUG:Cpuid modules updates
NOT BUG:remove false positive
NOT BUG:remove BN_ncopy it was only used in bn_nist.c and wasn't particular useful anyway
NOT BUG:rewrite of bn_nist.c disable support for some curves on 64 bit platforms for now (it was broken anyway)
NOT BUG:fix typo
NOT BUG:PR: 1054
NOT BUG:Rename amd64 modules to x86_64 and update RC4 implementation
BUG:x86_64 assembler translator update
NOT BUG:backport fix from the stable branch
NOT BUG:Redundant changes
NOT BUG:Add prototype
NOT BUG:Support for smime-type MIME parameter
NOT BUG:Remove false positives and resolve some of remaining ones
NOT BUG:Cygwin/mingw sync with stable
NOT BUG:Allow for ./config no-sha0 [from stable]
NOT BUG:Fold rules in test/Makefiles [from stable]
NOT BUG:Typo
NOT BUG:Don't attempt to parse nested ASN1 strings by default
NOT BUG:Some true positives fixed toss some false positives
NOT BUG:From branch OpenSSL_0_9_7-stable 2004-09-11 11:45:
NOT BUG:Makefile.ssl changed name to Makefile..
NOT BUG:From branch OpenSSL_0_9_7-stable 2004-08-11 22:34:
NOT BUG:Another missing module in the VMS build files.I believe this is the last though..
NOT BUG:All kinds of changes from branch OpenSSL_0_9_7-stable
NOT BUG:This one deserves a note In the change to CHANGES there's the following:
NOT BUG:+ NOTE: This is for the 0.9.7 series ONLY This hack will never + appear in 0.9.8 or later We EXPECT application authors to have + dealt properly with this when 0.9.8 is released (unless we actually + make such changes in the libcrypto locking code that changes will + have to be made anyway)
NOT BUG:That makes this one a false positive
NOT BUG:Remove a bunch of false positives and fix some true positives
NOT BUG:From branch OpenSSL_0_9_7-stable 2002-11-13 15:30:
NOT BUG:The loading functions should be static if we build a dynamic engine
NOT BUG:Remove a bunch of false positives fix one true positive
BUG:From branch OpenSSL_0_9_7-stable revision 1.1.4.1 2002-05-23 17:25:
NOT BUG:Forgot this file
NOT BUG:Use more efficient way to locate end of an ASN1 structure
NOT BUG:don't let BN_CTX_free(NULL) segfault
NOT BUG:remove false positive
NOT BUG:check return value of RAND_pseudo_bytes; backport from the stable branch
NOT BUG:remove some false positive
NOT BUG:hide the definition of ECDSA_METHOD and ECDSA_DATA (and mutatis mutandis for ecdh)
NOT BUG:add 192 bit prime curve to the command line options
NOT BUG:add reference to BN_BLINDING_new.pod
NOT BUG:avoid warnings when building on systems where sizeof(void *) > sizeof(int)
NOT BUG:Pointer to BN_MONT_CTX could be used uninitialized
NOT BUG:Synchronise with Unix build system
BUG:Increase offset for BIO_f_enc() to avoid problems with overlapping buffers when decrypting data
NOT BUG:Update default dependency flags
NOT BUG:Lots of Win32 fixes for DTLS
NOT BUG:1 "unsigned long long" isn't portable changed: to BN_ULLONG 2 The LL prefix isn't allowed in VC++ but it isn't needed where it is used 2 Avoid lots of compiler warnings about signed/unsigned mismatches 3 Include new library directory pqueue in mk1mf build system 4 Update symbols
NOT BUG:get rid of Makefile.ssl in util/
NOT BUG:no Makefile.ssl anymore
NOT BUG:add missing parentheses
NOT BUG:Change method_mont_p from (char *) to (BN_MONT_CTX *) and remove several casts
NOT BUG:Port BN_MONT_CTX_set_locked() from stable branch
NOT BUG:The function rsa_eay_mont_helper() has been removed because it is no longer needed after this change
NOT BUG:Stop unused variable warning
NOT BUG:Remove more false positives
NOT BUG:there's no such thing as Makefile.ssl anymore
NOT BUG:util/mk1mf.pl issues have been resolved
NOT BUG:Port from stable branch
NOT BUG:More false positives and cases covered by port of prime.c
NOT BUG:"PS" to Steve's commit (Port prime utility across from stable branch)
NOT BUG:Port prime utility across from stable branch
NOT BUG:add docu for BN_BLINDING functions
NOT BUG:some updates for the blinding code; summary: - possibility of re-creation of the blinding parameters after a fixed number of uses (suggested by Bodo) - calculatition of the rsa::e in case it's absent and p and q are present (see bug report #785) - improve the performance when if one rsa structure is shared by more than a thread (see bug report #555) - fix the problem described in bug report #827 - hide the definition ot the BN_BLINDING structure in bn_blind.c
NOT BUG:Remove more false positives
NOT BUG:Port from stable branch
NOT BUG:Remove more false positives
NOT BUG:Fix various incorrect error function codes
NOT BUG:("perl util/ck_errf.pl */*.c */*/*.c" still reports many more.)
NOT BUG:take OPENSSL_NO_DGRAM into account (via make update)
NOT BUG:let mkdef.pl know about OPENSSL_NO_DGRAM (which appears in the new file crypto/bio/bss_dgram.c)
NOT BUG:remove some functions from exported headers
NOT BUG:make update
NOT BUG:fix SSLerr stuff for DTLS1 code; move some functions from exported header <openssl/dtl1.h> into "ssl_locl.h"; fix silly indentation (a TAB is *not* always 4 spaces)
NOT BUG:Fixes for signed/unsigned warnings and shadows
NOT BUG:False positive removed
NOT BUG:Add DTLS support
NOT BUG:make depend
NOT BUG:remove false positive
NOT BUG:some more false positives to remove
NOT BUG:make update
NOT BUG:move some more entries into FIPS file
NOT BUG:Use OPENSSL_NO_CAST not OPENSSL_NO_CAST5 in e_old.c
NOT BUG:PR: 959
NOT BUG:Remove some more entries that are false positives or have been resolved by recent commits
NOT BUG:Sort out changes in FIPS and other changes collected in separate files (Also remove another "make update".)
NOT BUG:remove some more false positives
NOT BUG:remove some more false positives
NOT BUG:remove some more changes that came from HEAD
NOT BUG:fix editing error and remove a false positive
NOT BUG:update
NOT BUG:remove extra whitespace; fix link
NOT BUG:remove some false positives
NOT BUG:add recent changes; now this file is up-to-date
NOT BUG:bring up-to-date
NOT BUG:first step to melt down ChangeLog.0_9_7-stable_not-in-head :-)
NOT BUG:This is a collection of those CVS change log entries for the 0.9.7 branch (OpenSSL_0_9_7-stable) that do not appear similarly in 0.9.8-dev (CVS head)
NOT BUG:Some obvious false positives have been eliminated: e.g. we do not care about a simple "make update"; and we don't care about changes identified to the 0.9.7 branch that were explicitly identified as backports from head
NOT BUG:Eliminating all other entries (and finally this file) either as false positives or as things that should go into 0.9.8 remains to be done
NOT BUG:Avoid L1 cache aliasing even between key and S-boxes
NOT BUG:Flag changes in Configure and config too
NOT BUG:Update dependencies
NOT BUG:update
NOT BUG:Oops..
NOT BUG:Recognize zlib and krb5 options in mk1mf.pl
NOT BUG:make asn.1 field names const
NOT BUG:change prototype of the ecdh KDF: make input parameter const and the outlen argument more flexible
NOT BUG:Add debug target remove cast note possible bug
NOT BUG:Add prototypes
NOT BUG:more const
NOT BUG:make update
NOT BUG:- use BN_set_negative and BN_is_negative instead of BN_set_sign and BN_get_sign - implement BN_set_negative as a function - always use "#define BN_is_zero(a) ((a)->top == 0)"
NOT BUG:Avoid aliasing between stack frames and S-boxes Compress prefetch code
NOT BUG:the pointer to the message digest is const
NOT BUG:Provide a default OPENSSL_ia32cap_loc for non-Intel platforms where util/libeay.num is important when building shared libraries like VMS
NOT BUG:Don't use standard kerberos library locations in MK1MF builds
NOT BUG:Fix typo in mk1mf.pl
NOT BUG:Make kerberos ciphersuite code compile again
NOT BUG:Avoid more shadow warnings
NOT BUG:Rename typed version of M_ASN1_get M_ASN1_get_x to avoid conflicts
NOT BUG:Remove more bogus shadow warnings
NOT BUG:Stop compiler warnings about deprecated lvalue casts
NOT BUG:Stop bogus shadowing warning
NOT BUG:Process MINFO file earlier in mk1mf.pl so it can modify variables like CFLAGS
NOT BUG:Process kerberos include and library options
NOT BUG:Handle similar mk1mf.pl options with a hash table
NOT BUG:signed vs unsigned
NOT BUG:Make sure id2_func is properly cast as well..
NOT BUG:signed vs unsigned
NOT BUG:Avoid compiler complaint about mismatched function signatures (void * != char *)
NOT BUG:Resolve signed vs unsigned
NOT BUG:Type mismatch detected by DEC C compiler void* != void**
NOT BUG:Avoid compiler complaint about mismatched function signatures (void * != RSA *)
NOT BUG:Fix logic in mkdef.pl function is_valid
NOT BUG:Update symbols
NOT BUG:Stop perl warning
NOT BUG:New "algorithm define" OPENSSL_NO_GMP Update mkdef.pl and Configure script to use it
NOT BUG:Ignore TYPEDEF_OF in mkdef.pl
NOT BUG:Update year
NOT BUG:Various Win32 and other fixes for warnings and compilation errors
NOT BUG:Fix Win32 build system to use 'Makefile' instead of 'Makefile.ssl'
NOT BUG:Throw in x86_64 AT&T to MASM assembler converter to facilitate development of dual-ABI Unix/Win64 modules
NOT BUG:Fix from stable branch
NOT BUG:Synchronise with ec/Makefile
NOT BUG:Mitigate cache-timing attack in CBC mode This is done by implementing compressed tables (2x compression factor) and by pre-fetching them into processor cache prior every CBC en-/decryption pass One can argue why just CBC? Well it's commonly used mode in real-life applications and API allows us to amortize the prefetch costs for larger data chunks..
NOT BUG:const fixes
NOT BUG:EVP_CIPHER_CTX_init is a void function + fix typo
NOT BUG:PR: 1044 + 1045
NOT BUG:Check return values of <Digest>_Init functions in low level digest calls
NOT BUG:Prototype mnemonics in padlock_verify_context for better portability [read support for Solaris assembler]
BUG:Fix for bug emerged in openvpn conext
NOT BUG:Final touch to mingw shared
NOT BUG:More cover-ups removing OPENSSL_GLOBAL/EXTERNS We can remove more..
NOT BUG:Addenum to http://cvs.openssl.org/chngview?cn=13054
NOT BUG:Final(?) touches to mingw shared support
NOT BUG:Zap OPENSSL_EXTERN on symbols which are not meant to be local to DLL
NOT BUG:Makefile.ssl -> Makefile
NOT BUG:Fix typos
BUG:Introduce OPENSSL_NONPIC_relocated to denote relocated DLLs
NOT BUG:Parameterize do_solaris rules in Makefile.shared
NOT BUG:Minor cryptlib.c update: compiler warnings in OPENSSL_showfatal and OPENSSL_stderr stub
NOT BUG:Update FAQ
NOT BUG:More overwritten stuff..
NOT BUG:Replace overwritten lines before error codes
NOT BUG:Rebuild error codes
NOT BUG:Include error library value in C error source files instead of fixing up at runtime
NOT BUG:include limits.h for UINT_MAX etc
NOT BUG:Add a NEWS item for 0.9.7g
NOT BUG:Add emacs cache files to .cvsignore
NOT BUG:Move allow_proxy_certs declaration to start of function
NOT BUG:Make kerberos ciphersuite code work with newer header files
NOT BUG:Added restrictions on the use of proxy certificates as they may pose a security threat on unexpecting applications Document and test
NOT BUG:add support for DER encoded private keys to SSL_CTX_use_PrivateKey_file() and SSL_use_PrivateKey_file()
NOT BUG:PR: 1035 Submitted by: Walter Goulet Reviewed by: Nils Larsch
NOT BUG:improve docu of SSL_CTX_use_PrivateKey()
NOT BUG:get rid of very buggy and very imcomplete DH cert support
NOT BUG:Reviewed by: Bodo Moeller
NOT BUG:make sure error queue is totally emptied
NOT BUG:PR: 359
NOT BUG:const fixes
NOT BUG:Recognize MSYS/MINGW environment
NOT BUG:Implement OPENSSL_showfatal and make it Win32 GUI and service aware [meaning that it will detect in which context application is running and either write message to stderr post a dialog or log an event]
NOT BUG:Harmonize cygwin/mingw and VC targets
BUG:+45% RC4 performance boost on Intel EM64T core Unrolled loop providing further +35% will follow..
BUG:Submitted by: Zou Nanhai
NOT BUG:some const fixes
NOT BUG:update progs.pl to reflect changes in progs.h
NOT BUG:fix example in docu
NOT BUG:PR: 800
NOT BUG:some const fixes and cleanup
NOT BUG:remove unused recp method
NOT BUG:Extend Solaris x86 support to amd64
NOT BUG:Solaris x86 linker erroneously pads .init segment with zeros instead of nops which causes SEGV at startup So I don't align anymore
NOT BUG:Some non-GNU compilers (such as Sun C) define __i386
NOT BUG:HISTORY section: point out change of default digest
NOT BUG:Make bn/asm/x86_64-gcc.c gcc4 savvy +r is likely to be initially introduced for a reason [like bug in initial gcc port] but proposed =&r is treated correctly by senior 3.2 so we can assume it's safe now PR: 1031
NOT BUG:If input is bad we still need to clear the buffer
NOT BUG:use SHA-1 as the default digest for the apps/openssl commands
NOT BUG:Typo
NOT BUG:really clear the error queue here
NOT BUG:PR: 860
NOT BUG:use SSL3_VERSION_MAJOR instead of SSL3_VERSION etc
BUG:PR: 658
NOT BUG:Consistency
NOT BUG:Add a file with fingerprints that have recently been used to sign OpenSSL distributions or are about to This has been requested a little now and then by users for years :-/..
BUG:Simplicate and add lightness
BUG:Get rid of irritating noise
NOT BUG:Give everything prototypes (well everything that's actually used)
NOT BUG:fix header
NOT BUG:Makefile.ssl doesn't exist anymore
NOT BUG:Take account of Makefile.ssl removal
NOT BUG:Make tags target useful
NOT BUG:Don't debug
NOT BUG:Blow away Makefile.ssl
NOT BUG:update docs (recent constification)
NOT BUG:Constification
NOT BUG:the second argument of EVP_SealInit is const
NOT BUG:when building with OPENSSL_NO_DEPRECATED defined BN_zero is a macro which cannot be evaluated in an if statement
NOT BUG:Harmonize with CHANGES as distributed in OpenSSL 0.9.7f
NOT BUG:undo Cygwin change
NOT BUG:Change the memory leak FAQ entry to describe the levels of thread safety in each function
NOT BUG:Update FAQ
NOT BUG:Doc fixes
NOT BUG:test remove unnecessary const cast
NOT BUG:Ensure (SSL_RANDOM_BYTES - 4) of pseudo random data is used for server and client random values
NOT BUG:There are cases when there are no files left to verify Make sure to handle that properly
NOT BUG:add new curves to the loop (with some cleanup from me)
NOT BUG:Submitted by: Jean-Luc Duval Reviewed by: Nils Larsch
NOT BUG:some const fixes
NOT BUG:Use Windows randomness code on Cygwin
NOT BUG:fix breakage for Perl versions that do boolean operations on long words
NOT BUG:typo
NOT BUG:Added HOWTO about proxy certificates
NOT BUG:"make depend" This takes into account the algorithms that are now disabled by default (MDC2 and RC5) which until now were skipped by "make links" and yet supposedly required by some of the Makefiles meaning that the recent snapshots failed to compile
NOT BUG:Problem reported by Nils Larsch
NOT BUG:It seems that Configure revision 1.404 broke "make depend" by hiding from it which algorithms were disabled With these new changes "make depend" will properly take into account algorithms that are skipped
NOT BUG:Cygwin to use DSO_FLFCN and mingw to use DSO_WIN32
NOT BUG:Avoid re-build avalanches with HP-UX make
NOT BUG:fix potential memory leak when allocation fails
NOT BUG:PR: 801 Submitted by: Nils Larsch
NOT BUG:Fix typo
NOT BUG:PR: 1017 Submitted by: ciresh@yahoo.com Reviewed by: Nils Larsch
NOT BUG:Take MDC2 patent into account
NOT BUG:In addition to RC5 also exclude MDC2 from compilation unless the algorithm is explicitly requested
NOT BUG:Change ./Configure so that certain algorithms can be disabled by default This is now the case for RC5
NOT BUG:As a side effect the OPTIONS in the Makefile will usually look a little different now but they are essentially only for information anyway
NOT BUG:Fix typo on blowfish manual page PR: 1010 Submitted by: Marc Balmer <mbalmer@openbsd.org>
BUG:Fix hang in EGD/PRNGD query when communication socket is closed prematurely by EGD/PRNGD PR: 1014 Submitted by: Darren Tucker <dtucker@zip.com.au>
NOT BUG:Fix possible memory leak
NOT BUG:Remove unused assembler modules
NOT BUG:This patch was "ignited" by OpenBSD 3>=4 support They've switched to ELF and GNU binutils but kept BSD make.. And I took the opportunity to unify other targets to this common least denominator..
NOT BUG:Reliable BSD-x86-elf detection in ./config
NOT BUG:Make Makefile.shared BSD make-friendly remove more redundant -lc set up OBJECT_MODE for AIX
NOT BUG:Make util/shlib_wrap.sh [Open]BSD-friendly
NOT BUG:Mention no-sse2 option in INSTALL note
NOT BUG:In mkdef.pl ignore trailing whitespace in #ifdef lines
NOT BUG:Drop redundant -lc from a number of rules in Makefile.shared It's perfectly safe [compiler driver adds it] and in some situation even perfectly appropriate [mixing -pthread and -lc on FreeBSD can have lethal effect on apps/openssl] I'd say we should get rid of more but I remove those I can test myself..
BUG:Shut whiny make's up
NOT BUG:Address run-time linker problems: LD_PRELOAD issue on multi-ABI platforms and SafeDllSearchMode in Windows
NOT BUG:Submitted by: Richard Levitte
NOT BUG:The first argument to load_iv should really be a char ** instead of an unsigned char ** since it points at text
NOT BUG:Thanks to Nils Larsch <nils.larsch@cybertrust.com> for pointing out the inelegance of our code :-)
NOT BUG:Oops == should really be = when used with test ([ and ])
NOT BUG:I guess I use bash too much..
BUG:Thanks to Peter Sylvester <Peter.Sylvester@edelweb.fr> for pointing it out to me
NOT BUG:Check for errors from EVP_VerifyInit_ex() or EVP_VerifyUpdate might cause a segfault.. This was uncovered because EVP_VerifyInit() may fail in FIPS mode if the wrong algorithm is chosen..
NOT BUG:Get rid if the annoying warning
NOT BUG:The mix of CFLAGS and LDFLAGS is a bit confusing in my opinion and Makefile.shared was a bit overcomplicated
NOT BUG:Make the shell variables LDFLAGS and SHAREDFLAGS in Makefile.shared get the values of $(CFLAGS) or $(LDFLAGS) as appropriate depending on the value the shell variables LDCMD and SHAREDCMD get That leaves much less chance of confusion since those pairs of shell variables always are defined together
NOT BUG:Respect the fact that most interactive shells don't restore stty settings and make it work in non-interactive mode..
NOT BUG:Please BSD make..
NOT BUG:FreeBSD 5 refuses to #include <malloc.h> Fix compiler warning after http://cvs.openssl.org/chngview?cn=12843
NOT BUG:./Configure to respect $thread_cflag variable
NOT BUG:Fold a bunch of linux and *BSD targets into [linux|BSD]-generic[32|64] Idea is to provide unified "fall-down" case for all rare platforms out there ./config is free to enable some optimizations such as endianness specification specific -mcpu flags..
NOT BUG:Default to AES u32 being unsinged int and not long This improves cache locality on 64-bit platforms (and fixes IA64 assembler-empowered build:-) The choice is guarded by newly introduced AES_LONG macro which needs to be defined only on 16-bit platforms which we don't support (not that I know of) Meaning that one could as well skip long option altogether
NOT BUG:Improve ECB performance (48+14*rounds -> 18+13*rounds) and reserve for hand-coded zero-copy AES_cbc_encrypt
NOT BUG:linux-arm target update PR: 991
NOT BUG:linux-parisc update PR: 990 Submitted by: Mike Frysinger <vapier@gentoo.org>
NOT BUG:Bug-fix in CBC encrypt tail processing and commentary section update
NOT BUG:Apparently at least with my VMS C environment defining _XOPEN_SOURCE gets _POSIX_C_SOURC and _ANSI_C_SOURCE defined which stops u_int from being defined and that breaks havock into the rest of the standard headers.. *sigh*
NOT BUG:Small thing It seems like we have to defined _XOPEN_SOURCE to get isascii() on DEC/Compaq/HP C for VMS
NOT BUG:Throw in AES CBC assembler up to +40% on aes-128-cbc benchmark
NOT BUG:Fix a typo in a.out assembler modules
NOT BUG:Reserve for AES CBC assembler implementation..
NOT BUG:Don't zap AES CBC IV when decrypting truncated content in place
BUG:Changes concering RFC 3820 (proxy certificates) integration:
NOT BUG:- Enforce that there should be no policy settings when the language is one of id-ppl-independent or id-ppl-inheritAll - Add functionality to ssltest.c so that it can process proxy rights and check that they are set correctly Rights consist of ASCII letters and the condition is a boolean expression that includes letters parenthesis & | and ^ - Change the proxy certificate configurations so they get proxy rights that are understood by ssltest.c - Add a script that tests proxy certificates with SSL operations
NOT BUG:Other changes:
NOT BUG:- Change the copyright end year in mkerr.pl - make update
NOT BUG:PKCS7_verify() performance optimization When the content is large and a memory BIO (for example from SMIME_read_PKCS7 and detached data) avoid lots of slow memory copies from the memory BIO by saving the content in a temporary read only memory BIO
NOT BUG:INSTALL.DJGPP sync PR: 989
NOT BUG:Rely on e_os.h to appropriately define str[n]casecmp in non-POSIX environments
NOT BUG:"Monolithic" x86 assembler replacement for aes_core.c Up to +15% better performance on recent microarchitectures
NOT BUG:Fix an "oops" typo! Well it was a debugging left-over..
BUG:O_NOFOLLOW is not appropriate when opening /dev/* entries on Solaris PR: 998
NOT BUG:Small typo `mask' got the same value ORed to it twice instead of `mask' and `emask' getting that operation done once each
NOT BUG:Patch supplied by Nils Larsch <nils.larsch@cybertrust.com>
NOT BUG:Correct a faulty address assignment and add a length check (not really needed now but may be needed in the future who knows?)
NOT BUG:FAQ update to mention no-sha0 as possible workaround for Tru64 compiler bug Well no-options seem to be busted in HEAD currently which should/will be fixed one way or another (see PR#989 for a possible alternative)
NOT BUG:DJGPP documentation note update
NOT BUG:Permit "monolithic" AES assembler implementations i.e such which would replace *whole* aes_core.c not only AES_[de|en]crypt routines
NOT BUG:DJGPP update PR: 989 Submitted by: Doug Kaufman
BUG:Borrow #include <string[s].h> from e_os.h
BUG:Make whiny compilers stop complaining about missing prototype
NOT BUG:Fix Win32 test-suit
NOT BUG:Remove naming conflict between variable and label
NOT BUG:Commentary update for AES IA-64 assembler module
NOT BUG:Minor AES x86 assembler tune-up
NOT BUG:AES-CFB[18] 2x optimization Well I bet nobody cares about AES-CFB1 performance but anyway..
NOT BUG:Prompt for passphrases for PKCS12 input format
NOT BUG:Oops-kind typos in aes-ia64.S..
NOT BUG:iv needs to be const because it sometimes takes it's value from a const
NOT BUG:Forgot to synchronise the VMS build scripts
NOT BUG:Add functionality needed to process proxy certificates
NOT BUG:Minor cygwin update PR: 949
NOT BUG:As new major IRIX release is highly unlikely to appear [and break following] I change from -notall to -none synonym in irix rules to improve backward compatibility with IRIX 5.x PR: 987
NOT BUG:Remove CPU detect for IRIX targets Performance gain is less than 1% it makes more sense to strive for broader binary compatibility..
NOT BUG:Remove yet another redundant memcpy Not at least performance critical essentially cosmetic modification..
NOT BUG:Eliminate redundant memcpy of IV material Performance improvement varies from platform to platform and can be as large as 20%
NOT BUG:Engage AES x86 assembler module for COFF and a.out targets
NOT BUG:Engage AES x86 assembler module on ELF platforms
NOT BUG:x86 perlasm update to accomodate aes-586.pl
NOT BUG:Eliminate copies of TeN and TdN use those found in assembler module
NOT BUG:AES x86 assembler implementation
NOT BUG:Refine PowerPC platform support
NOT BUG:Remove unused buffer 'buf'
NOT BUG:Don't use multiple storage types
NOT BUG:Fix typos in the ecparam doc
NOT BUG:Submitted by: Nils Larsch
NOT BUG:make update (oops missed this file)
NOT BUG:Change libeay.num so it's synchronised with additions in 0.9.7-stable make update
NOT BUG:Fix s_client so it works without a certificate again
NOT BUG:Propagate a few more variables to Makefile.shared when linking programs
NOT BUG:Remove duplicate lines
NOT BUG:Solaris x86 perlasm update
NOT BUG:Engage SHA1 IA64 assembler on IA64 platforms
NOT BUG:Automatically mark the CRL cached encoding as invalid when some operations are performed
NOT BUG:SHA1 assembler for IA-64
NOT BUG:Extend RC4 test
NOT BUG:Update 'certs' directory Move expired certificates to expired directory and zero assurance demontrations CAs to 'demo'
NOT BUG:Use X509_cmp_time() in -checkend option to support GeneralizedTime
BUG:Remaing bits of PR:620 relevant to 0.9.8
NOT BUG:Add lots of checks for memory allocation failure error codes to indicate failure and freeing up memory if a failure occurs
BUG:PR:620
NOT BUG:Update year
NOT BUG:In by_file.c check last error for no start line not first error
NOT BUG:Add -passin argument to dgst command
NOT BUG:V1 certificates that aren't self signed can't be accepted as CAs
NOT BUG:Fix rc4-ia64.S to pass more exhaustive regression tests
NOT BUG:Add couple of OIDs Resync NIDs for consistency with 0.9.7
NOT BUG:I've introduced a bug to i386 RC4 assembler which would emerge with certain mix of calls to RC4 routine not covered by rc4test.c It's fixed now In addition this patch inadvertently fixes minor performance problem: in 0.9.7 context P4 was performing 12% slower than the original implementation..
NOT BUG:Perform partial comparison of different character types in X509_NAME_cmp()
NOT BUG:Add 0.9.7 specific comments to RC4 assembler modules
NOT BUG:Mention that the keys likely to have signed the distribution are now listed on the web site for easy finding and downloading
NOT BUG:Split X509_check_ca() into a small self and an internal function check_ca() to resolve constness issue check_ca() is called from the purpose checkers instead of X509_check_ca() since the stuff done by the latter (except for calling check_ca()) is also done by X509_check_purpose()
BUG:sha1_block_asm_data_order can't hash if message crosses 2GB boundary
NOT BUG:Final touches to rc4/asm/rc4-596.pl +52% better performance on AMD core
NOT BUG:Document the change
NOT BUG:Make an explicit check during certificate validation to see that the CA setting in each certificate on the chain is correct As a side- effect always do the following basic checks on extensions not just when there's an associated purpose to the check: - if there is an unhandled critical extension (unless the user has chosen to ignore this fault) - if the path length has been exceeded (if one is set at all) - that certain extensions fit the associated purpose (if one has been given)
NOT BUG:perlasm/x86[ms|nasm] update to accomodate updated RC4 assembler module
NOT BUG:Summarize recent RC4 tune-ups
NOT BUG:Engage RC4 IA-64 assembler module
NOT BUG:RC4 IA-64 assembler implementation
NOT BUG:Typo
NOT BUG:Add errstr manual page
NOT BUG:Allow alternative manual sections to be embedded in .pod file comments
NOT BUG:Update docs
NOT BUG:Update docs
NOT BUG:Check return code of EVP_CipherInit() in PKCS#12 code
NOT BUG:Typo
NOT BUG:Fix memory leak
NOT BUG:linux-x86_64 didn't link after EM64T RC4 tune-up..
NOT BUG:RC4 tune-up for Intel P4 core both 32- and 64-bit ones As it's apparently impossible to compose blended code with would perform satisfactory on all x86 and x86_64 cores an extra RC4_CHAR code-path is introduced and P4 core is detected at run-time This way we keep original performance on non-P4 implementations and turbo-charge P4 performance by factor of 2.8x (on 32-bit core)
NOT BUG:In "req" exit immediately if configuration file is needed and it can't be loaded instead of giving the misleading:
BUG:"unable to find 'distinguised_name' in config"
NOT BUG:error message
NOT BUG:Update X509v3 doc
NOT BUG:Update X509v3 docs
BUG:PR: 910
NOT BUG:Add command line options -certform -keyform and -pass to s_client and s_server This supports the use of alternative passphrase sources key formats and keys handled by an ENGINE
NOT BUG:Update docs
NOT BUG:Initial pod documentation of X509V3 config file format
BUG:PR: 940
NOT BUG:Typo: use prompt_info not cb_data->prompt_info
BUG:PR: 923
NOT BUG:Typo
BUG:PR: 938
NOT BUG:Typo
BUG:Zap obsolete der_chop script
NOT BUG:PR: 969 Submitted by: David Holmes <davidh@3blackdogs.com>
NOT BUG:Fix x509.c so it creates serial number file again if no serial number is supplied on command line
NOT BUG:Cut'n'paste mistake All tested OK now..
BUG:Whoops syntactic mistake..
NOT BUG:Some find it confusing that environment variables are set when shared libraries aren't built or used I can see the point so I'm reorganising a little for clarity
NOT BUG:Use the default_md config file value when signing CRLs
BUG:PR:662
NOT BUG:Don't return an error with crl -noout
BUG:PR:917 Sumbmitted by: Michael Konietzka <konietzka@schlund.de>
NOT BUG:As was shown by Marc Bevand reordering of couple of load operations results in even higher performance gain of 3.3x:-) At least on Opteron..
NOT BUG:Make sure LD_PRELOAD is only set when we build shared libraries (and therefore link with them) Add LD_PRELOAD setting code where it was still missing
BUG:PR: 966
NOT BUG:Don't use $(EXHEADER) directly in for loops as most shells will break if $(EXHEADER) is empty
NOT BUG:Notified by many solution suggested by Carson Gaspar <carson@taltos.org>
NOT BUG:Because -rpath/-R may have been used our settings of LD_LIBRARY_PATH and friends may be entirely useless In such a case LD_PRELOAD is the answer at least on platforms using LD_LIBRARY_PATH There might be other variables to set on other platforms please fill us in..
NOT BUG:For now we only do this with the tests so they won't fail for silly reasons like getting dynamically linked to older installed libraries rather than the newly built ones..
NOT BUG:PR: 960
NOT BUG:Make sure memmove() is defined even on SunOS 4.1.4 PR: 963
NOT BUG:Update NEWS
NOT BUG:Update FAQ
NOT BUG:Fix race condition when SSL ciphers are initialized
NOT BUG:Update ECDSA and ECDH for OPENSSL_NO_ENGINE
BUG:Reported by: Maxim Masiutin Submitted by: Nils Larsch
NOT BUG:Because libraries on Windows lack useful version information the zlib guys had to change the name to differentiate with older versions when a backward incompatibility came up Of course we need to adapt This change simply tries to load the library through the newer name (ZLIB1) first and if that fails it tries the good old ZLIB
NOT BUG:Oops!
NOT BUG:Fix race condition when CRL checking is enabled
NOT BUG:Update debug-steve
NOT BUG:Don't use C++ reserved work "explicit"
NOT BUG:Fix Solaris 10_x86 shared build -Bsymbolic is required to avoid "remaining relocations" in assembler modules The latter seems to be new behaviour elder as/ld managed to resolve this relocations as internal It's possible to address this problem differently but I settle for -Bsymbolic.. PR: 546
NOT BUG:usr/doc has recently changed to usr/share/doc on Cygwin Notified by Corinna Vinschen <vinschen@redhat.com>
NOT BUG:Move the declaration of alloca() so it's ony declared when really necessary
NOT BUG:SHA1 asm Pentium tune-up Performance loss is not as bad anymore
NOT BUG:sha256_block advances the input pointer double as fast sometimes Fix the bug and test that it's actually gone PR: 950
NOT BUG:Nils Larsch reported that this include is required Strange that this had gone unnoticed ..
BUG:Import changed files from LPlib The changes are logged as follows for LPdir_unix.c in LPlib For the other files only the last log entry applies
NOT BUG:---------------------------- revision 1.11 date: 2004/09/23 22:07:22; author: _cvs_levitte; state: Exp; lines: +20 -6 Define my own macro LP_ENTRY_SIZE to express the size of my own buffering of directory entries and make it depend on whichever comes first of PATH_MAX and NAME_MAX As a fallback make sure it's set to 255 if neither PATH_MAX or NAME_MAX were defined Also if the size given from PATH_MAX or NAME_MAX is less than 255 force LP_ENTRY_SIZE to be 255
NOT BUG:It makes no harm whatsoever if LP_ENTRY_SIZE is larger than the maximum local path name limit It does make a lot of harm if LP_ENTRY_SIZE is smaller 255 seemed like a fairly acceptable default when nothing else is available ---------------------------- revision 1.10 date: 2004/08/26 13:36:05; author: _cvs_levitte; state: Exp; lines: +13 -13 License correction I am not REGENTS just a COPYRIGHT HOLDER ----------------------------
NOT BUG:Remove distracting comments and code Thanks to Nils for picking up on the outstanding ticket
NOT BUG:PR: 926
NOT BUG:Two TODO comments taken care of Nils pointed out that one of them had already been done and took care of the other one (which hadn't)
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
BUG:Make -Werror happy again
NOT BUG:Check ASN1_TYPE structure type is a SEQUENCE in PKCS7_get_smimecap()
BUG:Change values of MBSTRING_* to the form MBSTRING_FLAG|nbyte as assumed in ASN1_STRING_to_UTF8()
NOT BUG:- There's no more need for the snprintf macro - Move the inclusion of malloc.h until after all other includes so we can do proper tests of system macros - Make sure the correct header file is included to get the builtin "alloca" under VMS and define a macro to map the symbol 'alloca' to it
NOT BUG:Synchronise with Unix build
NOT BUG:When looking for request extensions in a certificate look first for the PKCS#9 OID then the non standard MS OID
NOT BUG:make update
NOT BUG:Make VIA Padlock engine more platform friendly and eliminate compiler warning
NOT BUG:Submitted by: Doug Kaufman <dkaufman@rahul.net>
NOT BUG:x86 assembler updates: more instructions new OPENSSL_instrument_halt [for DJGPP]..
NOT BUG:Synchronise VMS build files with Unixly Makefiles
NOT BUG:Another symbol longer than 31 characters..
NOT BUG:Reformat smime utility
NOT BUG:Add support for policy checking in verify utility
NOT BUG:Don't use 'explicit' for variable name
NOT BUG:Reformat smime.c
NOT BUG:New X509_VERIFY_PARAM structure and associated functionality
NOT BUG:This tidies up verify parameters and adds support for integrated policy checking
NOT BUG:Add support for policy related command line options Currently only in smime application
NOT BUG:WARNING: experimental code subject to change
NOT BUG:Stop compiler warnings
NOT BUG:TABLE OpenBSD-i386 update
NOT BUG:Proper support for OpenBSD-i386 shared build including assember modules! "Proper" means "compiles and passes test." Versioning is broken (I think)
NOT BUG:OPENSSL_ia32cap final touches Note that OPENSSL_ia32cap is no longer a symbol but a macro expanded as (*(OPENSSL_ia32cap_loc())) The latter is the only one to be exported to application
NOT BUG:Fix compiler warnings in crypto/evp/bio_ok.c as pointed out by Geoff
NOT BUG:crypto/perlasm update primarily to unify Netware modules Once it's verified x86*_nw.pl will be deleted In addition this update implements initseg on several additional [in addition to ELF] platforms Functions registered with initseg are supposed to be called prior main()
NOT BUG:Minor VIA Padlock engine update: eliminate -Wunused warning when *not* compiling the engine and inline memcpy in performance critical pathes
NOT BUG:Make aes_ctr.c 64-bit savvy
NOT BUG:'compatibility' not 'computability' :-)..
NOT BUG:On systems that use case-insensitive symbol names (i.e they're all converted to upper case or something like that) the application- level bio_dump_cb() has a name clash with the new library function BIO_dump_cb() The easiest fix is to rename the function at the application level
NOT BUG:Basically I wanted to be able to make a dump to a FILE* and not have to bother creating a BIO around it So here's a few more functions to make it possible to make the dump using a printing callback and to print to a FILE* (based on the callback variant) done in the same style as the functions in crypto/err/err_prn.c
NOT BUG:Stupid casts..
NOT BUG:Update FAQ
NOT BUG:Make ASN1_INTEGER_cmp() work as expected with negative integers
NOT BUG:Call setup_engine after autoconfig
NOT BUG:Don't ignore return value of EVP_DigestInit_ex() in md BIOs and dgst utility
NOT BUG:Make a note of the new engine
NOT BUG:Padlock engine update to fix a typo in MSC assembler and to address potential corruption problem if user manages to inter-leave aligined and misaligned requests [as well as some MSC-specific tweaks]
NOT BUG:DJGPP has opendir() and friends according to Gisle Vanem <giva@bgnett.no>
NOT BUG:If they ask for 386 keep it as 386 as possible..
NOT BUG:Avoid a.out name table pollition
NOT BUG:Minor clean-up to make Microsoft compiler shut up
NOT BUG:VIA C3 processor extends IA-32 instruction set with instuctions performing AES encryption in hardware as well as one accessing hardware RNG As you surely imagine this engine access this extended instruction set Well only AES for the moment support for RNG is to be added later on.. PR: 889 Submitted by: Michal Ludvig <michal@logix.cz>
NOT BUG:Obtained from: http://www.logix.cz/michal/devel/padlock/
NOT BUG:Cygwin fix-up for shared build
NOT BUG:OpenBSD fix-up for new a.out targets OpenBSD .s.o rule is busted..
NOT BUG:Clean-up GAS targets: get rid of "cpp" stuff and replace it with "purified" COFF and a.out targets [similar to ELF targets] You might notice some rudementary support for shared mingw builds under cygwin It works (it produces cryptoeay32.dll and ssleay32.dll with everything exported by name) but it's primarily for testing/debugging purposes at least for now..
BUG:Deprecate cpp and gaswin targets New coff fills in for gaswin but cpp is going out..
NOT BUG:DLLEntryPoint is a collective name not what linker looks for However if we explicitly intruct the linker to set entry point then we become obliged to initialize run-time library Instead we can pick name run-time will call and such name is DllMain Note that this applies to both "native" Win32 environment and Cygwin:-)
NOT BUG:We build the crypto stuff not the ssl stuff in this command procedure..
NOT BUG:The compiler may complain about what looks like a double definition of a static variable
NOT BUG:Oops wrong version..
NOT BUG:Add FIPS library name to error routines
NOT BUG:This is so to say "damage control" for jumbo "cpuid" patch see http://cvs.openssl.org/chngview?cn=12493 Now all platform should be operational while SSE2 code pathes get engaged on ELF platforms only
NOT BUG:Add framework for yet another assembler module dubbed "cpuid." Idea is to have a placeholder to small routines which can be written only in assembler In IA-32 case this includes processor capability identification and access to Time-Stamp Counter As discussed earlier OPENSSL_ia32cap is introduced to control recently added SSE2 code pathes (see docs/crypto/OPENSSL_ia32cap.pod) For the moment the code is operational on ELF platforms only I haven't checked it yet but I have all reasons to believe that Windows build should fail to link too I'll be looking into it shortly..
NOT BUG:Zero key-length for HMAC is apparently OK
NOT BUG:Make bio_ok.c Microsoft compiler savvy
NOT BUG:Typos typos..
NOT BUG:Make bio_ok.c 64-bit savvy
BUG:Stricter boundary condition check in HMAC_Init_ex
NOT BUG:Minor 64-bit md32_common.h update and minor unsignification of digests
NOT BUG:'apps/openssl dgst -help' update and minor apps/speed.c update
NOT BUG:Make SHA-256/-512 optional Note that no-sha switches off *all* SHA
NOT BUG:Some compilers are just too whiny Nothing makes Microsoft compiler stop complaining about loss of precision but explicit cast
NOT BUG:Some compilers are just too whiny DEC C doesn't like long long..
NOT BUG:Typos and due casts As for the latter It's "safe" to cast as below because "wrong" casts will either be optimized away or never performed
NOT BUG:Minor HP-UX make update IA-64-based HP-UX favor .so extension for shared libraries Old .sl extension works just fine but it .so which is default
NOT BUG:TABLE update
NOT BUG:Build-n-link new IA-64 modules on Linux and HP-UX
NOT BUG:Various IA-64 assembler fix-ups
NOT BUG:VC-NT was taken away by mistake putting it back..
BUG:Win64 placeholder targets This is merely naming suggestion As we know Win64 comes in two flavors IA-64/Itanium and AMD64/Opteron The suggestion is to refer to former as WIN64I and latter - WIN64A
NOT BUG:Adapt rc4-amd64.pl for Win64/AMD64 assembler
BUG:From LPlib:
NOT BUG:Apparently the length *including* the NUL byte should be used
NOT BUG:Contributed by Andy Polyakov <appro@fy.chalmers.se>
BUG:From LPlib:
NOT BUG:Make a nicer comment as we don't really know for sure that it's really needed and just want to play on the safe side
NOT BUG:Suggest by Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:WinCE should always be compiled as UNICODE even debugging version..
NOT BUG:#include <limits.h> is required at least on HP-UX and IRIX And what's with HP-UX offering 14 for NAME_MAX?
NOT BUG:EVP_Digest is size_t-fied clean up test programs accordingly
NOT BUG:Run SHA-256/-512 tests through EVP..
NOT BUG:All SIXTY_FOUR_BIT platforms (mind the difference between SIXTY_FOUR_BIT and SIXTY_FOUR_BIT_LONG) were failing to pass 'cd test; make test_bn'
BUG:From LPlib:
NOT BUG:Some code beautification
NOT BUG:Change the macro CP_THREAD_ACP to CP_ACP because the latter is more widely defined
NOT BUG:Add a conditional macro definition in case FindFirstFile and FindNextFile aren't properly defined (might happen on WinCE)
NOT BUG:Suggested by Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Make rand_win.c UNICODE savvy
BUG:From LPlib:
NOT BUG:Windows changes that detects if multibyte characters are available and deals with them properly
NOT BUG:Contributed by Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Imported from LPlib making sure the entry name (at least on Unix) is NUL-teminated at all times and that we don't make unneeded calls to free()
NOT BUG:Since version 7.0 The C RTL in VMS handles time in terms of UTC instead of local time
NOT BUG:Anchor AES and SHA-256/-512 assembler from C
NOT BUG:Type in Configure and TABLE update
NOT BUG:Add anchors for AES SHA-256/-512 assembler modules and SSE2 code pathes I also used this opportunity to clean up some out-of-date targets and re-group targets by OS
NOT BUG:Add licensing terms
NOT BUG:IA-64 is intolerant to misaligned access It was a problem on Win64 as we were mislead by _MSC_VER macro which is defined by *all* Windows Microsoft compilers
NOT BUG:Quick fix
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Using Horner's algorithm to evaluate the ec polynomial (suggested by Adam Young <ayoung@cigital.com>)
NOT BUG:Submitted by: Nils Larsch
NOT BUG:I think it could be a good thing to know what went wrong with the tests..
NOT BUG:make update
NOT BUG:(incidently this also tells VMS that there exists a new symbol in the SSL library)
NOT BUG:Because it's one of our libraries calling new functions in the other we need to have them among the symbols that should appear in the transfer table at least on VMS (and it wouldn't surprise me if Windows would whine as well)
NOT BUG:improve wording
NOT BUG:Some test programs in crypto/sha were named differently than usual..
BUG:'SSL_add_dir_cert_subjects_to_stack' is longer than 31 characters Lucky me I had prepared for this :-)
BUG:o_dir needs to be compiler with the warnings about dollar signs in identities disabled
NOT BUG:In some cases EVMSERR isn't visible (that's fairly new...)
NOT BUG:Don't have a constant that you're going to assign to that's just plain stupid (I was the stupidhead here...)
NOT BUG:Integration of RC4 AMD64 module
BUG:RC4 tune-up for AMD64 Performance improvement of 2.22x is measured for linux-x86_64 target
BUG:BIS correction/addition
NOT BUG:make update
NOT BUG:Use the new directory reading functions
NOT BUG:Copy a few files from LPlib (a new project of mine) add a wrapper Now we have directory reading capabilities for VMS as well and all of it in a fairly general manner
NOT BUG:o_str.c: Windows doesn't have <strings.h> and since we use _strnicmp() and _stricmp() on that platform use the appropriate header file for it <string.h> o_str.h: we only want to get size_t which is defined in <stddef.h>
NOT BUG:Philippe Bougeret <philippe.bougeret@freesbee.fr> notified us about Windows not having a <strings.h>
NOT BUG:Delta CRL support in extension code
NOT BUG:Improve error handling if decompression of an ec point fails and cleanup ec_curve.c (unify comments etc)
NOT BUG:Submitted by: Nils Larsch Reviewed by: Bodo Moeller Geoff Thorpe
NOT BUG:Delete non-POSIX header file
NOT BUG:PKCS#8 fixes from stable branch
NOT BUG:Don't try to parse non string types
NOT BUG:Stop compiler warnings with debug-steve
NOT BUG:Explain a little better what BN_num_bits() and BN_num_bits_word() do Add a note as to how these functions do not always return the key size and how one can deal with that
NOT BUG:PR: 907
NOT BUG:Minor (+12% on P4) performance tweak for sha512_block_sse2
NOT BUG:AES assembler implementation for IA-64 Note that there is no anchor from C code yet..
NOT BUG:New SHA algorithms assembler implementation for IA-64 Note that despite module name both SHA-256 and SHA-512 are supported
NOT BUG:New scalable bn_mul_add_words loop which provides up to >20% overall performance improvement Make module more gcc friendly and clarify copyright issues for division routine
BUG:Changes for VOS submitted by Paul Green <Paul.Green@stratus.com>
NOT BUG:PR: 499
NOT BUG:Make the tests of EVP operations without padding As a consequence there's no need for a larger BUFSIZE any more..
BUG:PR: 904
NOT BUG:Make sure that the buffers are large enough to contain padding PR: 904
BUG:NetWare fixes provided by Verdon Walker for OpenSSL 0.9.8-dev The changes have been mailed to <crypt@bis.doc.gov> as well
BUG:PR: 903
NOT BUG:Linux on ARM needs -ldl PR: 905
NOT BUG:Reformat pkcs8 source
NOT BUG:Tidy up including; - Remove unused and unuseful debug cruft - Remove unnecessary 'top' fudging from BN_copy() - Fix a potential memory leak and simplify the expansion logic in BN_bin2bn()
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
BUG:Incomplete initial sweep over the engine code Mainly reducing some comment-noise to managable levels and inverting the sense of the "uptodate" boolean (which was counter-intuitive the way I'd left it)
NOT BUG:Deprecate unused cruft and "make update"
NOT BUG:Attempt to bring the 'engine' documentation up to date w.r.t missing prototypes etc Also some fairly significant edits were made to the text (who wrote this crap anyway? oh wait ...) removing stuff which is overkill rewriting stuff that was opaque correcting things that were just downright false etc
NOT BUG:Minor change to group like functions together
NOT BUG:Actually that last change to BN_get_word() was a little too simple
NOT BUG:Get rid of signed/unsigned warnings and teach CVS about new things to ignore
NOT BUG:Tweak my debug target flags
NOT BUG:As Nils put it;
NOT BUG:Yet another question: some time ago you changed BN_set_word Why didn't you change BN_get_word as well?
NOT BUG:Quite I'm also removing the older commented-out implementations to improve readability This complex stuff seems to date from a time when the types didn't match up well
NOT BUG:Submitted by: Nils Larsch Geoff Thorpe
NOT BUG:BN_div_word() was breaking when called from BN_bn2dec() (actually this is the only function that uses it) because it would trip up an assertion in bn_div_words() when first invoked This also adds BN_div_word() testing to bntest
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
NOT BUG:Making some values explicitely unsigned was derived from ongoing work that isn't yet committed It wasn't meant to be committed already so I'm removing it for now
NOT BUG:Typo setting the first element of nids[] to NULL instead of setting *cnids
NOT BUG:Correct the return codes for ecdsatest
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
NOT BUG:More precise explanation of session id context requirements
NOT BUG:SHA fails to compile on x86_64 if compiled with custom flags without recommended -DMD32_REG_T=int in particular PR: 893 Submitted by: Michal Ludvig <michal-list@logix.cz>
NOT BUG:"no-engine" was being ignored so remove it from the advertised syntax Also remove some commented-out lines of code that deny CVS its purpose
NOT BUG:This fixes the installation target for dynamic engines which was trying to install to a different location than it had created (BTW VMS will need a matching fix in eng_list.c.) Note these aren't ssl-specific so I'm putting "engines/" into the libs directory rather than at the "--prefix" level or inside "ssl/"
NOT BUG:Minimal work-around for ./engine shared builds "Minimal" means that I think that proper Makefile clean-up is required
NOT BUG:32-bit PA-RISC requires -Bsymbolic when linking libcrypto.sl Without this flag RAND_poll ends up in end-less loop calling RAND_add But don't ask me why..
NOT BUG:Working on HP-UX shared support..
NOT BUG:Mention new SHA algorithms in CHANGES This completes the integration
NOT BUG:Extend HMAC_MAX_MD_CBLOCK to accomodate SHA-512
NOT BUG:make update
NOT BUG:EVP bindings to new SHA algorithms
NOT BUG:objects.txt update for SHA-224/-256/-384/-512 SHA-224 ids still appear "draft," but we have to start somewhere..
BUG:Submitted by: Nils Larsch <nlarsch@compuserve.de>
NOT BUG:Make sha-256/-512 naming in speed.c consistent with their names as they will appear at EVP leyer
NOT BUG:Typo in commentary section
NOT BUG:Final SHA-256/-512 touches Extra md_len field in SHA[256|512]_CTX reserves for truncated hash function output mode and makes SHA224 thread-safe Next stop is integration with EVP and we're done..
NOT BUG:Kill unused macro and reimplement it for that single context it can actually be used namely x86* platforms [because they don't bomb on unaligned access] This resulted in 30-40% [depending on message length] improvement for SHA-256 compiled with gcc and running on P4 In the lack of assembler implementation I give the compiler all the help it can possibly get:-)
NOT BUG:SHA224_Update() and SHA224_Final() aren't implemented and since SHA224() uses SHA256_Update() and SHA256_Final() instead let's just create aliases in form of macros
NOT BUG:make update
NOT BUG:Typo in linux-ppc64 target
NOT BUG:gcc -Wcast-qual clean-up
NOT BUG:hpux-shared rules to cover even for GNU ld
NOT BUG:Unified hpux-shared rule Verified with both 32- and 64-bit builds and both vendor and GNU compilers ./engine shared build are still busted I mean always were..
NOT BUG:Make sure we return 0 if test passed
NOT BUG:Eliminate compiler warnings and throw in performance table
NOT BUG:Attempt to unify hpux-shared rules More adjustments might be required after more tests..
NOT BUG:SHA-224 test vectors added
NOT BUG:Since num is now a size_t it's not necssary to check for less than 0 AND it avoids warnings on certain systems
NOT BUG:Synchronise VMS with the Unixly Malefiles
NOT BUG:Documentation note for Win32 glue between BIO layer and compiler run-time
NOT BUG:Framework for glueing BIO layer and Win32 compiler run-time Goal is to make it possible to produce for a unified binary build which can be used with a variety of Win32 compilers
NOT BUG:make update
NOT BUG:Move some COMP functions to be inside the #ifndef OPENSSL_NO_COMP wrapping preprocessor directive This also removes a duplicate declaration
NOT BUG:SHA-256/-512 test and benchmark
NOT BUG:While size_t-fying let's not forget to update documentation:-)
NOT BUG:SHA-256/-512 update A bug fix SHA-512 tune-up for AMD64 hook for SSE2 code Makefile update
BUG:Stress collector/padding function
NOT BUG:Final API adaptation Final "all openssl" performance numbers [not mixture of different implementations] Real-life performance improvement is rated at 2-3x not 6x as preliminary announced
NOT BUG:Delete unused function from libeay.num replace with one that does exist
NOT BUG:Delete obsolete and unimplemented function
NOT BUG:Add SHA256 and SHA512 algorithms to mkdef.pl
NOT BUG:Fix mkdef.pl script to avoid infinite loop when parsing sha.h
NOT BUG:X509_policy_lib_init is declared but not defined so it raises havoc when trying to build a shared library on VMS or Windows..
NOT BUG:After the latest round of header-hacking regenerate the dependencies in the Makefiles NB: this commit is probably going to generate a huge posting and it is highly uninteresting to read
NOT BUG:Deprecate the recursive includes of bn.h from various API headers (asn1.h dh.h dsa.h ec.h ecdh.h ecdsa.h rsa.h) as the opaque bignum types are already declared in ossl_typ.h Add explicit includes for bn.h in those C files that need access to structure internals or API functions+macros
NOT BUG:Remove some unnecessary recursive includes from the internal apps.h header and include bn.h in those C files that need bignum functionality
NOT BUG:Because of recent reductions in header interdependencies these files need to include crypto.h directly
NOT BUG:I can't verify this directly but recent changes will probably require that the cryptodev implementation include bn.h directly (when building with OPENSSL_NO_DEPRECATED that is)
NOT BUG:The inclusion of bn.h from the engine.h API header has been deprecated so the engine implementations need to include bn.h to manipulate bignums
NOT BUG:Deprecate quite a few recursive includes from the ssl.h API header and remove some unnecessary includes from the internal header ssl_locl.h This then requires adding includes for bn.h in four C files
NOT BUG:Deprecate some recursive includes from the store.h API header and put back required includes back via the internal header and str_lib.c
NOT BUG:Reduce dependencies on crypto.h by moving the opaque definition of CRYPTO_EX_DATA and the new/free/dup callback prototypes to ossl_typ.h
NOT BUG:Moving opaque definitions to ossl_typ.h lets us reduce header dependencies Deprecate inclusion of crypto.h from ui.h
NOT BUG:Make reservations for FIPS code in HEAD branch so that the moment FIPS comes in we have required macros in place
NOT BUG:Make some more API types opaquely available from ossl_typ.h meaning the corresponding headers are only required for API functions or structure details This now includes the bignum types and BUF_MEM Subsequent commits will remove various dependencies on bn.h and buffer.h and update the makefile dependencies
NOT BUG:This file implements various functions that have since been redefined as macros I'm removing this from the NO_DEPRECATED build
NOT BUG:Fixes so alerts are sent properly in s3_pkt.c
NOT BUG:PR: 851
BUG:size_t-fication of message digest APIs We should size_t-fy more APIs..
NOT BUG:Reimplement old functions so older software that link to libcrypto don't crash and burn
NOT BUG:Synchronise o_str.c between 0.9.8-dev and 0.9.7-stable
NOT BUG:make update
NOT BUG:Let's make life easier and have the VMS version of the configuration be generated from the Unixly configuration file
NOT BUG:CHANGES to mention improved PowerPC platform support
NOT BUG:SHA-224/-256/-384/-512 implementation This is just sheer code commit Makefile modifications make test etc will appear later..
NOT BUG:Make self signing option of 'x509' use random serial numbers too
NOT BUG:SSE2 SHA512_Transform implementation No it's not used anywhere yet and is subject to change as C implementation is added..
NOT BUG:SSE2 accelerated bn_mul_add_words Code is currently disabled till proper config and run-time support is added PR: 788 Submitted by: <dean@arctic.org> Reviewed by: <appro>
NOT BUG:Obtained from: http://arctic.org/~dean/crypto/rsa.html
NOT BUG:Support for IA-32 SSE2 instruction set
NOT BUG:Remove the creation of $(INSTALL_PREFIX)$(OPENSSLDIR)/lib since we don't use it
NOT BUG:Notified by Frédéric L W Meunier <0@pervalidus.tk> in PR 713
NOT BUG:When the pointer 'from' changes it's stored length needs to change as well
BUG:Notified by Frank Kardel <kardel@acm.org> in PR 879
BUG:Fix realloc usage in ec_curve.c
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
NOT BUG:- update from current 0.9.6-stable CHANGES file - update from current 0.9.7-stable CHANGES file:
NOT BUG:Now here we have "CHANGES between 0.9.7e and 0.9.8" and I hope that all patches mentioned for 0.9.7d and 0.9.7e actually are in the CVS HEAD i.e what is to become 0.9.8
NOT BUG:I have rewritten the 'openssl ca -create_serial' entry (0.9.8) so that it explains the earlier change that is now listed (0.9.7e)
NOT BUG:The ENGINE_set_default typo bug entry has been moved from 0.9.8 to 0.9.7b which is where it belongs
NOT BUG:The new BN_CTX code makes this sort of abuse unnecessary
NOT BUG:Oops! Typo in ./config..
NOT BUG:Improved PowerPC support Proper ./config support for ppc targets especially for AIX But most important BIGNUM assembler implementation submitted by IBM
NOT BUG:Submitted by: Peter Waltenberg <pwalten@au1.ibm.com> Reviewed by: appro
NOT BUG:Make ASN1 code work again..
NOT BUG:With the new dynamic BN_CTX implementation there should be no need for additional contexts
NOT BUG:The problem of rsa key-generation getting stuck in a loop for (pointlessly) small key sizes seems to result from the code continually regenerating the same prime value once the range is small enough From my tests this change fixes the problem by setting an escape velocity of 3 repeats for the second of the two primes
NOT BUG:PR: 874
NOT BUG:Allow RSA key-generation to specify an arbitrary public exponent Jelte proposed the change and submitted the patch I jiggled it slightly and adjusted the other parts of openssl that were affected
NOT BUG:PR: 867 Submitted by: Jelte Jansen Reviewed by: Geoff Thorpe
NOT BUG:More ASN1 reformat/tidy
NOT BUG:Reformat/tidy some of the ASN1 code
NOT BUG:Fix leak
NOT BUG:PR:870
NOT BUG:As far as I can tell the bugfix this comment refers to was committed to 0.9.7-stable as well as HEAD (and doesn't apply to the 0.9.6-engine variant)
NOT BUG:Extend the index parameter checking from sk_value to sk_set() Also tidy up some similar code elsewhere
BUG:Thanks to Francesco Petruzzi for bringing this to my attention
NOT BUG:New option to 'x509' -next_serial This outputs the certificate serial number plus 1 to the output file Its purpose is to allow serial number files to be initialized when random serial numbers are used
NOT BUG:Use X509_get_serialNumber() instead of accessing internals in x509.c
NOT BUG:Reduce chances of issuer and serial number duplication by use of random initial serial numbers
BUG:PR: 842
NOT BUG:Whooaaaaa the BN_CTX_DEBUG macro really produces output these days.. A little too much for my tests currently..
NOT BUG:Print the debug thingies on stderr instead of stdout If for nothing else then at least so bc doesn't have problems parsing the output from bntest :-)
NOT BUG:make update
NOT BUG:"make update" noticed a new function
NOT BUG:More updates for the header cleanups (and apologies again for not having consolidated these prior to committing)
NOT BUG:When generating dependencies in the makefiles generate the reduced dependencies of the OPENSSL_NO_DEPRECATED mode This prevents dependencies being reproduced for "deprecated" header behaviour when a developer doesn't define the symbol (with the subsequent CVS wars that can ensue)
NOT BUG:header cleanup in apps/
NOT BUG:(oops) Apologies all that last header-cleanup commit was from the wrong tree This further reduces header interdependencies and makes some associated cleanups
NOT BUG:Reduce header interdependencies initially in engine.h (the rest of the changes are the fallout) As this could break source code that doesn't directly include headers for interfaces it uses changes to recursive includes are covered by the OPENSSL_NO_DEPRECATED symbol It's better to define this when building and using openssl and then adapt code where necessary - this is how to stay current However the mechanism exists for the lethargic
NOT BUG:Clear error if unique_subject lookup fails
NOT BUG:Add some root CAs
NOT BUG:Avoid undefined results when the parameter is out of range
NOT BUG:Don't use C++ reserved word
NOT BUG:Oops forgot CHANGES entry
NOT BUG:New function X509_POLICY_NODE_print()
NOT BUG:Add symbol hacks for some long names make update
NOT BUG:This is essentially Intel 32-bit compiler tune-up To start with all available compiler versions generated bogus machine code trying to compile new crypto/des/cfb_enc.c Secondly 8th version defines __GNUC__ macro but fails to compile *some* inline assembler correctly Note that all versions of icc implement MSC-like _lrot[rl] intrinsic which is used now instead of offensive asm Finally unnecessary linker dependencies are eliminated Most notably dependency from libirc.a caused trouble at application start-up if libcrypto.so is linked with -Bsymbolic (which it is)
NOT BUG:Enhance EVP code to generate random symmetric keys of the appropriate form for example correct DES parity
NOT BUG:Update S/MIME code and EVP_SealInit to use new functions
NOT BUG:PR: 700
NOT BUG:Make {i2v,v2i}_ASN1_BIT_STRING global
NOT BUG:make update
NOT BUG:Remove obsolete files
NOT BUG:Allow CRLs to be passed into X509_STORE_CTX This is useful when the verified structure can contain its own CRLs (such as PKCS#7 signedData)
NOT BUG:Tidy up some of the verify code
NOT BUG:Extend OID config module format
NOT BUG:Free up BIO properly when using streaming S/MIME sign
NOT BUG:Remove BN_CTX debug from debug-steve
NOT BUG:SSL_COMP_get_compression_method is a typo (a missing 's' at the end of the symbol name)
NOT BUG:Move the definition of Win32_rename() since the macro rename gets undefined in the middle of the code on Windows and that disrupts operations in functions later that use rename().. PR: 853
NOT BUG:Wrap code starting with a definition PR: 854
NOT BUG:Change spaces to symbols in names PR: 856
NOT BUG:Make prototypes for some callback pointers
NOT BUG:A couple more cases where RAND_add() gets an integer instead of a doule as last argument
NOT BUG:RAND_add() wants a double as it's last argument
NOT BUG:Fix loads of warnings in policy code
NOT BUG:I'll remember to try to compile this with warnings enabled next time :-)
NOT BUG:Fix ASN1 warnings
NOT BUG:Adjust various bignum functions to use BN_CTX for variables instead of locally initialising their own
NOT BUG:NB: I've removed the "BN_clear_free()" loops for the exit-paths in some of these functions and that may be a major part of the performance improvements we're seeing The "free" part can be removed because we're using BN_CTX The "clear" part OTOH can be removed because BN_CTX destruction automatically performs this task so performing it inside functions that may be called repeatedly is wasteful This is currently safe within openssl due to the fact that BN_CTX objects are never created for longer than a single high-level operation However that is only because there's currently no mechanism in openssl for thread-local storage Beyond that this might be an issue for applications using the bignum API directly and caching their own BN_CTX objects The solution is to introduce a flag to BN_CTX_start() that allows its variables to be automatically sanitised on release during BN_CTX_end() This way any higher-level function (and perhaps the application) can specify this flag in its own BN_CTX_start()/BN_CTX_end() pair and this will cause inner-loop functions specifying the flag to be ignored so that sanitisation is handled only once back out at the higher level I will be implementing this in the near future
NOT BUG:Replace the BN_CTX implementation with my current work I'm leaving the little TODO list in there as well as the debugging code (only enabled if BN_CTX_DEBUG is defined)
NOT BUG:I'd appreciate as much review and testing as can be spared for this I'll better use of this implementation (no more fixed size limitations) Note also that under identical optimisations I'm seeing a noticable speed increase over openssl-0.9.7 - so any feedback to confirm/deny this on other systems would also be most welcome
NOT BUG:Adds warnings about two curves and fixes the "seed" value for two other curves
NOT BUG:Submitted by: Nils Larsch
NOT BUG:.. and this should likewise fix up those RSA implementations that weren't already built and tested
NOT BUG:By adding a BN_CTX parameter to the 'rsa_mod_exp' callback private key operations no longer require two distinct BN_CTX structures This may put more "strain" on the current BN_CTX implementation (which has a fixed limit to the number of variables it will hold) but so far this limit is not triggered by any of the tests pass and I will be changing BN_CTX in the near future to avoid this problem anyway
NOT BUG:This also changes the default RSA implementation code to use the BN_CTX in favour of initialising some of its variables locally in each function
NOT BUG:Damn I was a bit hasty with my fix and hadn't spotted the linker dependency from asn1
NOT BUG:Remove some warnings
NOT BUG:Protect against gcc's "warning: cast does not match function type"
NOT BUG:Don't define fd for platforms that do not use it as some may not declare fileno() properly
BUG:Correct constness problems
NOT BUG:Make it easier to buld test applications..
NOT BUG:Only build the PKCS#7 test applications if "pkcs7" is present in SDIRS
NOT BUG:Add store.h among the exported headers on VMS
NOT BUG:o_str.h isn't a public header file so make sure it will still be included
NOT BUG:o_str.h isn't a public header file
NOT BUG:Typo..
NOT BUG:Make sure toupper() is properly declared
NOT BUG:Make it clear that for RSA_NO_PADDING flen must be RSA_size(rsa)
NOT BUG:make update
NOT BUG:Sync the VMS build with Unix
NOT BUG:Initial support for certificate policy checking and evaluation
NOT BUG:This is currently *very* experimental and needs to be more fully integrated with the main verification code
NOT BUG:Correct minor spelling error PR: 845
BUG:Change \t to real tab in echo argument PR: 847
NOT BUG:Remove a warning for conversion double->long This has impacts on Windows PR: 849
NOT BUG:Make sure fd is defined where it should PR: 849
NOT BUG:Note my bignum hijinx in case app maintainers are using CHANGES for their porting efforts Also add Richard's name to the prior change
BUG:Variety of belt-tightenings in the bignum code (Please help test this!)
NOT BUG:- Remove some unnecessary "+1"-like fudges Sizes should be handled exactly as enlarging size parameters causes needless bloat and may just make bugs less likely rather than fixing them: bn_expand() macro bn_expand_internal() and BN_sqr() - Deprecate bn_dup_expand() - it's new since 0.9.7 unused and not that useful - Remove unnecessary zeroing of unused bytes in bn_expand2() - Rewrite BN_set_word() - it should be much simpler the previous complexities probably date from old mismatched type issues - Add missing bn_check_top() macros in bn_word.c - Improve some degenerate case handling in BN_[add|sub]_word() add comments and avoid a bignum expansion if an overflow isn't possible
NOT BUG:Avoid warnings
BUG:Constify d2i s2i c2i and r2i functions and other associated functions and macros
NOT BUG:This change has associated tags: LEVITTE_before_const and LEVITTE_after_const Those will be removed when this change has been properly reviewed
NOT BUG:It was just pointed out to me that it's better to cast to double..
NOT BUG:Make sure that the last argument to RAND_add() is a float or some compilers may complain
NOT BUG:Make sure we use unsigned constants or come compilers may complain
NOT BUG:Convert openssl code not to assume the deprecated form of BN_zero()
NOT BUG:Remove certain redundant BN_zero() initialisations because BN_CTX_get() BN_init() [etc] already initialise to zero
NOT BUG:Correct error checking in bn_sqr.c and be less wishy-wash about how/why the result's 'top' value is set (note also 'max' is always > 0 at this point)
NOT BUG:The efforts to eliminate the dual-representation of zero and to ensure bignums are passed in and out of functions and APIs in a consistent form has highlighted that zero-valued bignums don't need any allocated word data The use of BN_set_word() to initialise a bignum to zero causes needless allocation and gives it a return value that must be checked This change converts BN_zero() to a self-contained macro that has no return/expression value and does not cause any expansion of bignum data
NOT BUG:Note it would be tempting to rewrite the deprecated version as a success-valued comma expression such as; #define BN_zero(a) ((a)->top = (a)->neg = 0 1) However this evaluates 'a' twice and would confuse initialisation loops (eg while(..) { BN_zero(bn++) } ) As such the deprecated version continues to use BN_set_word()
NOT BUG:Document a change I'd already made and at the same time correct the change to work properly; BN_zero() should set 'neg' to zero as well as 'top' to match the behaviour of BN_new()
NOT BUG:IRIX 6.x shared build fix-up
NOT BUG:For reference Note that both cc and gcc support -Wl flag but we can't use -Wl,-[not]all with both drivers because cc rearranges options passed through -Wl We can't use -Wl,-all,libcrypto.a,-notall with cc either because it refuses to start with "no input" error
NOT BUG:static
NOT BUG:Minimise the amount of code dependent on BN_DEBUG_RAND In particular redefine bn_clear_top2max() to be a NOP in the non-debugging case and remove some unnecessary usages in bn_nist.c
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe Ulf Möller
NOT BUG:More changes coming out of the bignum auditing BN_CTX_get() should ideally return a "zero" bignum as BN_new() does - so reset 'top' During BN_CTX_end() released bignums should be consistent so enforce this in debug builds Also reduce the number of wasted BN_clear_free() calls from BN_CTX_end() (typically by 75% or so)
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe Ulf Möller
NOT BUG:Fix policy constraints syntax
NOT BUG:Support for inhibitAnyPolicy extension
NOT BUG:typo
NOT BUG:Cleanup ASN1 OID module when it exits
NOT BUG:Call autoconfig code in pkcs7 utility
NOT BUG:Memory leak fix
NOT BUG:Various X509 fixes Disable broken certificate workarounds when X509_V_FLAG_X509_STRICT is set Check for CRLSign in CRL issuer certificates Reject CRLs with unhandled (any) critical extensions
NOT BUG:Typos
NOT BUG:Reported by: Jose Castejon-Amenedo <Jose.Castejon-Amenedo@hp.com>
NOT BUG:Make our page with pointers to binary distributions visible in the FAQ
NOT BUG:Indent some of the code examples
NOT BUG:Config docs
NOT BUG:Documentation of the KISS autoconfig functions
NOT BUG:More autoconfig docs
BUG:Avoid a memory leak in OCSP_parse_url() Notified by Paul Siegel <psiegel@corestreet.com>
NOT BUG:Initial docs for the OpenSSL library configuration via openssl.cnf
NOT BUG:Add ECDSA documentation
NOT BUG:Submitted by: Nils Larsch
NOT BUG:AES is spelled AES not ASE Oops..
NOT BUG:Make sure the given EVP_PKEY is updated in the PEM_STRING_PKCS8INF case also PR: 833
NOT BUG:Document the AES options for 'openssl smime' PR: 834
NOT BUG:A cleanup of the ecs_ossl.c code and some (doxygen) comments for ecdsa.h
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
NOT BUG:When adding positive elements we can use BN_uadd() instead of BN_add()
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
NOT BUG:Use an OCTET STRING for the encoding of an OCSP nonce value
NOT BUG:The old raw format can't be handled by some implementations and updates to RFC2560 will make this mandatory
NOT BUG:minor signed/unsigned warning fixes
NOT BUG:Fix handling of -offset and -length in asn1parse tool
BUG:If -offset exceeds -length of data available exit with an error
NOT BUG:Don't read past end of total data available when -offset supplied
BUG:If -length exceeds total available truncate it
NOT BUG:Typo in crypto/bn/asm/x86_64.c bn_div_words() PR: 821
NOT BUG:Add flag to avoid continuous memory allocate when calling EVP_MD_CTX_copy_ex()
NOT BUG:Without this HMAC is several times slower than < 0.9.7
NOT BUG:Typo in PA-RISC 2 rules in crypto/bn/Makefile.ssl
NOT BUG:HP/UX PA-RISC 2 targets update
NOT BUG:Remove typos
BUG:-Wtraditional was a little too much..
NOT BUG:Typo
NOT BUG:In the development branch it feels quite all right to warn on a lot more stuff
NOT BUG:make update
NOT BUG:Add the missing parts for DES CFB1 and CFB8 Add the corresponding AES parts while I'm at it make update
NOT BUG:make update
NOT BUG:Unsigned vs signed problem removed
NOT BUG:#undef _POSIX_C_SOURCE in ui_openssl.c ruined IRIX builds Comment on why _POSIX_C_SOURCE needed in first place
NOT BUG:CFB DES sync-up with FIPS branch
NOT BUG:Avoid signed vs unsigned warnings (which are treated like errors on Windows)
NOT BUG:S_IFBLK and S_IFCHR may not exist in some places (like Windows) so let's check for those macros and if they aren't defined let's assume there aren't Unixly devices on this platform
NOT BUG:Even though C specification explicitly says that constant type "stretches" automatically to accomodate the value some compilers fail to do so Most notably 0x0123456789ABCDEF should come out as long long in 32-bit context but HP compiler truncates it to 32-bit value Which in turn breaks GF(2^m) arithmetics in hpux-parisc2-cc build Therefore this fix..
NOT BUG:Fix declaration inconsistency in ecparam.c
NOT BUG:Get rid of bogus warning when compiling with Sun vendor compiler
NOT BUG:We're passed p so let's use p instead of making assumptions
NOT BUG:Typo..
NOT BUG:Replace expired certificate
NOT BUG:SHA-1 assembler tune-up for Intel P4
NOT BUG:Adding a slash between the directoryt and the file is a problem with VMS The C RTL can handle it well if the "directory" is a logical name with no colon therefore ending being 'logname/file' However if the given logical names actually has a colon or if you use a full VMS-syntax directory you end up with 'logname:/file' or 'dev:[dir1.dir2]/file' and that isn't handled in any good way
NOT BUG:So on VMS we need to check if the directory string ends with a separator (one of ':' ']' or '>' (< and > can be used instead [ and ])) and handle that by not inserting anything between the directory spec and the file name In all other cases it's assumed the directory spec is a logical name so we need to place a colon between it and the file
NOT BUG:Notified by Kevin Greaney <kevin.greaney@hp.com>
BUG:Cover all DSA setups when running tests PR: #748 Submitted by: Kirill Kochetkov <kochet@ixbt.com>
NOT BUG:Updates to s_time manual page PR: #570 Submitted by: Martin Witzel <MWITZEL@de.ibm.com>
NOT BUG:Add s_time manual page Submitted by: "Martin Witzel" <MWITZEL@de.ibm.com>
NOT BUG:PR: #570
BUG:Update URI Submitted by: Gertjan van Oosten <gertjan@West.NL>
NOT BUG:PR: #804
NOT BUG:unintptr_t and <inttypes.h> are not strictly portable with respect to ANSI C 89 Undo change to maintain compatibility
NOT BUG:Fix Perl problems on sparc64 This is part of a large change submitted by Markus Friedl <markus@openbsd.org>
NOT BUG:Avoid including cryptlib.h it's not really needed Check if IDEA is being built or not This is part of a large change submitted by Markus Friedl <markus@openbsd.org>
BUG:Only use environment variables if uid and gid are the same as euid and egid This is part of a large change submitted by Markus Friedl <markus@openbsd.org>
NOT BUG:Check if a random "file" is really a device file and treat it specially if it is Add a few OpenBSD-specific cases This is part of a large change submitted by Markus Friedl <markus@openbsd.org>
NOT BUG:Correct documentation typos This is part of a large change submitted by Markus Friedl <markus@openbsd.org>
NOT BUG:OpenBSD-internal changes This is part of a large change submitted by Markus Friedl <markus@openbsd.org>
NOT BUG:Use sh explicitely to run point.sh This is part of a large change submitted by Markus Friedl <markus@openbsd.org>
NOT BUG:Include strings.h so strcasecmp() and strncasecmp() get properly declared
NOT BUG:Use BUF_strlcpy() instead of strcpy() Use BUF_strlcat() instead of strcat() Use BIO_snprintf() instead of sprintf() In some cases keep better track of buffer lengths This is part of a large change submitted by Markus Friedl <markus@openbsd.org>
NOT BUG:Add a newline at the end of the last line This is part of a large change submitted by Markus Friedl <markus@openbsd.org>
NOT BUG:Typos
NOT BUG:To figure out if we're going outside the buffer use the size of the buffer not the size of the integer used to index in said buffer
NOT BUG:PR: 794 Notified by: Rhett Garber <rhett_garber@hp.com>
NOT BUG:Document that you need to include x509.h (to get [i2d|d2i]_RSA_PUBKEY()) Correct the typo PUKEY..
NOT BUG:Document that you need to include x509.h (to get [i2d|d2i]_DSA_PUBKEY()) Correct the typo PUKEY..
NOT BUG:Add "dif" variable to clean up the loop implementations
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Skip a curve with generator of non-prime order
NOT BUG:Submitted by: Nils Larsch
BUG:Avoid segfault if ret==0
NOT BUG:Submitted by: Nils Larsch
BUG:Restructure make targets to allow parallel make Submitted by: Witold Filipczyk <witekfl@poczta.gazeta.pl>
BUG:PR: #513
NOT BUG:Incremental cleanups to bn_lib.c - Add missing bn_check_top() calls and relocate some others - Use BN_is_zero() where appropriate - Remove assert()s that bn_check_top() is already covering - Simplify the code in places (esp bn_expand2()) - Only keep ambiguous zero handling if BN_STRICT isn't defined - Remove some white-space and make some other aesthetic tweaks
NOT BUG:Use the BN_is_odd() macro in place of code that (inconsistently) does much the same thing
NOT BUG:Also I have some stuff on the back-burner related to some BN_CTX notes from Peter Gutmann about his cryptlib hacks to the bignum code The BN_CTX comments are there to remind me of some relevant points in the code
NOT BUG:BN_FLG_FREE is of extremely dubious usefulness and is only referred to once in the source (where it is set for the benefit of no other code whatsoever) I've deprecated the declaration in the header and likewise made the use of the flag conditional in bn_lib.c Note this change also NULLs the 'd' pointer in a BIGNUM when it is reset but not deallocated
NOT BUG:Declare the static BIGNUM "BN_value_one()" more carefully
NOT BUG:Add missing bn_check_top()s to bn_kron.c remove some miscellaneous white-space and include extra headers to satisfy debugging builds
NOT BUG:Add missing bn_check_top()s to bn_gf2m.c and remove some miscellaneous white-space
NOT BUG:The bn_set_max() macro is only "used" by the bn_set_[low|high]() macros which in turn are used nowhere at all This is a good thing because bn_set_max() would currently generate code that wouldn't compile (BIGNUM has no 'max' element)
NOT BUG:The only apparent use for bn_set_[low|high] would be for implementing windowing algorithms and all of openssl's seem to use bn_***_words() helpers instead (including the BN_div() that Nils fixed recently which had been using independently-coded versions of what these unused macros are intended for) I'm therefore consigning these macros to cvs oblivion in the name of readability
NOT BUG:bn_fix_top() exists for compatibility's sake and is mapped to bn_correct_top() or bn_check_top() depending on debug settings For internal source all bn_fix_top()s should be converted one way or the other depending on whether the use of bn_correct_top() is justified
NOT BUG:For BN_div_recp() these cases should not require correction if the other bignum functions are doing their jobs properly so convert to bn_check_top()
NOT BUG:It was pointed out to me that if the requested size is 0 we shouldn't ty to allocate anything at all This will allow eNULL to still work
NOT BUG:PR: 751 Notified by: Lutz Jaenicke
NOT BUG:Check that OPENSSL_malloc() really returned some memory
NOT BUG:PR: 751 Notified by: meder@mcs.anl.gov Reviewed by: Lutz Jaenicke Richard Levitte
NOT BUG:CRYPTO_malloc() CRYPTO_realloc() and variants of them should return NULL if the give size is 0
NOT BUG:This is a thought that came up in PR 751
NOT BUG:Some more ASFLAGS settings required PR: #735 Submitted by: Tim Rice <tim@multitalents.net>
NOT BUG:Add more debugging to my Configure target and "make update" to incorporate this and a few other changes
NOT BUG:If BN_STRICT is defined don't accept an ambiguous representation of zero (ie where top may be zero or it may be one if the corresponding word is set to zero) Note this only affects the macros in bn.h there are probably similar corrections required in some c files
NOT BUG:Also clarify the audit-related macros at the top of the header Mental note: I must not forget to clean all this out before 0.9.8 is released ..
NOT BUG:Improve a couple of the bignum macros Note this doesn't eliminate tolerance of ambiguous zero-representation it just improves BN_abs_is_word() and simplifies other macros that depend on it
NOT BUG:Make BN_DEBUG_RAND less painfully slow by only consuming one byte of pseudo-random data for each bn_pollute()
NOT BUG:This improves the placement of check_top() macros in a couple of bn_lib functions
NOT BUG:Make sure the documentation matches reality
NOT BUG:PR: 755 Notified by: Jakub Bogusz <qboosh@pld-linux.org>
NOT BUG:We're getting a clash with C++ because it has a type called 'list' Therefore change all instances of the symbol 'list' to something else
NOT BUG:PR: 758 Submitted by: Frédéric Giudicelli <groups@newpki.org>
BUG:Add IPSec/IKE/Oakley curves
BUG:PR: 768 Submitted by: Vadim Fedukovich <vf@unity.net>
NOT BUG:Damnit I'm sick of having to do something special every time a module that gets built before objects barfs all over the place because it uses a new NID that hasn't had a chance of getting defined yet (in this case it was about a couple of new EC curves and therefore a couple of new corresponding NIDs)
NOT BUG:I'm placing objects first in SDIRS! There
NOT BUG:RSA_size() and DH_size() return the amount of bytes in a key and we compared it to the amount of bits required.. PR: 770 Submitted by: c zhang <czhang2005@hotmail.com>
NOT BUG:1024 is the export key bits limit according to current regulations not 512 PR: 771 Submitted by: c zhang <czhang2005@hotmail.com>
NOT BUG:Get rid of some signed/unsigned comparison warnings
NOT BUG:Make a number of changes to the OS/2 build Submitter's comment below
BUG:PR: 732 Submitted by: Ilya Zakharevich <nospam-abuse@ilyaz.org>
BUG:Submitter's comment:
NOT BUG:This patch:
NOT BUG:a) Introduces a new file os2/backwardify.pl
NOT BUG:b) Introduces a new mk1mf.pl variable $preamble As you can see it may be used also to move some OS-specific code to VC-CE too (the the first chunk of the patch);
NOT BUG:c) The DESCRIPTION specifier of the .def file is made more informative: now it contains the version number too On OS/2 it is made conformant to OS/2 conventions; in particular when one runs the standard command BLDLEVEL this.DLL one can see:
NOT BUG:Vendor: www.openssl.org/ Revision: 0.9.7c Description: OpenSSL: implementation of Secure Socket Layer; DLL for library crypto Build for EMX -Zmtd
NOT BUG:[I did not make Win32 descriptions as informative as this - I'm afraid to break something Be welcome to fix this.]
NOT BUG:d) On OS/2 the generated DLL was hardly usable (it had a shared initialized data segment)
NOT BUG:e) On OS/2 the generated DLLs had names like ssl.dll However DLL names on OS/2 are "global data" It is hard to have several DLLs with the same name on the system Thus this precluded coexistence of OpenSSL with DLLs for other SLL implementations - or other name clashes I transparently changed the names of the DLLs to open_ssl.dll and cryptssl.dll
NOT BUG:f) The file added in (a) is used to create "forwarder" DLLs so the applications expecting the "old" DLL names may use the new DLLs transparently (A presence of these DLLs on the system nullifies (e) but makes old applications work This is a stopgap measure until the old applications are relinked Systems with no old applications do not need these DLLs so may enjoy all the benefits of (e).)
NOT BUG:The new DLLs are placed in os2/ and os2/noname subdirectories
NOT BUG:g) The makefiles created with os2/OS2-EMX.cmd did not work (some mysterious meaningless failures) The change to util/pl/OS2-EMX.pl uses the variable introduced in (b) to switch the Makefiles to SHELL=sh syntax All these backslashes are removed and the generated Makefiles started to work
NOT BUG:h) Running os2/OS2-EMX.cmd now prints out what to do next
NOT BUG:Move another common functionality (reproduced so far with cut'n'paste) to apps.c and give it the hopefully descriptive name parse_yesno()
BUG:Let's use text/plain in the example instead of crapy HTML PR: 777 Submitted by: Michael Shields <mshields@sunblocksystems.com>
NOT BUG:Forgot to change the declaration of do_subject() to one of parse_name()..
NOT BUG:Move do_subject() to apps.c and rename it to parse_name() The rationale behind the move is that it's use by several applications The rationale behind the name change is that it describes what the function does a bit better
BUG:Allow multi-valued rdns in subjects This adds the -multivalue-rdn option to 'openssl req' and 'openssl ca'
NOT BUG:PR: 779 Submitted by: Michael Bell <michael.bell@cms.hu-berlin.de> Reviewed by: Richard Levitte
NOT BUG:(there will be some follow-up changes)
NOT BUG:Netware-specific changes
BUG:PR: 780 Submitted by: Verdon Walker <VWalker@novell.com> Reviewed by: Richard Levitte
NOT BUG:Change my debugging entries to do fierce BIGNUM debugging
NOT BUG:Due to recent debugging bursts openssl should be more or less solid against inconsistent BIGNUMs coming out of any of its API functions So this change no longer "fixes" the bn_print.c functions but it makes for cleaner code This patch was a part of ticket 697
BUG:PR: 697 Submitted by: Otto Moerbeek Reviewed by: Geoff Thorpe
BUG:Fix some handling in bn_word This also resolves the issues observed in ticket 697 (though uses a different solution than the proposed one) This problem was initially raised by Otto Moerbeek
NOT BUG:PR: 697 Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
NOT BUG:Some changes for bn_gf2m.c: better error checking plus some minor optimizations
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Free "engine" resource in case of failure to prevent memory leak PR: #778 Submitted by: George Mitchell <george@m5p.com>
NOT BUG:BN_div() cleanup: replace the use of BN_sub and BN_add with bn_sub_words and bn_add_words to avoid using fake bignums to window other bignums that can lead to corruption This change allows all bignum tests to pass with BN_DEBUG and BN_DEBUG_RAND debugging and valgrind NB: This should be tested on a few different architectures and configuration targets as the bignum code this deals with is quite preprocessor (and assembly) sensitive
NOT BUG:Submitted by: Nils Narsch Reviewed by: Geoff Thorpe Ulf Moeller
NOT BUG:Fix a small bug in str_copy: if more than one variable is replaced make sure the current length is used to calculate the new buffer length instead of using the old length (prior to any variable substitution)
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Give CRLDP its standard name
NOT BUG:Max req -x509 use V1 if extensions section absent
NOT BUG:hpux64-parisc2-gcc target added Once it is verified ./config should be modified to choose it instead of hpux64-parisc-gcc which should then be removed hpux64-parisc-cc is removed already now as redundant [in case you wonder 64-bit HP-UX ABI *implies* PA-RISC2.0]
NOT BUG:./config failed to correctly detect if gcc uses 64-bit ABI on HP-UX PR: 772
BUG:Make sure to initialize AES counters to obtain proper results Submitted by: Kirill Kochetkov <kochet@ixbt.com>
BUG:PR: #748
NOT BUG:re-enable the test keeping the original method for RAND_pseudo_bytes which is used by BN_DEBUG_RAND Submitted by: Nils Larsch
NOT BUG:Catch error condition to prevent NULL pointer dereference Submitted by: Goetz Babin-Ebell <babin-ebell@trustcenter.de>
BUG:PR: #766
NOT BUG:Provide ASFLAGS in the subdirectories handling assembler code
NOT BUG:Submitted by: Tim Rice <tim@multitalents.net>
BUG:PR: #735 #765
NOT BUG:The x9.62 tests replace the PRNG with specific numbers so don't run them if BN_DEBUG_RAND is defined
NOT BUG:Also fix another small bug
NOT BUG:Submitted by: Nils Larsch
NOT BUG:BN_set_bit() etc should use "unsigned int" Keep it as is to avoid an API change but check for negativ values
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Less restrictive debugging build
NOT BUG:This rewrites two "for" loops in BN_rshift() - equality with zero is generally a more efficient comparison than comparing two integers and the first of these two loops was off-by-one (copying one too many values) This change also removes a superfluous assignment that would set an unused word to zero (and potentially allow an overrun in some cases)
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
NOT BUG:General improvements to the ec_asn1.c code This squashes at least one bug (where it was impossible to create an EC certificate with a compressed public key) and has some style improvements based on some comments from Steve Henson about use of the ASN1 macros
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
NOT BUG:Avoid possible memory leaks in error-handling
NOT BUG:Submitted by: Nils Larsch Reviewed by: Geoff Thorpe
NOT BUG:Print out GeneralizedTime and UTCTime in ASN1_STRING_print_ex()
NOT BUG:Geoff suggested a more succinct description for "top"
NOT BUG:oops.. the description of ->top was inaccurate (the example is correct though)
NOT BUG:This extends the debugging macros to use "pollution" during bn_correct_top() previously only bn_check_top() did this
NOT BUG:Add debug-screening of input parameters to some functions I'd missed before
NOT BUG:Put more debug screening in BN_div() and correct a comment
NOT BUG:This is a revert of my previous commit to "improve" the declaration of constant BIGNUMs It turns out that this trips up different but equally useful compiler warnings to -Wcast-qual and so wasn't worth the ugliness it created (Thanks to Ulf for the forehead-slap.)
NOT BUG:typo in comment
NOT BUG:cleanup as discussed with Geoff
NOT BUG:Cygwin debugging
NOT BUG:Put the first stage of my bignum debugging adventures into CVS This code is itself experimental and in addition may cause execution to break on existing openssl "bugs" that previously were harmless or at least invisible
NOT BUG:Avoid some shadowed variable names Submitted by: Nils Larsch
NOT BUG:This is the least unacceptable way I've found for declaring the bignum data and structures as constant without having to cast away const at any point There is still plenty of other code that makes gcc's "-Wcast-qual" unhappy but crypto/bn/ is now ok Purists are welcome to suggest alternatives
NOT BUG:Engines are usually binary and should therefore be in INSTALLTOP rather than OPENSSLDIR
NOT BUG:Let exit codes propagate from within for loops
BUG:bn_div() does some pretty nasty things with temporary variables constructing BIGNUM structures with pointers offset into other bignums (among other things) This corrects some of it that is too plainly insane and tries to ensure that bignums are normalised when passed to other functions
NOT BUG:When a BN_CTX is used for temporary workspace the variables are sometimes left in an inconsistent state when they are released for later reuse This change resets the BIGNUMs when they are released back to the context
NOT BUG:This fixes a couple of cases where an inconsistent BIGNUM could be passed as input to a function
NOT BUG:make update
NOT BUG:Tighten up my compiler settings
NOT BUG:Remove a line that was causing redundant declarations Obtained from: Stephen Henson <steve@openssl.org>
NOT BUG:Copy-n-paste bug (don't mix variable declarations and code) This sets the callback structure just before it is needed
NOT BUG:Oops this file already had the "empty source file" workaround but it requires -DPEDANTIC and was hidden at the bottom of the file This moves it to the top and removes the redundant declaration
NOT BUG:Make md32_common.h friendlier to compiler warnings Obtained from: Andy Polyakov <appro@openssl.org>
NOT BUG:Some provisional bignum debugging has begun to detect inconsistent BIGNUM structures being passed in to or out of API functions and this corrects a couple of cases found so far
NOT BUG:Also lop off a couple of bytes of white-space
NOT BUG:A general spring-cleaning (in autumn) to fix up signed/unsigned warnings I have tried to convert 'len' type variable declarations to unsigned as a means to address these warnings when appropriate but when in doubt I have used casts in the comparisons instead The better solution (that would get us all lynched by API users) would be to go through and convert all the function prototypes and structure definitions to use unsigned variables except when signed is necessary The proliferation of (signed) "int" for strictly non-negative uses is unfortunate
NOT BUG:BN_CTX is opaque and the static initialiser BN_CTX_init() is not used except internally to the allocator BN_CTX_new() as such this deprecates the use of BN_CTX_init() in the API Moreover the structure definition of BN_CTX is taken out of bn_lcl.h and moved into bn_ctx.c itself
NOT BUG:NDEBUG should probably only be "forced" in the top-level configuration but until it is I will avoid removing it from bn_ctx.c which might surprise people with massive slow-downs in their keygens So I've left it in bn_ctx.c but tidied up the preprocessor logic a touch and made it more tolerant of debugging efforts
NOT BUG:Removing those memcpy()s also took away the possibility for in and out to be the same Therefore the removed memcpy()s need to be restored
NOT BUG:remove accidentally committed debugging cruft
NOT BUG:Remove an unnecessary cast that causes certain compilers (eg mine) some confusion Also silence a couple of signed/unsigned warnings
NOT BUG:Remove redundant declaration
NOT BUG:Relax some over-zealous constification that gave some lhash-based code no choice but to have to cast away "const" qualifiers from their prototypes This does not remove constification restrictions from hash/compare callbacks but allows destructor commands to be run over a tables' elements without bad casts
NOT BUG:Comments out some unimplemented functions instead of redeclaring them
NOT BUG:Avoid "empty source file" warnings
NOT BUG:For whatever reason (compiler or header bugs) at least one commonly-used linux system (namely mine) chokes on our definitions and uses of the "HZ" symbol in crypto/tmdiff.[ch] and apps/speed.c as a "bad function cast" (when in fact there is no function casting involved at all) In both cases it is easily worked around by not defining a cast into the macro and jiggling the expressions slightly
NOT BUG:In addition - this highlights some cruft in openssl that needs sorting out The tmdiff.h header is exported as part of the openssl API despite the fact that it is ugly as the driven sludge and not used anywhere in the library applications or utilities More weird still almost identical code exists in apps/speed.c though it looks to be slightly tweaked - so either tmdiff should be updated and used by speed.c or it should be dumped because it's obviously not useful enough
NOT BUG:Rather than removing it for now I've changed the API for tmdiff to at least make sense This involves taking the object type (MS_TM) from the implementation and using it in the header rather than using "char *" in the API and casting mercilessly in the code (ugh) If someone doesn't like "MS_TM" and the "ms_time_***" naming by all means change it This should be a harmless improvement because the existing API is clearly not very useful (eg we reimplement it rather than using it in our own utils)
NOT BUG:However someone still needs to take a hack at consolidating speed.c and tmdiff.[ch] somehow
NOT BUG:Update any code that was using deprecated functions so that everything builds and links with OPENSSL_NO_DEPRECATED defined
NOT BUG:When OPENSSL_NO_DEPRECATED is defined deprecated functions are (or should be) precompiled out in the API headers This change is to ensure that if it is defined when compiling openssl the deprecated functions aren't implemented either
NOT BUG:The "cryptodev" engine preprocessor logic used undefined symbols in comparisons It's better not to allow this because it gives false positives when using compiler warnings that detect mistyped symbols
NOT BUG:Add my own debug config target
NOT BUG:make update
NOT BUG:Ignore derived file
NOT BUG:crypto/evp/evptests.txt is copied to tests/ rather than symlinked because of windows (see checkin 1.75 of crypto/evp/Makefile.ssl) so quiet cvs noise for the copied version
NOT BUG:Remove duplicate prototypes have already been (correctly) added to rsa.h as this is already included by x509.h anyway
NOT BUG:Correct serious bug in AES-CBC decryption when the message length isn't a multiple of AES_BLOCK_SIZE Optimize decryption of all complete blocks in AES-CBC by removing an unnecessary memcpy()
BUG:The error was notified by James Fernandes <jf210032@exchange.DAYTONOH.NCR.com> The unnecessary memcpy() was found as an effect of investigating that error
NOT BUG:The object file is o_str.o not o_str.c
BUG:Thanks to Peter Sylvester <Peter.Sylvester@EdelWeb.fr> for the notification
NOT BUG:Add support for digested data PKCS#7 type
NOT BUG:Simplify cipher and digest lookup in PKCS#7 code
NOT BUG:New function to initialize a PKCS7 structure of type other
NOT BUG:Initialize digested data type in PKCS7_set_type()
NOT BUG:Retrieve correct content to sign when the type is "other"
NOT BUG:Avoid warnings: add missing prototype don't shadow
NOT BUG:In realloc don't destroy the old memory area if a new one couldn't be allocated Notified by Daniel Lucq <daniel@lucq.org>
NOT BUG:make update
BUG:s_client should inform the user of any compression/expansion methods used
NOT BUG:Add functionality to get information on compression methods (not quite complete)
NOT BUG:Make sure int SSL_COMP_add_compression_method() checks if a certain compression identity is already present among the registered compression methods and if so reject the addition request
NOT BUG:Declare SSL_COMP_get_compression_method() so it can be used properly
NOT BUG:Change ssltest.c so it checks what compression methods are available and enumerates them As a side-effect built-in compression methods will be automagically loaded that way Additionally change the identities for ZLIB and RLE to be conformant to draft-ietf-tls-compression-05.txt
NOT BUG:Finally make update
NOT BUG:Next on my list: have the built-in compression methods added "automatically" instead of requiring that the author call SSL_COMP_add_compression_method() or SSL_COMP_get_compression_methods()
NOT BUG:Setting the ex_data index is unsafe in a threaded environment so let's wrap it with a lock
NOT BUG:Remove unused code don't use zlib functions that are really macros and provide missing prototypes
NOT BUG:Check for errors from SSL_COMP_add_compression_method() Notified by Andrew Marlow <AMARLOW1@bloomberg.net>
NOT BUG:Correct a mixup of return values
NOT BUG:Include e_os.h to get a proper definition of memmove on the platforms that do not have it
NOT BUG:Corrected misplacement of one of the greps..
NOT BUG:Remove leading and trailing spaces and tabs
NOT BUG:Avoid 'file names' with spaces
NOT BUG:Use correct case for manual page references
NOT BUG:Correct incorrect mode bits change
BUG:Correct buggy PODs (missing commas and a prepended space)
NOT BUG:ASN1 parse fix and release file changes
BUG:Further VxWorks changes from Bob Bradley <bob@chaoticsoftware.com> this time involving VxWorks on MIPS
NOT BUG:Synchronise util/libeay.num with the 0.9.7-stable one make update
NOT BUG:Uhmm It seem to have forgotten one file when I committed the MSDOS change yesterday PR: 669
NOT BUG:Change the indentation from 12 to indent+4 PR: 657
NOT BUG:Make MD5 assembler code able to handle messages larger than 2GB on 32-bit systems and above PR: 664
BUG:Selected changes for MSDOS contributed by Gisle Vanem <giva@bgnett.no> PR: 669
NOT BUG:Add reference counting around the thread state hash table Unfortunately this means that the dynamic ENGINE version just went up and isn't backward compatible PR: 678
NOT BUG:Have ssl3_ssl3_send_client_verify() change the state to SSL3_ST_SW_CERT_VRFY_B PR: 679
NOT BUG:Have ssl3_send_certificate_request() change the state to SSL3_ST_SW_CERT_REQ_B PR: 680
NOT BUG:Include the instance in the Kerberos ticket information In s_server print the received Kerberos information PR: 693
NOT BUG:Correct small documentation error PR: 698
NOT BUG:Free the Kerberos context upon freeing the SSL Contributed by Andrew Mann <amann@tccgi.com>
NOT BUG:Add necessary changes to be able to build on VxWorks for PPC860 Contributed by Bob Bradley <bob@chaoticsoftware.com>
NOT BUG:Fix prime generation loop in crypto/bn/bn_prime.pl by making sure the loop does correctly stop and breaking ("division by zero") modulus operations are not performed The (pre-generated) prime table crypto/bn/bn_prime.h was already correct but it could not be re-generated on some platforms because of the "division by zero" situation in the script
NOT BUG:Add -passin support to rsautl
NOT BUG:In order to get the expected self signed error when calling X509_verify_cert() in x509.c the cert should not be added to the trusted store
NOT BUG:Typos
NOT BUG:Generalise the definition of strcasecmp() and strncasecmp() for platforms that don't (necessarely) have it In the case of VMS this means moving a couple of functions from apps/ to crypto/ and make them general (although only used privately)
NOT BUG:These should be write-locks not read-locks
BUG:certain changes have to be listed twice in this file because OpenSSL 0.9.6h forked into 0.9.6i and 0.9.7 ..
NOT BUG:New -ignore_err option in ocsp application to stop the server exiting on the first error in a request
NOT BUG:Only accept a client certificate if the server requests one as required by SSL/TLS specs
NOT BUG:outlen should be int * in out_utf8
NOT BUG:fix out-of-bounds check in lock_dbg_cb (was too lose to detect all invalid cases)
NOT BUG:PR: 674
NOT BUG:make sure no error is left in the queue that is intentionally ignored
NOT BUG:Correct two problems found by Martin Kochanski <cardbox@easynet.co.uk>:
NOT BUG:1 CreateToolhelp32Snapshot returns INVALID_HANDLE_VALUE not NULL on error 2 On Windows CE a snapshot handle is closed with CloseToolhelp32Snapshot not CloseHandle
NOT BUG:add OpenSSL license
NOT BUG:fix typo
NOT BUG:Inclusion of openssl/engine.h should always be wrapped with a check that OPENSSL_NO_ENGINE is not defined
NOT BUG:Avoid clashes with Win32 names in WinCrypt.h
NOT BUG:updates for draft-ietf-tls-ecc-03.txt
NOT BUG:Submitted by: Douglas Stebila Reviewed by: Bodo Moeller
NOT BUG:add test for secp160r1 add code for kP+lQ timings
NOT BUG:Submitted by: Douglas Stebila <douglas.stebila@sun.com> Reviewed by: Bodo Moeller
NOT BUG:tolerate extra data at end of client hello for SSL 3.0
NOT BUG:PR: 659
BUG:fix: 0.9.7 is based on 0.9.6h not on 0.9.6k
NOT BUG:typo in 0.9.6k section
NOT BUG:new function EC_GROUP_cmp() (used by EVP_PKEY_cmp())
NOT BUG:Submitted by: Nils Larsch
NOT BUG:manpages for 'openssl ec' and 'openssl ecparam'
NOT BUG:Submitted by: Nils Larsch
NOT BUG:A document that has a very rough description of the X509 functionality This is mostly so there's a way to get from the crypto.html page to the function descriptions
NOT BUG:Replace CCITT with ITU-T Keep CCITT around as an alias make update
NOT BUG:PR: 80
NOT BUG:Make sure openssl.pc is readable by everyone PR: 654
NOT BUG:The counter is big-endian Since it comes as an array of char there's absolutely no need to special-case it on little-endian machines
NOT BUG:Notified by Thierry Boivin <Thierry.Boivin@celsecat.com>
NOT BUG:Oops I forgot to replace 'counter' with 'ivec' when used..
NOT BUG:Add -issuer_hash and make -subject_hash the default way to get the subject hash with -hash a synonym kept around for backward compatibility reasons PR: 650
BUG:The convenience argumetn for -nameopt and -certopt is ca_default not default_ca PR: 653
NOT BUG:The 'counter' is really the IV
NOT BUG:Change AES-CTR to increment the IV by 1 instead of 2^64
NOT BUG:Clarify wording of verify_callback() behaviour
BUG:Only remove old files if they exist [Maing32] Notified by Michael Gerdau <mgd@technosis.de>
NOT BUG:Nils Larsch told me I could remove that variable entirely
NOT BUG:make update
NOT BUG:Implement missing functions Have the f parameter to _ctrl functions have the prototype (*)(void) rather than (*)() for the sake of C++ compilers Disable unimplemented functionality
NOT BUG:"Remove" unused variable
NOT BUG:Conform with the standard prototype for engine control functions
NOT BUG:Scan through the engines directory as well
NOT BUG:The definition of dynamic_ctrl() should change along with the declaration :-)
NOT BUG:implement PKCS #8 / SEC1 private key format for ECC
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Return EOF when an S/MIME part have been read
NOT BUG:Make sure the compiler knows we run with pedantic settings
NOT BUG:make update
NOT BUG:Document the last change PR: 587
NOT BUG:Prepare for changes in the 0.9.6 branch
NOT BUG:Prepare for changes in the 0.9.6 branch
NOT BUG:We set the export flag for 512 *bit* keys not 512 *byte* ones PR: 587
NOT BUG:Add documentation for the new crlnumber configuration option
NOT BUG:Typo
NOT BUG:Implement CRL numbers Contributed in whole by Laurent Genier <Laurent.Genier@intrinsec.com> PR: 644
NOT BUG:dynamic_ctrl() didn't have exactly the same prototype as defined by ENGINE_CTRL_FUNC_PTR
NOT BUG:Unsigned vs signed fixed
NOT BUG:EXIT() should mainly be exit(n) not return(n) OPENSSL_EXIT() will take care of returning if necessary
NOT BUG:Add the application data type to the README
NOT BUG:Missing string and potential memory leaks Notified by Goetz Babin-Ebell <goetz@shomitefo.de>
NOT BUG:Slightly better check of attributes Now mem_list_next can actually stop when the searched for key doesn't have it's attributes within the range of the checked key
BUG:Beautify
NOT BUG:Typo PR: 584
BUG:Do not try to use non-existent gmtime_r() on SunOS4 PR: 585
BUG:Make sure ssize_t is defined on SunOS4 PR: 585
BUG:Make sure DSO-dlfcn works properly on SunOS4 PR: 585
BUG:Typo PR: 593
NOT BUG:Add the possibility to have symbols loaded globally with DSO
NOT BUG:make update
NOT BUG:Avoid warnings saying that the format takes a void*
NOT BUG:Remove unused variable
BUG:Add an entry for X509_TRUST_OBJECT_SIGN in trstandard[] PR: 617
NOT BUG:Add documentation for ERR_set_mark() and ERR_pop_to_mark()
NOT BUG:Add functionality to set marks on the error stack and to pop all errors to the next mark
NOT BUG:Handle des_modes.pod properly PR: 634
NOT BUG:Make sure to NUL-terminate the string on end-of-file (and error) PR: 643
NOT BUG:Add crypto/store to the directories to look through
NOT BUG:Document the AES_cbc_encrypt() change
NOT BUG:The output from AES_cbc_encrypt() should be exact multiple blocks when encrypting
NOT BUG:Typo
NOT BUG:This memset() in the ubsec ENGINE is a bug Zeroing out the result array should not be necessary in any case but more importantly the result and input BIGNUMs could be the same in which case this is clearly a problem
NOT BUG:Submitted by: Jonathan Hersch Reviewed by: Joe Orton Approved by: Geoff Thorpe
NOT BUG:Make sure the sigaction structure and fileno function are properly declared with an ANSI compiler on Solaris (and possibly others)
NOT BUG:Remove extra ;
NOT BUG:Make sure the function definitions match their declaration
NOT BUG:Make sure that size_t matches size_t
NOT BUG:Make sure debug-solaris-sparcv9-gcc is consistent with solaris-sparcv9-gcc
NOT BUG:Really get X509_CRL_CHECK_ALL right this time..
NOT BUG:Clarify return value of SSL_connect() and SSL_accept() in case of the WANT_READ and WANT_WRITE conditions
NOT BUG:Update CHANGES to reflect base64 fix added to 0.9.7
BUG:Only count 'LF' as EOL in pk7_mime.c this avoids incorrect results if CR+LF straddles the line buffer
NOT BUG:Stop checking for CRLF when start of buffer is reached
NOT BUG:Add rest of long line fix which got missed before
NOT BUG:Various S/MIME bug and compatibility fixes
NOT BUG:Clarify ordering of certificates when using certificate chains
NOT BUG:Include openssl/e_os.h so OPENSSL_SYSNAME_ULTRASPARC and other configuration macros get properly defined
NOT BUG:Have ASFLAGS be defined the same way as CFLAGS
BUG:PR: 630
NOT BUG:Avoid looking outside the key_data array
NOT BUG:Add minimum POP3 STLS hack to s_client.c (as was provided for STARTTLS before) Submitted by: dg@sunet.ru (Daniel Ginsburg)
NOT BUG:PR: #613
NOT BUG:Move header file inclusion to prevent irritation of users forgetting to call "make depend" after enabling or disabling ciphers.. Submitted by: Tal Mozes <talm@cyber-ark.com>
NOT BUG:PR: #628
BUG:PR: 627
BUG:Allocate certificatePolicies correctly if CPS field is absent
NOT BUG:Fix various memory leaks in certificatePolicies
BUG:PR: 631 Submitted by: Doug Sauder <dws+001@hunnysoft.com>
NOT BUG:Fix bug in X509V3_get_d2i() when idx in not NULL
NOT BUG:Make sure to compare unsigned against unsigned
NOT BUG:Brackets are now allowed after a small hack in the processing of the docs-on-web
NOT BUG:Fix sign bugs PR: 621
BUG:Correct signedness
NOT BUG:Make sure EC_window_bits_for_scalar_size() returns a size_t
NOT BUG:I have no idea how I cut away that piece of text..
NOT BUG:I don't remember what my thinking was with str_compat.h Maybe it'll come back to me..
NOT BUG:make update
NOT BUG:Misspelled functions
NOT BUG:Some misspelled function names
NOT BUG:Make the function STORE_new_engine() public
NOT BUG:Remove certain functions
BUG:The square brackets in BIO_s_bio.pod for some reason cause wml to bomb out with the error message:
BUG:** Slice:Error: Some slices were not closed: ** WML:Break: Error in Pass 9 (rc=1) ** WMK:Error: Error in WML (rc=256)
NOT BUG:As a workaround delete them for now
NOT BUG:Fix docs
NOT BUG:Add correct DN entry for serialNumber
NOT BUG:Define the two authentication parameter types for passphrase and Kerberos 5 authentications
NOT BUG:Add the possibility to hand execution parameters (for example authentication material) to the STORE functions Suggested by Götz Babin-Ebell <babin-ebell@trustcenter.de>
NOT BUG:/usr/lib/pkgconfig/openssl.pc was never installed in the RPM Notified by Bennett Todd <bet@rahul.net>
NOT BUG:DO NOT constify RSA* in RSA_sign() and RSA_verify() since there are function called downstream that need it to be non-const The fact that the RSA_METHOD functions take the RSA* as a const doesn't matter it just expresses that *they* won't touch it PR: 602
NOT BUG:Add the possibility to store arbitrary data in a STORE Suggested by Götz Babin-Ebell <babin-ebell@trustcenter.de>
BUG:Constify RSA_sign() and RSA_verify() PR: 602
NOT BUG:Yeah right an object file ending with .c that'll work!
NOT BUG:Make DER option work again
NOT BUG:Fix typo
NOT BUG:It's usually best if the function name matches everywhere..
NOT BUG:STORE was created 2003 darnit!
NOT BUG:Get the year right..
NOT BUG:Provide some extra comments about the STORE_Memory STORE method
NOT BUG:make update
NOT BUG:Add STORE support in ENGINE
NOT BUG:Define a STORE type For documentation read the entry in CHANGES crypto/store/README crypto/store/store.h and crypto/store/str_locl.h
NOT BUG:Define a STORE lock (the STORE type will be committed later)
NOT BUG:Define the OPENSSL_ITEM structure
NOT BUG:make update
NOT BUG:Add BUF_strndup() and BUF_memdup() Not currently used but I've code that uses them that I'll commit in a few days
NOT BUG:make update
NOT BUG:Include objects.h to get a correct declaration of OBJ_bsearch_ex() not to mention the OBJ_BSEARCH_* macros
NOT BUG:Some variables were uninitialised..
NOT BUG:Correct documentation sk_find_ex() doesn't return a pointer it returns an index
NOT BUG:Add an extended variant of sk_find() which returns a non-NULL pointer even if an exact match wasn't found
NOT BUG:Add an extended variant of OBJ_bsearch() that can be given a few flags
NOT BUG:fix typo
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Make it possible to affect the extension of man pages PR: 578
NOT BUG:Memory leak fix: RSA_blinding_on() didn't free Ai under certain circumstances Memory leak fix: RSA_blinding_on() would leave a dangling pointer in rsa->blinding under certain circumstances Double definition fix: RSA_FLAG_NO_BLINDING was defined twice
NOT BUG:Memory leak fix: local blinding structure not freed in rsa_eay_private_decrypt()
BUG:include 'Changes between 0.9.6i and 0.9.6j'
BUG:Add the 0.9.6j news
NOT BUG:make update
NOT BUG:New NEWS
NOT BUG:Remove all those infernal stupid CR characters
NOT BUG:There's a problem building shared libraries on the sco5-gcc target However it's time for a release so I'm just adding an enty in PROBLEMS and will hopefully solve this for a later release
NOT BUG:Explicitely tell the compiler we're mips3 for the target irix-mips3-cc
NOT BUG:Typo
NOT BUG:Include rand.h so RAND_status() and friends get properly declared
NOT BUG:Correct a few typos
NOT BUG:It seems that svr3 and svr5 differ after all
NOT BUG:A single quote too many
NOT BUG:I forgot to continuation mark
NOT BUG:It seems like OpenUnix's ld uses LD_LIBRARY_PATH to search for libraries What's worse the directories given in LD_LIBRARY_PATH are checked first! Therefore we need a hack to prepend all the directories we give with -L to the current value of LD_LIBRARY_PATH thereby temporarly forming a hacked value
NOT BUG:Only copy LIBEXTRAS if they are given
NOT BUG:Svr5 doesn't use -z allextract..
NOT BUG:Fix ordering of compare functions: strncmp() must be used first a the cipher name in the list is not guaranteed to be at least "buflen" long PR: 567 Submitted by: "Matt Harren" <matth@cs.berkeley.edu>
NOT BUG:We seem to carry some rests of the 0.9.6 [engine] ENGINE framework here in form of unneeded direct calls through the engine pointer.
NOT BUG:We seem to carry some rests of the 0.9.6 [engine] ENGINE framework in form of unneeded includes of openssl/engine.h
NOT BUG:RSA_FLAG_SIGN_VER indicates the special rsa_sign and rsa_verify function pointers should be used It doesn't necessarely mean it should go through the ENGINE framework
NOT BUG:What was I smoking? EVP_PKEY_cmp() should return with 0 if EVP_PKEY_cmp_parameters() returned 0 otherwise it should go on processing the public key component Thia has nothing to do with the proper handling of EC parameters or not
NOT BUG:Correct a typo Have EVP_PKEY_cmp() call EVP_PKEY_cmp_parameters() and make a note about the lack of parameter comparison for EC
NOT BUG:Constify
NOT BUG:Do not call ENGINE_setup_bsd_cryptodev() when OPENSSL_NO_ENGINE is defined PR: 564
NOT BUG:Convert save_serial() to work like save_index() and add a rotate_serial() that works like rotate_index()
NOT BUG:Add documentation on the added functionality in 'openssl ca'
NOT BUG:make update
NOT BUG:There's no need to check for __attribute__ with ANSI functions since we only check to the opening parenthesis anyway..
NOT BUG:Correct a lot of printing calls Remove extra arguments..
NOT BUG:Make %p and %# work properly at least with pointers and floats
NOT BUG:Add GCC attributes when compiled with gcc This helps find out if we're using the printing functions correctly or not
NOT BUG:I used the corresponding attributes found in the header files of my Linux installation
NOT BUG:Counter for GCC attributes
NOT BUG:One more debug line to conditionalise
NOT BUG:Add a CA section to make sure the test will work with the changes in CA.sh
NOT BUG:Implement self-signing in 'openssl ca' This makes it easier to have the CA certificate part of the CA database and combined with 'unique_subject=no' it should make operations like CA certificate roll-over easier
NOT BUG:Add functionality to help making self-signed certificate
NOT BUG:It's recommended to use req rather than x509 to create self-signed certificates
NOT BUG:Typo correction
NOT BUG:Don't try to free NULL values..
BUG:Reindent for readability
NOT BUG:Remove unused variable
NOT BUG:Reset the version number of the issuer certificate? I believe this hasn't been tested in a long while..
NOT BUG:Conditionalise all debug strings
NOT BUG:Make it possible to have multiple active certificates with the same subject
NOT BUG:make RSA blinding thread-safe
NOT BUG:It seems like gcc-drivven shared library building on OpenUnix 8 requires -shared rather than -G
NOT BUG:Update from stable branch
BUG:No need to test -setalias twice PR: 556
BUG:Don't feil when indent is 0 PR: 559
NOT BUG:Add usage string for -fingerprint PR: 560
BUG:Multi valued AVA support
NOT BUG:OpenUNIX 8 has some problems using -G with gcc Maybe using gnu-shared works better (will be tested tonight)
BUG:Add warning about unwanted side effect when calling SSL_CTX_free(): sessions in the external session cache might be removed Submitted by: "Nadav Har'El" <nyh@math.technion.ac.il>
BUG:PR: 547
NOT BUG:Update VMS building system
NOT BUG:Update ocsp usage message and docs
NOT BUG:Let's limit the extent of the definition of _XOPEN_SOURCE
NOT BUG:Missed a few dollars PR: 528
NOT BUG:make update
NOT BUG:Support for name constraints
NOT BUG:Name Constraints OID
BUG:Add SCO5 shared library scripts Upate SVR5 scripts for the upcoming 0.9.7b Submitted by: Boyd Lynn Gerber <gerberb@zenez.com>
NOT BUG:To define OPENSSL_NO_FP_API for all MSDOS type targets was unfair against DJGPP and much more restricted than previous definitions
NOT BUG:make update
NOT BUG:Support for policy constraints
BUG:remove patch ID (which is supposed to appear in patched variants of old OpenSSL releases but not in new releases)
NOT BUG:Define COMP method function prototypes properly
NOT BUG:Make sure to declare mem*() properly
NOT BUG:make update
NOT BUG:Don't put configuration macro definitions on the command line we're just fooling ourselves and then screwing up for other applications
NOT BUG:Sometimes we have partial comments on the same line as other stuff we parse Make sure to read in the whole comment so it can be entirely removed
NOT BUG:Make sure we get the definition of OPENSSL_NO_RSA
NOT BUG:Make sure we get the definition of OPENSSL_NO_HMAC and OPENSSL_NO_SHA
NOT BUG:Make sure we get the definition of OPENSSL_NO_SHA
NOT BUG:Make sure we get the definition of OPENSSL_NO_RIPEMD
NOT BUG:Make sure we get the definition of OPENSSL_NO_MDC2
NOT BUG:Make sure we get the definition of OPENSSL_NO_MD5
NOT BUG:Make sure we get the definition of OPENSSL_NO_MD4
NOT BUG:Make sure we get the definition of OPENSSL_NO_MD2
NOT BUG:Make sure we get the definition of OPENSSL_NO_DES
NOT BUG:Make sure we get the definition of OPENSSL_NO_RC5
NOT BUG:Make sure we get the definition of OPENSSL_NO_RC4
NOT BUG:Make sure we get the definition of OPENSSL_NO_RC2
NOT BUG:Make sure we get the definition of OPENSSL_NO_IDEA
NOT BUG:Make sure we get the definition of OPENSSL_NO_CAST
NOT BUG:Make sure we get the definition of OPENSSL_NO_BF
NOT BUG:Make sure we get the definition of OPENSSL_NO_AES
NOT BUG:Make sure we get the definition of a number of OPENSSL_NO_* macros
NOT BUG:Make sure we get the definition of OPENSSL_NO_BIO
NOT BUG:Include e_os.h correctly
NOT BUG:Make sure we get the definition of OPENSSL_NO_MD2
NOT BUG:Make sure we get the definition of OPENSSL_NO_FP_API
NOT BUG:Make sure we get the definition of OPENSSL_NO_IDEA and IDEA_INT
NOT BUG:Make sure we get the definition of OPENSSL_NO_HMAC
NOT BUG:Make sure we get the definition of OPENSSL_NO_ECDSA
NOT BUG:Make sure we get the definition of OPENSSL_NO_ECDH
NOT BUG:Make sure we get the definition of OPENSSL_NO_EC
NOT BUG:Make sure we get the definition of OPENSSL_NO_DSA and OPENSSL_NO_SHA
NOT BUG:Make sure we get the definition of OPENSSL_NO_DH
NOT BUG:Make sure we get the definition of OPENSSL_EXTERN OPENSSL_NO_DES DES_LONG and OPENSSL_NO_DESCBCM
NOT BUG:Make sure we get the definition of OPENSSL_NO_CAST
NOT BUG:Make sure we get the definition of OPENSSL_NO_ERR
NOT BUG:Make sure we get the definition of OPENSSL_NO_SOCK
NOT BUG:Make sure we get the definition of OPENSSL_NO_FP_API
NOT BUG:Make sure we get the definition of OPENSSL_NO_BF
NOT BUG:Make sure we get the definition of OPENSSL_NO_BIO and OPENSSL_NO_RSA
NOT BUG:Make sure we get the definition of OPENSSL_NO_AES
NOT BUG:Because it may be needed in public header files move the definition of OPENSSL_NO_FP_API on existence of OPENSSL_SYS_MSDOS to e_os2.h
NOT BUG:make update
NOT BUG:New ASN1 macros to just implement and declare the new and free functions and changes to mkdef.pl so it recognises them
NOT BUG:Use these in policyMappings extension
NOT BUG:make sure RSA blinding works when the PRNG is not properly seeded; enable it automatically for the built-in engine
NOT BUG:Support for policyMappings
NOT BUG:Typo: OID should be policyMappings
NOT BUG:Avoid warning
BUG:Add documentation for -starttls (s_client) and -id_prefix (s_server) PR: 542
NOT BUG:make update
NOT BUG:Some shells (ksh in this case) don't say 'command not found' PR: 540
NOT BUG:Spelling errors PR: 538
NOT BUG:Make sure that all the library paths are modified in prepend mode not replace mode PR: 528
NOT BUG:hinv may generate more than one line (1 line per CPU) PR: 520
NOT BUG:Shut up an ANSI compiler about uninitialised variables PR: 517
NOT BUG:Add the target linux-ia64-ecc suggested by Keith Thompson <kst@sdsc.edu> PR: 516
BUG:countermeasure against new Klima-Pokorny-Rosa atack
NOT BUG:Fix Certificate and CRL adding in X509_load_cert_crl_file: an X509_INFO structure can contain more than one object for example a certififcate and a CRL
NOT BUG:fix formatting
NOT BUG:Fix for no-ec on Windows
NOT BUG:Don't give an error if response reason absent in OCSP HTTP
NOT BUG:Add entry for domainComponent so it is treated correctly
NOT BUG:Add table order test to end of a_strnid.c
NOT BUG:Add some OIDs
NOT BUG:Fix PEDANTIC stuff..
NOT BUG:Fix a bone-head bug This warrants a CHANGES entry because it could affect applications if they were passing a bogus 'flags' parameter yet having things work as they wanted anyway
NOT BUG:Return an error if gmtime returns NULL
NOT BUG:Avoid warnings for no-engine and PEDANTIC
NOT BUG:Fixes for EVP_DigestInit_ex() and OPENSSL_NO_ENGINE
NOT BUG:The default implementation of DSA_METHOD has an interdependence on the dsa_mod_exp() and bn_mod_exp() handlers from dsa_do_verify() and dsa_sign_setup() When another DSA_METHOD implementation does not define these lower-level handlers it becomes impossible to do a fallback to software on errors using a simple DSA_OpenSSL()->fn(key)
NOT BUG:This change allows the default DSA_METHOD to function in such circumstances by only using dsa_mod_exp() and bn_mod_exp() handlers if they exist otherwise using BIGNUM implementations directly (which is what those handlers did before this change) There should be no noticable difference for the software case or indeed any custom case that didn't already segfault except perhaps that there is now one less level of indirection in all cases
NOT BUG:PR: 507
NOT BUG:- new ECDH_compute_key interface (KDF is no longer a fixed built-in) - bugfix: in ECDH_compute_key pad x coordinate with leading zeros if necessary
NOT BUG:memset problem has been handled
BUG:PR: 343
NOT BUG:use tabs for indentation not spaces
NOT BUG:Encryption BIOs misbehave when used with non blocking I/O
NOT BUG:Two fixes:
NOT BUG:1 If BIO_write() fails inside enc_write() it should return the total number of bytes successfully written
NOT BUG:2 If BIO_write() fails during BIO_flush() it should return immediately with the error code: previously it would fall through to the final encrypt corrupting the buffer
NOT BUG:Typo
NOT BUG:add Certicom licensing e-mail address
NOT BUG:Support for dirName from config files in GeneralName extensions
NOT BUG:Fix indefinite length encoding so EOC correctly updates the buffer pointer
NOT BUG:Rename PKCS7_PARTSIGN to PKCS7_STREAM
NOT BUG:Guess what that's for :-)
NOT BUG:year 2003
NOT BUG:include OpenSSL license (in addition to EAY license)
NOT BUG:Add instructions for building the MinGW target in Cygwin and rearrange some of the other text for better readability
NOT BUG:Copy rather than symlink the test data This is needed because Windows doesn't support symlinks
NOT BUG:The Cygwin/MinGW build now passes "make test"
NOT BUG:remove some more useless code The mingw target can now be built under cygwin
NOT BUG:more mingw related cleanups
NOT BUG:Remove duplication and have clean depend on libclean
NOT BUG:Allow building applications against static libraries with Makefile.shared
NOT BUG:Base64 bio fixes The base64 bio was seriously broken when reading from a non blocking BIO
NOT BUG:It would incorrectly interpret retries as EOF incorrectly buffer initial data and have no buffering at all after initial data (data would be sent one byte at a time to EVP_DecodeUpdate)
NOT BUG:add test
NOT BUG:avoid duplicate definiton of bn_sub_part_words
NOT BUG:clean up MinGW build MinGW make now supports the Windows path name conventions
NOT BUG:update mingw info
NOT BUG:treat 'out' like i2d functions do; cf asn1_item_flags_i2d (crypto/asn/tasn_enc.c)
NOT BUG:ECPublicKey_set_octet_string and ECPublicKey_get_octet_string behaviour was not quite consistent with the conventions for d2i and i2d functions as far as handling of the 'out' or 'in' pointer is concerned
NOT BUG:This patch changes this behaviour and renames the functions to o2i_ECPublicKey and i2o_ECPublicKey (not 'd2i' and 'i2d' because the external encoding is just a raw object string without any DER icing)
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Ooops forgot to recognise V_ASN1_GENERALSTRING
NOT BUG:Re enable the read side non blocking test BIO code
NOT BUG:For some reason it was disabled..
NOT BUG:Fix bug in base64 bios during write an non blocking I/O: if the write fails when flushing the buffer return the value to the application so it can retry
NOT BUG:typo
BUG:PR: 511 Submitted by: Eric Cronin
NOT BUG:Update release information
NOT BUG:Security fix: Vaudenay timing attack on CBC An advisory will be posted to the web Expect a release within the hour
NOT BUG:Make sure the memory allocation routines check for negative sizes
NOT BUG:Borland C++ Builder 5 complains about unreachable statements
NOT BUG:Update debub-steve* entries
NOT BUG:Typo
NOT BUG:Make the no-err option work properly
NOT BUG:Remove "+Olibcalls" option from HPUX targets
NOT BUG:Reportedly this option is deprecated and on some systems "make test" fails if it is included
NOT BUG:PR: 495
NOT BUG:Session cache implementations shouldn't have to access SSL_SESSION elements directly so this missing functionality is required
NOT BUG:PR: 276
NOT BUG:Declare prototypes for function pointer types even if they are likely to be cast later on
NOT BUG:Update docs
NOT BUG:Single pass processing to cleartext S/MIME signing
NOT BUG:We cache a montgomery form for 'n' if the PUBLIC flag is set not PRIVATE
NOT BUG:Also I've added handling for other mod_exp calls that were not using any cached montgomery forms These cases matter only for special RSA keys (eg ones that are missing information) so are unlikely to be used in normal circumstances
NOT BUG:David Brumley <dbrumley@stanford.edu> noted and corrected a case in the verification step of CRT private key operations in the RSA code - previously no montgomery form was checked or used for 'n' and so it would be generated on the fly each time As a result private key operations are now a percent or two faster
NOT BUG:Rather than adding this as another repetition of the nearly-identical montgomery "check for first-use" initialisation code blocks I've taken this chance to create a helper function and macro-wrapper to replace them
NOT BUG:PR: 475
NOT BUG:make update
NOT BUG:Add support for IA64 PR: 454
NOT BUG:Handle krb5 libraries separately and make sure only libssl.so depends on it
NOT BUG:Update linux-mips and linux-mipsel to support threads and shared libraries I also updated the bn_ops field with values taken from OpenBSD-mips PR: 498
BUG:Pay attention to disabled SSL versions PR: 500
NOT BUG:Change no_rmd160 to no_ripemd for consistency PR: 500
NOT BUG:Make it possible to disable OCSP the speed application and the use of sockets PR: 358
NOT BUG:Add full support for -rpath/-R both in shared libraries and applications at least on the platforms where it's known how to do it
NOT BUG:Note: this has only been tested on GNU-based platforms (Linux) and needs to be tested on all others Additionally it's not yet supported on the following platforms for lack of information:
NOT BUG:Darwin (MacOS X) Cygwin OSF1/Alpha SVR3 ReliantUNIX
NOT BUG:Please help out with testing and the platforms we don't yet know well enough
NOT BUG:Another long name to deal with
NOT BUG:Oh the destest program did look at the return value..
NOT BUG:new lock for EC_PRE_COMP structures
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Allow EC_GROUP objects to share precomputation for improved memory efficiency (EC_PRE_COMP objects are now constant once completed)
NOT BUG:Extend 'extra_data' API to support arbitrarily many slots (although we need only one at the moment)
NOT BUG:Modify EC internal 'extra_data' API: EC_GROUP_[clear_]free_extra_data now frees only a single slot (the previous functions are available as EC_GROUP_[clear_]free_all_extra_data)
NOT BUG:Submitted by: Nils Larsch Reviewed by: Bodo Moeller
NOT BUG:Adjust DES_cbc_cksum() so the returned value is the same as MIT's mit_des_cbc_cksum() The difference was first observed then verified by looking at the MIT source
NOT BUG:Option to disable SSL auto chain build
NOT BUG:comments
NOT BUG:first section is now "Changes between 0.9.7a and 0.9.8" not ".. 0.9.7 and 0.9.8"
NOT BUG:GeneralString support in mini-ASN1 compiler
NOT BUG:Typo
NOT BUG:Make sure memcpy() is properly declared by including string.h
NOT BUG:fix EC_GROUP_copy for EC_GFp_nist_method()
NOT BUG:Submitted by: Nils Larsch
BUG:avoid coredump
NOT BUG:Submitted by: Nils Larsch
NOT BUG:remove debugging leftovers
NOT BUG:comment
NOT BUG:typo
NOT BUG:PKCS#1 has a new RFC which we do implement
NOT BUG:implement fast point multiplication with precomputation
NOT BUG:Submitted by: Nils Larsch Reviewed by: Bodo Moeller
NOT BUG:typo in WIN16 section
NOT BUG:Submitted by: Toni Andjelkovic <toni@soth.at>
NOT BUG:SSL_add_dir_cert_subjects_to_stack now exists for WIN32
NOT BUG:IPv6 display and input support for extensions usingh GeneralName
NOT BUG:typo
NOT BUG:Update PRNG entry: - OpenSSL version differences - Sun /dev/urandom patch information
NOT BUG:Old-style callbacks can be NULL!
NOT BUG:Fix warning
NOT BUG:We can't say in advance what the argument to BIO_socket_ioctl() should be so let's make that a void * Also BIO_socket_nbio() should send it an int argument not a long PR: 457
NOT BUG:Document -engine where missing PR: 424
BUG:A few small bugs with BIO popping PR: 364
NOT BUG:The util scripts need to handled no-hw PR: 327
NOT BUG:The MASM situation is more difficult than described so far It is part of VC++ 7 PR: 327
NOT BUG:For VC++7 and up the file is VSVARS32.BAT PR: 327
NOT BUG:The OPENSSL_NO_ENGINE has small problem: it changes certain structures That's bad so let's not check OPENSSL_NO_ENGINE in those places Fortunately all the header files where the problem existed include ossl_typ.h which makes a 'forward declaration' of the ENGINE type
NOT BUG:make update
NOT BUG:Add the possibility to build without the ENGINE framework PR: 287
NOT BUG:Summarise the last couple of commits
NOT BUG:This glues the GMP wrapper ENGINE into OpenSSL if it is being built (ie if the OPENSSL_USE_GMP symbol is defined) Also I've re-ordered the listing of other builtin ENGINEs to be alphabetical (though "dynamic" will still come first)
NOT BUG:Commit a slightly modified version of an old experiment to do RSA private key operations using the GMP library The default is not to build (or use) this code unless OPENSSL_USE_GMP is defined (because it will impose header and linker dependencies that might need specifying too)
NOT BUG:"openssl engine" will not display ENGINE/DSO load failure errors when testing availability of engines with "-t" - the old behaviour of is produced by increasing the feature's verbosity with "-tt"
NOT BUG:Small typo OENSSL should really be spelled OPENSSL PR: 476
NOT BUG:Fix a memory leak in SSL PR: 477
NOT BUG:cert_sk isn't always allocated so freeing it may cause a crash PR: 481
BUG:DVCS (see RFC 3029) was missing among the possible purposes Notified privately to me by Peter Sylvester <Peter.Sylvester@EdelWeb.fr> one of the authors of said RFC
NOT BUG:simplify
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Correct EVP_SealInit() documentation iv is an output parameter
BUG:cofactor is optional in parameter encodings
NOT BUG:Submitted by: Nils Larsch
NOT BUG:consistency
NOT BUG:For ecdsa-with-SHA1 as for id-dsa-with-sha1 omit 'parameters' in AlgorithmIdentifier
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Provide "dummy" &main::picmeup even in Windows perlasm modules
NOT BUG:Check return value of gmtime() and add error codes where it fails in ASN1_TIME_set()
NOT BUG:Edit asn1.h so the new error code is the same in 0.9.7 and 0.9.8 rebuild new error codes
NOT BUG:Clear error queue in req.c if *_min or *_max is absent
NOT BUG:Workaround for lame compiler bug introduced in "CPU pack" for MSVC6SP5
NOT BUG:The patch speaks for itself
NOT BUG:Missing 0 broke FreeBSD build PR: 470
NOT BUG:fix warnings
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Suggestion was to change ${MACHINE} to i586 in lines in question Well "whatever" doesn't the same (avoids 386 being passed to ./Configure) consistent with other elder SCO targets and denotes that we probably shouldn't care much about every out-of-date platform
NOT BUG:This is an *initial* tune-up This update puts Itanium2 back on par with Itanium I mean if overall performance improvement over C version was X for Itanium it's X even for Itanium2
NOT BUG:Oops! Missed closing quote.. Didn't have time to verify before a snapshot was cut..
NOT BUG:SCO target missed .so suffix
NOT BUG:-lresolv is not present on SCO Unix RT#460
NOT BUG:Caldera/SCO targets erroneously limit themselves to 386 See RT#464
NOT BUG:Fix for AIX shared build see RT#463
NOT BUG:EVP_DecryptInit() should call EVP_CipherInit() not EVP_CipherInit_ex()
NOT BUG:Ingore the correct flag file
NOT BUG:A few more files to ignore
NOT BUG:make update
NOT BUG:FreeBSD has /dev/crypto as well PR: 462
NOT BUG:Add some debugging output
NOT BUG:Armor against systems without ranlib.. Submitted by: Thierry Lelegard <thierry.lelegard@canal-plus.fr>
NOT BUG:PR: 461
NOT BUG:avoid potential confusion about curves (prime192v1 and prime256v1 are also known as secp192r1 and secp256r1 respectively)
NOT BUG:Submitted by: Nils Larsch Bodo Moeller
NOT BUG:make update
BUG:ncr-scde target needs -lc89 for strcasecmp() and ftime() (Tim Rice Martin Megele)
NOT BUG:PR: 450
BUG:Fix possible NULL dereferencial Notified by Verdon Walker <VWalker@novell.com>
BUG:Add verbosity
NOT BUG:Fix initialization sequence to prevent freeing of unitialized objects Submitted by: Nils Larsch <nla@trustcenter.de>
BUG:PR: 459
NOT BUG:update error library for EC.. changes
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Really fix SSLv2 session ID handling
BUG:PR: 377
NOT BUG:As with RSA which was modified recently this change makes it possible to override key-generation implementations by placing handlers in the methods for DSA and DH Also parameter generation for DSA and DH is possible by another new handler for each method
NOT BUG:Set EXPORT_VAR_AS_FN for BC-32 to work around a compiler bug
NOT BUG:Extend the HOWTO on creating certificates and add a HOWTO in creating keys PR: 422
NOT BUG:Document hpux-parisc2-cc problems probably due to optimizer bug
NOT BUG:PR: 426
NOT BUG:Correct an example that has a few typos PR: 458
NOT BUG:Merge from 0.9.7-stable
NOT BUG:Minor FAQ update
NOT BUG:"!Cname surname" has now become redundant ..
NOT BUG:undo part of a recent change: it's "surname" not "surName" (see X.520 aka ISO/IEC 9594-6)
NOT BUG:Make sure not to declare a clashing read() for DJGPP PR: 440
NOT BUG:DJGPP doesn't have DLLs so skip adding to %PATH% in that environment PR: 453
NOT BUG:add something to the '$no_shared_warn' text
NOT BUG:Correct a misleading comment PR: 456
NOT BUG:Revert: the names of the cygwin distribution will not be named openssl2-* Requested by Corinna Vinschen <vinschen@redhat.com>
BUG:UI_UTIL_read_pw() misinterpreted the values returned from UI functions PR: 456
NOT BUG:document BN_GENCB API by adding an example
NOT BUG:Typo
NOT BUG:NB: This and other manual pages should be updated for the new BN_GENCB interface
NOT BUG:tty_in will never be stderr so it will always be closed which means stdin might get closed.. Reported by Mark Daniel <Mark.Daniel@wasd.vsm.com.au>
NOT BUG:typo
NOT BUG:OpenBSD FAQ update Apparently gas from binutils-2.x makes it impossible to use gcc -fPIC .. on OpenBSD-i386 Alternative solution is provided
NOT BUG:Just an extra comment
NOT BUG:Add better support for FreeBSD on non-x86 machines Add specific support for FreeBSD on sparc64 PR: 427
NOT BUG:If the user said 'shared' and we haven't included support for shared libraries warn him or her Reminder by Andrew Marlow <apm35@student.open.ac.uk>
NOT BUG:Double the dollars that are intended for the command line PR: 423
BUG:Add documentation on how to handle the shared libaries PR: 423
NOT BUG:Name the flag file correctly
NOT BUG:CFLAG not CFLAGS
BUG:It's recommended to do 'make clean' after having prepared a new build tree PR: 437
NOT BUG:When preparing a separate build tree don't make softlinks to softlinks Add instructions in INSTALL for easy access PR: 437
NOT BUG:Force the removal PR: 437
NOT BUG:Certain files must be removed before generating them in case they point into a read-only source tree PR: 437
NOT BUG:Avoid unnecessary pollution of object module name table Cygwin shared build workaround (DJGPP swallows it too) One probably should do same as with ELF calling it COFF but I'm very short in COFF platforms so I just go for easy ad-hoc solution I'll take care of merge to 0.9.7 later
NOT BUG:Make sure everything that may be freed is allocated or initiated PR: 446
NOT BUG:Typos corrected PR: 445
NOT BUG:Typo
NOT BUG:The naming scheme wasn't quite correct for Cygwin
NOT BUG:At least OpenBSD implements PIC in the same way ELF does
NOT BUG:gcc wants character constants to be correct Before this change the following would happen on Solaris:
NOT BUG:m4 -B 8192 asm/des_enc.m4 > asm/des_enc-sparc.S gcc -DOPENSSL_SYSNAME_ULTRASPARC -DOPENSSL_NO_STATIC_ENGINE -fPIC -DOPENSSL_PIC -DOPENSSL_THREADS -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -DOPENSSL_NO_KRB5 -m32 -mcpu=ultrasparc -O3 -fomit-frame-pointer -Wall -DB_ENDIAN -DBN_DIV2W -DMD5_ASM -c -o asm/des_enc-sparc.o asm/des_enc-sparc.S asm/des_enc-sparc.S:2007: unterminated character constant asm/des_enc-sparc.S:2008: unterminated character constant
NOT BUG:NULL tofree when it is freed to avoid double free
NOT BUG:Make sure key is not NULL before freeing it
NOT BUG:Finalizing asm support for UnixWare SCO OpenUnix.. Note that I've replaced #if logic around bn_sub_part_words in bn_mul.c I rely upon OPENSSL_BN_ASM_PART_WORDS being added by ./Configure script Would it still work on non-Unix platforms?
NOT BUG:Third argument to shl_load() is "long address" not a pointer (Didn't influence functionality as on HP-UX 32bit the NULL pointer is a 32bit 0-value and thus is identical to the required 0L.)
NOT BUG:PR: 443
NOT BUG:RSA_METHOD now supports key-generation but (for now) none of these ENGINEs implement it
NOT BUG:This is the first step in allowing RSA_METHODs to implement their own key generation This prototype matches the new API function RSA_generate_key_ex() though both may be subject to change during development before 0.9.8
NOT BUG:Fix leak
NOT BUG:Fix a typo
NOT BUG:Another GAS fix-up and some commentary..
BUG:GAS can't stand stub which is stb's synonym
NOT BUG:Oops! I've toasted Cygwin! Fixed now
NOT BUG:Redundant now as it's moved to ./Makefile.org
NOT BUG:Unified targets for ELF assembler modules Tested on Linux Solaris and FreeBSD Goal is to extend support even to SCO5 UnixWare/OpenUnix..
NOT BUG:Support for ILP32 on HPUX-IA64
NOT BUG:pa-risc2.s was not PIC see RT#426 I strip call to fprintf as it's never called anyway (it's a debugging assertion) If pa-risc2W.s is PIC remains to be seen..
NOT BUG:HP/UX 11i make gets upset by this line containing nothing but a Tab
NOT BUG:Rijndael should be called AES everywhere
NOT BUG:Support for Intel compiler More details will be provided in closing note for RT#17 as snapshot becomes available for download
NOT BUG:Complete integration of SPARC assembler DES implementation Tested on Solaris only I'll keep my eyes open for Linux and OpenBSD targets
NOT BUG:UltraSPARC assembler DES implementation tune-up The code can be compiled for any SPARC CPU (UltraSPARC performance is *not* affected) can be compiled for 64-bit ABI and is position-independent
NOT BUG:Very old submission (from 2000) of UltraSPARC assembler DES implementation It was not accepted because code is not PIC too UltraSPARC-specific when it doesn't have to and 32-bit only I'm committing the original version mostly for reference purposes 64 PIC blended CPU tune-up follows shortly Obtained from: http://inet.uni2.dk/~svolaf/des.htm
NOT BUG:I implemented this when troubleshooting performance problem on SPARC Solaris As there is an apparent interest for optimization for footprint I figured that this can eventually become useful
NOT BUG:Link engines against libcrypto even when a TCP/IP implementation is specified..
NOT BUG:Adjust the parameter lists in some not commonly used files PR: 428
NOT BUG:Make sure the last character of the ASN.1 time string (the 'Z') is copied PR: 429
NOT BUG:It's rather silly to believe we'd release 0.9.7a in 2002 :-) It's even more silly to pretend we know which year 0.9.8 will be released
NOT BUG:Merge in changes from 0.9.7-stable
NOT BUG:Merge in changes from 0.9.7-stable
NOT BUG:My English is definitely not good as my assembly skills:-) And it looks like titles can't be multi-line..
NOT BUG:It probably belongs in PROBLEMS but it's more likely to be a FAQ
NOT BUG:Since we're including Kerberos 5 headers in our exported header files (when OpenSSL is configured to use Kerberos) we'd better tell pkg-config users where they can be found PR: 421
NOT BUG:Add information about AES cipher suites to ciphers manual page
NOT BUG:If no authentication method is mentioned in the cipher suite name (e.g AES128-SHA) RSA authentication is used (PR #396)
NOT BUG:Fix wrong handling of session ID in SSLv2 client code
BUG:PR: 377
BUG:Correct asm exclusions
BUG:OS/2 does binary by default apparently Reported by Brian Havard <brianh@kheldar.apana.org.au>
NOT BUG:make update
NOT BUG:Finally get rid of all the algorithm inclusions that were done from evp.h
NOT BUG:Application authors BEWARE! If you have had the habit to count on evp.h to provide all those lower-level algorithm functions you need to think again! Please change your programs NOW or you will be sorry when 0.9.8 gets release (it's quite some time away...)
NOT BUG:make update
NOT BUG:Merge from 0.9.7-stable
BUG:I can't confirm the claim being removed and nobody seems to speak up for it
NOT BUG:UltraSPARC performance "tune-up."
NOT BUG:FAQ addenum as discussed in RT#417
NOT BUG:Kenneth R Robinette just told me the latest snapshot works well with MIT Kerberos
NOT BUG:Can't find the referense to errors on XP with Kerberos
BUG:Add SPKM among the related stanrds
NOT BUG:Updates
NOT BUG:Update our list of implemented and related standards
NOT BUG:Update our list of implemented and related standards
NOT BUG:Spelling error This patch was taken from the OpenBSD copy of OpenSSL 0.9.7 beta3 with patches
NOT BUG:Avoid double definition of config PR: 420
NOT BUG:Updates
NOT BUG:Some more adjustments Submitted by: Jeffrey Altman <jaltman@columbia.edu> "Kenneth R Robinette" <support@securenetterm.com>
NOT BUG:Cygwin needs the library locatin for .DLLs to be set in PATH Unfortunately the conditional was set to add the library directory to PATH when the platform is NOT Cygwin Corrected PR: 404
BUG:All VMS-specific problems have been solved Confirmed by Mark Daniel <Mark.Daniel@wasd.vsm.com.au>
NOT BUG:Finally a bn_div_words() in VAX assembler that goes through all tests PR: 413
NOT BUG:Stop a possible memory leak (I wonder why s2_connect() handles the initial buffer allocation slightly differently...) PR: 416
NOT BUG:Make AES_ENCRYPT and AES_DECRYPT macros instead of static constants PR: 411
NOT BUG:Fix for "shift count too large" when compiling for hpux-parisc2 and irix-mips The bug was introduced with accelerated support for x86_64 My fault! Fixed now
NOT BUG:More accurate comments
NOT BUG:A little debugging
BUG:Propagate MAKEDEPPROG to the subdirs under crypto/
NOT BUG:Fix Kerberos5/SSL interaction Submitted by: "Kenneth R Robinette" <support@securenetterm.com> Reviewed by: PR:
NOT BUG:Keep the internal lowercase 'surname' for programmer's sake
NOT BUG:Be consistent with capitalisation of object names
NOT BUG:Be consistent with capitalisation of object names
BUG:There was a mixup between INSTALLTOP and OPENSSLDIR..
NOT BUG:We stupidly had a separate LIBKRB5 variable for KRB5 library dependencies and then didn't support it very well And that when there already is a useful variable for exactly this kind of thing; EX_LIBS..
NOT BUG:Because the contents of openssl.pc may have to change when a configuration has been performed (and possibly changed) have it depend on Makefile.ssl
NOT BUG:Small tweaks for code consistency
NOT BUG:To avoid any future programming glitches let's make each and every assignment (modulo those I missed) individual statements
NOT BUG:I have no idea what possesed me to compile s_socket.c as POSIXly code Incidently it now compiles so much better without _POSIX_C_SOURCE
NOT BUG:If _XOPEN_SOURCE_EXTENDED or _XOPEN_SOURCE are defined _POSIX_C_SOURCE gets defined in DECC$TYPES.H If _POSIX_C_SOURCE is defined certain types do not get defined (u_char u_int ...) DECC.H gets included by assert.h and others Now in6.h uses the types u_char u_int and so on and gets included as part of other header inclusions and will of course fail because of the missing types
NOT BUG:On the other hand _XOPEN_SOURCE_EXTENDED is needed to get gethostname() properly declared..
NOT BUG:Solution: define _XOPEN_SOURCE_EXTENDED much later so DECC$TYPES.H has a chance to be included *first* so the otherwise missing types get defined properly
BUG:Personal: *mumble* *mumble*
NOT BUG:It was pointed out to me that .pc files are normally stored in ${prefix}/lib/pkgconfig not ${prefix}/lib/pkginfo
NOT BUG:It was pointed out to me that .pc files are normally stored in ${prefix}/lib/pkgconfig not ${prefix}/lib/pkginfo
NOT BUG:Update the current status
NOT BUG:Better wording?
NOT BUG:Fix for RT#405 Solaris refuses to invoke preprocessor if egrep returns 1 Linux for example doesn't exhibit this behaviour but I add "exit 0" to all potentially affected rules just to be on the safe side
NOT BUG:Make "perl des-586.pl a.out" work see RT#402
BUG:'a=b c=$a; echo $c' doesn't necessarily prints "b" '' vs "" $s in Makefiles.. I suppose it wasn't tested very much..
NOT BUG:Transfer the Solaris shared library building changes from 0.9.7-stable
NOT BUG:Protect loading routines with a lock PR: 373
NOT BUG:Synchronise with Makefiles
NOT BUG:Always forget this one..
NOT BUG:DES PIC-ification "Cygwin" companion Problem was that preprocessor macro is not expanded if prepended with a $-sign
NOT BUG:Make sure manual pages are properly linked to on systems that have case insensitive file names as well as those that do not have symlinks Incidently both these cases apply on DOS/Windows..
NOT BUG:Update the make system for installations:
NOT BUG:- define a HERE variable to indicate where the source tree is (used very little right now) - make more use of copying and making attribute changes to {file}.new and then move it to {file} - use 'mv -f' to avoid all those questions to the user when the file in question doesn't have write attributes for that user
NOT BUG:Don't define macros in terms of asm() when __STRICT_ANSI is defined
NOT BUG:Bring des_locl.h at the same level as in the 0.9.7 branch Don't define macros in terms of asm() when __STRICT_ANSI is defined
NOT BUG:Ooops! No ROTATE on some platforms after x86_64 performance patch..
NOT BUG:As you might have noticed I tried to change for  prefix because it's the one to be used to denote local labels in single function scope Problem is that SHA uses same label set across functions therefore I have to switch back to $ prefix
NOT BUG:Solaris shared build fix-ups See RT#238,239 for details
NOT BUG:New DETECT_GNU_LD procedure
NOT BUG:x86_64 performance patch
NOT BUG:DES PIC-ification Windows companion
BUG:The ampersand is not required in these constructs and was giving AIX warnings
NOT BUG:Reported by: Bernhard Simon
NOT BUG:IA-32 assembler modules (primarily DES) PIC-ification Idea is to keep shared libraries shared
NOT BUG:OK there's at least one application author who has provided dynamic locking callbacks
NOT BUG:BIO_new_bio_pair() was unnecessarily described in it's own page as well as in BIO_s_bio.pod The most logical is to move everything needed from BIO_new_bio_pair.pod to BIO_s_bio.pod (including the nice example) and toss BIO_new_bio_pair.pod I hope I got all the info over properly PR: 370
NOT BUG:BIO_set_nbio() is enumerated but not explained Remove it from enumeration since it's both enumerated and explained in BIO_s_connect.pod PR: 370
NOT BUG:I forgot one item I intend to work on
NOT BUG:Skip DH-specific tests when no-dh has been configured PR: 353
NOT BUG:Document the modifications in 0.9.7 that will make the hw_ncipher.c engine work properly even in bad situations
NOT BUG:Make 'tunala' link with zlib if possible (so it works if openssl was configured with zlib support)
NOT BUG:In CRYPTO_lock() check that the application cares about locking (provided callbacks) before attempting to lock
NOT BUG:sk_*_push() returns the number of items on the stack not the index of the pushed item The index is the number of items - 1 And if a NULL item was found actually use it Finally provide a little bit of safety in CRYPTO_lock() by asserting the a requested dynamic lock really must exist instead of just being silent about it
NOT BUG:Let's not forget the other places where HEADER_DES_H and HEADER_DES_OLD_H were defined
NOT BUG:Let's not forget the other places where HEADER_DES_H and HEADER_DES_OLD_H were defined
NOT BUG:Since HEADER_DES_H has been the protector of des.h since libdes (before SSLeay maybe?) it's better to have that macro protect the compatibility header des_old.h In the new des.h let's use a slightly different protecting macro
NOT BUG:The rationale is that there are application that might include (via other header files perhaps) both an old libdes des.h and OpenSSL's des.h Whichever comes first would overshadow the other because of the clash in protecting macro This fix solves that problem
NOT BUG:This stops a compiler warning from -Wmissing-prototypes (Noticed by Nils Larsch)
NOT BUG:Update -Olimit setting Submitted by: Bernhard Simon <simon@zid.tuwien.ac.at> Reviewed by: PR:
NOT BUG:test commit (just removing tailing blanks) #2 after migration
NOT BUG:test commit (removing trailing blanks) after migration
NOT BUG:test blank-line commit after migration -- just ignore
NOT BUG:A memset() too many got converted into a OPENSSL_cleanse() PR: 393
NOT BUG:BN_sqr test failure entry
BUG:Fix wrong URI Submitted by: assar@kth.se Reviewed by: PR: 390
NOT BUG:make update
NOT BUG:Hmm Geoff's change made things quite interesting We can now give users the option of disabling deprecated functions which should of course be reflected in libeay.num and .def files Quite nice actually
NOT BUG:Nils Larsch submitted; - a patch to fix a memory leak in rsa_gen.c - a note about compiler warnings with unions - a note about improving structure element names
NOT BUG:This applies his patch and implements a solution to the notes
NOT BUG:Since it's defined in draft-ietf-tls-compression-04.txt let's make ZLIB a known compression method with the identity 1
NOT BUG:Undefine OPENSSL_NO_DEPRECATED inside openssl application code if we are being built with it defined - it is not a symbol to affect how openssl itself builds but to alter the way openssl headers can be used from an API point of view The "deprecated" function wrappers will always remain inside OpenSSL at least as long as they're still being used internally :-)
NOT BUG:The exception is dsaparam which has been updated to the BN_GENCB-based functions to test the new functionality If GENCB_TEST is defined dsaparam will support a "-timebomb <n>" switch to cancel parameter-generation if it gets as far as 'n' seconds without completion
NOT BUG:This is a first-cut at improving the callback mechanisms used in key-generation and prime-checking functions Rather than explicitly passing callback functions and caller-defined context data for the callbacks a new structure BN_GENCB is defined that encapsulates this; a pointer to the structure is passed to all such functions instead
NOT BUG:This wrapper structure allows the encapsulation of "old" and "new" style callbacks - "new" callbacks return a boolean result on the understanding that returning FALSE should terminate keygen/primality processing The BN_GENCB abstraction will allow future callback modifications without needing to break binary compatibility nor change the API function prototypes The new API functions have been given names ending in "_ex" and the old functions are implemented as wrappers to the new ones The OPENSSL_NO_DEPRECATED symbol has been introduced so that if defined declaration of the older functions will be skipped NB: Some openssl-internal code will stick with the older callbacks for now so appropriate "#undef" logic will be put in place - this is in case the user is *building* openssl (rather than *including* its headers) with this symbol defined
NOT BUG:There is another change in the new _ex functions; the key-generation functions do not return key structures but operate on structures passed by the caller the return value is a boolean This will allow for a smoother transition to having key-generation as "virtual function" in the various ***_METHOD tables
NOT BUG:Fix a warning and do some constification as a lucky side-effect :-)
NOT BUG:Since it's defined in draft-ietf-tls-compression-04.txt let's make ZLIB a known compression method with the identity 1
NOT BUG:Implement a stateful variant if the ZLIB compression method The old stateless variant is kept but isn't used anywhere
NOT BUG:Forgot one
NOT BUG:Add a few items I intend to work on for 0.9.8 and on
NOT BUG:Workaround for GCC-ia64 compiler bug
NOT BUG:Submitted by: <appro> Reviewed by: PR:
NOT BUG:Some compilers are quite picky about non-void functions that don't return anything
NOT BUG:Apparently bash is more forgiving than sh To be backward compatible don't use == use = instead..
NOT BUG:Keep NEWS in HEAD up to date
NOT BUG:Keep STATUS in HEAD up to date
NOT BUG:Merge in relevant changes from the OpenSSL 0.9.6h release
NOT BUG:SSL_CERT_FILE should be used in place of the system default file not as a first alternative to try
NOT BUG:Corrected DJGPP patch
NOT BUG:linux64-sparcv9 support finally debugged and tested
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Make sure to implement the cryptodev engine only when /dev/crypto exists
NOT BUG:make update
NOT BUG:Declare another general file
NOT BUG:Allow users to modify /MD to /MT PR: 380
NOT BUG:Make sure using SSL_CERT_FILE actually works and has priority over system defaults PR: 376
NOT BUG:If an application supports static locks it MUST support dynamic locks as well to be able to use the CHIL engine PR: 281
BUG:PR: 381
NOT BUG:Only check for a result buffer if the allocated string is a prompt string PR: 381
NOT BUG:Do not implement RC4 stuff if RC4 is disabled Concequently apply the same rule for SHA stuff PR: 381
BUG:gethostname() is more a BSD feature than an XOPEN one PR: 379
NOT BUG:Correct a few typos that I introduced after applying DJGPP patches
NOT BUG:In ECPKParameters_print output the private key length correctly (length of the order of the group not length of the actual key which will be shorter in some cases)
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Don't compute timings here we can do this elsewhere Include X9.62 signature examples
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Missing ")" Submitted by: Christian Hohnstaedt <chohnstaedt@innominate.com> Reviewed by: PR:
NOT BUG:DJGPP patches PR: 347
NOT BUG:Add support for x86_64 PR: 348
NOT BUG:A gcc 3.0 bug is triggered by our code Add a section about it in PROBLEMS PR: 375
NOT BUG:Make ASN1_TYPE_get() work for V_ASN1_NULL type
NOT BUG:Typo in X509v3_get_ext_by_critical
NOT BUG:In asn1_d2i_read_bio don't assume BIO_read will return the requested number of bytes when reading content
NOT BUG:EXIT() may mean return() That's confusing so let's have it really mean exit() in whatever way works for the intended platform and define OPENSSL_EXIT() to have the old meaning (the name is of course because it's only used in the openssl program)
NOT BUG:Make CRYPTO_cleanse() independent of endianness
NOT BUG:Windows CE updates contributed by Steven Reddie <smr@essemer.com.au>
NOT BUG:define USE_SOCKETS so sys/param.h gets included (and thusly MAXHOSTNAMELEN gets defined) PR: 371
NOT BUG:I think I got it now Apparently the case of having to shift down the divisor was a bit more complex than I first saw The lost bit can't just be discarded as there are cases where it is important For example look at dividing 320000 with 80000 vs 80001 (all decimals) the difference is crucial The trick here is to check if that lost bit was 1 and in that case do the following:
BUG:1 subtract the quotient from the remainder 2 as long as the remainder is negative add the divisor (the whole divisor not the shofted down copy) to it and decrease the quotient by one
BUG:There's probably a nice mathematical proof for this already but I won't bother with that unless someone requests it from me
NOT BUG:Make some names consistent
NOT BUG:Through some experimentation and thinking I think I finally got the proper implementation of bn_div_words() for VAX
NOT BUG:If the tests go through well the next step will be to test on Alpha
NOT BUG:Small bugfix: even when r == d we need to adjust r and q PR: 366
NOT BUG:EXIT() needs to be in a function that returns int
NOT BUG:Redo the VAX assembler version of bn_div_words() PR: 366
NOT BUG:Remove incorrect assert PR: 360
BUG:Make it so all names mentioned in the NAME section of each manpage becomes a symlink to said manpage PR: 242
NOT BUG:Correct some names
NOT BUG:A few more memset()s converted to OPENSSL_cleanse() I *think* I got them all covered by now bu please if you find any more tell me and I'll correct it PR: 343
NOT BUG:Have all tests use EXIT() to exit rather than exit() since the latter doesn't always give the expected result on some platforms
NOT BUG:Make sure EXIT() can always be used as one statement
NOT BUG:Cleanse memory using the new OPENSSL_cleanse() function I've covered all the memset()s I felt safe modifying but may have missed some
NOT BUG:Unused variable removed
NOT BUG:Extra ; removed
NOT BUG:Add OPENSSL_cleanse() to help cleanse memory and avoid certain compiler and linker optimizations PR: 343
NOT BUG:I forgot that @ in strings must be escaped in Perl
NOT BUG:The logic in the main signing and verifying functions to check lengths was incorrect Fortunately there is a second check that's correct when adding the pads PR: 355
NOT BUG:Heimdal isn't really supported right now Say so and offer a possibility to force the use of Heimdal and warn if that's used PR: 346
NOT BUG:Small bugfixes to the KSSL implementation PR: 349
NOT BUG:Heimdal isn't really supported right now Say so and offer a possibility to force the use of Heimdal and warn if that's used PR: 346
NOT BUG:rename some functions to improve consistency
BUG:Submitted by: Sheueling Chang
NOT BUG:add a comment
NOT BUG:Disable this module if OPENSSL_NO_SOCK is defined
NOT BUG:Typo OPENSSL_NO_ECDH not NO_OPENSSL_ECDH
BUG:Mention a current showstopper
NOT BUG:avoid uninitialized memory read
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Make ec_GFp_simple_point_get_affine_coordinates() faster for Montgomery representations
BUG:Submitted by: Sheueling Chang Bodo Moeller
NOT BUG:Fix bug introduced by the attempt to fix client side external session caching (#288): now internal caching failed (#351): Make sure that cipher_id is set before comparing Submitted by: Reviewed by: PR: 288 (and 351)
NOT BUG:allocate bio_err before memory debugging is enabled to avoid memory leaks (we can't release it before the CRYPTO_mem_leaks() call!)
NOT BUG:Submitted by: Nils Larsch
BUG:It works on my laptop :-)
NOT BUG:make update
NOT BUG:Fix an unsigned/signed mismatch
NOT BUG:Update STATUS
NOT BUG:Add news items for 0.9.6h and expand on the 0.9.7 news as well
NOT BUG:Document the addition of certificate pairs
NOT BUG:Add the ASN.1 structures and functions for CertificatePair which is defined as follows (according to X.509_4thEditionDraftV6.pdf):
NOT BUG:CertificatePair ::= SEQUENCE { forward [0] Certificate OPTIONAL reverse [1] Certificate OPTIONAL -- at least one of the pair shall be present -- }
NOT BUG:The only thing I'm not sure about is if it's implicit or explicit tags that I should count on For now I'm thinking explicit but will gladly stand corrected
NOT BUG:Also implement the PEM functions to read and write certificate pairs and defined the PEM tag as "CERTIFICATE PAIR"
NOT BUG:This needed to be defined mostly for the sake of the LDAP attribute crossCertificatePair but may prove useful elsewhere as well
NOT BUG:Determine HZ exactly as in apps/speed.c
NOT BUG:Make sure sysconf exists (it doesn't in the VMS C RTL lesser than version 7)
NOT BUG:remove redundant functions
NOT BUG:use consistent order of function definitions
NOT BUG:fix memory leak in memory debuggin code ..
NOT BUG:Submitted by: Nils Larsch
NOT BUG:allocate bio_err before memory debugging is enabled to avoid memory leaks (we can't release it before the CRYPTO_mem_leaks() call!)
NOT BUG:Submitted by: Nils Larsch
NOT BUG:A variable of type time_t is supposed to be a time measurement starting at Epoch offset isn't such a measurement so let's stop pretend it is
BUG:Better workaround to the "=head1 NAME OPTIONS" pod2latex problem: NAME OPTIONS are a subset of OPTIONS so just make it =head2! Submitted by: Reviewed by: PR: 333
NOT BUG:Make it possible to build for more than one CPU Clarify what the CE tests do
NOT BUG:Ignore openssl.pc This way there's no risk that I'll add it again :-)
NOT BUG:Adding openssl.pc to the repository was a mistake since it's generated
NOT BUG:Add the file openssl.pc that I forgot a while ago
NOT BUG:I forgot this is compiled in test/ not crypto/ec/..
NOT BUG:We don't want TARGETCPU expanded here
NOT BUG:Mention ActiveState Perl much earlier in INSTALL.WCE
NOT BUG:WinCE patches
NOT BUG:Fix buggy #! magic and update ssleay->openssl Submitted by: Reviewed by: PR: 305
NOT BUG:Add the INHIBIT_SYMLINKS flag variable to help Cygwin Add missing semicolons Add a comment explaining a bunch of targets without any action lines
NOT BUG:Changes to make shared library building and use work better with Cygwin
NOT BUG:Document the change to remove the 'done' flag variable in the OpenSSL_add_all_*() routines
NOT BUG:this method does not need field_data1
NOT BUG:make update
NOT BUG:A few more Microsoft OIDs added
NOT BUG:The pointer to the cipher object is not yet set when session was reloaded from external cache (using d2i_SSL_SESSION) Perform comparison based on the cipher's id instead Submitted by: Steve Haslam <araqnid@innocent.com> Reviewed by: PR: 288
NOT BUG:The architecture name is i486 not just 486
NOT BUG:-Wid-clash-n isn't support in gcc 3 and I get better result from continuously rebuilding on a VMS box
NOT BUG:I know ANSI C doesn't like 'long long' and I don't want to see it
BUG:Spell prototypes correctly :-)
NOT BUG:Add -Wstrict-prototype and -Wmissing-prototype to my debugging targets
NOT BUG:We need to read one more byte of the REQUEST-CERTIFICATE message PR: 300
BUG:Add SETWRAP modifier to ASN1 generate
NOT BUG:make update
NOT BUG:Close the implicitely opened registry key PR: 264
NOT BUG:Use =back to finish =over (found using pod2latex) Submitted by: Reviewed by: PR:
NOT BUG:No such reference to link to (found running pod2latex) Submitted by: Reviewed by: PR:
NOT BUG:Fix documentation of i2d_X509_fp and i2d_X509_bio
BUG:Add Tandem OSS target PR: 192
NOT BUG:Remove warnings
NOT BUG:DCL logic bugs fixed
NOT BUG:(I really need to review my knowledge of the language)
NOT BUG:It seems like gcc 2.9aix5.1 doesn't do will with optimization level 3 PR: 115
NOT BUG:Add a FAQ on how to check the authenticity of the openSSL distribution PR: 292
NOT BUG:Cygwin fixes
NOT BUG:harmonize with 0.9.7 tree
NOT BUG:Fix to build better with DJGPP PR: 338
NOT BUG:Here's the description submitted by Gisle Vanem <giva@bgnett.no>:
NOT BUG:1 sock_init() renamed to ssl_sock_init() in ./apps/s_socket.c due to name-clash with Watt-32
NOT BUG:2 rand() renamed to Rand() in ./crypto/bn/divtest.c due to name-clash with <stdlib.h>
NOT BUG:3 Added calls to dbug_init()/sock_init() in some demo programs
NOT BUG:4 Changed cflags/lflags in configure Watt-32 install root now taken from $WATT_ROOT
NOT BUG:Don't declare 2 WARNINGS sections Submitted by: Reviewed by: PR:
NOT BUG:Opportunistic change to work around pod2latex bug: rename NAME OPTIONS section to SUBJECT AND ISSUER NAME OPTIONS Submitted by: Reviewed by: PR: 333
NOT BUG:Correct reference to section name Submitted by: Reviewed by: PR:
NOT BUG:fix output
NOT BUG:Submitted by: Nils Larsch
NOT BUG:use new BIO_indent() function here as well
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Missing =back Submitted by: Reviewed by: PR:
NOT BUG:The directory 'rijndael' doesn't exist any more let's check the aes directory instead (this should have been done long ago...)
NOT BUG:When AES is skipped because the option 'no-rijndael' was given make sure it's skipped from SDIRS as well
NOT BUG:Make the Windows test scripts consistent in their echoing
NOT BUG:Handle last lines that aren't properly terminated PR: 308
NOT BUG:Fix get_email: 0 is a valid return value
NOT BUG:Constification needed PR: 241
NOT BUG:free() -> OPENSSL_free()
NOT BUG:Merge from 0.9.7-stable
NOT BUG:This didn't get to the 0.9.8-dev thread..
NOT BUG:Correct support for SunOS 4.1.3_U1 PR: 227
BUG:Security fixes brought forward from 0.9.7
NOT BUG:When build as dynamic engines the loading functions should be defined static
NOT BUG:Make internal functions static
NOT BUG:Name the flag files correctly
NOT BUG:Typo
NOT BUG:disable weird assert()s
NOT BUG:remove unused old directory crypto/rijndael (superseded by crypto/aes)
NOT BUG:Update docs
NOT BUG:Fix warnings makefile cockup
NOT BUG:Put NAME in right place fix typo
NOT BUG:Only accept exact match for modifier or tag name
NOT BUG:Add header ctype.h
NOT BUG:Fix memory leak in s2i_ASN_INTEGER and return an error if any invalid characters are present
NOT BUG:Update docs
NOT BUG:Initial ASN1 generation documentation
NOT BUG:Synchronise..
NOT BUG:Initial ASN1 generation code This can construct arbitrary encodings from strings and config files
NOT BUG:Documentation to follow..
NOT BUG:Make it possible to run individual tests even when linked with libcrypto.so and libssl.so
NOT BUG:Make the CBC mode od AES accept lengths that aren't multiples of 16 PR: 330
NOT BUG:Variables on the stack must be initialized or we can't depend on any initial value For errline/errorline we did depend on that erroneously
NOT BUG:Make the programs link against the static library on MacOS X PR: 335
NOT BUG:Typo Submitted by: assar <assar@kth.se> Reviewed by: PR:
NOT BUG:do tests with all built-in curves
NOT BUG:Submitted by: Nils Larsch
NOT BUG:corrections to built-in curves
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Make sure permissions are friendly when building release tar file Submitted by: Reviewed by: PR: 171
NOT BUG:More information to the important issue of seeding the PRNG Submitted by: Reviewed by: PR: 285
BUG:X509_NAME_cmp() now compares PrintableString and emailAddress with a value of type ia5String correctly PR: 244
NOT BUG:Typo
BUG:-CAserial does take a filename argument PR: 332
NOT BUG:-CAcreateserial doesn't take a filename argument PR: 332
NOT BUG:Windows doesn't know sys/file.h
NOT BUG:Typo in OCSP ASN1 module
NOT BUG:Keep on using ${CC} since gcc may act in disguise
NOT BUG:Generate openssl.pc so pkg-config can return proper data PR: 163
NOT BUG:Stupid bug fixes I've forgotten my DCL..
NOT BUG:print less output (no details unless a test failed)
NOT BUG:Submitted by: Nils Larsch
NOT BUG:some people just can't read the instructions
NOT BUG:CRL reason code docs
NOT BUG:avoid Purify warnings
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Check for NULL ASN1_ITEM when initializeing boolean option in ASN1_TYPE
NOT BUG:fix typo
NOT BUG:implement and use new macros BN_get_sign() BN_set_sign()
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Off-by-one-error corrected PR: 235
NOT BUG:Cosmetic change
NOT BUG:Since we're currently assuming VMS can deal with dynamic engines don't include the static engine entry points in libcrypto.exe
NOT BUG:Depend on OPENSSL_NO_STATIC_ENGINE rather than OPENSSL_NO_DYNAMIC_ENGINE Make sure to include openssl/opensslconf.h to make sure we get the definition of those macros
NOT BUG:Remove all referenses to RSAref since that's been gone for more than a year
NOT BUG:Add all that is needed to build external engines on VMS Currently we simply assume that they shall always be built as shareable images
NOT BUG:Add the command procedure to build external engines on VMS Currently we simply assume that they shall always be built as shareable images
NOT BUG:New files have appeared tell VMS
NOT BUG:Plug potential memory leak Identified by Goetz Babin-Ebell <babinebell@trustcenter.de>
NOT BUG:Add a HISTORY section to the man page to mention the new flags
NOT BUG:The recent CHANGES note between 0.9.6g and 0.9.6h needs copying into the other branches
BUG:The last character of inconsistency in my recent commits is hereby squashed
NOT BUG:synchronise util/libeay.num with the 0.9.7-stable variant (guys this is something we really need to keep track of!) make update
NOT BUG:avoid warnings ('index' shadows global declaration)
NOT BUG:Submitted by: Nils Larsch
BUG:Sun has agreed to removing the covenant language from most files
BUG:Submitted by: Sheueling Chang <Sheueling.Chang@Sun.COM>
NOT BUG:'covenant HOWTO' (what to do about the Sun covenant if you modify the code)
NOT BUG:Submitted by: Bodo Moeller
NOT BUG:The #else part of the conditionals have two statements so they need to be surrounded with braces or the surrounding if..else will fail miserably in case the #else part is compiled
NOT BUG:Revert that was an incorrect change PR: 156
NOT BUG:A small detail: since 0.9.7 DH_new_method() and DSA_new_method() don't take an ENGINE* as parameter any more PR: 156
NOT BUG:Correct and enhance the behaviour of "internal" session caching as it relates to SSL_CTX flags and the use of "external" session caching The existing flag "SSL_SESS_CACHE_NO_INTERNAL_LOOKUP" remains but is supplemented with a complimentary flag "SSL_SESS_CACHE_NO_INTERNAL_STORE" The bitwise OR of the two flags is also defined as "SSL_SESS_CACHE_NO_INTERNAL" and is the flag that should be used by most applications wanting to implement session caching *entirely* by its own provided callbacks As the documented behaviour contradicted actual behaviour up until recently and since that point behaviour has itself been inconsistent anyway this change should not introduce any compatibility problems I've adjusted the relevant documentation to elaborate about how this works
BUG:Kudos to "Nadav Har'El" <nyh@math.technion.ac.il> for diagnosing these anomalies and testing this patch for correctness
NOT BUG:PR: 311
NOT BUG:increase permissible message length so that we can handle CertificateVerify for 4096 bit RSA signatures
NOT BUG:'broken' PKCS #8 format does not apply to ECDSA
NOT BUG:Submitted by: Nils Larsch
NOT BUG:clean up new code for NIST primes
NOT BUG:create new lock CRYPTO_LOCK_BN to avoid race condition
NOT BUG:fast reduction for NIST curves
NOT BUG:Submitted by: Nils Larsch
NOT BUG:remove superfluous code
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Make sure toupper() is declared
NOT BUG:External engines aren't in crypto/engine/ any more so don't try to build them there
NOT BUG:A command procedure to build the external engines is on it's way
NOT BUG:make update
NOT BUG:For the mkdef.pl to recognise if the "external" engines are inserted into libcrypto we need the "algorithm" STATIC_ENGINE
NOT BUG:There's a name clash between OpenSSL and RSAref Since this engine handles RSAref data pretend we don't care for OpenSSL's MD2 and MD5 structures or implementation Remove all kinds of silly warning
NOT BUG:On certain platforms we redefine certain symbols using macros in apps.h For those it's better to include apps.h after the system headers where those symbols may be defined since there's otherwise a chance that the C compiler will barf when it sees something that looks like this after expansion:
NOT BUG:int VMS_strcasecmp((str1),(str2))(const char * const char *);
NOT BUG:Signal an error if the entered output password didn't match itself PR: 314
NOT BUG:fix warnings and harmonize indentation
NOT BUG:I don't like c-tab-always-indent ..
BUG:Typo: v3 is represented by 2
NOT BUG:In my extreme debug mode gcc complains that 'static' doesn't come first
NOT BUG:New docs
NOT BUG:Make pod2man happier
NOT BUG:If dynamically-loadable ENGINEs are linked against a shared-library version of libcrypto then it is possible that when they are loaded they will share the same static data as the loading application/library This means it will be too late to set memory/ERR/ex_data/[etc] callbacks but entirely unnecessary to try This change puts a static variable in the core ENGINE code (contained in libcrypto) and a function returning a pointer to it If the loaded ENGINE's return value from this function matches the loading application/library's return value - they share static data If they don't match the loaded ENGINE has its own copy of libcrypto's static data and so the callbacks need to be set
NOT BUG:Also although 0.9.7 hasn't been released yet it's clear this will introduce a binary incompatibility between dynamic ENGINEs built for 0.9.7 and 0.9.8 (though others probably exist already from EC_*** hooks and what-not) - so the version control values are correspondingly bumped
NOT BUG:Another ENGINE implementation dependant on string.h
NOT BUG:We need to propogate SHARED_LIBS to sub-directories for "install" targets now
NOT BUG:The loop variable is 'l' not 'i'
NOT BUG:Corrected exchanged parameters in example for EVP_EncryptInit_ex() Submitted by: "Marcus Carey" <marcus.carey@verizon.net> Reviewed by: PR: 265
NOT BUG:change Emacs indentation style to make it easier to insert tabs manually
NOT BUG:Submitted by: Pierre Bacquet <pbacquet@delta.fr>
NOT BUG:Eh -Wl,--whole-archive disappeared from the GNU targets I've no idea why but that was definitely wrong..
NOT BUG:The ENGINE implementations in ./engines/ should be role models on how to write external engines (and thus should require only installed openssl headers and libs to compile without warnings) So this gets rid of recently introduced compilation warnings (no longer including internal headers) by including string.h directly
NOT BUG:- Remo Inverardi noticed that ENGINEs don't have an "up_ref" function in the normal 'structural' case (ENGINE_init() satisfies this in the less normal 'functional' case) This change provides such a function
NOT BUG:- Correct some "read" locks that should actually be "write" locks
NOT BUG:- make update
NOT BUG:Typos PR: 189
NOT BUG:Typos PR: 189
NOT BUG:A much better idea of course is not to do a submake at all..
NOT BUG:Makefile.shared needs to know how it can reach itself
NOT BUG:When BN_add_word() reaches top it shouldn't try to add the the corresponding word since that word may not be zero
NOT BUG:makedepend complains when a header file is included more than once in the same source file
NOT BUG:Complete the VxWorks fix by implementing a NULL RAND_poll() for it PR: 253
NOT BUG:libs is a timestamp that we don't really need to know about
NOT BUG:Add needed libraries as per configuration to the list of libraries we depend upon
NOT BUG:Add missing quotes Make sure test doesn't barf because of missing spaces before the closing ] Add -lc to the list of libraries we depend upon Not always necessary but never hurts
NOT BUG:Targeting the solaris platform for specific tests Something is going wrong and my test engine doesn't show it The verbosity will be temporary for about a day
NOT BUG:Clarify where the engines are by default
BUG:Chase down the missing backslashes
NOT BUG:Add more commentary Check that *num is smaller than the block size
NOT BUG:The AES CTR API was buggy we need to save the encrypted counter as well between calls or that will be lost if it returned with *num non-zero
NOT BUG:Step 14 of move of engines: Final step document the change
NOT BUG:make update
NOT BUG:And if the path has a space we definitely need to protect $openssl
NOT BUG:Oh there were *two* places where we needed to protect the file name..
NOT BUG:For the platforms where version info is inserted separately into the shared library set those flags conditionally
NOT BUG:Step 13 of move of engines: Remove old files
NOT BUG:Step 12 of move of engines: Time to make the changes to support automatic load of dynamic engines Make the changes in the main Makefile so the engines are built but now in the engines/ directory
NOT BUG:Note: The changes in step 12 have all been made by Geoff Thorpe Credit where credit is due
NOT BUG:Step 11c of move of engines: Time to make the changes to support automatic load of dynamic engines Change the iterator to try to load the requested engine dynamically The environment variable OPENSSL_ENGINES can be used to override the internal default directory where one can expect to find dynamically loadable engines
NOT BUG:Note: The changes in step 11 have all been made by Geoff Thorpe Credit where credit is due
NOT BUG:Step 11b of move of engines: Time to make the changes to support automatic load of dynamic engines Add functionality to the dynamic engine to handle engine directories and loading from those This is currently NOT compatible with the use of LD_LIBRARY_PATH and similar environment variables
NOT BUG:Note: The changes in step 11 have all been made by Geoff Thorpe Credit where credit is due
NOT BUG:Step 11a of move of engines: Time to make the changes to support automatic load of dynamic engines Unless we don't have shared library support do not try to load any "built-in" engines except for cryptodev
NOT BUG:Step 10 of move of engines: Change crypto/engine/Makefile.ssl so we don't build any "built-in" engines in that directory any more except fo the cryptodev one
NOT BUG:Step 9 of move of engines: rename crypto/engine/hw_cryptodev.c to eng_cryptodev.c This is an engine that (at least currently) has to be built in
NOT BUG:Typo
NOT BUG:Step 8 of move of engines: Remove the last little quirks DECIMAL_SIZE is copied from crypto/cryptlib.h
NOT BUG:We didn't copy the cryptodev engine here darn it!
NOT BUG:Step 7 of move of engines: Engines should not depend on private OpenSSL header files
NOT BUG:Typo
NOT BUG:Step 6 of move of engines: rename the macro ENGINE_DYNAMIC_SUPPORT to OPENSSL_NO_DYNAMIC_ENGINE and make sure that gets defined unless shared library support has been specifically requested
NOT BUG:synchronize with 0.9.7-stable version of this file
NOT BUG:That wasn't supposed to be there..
NOT BUG:Step 5 of move of engines: Add a makefile (and a .cvsignore)
NOT BUG:Step 4 of move of engines: Split e.ec into individual files for each engine
NOT BUG:Step 3 of move of engines: copy the corresponding vendor header files
NOT BUG:Step 2 of move of engines: copy engines to new directory and rename them to be prefixed with e_ instead of hw_ They aren't necessarely hardware engines The files commited here are exact copies of the corresponding hw_ files found in crypto/engine/
NOT BUG:Add a configuration target for A/UX PR: 271
NOT BUG:make update
NOT BUG:There may be more than one single quote to fix PR: 256
NOT BUG:Make sure it's properly detected when there's no version information at all and in all other cases make sure foo.so is linked to foo.so.{soversion}
NOT BUG:Make sure $fname will not give us any surprises with any funny characters PR: 256
NOT BUG:BN_bn2hex() returns "0" instead of "00" for zero This disrputs the requirement that the serial number always be an even amount of characters PR: 248
NOT BUG:Fix inconsistencies in the Darwin targets Add a variant of SHLIB_SOVER without the preceding period
NOT BUG:Add a suffix for Darwin's sake since it seems like .dylib comes after the version in the file name
NOT BUG:Move the shared library construction stuff to Makefile.shared a helper makefile that generalises our way of building shared libraries and is designed to take care of almost anything (I hope)
BUG:Rhapsody had ftime Darwin doesn't (any longer?)
NOT BUG:Add a few more target platforms to see how well the shared library linking works on them
NOT BUG:VMS below version 7 doesn't have strcasecmp so let's roll our own on VMS PR: 184
NOT BUG:Typo
NOT BUG:RFC 2712 redefines the codes for use of Kerberos 5 in SSL/TLS PR: 189
NOT BUG:More docs
NOT BUG:Typo
NOT BUG:Update docs
NOT BUG:Make sure that the 'config' variable is correctly defined and declared for monolithic as well as non-monolithic biuld More work is probably needed in this area PR: 144
NOT BUG:Remove redundancy and use the main makefile better
NOT BUG:Keep the sub_all symbol so all the algorithm Makefiles won't break
NOT BUG:Change the main Makefile to have "mini-build" targets PR: 253 last part
NOT BUG:Don't fuss with the demo binaries
NOT BUG:Add a few more VxWorks targets Correct misspelled VXWORKS macros Add VXWORKS identifying macros to e_os2.h Add required inclusions and mappings for VxWorks in e_os.h A few small modifications to make OpenSSL build and work on VxWorks PR: 253 except for the change that was handled in an earlier commit and a request for easy build of just parts of OpenSSL
NOT BUG:Use double dashes so makedepend doesn't misunderstand the flags we give it For 0.9.7 and up that means util/domd needs to remove those double dashes from the argument list when gcc is used to find the dependencies
NOT BUG:PKCS12_parse manual page
NOT BUG:PKCS12_create manual page
NOT BUG:More man pages
BUG:Add missing LF
NOT BUG:PKCS7_verify() docs
NOT BUG:More docs
NOT BUG:More d2i/i2d manual pages
NOT BUG:Document "0" and "1" naming convention
NOT BUG:Update docs
NOT BUG:Update docs
NOT BUG:Update DH parameter docs
NOT BUG:Various Win32 fixes
NOT BUG:Resolve signed/unsigned conflicts
NOT BUG:Make dso_win32.c compile
NOT BUG:Oops remove old comment out debugging printf..
NOT BUG:Since crypt() isn't defined anywhere define it locally in destest.c
NOT BUG:Please do not use C++ comments in C code
NOT BUG:Do not define crypt() The supported function is DES_crypt() (an des_crypt() when backward compatibility is desired)
NOT BUG:Update RSAPublicKey manual page..
NOT BUG:Some docs relating to X509 ASN1 functions
NOT BUG:Many other ASN1 functions are identical other than the actual structure being handled
NOT BUG:For some reason the random number support removed the destructor
NOT BUG:Typo
NOT BUG:Add version info to Win32 DLLs
NOT BUG:We might want to edit the strings a bit..
NOT BUG:Maybe add to 0.9.7 too?
NOT BUG:make update
NOT BUG:Add declaration got PKCS#7 NDEF
NOT BUG:Update mkdef.pl to handle new ASN1 macro
NOT BUG:Installed libraries should not be overwritten especially shared ones Use mv to make sure the old copy is unlinked instead of overwritten PR: 273 and probably others..
NOT BUG:Add random number generation capability to the cswift engine Should this be added to 0.9.6-stable as well? PR: 275
NOT BUG:If we're loading libz dynamically and COMP_zlib() is called more than once only the first call would provide the correct result PR: 277
NOT BUG:Document should match reality :-) PR: 255
NOT BUG:Add a small note saying the 'debug' option should come before the platform in the arguments to mk1mf.pl PR: 298
NOT BUG:Various enhancements to PKCS#12 code new medium level API improved PKCS12_create and additional functionality in pkcs12 utility
NOT BUG:Preliminary streaming ASN1 encode support
NOT BUG:Removal missing
NOT BUG:The OpenBSD project has replaced the first implementation of the /dev/crypto engine with something they claim is better I have nothing to compare to and I assume they know what they're talking about The interesting part with this one is that it's loaded by default on OpenBSD systems This change was originally introduced in OpenBSD's tracking of OpenSSL
NOT BUG:fix more race conditions
NOT BUG:Submitted by: "Patrick McCormick" <patrick@tellme.com> PR: 262
BUG:Add missing brackets Submitted by: "Chris Brook" <cbrook@v-one.com>
NOT BUG:really fix race conditions
BUG:Submitted by: "Patrick McCormick" <patrick@tellme.com>
NOT BUG:PR: 262 PR: 291
NOT BUG:Make sure that the signal storage is regarded as volatile This correction was originally introduced in OpenBSD's tracking of OpenSSL
NOT BUG:It makes more sense to refer to specific function manuals than the concept manual when the specific function is refered to in the current manual text This correction was originally introduced in OpenBSD's tracking of OpenSSL
NOT BUG:Remove *all* references to RSA_PKCS1_RSAref since it doesn't exist any more This correction was originally introduced in OpenBSD's tracking of OpenSSL
NOT BUG:Remove reference to RSA_PKCS1_RSAref since it doesn't exist any more This correction was originally introduced in OpenBSD's tracking of OpenSSL
NOT BUG:It makes more sense to refer to specific function manuals than the concept manual when the specific function is refered to in the current manual text This correction was originally introduced in OpenBSD's tracking of OpenSSL
NOT BUG:Incorrect argument order to memset()
NOT BUG:Missing ;
NOT BUG:-elapsed is also useful when using gettimeofday
NOT BUG:really fix race condition
NOT BUG:PR: 262
NOT BUG:use OPENSSL_SYS_MSDOS rather than __DJGPP__ to disable egd this is not compiler specific
NOT BUG:make files didn't work on case insensitive filesystems
NOT BUG:there is no minimum length for session IDs
NOT BUG:PR: 274
NOT BUG:fix race condition
NOT BUG:PR: 262
NOT BUG:make sure 'neg' flag (which does not really matter for GF(2^m) but could cause confusion for ECDSA) is set to zero
BUG:Submitted by: Sheueling Chang
NOT BUG:add URL for Internet Draft
NOT BUG:1 switch from "-newkey ecdsa:..." to "-newkey ec:..." 2 automatically create required sub-directories
NOT BUG:Submitted by: Vipul Gupta <Vipul.Gupta@sun.com>
NOT BUG:Let 'openssl req' fail if an argument to '-newkey' is not recognized instead of using RSA as a default
NOT BUG:Really fix PKCS7_set_detached this time..
NOT BUG:Fix typos in PKCS#12 ASN1 code
NOT BUG:Make PKCS7_set_detached work again
NOT BUG:Consequently use term URI instead of URL Submitted by: TJ Saunders <tj@castaglia.org> Reviewed by: PR: 268
NOT BUG:-nameopt fix has been moved to 0.9.7
NOT BUG:mention EC_get_builtin_curves()
NOT BUG:change API for looking at the internal curve list
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Fix ASN1_STRING_to_UTF8: remove non sensical !*out test
NOT BUG:don't memset(data,0,...) if data is NULL
NOT BUG:Submitted by: anonymous PR: 254
NOT BUG:Fix a bug to allow the 4758 ENGINE to build as a DSO
NOT BUG:don't write beyond buffer
NOT BUG:Submitted by: Nils Larsch
NOT BUG:change 'usage' formatting
NOT BUG:less specific interface for EC_GROUP_get_basis_type
NOT BUG:Submitted by: Nils Larsch Bodo Moeller
BUG:fix spacing
NOT BUG:move EC_GROUP_get_basis_type() from ec_lib.c to ec_asn1.c
NOT BUG:ASN1 for binary curves
NOT BUG:Submitted by: Nils Larsch
NOT BUG:fix offsets
NOT BUG:Submitted by: Nils Larsch
NOT BUG:ecdsa => ec
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Reinstate the check for invalid length BIT STRINGS which was effectively bypassed in the ASN1 changed
NOT BUG:Make -nameopt work in req and add support for -reqopt
NOT BUG:Change C++ style comments
NOT BUG:#if out unused function to shut the compiler up
NOT BUG:Fix crahses and leaks in pkcs12 utility -chain option
BUG:Typo I assigned the variable ld instead of my_ld..
NOT BUG:So I discovered that if you have your $PATH set so a ld different from GNU ld comes first checking the usage of collect2 gives that instead of GNU ld even if GNU ld would be the one that would get used if we link using gcc It's much better apparently to ask gcc directly what the path to GNU ld is (provided it's there at all and gcc knows about it) and ask the result if it's a GNU or not The bonus is that our GNU ld detection mechanism got shorter and easier to understand..
NOT BUG:Reorder cleanup sequence in SSL_CTX_free() to leave ex_data for remove_cb() Submitted by: Reviewed by: PR: 212
NOT BUG:typo
NOT BUG:Submitted by: Nils Larsch
NOT BUG:'EC' vs 'ECDSA'
NOT BUG:Submitted by: Nils Larsch
NOT BUG:isalist was less trustable than I thought (or rather one can trust it to come up with all kinds of names we don't have in our targets) Besides our sparcv9 targets currently generate sparcv8 code I'm told
BUG:Add -lz to the ld flags when the user has chosen to link in zlib *statically* Notified by Doug Kaufman <dkaufman@rahul.net>
NOT BUG:Fix block_size field for CFB and OFB modes: it should be 1
NOT BUG:q may be used uninitialised
NOT BUG:use correct function code in error message
NOT BUG:It seems like sun4u doesn't always have a sparcv9 inside Trust isalist PR: 220
NOT BUG:fix warnings (CHARSET_EBCDIC)
BUG:Submitted by: Lorinczy Zsigmond <lzsiga@mail.ahiv.hu>
NOT BUG:fix manpage
NOT BUG:add crypto/ecdh
NOT BUG:Missing =back Part of PR 196
NOT BUG:Add a FAQ entry for yet another bc failure PR: 199
NOT BUG:Yet a couple of modules forgotten These weren't important for OpenSSL itself since they aren't used there (yet) It became quite visible qhen building a shared library however..
NOT BUG:Simplify handling of named curves: get rid of EC_GROUP_new_by_name() EC_GROUP_new_by_nid() should be enough This avoids a lot of redundancy
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Sometimes the value of the variable containing the compiler call can become rather large This becomes a problem when the default 1024 character large buffer that WRITE uses isn't enough WRITE/SYMBOL uses a 2048 byte large buffer instead
NOT BUG:change how pod2man is handled: explicitly invoke '$PERL' only when needed call 'pod2man' directly if this works
NOT BUG:PR: 217
NOT BUG:Instead of returning errors when certain flags are unusable just ignore them That will make the test go through even if DH (or in some cases ECDH) aren't built into OpenSSL PR: 216 part 2
NOT BUG:The applications 'ecdsa' and 'ecparam' were missing from the VMS build
NOT BUG:Make sure that the test input file comes in the same record format as the typical output from a program in C PR: 222
NOT BUG:move a TODO from CHANGES to STATUS
NOT BUG:add 'TODO' items
NOT BUG:Fix typo in OBJ_txt2obj which incorrectly passed the content length instead of the encoding length to d2i_ASN1_OBJECT
NOT BUG:This wasn't visible before becuse ASN1_get_object() used to read past the length of the supplied buffer
NOT BUG:Some files deserve to be ignored
NOT BUG:Merge in demo engines from 0.9.7-stable
NOT BUG:Comma forgotten
NOT BUG:Oh ec2_smpt.c is #included by ec2_smpl.c!
NOT BUG:Do not include openssl/ripemd.h when the RIPEMD algorithm has been deselected PR: 216 point 1
NOT BUG:Do not use the word 'modulus' which is a class template name in VC++ 6.0/SP5 PR: 216 point 3
NOT BUG:Scripts for testing ECC ciphersuites
BUG:Submitted by: Sun Microsystems Labs
NOT BUG:A few files in the ENGINE and EVP sections forgotten
NOT BUG:fix previous commit (there's no SSLEAY_VERSION_TEXT)
NOT BUG:remove comment
BUG:Submitted by: Douglas Stebila
NOT BUG:remove debug messages
BUG:Submitted by: Douglas Stebila
NOT BUG:fix comment
BUG:Submitted by: Douglas Stebila
NOT BUG:get rid of EVP_PKEY_ECDSA (now we have EVP_PKEY_EC instead)
NOT BUG:Submitted by: Nils Larsch
BUG:add 0.9.6g information
BUG:Update with the status for 0.9.6g
NOT BUG:In case of shared libraries we might run one version of the application with a different version of the library Detect if there is a difference of versions and print both versions in that case This might prove to be a good enough debugging tool in case of doubt
NOT BUG:One more file to compile on VMS as well
NOT BUG:Remove clashes between symbols that have the same name except for casing
BUG:More long symbols to shorten
NOT BUG:mem* functions are declared in string.h
NOT BUG:Synchronise tests with Unix
NOT BUG:A new header
NOT BUG:Synchronise with Unix (I expect the next run will generate lots of errors on VMS :-))
BUG:More long names to shorten
NOT BUG:.cvsignore for crypto/ecdh
NOT BUG:make update
NOT BUG:fix warnings
NOT BUG:add field type to text output don't print seed value as a number (leading zeros must not be removed)
NOT BUG:Submitted by: Nils Larsch
NOT BUG:use 0 not NULL
NOT BUG:Submitted by: Nils Larsch
NOT BUG:ECDH engine support
BUG:Submitted by: Douglas Stebila
NOT BUG:ECC ciphersuite support
NOT BUG:Submitted by: Douglas Stebila <douglas.stebila@sun.com> (Authors: Vipul Gupta and Sumit Gupta Sun Microsystems Laboratories)
NOT BUG:When we want to give a -f argument to $(MAKE) we'd better make sure the variable doesn't already contain a -f argument PR: 203 part 4
NOT BUG:Add ECDH support
NOT BUG:Additional changes: - use EC_GROUP_get_degree() in apps/req.c - add ECDSA and ECDH to apps/speed.c - adds support for EC curves over binary fields to ECDSA - new function EC_KEY_up_ref() in crypto/ec/ec_key.c - reorganize crypto/ecdsa/ecdsatest.c - add engine support for ECDH - fix a few bugs in ECDSA engine support
NOT BUG:Submitted by: Douglas Stebila <douglas.stebila@sun.com>
BUG:Parse version numbers prefixed with text (egcs does that even with -dumpversion) PR: 203 part 1
NOT BUG:0.9.6f is released
NOT BUG:use a generic EC_KEY structure (EC keys are not ECDSA specific)
NOT BUG:Submitted by: Nils Larsch
NOT BUG:avoid SIGSEGV
NOT BUG:Submitted by: Nils Larsch Douglas Stebila
NOT BUG:These are updates/fixes to DH/DSA/RAND docs based on the fixes to the RSA docs There were a couple of other places (including RSA) where the docs were not quite synchronised with the API that are now fixed One or two still remain to be fixed though ..
NOT BUG:typo fix
NOT BUG:Various parts of the RSA documentation were inaccurate and out of date and this fixes those that I'm currently aware of In particular the ENGINE interference in the RSA API has hopefully been clarified This still needs to be done for other areas of the API ..
NOT BUG:A single monolithic man page for the ENGINE stuff This is a rough first-cut but provides better documentation than having nothing on the ENGINE API
NOT BUG:Fix "make install_docs" (and thus "make install")
NOT BUG:oops -- must use EVP_MD_size not EVP_MD_block_size
NOT BUG:oops undo previous change (was just for testing)
NOT BUG:fix bn_expand2
NOT BUG:use bn_wexpand instead of bn_expand2 (the latter is not needed here and it does not yet work correctly)
BUG:Submitted by: Douglas Stebila
NOT BUG:Fix typo
NOT BUG:Fix the ASN1 sanity check: correct header length calculation and check overflow against LONG_MAX
NOT BUG:disable Sun divison algorithm by default
NOT BUG:fix bn_expand2
NOT BUG:optical changes
NOT BUG:typo
NOT BUG:remove obsolete part of comment
NOT BUG:remove obsoleted disabled code
BUG:Let BN_rand_range() abort with an error after 100 iterations without success
NOT BUG:update
NOT BUG:Change BN_mod_sqrt() so that it verifies that the input value is really the square of the return value
NOT BUG:move GF2m tests to the end
NOT BUG:Rename implementations of method functions so that they match the new method names where _GF.. suffixes have been removed
NOT BUG:Revert changes to ..._{get/set}_Jprojective_coordinates_...: The current implementation for ECC over binary fields does not use projective coordinates and if it did it would not use Jacobian projective coordinates; so it's OK to use the ..._GFp prefix for all this
NOT BUG:Add author attributions to some files so that it doesn't look as if Sun wrote all of this :-)
NOT BUG:typos
BUG:ec2_smpt.c must be listed in LIBSRC
NOT BUG:there is no alternative EC_METHOD for curves over GF(2^m) (yet)
NOT BUG:add support for elliptic curves over binary fields
BUG:Submitted by: Duglas Stebila <douglas.stebila@sun.com> Sheueling Chang <sheueling.chang@sun.com>
NOT BUG:(CHANGES entries by Bodo Moeller)
NOT BUG:extend curve list (additional curves over binary fields)
BUG:Submitted by: Sheueling Chang Shantz and Douglas Stebila (Sun Microsystems Laboratories)
NOT BUG:Binary field arithmetic contributed by Sun Microsystems The 'OPENSSL_NO_SUN_DIV' default is still subject to change so I didn't bother to finish the CHANGES entry yet
BUG:Submitted by: Douglas Stebila <douglas.stebila@sun.com> Sheueling Chang <sheueling.chang@sun.com> (CHANGES entry by Bodo Moeller)
BUG:Add more WAP/WTLS elliptic curve OIDs
NOT BUG:Submitted by: Douglas Stebila <douglas.stebila@sun.com>
NOT BUG:New error code ERR_R_DISABLED
NOT BUG:Submitted by: Douglas Stebila <douglas.stebila@sun.com>
BUG:get rid of OpenSSLDie
NOT BUG:make update
NOT BUG:Certain flag macros were tested with #if instead if #ifdef..
NOT BUG:We don't need to find out which pod2man to use more than once
NOT BUG:Don't try testing with parallell make that will just fail PR: 175
NOT BUG:Add aix64-cc and make sure that ar gets proper flags for 64-bit libraries
NOT BUG:make update
NOT BUG:Add the CBC flag for cbc ciphers
NOT BUG:Avoid yet another name clash with libdes and make the declaration consistent with the definition
NOT BUG:Make it possible to load keys from stdin and restore that functionality in the programs that had that before Part fo PR 164
NOT BUG:OCSP and KRB5 Makefil.ssl should be consistent with all the others
NOT BUG:Linux on s390 really knows about loading dynamically PR: 183
BUG:Cut'n'paste error with other reposnder certificates cleared PR: 190
NOT BUG:If CRYPTO_realloc() is called with a NULL pointer have it call OPENSSL_malloc() PR: 187
NOT BUG:If the email address is moved from the subject to the subject alternate name the subject in the certificate would differ from the subject in the index file which has quite bad concequences PR: 180
NOT BUG:Make sure to use $(MAKE) everywhere instead of make Part of PR 181
NOT BUG:ln -f -s doesn't always work so do a rm -f followed by a ln -s Part of PR 181
NOT BUG:The version of the shared library should for now reflect the version of OpenSSL Part of PR 181
NOT BUG:Typo Submitted by: Jeffrey Altman <jaltman@columbia.edu> Reviewed by: PR: 169
BUG:OpenSSL Security Advisory [30 July 2002]
BUG:Changes marked "(CHATS)" were sponsored by the Defense Advanced Research Projects Agency (DARPA) and Air Force Research Laboratory Air Force Materiel Command USAF under agreement number F30602-01-2-0537
NOT BUG:"make update"
NOT BUG:0.9.6e and 0.9.7-beta3 are out
NOT BUG:Only use DSA-functions if available Submitted by: "Hellan,Kim KHE" <KHE@kmd.dk> Reviewed by: PR: 167
NOT BUG:mention SSL_do_handshake()
NOT BUG:Use SEC1 format for EC private keys This is not ECDSA specific so it's now PEM_STRING_ECPRIVATEKEY etc
BUG:Submitted by: Nils Larsch <nlarsch@compuserve.de>
BUG:Move zeroing from bn_expand_internal() to bn_expand2() so that it happens reliably even if the BIGNUM is already sufficiently large
NOT BUG:[Note that the bn_expand()/bn_wexpand() macros call bn_expand2() only if the BIGNUM actually has to grow so this change does not add any new overhead as currently bn_expand2() is never called directly.]
NOT BUG:more detailed instructions for export from US
BUG:Don't clobber loop variable PR: 159
NOT BUG:Document the recent DJGPP-related changes
NOT BUG:Make dummy tests to make it easier to physically remove unwanted algorithms This should complete PR 75
NOT BUG:harmonize options with those for 'ecparam' remove redudant option '-pub'
NOT BUG:Submitted by: Nils Larsch
NOT BUG:If DH is disabled don't define the DH functions Notified by Kim Hellan <KHE@kmd.dk>
NOT BUG:fix a typo and clarify
NOT BUG:add an explanation and fix a typo
BUG:New cipher selection options COMPLEMENTOFALL and COMPLEMENTOFDEFAULT Submitted by: Reviewed by: PR: 127
NOT BUG:HP-UX shared libraries must be +x and should be -w It doesn't hurt on other platforms Submitted by: Reviewed by: PR: 134
NOT BUG:update
NOT BUG:The first compile of the new merger method for VMS *almost* got through That's not enough is it? :-)
NOT BUG:Two more names that are a little too long for the standard VMS linker
NOT BUG:The behaviour is undefined when calling SSL_write() with num=0 Submitted by: Reviewed by: PR: 141
NOT BUG:Manual page for SSL_do_handshake() Submitted by: Martin Sjögren <martin@strakt.com> PR: 137
NOT BUG:This documentation change was being written at the same time as Richard's changes So I'm committing this version to overwrite his changes for now and he can always take his turn to overwrite my words if he wants :-)
BUG:PR: 86
NOT BUG:Explain why RSA_check_key() doesn't work with hard keys PR: 86
NOT BUG:Add history for documented new functions PR: 59
BUG:Allow subjects with more than 255 characters to be properly printed PR: 147
NOT BUG:Further enhance assembler support on Cygwin and DJGPP Make pod2mantest useable on DOS-based systems Part of PR 75 the rest is still under investigation
NOT BUG:Fix bug introduced with revision 1.95 when this filed was modified to use the new X509_CRL_set_issuer_name() function: The CRL issuer should be X509_get_subject_name(x509) not X509_get_issuer_name(x509)
BUG:Submitted by: Juergen Lesny <lesnyj@informatik.tu-muenchen.de>
NOT BUG:typo
NOT BUG:Reverse the change with the following log it needs further investigation:
NOT BUG:Make S/MIME output conform with the mail and MIME standards PR: 151
NOT BUG:Make S/MIME output conform with the mail and MIME standards PR: 151
NOT BUG:Unixware doesn't have strings.h so we need to declare strcasecmp() differently Unixware 2 needs to link with libresolv PR: 148
NOT BUG:OPENSSL_SYS_WIN32 is important so util/mkdef.pl can detect it
NOT BUG:Make mkdir failsafe in case the directories are already present
NOT BUG:Add support for shared libraries with OS/2 PR: 124
NOT BUG:Add a few FAQ entries for the various ways building OpenSSL on MacOS X can fail and point at the text in the PROBLEMS file
NOT BUG:If OpenSSL is built with shared library support on MacOS X everything works fine Note: this is only true for 0.9.7 and on
NOT BUG:On MacOS X the shared library editor uses DYLD_LIBRARY_PATH
NOT BUG:On MacOS X you're not allowed to have common objects in shared libraries
NOT BUG:Add the usually recommended solution to the linking problem entry for MacOS X
NOT BUG:We had some experimental options in the Darwin entries They are no longer needed
NOT BUG:The default C compiler on MacOS X doesn't like empty object files
NOT BUG:Actually the "bug" is really documented in the man-page for ld so it's really a misfeature according to the jargon file (4.0.0) definition:
NOT BUG:":misfeature: /mis-fee'chr/ or /mis'fee`chr/ /n./ A feature that eventually causes lossage possibly because it is not adequate for a new situation that has evolved Since it results from a deliberate and properly implemented feature a misfeature is not a bug."
NOT BUG:There are problems on certain platforms and possible answers on how to (temporarly) solve them
NOT BUG:For those wanting to build for several platforms with the same source directory making a separate directory tree with lots of symbolic links seems to be the solution Unfortunately Configure doesn't take appropriate steps to support this solution (as in removing a file that's going to be rewritten) This change corrects that situation Now I just have to find all other places where there's lack of support for this
NOT BUG:For those wanting to build for several platforms with the same source directory making a separate directory tree with lots of symbolic links seems to be the solution Unfortunatelt Configure doesn't take appropriate steps to support this solution (as in removing a file that's going to be rewritten) This change corrects that situation Now I just have to find all other places where there's lack of support for this
NOT BUG:Some older code (never committed) wasn't converted to the new format Corrected
NOT BUG:Let's not forget the second -Wtraditional
NOT BUG:Using -Wtraditional took it a little far After all we expect ANSI C so we don't need to care about traditional compilers
NOT BUG:Set up the engine before doing anything random-related since engine randomness is only used for seeding and doing it in the wrong order will mean seeding is done before the engine randomness is hooked in Notified by Frederic DONNAT <frederic.donnat@zencod.com>
NOT BUG:There's an ongoing project to bring some kind of path selection mechanism to the ENGINE framework This means there there are going to be new functionality for the DSO part and ultimately some way of merging two file specifications together
NOT BUG:This commit places the merging code into the repository It's currently not used anywhere and hasn't been tested at all It may be full of errors including syntactical ones Those will be fixed as promptly as possible
NOT BUG:Replace 'ecdsaparam' commandline utility by 'ecparam' (the same keys can be used for ECC schemes other than ECDSA) and add some new options
NOT BUG:Similarly use string "EC PARAMETERS" instead of "ECDSA PARAMETERS" in 'PEM' format
NOT BUG:Fix ec_asn1.c (take into account the desired conversion form)
NOT BUG:'make update'
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Rewording: some algorithms are also patented in Europe so choose more defensive phrases..
NOT BUG:In UI_UTIL_read_pw() we should look at the size parameter not at BUFSIZ Submitted by Götz Babin-Ebell <babinebell@trustcenter.de>
NOT BUG:Discussion about Redhat's specialties for the FAQ Submitted by: John.Airey@rnib.org.uk Reviewed by: PR: 128
NOT BUG:Typos in links between manual pages Submitted by: Richard.Koenning@fujitsu-siemens.com Reviewed by: PR: 129
BUG:Sun's official statement with respect to /dev/random support Submitted by: Garrett Anderson garrett@dirsec.com Reviewed by: PR: 120
NOT BUG:Minor typos Submitted by: jufi@nerdnet.de Reviewed by: PR: 138
NOT BUG:remove obsolete comment
NOT BUG:Reorder inclusion of header files:
BUG:des_old.h redefines crypt: #define crypt(b,s)\ DES_crypt((b),(s))
NOT BUG:This scheme leads to failure if header files with the OS's true definition of crypt() are processed _after_ des_old.h was processed This is e.g the case on HP-UX with unistd.h As evp.h now again includes des.h (which includes des_old.h) this problem only came up after this modification Solution: move header files (indirectly) including e_os.h before the header files (indirectly) including evp.h Submitted by: Reviewed by: PR:
NOT BUG:Ciphers with NULL encryption were not properly handled because they were not covered by the strength bit mask Submitted by: Reviewed by: PR: 130
NOT BUG:fix synopsis
NOT BUG:Submitted by: Nils Larsch
BUG:emtpy fragments are not necessary for SSL_eNULL (but noone uses it anyway)
NOT BUG:fix t1_enc.c: use OPENSSL_NO_RC4 not NO_RC4
NOT BUG:oops there were other cases of "ENGINE_ID" to change too
NOT BUG:Correct an error in the README.ENGINE file
BUG:Submitted by: Jan Tschirschwitz <Jan.Tschirschwitz@cluster-labs.de>
NOT BUG:AES cipher suites are now official (RFC3268)
BUG:README and INSTALL should contain information about the request tracker (noted by Jonathan Louie <jlouie@recourse.com>)
NOT BUG:Do not define crypt() on OpenBSD Notified by Bob Beck of OpenBSD
NOT BUG:opensslconf.h doesn't define what we want e_os2.h does PR 123
NOT BUG:Try to avoid double declaration of ERR_load_PEM_strings() PR 71
NOT BUG:A few changes to BC-32.pl didn't get properly applied This completes PR 123
NOT BUG:Pass CFLAG to dependency makers so non-standard system include paths are handled properly Part of PR 75
NOT BUG:DJGPP has some needed header files that other MSDOS/Windows compilers don't have Part of PR 75
NOT BUG:Update the information on Cygwin Part of PR 75
NOT BUG:Forgot to change the second $ENV{DJDIR} to /dev/env/DJDIR Part of PR 75
NOT BUG:The new stuff is for Borland Bulider 5 so document it appropriately
NOT BUG:Document the new way of building with Borland Builder This concludes the changes from PR 123
NOT BUG:Use underscores instead of dashes in temporary file names This is due to weird Borland compilers Part of PR 123
NOT BUG:When compiling for Windows make sure we have the windows definitions declared Part of PR 123
NOT BUG:Use 32-bit sections instead of the default 16-bit ones Part of PR 123
NOT BUG:have 'openssl pkcs7' exit with code 1 on error instead of 0 PR: 119
NOT BUG:gcc requires -m64 to link 64-bit shared libraries on Solaris PR: 117
NOT BUG:Use bg instead of bag as argument to macros to avoid clashes with structure field names PR: 112
NOT BUG:There is no RSAREF any more so do not ty to install it PR: 106
NOT BUG:The general debug target must specify that it doesn't use assembler routines PR: 105
NOT BUG:A number of includes were removed from evp.h some time ago The reason was that they weren't really needed any more for EVP itself However it seems like soma applications (I know about OpenSSH but there may be more) used evp.h as the 'load all' header file which makes sense since we try our best to promote the use of EVP instead of the lower level crypto algorithms Therefore I put the inclusions back so the application authors don't get too shocked by all the errors they would otherwise get
NOT BUG:Thanks to Theo de Raadt for making us aware of this
NOT BUG:Make sure buffers are large enough even for weird parameters
NOT BUG:Submitted by: Nils Larsch
NOT BUG:update an entry on EVP changes
NOT BUG:For some reason we need to return the full path to perl
NOT BUG:Make sure any ENGINE control commands make local copies of string pointers passed to them whenever necessary Otherwise it is possible the caller may have overwritten (or deallocated) the original string data when a later ENGINE operation tries to use the stored values
NOT BUG:Submitted by: Götz Babin-Ebell <babinebell@trustcenter.de> Reviewed by: Geoff Thorpe PR: 98
NOT BUG:<sys/select.h> is included for AIX when USE_SOCKETS is defined Submitted by: Bernhard Simon <bs@bsws.zid.tuwien.ac.at> Reviewed by: PR:
NOT BUG:HP-UX: shared libraries MUST be +x and SHOULD be -w
NOT BUG:Fix path to find util/pod2man.pl from the execution directory Make sure to use the predefined PERL Submitted by: Bernhard Simon <bs@bsws.zid.tuwien.ac.at> Reviewed by: PR:
BUG:This apparently fixes compilation on OSX that was failing in 0.9.7 betas
BUG:Submitted by: Pieter Bowman <bowman@math.utah.edu>
NOT BUG:AIX (V3) requires <sys/select.h> (included via e_os.h) for fd_set Submitted by: Bernhard Simon <bs@bsws.zid.tuwien.ac.at> Reviewed by: PR:
NOT BUG:load_netscape_key is static
NOT BUG:always include <string.h> (we do this in various other header files so it can't be bad)
NOT BUG:always include <string.h> (we do this in various other header files so it can't be bad)
NOT BUG:PR: 102
NOT BUG:Implement handling of EC parameter seeds (new functions EC_GROUP_set_seed() EC_GROUP_get0_seed() EC_GROUP_get_seed_len())
NOT BUG:New functions ECPKParameters_print() ECPKParameters_print_fp()
NOT BUG:Submitted by: Nils Larsch
NOT BUG:typo
BUG:beta2 not beta1
NOT BUG:Roll out OpenSSL-0.9.7-beta2
BUG:Use -dumpversion to obtain gcc's version Submitted by: ross.alexander@uk.neceur.com allenh@eecs.berkeley.edu Reviewed by: PR: 96
NOT BUG:OpenSSL_add_all_algorithms has been replaced by configuration dependent functions and is redirected by macros Switch it off now possible removal later
NOT BUG:Initial support for hpux64-parisc-gcc Submitted by: ross.alexander@uk.neceur.com Reviewed by: PR: 96
NOT BUG:Some more prototype fixes Use DECLARE macros in asn1* instead of direct declaration Submitted by: Goetz Babin-Ebell <babinebell@trustcenter.de> Reviewed by: PR: 89
NOT BUG:New option SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS for disabling CBC vulnerability workaround (included in SSL_OP_ALL)
NOT BUG:PR: #90
NOT BUG:make update (adapt libeay.num to the 0.9.7-stable branch)
NOT BUG:Tentatively add support for UWIN a Unix-like environment on top of Windows PR: 62
NOT BUG:Make sure that any dash in the prefix before the version number is removed PR: 96
NOT BUG:Add support for DJGPP
NOT BUG:Add support for DJGPP PR: 75
NOT BUG:Check for the executable $openssl not just the file Part of PR: 75
NOT BUG:Parse directory using both slashes and backslashes as separators Do file copying in term of perl statements instead of using cp Part of PR: 75
NOT BUG:Making a softlink from crypto/des/asm/perlasm to crypto/perlasm isn't strictly necessary so let's not do that
NOT BUG:Add missing prototypes Submitted by: Goetz Babin-Ebell <babinebell@trustcenter.de> PR: 89
NOT BUG:Fix ext_dat.h extension ordering
BUG:Reinstate -reqout code
NOT BUG:Avoid coredump in ocsp if setup_verify fails
NOT BUG:Fix typo in ocsp usage message
BUG:Add OIDs for Secure Electronic Transactions (SET) Submitted by: Vadim Fedukovich <vf@unity.net> Reviewed by: Lutz Jaenicke PR: 80
NOT BUG:Clarify formulation (proposed by Bodo Moeller)
NOT BUG:The new ASN1 code automatically allocates structures for fields that are not OPTIONAL
NOT BUG:However in the AUTHORITY_INFO_ACCESS case the 'location' field was set to NULL in the old code
NOT BUG:So in 0.9.7+ we should free up the field before overwriting it in v2i_AUTHORITY_INFO_ACCESS
NOT BUG:Make change uniqueIdentifier -> x500UniqueIdentifier clearly visible Submitted by: Reviewed by: PR: 82
NOT BUG:Correct wrong usage information PR: 95
NOT BUG:typo
NOT BUG:simplify asn1_flag
NOT BUG:Submitted by: Nils Larsch Reviewed by: Bodo Moeller
NOT BUG:Support building the distribution .tar file on platforms with limited argument list length This requires Gnu-tar As we use the non-standard "tardy" software anyway it doesn't hurt too much to require Gnu-tar "make dist" will probably only be used by team-members anyway
NOT BUG:Handle read errors
NOT BUG:Fix warnings
NOT BUG:move ECC ASN1 that is not specific to ECDSA into crypto/ec/ and make some appropriate changes to the EC library
NOT BUG:Submitted by: Nils Larsch
NOT BUG:move ECC ASN1 that is not specific to ECDSA into crypto/ec/ and make some appropriate changes to the EC library
NOT BUG:Submitted by: Nils Larsch
NOT BUG:fix for 'make update'
NOT BUG:remove unnecessary calls to EC_POINT_copy()
NOT BUG:Make sure that flags are passed to "make" subprocesses
NOT BUG:fix memory leak
NOT BUG:Submitted by: Nils Larsch
NOT BUG:For the main directory Makefile.org is significant :-)
NOT BUG:Make sure that settings are passed back and forth when walking around in the tree during build Reinstall default PERL settings in Makefiles as the real reason for the failure was that the settings were not passed
NOT BUG:New OID for X509 usage: pseudonym Submitted by: Michael Bell <michael.bell@rz.hu-berlin.de> Reviewed by: Lutz Jaenicke PR: 83
NOT BUG:Merge from 0.9.7-stable
NOT BUG:Make perl replacement for dirname for system that lack the latter PR: 81
NOT BUG:It's not good to have a pointer point at something in an inner block PR: 66
NOT BUG:Check errors when parsing a PKCS8INF PEM FILE or there will be a core dump on error PR: 77
NOT BUG:Documentation bug corrected PR: 70
NOT BUG:Since there's no continuation the ; can go as well :-)
NOT BUG:There is no continuation at this point
NOT BUG:On some systems the default "perl" may still be perl4 use the correct version determined by "config" instead
NOT BUG:The correct PERL interpreter is passed via commandline
NOT BUG:Update the recognision of GCC version numbers to handle the prefix text that GCC 3.1 adds to the --version output
NOT BUG:make update (including adjusting libeay.num in HEAD to the changes in the 0.9.7-stable libeay.num
BUG:Typo PR: 72
BUG:use sstrsep() to get the proper type to aoti() Remove unneeded cast in ustrsep() PR: 69
BUG:0.9.7-beta1 is just being released
NOT BUG:Document the AES changes
NOT BUG:Add the AES test vectors from NIST document SP800-38A
NOT BUG:Make it possible to give vectors only for decryption or encryption
NOT BUG:For CFB and OFB modes always create the encryption key
NOT BUG:Declare the CFB and OFB modes for AES and prepare for a declaration of CTR mode
NOT BUG:In CFB mode the iv is always encrypted
NOT BUG:Reformat the CFLAG string so it can be made part of a C string Incidently this works pretty well on the command line as well PR: 52
NOT BUG:Support the newly release gcc 3.1 on 64-bit Solaris Not automatic PR: 57
NOT BUG:Support shared libraries properly on linux-sparcv[89] PR: 60
NOT BUG:a B< that wasn't properly ended
NOT BUG:Check the return values where memory allocation failures may happen PR: 49
NOT BUG:CAformat should not be used for CA key format
NOT BUG:Make sure that MS_STATIC isn't defined to 'static' under Win32 PR: 51
NOT BUG:pod2man.pl would only remove the first LF from the name
NOT BUG:Apparently there are still chances we have to deal with buggy pod2man versions Deal with that by testing any available pod2man and using it if appropriate and falling back to util/pod2man.pl if none was found
NOT BUG:Correct AES counter mode which incorrectly incremented the counter before using it PR: 56
NOT BUG:New functions EC_POINT_point2bn() EC_POINT_bn2point() EC_POINT_point2hex() EC_POINT_hex2point()
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Correct darwin shared library support PR: 39
NOT BUG:Some shlib extensions were in the wrong field
NOT BUG:Our copy of pod2man.pl is old and comparatively broken so lets remove it PR: 30
NOT BUG:Add more warnings for my debug targets
NOT BUG:Remove the duplicate description of -out PR: 28
NOT BUG:Make i2c_ASN1_BIT_STRING return the correct length
NOT BUG:Set DLOPEN_FLAG the same way on NetBSD as on OpenBSD PR: 58 submitted by andrew@cis.uoguelph.ca
NOT BUG:There is a chance that the input string is larger than size and on VMS this wasn't checked and could possibly be exploitable (slim chance but still)
BUG:Remove item listed twice <kromJx@crosswinds.net>
NOT BUG:Cygnus correction (I thought I had tested that...)
NOT BUG:fix Cygwin (remove extra colons)
NOT BUG:Use assembler implementations with Cygwin This also fixes the bn_sub_part_word problem
NOT BUG:Recover from errors
NOT BUG:make update
NOT BUG:Make sure short aliases are used where required
NOT BUG:Define a short alias for another long EC symbol
NOT BUG:Make sure ECDSA is built and tested on VMS Avoid loops if linking an application fails
NOT BUG:Make sure ECDSA is built and tested on VMS
NOT BUG:Allow the use of the TCP/IP stack keyword TCPIP and NONE
NOT BUG:Use OPENSSL_SYS_VMS instead of just VMS
NOT BUG:accept NULL in 'free' functions
NOT BUG:Reorganise -subj option code fix buffer overrun
NOT BUG:Fix Mingw32 asm build: use the Unix bignum assembly method of bn-586.pl and co-586.pl which (for some reason) VC++ doesn't use
NOT BUG:Add missing EVP_CIPHER_CTX_init call
NOT BUG:Fix incorrect =over 4 location Submitted by: David Waitzman <djw@bbn.com> Reviewed by: Lutz Jaenicke PR: [openssl.org #38]
NOT BUG:fix EVP_dsa_sha macro
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Use the indirect way to the actual request tracker so that people also are informed about the credentials required for guest access and the operation instructions
NOT BUG:update
NOT BUG:Zero cipher_data in EVP_CIPHER_CTX_cleanup
NOT BUG:Add cleanup calls to evp_test.c
NOT BUG:Allow reuse of cipher contexts by removing automatic cleanup in EVP_*Final()
NOT BUG:make b_print.c consistent with the rest of OpenSSL: disable assert() except for debug builds
BUG:Add missing '"' Submitted by: Boyd Gerber <gerberb@zenez.com>
NOT BUG:Recognize PPC64 target Submitted by: Reviewed by: PR: 26
NOT BUG:EVP_SealFinal should return a value
NOT BUG:values were reset for no reason
NOT BUG:updated Mingw32 instructions
NOT BUG:Add config entry debug-steve-linux-pseudo64 This sets the SIXTY_FOUR bignum library option to use 64 bit operations on the 32 bit linux platform
NOT BUG:This is very inefficient but it can be used to test some of the 64 bit logic on a 32 bit platform
BUG:Fallback to normal multiply if n2 == 8 and dna or dnb is not zero in bn_mul_recursive
NOT BUG:This is (hopefully) what was triggering bignum errors on 64 bit platforms and causing the BN_mod_mul test to fail
NOT BUG:Avoid gcc warning: BN_DEC_CONV when SIXTY_FOUR_BIT is defined is unsigned
NOT BUG:Updating status for 0.9.6d
NOT BUG:Synchronise the FAQ
BUG:Make the huge buffer smaller so the size becomes reasonable for small-stack environments Notified by Verdon Walker <VWalker@novell.com>
NOT BUG:One place where VMS wasn't changed to OPENSSL_SYS_VMS..
BUG:Move an assert() to avoid core dumps when a static buffer hasn't been given Notified by Verdon Walker <VWalker@novell.com>
NOT BUG:Small documentation fix for EVP_CipherFinal or EVP_CipherFinal_ex Notified by Stella Power <snpower@maths.tcd.ie> PR: 24
NOT BUG:Generate an error if rewinding wasn't possible Notified by Ken Hirsch <kenhirsch@myself.com> PR: 23
NOT BUG:Change internals of the EC library so that the functions EC_GROUP_{set_generator,get_generator,get_order,get_cofactor} are implemented directly in crypto/ec/ec_lib.c and not dispatched to methods
NOT BUG:Also fix EC_GROUP_copy to copy the NID
NOT BUG:Add missing ";" after fi Submitted by: bryanh@giraffe-data.com Reviewed by: PR: [openssl.org #18]
NOT BUG:in SignerInfo use ecdsa-with-SHA1 OID for ECDSA (not ecPublicKey)
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Fix ciphersuite list to enforce low priority for RC4
NOT BUG:ensure that for each strength RC4 ciphers have least preference in the default ciphersuite list
NOT BUG:refer to latest draft for AES ciphersuites
NOT BUG:fix warning
NOT BUG:update
NOT BUG:improve wNAF generation
NOT BUG:disable AES ciphersuites unless explicitly requested
NOT BUG:fix casts
NOT BUG:Make sure that date is run under the C locale so dates are given in the default format PR: 16
NOT BUG:Add apps_startup and bio_err init code to smime.c
NOT BUG:Fix escaping when using the -subj option of "openssl req" document 'hidden' -nameopt support (Robert Joop <joop@fokus.gmd.de>)
NOT BUG:Add information about -nameopt option for x509
NOT BUG:undo nonsense patch (r *is* signed or we have signedness mismatches elsewhere)
NOT BUG:Fix unsigned vs signed clash
NOT BUG:Synchronise with 0.9.7-stable
NOT BUG:Synchronise with 0.9.7-stable
NOT BUG:Fix crypto/asn1/a_sign.c so that 'parameters' is omitted (not encoded as NULL) with id-dsa-with-sha1
NOT BUG:Submitted by: Nils Larsch
BUG:Add generationQualifier OID (proposed by Fiel Cabral)
NOT BUG:Potential memory leak removed Notified by <threaded@totalise.co.uk>
NOT BUG:new items for 0.9.7
NOT BUG:oops
NOT BUG:AlgorithmIdentifier bugs
NOT BUG:fix usage (no 'key')
NOT BUG:Uhmmm if we use && after having tested for the presence of the certificate we just *might* stand a certain chance of actually getting it written to file..
NOT BUG:ERR_file_name is no longer being used
NOT BUG:Add cygwin build script (Corinna Vinschen <vinschen@redhat.com>)
NOT BUG:Make sure ec and ecdsa is properly handled in Windows Notified by Bernd Matthes <bernd.matthes@gemplus.com>
NOT BUG:Signedness mismatch Notified by Bernd Matthes <bernd.matthes@gemplus.com>
NOT BUG:The callback must have (void) as argument list Notified by Bernd Matthes <bernd.matthes@gemplus.com>
NOT BUG:No point constifying an int Notified by Bernd Matthes <bernd.matthes@gemplus.com>
NOT BUG:Do not free p if it hasn't been used yet Notified by Bernd Matthes <bernd.matthes@gemplus.com>
BUG:Make sure the opened directory is closed on exit Notified by Lorinczy Zsigmond <lzsiga@mail.ahiv.hu>
BUG:Missing "Configure" entry (Jean-Marc Desperrier <jean-marc.desperrier@certplus.com>)
BUG:Optimize: better shortcut evaluation ("Howard Chu" <hyc@highlandsun.com>)
BUG:Handle headings uniformly to allow automatic processing
NOT BUG:'version' is not optional in the encoding
NOT BUG:Submitted by: Nils Larsch
NOT BUG:'version' is not optional in the encoding
NOT BUG:Submitted by: Nils Larsch
NOT BUG:check return values
NOT BUG:Submitted by: Nils Larsch
NOT BUG:get rid of some assignments that have become obsolete
NOT BUG:Document OID changes
NOT BUG:Use the "mail" short name according to RFC2798 (Michael Bell <michael.bell@rz.hu-berlin.de>)
NOT BUG:Some more OID enhancements
NOT BUG:Fix CRLF problem in BASE64 decode
NOT BUG:remove disabled code
NOT BUG:fix length field we create when converting SSL 2.0 format into SSL 3.0/TLS 1.0 format (the bug was introduced with message callback support)
NOT BUG:Implement known-IV countermeasure
NOT BUG:Fix length checks in ssl3_get_client_hello()
NOT BUG:Use s->s3->in_read_app_data differently to fix ssl3_read_internal()
NOT BUG:Avoid emacs backup files when making a snapshot
BUG:another error discovered by Karsten Braaten The number was not even prime!
NOT BUG:looks like a typo
NOT BUG:clean up and synchronize with 0.9.6-stable
BUG:ECDSA representation bugfixes
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Check error code from a2d_ASN1_OBJECT()
NOT BUG:Change the date to XX xxx XXXX in development versions
NOT BUG:Synchronize with 0.9.7-stable
NOT BUG:Synchronize with 0.9.7-stable branch
NOT BUG:Keep my own specially optimized HP-UX shared library building up to date
NOT BUG:harmonize capitalization
NOT BUG:fix ECDSA handling
NOT BUG:Submitted by: Nils Larsch
NOT BUG:add usage examples
BUG:Apply OID fixes for elliptic curves as supplied by Nils Larsch <nlarsch@compuserve.de>
BUG:error reported by Karsten Braaten
NOT BUG:Allow longer program names (VMS allows up to 39 characters) Submitted by Compaq
NOT BUG:make update (libeay.num has been edited to match 0.9.7-stable)
NOT BUG:Allow longer program names (VMS allows up to 39 characters) Submitted by Compaq
NOT BUG:Oops the system macro for VMS is OPENSSL_SYS_VMS not VMS
NOT BUG:Recognise DEC C++ as equivalent to DEC C for the definitions of OPENSSL_EXTERN and OPENSSL_GLOBAL Submitted by Compaq
NOT BUG:Use recv() and send() for socket communication on VMS instead of read() and write() The reason is that read() and write() make additional record level locking which causes hangs of Compaq Secure Web Server (Apache) with SSL Submitted by Compaq
NOT BUG:Make shared libraries resolve global symbols within themselves first Currently only on GNUish linkers.. Submitted by Steven Bade <sbade@austin.ibm.com>
BUG:Fix buggy object definitions (Svenning Sorensen <sss@sss.dnsalias.net>)
NOT BUG:Forgot one of the casts
NOT BUG:Cast the pointers to the BIGNUM data to unsigned long * This would be harmful if we didn't also pass the exact number of bytes of that data
BUG:Fix of mixup bwtween SOMAXCONN and SO_MAXCONN Furthermore make SO_MAXCONN the first choice since that's the standard (as far as I know)
NOT BUG:Make short names of objects RFC2256-compliant
NOT BUG:A forgotten file
NOT BUG:Add the possibility to enable olde des support not just disable it for future support Redocument
NOT BUG:Add the mapping of des_random_seed() for 0.9.6 compatibility Make sure DES_cblock is defined at all times (meaning one shouldn't include openssl/des_old.h directly any more)
NOT BUG:Correct the mapping for des_read_pw()
NOT BUG:Make the change to strong keys in the string to key(s) functions experimental in the main trunk as well
NOT BUG:fix warnings
NOT BUG:Submitted by: Nils Larsch
NOT BUG:fix memory leak
NOT BUG:Submitted by: Nils Larsch
NOT BUG:add missing declaration
NOT BUG:Submitted by: Nils Larsch
BUG:Fix typo (Craig Davison <cd@securityfocus.com>)
NOT BUG:fix conditational compilation for OPENSSL_NO_..
NOT BUG:Merge changes from 0.9.7-stable
NOT BUG:Merge changes from 0.9.7-stable
NOT BUG:Merge in DES changed from 0.9.7-stable
NOT BUG:Merge in DES changed from 0.9.7-stable
BUG:Fix buggy if-condition (thomas poindessous <poinde_t@epita.fr>)
BUG:Remove superflous (and buggy) statement <justin.fletcher@ntlworld.com>
NOT BUG:fix DH_generate_parameters for general 'generator'
NOT BUG:New function EC_GROUP_check_discriminant() Restructure implementation of EC_GROUP_check()
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Map new X509 verification errors to alert codes (Tom Wu <tom@arcot.com>)
NOT BUG:Fix typo
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Initialize ciph_ctx in kssl.c
NOT BUG:Fix bugs and typos Add some WTLS curves New function EC_GROUP_check() (this will probably be implemented differently soon)
NOT BUG:Submitted by: Nils Larsch Reviewed by: Bodo Moeller
NOT BUG:fix #include position
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Ensure EVP_CipherInit() uses the correct encode/decode parameter if enc == -1
BUG:[Reported by Markus Friedl <markus@openbsd.org>]
BUG:Fix typo in dh_lib.c (use of DSAerr instead of DHerr)
NOT BUG:Rename 'cray-t90-cc' into 'cray-j90' Add to 'config'
NOT BUG:fix ssl3_pending
NOT BUG:Add missing strength entries
BUG:Initialize cipher context in KRB5 ("D Russell" <russelld@aol.net>)
NOT BUG:Allow HMAC functions to use an alternative ENGINE
NOT BUG:add OIDs for WAP/TLS curves
NOT BUG:Fixes for 'no-hw' combined with 'no-SOME_CIPHER' Fix dsaparam usage output
NOT BUG:Submitted by: Nils Larsch
NOT BUG:use BIO_nwrite() more properly to demonstrate the general idea of BIO_nwrite0/BIO_nwrite (the previous code was OK for BIO pairs but not in general)
NOT BUG:Undo previous patch: avoid warnings by #undef'ing duplicate definitions
NOT BUG:Suggested by "Kenneth R Robinette" <support@securenetterm.com>
NOT BUG:Fix Kerberos warnings with VC++
NOT BUG:Fix ASN1 additions for KRB5
NOT BUG:Fix various warnings when compiling with KRB5 code
NOT BUG:asm/mips3.o problems
NOT BUG:Make ciphers and digests obtain an ENGINE functional reference if impl is explicitly supplied
NOT BUG:Make {RSA,DSA,DH}_new_method obtain and release an ENGINE functional reference in all cases
NOT BUG:Fix the Win32_rename() function so it correctly returns an error code Use the same code in Win9X and NT
NOT BUG:Fix some ca.c options so they work under Win32: unlink/rename wont work under Win32 unless the file is closed
NOT BUG:EC curve stuff
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Synchronise the AEP engine in all branches For 0.9.6-stable [engine] implement software fallback
NOT BUG:When closing do not use close() Also if the closing call fails do not return immediately since that leaves a locked lock
NOT BUG:Change des_old.c to use types prefixed with _ossl_old_des_
BUG:fix spacing
NOT BUG:Add more curves Submitted by: Nils Larsch
NOT BUG:Remove unnecessary 'const'
NOT BUG:ENGINE module additions
NOT BUG:Add "init" command to control ENGINE initialization
NOT BUG:Call ENGINE_finish on initialized ENGINEs on exit
NOT BUG:Reorder shutdown in apps.c: modules should be shut down first
NOT BUG:Add test private key loader to openssl ENGINE: this just loads a private key in PEM format
NOT BUG:Fix print format for dh length parameter
NOT BUG:add SECG OIDs
NOT BUG:Submitted by: Nils Larsch
NOT BUG:reference counting for EC_GROUP structures is not needed (at the moment at least) so remove it
NOT BUG:OpenSSL currently fails on certain pure 64-bit architectures This is a showstopper
NOT BUG:Rephrase statement on the security of two-key 3DES
BUG:[Chosen plaintext attack: R Merkle M Hellman: "On the Security of Multiple Encryption" CACM 24 (1981) pp 465-467 p 776
NOT BUG:Known plaintext angriff: P.C van Oorschot M Wiener: "A known-plaintext attack on two-key triple encryption" EUROCRYPT '90.]
BUG:fix 'ecdsaparam -C'
NOT BUG:fix printf call
NOT BUG:typo
BUG:fix 'ecdsaparam -C' output
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Make sure the type accessed by the LONG and ZLONG ASN1 type is really a long to avoid problems on platforms where sizeof(int) != sizeof(long)
NOT BUG:more X9.62 OIDs
NOT BUG:Submitted by: Nils Larsch <nla@trustcenter.de>
NOT BUG:disable '#ifdef DEBUG' code
NOT BUG:Provide a pre 0.9.7 compatibility mapping if OPENSSL_DES_PRE_0_9_7_COMPATIBILITY is defined NOT AT ALL TESTED YET! Add a comment as to the libdes compatibility
NOT BUG:New configuration targets for OpenBSD handed to me by Bob Beck <beck@openbsd.org>
NOT BUG:'#if OPENSSL_VERSION_NUMBER >= ...' to document the recent change
NOT BUG:Typo In DCL the continuation character is a dash at the end of the line which I forgot when spliting one
BUG:Rename des_SPtrans to DES_SPtrans to differentiate from libdes and avoid certain linkage clashes
NOT BUG:Make it so one can select tests from within the test directory
NOT BUG:Fix warnings about signed/unsigned mismatch and global shadowing (random index) in hw_4758_cca.c
NOT BUG:This change was only made in 0.9.7-stable Synchronise
NOT BUG:Remove the perl/ subdirectory It hasn't been worked on for ages is very broken and there are working modules in CPAN which makes our module even more moot
NOT BUG:make update
NOT BUG:use ERR_peek_last_error() instead of ERR_peek_error()
NOT BUG:use ERR_peek_last_error() instead of ERR_peek_error() to ignore any other errors that may be left in the error queue
NOT BUG:Submitted by: Jeffrey Altman
BUG:VMS addaptation including a few more long names that needed hacking
NOT BUG:Make sure aep_close_connection() is declared and has a prototype that's consistent with the rest of the AEP functions
NOT BUG:Increase internal security when using strncpy by making sure the resulting string is NUL-terminated
NOT BUG:Updated AEP engine submitted by Diarmuid O'Neill <Diarmuid.ONeill@aep.ie>
NOT BUG:Document the added modes for AES
NOT BUG:Add 'void *' argument to app_verify_callback
BUG:Submitted by: D K Smetters <smetters@parc.xerox.com> Reviewed by: Bodo Moeller
NOT BUG:disable '#ifdef DEBUG' sections
BUG:This adds a new ENGINE to support IBM 4758 cards contributed by Maurice Gittens
BUG:Fix the fix (Yoram Zahavi)..
BUG:SSL_clear != SSL_free/SSL_new
NOT BUG:Make sure to remove bad sessions in SSL_clear() (found by Yoram Zahavi)
NOT BUG:Always init ctx_tmp in PKCS7_dataFinal since it is always cleaned up
NOT BUG:make update after moving around symbols in libeay.num to match 0.9.7-stable
NOT BUG:Fix new -aes command argument handling
NOT BUG:Make the engine config module always add dynamic ENGINEs to the list using dynamic_path This stops ENGINEs which don't supply any default algorithms being automatically freed (because they have no references) and allows them to be accessed by id
NOT BUG:Alternative dynamic loading behaviour can be achieved by issuing the dynamic ENGINE ctrls separately in the config file
NOT BUG:Updates from stable branch
NOT BUG:New OPENSSL_LOAD_CONF define to load openssl.cnf when OpenSSL_add_all_algorithms() is called
NOT BUG:Fix for AIX
NOT BUG:Submitted by Dawn Whiteside <dwhitesi@tiercel.uwaterloo.ca>
BUG:non-Monolith fixes
NOT BUG:Submitted by Andrew W Gray <agray@iconsinc.com>
NOT BUG:make errors
NOT BUG:Update from stable branch
NOT BUG:Config code updates
NOT BUG:CONF_modules_unload() now calls CONF_modules_finish() automatically
NOT BUG:Default use of section openssl_conf moved to CONF_modules_load()
NOT BUG:Load config file in several openssl utilities
NOT BUG:Most utilities now load modules from the config file though in a few (such as version) this isn't done because it couldn't be used for anything
NOT BUG:In the case of ca and req the config file used is the same as the utility itself: that is the -config command line option can be used to specify an alternative file
NOT BUG:We have AES support in openssl speed
NOT BUG:disable '#ifdef DEBUG' sections
NOT BUG:Config file updates from stable branch
NOT BUG:Add AES support in the applications that support -des and -des3
NOT BUG:Add comfy aliases for AES in CBC mode
NOT BUG:Stop assuming the IV is 8 bytes long use the real size instead This is especially important for AES that has a 16 bytes IV
NOT BUG:Including openssl/e_os.h in the OpenSSL 0.9.6 branch is legal since it's exported Changing that is a BIG step which has been done in 0.9.7-dev
NOT BUG:gcc figures that the format specifier %2x means unsigned int so let's make n unsigned
NOT BUG:Instead of casting a lvalue let's constify meth
NOT BUG:Update the status on 64-bit thingy
BUG:simplifications
NOT BUG:Submitted by: Nils Larsch
NOT BUG:typo
NOT BUG:Add reports on checked 64-bit platforms and make space to add platforms that need to be checked
NOT BUG:With Compaq make it seems like # inside an action becomes part of the command not a comment at all
NOT BUG:Instead of just checking for OpenVMS check if DEC C is used since it's as picky on all platforms
NOT BUG:bugfix: allocate sufficiently large buffer
NOT BUG:Submitted by: Nils Larsch
NOT BUG:Comparing a pointer (data) with 0 using > is incorrect The changed comparison doesn't look right but at least it compiles It would be nice if the one who knows what this is supposed to do changed it to do it correctly
NOT BUG:With Compaq make it seems like # inside an action becomes part of the command not a comment at all
NOT BUG:Don't shadow already defined variables
NOT BUG:make update
NOT BUG:A rough little self-test for tunala This runs through all cipher-suite / SSL/TLS version combinations looking for mishaps
NOT BUG:Make the "ungunk" logic a little more robust
BUG:- Add support for cipher suites that require a temporary RSA key for key-agreement - Tolerate signal interruptions of select()
NOT BUG:Oh and since config figures out that we run Cygwin and what versions let's recommend running config instead of a manual Configure
NOT BUG:Since Cygwin is the proper spelling let's change to that everywhere Also with the change in Configure it now knows on it's own if threads are supported or not
NOT BUG:Cygwin target name has been changed!
NOT BUG:The AES modes OFB and CFB are defined with 128 feedback bits This deviates from the "standard" 64 bits of feedback that all other algorithms are using Therefore let's redo certain EVP macros to accept different amounts of feedback bits for these modes
NOT BUG:Also change e_aes.c to provide all usually available modes for AES CTR isn't included yet
NOT BUG:Add the modes OFB128 CFB128 and CTR128 to AES Submitted by Stephen Sprunk <stephen@sprunk.org>
NOT BUG:Adjust the NID names for the AES modes OFB and CFB to contain the number of feedback bits
NOT BUG:The macro IMPLEMENT_ASN1_FUNCTIONS_const already contains an ending ; so do not add one after the expansion since ANSI C doesn't allow ;; at this level (or at least so tells me gcc)
BUG:Local `time' shadows the global function `time()' Rename the local variable to `tim' (and as a matter of consequence `time_d' to `tim_d')
NOT BUG:Missing #endif
NOT BUG:gcc chokes on C++ comments in C code
NOT BUG:Give the linux-sparv9 target shared capability Submitted by Ian Marsh <mushypea@dominion.net.uk>
NOT BUG:Even though it is not really practical people should know about it
NOT BUG:fix indentation
NOT BUG:Add the configuration target VxWorks
NOT BUG:make it possible to disable memory checking for timings
NOT BUG:'-C' is still quite broken
NOT BUG:fix '-C'
NOT BUG:fix memory leak
NOT BUG:move ECDSA test right after EC test
NOT BUG:don't call OPENSSL_config() this does not make any sense during "make test"
NOT BUG:Make sure memset() is defined by including string.h Notified by Oscar Jacobsson <oscar@jacobsson.org>
NOT BUG:For some reason getting the topmost error was done the same way as getting the bottommost one I hope I understood correctly how this should be done It seems to work when running evp_test in an environment where it can't find openssl.cnf
NOT BUG:make update with libeay.num remade to match the 0.9.7-stable one
NOT BUG:The Cygwin shared extension was shifted
NOT BUG:At Corinna Vinschen's request change CygWin32 to Cygwin
NOT BUG:EC_GROUP_get_group_by_name() is now called EC_GROUP_new_by_name()
NOT BUG:Fix warnings
NOT BUG:Correct sh please
NOT BUG:ECDSA support
NOT BUG:Submitted by: Nils Larsch <nla@trustcenter.de>
NOT BUG:some modifications to named curve support
NOT BUG:Modify the main trunk version to 0.9.8-dev 0.9.7 now lives in the branch OpenSSL_0_9_7-stable
NOT BUG:new locks
NOT BUG:add support for named curves
NOT BUG:Submitted by: Nils Larsch <nla@trustcenter.de>
NOT BUG:Update the configuration of CygWin32 to use the new capabilities of CygWin 1.3.x which includes thread and shared library support
NOT BUG:Submitted by Corinna Vinschen <vinschen@redhat.com> and modified a little bit
BUG:We should implement a countermeasure against the predictable-IV CBC weakness in SSL/TLS
BUG:Move teh silencer to the right place
NOT BUG:Make link-shard a little bit more efficient If there are no extensions to link together there's no point looping at all
NOT BUG:Make removal from session cache more robust
NOT BUG:add a wish
NOT BUG:Do not store unneeded data
BUG:Add notes on the added support for aep and sureware crypto cards in 0.9.7
NOT BUG:Remove an unused variable
BUG:Oops do not unlock CRYPTO_LOCK_DYNLOCK when we locked CRYPTO_LOCK_RAND..
BUG:I forgot to include the aep and sureware vendor header files
NOT BUG:Because AEP and we used the same AEP_R_ prefix for error reasons lets change our prefix to AEPHK_R_ Otherwise we get very mysterious errors because we happen to redefine AEP_R_OK and AEP_R_GENERAL_ERROR
NOT BUG:Add aep and sureware implementations and clean up some error reasons that were never part of the engine framework
NOT BUG:The aep and sureware implementations are taken directly from 0.9.6c [engine] and have been modified to fit the newer engine framework and to be possible to build shared libraries of
NOT BUG:The aep implementation has gone through quite a bunch of tests and is cleaned up (there were some misunderstandings in it about how to use locks)
NOT BUG:The sureware hasn't been tested at all in this incarnation and is basically a quick hack to get it to compile properly
NOT BUG:Certain reasons aren't really part of the engine framework so let's make them ubsec-specific in the ubsec implementation
NOT BUG:Generate the individual engines' error strings and macros automatically
NOT BUG:If the intended header file doesn't exist create it
NOT BUG:'make update'
NOT BUG:With the changed des_old API let's complete the work by renaming the functions in ui_compat This gave reason to rework that part more thoroughly so here are the changes made:
NOT BUG:1 Add DES_read_password() and DES_read_2passwords() with the same functionality as the corresponding old des_ functions as a convenience to the users 2 Add UI_UTIL_read_pw_string() and UI_UTIL_read_pw() with the functionality from des_read_pw_string() and des_read_pw() again as a concenience to the users 3 Rename des_read_password() des_read_2passwords() des_read_pw_string() and des_read_pw() by changing des_ to _ossl_old_des_ and add the usual mapping macros 4 Move the implementation of des_read_password() and des_read_2passwords() to the des directory since they are tightly tied to DES anyway
BUG:This change was inspired by a patch from Assar Westerlund <assar@sics.se>:
NOT BUG:There are some functions that didn't get the kick-away-old-des-and- replace-des-with-DES action Here's a patch that adds DES_ and des_ (in des_old.h) versions of des_read_pw_string et al This patch includes some of the first des_old.h semi-colon macro fixes that I've already sent
BUG:Apply one patch from Assar Westerlund <assar@sics.se>:
NOT BUG:The following patch makes sure that string2key does not use weak DES keys (then making them non-weak by xor:ing with 0xF0)
BUG:Apply three patches from Assar Westerlund <assar@kth.se>:
NOT BUG:This patch makes the macros in des_old.h actually pretend to be functions
NOT BUG:There's no reason not to define _ossl_old_crypt when using PERL5/FreeBSD/darwin/Next since it makes using crypt and including des.h break Here's a trivial patch
NOT BUG:This patch fixes some of the typos used in macro names in des_old.h and the number of arguments for some of them
NOT BUG:ASN1_BIT_STRING_set_bit() didn't clear previously set bits
NOT BUG:#undef some things that cause a conflict under Win32 when wincrypt.h is included
NOT BUG:Shut up compiler warnings for inconsistent declarations
NOT BUG:HP-UX 32bit: * When linking against shared libraries the absolute path is remembered - When linking against -L.. '..' is remembered inside the executable so it will fail after "make install" or when not called from inside the "apps/" subdirectory of the build tree - When using the "+cdp" option of "ld" the ".." information can be exchanged against $(INSTALL_TOP)/lib In this case the executable will however refuse to work before "make install" has been called This makes testing the 'openssl' executable a problem * Solution 1: Relink the "openssl" executable when "make install" is called This would however require significant changes to the toplevel Makefile and the apps/ Makefile * Solution 2: Statically link against libssl and libcrypto so that the "openssl" executable is no longer dependant on the openssl shared libraries
NOT BUG:Select option 2 for HP-UX 32bit as this requires the smallest change
NOT BUG:Make SHLIB_TARGET available in subdirs (here: apps/)
BUG:Apply patch from Toomas Kiisk <vix@cyber.ee> and complete it
BUG:Superflous '\' messes up with HP-UX make
NOT BUG:Undo previous change X509_check_issued() was correct [See Message-ID: <3BB07999.30432AD2@celocom.com> From: Dr S N Henson <drh@celocom.com> To: openssl-dev@openssl.org Subject: Re: Error in v3_purp.c ]
NOT BUG:Spelling correction
NOT BUG:Correct the number of colons for the targets aix43-cc aix43-gcc alpha-cc alpha-cc-rpath alpha-gcc alpha164-cc and alphaold-cc
NOT BUG:Detect one-step shifts of the dso_scheme
NOT BUG:I got some reports that some targets have weird dso_schemes Therefore I've added a sanity checker
NOT BUG:Note that it can be combined with almost any other argument (the other arguments will be completely ignored) with "reconf" as the blatant exception since it also has the behavior of ignoring all following command line arguments If --test-sanity and reconf are both used on the command line the first one wins
NOT BUG:Remove blanks at begin of empty lines irritating epv_test.c
NOT BUG:Update SCO5 targets
NOT BUG:Apply a small patch from Dan Lanz <lanz@zolera.com> to get shared libraries with debug-linux-elf
NOT BUG:Apply a small patch from Oscar Jacobsson <oscar@jacobsson.org> that makes things more compilable with VC++
NOT BUG:It looks like I didn't remove everything that has to do with the non-existant aestest.c
NOT BUG:Apply a small patch from Diego R Lopez <diego.lopez@rediris.es> making X509_check_issued() properly match an issuer that's found in a Authority Key Identifier
NOT BUG:GCC uses __i386__
BUG:Add old patch from Robert Dahlem <Robert.Dahlem@ffm2.siemens.de> to make it possible to produce shared libraries on ReliantUNIX
NOT BUG:I got a request to make the "old des" symbols more closely tied to OpenSSL Adding '_ossl' in the name seems to be a good way to do this
NOT BUG:Apply Neale Ferguson's patch to add a configuration target for linux-s390x
BUG:Apply the following changes by Toomas Kiisk <vix@cyber.ee>:
NOT BUG:* make openssl rsa work with -engine chil * misc changes including debug-linux-ppro Configure target and FORMAT_NETSCAPE-aware load_{,pub}key()
NOT BUG:This completes the application of his changes
BUG:Apply a change by Toomas Kiisk <vix@cyber.ee>:
NOT BUG:* Fix a crashbug and a logic bug in hwcrhk_load_pubkey()
NOT BUG:I must learn to compile before I commit..
NOT BUG:Document the change in rsautl
NOT BUG:Add -keyform Document -engine
NOT BUG:There is no aestest currently The EVP tester is used to check the AES algorithm
NOT BUG:The 'type' parameter an EVP_MD pointer represents the type of digest required as well as a default implementation (when no ENGINE provides a replacement implementation) This change makes sure the correct implementation's "init()" handler is used rather than assuming 'type'
NOT BUG:Keep the NIST AES vectors that were there previously
NOT BUG:sort functions ..
NOT BUG:fix formatting of automatically generated error section
NOT BUG:New functions ERR_peek_last_error ERR_peek_last_error_line ERR_peek_last_error_line_data (supersedes ERR_peek_top_error)
NOT BUG:Rename OPENSSL_NO_OLD_DES_SUPPORT into OPENSSL_DISABLE_OLD_DES_SUPPORT because OPENSSL_NO_.. indicates disabled algorithms (according to mkdef.pl)
NOT BUG:Reword CHANGES entry for _old_des_... as it was a little complicated syntactically
NOT BUG:make update libeay.num got tweaked so the old des symbols would retain their positions
NOT BUG:Because of recent changes there's no need to hack the des symbols any more
NOT BUG:To avoid all kinds of link-level clashes rename all old des_* functions to _old_des_*
NOT BUG:To avoid all kinds of link-level clashes rename all old des_* functions to _old_des_*
NOT BUG:Document the current behaviour of the DES interface
NOT BUG:Support old DES APIs by default
NOT BUG:Make no config file not an error Move /dev/crypto config to ctrl
NOT BUG:Constification
NOT BUG:default_algorithms option in ENGINE config
NOT BUG:Typos (jsyn <jsyn@openbsd.org>)
BUG:Fix incorrect BIO_*_ctrl() macros (Shay Harding <sharding@ccbill.com>)
BUG:Use FIPS-197 vectors for AES The NIST vectors were constructed by reencrypting or redecrypting the ciphertext 10000 times which of course gives higly different results
NOT BUG:Add more of the NIST test vectors for AES
NOT BUG:For some reason they give incorrect results with the OpenSSL implementation I wonder why..
NOT BUG:Bring VMS up to date with development
NOT BUG:Initial ENGINE config module docs to follow
NOT BUG:Fix buffer overrun errors in OPENSSL_conf()
NOT BUG:Constification add config to /dev/crypto
NOT BUG:disable broken code
NOT BUG:Other errors are possible
NOT BUG:Stupid apps should die not fail silently
NOT BUG:Fix memory leak
NOT BUG:Constification missing declaration update dependencies
NOT BUG:Correct for the recent prototype changes
NOT BUG:*** empty log message ***
NOT BUG:Produce less confusing statistics when "-out_totals" is used
NOT BUG:The sample certs had expired so these are newer ones that should last quite a bit longer
NOT BUG:run test_evp before test_ssl
NOT BUG:Bugfix: In ssl3_accept don't use a local variable 'got_new_session' to indicate that a real handshake is taking place (the value will be lost during multiple invocations) Set s->new_session to 2 instead
NOT BUG:Return -1 from ssl3_get_server_done (ssl3/s3_clnt.c) if the SSL_R_LENGTH_MISMATCH error is detected
NOT BUG:Prototype info function
NOT BUG:Add client_cert_cb prototype
NOT BUG:Return value could be undefined
NOT BUG:- Network errors could pollute the buffers because -1 isn't noticed in an "unsigned int" - Remove redundant processing with machine->ssl is NULL - Remove compiler warnings about uninitialised 'ctx' (it's not used uninitialised but gcc can't see that)
BUG:Patches to make OpenSSL compilable on MacOS/X Submitted by Pier Fumagalli <pier@betaversion.org>
NOT BUG:- libtool finally annoyed me too much so I'm nuking it - tidy up some output - print a warning when running an SSL server with no cert - only log each connect/disconnect if the new "-out_conns" switch is used
NOT BUG:- Add the same header stuff to aes_locl.h as is in des_locl.h to avoid undefined functions (memset etc) - Put a .cvsignore in the aes directory too
NOT BUG:Experimental configuration code
NOT BUG:Incomplete largely untested and subject to change/deletion
BUG:add a sentence previously deleted by accident
NOT BUG:add documentation for SSLeay_version(SSLEAY_DIR) and 'openssl version -d'
NOT BUG:use some descriptions from Lutz' redundant manual page instead of the previous ones
NOT BUG:Tsss SSLeay_version() was already documented it just was not linked in
NOT BUG:synchronize with engine-0.9.6 tree
NOT BUG:Add information as provided by Richard Levitte on openssl-users :-)
NOT BUG:Update PEM docs
NOT BUG:fix 'Configure TABLE' output
NOT BUG:Changes that break something should be included in CHANGES to make it easier to fix things
NOT BUG:add automatically generated ERR_load_.. prototype
NOT BUG:fix EVP_CIPHER_mode macro
BUG:Submitted by: "Dan S Camper" <dan@bti.net>
NOT BUG:Constify
NOT BUG:Better clarification on perl
NOT BUG:make update
NOT BUG:Implement speed measurement for AES Submitted by Stephen Sprunk <stephen@sprunk.org> as part of his AES integration patch
NOT BUG:Because Rijndael is more known as AES use crypto/aes instead of crypto/rijndael Additionally I applied the AES integration patch from Stephen Sprunk <stephen@sprunk.org> and fiddled it to work properly with the normal EVP constructs (and incidently work the same way as all other symmetric cipher implementations)
NOT BUG:This results in an API that looks a lot like the rest of the OpenSSL cipher suite
NOT BUG:The block size may be something other than 8!
NOT BUG:When RSA or DSA are disabled do not include the stuff that's specific to them
NOT BUG:make update
NOT BUG:RSA counter should only be defined of RSA is available
NOT BUG:Allow verification of other types than DATA Submitted by Leonard Janke <leonard@votehere.net>
NOT BUG:Say that recent CygWin perl versions work as well Submitted by Eric Hanchrow <erich@votehere.net>
NOT BUG:Allow 8-bit characters This is not really complete it only marks characters with the highest bit set as HIGHBIT We need to expand this to support the UTF-8 character set properly However this solves the problem that the character 0x80 (which is common in UTF-8) gets masked to 0x00 Patch submitted by "Huang Yuzhen" <huangyuzhen@bj.tom.com>
NOT BUG:On Solaris64 cc needs the flag -xarch=v9 when linking shared libraries Make a general change to support shared library linking flags in general Noted by Nick Briggs <briggs@parc.xerox.com>
BUG:Add support for Linux on HP/PA Submitted by "Bryan W Headley" <bheadley@interaccess.com>
NOT BUG:ssl3_read_bytes bug fix
NOT BUG:Submitted by: D P Chang <dpc@qualys.com> Reviewed by: Bodo
NOT BUG:update FAQ and CHANGES file (0.9.6c has been released)
NOT BUG:Status update
NOT BUG:And just for the sake of completeness let's add some standard macros..
NOT BUG:Better use the same number in all branches to avoid confusion
NOT BUG:Do not forget to compile comp_err.c
NOT BUG:Synchronise with the 0.9.6 branch
NOT BUG:Security fix
NOT BUG:Cygwin patch Submitted by Michael Kobar <mkobar@lymeware.com>
NOT BUG:formatting consistency
NOT BUG:oops
NOT BUG:remove redundant ERR_load_.. declarations
NOT BUG:consistency with 0.9.6 stable "CHANGES"
NOT BUG:fix BN_rand_range
NOT BUG:Change pkcs12 so the certificates coming from -in do not get tossed if -certfile is given as well
BUG:Implement failover for ubsec Submitted by Subramanian Ramamoorthy <sram@broadcom.com> with the following comment:
NOT BUG:[...] We have implemented failover (ie if for some reason that the hardware fails the implementation detects this failure and performs this operation as if no hardware is present ie in software) for sometime now and have tested it here with our hardware [...]
NOT BUG:This change was cc:ed to exports@crypto.com
NOT BUG:make update
NOT BUG:name confusion with HP library function prototype (?)
NOT BUG:Improve back compatibility
NOT BUG:fix warnings (one of them was clearly justified)
NOT BUG:Don't overwrite signing time
NOT BUG:HPUX 9.X on m68k with gcc ("Anton J Gamel" <gamel@anna.anatomie.uni-freiburg.de>)
NOT BUG:UID was never a lable for uniqueIdentifier However LDAP and certain RFCs concerning X.500 directories use UID as a shorter name for the attribute type userId which is defined by CCITT and available through RFCs 1274 and 2247
NOT BUG:Unfortunately if some applications have used the name "UID" for the uniqueIdentifier attribute type they will produce incorrect results However I found it better to follow the standards that are out there rather than having our own incompatible one
NOT BUG:I was recently informed that some people wrongly use ssleay.txt as main documentation so let's warn them a little more so the word "OBSOLETE" really gets understood
NOT BUG:crypto/objects stuff
NOT BUG:Fix: 2.5.29 is "id-ce" not "ld-ce" (sort of a typo in objects.h)
NOT BUG:Fix (?): Delete 'ip-pda 6' (id-pda-pseudonym) because it does not exist in RFC 3039
NOT BUG:Also change Perl scripts to put auto-generation warning in the first lines of the file
NOT BUG:EVP_BytesToKey documentation
NOT BUG:Make EVP_SealInit() return the correct value
NOT BUG:Add -pubkey option to req command
NOT BUG:NO_DSA NO_RSA patches
BUG:Support for QNX (wrat@jump.net (the wharf rat))
NOT BUG:Certain missing algorithms make some SSL versions or TLS impossible to build
NOT BUG:discuss -name and default_ca more correctly (I hope)
NOT BUG:This looks to have been a typo
NOT BUG:For future portability reasons MIT is moving all macros to function calls This patch allows compilation either way
NOT BUG:Submitted by: Jeffrey Altman <jaltman@columbia.edu>
NOT BUG:info on 0.9.6 engine branch
NOT BUG:fix submitted by Andy Schneider <andy.schneider@bjss.co.uk> (in main branch hn_ncipher.c is already correct)
NOT BUG:check OPENSSL_NO_.. before including header files that might be disabled
BUG:OS/390 support
NOT BUG:Submitted by: Richard Shapiro <rshapiro@abinitio.com>
NOT BUG:comment
BUG:Cut "ENGINE_ID" to the more concise "ID"
NOT BUG:In this particular error condition the structural reference wasn't being released
NOT BUG:When the "dynamic" ENGINE loads another ENGINE from a shared-library it essentially overwrites itself with the new ENGINE with the exception of reference counts ex_data structures and other 'admin' elements However if the new ENGINE doesn't populate certain elements there's the risk of the "dynamic" ENGINE's elements showing through - the "cmd_defns" were just one of the possibilities This implements a more comprehensive cleanup
NOT BUG:The "openssl" ENGINE is no longer used except as a testing/debugging device This change enables it for building as a self-contained "dynamic" ENGINE to help testing such mechanisms
NOT BUG:'flags' should only be set inside DSO_load() if constructing a new DSO object - otherwise we overwrite any flags that had been previously set in the DSO before calling DSO_load()
NOT BUG:Extentions of the explanations to the linking problem on Win32 Provided by Andrew Gray <agray@iconsinc.com>
BUG:Clarify reference count handling/removal of session (shinagawa@star.zko.dec.com)
NOT BUG:On VMS the norm is still that symbols are uppercased so for now it's better to trust that norm I might implement a control for this later on
NOT BUG:wNAFs use does not bring that much performance on Sparcs (where elliptic curves are are relatively faster than on PCs anyway)
NOT BUG:avoid stupid compiler warning
NOT BUG:Build dynamic rsaref engine on VMS Tested on VAX so far
NOT BUG:End assembler macro correctly
NOT BUG:On VAX all global variables are accessed through functions so skip doing transfer entries for variables
BUG:Forgot the looping gotos
NOT BUG:On systems that don't do too well including headers from a different directory trust the building scripts to handle it properly
NOT BUG:Make sure evp_locl.h can be included (hw_openbsd_dev_crypto.c needs that)
NOT BUG:comment
NOT BUG:use a more interesting test case
NOT BUG:comments etc
NOT BUG:Improve EC efficiency
NOT BUG:A missing comma added
NOT BUG:make update
NOT BUG:Add MD digests
NOT BUG:And this finishes this engine it now offers all ciphers and digests that RSAref 2.0 has
NOT BUG:Make it possible to give digest names as -evp arguments
NOT BUG:Add DES functions Restructure the code and comment it a bit Prepare for the presence of digests
NOT BUG:If an engine isn't built in try loading it as a shareable library instead This also makes it possible for users to simply give said shareable library as argument for the -engine option
NOT BUG:At least for the two common Unixly DSO loading methods include the system error in the error text
NOT BUG:Use the generated error code files
NOT BUG:'make update' + some touches
NOT BUG:Add targets to update the error code files
NOT BUG:Add a local error code configuration file for the rsaref dynamic engine
NOT BUG:Make it possible to build completely static independent error C files
NOT BUG:make update perl util/mkerr.pl -recurse -write -rebuild
NOT BUG:Make use of RSAref's header files instead of EAY's crafted rsaref.h
NOT BUG:In a Debian Linux environment it's not a good idea apparently to manually declare the include directory /usr/include at the same time as the macro PROTOTYPES is defined with the value 1 Besides /usr/include is the standard include directory anyway so there's no need to specify it explicitely
NOT BUG:Add a demo that reimplements the RSAref glue in form of a dynamically loadable engine
NOT BUG:After loading a dynamic engine reset the command definitions to the empty set This prevents engines that do not set the command definitions themselves to inherit the ones from "dynamic" which would otherwise be very confusing
NOT BUG:Change the order of events so the capabilities of loaded engines can get listed as well
NOT BUG:remove obsolete entry
NOT BUG:cast to unsigned int not to int to avoid the warning -- all these values really are unsigned
NOT BUG:consistency between main branch and stable branch
NOT BUG:Implement STARTTLS for certain protocols currently only supporting SMTP
NOT BUG:Remove temporary files
NOT BUG:unsigned int vs int
NOT BUG:Exclude .out files
NOT BUG:synchronise with 0.9.6 stable branch
BUG:information on 0.9.6c-engine
NOT BUG:Phew finished Submitted by: Reviewed by: PR:
BUG:I've still got one left; the backport of the Broadcom UBSEC driver to 0.9.6 that we've got - just waiting for clearance on that one Submitted by: Reviewed by: PR:
NOT BUG:Add unixware-7-gcc as in 0.9.6 branch (except that we need a 'sys_id' field here which is left empty)
NOT BUG:Various configurations are *only* in the 0.9.6 branch at the moment: OpenUNIX OpenUNIX-8-gcc-shared OpenUNIX-8-shared Either Configure or CHANGES must be changed to rectify the situation
NOT BUG:the PRNG race conditions were mostly a theoretical issue remove from NEWS
NOT BUG:add changes between OpenSSL 0.9.6b and OpenSSL 0.9.6c
NOT BUG:Add an FAQ
NOT BUG:Order chronologically: move entry for recent s2_clnt.c/s2_srvr.c fixes (nearly) to the top
NOT BUG:Move msg_callback entry to the top as the implementation for SSL 2.0 is based on the s2_clnt.c/s2_srvr.c changes
NOT BUG:make code a little more similar to what it looked like before the fixes call ssl2_part_read again to parse error message
NOT BUG:remove incorrect 'callback' prototype
NOT BUG:msg_callback documentation
NOT BUG:more output for SSL 2.0 in our msg_callback
NOT BUG:Implement msg_callback for SSL 2.0
NOT BUG:Important SSL 2.0 bugfixes (bugs found while implementing msg_callback)
BUG:2001 not 2000
NOT BUG:adjust to OpenSSL_0_9_6-stable version
NOT BUG:cast to 'unsigned long' before using ~ if we need an unsigned long result
NOT BUG:Submitted by: "Stefan Marxen" <stefan.marxen@gmx.net>
NOT BUG:clarify
NOT BUG:Don't define _REENTRANT here in e_os.h On systems where we need _REENTRANT if threads support is enabled the ./Configure entry must define it so that it ends up in CFLAG
NOT BUG:PKCS#12 code fixes: initialize and cleanup digests and ciphers properly
NOT BUG:Win32 fixes
NOT BUG:des_old.h doesn't really need to include des.h so don't That will avoid clashes with other code that have their own DES_ functions but really only use OpenSSL's old des_ functions
NOT BUG:Fix email address delete code
NOT BUG:Place the OpenSSL-specific headers back so they always get included or we get a dependency war in Makefile.ssl
NOT BUG:No need to include anything on systems that do not have /dev/crypt
NOT BUG:DOS and Windows do not like unistd.h
NOT BUG:If verify fails say why
NOT BUG:Change the shared library support so the shared libraries get built sooner and the programs get built against the shared libraries
NOT BUG:This requires a bit more work Things like -rpath and the possibility to still link the programs statically should be included Some cleanup is also needed This will be worked on
NOT BUG:Addapt VMS scripts to the newer disk layout system ODS-5 which allows more than one period and mixed size characters in file names
NOT BUG:Another noemailDN fix
BUG:Allow ca to certify requests containing BMPStrings and UTF8Strings
NOT BUG:Bugfixes for noemailDN option Make it use the correct name (instead of NULL) if nomailDN is not set fix memory leaks and retain DN structure when deleting emailAddress
NOT BUG:Stop compiler warnings
NOT BUG:Add support for Subject Info Acess extension
NOT BUG:Note BUF_MEM_grow() consistency fix
NOT BUG:Consistency fix in BUF_MEM_grow: Initialise to zero when new memory had to be allocated not just when reusing the existing buffer
NOT BUG:disable caching in BIO_gethostbyname
NOT BUG:New options to allow req to accept UTF8 strings as input
NOT BUG:remove compatibility notes that no longer apply
NOT BUG:Correct some links..
NOT BUG:Change the DES documentation to reflect the current status Note that some password reading functions are really part of the UI compatibility library..
NOT BUG:Make sure openssl speed is compilable on systems where fork() doesn't exist For now that's all the ones we "support" except Unix
NOT BUG:Add paralellism to speed - note that this currently causes a weird memory leak
NOT BUG:Fix warning
NOT BUG:Like MD_Init MD now must include a NULL engine pointer in its definition
NOT BUG:remove redundant definitions that are also in des.h
NOT BUG:mention des_old.h
NOT BUG:Add '-noemailDN' option to 'openssl ca' This prevents inclusion of the e-mail address in the DN (i.e. it will go into a certificate extension only) The new configuration file option 'email_in_dn = no' has the same effect
NOT BUG:Submitted by: Massimiliano Pala madwolf@openca.org
NOT BUG:filenames are des_old.[ch] not des.comp*
NOT BUG:Consistency with s2_.. and s23_.. variants (no real functional change)
NOT BUG:Remove DES_random_seed() but retain des_random_seed() for now Change the docs to reflect this change and correct libeay.num
NOT BUG:Assume TLS 1.0 when ClientHello fragment is too short
NOT BUG:Have the removal warnings very high up in the source
NOT BUG:A C file is a C file is a C file!
NOT BUG:Due to an increasing number of clashes between modern OpenSSL and libdes (which is still used out there) or other des implementations the OpenSSL DES functions are renamed to begin with DES_ instead of des_ Compatibility routines are provided and declared by including openssl/des_old.h Those declarations are the same as were in des.h when the OpenSSL project started which is exactly how libdes looked at that time and hopefully still looks today
NOT BUG:The compatibility functions will be removed in some future release at the latest in version 1.0
NOT BUG:Fix SSL handshake functions and SSL_clear() such that SSL_clear() never resets s->method to s->ctx->method when called from within one of the SSL handshake functions
NOT BUG:Deprecate the macro MAC_OS_pre_X
NOT BUG:make update
NOT BUG:make update
NOT BUG:Correction of the id-pda OID's Submitted by Frederic.Giudicelli@INTRINsec.com
NOT BUG:Sanitize CHANGES entry
NOT BUG:Fix memory leak
NOT BUG:Reject certificates with unhandled critical extensions
NOT BUG:Stop spurious "unable to load config info" errors in req
NOT BUG:Call msg_callback with correct length parameter if ssl3_write_bytes had to be called multiple times
NOT BUG:New functions SSL[_CTX]_set_msg_callback() New macros SSL[_CTX]_set_msg_callback_arg()
NOT BUG:Message callback imlementation for SSL 3.0/TLS 1.0 (no SSL 2.0 yet)
NOT BUG:New '-msg' option for 'openssl s_client' and 'openssl s_server' that enable a message callback that displays all protocol messages
NOT BUG:In ssl3_get_client_hello (ssl/s3_srvr.c) generate a fatal alert if client_version is smaller than the protocol version in use Also change ssl23_get_client_hello (ssl/s23_srvr.c) to select TLS 1.0 if the client demanded SSL 3.0 but only TLS 1.0 is enabled; then the client will at least see that alert
NOT BUG:Fix SSL[_CTX]_ctrl prototype (void * instead of char * for generic pointer)
NOT BUG:Add/update some OpenSSL copyright notices
NOT BUG:Typo
NOT BUG:Add missing EVP_CIPHER_CTX_{init,cleanup}
NOT BUG:gcc complained about "write" being shadowed even though the "write" variable name occured just in a function *prototype* -- so rename it
NOT BUG:Wrong place..
NOT BUG:The EVP_*Init_ex() functions take one extra argument Let's default it to NULL
NOT BUG:document SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
NOT BUG:Update docs
NOT BUG:Modify EVP cipher behaviour in a similar way to digests to retain compatibility
NOT BUG:Flush buffers to prevent mixed output (Adam Back <adam@cypherspace.org>)
NOT BUG:Add per-SSL 'msg_callback' with 'msg_callback_arg' Both have per-SSL_CTX defaults These new values can be set by calling SSL[_CTX]_[callback_]ctrl with codes SSL_CTRL_SET_MSG_CALLBACK and SSL_CTRL_SET_MSG_CALLBACK_ARG
NOT BUG:So far the callback is never actually called
NOT BUG:Also rearrange some SSL_CTX struct members (some exist just in SSL_CTXs others are defaults for SSLs and are either copied during SSL_new or used if the value in the SSL is not set; these three classes of members were not in a logical order) and add some missing assignments to SSL_dup
NOT BUG:Update docs
NOT BUG:Retain compatibility of EVP_DigestInit() and EVP_DigestFinal() with existing code
NOT BUG:Modify library to use digest *_ex() functions
NOT BUG:The message header for fake SSL 3.0/TLS 1.0 client hellos created from SSL 2.0 client hellos added with the previous commit was totally wrong -- it must start with the message type not the protocol version (Not that this particular header is actually used anywhere ...)
NOT BUG:For consistency set s->init_num in the 'reuse_message' case (if s23_srvr.c faked the message s->init_num is 0)
NOT BUG:Change ssl3_get_message and the functions using it so that complete 'Handshake' protocol structures are kept in memory including 'msg_type' and 'length'
NOT BUG:(This is in preparation of future support for callbacks that get to peek at handshake messages and the like.)
NOT BUG:make sure .rnd exists
NOT BUG:Fix ssl3_get_message handle message fragmentation correctly
NOT BUG:the previous commit accidentily removed 'ret = 1' from the SSL_ST_OK case of ssl3_accept
NOT BUG:openbsd-x86 macros
BUG:Submitted by: Toomas Kiisk <vix@cyber.ee>
NOT BUG:Update information as a partial response to the post From: "Chris D Peterson" <cpeterson@aventail.com> Subject: Implementation Issues with OpenSSL To: openssl-users@openssl.org The patch included in the original post may improve the internal session list handling (and is therefore worth a seperate investigation) No change to the list handling will however solve the problems of incorrect SSL_SESSION_free() calls The session list is only one possible point of failure dangling pointers would also occur for SSL object currently using the session The correct solution is to only use SSL_SESSION_free() when applicable!
NOT BUG:In certain cases no encoding has been set up for the b64 filter In such cases a flush should *not* attempt to finalise the encoding as the EVP_ENCODE_CTX structure will only be filled with garbage For the same reason do the same check when a wpending is performed
NOT BUG:'make update'
NOT BUG:Add support for md4WithRSAEncryption
NOT BUG:For systems where gcc is used and where we don't know if GNU ld is used or not let's ask collect2 which ld it uses and choose to use the target do-gnu_shared if GNU ld is used
NOT BUG:This solves the reported problems on Solaris systems where GNU cc is used but GNU ld isn't and probably on other systems with similar setups
NOT BUG:'make update'
NOT BUG:It seems like gcc does canonicalisation of file names More specifically a starting './' is removed makedepend doesn't do this resulting in another possible commit war so let's fix that by doing a poor mans canonicalisation of file names that gives the same effect as doing dependencies through gcc
NOT BUG:'make update'
NOT BUG:To avoid commit wars over dependencies let's make it so things that depend on the environment like the presence of the OpenBSD crypto device or of Kerberos do not change the dependencies within OpenSSL
NOT BUG:makedepend sometimes produces duplicates Remove them
BUG:A few more OIDs contributed by Peter Sylvester <Peter.Sylvester@EdelWeb.fr>
NOT BUG:evp_test.c and evptests.txt both need to be linked in the test/ directory however for different reasons This separation should prevent the win32 build from interpreting evptests.txt as source code
NOT BUG:Change some EVP prototypes to use "cipher" rather than "type" as a variable name The implementations already use this anyway
NOT BUG:EVP_EncryptInit_ex() and EVP_DecryptInit_ex() had been defined in evp.h but not implemented (Bug reported by Martin Szotkowski)
BUG:This also changes the non-"_ex" versions to defer directly to EVP_CipherInit_ex() rather than EVP_CipherInit() to avoid an unecessary level of indirection
NOT BUG:As ENGINE_load_openbsd_dev_crypto() is an API function it makes sense for it to be defined on all platforms whether or not it is of any practical use on them This also resolves linker problems on "special" platforms such as win32
NOT BUG:Make sure the "ENGINE_TABLE" cleanup callbacks have correct prototypes
NOT BUG:Missing pointer in the eng_table_register function Reported by Martin Szotkowski
NOT BUG:Small documentation fixes (Howard Lum <howard@pumpkin.canada.sun.com>)
NOT BUG:Copy evptests.txt to the right place
NOT BUG:Typo..
NOT BUG:SSL_add_dir_cert_subjects_to_stack for Win32 finally implemented Submitted by Massimo Santin <msantin@santineassociati.com>
NOT BUG:'make update'
NOT BUG:Since ossl_typ.h is an exported header we sure need to export it on VMS as well :-)
NOT BUG:Because there's chances we clash with the system's types.h rename our types.h to ossl_typ.h Also it seems like krb5 was forgotten in some places
NOT BUG:Because there's chances we clash with the system's types.h rename our types.h to ossl_typ.h
NOT BUG:Use the maximum block length for the extra size in the encrypt BIO buffer instead of hard coding it as 8
NOT BUG:Make EVP_DecryptUpdate work again
NOT BUG:sch isn't an array how did this pass through gcc?
NOT BUG:A lot of things are undeclared unless x509.h is included
NOT BUG:Hmm everything "open" isn't necessarely "openssl" :-) *sigh* habit..
BUG:Woopsie..
NOT BUG:'make update'
NOT BUG:sk_ENGINE_CLEANUP_ITEM_pop_free() is duplicated in ENGINE_cleanup() Let's use sk_ENGINE_CLEANUP_ITEM_pop_free() instead
NOT BUG:Addapt seldom compiled code to new semantics of the key schedule (not a pointer any more)
NOT BUG:Some new symbols have very long names..
NOT BUG:o_time.c contains symbols with dollar signs in them so we must tell the compiler not to warn about that
NOT BUG:The cleanup stack in ENGINE changed slightly so this "make update" is needed
NOT BUG:The STACK macros take care of casting to and from the designated item type of the stack and the (void *) type used in the underlying sk_*** functions However declaring a STACK_OF(type) where type is a *function* type implicitly involves casts between function pointers and data pointers That's a no-no This changes the ENGINE_CLEANUP handling to use a regular data type in the stack
NOT BUG:Make an (overdue) note about the recent ENGINE restructuring Apart from a few items however most of the details are deferred to the crypto/engine/README file
NOT BUG:Make "openssl engine -c" list any supported digests as well as supported ciphers
NOT BUG:Typos (Chris Pepper <pepper@mail.reppep.com>)
NOT BUG:Change HZ in speed to rely on sysconf() if the clock tick is available that way Synchronise s_time with these changes
NOT BUG:ENGINE_register_all_complete() will register all implementations of all algorithms present in all loaded ENGINEs The result is that if any of those ENGINEs successfully initialises and the ENGINE_TABLE_FLAG_NOINIT flag isn't set then they will always be used (and cached as defaults) in preference to software implementations Ie accidental auto-detection of acceleration hardware :-)
NOT BUG:This change stops all implementations being automatically registered in "openssl" sub-commands so that the "setup_engine()" handler in apps.c controls which ENGINEs are registered for use A special case has been added that will revert to this "auto-detect" logic ie if the "-engine" switch is used as; -engine auto
NOT BUG:Modernise and fix (ancient) "maurice" demos
NOT BUG:Constify EVP_SealInit EVP_OpenInit
NOT BUG:Make (ancient) sign.c demo compile again
BUG:Support fractional seconds in GeneralizedTime
NOT BUG:Synchronise with Unixly build
NOT BUG:Stop thinking arguments starting with - are algorithm identifiers Show timing parameters and timing functions used It looks like some Linuxen have very weird settings for CLK_TCK I'm very unsure about this change and will investigate further
NOT BUG:Apparently Linux is identified with __linux__ as well
NOT BUG:'make update'
NOT BUG:The #error message must match a very specific regexp (see mkdef.pl currently line 470)
NOT BUG:Don't clean up stuff twice
NOT BUG:Fixes
NOT BUG:Two changes:
NOT BUG:1 if there are several symbols with the same entry number sort those symbols in ASCII order 2 Do not stop reading the header files when "BEGIN ERROR CODES" is found since mkerr.pl will add a function declaration after that comment Instead trigger on "Error codes for the \w+ function" which is the actual start of the error code macros
NOT BUG:Additionally a few more debugging printouts that helped
NOT BUG:Fix warning
NOT BUG:"FALLBACK" handling was a hack that was thrown out long ago in the ENGINE redevelopment The idea had been that "-1" could be used as a special "ask me later" 'nid' rather than specifying supported cipher and digest 'nid's up front However the idea turned out to be pretty broken
NOT BUG:Make update to bring in all the cipher/digest-related ENGINE changes NB: It looks like mkdef.pl is causing certain cvs wars by continually flipping the order of some definitions ..
NOT BUG:Put the cipher info back into the "openssl engine" command
NOT BUG:Fiddling
NOT BUG:This change puts the original OpenBSD /dev/crypto support that was in crypto/evp/ into the corresponding ENGINE This code is currently untested
NOT BUG:This change adds dummy RC4 and SHA1 support to the "openssl" ENGINE for testing Because of the recent changes (see crypto/engine/README) the "openssl" ENGINE is no longer needed nor is it loaded automatically or by ENGINE_load_builtin_engines() So a explicit ENGINE_load_openssl() call is required by applications or a modification to eng_all.c before this ENGINE will be used This change will send output to stderr as/when its implementations are used
NOT BUG:This changes EVP's cipher and digest code to hook via the ENGINE support See crypto/engine/README for details
NOT BUG:- it also removes openbsd_hw.c from the build (that functionality is going to be available in the openbsd ENGINE in a upcoming commit)
NOT BUG:- evp_test has had the extra initialisation added so it will use (if possible) any ENGINEs supporting the algorithms required
NOT BUG:This change adds cipher and digest support into ENGINE using the ENGING_TABLE mechanism The necessary hooks from crypto/evp/ to use this will be committed shortly
NOT BUG:indentation
NOT BUG:"make update"
NOT BUG:Make necessary tweaks to apps/ files due to recent ENGINE surgery See crypto/engine/README for details
NOT BUG:This commits changes to various parts of libcrypto required by the recent ENGINE surgery DH DSA RAND and RSA now use *both* "method" and ENGINE pointers to manage their hooking with ENGINE Previously their use of "method" pointers was replaced by use of ENGINE references See crypto/engine/README for details
NOT BUG:Also remove the ENGINE iterations from evp_test - even when the cipher/digest code is committed in this functionality would require a different set of API calls
NOT BUG:This commits the changes to STACK macros forced by recent ENGINE surgery
NOT BUG:This change replaces the ENGINE's underlying mechanics with the new ENGINE_TABLE-based stuff - as described in crypto/engine/README
NOT BUG:Associated miscellaneous changes; - the previous cipher/digest hooks that hardwired directly to EVP's OBJ_NAME-based storage have been backed out New cipher/digest support has been constructed and will be committed shortly - each implementation defines its own ENGINE_load_<name> function now - the "openssl" ENGINE isn't needed or loaded any more - core (not algorithm or class specific) ENGINE code has been split into multiple files to increase readability and decrease linker bloat - ENGINE_cpy() has been removed as it wasn't really a good idea in the first place and now because of registration issues can't be meaningfully defined any more - BN_MOD_EXP[_CRT] support is removed as per the README - a bug in enginetest.c has been fixed
NOT BUG:NB: This commit almost certainly breaks compilation until subsequent changes are committed
NOT BUG:Some major restructuring changes to ENGINE including integrated cipher and digest support are on their way Rather than having gigantic commit log messages and/or CHANGES entries this change to the README will serve as an outline of what it all is and how it all works
NOT BUG:Fix AES CBC mode EVP_CIPHER structures: the IV length is always 16
NOT BUG:'openssl rsa' etc should include AES support in addition to DES
NOT BUG:'openssl speed' does not include AES support yet
NOT BUG:"make update"
NOT BUG:In case of memory problems the va_start() wasn't cleaned with a va_end() Noticed by Thomas Klausner <wiz@danbala.ifoer.tuwien.ac.at>
NOT BUG:comment
NOT BUG:ignore binary
NOT BUG:avoid everything resembling a magic trigraph
NOT BUG:The 'no-rijndael' option must define OPENSSL_NO_AES because that is what we look for in crypto/evp
NOT BUG:crypto/idea and crypto/rijndael were missing in the list of directories that may have been deleted
NOT BUG:bugfix: handle HelloRequest received during handshake correctly
NOT BUG:Disable session related stuff in SSL_ST_OK case of ssl3_accept if we just sent a HelloRequest
BUG:Bugfix: correct cleanup after sending a HelloRequest
NOT BUG:New function SSL_renegotiate_pending() New option SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
NOT BUG:make update
NOT BUG:fix ssl3_accept: don't call ssl_init_wbio_buffer() in HelloRequest case
NOT BUG:Fix ssl/s3_enc.c ssl/t1_enc.c and ssl/s3_pkt.c so that we don't reveal whether illegal block cipher padding was found or a MAC verification error occured
NOT BUG:In ssl/s2_pkt.c verify that the purported number of padding bytes is in the legal range
NOT BUG:comments
NOT BUG:Change Makefile so that it works without any additional changes at least on Solaris
NOT BUG:Another demo
NOT BUG:Some of the ENGINE file names were changed for 8.3 filename uniqueness recently So comments including file names have been fixed and copyright notices brought up to "2001" at the same time
NOT BUG:Fix a typo in the preprocessor logic in eng_list.c that had left RSA DSA and DH all conditional upon OPENSSL_NO_RSA
NOT BUG:Add a SHA1 test to evptests.txt - only the MD5 hash algorithm was being tested previously
NOT BUG:'evp_test' needs to initialise and cleanup EVP_CIPHER_CTX structures Also fix a typo and add cleanup operations This also switches on memory leak checking (which is how the rest was found)
NOT BUG:add comment
NOT BUG:Get rid of junk (deleted/renamed function) by rebuilding based on 0.9.6 tree
NOT BUG:add details
NOT BUG:Typo
NOT BUG:One more manual page
NOT BUG:Rework section about return values another time (based on hints from Bodo Moeller)
NOT BUG:avoid "statement not reached" warning
NOT BUG:Updated dependencies from "make update"
NOT BUG:Reduce the header dependencies on engine.h in apps/
NOT BUG:ENGINE uses a very opaque design so we can predeclare the structure type in "types.h" so that very few headers will need to include engine.h generally only C files using API functions will need it (reducing the header dependencies quite a lot)
NOT BUG:ENGINE files were renamed and error strings are now in eng_err.c
NOT BUG:Add certificate and request demos
NOT BUG:Fix X509V3 macro so they compile
NOT BUG:Make maximum certifcate chain size accepted from the peer application settable (proposed by "Douglas E Engert" <deengert@anl.gov>)
NOT BUG:add 'release showstopper' entry
NOT BUG:update
NOT BUG:ex_data situation is no longer that bad
NOT BUG:make update
NOT BUG:Put all "common" initialisation in the apps_startup() and apps_shutdown() macros in apps.h
NOT BUG:enginetest needs 'memset' defined
NOT BUG:missed one file
NOT BUG:While ispell may not like it "cancelling" may be spelt with two "l"s
NOT BUG:fix memory leak (I think)
NOT BUG:remove an old comment
NOT BUG:restore previous revision -- memory leak should be fixed in mem.c
NOT BUG:fix memory leak
NOT BUG:avoid warning ('const' discarded)
NOT BUG:exclude disabled message digests
NOT BUG:add AES ciphers
NOT BUG:Update so that progs.h can indeed be automatically generated
NOT BUG:(Working file: progs.h revision 1.24
NOT BUG:date: 2001/02/19 16:06:03; author: levitte; state: Exp; lines: +59 -59 Make all configuration macros available for application by making sure they are available in opensslconf.h by giving them names starting with "OPENSSL_" to avoid conflicts with other packages and by making sure e_os2.h will cover all platform-specific cases together with opensslconf.h
BUG:[...])
NOT BUG:typo
NOT BUG:Get rid of hazardous EVP_DigestInit_dbg/EVP_DigestInit case distinction (which does not work well because if CRYPTO_MDEBUG is defined at library compile time it is not necessarily defined at application compile time; and memory debugging now can be reconfigured at run-time anyway) To get the intended semantics we could just use the EVP_DigestInit_dbg unconditionally (which uses the caller's __FILE__ and __LINE__ for memory leak debugging) but this would make memory debugging inconsistent Instead callers can use CRYPTO_push_info() to track down memory leaks
NOT BUG:Get rid of hazardous EVP_DigestInit_dbg/EVP_DigestInit case distinction (which does not work well because if CRYPTO_MDEBUG is defined at library compile time it is not necessarily defined at application compile time; and memory debugging now can be reconfigured at run-time anyway) To get the intended semantics we could just use the EVP_DigestInit_dbg unconditionally (which uses the caller's __FILE__ and __LINE__ for memory leak debugging) but this would make memory debugging inconsistent Instead callers can use CRYPTO_push_info() to track down memory leaks
NOT BUG:Also fix indentation and add OpenSSL copyright
NOT BUG:copyright
NOT BUG:Delete pointless casts
NOT BUG:Fix apps/openssl.c and ssl/ssltest.c so that they use CRYPTO_set_mem_debug_options() instead of CRYPTO_dbg_set_options() which is the default implementation of the former and should usually not be directly used by applications (at least if we assume that the options accepted by the default implementation will also be meaningful to any other implementations)
NOT BUG:Also fix apps/openssl.c and ssl/ssltest such that environment variable setting 'OPENSSL_DEBUG_MEMORY=off' actively disables the compiled-in library defaults (i.e such that CRYPTO_MDEBUG is ignored in this case)
NOT BUG:Replace old (and invalid) copyright notice
NOT BUG:The various hash #includes in rand_lcl.h *are* needed despite <openssl/evp.h> is now used (MD_DIGEST_LENGTH definitions!) No need to include such headers directly in md_rand.c
NOT BUG:Recognize OpenUNIX-8 with compiler
NOT BUG:Add a cleanup function for MDs
NOT BUG:Look up MD5 by name
NOT BUG:Remove duplication
NOT BUG:Now need sha.h for some reason
NOT BUG:Redo type-safety fix
NOT BUG:ispell
NOT BUG:ispell
NOT BUG:make engine file names unique in 8.3
NOT BUG:Completely reworked SVR5 shared library support
NOT BUG:unused function
NOT BUG:include the proper header file
NOT BUG:double definition
NOT BUG:Even more corrections for OpenUNIX 8
BUG:Avoid strdup
NOT BUG:(Some platforms need _XOPEN_SOURCE and _XOPEN_SOURCE_EXTENDED to get the declaration but on other platforms _XOPEN_SOURCE disables the strdup declaration in <string.h>.)
BUG:Sort out mess of colons..
BUG:Support for shared libraries on Unixware-7 and OpenUNIX-8 (Boyd Lynn Gerber <gerberb@zenez.com>)
NOT BUG:Totally get rid of CRYPTO_LOCK_ERR_HASH
NOT BUG:In err.c flags int_error_hash_set and int_thread_hash_set appear superfluous since we can just as well initialize int_error_hash and int_thread_hash to NULL
NOT BUG:Change some of the err.c formatting to conform with the rest of OpenSSL
BUG:Build shared libaries for Unixware-7 and OpenUNIX-8 in old (pre 0.9.7) style (Boyd Lynn Gerber <gerberb@zenez.com>)
NOT BUG:improve OAEP check
NOT BUG:fix formatting so that the file can be view with any tab-width
NOT BUG:Mention DSO_up => DSO_up_ref renaming
NOT BUG:Renaming DH_up to DH_up_ref does not warrant a CHANGES entry of its own as the functions were only introduced a couple of days ago
NOT BUG:Some '*)' apparently should be '+)' as the changes do not apply to the 0.9.6 bugfix branch
NOT BUG:ENGINEs can now perform structural cleanup
NOT BUG:This adds "destroy" handlers to the existing ENGINEs that load their own error strings - the destroy handler functions unload the error strings so any pending error state referring to them will not attempt to reference them after the ENGINE has been destroyed
NOT BUG:ENGINE's init() and finish() handler functions are used when the ENGINE is being enabled or disabled (respectively) for operation Additionally each ENGINE has a constructor function where it can do more 'structural' level intialisations such as loading error strings creating "ex_data" indices etc This change introduces a handler function that gives an ENGINE a corresponding opportunity to cleanup when the ENGINE is being destroyed It also adds the "get/set" API functions that control this "destroy" handler function in an ENGINE
NOT BUG:Add some missing CHANGES items
NOT BUG:Oops^2: It was the correct line but an incorrect change
NOT BUG:Oops wrong line
BUG:-mcpu=i486 vs -m486 ..
NOT BUG:Change DH_up() -> DH_up_ref()
NOT BUG:"DH_up" had been changed to "DH_up_ref" in libeay.num but the function declaration and implementation had not So a recent update recreated the original definition in libeay.num .. this corrects it and changes the "dh" code to the "up_ref" variant
NOT BUG:Solaris <string.h> does not declare 'strdup' if _XOPEN_SOURCE is defined
BUG:(Preprocessor symbols such as _POSIX_C_SOURCE or _XOPEN_SOURCE are supposed to disable anything not allowed by the respective specification; I'm not sure why 'strdup' would be considered an outlaw though.)
NOT BUG:bug fix: bn_sqr_recursive output is twice its input size
BUG:Eric Hanchrow points out that Cygwin perl works
NOT BUG:Use GCC 2.95/3.0 optimization
NOT BUG:Update the ENGINE README and stock it up with extra verbeage for good measure (including info and instructions on "dynamic" ENGINEs)
NOT BUG:strsep implementation to allow the file to compile on non-BSD systems
BUG:Submitted by: "Brian Havard" <brianh@kheldar.apana.org.au>
NOT BUG:Make the 'dynamic' ENGINE bundle up the loading application/library's locking callbacks to pass to the loaded library (in addition to the existing mem ex_data and err callbacks) Also change the default implementation of the "bind_engine" function to apply those callbacks ie the IMPLEMENT_DYNAMIC_BIND_FN macro
NOT BUG:Add a "_up" -> "_up_ref" change to libeay.num that was missing from the recent changes Also do the same change to the DSO_up() function
NOT BUG:typo
NOT BUG:Now that we have ERR_unload_strings() ERR_load_ERR_strings() must always load its strings because they might have been unloaded since the 'init' flag was deleted
NOT BUG:But build_SYS_str_reasons() can use an 'init' flag
NOT BUG:changing something requires a write lock not a read lock
NOT BUG:CHANGES should list all API changes relevant for applications (here: X509_STORE_CTX_init())
BUG:OpenSSL copyright notices ..
NOT BUG:delete redundant ERR_load_CRYPTO_strings() prototype
NOT BUG:This changes the existing hardware ENGINE implementations to dynamically declare their own error strings so that they can be more easily compiled as external shared-libraries if desired Also each implementation has been given canonical "dynamic" support at the base of each file and is only built if the ENGINE_DYNAMIC_SUPPORT symbol is defined
NOT BUG:Also use "void" prototypes rather than empty prototypes in engine_int.h
NOT BUG:This does not yet; (i) remove error strings when unloading (ii) remove the redundant ENGINE_R_*** codes (though ENGINE_F_*** codes have gone) or (iii) provide any instructions on how to build shared-library ENGINEs or use them
NOT BUG:All are on their way
NOT BUG:This change adds a new ENGINE called "dynamic" that allows new ENGINE implementations to be loaded from self-contained shared-libraries It also provides (in engine.h) definitions and macros to help implement a self-contained ENGINE Version control is handled in a way whereby the loader or loadee can veto the load depending on any objections it has with each other's declared interface level The way this is currently implemented assumes a veto will only take place when one side notices the other's interface level is too *old* If the other side is newer it should be assumed the newer version knows better whether to veto the load or not Version checking (like other "dynamic" settings) can be controlled using the "dynamic" ENGINE's control commands Also the semantics for the loading allow a shared-library ENGINE implementation to handle differing interface levels on the fly (eg loading secondary shared-libraries depending on the versions required)
NOT BUG:Code will be added soon to the existing ENGINEs to illustrate how they can be built as external libraries rather than building statically into libcrypto
NOT BUG:NB: Applications wanting to support "dynamic"-loadable ENGINEs will need to add support for ENGINE "control commands" See apps/engine.c for an example of this and use "apps/openssl engine -vvvv" to test or experiment
NOT BUG:Note the "ERR_unload_strings" function
NOT BUG:Add a new ERR function "ERR_unload_strings" to complement the existing "ERR_load_strings" function
NOT BUG:Correct a typo
NOT BUG:Rename recently introduced functions for improved code clarity: [DR]SA_up => [DR]SA_up_ref
BUG:Use uniformly chosen witnesses for Miller-Rabin test (by using new BN_pseudo_rand_range function)
NOT BUG:rearrange #includes because trying to include <crypto/cryptodev.h> is a bad idea if OPENSSL_OPENBSD_DEV_CRYPTO is not defined
NOT BUG:Convert "max" to "mx" for variable names (brought to my attention by Steve Henson) Also reverse a previous change that used an implicit function pointer cast rather than an explicit data pointer cast in the STACK cleanup code
NOT BUG:Make MD functions take EVP_MD_CTX * instead of void * add copy() function
NOT BUG:Note the "ex_data" changes
NOT BUG:Make the necessary changes to work with the recent "ex_data" overhaul See the commit log message for that for more information
NOT BUG:NB: X509_STORE_CTX's use of "ex_data" support was actually misimplemented (initialisation by "memset" won't/can't/doesn't work) This fixes that but requires that X509_STORE_CTX_init() be able to handle errors - so its prototype has been changed to return 'int' rather than 'void' All uses of that function throughout the source code have been tracked down and adjusted
NOT BUG:First step in fixing "ex_data" support Warning: big commit log ..
NOT BUG:Currently this change merely addresses where ex_data indexes are stored and managed and thus fixes the thread-safety issues that existed at that level "Class" code (eg RSA DSA etc) no longer store their own STACKS and per-class index counters - all such data is stored inside ex_data.c So rather than passing both STACK+counter to index-management ex_data functions a 'class_index' is instead passed to indicate the class (eg CRYPTO_EX_INDEX_RSA) New classes can be dynamically registered on-the-fly and this is also thread-safe inside ex_data.c (though whether the caller manages the return value in a thread-safe way is not addressed)
NOT BUG:This does not change the "get/set" functions on individual "ex_data" structures and so thread-safety at that level isn't (yet) assured Likewise the method of getting and storing per-class indexes has not changed so locking may still be required at the "caller" end but is nonetheless thread-safe inside "ex_data"'s internal implementation Typically this occurs when code implements a new method of some kind and stores its own per-class index in a global variable without locking the setting and usage of that variable If the code in question is likely to be used in multiple threads locking the setting and use of that index is still up to the code in question Possible fixes to this are being sketched but definitely require more major changes to the API itself than this change undertakes
NOT BUG:The underlying implementation in ex_data.c has also been modularised so that alternative "ex_data" implementations (that control all access to state) can be plugged in Eg a loaded module can have its implementation set to that of the application loaded it - the result being that thread-safety and consistency of "ex_data" classes and indexes can be maintained in the same place rather than the loaded module using its own copy of ex_data support code and state
NOT BUG:Due to the centralisation of "state" with this change cleanup of all "ex_data" state can now be performed properly Previously all allocation of ex_data state was guaranteed to leak - and MemCheck_off() had been used to avoid it flagging up the memory debugging A new function has been added to perfrom all this cleanup CRYPTO_cleanup_all_ex_data() The "openssl" command(s) have been changed to use this cleanup as have the relevant test programs External application code may want to do so too - failure to cleanup will not induce more memory leaking than was the case before but the memory debugging is not tricked into hiding it any more so it may "appear" where it previously did not
NOT BUG:Only OPENSSL_free() non-NULL pointers
NOT BUG:undo didn't work
NOT BUG:*** empty log message ***
NOT BUG:strsep implementation to allow the file to compile on non-BSD systems
BUG:Submitted by: "Brian Havard" <brianh@kheldar.apana.org.au>
NOT BUG:make update
NOT BUG:zlib default was broken on most platforms
NOT BUG:-mcpu=i486 is new as of gcc 2.95 and if you have that you wouldn't want to optimize for 486 anyway
BUG:(A version of) gcc had been giving somewhat odd "trigraph" warnings about this construct and Ulf provided the following insight as to why;
NOT BUG:> ANSI C compliant compilers must substitute "??)" for "]" because your > terminal might not have a "]" key if you bought it in the early 1970s
NOT BUG:So we escape the final '?' to avoid this pathological case
NOT BUG:Ensure that failure to create the BIO in 'CRYPTO_mem_leaks_fp' doesn't leave memory debugging turned off [Spotted by Götz Babin-Ebell]
NOT BUG:Fix SSL memory leak
NOT BUG:Make sure "CRYPTO_mem_leaks_fp" doesn't itself create a reportable memory leak
NOT BUG:"make update"
BUG:gcc can't spot that 'derlst' is not used uninitialised so appease it
NOT BUG:Test digests
NOT BUG:Add digests
NOT BUG:Tidy up some code formatting
NOT BUG:Note the "ERR" changes
NOT BUG:This changes the "ERR" code to have all access to state (a hash table of error strings and a hash table storing per-thread error state) go via an ERR_FNS function table The first time an ERR operation occurs the implementation that will be used (from then on) is set to the internal "defaults" implementation if it has not already been set The actual LHASH tables are only accessed by this implementation
NOT BUG:This is primarily for modules that can be loaded at run-time and bound into an application (or a shared-library version of OpenSSL) If the module has its own statically-linked copy of OpenSSL code - this mechanism allows it to *not* create and use ERR information in its own linked "ERR" code but instead to use and interact with the state stored in the loader (application or shared library) The loader calls ERR_get_implementation() and the return value is what the module should use when calling its own copy of ERR_set_implementation()
NOT BUG:Make a note of the "up" functions
NOT BUG:Changes crypto/evp/ and ssl/ code from directly incrementing reference counts in DH DSA and RSA structures Instead they use the new "***_up()" functions that handle this
NOT BUG:Give DH DSA and RSA functions to "up" their reference counts Otherwise dependant code has to directly increment the "references" value of each such structure using the corresponding lock Apart from code duplication this provided no "REF_CHECK/REF_PRINT" checking and violated encapsulation
NOT BUG:Allow client certificate lists > 16kB ("Douglas E Engert" <deengert@anl.gov>.)
NOT BUG:Wording of comment..
BUG:Needed for build on SunOS 4.1.x with gcc (Jeffrey Hutzelman <jhutz@cmu.edu>)
NOT BUG:More docs
NOT BUG:-passin argument not used when actually loading the key (found by Massimiliano Pala <madwolf@hackmasters.net>)
NOT BUG:Load OCSP responder key before waiting for an incoming connection so it can prompt for pass phrase on startup instead of after the first connection
NOT BUG:Add -port switch to usage message
NOT BUG:Add #ifdefs to some devcrypto code
NOT BUG:Typo
NOT BUG:More manual pages Constify
NOT BUG:As discussed recently on openssl-users
NOT BUG:Make clear that using the compression layer is currently not recommended
NOT BUG:typo
NOT BUG:More tests
NOT BUG:One more manual page..
NOT BUG:Documentation on how to handle compression methods Hopefully it is clear enough that it is currently not recommended
NOT BUG:Checked in from the wrong !@#$%&*() copy..
NOT BUG:More interdependencies with respect to shutdown behaviour
NOT BUG:Alert description strings for TLSv1 and documentation
NOT BUG:Add RC4 support to OpenBSD
NOT BUG:Add AES tests
NOT BUG:Add EVP test program
NOT BUG:Add first cut symmetric crypto support
NOT BUG:More details about session timeout settings
NOT BUG:One more function documented
NOT BUG:SSL_shutdown() has even more properties..
NOT BUG:One more step on the way for complete documentation..
NOT BUG:Unidirectional shutdown is allowed according to the RFC
NOT BUG:Make sure evil file name characters like spaces or ampersands (!) don't disturb the rehashing process Spotted and suggested patch from Rudo Thomas <rudo@internet.sk>
NOT BUG:Make -passin -passout etc work again
NOT BUG:Fix leak in ca.c when using -passin
NOT BUG:Add CRL utility functions to allow CRLs to be built up without accessing structures directly
NOT BUG:Update ca.c to use new functions
NOT BUG:Fix ca.c so it now build CRLs correctly again
NOT BUG:Bugfixes provided by "Stephen Hinton" <shinton@netopia.com>
NOT BUG:Better description of the behaviour of SSL_shutdown() as it is now broken or not
BUG:gcc 3.0 tells me that -m486 is deprecated The gcc 2.95 manual tells me the same and that the correct option is -mcpu=i486 I'm assuming -mcpu has been around for some time and that it's therefore safe to change all occurences of -m486 to -mcpu=i486
NOT BUG:The indexes returned by ***_get_ex_new_index() functions are used when setting stack (actually array) values in ex_data So only increment the global counters if the underlying CRYPTO_get_ex_new_index() call succeeds This change doesn't make "ex_data" right (see the comment at the head of ex_data.c to know why) but at least makes the source code marginally less frustrating
NOT BUG:The indexes returned by ***_get_ex_new_index() functions are used when setting stack (actually array) values in ex_data So only increment the global counters if the underlying CRYPTO_get_ex_new_index() call succeeds This change doesn't make "ex_data" right (see the comment at the head of ex_data.c to know why) but at least makes the source code marginally less frustrating
NOT BUG:Move CIPHER_CTX cleanups to _Final routines instead of _Init which avoids problems with leaks and uninitialised structures
BUG:Apply the Tru64 patch from Tim Mooney <mooney@dogbert.cc.ndsu.NoDak.edu>
NOT BUG:His comments are:
NOT BUG:1) Changes all references for `True64' to be `Tru64' which is the correct spelling for the OS name
NOT BUG:2) Makes `alpha-cc' be the same as `alpha164-cc' and adds an `alphaold-cc' entry that is the same as the previous `alpha-cc' The reason is that most people these days are using the newer compiler so it should be the default
NOT BUG:3) Adds a bit of commentary to Configure regarding the name changes of the OS over the years so it's not so confusing to people that haven't been with the OS for a while
NOT BUG:4) Adds an `alpha-cc-rpath' target (which is *not* selected automatically by Configure under any circumstance) that builds an RPATH into the shared libraries This is explained in the comment in Configure It's very very useful for people that want it and people that don't want it just shouldn't choose that target
NOT BUG:5) Adds the `-pthread' flag as the best way to get POSIX thread support from the newer compiler
NOT BUG:6) Updates the Makefile targets so that when the `alpha164-cc' `alpha-cc' or `alpha-cc-rpath' target is what Configure is set to use it uses a Makefile target that includes the `-msym' option when building the shared library This is a performance enhancement
NOT BUG:7) Updates `config' so that if it detects you're running version 4 or 5 of the OS it automatically selects `alpha-cc' but uses `alphaold-cc' for versions 1-3 of the OS
NOT BUG:8) Updates the comment in opensslv.h fixing both the OS name typo and adding a reference to IRIX 6.x since the shared library semantics are virtually identical there
NOT BUG:add missing link
BUG:Bugfix: larger message size in ssl3_get_key_exchange() because ServerKeyExchange message may be skipped
BUG:Submitted by: Petr Lampa <lampa@fee.vutbr.cz>
BUG:Fix typos (shinagawa@star.zko.dec.com)
NOT BUG:More typedef'd struct names as search targets
NOT BUG:Reinsert typedef'ed names for structs to help those trying to read the sourcecode (including fgrep)
NOT BUG:Start to reduce some of the header bloat
NOT BUG:Fix memory leak
BUG:Parameter correction for CIOFSESSION
NOT BUG:Remove extra whitespace Sorry
NOT BUG:Reinstate accidentally deleted code
NOT BUG:Get rid of the stuff we err got rid of
BUG:Header bloat reduction for EVP_PKEY
NOT BUG:This ghastly hack prevents CVS wars over Kerberos (which is disabled by default)
NOT BUG:Oops one SSL_OP_NON_EXPORT_FIRST was left
NOT BUG:Make /dev/crypto work with new EVP structures
NOT BUG:Make sure memcpy() gets properly declared by including string.h
NOT BUG:remove a comma
NOT BUG:Don't disable rollback attack detection as a recommended bug workaround
NOT BUG:Mention removed option
NOT BUG:Remove SSL_OP_NON_EXPORT_FIRST: It did not work it was deactivated by #if 0/#endif anyway _and_ we now have the working SSL_OP_CIPHER_SERVER_PREFERENCE
NOT BUG:make update
NOT BUG:Make sure the source file is included among the dependencies This is the norm for 'gcc -M' but not for 'makedepend' and is merely introduced here to avoid commit wars
NOT BUG:Reworked manual pages with a lot of input from Bodo Moeller
NOT BUG:Document DES changes better
NOT BUG:Remove old unused stuff
NOT BUG:Indent
NOT BUG:Vade retro C++ comments!
NOT BUG:(Latin for "comments" anyone?)
NOT BUG:Make as sure as possible that gethostname() will be properly declared
NOT BUG:Correct most of the unsigned vs signed warnings (or int vs size_t) and rename some local variables to avoid name shadowing
NOT BUG:Whoops my fault a backslash got converted to a slash..
NOT BUG:More Kerberos SSL changes from Jeffrey Altman <jaltman@columbia.edu> His comments are:
NOT BUG:First it corrects a problem introduced in the last patch where the kssl_map_enc() would intentionally return NULL for valid ENCTYPE values This was done to prevent verification of the kerberos 5 authenticator from being performed when Derived Key ciphers were in use Unfortunately the authenticator verification routine was not the only place that function was used And it caused core dumps
NOT BUG:Second it attempt to add to SSL_SESSION the Kerberos 5 Client Principal Name
NOT BUG:Remove //
NOT BUG:make update
NOT BUG:Really add the EVP and all of the DES changes
BUG:Make EVPs allocate context memory thus making them extensible Rationalise DES's keyschedules
NOT BUG:I know these two should be separate and I'll back out the DES changes if they are deemed to be an error
NOT BUG:Note that there is a memory leak lurking in SSL somewhere in this version
NOT BUG:Only set the verify callback if there's one to set!
NOT BUG:Just a "get to know your system" bit
NOT BUG:Enhanced support for IA-64 Linux and HP-UX (as well as better support for HP-UX in common in ./config) Note that for the moment of this writing none of 64-bit platforms pass bntest I'm committing this anyway as it's too frustrating to patch snapshots over and over while 0.9.6 is known to work
NOT BUG:Support for Intel and HP-UXi assemblers
NOT BUG:ANSIfication
NOT BUG:Typo in stty command lines
NOT BUG:Don't miss files..
NOT BUG:Fix inconsistent behaviour with respect to verify_callback handling
NOT BUG:Forgot to mention second fix
NOT BUG:length of secret exponent is needed only when we create one
NOT BUG:Undo DH_generate_key() change: s3_srvr.c was using it correctly
NOT BUG:Another uninitialized static that may lead to problems on Solaris under some circumstances
NOT BUG:Addapt VMS script to the latest changes in the makefiles
NOT BUG:Make sure *outl is always initialized in EVP_EncryptUpdate()
BUG:More linker bloat reorganisation:
NOT BUG:Split private key PEM and normal PEM handling Private key handling needs to link in stuff like PKCS#8
NOT BUG:Relocate the ASN1 *_dup() functions to the relevant ASN1 modules using new macro IMPLEMENT_ASN1_DUP_FUNCTION Previously these were all in crypto/x509/x_all.c along with every ASN1 BIO/fp function which linked in *every* ASN1 function if a single dup was used
NOT BUG:Move the authority key id ASN1 structure to a separate file This is used in the X509 routines and its previous location linked in all the v3 extension code
NOT BUG:Also move ASN1_tag2bit to avoid linking in a_bytes.c which is now largely obsolete
NOT BUG:So far under Linux stripped binary with single PEM_read_X509 is now 238K compared to 380K before these changes
NOT BUG:First of several reorganisations to reduce linker bloat For example the single line:
BUG:PEM_read_X509()
NOT BUG:results in a binary of around 400K in Linux!
NOT BUG:This first step separates some of the PEM functions and avoids linking in some PKCS#7 and PKCS#12 code
NOT BUG:Fix problem occuring when used from OpenSSH on Solaris 8
NOT BUG:DH key generation should not use a do .. while loop or bogus DH parameters can be used for launching DOS attacks
NOT BUG:Don't preserve existing keys in DH_generate_key
NOT BUG:md_rand.c thread safety
NOT BUG:always reject data >= n
NOT BUG:Support for 64-bit Solaris build with GCC 3.0 and later It should be explicitely noted that 64-bit SPARCv9 ABI is not officially supported by GCC 3.0 (support is scheduled for 3.1 release) but it appears to work at the very least 'make test' passes..
NOT BUG:Fix wrong information about SSL_set_connect_state()..
NOT BUG:add a comment
NOT BUG:avoid warnings
NOT BUG:Avoid race condition
BUG:Submitted by: Travis Vitek <vitek@roguewave.com>
NOT BUG:- New INSTALL document describing different ways to build "tunala" and possible problems - New file breakage.c handles (so far) missing functions - Get rid of some signed/unsigned/const warnings thanks to solaris-cc - Add autoconf/automake input files and helper scripts to populate missing (but auto-generated) files
NOT BUG:This change adds a configure.in and Makefile.am to build everything using autoconf automake and libtool - and adds "gunk" scripts to generate the various files those things need (and clean then up again after) This means that "autogunk.sh" needs to be run first on a system with the autotools but the resulting directory should be "configure"able and compilable on systems without those tools
NOT BUG:Additional inline reference
NOT BUG:Add missing reference
NOT BUG:Tidy up "cvs update" output a bit
NOT BUG:Not all platforms have the OpenBSD crypto device
NOT BUG:Documentation about ephemeral key exchange
NOT BUG:Clean up EVP macros rename DES EDE3 modes correctly temporary support for OpenBSD /dev/crypto (this will be revamped later when the appropriate machinery is available)
BUG:More Kerberos SSL patches from Vern Staats <staatsvr@asc.hpc.mil> His comments are:
NOT BUG:This patch fixes the problem of modern Kerberos using "derived keys" to encrypt the authenticator by disabling the authenticator check for all derived keys enctypes
BUG:I think I've got all the bugfixes that Jeffrey and I discussed rolled into this There were some problems with Jeffrey's code to convert the authenticator's Kerberos timestring into struct tm (e.g Z -1900; it helps to have an actual decryptable authenticator to play with) So I've shamelessly pushed in my code while stealing some bits from Jeffrey
NOT BUG:Updated explanation
NOT BUG:Some more documentation bits
NOT BUG:Currently RSA code when using no padding scheme simply checks that input does not contain more bytes than the RSA modulus 'n' - it does not check that the input is strictly *less* than 'n' Whether this should be the case or not is open to debate - however due to security problems with returning miscalculated CRT results the 'rsa_mod_exp' implementation in rsa_eay.c now performs a public-key exponentiation to verify the CRT result and in the event of an error will instead recalculate and return a non-CRT (more expensive) mod_exp calculation As the mod_exp of 'I' is equivalent to the mod_exp of 'I mod n' and the verify result is automatically between 0 and n-1 inclusive the verify only matches the input if 'I' was less than 'n' otherwise even a correct CRT calculation is only congruent to 'I' (ie they differ by a multiple of 'n') Rather than rejecting correct calculations and doing redundant and slower ones instead this changes the equality check in the verification code to a congruence check
NOT BUG:Missing line 0.9.6b release and IA-64 patch advertisement:-)
NOT BUG:SSL_get_rfc were documented but not implemented
NOT BUG:SSL_get_[rw]fd were documented but not implemented
NOT BUG:Allow OCSP server to handle multiple requests
NOT BUG:Document new OCSP options
NOT BUG:Initial OCSP server support using index.txt format
NOT BUG:This can process internal requests or behave like a mini responder
NOT BUG:Todo: documentation update usage info
NOT BUG:Prevent KSSL server from requesting a client certificate Submitted by Jeffrey Altman <jaltman@columbia.edu>
NOT BUG:paddr may be NULL Do not crash if it is
NOT BUG:Clarify that zlib-dynamic is the default choice
NOT BUG:Add the possibility to specify the use of zlib compression and decompression It can be set up to link at link time or to load the zlib library at run-time
NOT BUG:Clarify actual state
NOT BUG:Some of the Kerberos code had dissapeared Reapply
NOT BUG:Document the recent Kerberos SSL changes
NOT BUG:Delete extra ;
NOT BUG:In ocsp_match_issuerid() we are passed the CA that signed the responder certificate so need to match its subject with the certificate IDs in the response
NOT BUG:make update
NOT BUG:Note that since some private kssl functions were exported the simplest way to rebuild the number table was to toss everything that was new since OpenSSL 0.9.6b This is safe since those functions have not yet been exported in an OpenSSL release Beware people who trust intermediary snapshots!
NOT BUG:Include kssl_lcl.h where needed
NOT BUG:Private functions do not belong in an exported header file so move them to one that won't get exported
NOT BUG:Changes to the Kerberos SSL code by Jeffrey Altman <jaltman@columbia.edu> His comments are:
NOT BUG: adds use of replay cache to protect against replay attacks
NOT BUG: adds functions kssl_tgt_is_available() and kssl_keytab_is_available() which are used within s3_lib.c and ssl_lib.c to determine at runtime whether or not KRB5 ciphers can be supported during the current session
NOT BUG:openssl speed is quite useful for testing hardware support (among other things) especially as the RSA keys are fixed However DSA only fixes the DSA parameters and then generates the public and private components on the fly each time - this commit hard-codes some sampled key values so that this is no longer the case
NOT BUG:Code to avoid the use of non-standard strptime() By Jeffrey Altman <jaltman@columbia.edu>
NOT BUG:(Really the time that's being parsed is a GeneralizedTime so if ASN1_GENERALIZEDTIME_get() ever gets implemented it should be used instead)
NOT BUG:Typo..
NOT BUG:Changes to the Kerberos SSL code by Jeffrey Altman <jaltman@columbia.edu> His comments are:
NOT BUG: Fixed all of the Windows dynamic loading functions prototypes etc
NOT BUG: Corrected all of the unsigned/signed comparison warnings
NOT BUG: Replaced the references to krb5_cksumarray[] for two reasons First it was an internal variable that should not have been referenced outside the library; nor could it have been with a shared library with restricted exports Second the variable is no longer used in current Kerberos implementations I replaced the code with equivalent functionality using functions that are exported from the library
NOT BUG:What is an '-engine' version?
NOT BUG:The implementation of the TKTBODY ASN.1 functions was missing
NOT BUG:make update
NOT BUG:Make sure crypto/krb5/krb5_asn.h is copied to the directory of exported header files
NOT BUG:Make sure crypto/krb5/krb5_asn.h becomes part of libeay.num
NOT BUG:Clarify! (based on recent mailing-list discussions)
NOT BUG:One forgotten function
NOT BUG:make update
NOT BUG:EVP_Digest() takes one more parameter
NOT BUG:For consistency with the terminology used in my SAC2001 paper avoid the term "simultaneous multiplication" (which -- acording to the paper at least -- applies only to certain methods which we don't use here)
NOT BUG:comment change
NOT BUG:Fix PRNG
NOT BUG:In version numbers there is just one "M" nybble
NOT BUG:Precomputation will not necessarily be LIm-Lee precomputation
NOT BUG:If I define _XOPEN_SOURCE before including *any* system header file things will work much more smoothly
BUG:Patches from Vern Staats <staatsvr@asc.hpc.mil> to get Kerberos 5 in SSL according to RFC 2712 His comment is:
BUG:This is a patch to openssl-SNAP-20010702 to support Kerberized SSL authentication I'm expecting to have the full kssl-0.5 kit up on sourceforge by the end of the week The full kit includes patches for mod-ssl apache and a few text clients The sourceforge URL is http://sourceforge.net/projects/kssl/ 
NOT BUG:Thanks to a note from Simon Wilkinson I've replaced my KRB5 AP_REQ message with a real KerberosWrapper struct I think this is fully RFC 2712 compliant now including support for the optional authenticator field I also added openssl-style ASN.1 macros for a few Kerberos structs; see crypto/krb5/ if you're interested
NOT BUG:A better compromise between encrypt and decrypt (but why isn't it as fast for encrypt?)
NOT BUG:Handle the common case first (where input size is a multiple of block size) Worth around 5% for encrypt Slows down decrypt slightly but I expect to regain that later
NOT BUG:Use & instead of % - worth about 4% for 8 byte blocks
NOT BUG:Don't update argc argv for decrypt flag!
NOT BUG:Speed test decrypt EVP operations
NOT BUG:Correct const-ness
NOT BUG:Remove unnecessary casts
NOT BUG:Constification
NOT BUG:Use one address consistently
NOT BUG:Change info to correct values
NOT BUG:Align with 0.9.6-stable CHANGES file and make some corrections
NOT BUG:Engine memory leaks have been fixed by now
NOT BUG:Call ENGINE_cleanup() to avoid memory leak
NOT BUG:Entry for Andy's mips3.s fix
BUG:Update nCipher header with more liberal licence
NOT BUG:When only the key is given to "enc" the IV is undefined (found by Andy Brown <logic@warthog.com>)
NOT BUG:Make an extra note about shared libraries and backward compatibility
NOT BUG:Let's include cryptlib.h *before* things like NO_SYSLOG are tested or used
BUG:[Forgotten commits?] Changes to have OpenSSL compile on OS/2 Contributed by "Brian Havard" <brianh@kheldar.apana.org.au>
NOT BUG:Fix warning
BUG:Insuline shot
BUG:Changes to have OpenSSL compile on OS/2 Contributed by "Brian Havard" <brianh@kheldar.apana.org.au>
NOT BUG:Modify apps to use NCONF code instead of old CONF code
NOT BUG:Add new extension functions which work with NCONF
NOT BUG:Tidy up extension config routines and remove redundant code
NOT BUG:Fix NCONF_get_number()
NOT BUG:Todo: more testing of apps to see they still work..
NOT BUG:Make better use of load_cert load_certs and load_key
NOT BUG:Another empty X509_NAME fix
NOT BUG:Handle empty X509_NAME in printing routines
NOT BUG:DSA verification should insist that r and s are in the allowed range
NOT BUG:Make better use of load_cert load_certs and load_key
NOT BUG:Make get_ip() a bit more strict in it's parsing of IP addresses and at the same time a bit more accepting with host names
NOT BUG:Make better use of load_cert load_certs and load_key
NOT BUG:Translate into valid C (don't call functions with wrong prototypes)
NOT BUG:Call apps_shutdown() to take down what apps_startup() set up
NOT BUG:Make sure we don't return 0 on error
NOT BUG:In {RSA,DSA,DH}_new_method(x) need to increase the reference count of the ENGINE is x is not NULL since it will be freed in {RSA,DSA,DH}_free()
NOT BUG:Use the new UI features among others the new boolean input
NOT BUG:NOTE: Boolean input hasn't been very well tested yet so this part may fail miserably
NOT BUG:Including stdio.h before setting _XOPEN_SOURCE and _XOPEN_SOURCE_EXTENDED wasn't very smart..
NOT BUG:make update
NOT BUG:Use apps_shutdown() in all applications in case someone decides not to go the monolith way (does anyone do that these days?)
NOT BUG:NOTE: a few applications are missing in this commit I've a few more changes in them that I haven't tested yet
NOT BUG:apps_startup() needs a corresponding apps_shutdown()
NOT BUG:Make use of new features in UI's Among others the application password callbak doesn't need to check for sizes any more
NOT BUG:Oops applies to 0.9.7 only
NOT BUG:Document recent changes
NOT BUG:Do not loop i the OpenSSL UI method any more Instead letthe application do that
NOT BUG:NOTE: there's no requirement for other UI_METHODs to avoid this kind of loop For example a GUI UI_METHOD would probably check the lengths of the answers from within instead of being constantly redisplayed for everything that is wrong
NOT BUG:make update
NOT BUG:Implement boolean (yes/no or OK/Cancel ...) input
NOT BUG:Implement UI controls Current controls are the possibility to output the OpenSSL error stack on the same channel from within UI_process() and to check if the same user interface can be redone without being rebuilt (this is often more a question of philosophy than technicalities)
NOT BUG:New error printing function that gives the possibility to print the errors through an arbitrary function
NOT BUG:Include the UI error strings
NOT BUG:For the UI functions that return an int 0 or any positive number is a success return any negative number is a failure Make sure we check the return value with that in mind
NOT BUG:Fix hwcrhk_insert_card
NOT BUG:Fix UI leak in apps
NOT BUG:In UI_dup_*() function use the duped string not the original
NOT BUG:Update my config entry to allow use of DSOs
NOT BUG:This fixes "Spurious test failures on IRIX?" reported in April Apparently I was wrong in conclusions about when addition starts overflowing in combaX routines
NOT BUG:Fix memory leak when RAND is used: need to cleanup RANDs ENGINE reference in ENGINE_cleanup()
NOT BUG:Update my status
NOT BUG:Since there is a way to create UI_METHODs implement a destructor as well
NOT BUG:This probably requires reference counters and locks as well To be implemented later
NOT BUG:Modify "openssl engine" to handle and display internal control commands appropriately
NOT BUG:Change all calls to low level digest routines in the library and applications to use EVP Add missing calls to HMAC_cleanup() and don't assume HMAC_CTX can be copied using memcpy()
NOT BUG:Note: this is almost identical to the patch submitted to openssl-dev by Verdon Walker <VWalker@novell.com> except some redundant EVP_add_digest_()/EVP_cleanup() calls were removed and some changes made to avoid compiler warnings
NOT BUG:Fix memory leaks
NOT BUG:cp is only used when DSA is built
NOT BUG:Do a proof of concept "openssl genrsa" will make the name of the file part of the password prompt unless it's standard input..
NOT BUG:More will be added..
NOT BUG:Change the common application routines to use a UI_METHOD for password prompting even when done through the callback
NOT BUG:- Add the possibility to control engines through control names but with arbitrary arguments instead of just a string - Change the key loaders to take a UI_METHOD instead of a callback function pointer NOTE: this breaks binary compatibility with earlier versions of OpenSSL [engine] - Addapt the nCipher code for these new conditions and add a card insertion callback
NOT BUG:The default flag should be for default passwords only Otherwise someone having a default that is not a password will be confused
NOT BUG:Enhance the user interface with better support for dialog box prompting application-defined prompts the possibility to use defaults (for example default passwords from somewhere else) and interrupts/cancelations
NOT BUG:make apps compile again
NOT BUG:Don't set pointer if add_lock_callback used
NOT BUG:One feature wasn't quite commited yet
NOT BUG:Provide an application-common setup function for engines and use it everywhere
NOT BUG:Fix a memory leak (there's another around here somewhere though) PR:
NOT BUG:Delete a redundant line
NOT BUG:pay attention to blocksize before attempting decryption
BUG:For MSDOS the tty filename still is "con" not "/dev/tty" ..
NOT BUG:Get rid of "possible WAW dependency" warnings
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:even use of default engines leaks memory
NOT BUG:Add directory name to the entry on /crypto/ui/
NOT BUG:Earlier OpenSSL versions printed prompts to stderr In the new crypto/ui/ this was changed into tty (which is usually /dev/tty) i.e the FILE * used for reading passwords from the user However stdio buffering for read/write streams is not without pitfalls (passwords would be echoed on some systems) To avoid problems split tty into tty_in and tty_out (which are opened separately)
NOT BUG:Make update
NOT BUG:Initialize UI ex_data
NOT BUG:Add support for MS CSP Name PKCS#12 attribute
NOT BUG:more error codes fixed
NOT BUG:ERR_peek_error() returns "unsigned long"
BUG:Use memmove() instead of memcpy() on areas that may overlap Spotted by Nalin Dahyabhai <nalin@redhat.com>
NOT BUG:Don't forget to initialise
NOT BUG:OAEP fix
NOT BUG:when checking OAEP signal just a single kind of 'decoding error'
NOT BUG:move check to avoid memory leak
NOT BUG:make sure we don't write to seed[-1]
NOT BUG:'make update'
NOT BUG:Defining __USE_XOPEN_EXTENDED was the wrong thing Instead define _XOPEN_SOURCE
NOT BUG:A good use of the UI interface is as a password callback replacement (for new functions...) One might still want to be able to pass down a user-data pointer to be used by the UI However ex_data doesn't quite cut it since that means the appropriate index to it might need to be shared between parts that aren't really related in that sense and would require the currently hidden (static) index holders to be uncovered Not a good thing Therefore add the possibility to add a user-data pointer to a UI
NOT BUG:Small detail about AIX forgotten..
BUG:Accept digits in symbol names Spotted by Brian Havard <brianh@kheldar.apana.org.au>
NOT BUG:More info on SRP
NOT BUG:Added more info in SRP
NOT BUG:Confusion between algorithms resolved
NOT BUG:nCipher callbacks shall return 0 on success something else otherwise
NOT BUG:Stop mishandling the type number in dynlock locking
NOT BUG:Fix Bleichenbacher PKCS #1 1.5 countermeasure (The attack against SSL 3.1 and TLS 1.0 is impractical anyway otherwise this would be a security relevant patch.)
NOT BUG:increase DEFAULT_BUFFER_SIZE (4K instead of just 1K)
NOT BUG:Don't decrement the reference counter twice when destroying dynamic links
NOT BUG:Fix a memory leak in 'sk_dup' in the case a realloc() fails Also tidy up a bit of weird code in sk_new
NOT BUG:Get rid of RAW dependency warnings
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Extend all the loading functions to take an engine pointer a pass string (some engines may have certificates protected by a PIN!) and a description to put into error messages
NOT BUG:Also have our own password callback that we can send both a password and some prompt info to The default password callback in EVP assumes that the passed parameter is a password which isn't always the right thing and the ENGINE code (at least the nCipher one) makes other assumptions..
NOT BUG:Also in spite of having the functions to load keys some utilities did the loading all by themselves.. That's changed too
BUG:A wish was expressed
BUG:Don't forget responsible person so that its clear who is to blame
NOT BUG:Assembler support for IA-64 See the source code commentary for further details (performance numbers and accompanying discussions:-) Note that the code is not engaged in ./Configure yet I'll add it later this week along with updates for .spec file
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Document the latest change in ENGINEs
NOT BUG:We had the password callback for ENGINEs pretty much wrong And passwords that were given to the key loading functions were completely ignored at least in the ncipher code and then we made the assumption that the callback wanted a prompt as user argument
NOT BUG:All that is now changed and the application author is forced to give a callback function of type pem_callback_cb and possibly an argument for it just as for all other functions that want to generate password prompting
NOT BUG:NOTE: this change creates binary and source incompatibilities with previous versions of OpenSSL [engine] It's worth it this time to get it right (or at least better and with a chance that it'll work)
NOT BUG:Add missing variable length cipher flag for Blowfish
NOT BUG:Only use trust settings if either trust or reject settings are present otherwise use compatibility mode This stops root CAs being rejected if they have alias of keyid set
NOT BUG:VMS doesn't support more than on period in a file name
NOT BUG:Add examples to EVP_EncryptInit manual page
NOT BUG:Fix for new UI functions under Win32
NOT BUG:For some unknown reason fopen("con" "w") is the only way to make this work Using "r+" and "w+" causes the fopen call to fail and the fallback (using stdin) doesn't work because writing to stdin fails
NOT BUG:Add a requirements section for OpenVMS
NOT BUG:Add a few more details on what one might need make and a development environment were a part of a Unix operating systems but these days you see an increasing number of installations that do not necessarely have these crucial parts by default so it's needs mentioning
NOT BUG:Add missing item(s) SSL_ERROR_WANT_CONNECT SSL_ERROR_WANT_ACCEPT
NOT BUG:New internal function OPENSSL_gmtime which is intended to do the same as gmtime_r() on the systems where that is defined
NOT BUG:Increase ENTROPY_NEEDED to support Rijndael's larger key size
BUG:Do not forget to increment the pointers..
NOT BUG:Low-case the names of the system routines since some versions of DEC C only have them declared that way (it doesn't really matter since the linker is case-insensitive by default)
BUG:branch on equal is beql not beq..
NOT BUG:Make sure strdup() is properly declared
NOT BUG:Make sure memset() is properly declared
NOT BUG:ui was forgotten when installing libcrypto and it's headers
BUG:ui_compat.h was forgotten in the "symlinking" routine
NOT BUG:Remove the password reading objects from LIB_DES
NOT BUG:Make more short aliases for symbols that are longer than 31 characters
NOT BUG:len is a size_t which is an unsigned integer Therefore some compilers will complain against the check for less than zero
NOT BUG:Use ui_compat.h to get the password reading functions
NOT BUG:Make it so the compiler doesn't inform me about the dollars in some symbols
NOT BUG:Typos
NOT BUG:One more point to clarify pointed out by "Greg Stark" <ghstark@pobox.com>
NOT BUG:It seems like the removal of "extern" before "static" wasn't a mistake
NOT BUG:Document the addition
BUG:A randomizer for OpenVMS using the statistics that are easily reachable
NOT BUG:It's completely untested for now To be done in the next few days
NOT BUG:Define `ok' and better error detection
NOT BUG:make update
NOT BUG:Win16 too :-)
NOT BUG:des_read_password() and des_read_2passwords() can only appear if DES is compiled
NOT BUG:When doing rewrites on ssleay.num the file was prematurely closed Make rewrites the default since it works and people get confused if changed information doesn't get rewritten automagically
NOT BUG:Move the password reading functions completely away from the DES section
NOT BUG:Add ui_compat.h for inclusion by those who want the old functions and provide all of them not just the higher-level ones in ui_compat.c
NOT BUG:Put back a removed "extern" or many compilers will complain about redefined variables
NOT BUG:#if 0 out deleted (?) functions to stop Win32 DLL build falling over
NOT BUG:Change Win32 to use EXPORT_VAR_AS_FN
NOT BUG:Fix OPENSSL_IMPLEMENT_GLOBAL
NOT BUG:Allow Win32 to use EXPORT_VAR_AS_FN in mkdef.pl
NOT BUG:make update
NOT BUG:Clarify behaviour with respect to SSL/TLS records
NOT BUG:Under VC++ _DLL is set to indicate that the application will be linked against the DLL runtime library It is automatically set when /MD is used
NOT BUG:As a result OpenSSL shouldn't use _DLL to determine if it should set OPENSSL_OPT_WINDLL because this will cause linkage conflicts with static builds which do include the /MD compiler switch
NOT BUG:Typo
NOT BUG:e_os2.h defines things like OPENSSL_SYS_MSDOS not opensslconf.h.. (basically: whooops :-))
NOT BUG:Clarify behaviour of SSL_write() by mentioning SSL_MODE_ENABLE_PARTIAL_WRITE flag as discussed on the mailing list
NOT BUG:Update changelog to reflect additional changes made to the egd-locations
NOT BUG:restore change undone in 1.831 (apparently by accident)
NOT BUG:Purpose and trust setting functions for X509_STORE
NOT BUG:Tidy existing code
NOT BUG:Fix warning with DEBUG_SAFESTACK
NOT BUG:Fix to allow multiple NONE libraries in mkerr.pl 
NOT BUG:Allow various X509_STORE_CTX properties to be inherited from X509_STORE
NOT BUG:Add CRL checking options to other applications
NOT BUG:fix an old entry
BUG:There is no uitest
NOT BUG:Don't forget crypto/ui..
NOT BUG:Initial CRL based revocation checking
NOT BUG:Clarify the license and copyright make preprocessor dirctives a little bit clearer and use the new OPENSSL_SYS_* macros
NOT BUG:make update
NOT BUG:Add a general user interface API This is designed to replace things like des_read_password and friends (backward compatibility functions using this new API are provided) The purpose is to remove prompting functions from the DES code section as well as provide for prompting through dialog boxes in a window system and the like
NOT BUG:the backslash is significant..
NOT BUG:.rnd issues
NOT BUG:bctest changes for Ultrix (don't return 1 from bctest otherwise make aborts)
NOT BUG:Some platforms (most notably Windows) do not have a $HOME by default For those unless the environment variables RANDFILE or HOME are defined (the default case!) RAND_file_name() will return NULL This change adds a default HOME for those platforms
NOT BUG:To add a default HOME for any platform just define DEFAULT_HOME in the proper place wrapped in appropriate #ifdef..#endif in e_os.h
BUG:Add support for Sun C on Solaris x86 Contributed by Ben <mouring@etoh.eviladmin.org>
NOT BUG:Remove part conflict indicator..
NOT BUG:In RSA DSA DH and RAND - if the "***_new()" function fails because the ENGINE code does not return a default set an error
NOT BUG:Win32 fixes:
NOT BUG:define LLONG properly for VC++
NOT BUG:stop compiler complaining about signed/unsigned mismatch in apps/engine.c
NOT BUG:A method to create shared libraries on AIX and according to "Howard Chu" <hyc@highlandsun.com> it may be general enough to work on any Unixly system
NOT BUG:make update
NOT BUG:For some inexplicable reason I'd (a) left the debugging irreversibly turned on and (b) left a somewhat curious debugging string in the output
NOT BUG:Some fixes to the reference-counting in ENGINE code First there were a few statements equivalent to "ENGINE_add(ENGINE_openssl())" etc The inner call to ENGINE_openssl() (as with other functions like it) orphans a structural reference count Second the ENGINE_cleanup() function also needs to clean up the functional reference counts held internally as the list of "defaults" (ie as used when RSA_new() requires an appropriate ENGINE reference) So ENGINE_clear_defaults() was created and is called from within ENGINE_cleanup() Third some of the existing code was logically broken in its treatment of reference counts and locking (my fault) so the necessary bits have been restructured and tidied up
NOT BUG:To test this stuff compiling with ENGINE_REF_COUNT_DEBUG will cause every reference count change (both structural and functional) to log a message to 'stderr' Using with "openssl engine" for example shows this in action quite well as the 'engine' sub-command cleans up after itself properly
NOT BUG:Also replaced some spaces with tabs
NOT BUG:Make proper use of all disabling variables
NOT BUG:"make update"
NOT BUG:Make notes about ENGINE changes
NOT BUG:Linux shared libraries can be linked with debug symbols Tru64 shared libraries can be linked with static libraries
NOT BUG:make update
NOT BUG:This adds 2 things to the ENGINE code
NOT BUG:* "ex_data" - a CRYPTO_EX_DATA structure in the ENGINE structure itself that allows an ENGINE to store its own information there rather than in global variables It follows the declarations and implementations used in RSA code for better or worse However there's a problem when storing state with ENGINEs because unlike related structure types in OpenSSL there is no ENGINE-vs-ENGINE_METHOD separation Because of what ENGINE is it has method pointers as its structure elements .. which leads to;
NOT BUG:* ENGINE_FLAGS_BY_ID_COPY - if an ENGINE should not be used just as a reference to an "implementation" (eg to get to a hardware device) but should also be able to maintain state then this flag can be set by the ENGINE implementation The result is that any call to ENGINE_by_id() will not result in the existing ENGINE being returned (with its structural reference count incremented) but instead a new copy of the ENGINE will be returned that can maintain its own state independantly of any other copies returned in the past or future Eg key-generation might involve a series of ENGINE-specific control commands to set algorithms sizes module-keys ids ACLs etc A final command could generate the key An ENGINE doing this would *have* to declare ENGINE_FLAGS_BY_ID_COPY so that the state of that process can be maintained "per-handle" and unaffected by other code having a reference to the same ENGINE structure
NOT BUG:Clean up ENGINE before exiting
NOT BUG:Provide the possibility to clean up internal ENGINE structures This takes care of what would otherwise be seen as a memory leak
BUG:gcc warns when certain values of an enumeration aren't taken care of unless there's a default clause
NOT BUG:Check for OPENSSL_NO_RSA OPENSSL_NO_DSA and OPENSSL_NO_DH and disable appropriate code if any of them is defined
NOT BUG:engine.h includes all the needed header files so don't do it again here
NOT BUG:We shouldn't skip over header files to avoid functions of disabled algorithms The selection is done in a different way
BUG:User OPENSSL_UNISTD instead of <unistd.h> Spotted by Mark Crispin <MRC@Panda.COM>
NOT BUG:This change to the "dl" "dlfcn" and "win32" DSO_METHODs adds the filename or symbol name to the error stack in the event a load or bind operation failed
NOT BUG:Typo (reported by Petr Lancaric <Petr.Lancaric@ips-ag.cz>)
NOT BUG:Make update
NOT BUG:Fix ASN1 bug when decoding OTHER type
NOT BUG:Various S/MIME DSA related fixes
NOT BUG:Script to create shareable images (shared libraries in Unixly terms) on VMS
NOT BUG:VMS was behind when it comes to OCSP
NOT BUG:Add notes about the new ENGINE functionality
NOT BUG:Changes to "openssl engine" to support the new control command code in ENGINE
NOT BUG:* Extra verbosity can be added with more "v"'s eg '-vvv' gives information about input flags and descriptions for each control command in each ENGINE Check the output of "openssl engine -vvv" for example
NOT BUG:* '-pre <cmd>' and '-post <cmd>' can be used to invoke control commands on the specified ENGINE (or on all of them if no engine id is specified although that usually gets pretty ugly) '-post' commands are only attempted if '-t' is specified and the engine successfully initialises '-pre' commands are always attempted whether or not '-t' causes an initialisation to be tried afterwards Multiple '-pre' and/or '-post' commands can be specified and they will be called in the order they occur on the command line
NOT BUG:Parameterised commands (the normal case there are currently no unparameterised ones) are split into command and argument via a separating colon Eg "openssl engine -pre SO_PATH:/lib/libdriver.so <id>" results in the call; ENGINE_ctrl_cmd_string(e "SO_PATH" "/lib/libdriver.so" 0);
NOT BUG:Application code should similarly allow arbitrary name-value string pairs to be passed into ENGINEs in a manner matching that in apps/engine.c either using the same colon-separated format or entered as two distinct strings Eg as stored in a registry The last parameter of ENGINE_ctrl_cmd_string can be changed from 0 to 1 if the command should only be attempted if it's supported by the specified ENGINE (eg for commands like "FORK_CHECK:1" that may or may not apply to the run-time ENGINE)
NOT BUG:Some more tweaks to ENGINE code
NOT BUG:This change adds some basic control commands to the existing ENGINEs (except the software 'openssl' engine) All these engines currently load shared-libraries for hardware APIs so they've all been given "SO_PATH" commands that will configure the chosen ENGINE to load its shared library from the given path Eg by calling; ENGINE_ctrl_cmd_string(e "SO_PATH" <path> 0)
NOT BUG:The nCipher 'chil' ENGINE has also had "FORK_CHECK" and "THREAD_LOCKING" commands added so these settings could be handled via application-level configuration rather than in application source code
NOT BUG:Changes to "openssl engine" to test and examine these control commands will be made shortly It will also provide the necessary tips to application programs wanting to support these dynamic control commands
NOT BUG:Some BIG tweaks to ENGINE code
NOT BUG:This change adds some new functionality to the ENGINE code and API to make it possible for ENGINEs to describe and implement their own control commands that can be interrogated and used by calling applications at run-time The source code includes numerous comments explaining how it all works and some of the finer details But basically an ENGINE will normally declare an array of ENGINE_CMD_DEFN entries in its ENGINE - and the various new ENGINE_CTRL_*** command types take care of iterating through this list of definitions converting command numbers to names command names to numbers getting descriptions getting input flags etc These administrative commands are handled directly in the base ENGINE code rather than in each ENGINE's ctrl() handler unless they specify the ENGINE_FLAGS_MANUAL_CMD_CTRL flag (ie if they're doing something clever or dynamic with the command definitions)
NOT BUG:There is also a new function ENGINE_cmd_is_executable() that will determine if an ENGINE control command is of an "executable" type that can be used in another new function ENGINE_ctrl_cmd_string() If not the control command is not supposed to be exposed out to user/config level access - eg it could involve the exchange of binary data returning results to calling code etc etc If the command is executable then ENGINE_ctrl_cmd_string() can be called using a name/arg string pair The control command's input flags will be used to determine necessary conversions before the control command is called and commands of this form will always return zero or one (failure or success respectively) This is set up so that arbitrary applications can support control commands in a consistent way so that tweaking particular ENGINE behaviour is specific to the ENGINE and the host environment and independant of the application or OpenSSL
NOT BUG:Some code demonstrating this stuff in action will applied shortly to the various ENGINE implementations as well as "openssl engine" support for executing arbitrary control commands before and/or after initialising various ENGINEs
NOT BUG:Some more tweaks to ENGINE code
NOT BUG:The existing ENGINEs (including the default 'openssl' software engine) were static declared inside the source file for each engine implementation The reason this was not going boom was that all the ENGINEs had reference counts that never hit zero (once linked into the internal list each would always have at least 1 lasting structural reference)
NOT BUG:To fix this so it will stay standing when an "unload" function is added to match ENGINE_load_builtin_engines() the "constructor" functions for each ENGINE implementation have been changed to dynamically allocate and construct their own ENGINEs using API functions The other benefit of this is that no ENGINE implementation has to include the internal "engine_int.h" header file any more
NOT BUG:Make a note of the recent ENGINE developments
NOT BUG:typo
NOT BUG:fix md_rand.c locking bugs
NOT BUG:Make the shared library name and function symbol for the "nuron" ENGINE static data where they could be parameterised by ctrl() commands
NOT BUG:Some more tweaks from ENGINE code
NOT BUG:Previously RAND_get_rand_method was returning a non-const pointer but it should be const As with all other such cases METHOD pointers are stored and returned as "const" The only methods one should be able to alter are methods "local" to the relevant code in which case a non-const handle to the methods should already exist
NOT BUG:This change has been forced by the constifying of the ENGINE code (before which RAND_METHOD was the only method pointer in an ENGINE structure that was not constant)
NOT BUG:Some more tweaks to ENGINE code
NOT BUG:ENGINE handler functions should take the ENGINE structure as a parameter - this is because ENGINE structures can be copied and like other structure/method setups in OpenSSL it should be possible for init() finish() ctrl() etc to adjust state inside the ENGINE structures rather than globally This commit includes the dependant changes in the ENGINE implementations
NOT BUG:Some more tweaks to ENGINE code
NOT BUG:Previous changes permanently removed the commented-out old code for where it was possible to create and use an ENGINE statically and this code gets rid of the ENGINE_FLAGS_MALLOCED flag that supported the distinction with dynamically allocated ENGINEs It also moves the area for ENGINE_FLAGS_*** values from engine_int.h to engine.h - because it should be possible to declare ENGINEs just from declarations in exported headers
NOT BUG:Some more tweaks to ENGINE code
NOT BUG:* Constify the get/set functions and add some that functions were missing
NOT BUG:* Add a new 'ENGINE_cpy()' function that will produce a new ENGINE based copied from an original (except for the references ie the new copy will be like an ENGINE returned from 'ENGINE_new()' - a structural reference)
NOT BUG:* Removed the "null parameter" checking in the get/set functions - it is legitimate to set NULL values as a way of *changing* an ENGINE (ie removing a handler that previously existed) Also passing a NULL pointer for an ENGINE is obviously wrong for these functions so don't bother checking for it The result is a number of error codes and strings could be removed
NOT BUG:Structural references should never be decremented directly - so leave that to ENGINE_free() Also remove "#if 0" code that has no useful future
NOT BUG:This moves string constants out of vendor headers and into C files
NOT BUG:'make update'
NOT BUG:Clarify request of client certificates This is a FAQ
NOT BUG:Fix warning
NOT BUG:Constify (Jason Molenda <jason@molenda.com>)
NOT BUG:Missing link ("Greg Stark" <gstark@ethentica.com>)
BUG:Fix wrong information with respect to CAs listed to the client (follows from technical discussion with Amit Chopra <amitc@pspl.co.in>)
NOT BUG:update so that changes going into the 0.9.6 tree can be logged
NOT BUG:undo previous change ..
NOT BUG:update from 0.9.6a
NOT BUG:Typo (Jun-ichiro itojun Hagino <itojun@iijlab.net>)
NOT BUG:Correct typo
NOT BUG:Add -keyform
NOT BUG:Show an example of moving the emailAddress object from the subkect DN to subjectAltName when signing a certificate
NOT BUG:Make it possible to move the emailAddress object to the subjectAltName extension instead of just copying it That makes a certificate comply even more with PKIX recommendations according to RFC 2459
NOT BUG:Add information on 0.9.6a (in a form such that the list can be verified by looking at 'diff -u ../openssl-0.9.6a/CHANGES CHANGES')
NOT BUG:NetBSD and OpenBSD use TOD as well
NOT BUG:Mention automatically queried EGD sockets (OpenSSL 0.9.7)
NOT BUG:0.9.5 is obsolete so we don't have to discuss its 'openssl rsa' seeding bug
NOT BUG:Some clarifications about $RANDFILE usage
NOT BUG:OpenSSH 1.2.2p1 is dead and gone Errors detecting the OpenSSL library are however still common and are solved by checking config.log
NOT BUG:Correct info in the FAQ
NOT BUG:Adjust BN_mod_inverse algorithm selection according to experiments on Ultra-Sparcs (both 32-bit and 64-bit compilations)
NOT BUG:update (0.9.6a)
NOT BUG:comment
NOT BUG:code documentation
BUG:binary algorithm for modular inversion
NOT BUG:avoid '||' since Ultrix apparently doesn't understand it
NOT BUG:'||' '&&' and 'test -x' apparently don't work on Ultrix; also 'test' appears to be available as '[' only in 'if' conditions
NOT BUG:Avoid assert() in the library
NOT BUG:Add forgotten "-passin" option to smime.c usage help
NOT BUG:Resize a local buffer to accomodate the size requirements of AES Protect against future mistakes with an assert()
NOT BUG:Add the possibility to have AES removed in Windows as well Spotted by Harald Koch <chk@pobox.com>
NOT BUG:Don't use 'tt' uninitialized when reporting an error (we don't have an ASN1_TEMPLATE to complain about at this stage so errtt == NULL should be OK)
NOT BUG:Fix couple of memory leaks in PKCS7_dataDecode() (provided by Stephen)
NOT BUG:Unixware config
NOT BUG:don't use shell functions
NOT BUG:Correct a typo linux != linus
NOT BUG:Incorporate some changes that make OpenSSL compilable in CygWin
NOT BUG:Since vms.mar handles 32-bit integers do not use it on Alpha that's just a slowdown
NOT BUG:OpenVMS/Alpha should use 64 bits If nothing else there's performance to gain
NOT BUG:Make do_bsd-gcc-shared depend on do_gnu-shared instead of the non-existent linux-shared
NOT BUG:Fix warnings
NOT BUG:Make sure OPENSSL_SYS_.. is defined when we need it
BUG:This change should be suitable as a workaround for the Solaris x86 compiler bug reported in <01032110293775.22278@weba3.iname.net> (the '++seq[i]' condition is evaluated as 256 rather than 0 when the previous value is 255)
NOT BUG:Plug a memory leak Spotted by "Shijin" <shijin@comex.com>
NOT BUG:Reports on Windows DG-UX and older OpenVMS
NOT BUG:libfisdef.h and LIB do not exist on older VMS versions
BUG:Remove a typo in dgux-R4-gcc
NOT BUG:ENGINE_load_[private|public]_key had error handling that could return without releasing a lock This is the same fix as applied to OpenSSL-engine-0_9_6-stable minus the ENGINE_ctrl() change - the HEAD already had that fixed
NOT BUG:Actually there were two error cases that could return without releasing the lock - stupidly my last change addressed only one of them
NOT BUG:Don't return an error until the global lock is released
NOT BUG:Reports on VMS
NOT BUG:Rewrite CHOICE field setting code to properly handle combine in CHOICE options
NOT BUG:This was causing d2i_DSAPublicKey() to misbehave
NOT BUG:A few more reports
NOT BUG:Note reports
NOT BUG:avoid buffer overflow
NOT BUG:Note the Alpha asm change
NOT BUG:linux-elf verified
BUG:Beta 3 has been released and announced
NOT BUG:this time *really* fix the /../ check ..
NOT BUG:For -WWW fix test for ".." directory references (and avoid warning for index -1)
NOT BUG:News for 0.9.6a
NOT BUG:Fix bctest and add a workaround that should solve the problem with FreeBSD's /bin/sh
NOT BUG:Complete the des_encrypt to des_encrypt1 rename in the main development line as well
NOT BUG:One des_encrypt to des_encrypt1 I forgot to commit..
NOT BUG:Stress the news about the name change
NOT BUG:I forgot to rename des_encrypt to des_encrypt1 in libeay.num
NOT BUG:Since there has been reports of clashes between OpenSSL's des_encrypt() and des_encrypt() defined on some systems (Solaris and Unixware and maybe others) we rename des_encrypt() to des_encrypt1() This should have very little impact on external software unless someone has written a mode of DES since that's all des_encrypt() is meant for
NOT BUG:Add news section for OpenSSL 0.9.6a Please add what's missing
BUG:check CRT
BUG:check CRT
NOT BUG:mips
NOT BUG:Restore asm/mips3.s to be compiled and linked in since the bug has (at least hopefully :-)) been fixed
NOT BUG:The IRIX fix Asm recap and corresponding declation
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Include bn.h so we get BN_LLONG properly defined Otherwise we can forget things like %lld
NOT BUG:Reports seem to show that asm/mips3.s has faults To be investigated but let's avoid using it in the mean time
NOT BUG:For mips3 and alpha put the assembler file directives in separate variables and disable the Alpha assembler for now since it has been shown to fail
NOT BUG:The Alpha failure can be shown by adding the following numbers:
BUG:FFFFFFFFFFFFFF0000FF2E00000000EBFFFFFF0000D1 FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF46FFE0FFFF0000
NOT BUG:The result is:
BUG:1FFFFFFFFFFFEFF0000FF2E0000000032FFE0FEFF00D1
NOT BUG:The result should really be:
BUG:1FFFFFFFFFFFFFF0000FF2E0000000032FFE0FEFF00D1
NOT BUG:make update
NOT BUG:When using the native tools on Solaris make damn sure the native ld is used even if the user has GNU ld earlier in his $PATH
NOT BUG:gcc uses collect2 not ld to link things Therefore when using gcc there's no need fooling ourselves it's the gnu-shared method that we should use Do it for Solaris to begin with
NOT BUG:ln on Solaris expects -f to come before -s The linux-shared method is actually gcc-specific so call it gnu-shared as well
NOT BUG:Small AIX problems solved
NOT BUG:A lot of reports
NOT BUG:We really have no need for PEX_LIBS so empty it
NOT BUG:Add missing '#ifndef OPENSSL_NO_DSA'
NOT BUG:Remove redundant operations and update version info
NOT BUG:Harmonize CHANGES and STATUS files between the 0.9.6a branch and the trunk to keep diffs small
NOT BUG:Use stdlib.h to get size_t
NOT BUG:Update docs
NOT BUG:Since they aren't implemented yet EC_GFp_{recp,nist}_method() need to be "#if 0"'d or they will (re)appear as existing functions in util/libeay.num
NOT BUG:Tag EC_GFp_{nist,recp}_method as "NOEXIST" because they have not yet been implemented
NOT BUG:avoid linking problems when OpenSSL is built with no-dsa Spotted by Hellan,Kim KHE <khe@kmd.dk>
NOT BUG:Increase boundaries in EC_window_bits_for_scalar_size table
NOT BUG:Table for window sizes
NOT BUG:Update
NOT BUG:New cofiguration for Unixwre and SCO,with slightly better granularity Contributed by Tim Rice <tim@multitalents.net>
NOT BUG:Fix PKCS#12 key generation bug
NOT BUG:Explicitly ignore the exit code of ./bctest Usually the shell ignores it anyway in command substitution but Ultrix reportedly aborted the test when bctest returned 1
NOT BUG:Correct a typo which might have lead to a dump Noted by Martin Kraemer <Martin.Kraemer@Fujitsu-Siemens.com>
NOT BUG:An enhanced bctest submitted by Tim Rice <tim@multitalents.net> It now looks along $PATH for a working bc and returns the absolute path to one that does work
NOT BUG:Add copy_extensions option to 'ca' utility
NOT BUG:Add 'align' option to nameopt
NOT BUG:Add default values for display by the 'ca' utility to openssl.cnf
NOT BUG:Update docs
NOT BUG:Minimise the amount of -L when linking the shared libraries It seems like some Unixen (SCO) have opinions about too many -L
NOT BUG:bsdi-elf needs to link with -ldl
NOT BUG:For AIX 4.3 or above allow the use of dlfcn
NOT BUG:Overhaul the display of certificate details in the 'ca' utility This can now be extensively customised in the configuration file and handles multibyte strings and extensions properly
NOT BUG:This is required when extensions copying from certificate requests is supported: the user must be able to view the extensions before allowing a certificate to be issued
NOT BUG:Completely remove mont2 stuff It does not appear to be faster than the current Montgomery code except for very small moduli (somewhere between 192 and 224 bits in a 64-bit Sun environment and even less than 192 bits on 32 bit systems)
NOT BUG:Forgot "cvs add" so only the surrounding changes made it.. sigh
NOT BUG:avoid infinite loop
NOT BUG:error codes are longs not ints
NOT BUG:More error_data memory leaks
NOT BUG:It is a good thing to prepare the .def files
NOT BUG:Document the -certopt option to the x509 utility
NOT BUG:Add no_issuer option
BUG:Fix X509_print_ex() so it prints out newlines when certain fields are omitted
NOT BUG:The former ULTRASPARC preprocessor symbol is now called OPENSSL_SYSNAME_ULTRASPARC so we'd better check for that one
NOT BUG:Fix: return 0 if no error occured
NOT BUG:make update
NOT BUG:We need to build MINFO
NOT BUG:typo
NOT BUG:Use err_clear_data macro
NOT BUG:fix memory leak in err.c
NOT BUG:Rename function EC_GROUP_precompute to EC_GROUP_precompute_mult which indicate its purpose more clearly
NOT BUG:Add various X9.62 OIDs (GF(2^n) mostly left out.)
NOT BUG:Initial docs for PEM routines
NOT BUG:EC_METHOD based on bn_mont2 (not used in the library)
NOT BUG:Forcibly enable memory leak checking during "make test"
NOT BUG:Timings are not supposed to be enabled by default ..
NOT BUG:Add functions EC_POINT_mul and EC_GROUP_precompute The latter does nothing for now but its existence means that applications can request precomputation when appropriate
NOT BUG:handle negative scalars correctly when doing point multiplication
BUG:use fflush
BUG:Change timing output: We don't have "exponents" here curves are considered additive
NOT BUG:comment and error code update
NOT BUG:Remove files from Lenka's EC implementation
NOT BUG:More EC stuff including EC_POINTs_mul() for simultaneous scalar multiplication of an arbitrary number of points
NOT BUG:Document the change
NOT BUG:For some experiments it is sometimes nice to serve files with complete HTTP responses
NOT BUG:In crypto/ec #if 0 out structures which reference (currently) non existent functions because this breaks shared libraries
NOT BUG:Typo
NOT BUG:Add the 'ec' directory to mkdef.pl and mkfiles.pl so the Windows build can see it
NOT BUG:Fixup mkdef.pl so it doesn't mess up with function names longer than 39 characters in length
NOT BUG:Use 32bit longs on Alpha as well because that's what the VMS assembler code works with
NOT BUG:Of course the assembler code could differ between platforms That might happen in the future
NOT BUG:Instead of telling both 'make' and the user that ranlib errors can be tolerated hide the error from 'make' This gives shorter output both if ranlib fails and if it works
NOT BUG:Update docs
NOT BUG:Workaround for solaris64 linking problem (explicit "ar rs" is needed to create a symbol table)
BUG:Sun patches such as 109147-06 probably fix this problem but we can easily avoid it
NOT BUG:Consistently use 'void *' for SSL read peek and write functions
NOT BUG:Change the EVP_somecipher() and EVP_somedigest() functions to return constant EVP_MD and EVP_CIPHER pointers
NOT BUG:Update docs
NOT BUG:Bug fixes
NOT BUG:Fix ec_GFp_simple_cmp
NOT BUG:Use example group from Annex I of X9.62 in ectest.c
BUG:ssl23_peek
NOT BUG:add ssl23_peek
NOT BUG:Avoid problems with multi-line NAME sections
NOT BUG:Too many dollars..
NOT BUG:Implement EC_GFp_mont_method
NOT BUG:Fixes to make 'no-ec' work (it should not turn 'objects' into 'objts' for example)
NOT BUG:More method functions for elliptic curves and an ectest.c that actually tests something
NOT BUG:Bugfix: previously the serial number file could turn negative because an incompletely initialized ASN1_INTEGER was used
NOT BUG:Add newly learned knowledge from yesterday's discussion
NOT BUG:Write a small comment so we know..
NOT BUG:Build ectest too
NOT BUG:Some EC function names are really long Make aliases for VMS on VAX
NOT BUG:note the rand_win.c change
NOT BUG:Comment
NOT BUG:old MSVC versions don't have rdtsc use _emit instead
NOT BUG:Pointed out by Jeremy Cooper <jeremy@baymoo.org>
NOT BUG:Hide BN_CTX structure details
NOT BUG:Incease the number of BIGNUMs in a BN_CTX
NOT BUG:VMS catches up on the EC modifications
NOT BUG:Make EVP_Digest*() routines return a value
NOT BUG:TODO: update docs and make soe other routines which use EVP_Digest*() check return codes
NOT BUG:avoid compiler warning
NOT BUG:Constify BN_value_one
NOT BUG:Integrate ec_err.[co]
NOT BUG:"make depend"
NOT BUG:Throw out *all* absolute pathnames not matter what they look like The filenames we are interested in for Makefile dependencies are always relative
NOT BUG:Sort openssl.ec the configuration file for mkerr.pl
NOT BUG:Change mkerr.pl so that it puts the ERR_load_..._strings() prototype in header files that it writes
NOT BUG:Integrate ectest.c (which does not yet do anything)
NOT BUG:Order ERR_load_.. calls like the stuff in err.h
NOT BUG:Get rid of '#define ERR_file_name __FILE__' which is unnecessary indirection (It cannot possibly help to avoid duplicate 'name of file' strings in object files because the preprocessor does not work at object file level.)
NOT BUG:Let EC_POINT_copy do nothing if dest==src
NOT BUG:More 'TODO' items
NOT BUG:More method functions for EC_GFp_simple_method
NOT BUG:More method functions
NOT BUG:Some actual method functions (not enough yet to use the EC library though) including EC arithmetics derived from Lenka Fibikova's code (with some additional optimizations)
BUG:Code for better build under Darwin (MacOS X) Submitted by Brad Dominy <jdominy@darwinuser.org>
NOT BUG:..._init functions are method-specific too (they can't do much useful but they will have to set pointers to NULL)
NOT BUG:Optimized EC_METHODs need specific 'set_curve' and 'free' functions
NOT BUG:The next bunch of vaporware
NOT BUG:extra_data 'mixin' (This will be used for Lim/Lee precomputation data.)
NOT BUG:Oops ..
NOT BUG:In clear_free clear the complete structure just in case the method misses something
NOT BUG:Fix ERR_R_.. problems
NOT BUG:Implement dispatcher for EC_GROUP and EC_POINT method functions
NOT BUG:Initial EC_GROUP_new_curve_GFp implementation
NOT BUG:Add a few 'const's
NOT BUG:Forgot a '$'
NOT BUG:Change obj_.. generation so that it does not generate rubbish or abort with errors if no name is defined for some object which was the case for 'pilotAttributeType 27'
NOT BUG:Also avoid this very situation by assigning the name 'pilotAttributeType27'
NOT BUG:'is_at_infinity' tests don't need a BN_CTX
NOT BUG:New function declarations
NOT BUG:Add BN_CTX arguments where appropriate
NOT BUG:Rename 'EC_GROUP_set'-related functions to names similar to 'EC_GROUP_set_curve' because they don't care about the generator
NOT BUG:Add new functions
NOT BUG:DEC
NOT BUG:Add EC_GROUP_new_GFp prototype
NOT BUG:Change comments
BUG:Some declarations that outline what I intend to implement
NOT BUG:Update the VMS build scripts for EC
NOT BUG:Another file I had forgotten to add
NOT BUG:Add yet another (still empty) source code file that I forgot
NOT BUG:Add more EC vaporware (empty source code files I missed in my previous commit)
NOT BUG:Move ec.h to ec2.h because it is not compatible with what we will use
NOT BUG:Add EC vaporware: change relevant Makefiles and add some empty source files
NOT BUG:"make update"
BUG:Document the SSLv2 session reuse fix
NOT BUG:Add the possibility for option macros and start using it to indicate for Windows compilations if DLL linkage is required or not
NOT BUG:New option '-subj arg' for 'openssl req' and 'openssl ca' This sets the subject name for a new request or supersedes the subject name in a given request
NOT BUG:Add options '-batch' and '-verbose' to 'openssl req'
NOT BUG:Submitted by: Massimiliano Pala <madwolf@hackmasters.net> Reviewed by: Bodo Moeller
NOT BUG:increase emailAddress_max
NOT BUG:EC_set_half and the 'h' component of struct bn_ec_struct are unnecessary The computations for which h was used can be done more efficiently by using BN_rshift1
BUG:For SSLv2 return the SSLv2 method not the SSLv23 method This way it's possible to reuse an SSLv2 session
NOT BUG:Sort platforms lexicographically as well Also support more than two variants of a symbol
NOT BUG:Spelling corrected
NOT BUG:Introduce the possibility to access global variables through functions on platform were that's the best way to handle exporting global variables in shared libraries To enable this functionality one must configure with "EXPORT_VAR_AS_FN" or defined the C macro "OPENSSL_EXPORT_VAR_AS_FUNCTION" in crypto/opensslconf.h (the latter is normally done by Configure or something similar)
NOT BUG:To implement a global variable use the macro OPENSSL_IMPLEMENT_GLOBAL in the source file (foo.c) like this:
NOT BUG:OPENSSL_IMPLEMENT_GLOBAL(int,foo)=1; OPENSSL_IMPLEMENT_GLOBAL(double,bar);
NOT BUG:To declare a global variable use the macros OPENSSL_DECLARE_GLOBAL and OPENSSL_GLOBAL_REF in the header file (foo.h) like this:
NOT BUG:OPENSSL_DECLARE_GLOBAL(int,foo); #define foo OPENSSL_GLOBAL_REF(foo) OPENSSL_DECLARE_GLOBAL(double,bar); #define bar OPENSSL_GLOBAL_REF(bar)
NOT BUG:The #defines are very important and therefore so is including the header file everywere where the defined globals are used
NOT BUG:The macro OPENSSL_EXPORT_VAR_AS_FUNCTION also affects the definition of ASN.1 items but that structure is a bt different
NOT BUG:The largest change is in util/mkdef.pl which has been enhanced with better and easier to understand logic to choose which symbols should go into the Windows .def files as well as a number of fixes and code cleanup (among others algorithm keywords are now sorted lexicographically to avoid constant rewrites)
NOT BUG:Typo spotted by "Greg Stark" <gstark@ethentica.com>
NOT BUG:Fix bug in copy_email() which would not find emailAddress at start of subject name
NOT BUG:Fix a bug which caused BN_div to produce the wrong result if rm==num and num < 0
NOT BUG:%f conversion bug fix Submitted by: Henrik Eriksson <henrik.eriksson@axis.com>
NOT BUG:don't read from tty in test mode
NOT BUG:run self-test with no-krb5
BUG:MacOSX doesn't have ftime() Spotted by Pieter Bowman <bowman@math.utah.edu>
NOT BUG:Typo in comment
NOT BUG:Enhance OCSP_request_verify() so it finds the signers certificate properly and supports several flags
NOT BUG:make update Note that all *_it variables are suddenly non-existant according to libeay.num This is a bug that will be corrected Please be patient
NOT BUG:Add the CCITT pilot directory OIDs
NOT BUG:Trap an invalid ASN1_ITEM construction and print out the errant field for more ASN1 error conditions
NOT BUG:New function and options to check OCSP response validity
NOT BUG:Print out OID of unknown signature or public key algorithms
NOT BUG:Stop PKCS7_verify() core dumping with unknown public key algorithms and leaking if the signature verify fails
NOT BUG:Describe new callback for session id generation
NOT BUG:SSL_get_version() was an easy one :-)
BUG:That statement seems to be not true In fact I have said that I would like to use libtool but not automake
NOT BUG:Let's investigate that further or leave the question open for now
BUG:autoconf would be useful..
NOT BUG:Make OCSP cert id code tolerate a missing issuer certificate or serial number
NOT BUG:Oops forgot CHANGES entry for ASN1_ITEM_FUNCTIONS
NOT BUG:Get rid of ASN1_ITEM_FUNCTIONS dummy function prototype hack This unfortunately means that every ASN1_*_END construct cannot have a trailing ;
NOT BUG:make depend
NOT BUG:Initial support for ASN1_ITEM_FUNCTION option to change the way ASN1 modules are exported
NOT BUG:Still needs a bit of work for example the hack which a dummy function prototype to avoid compilers warning about multiple ;s
NOT BUG:I missed one
NOT BUG:Fix an oversight - when checking a potential session ID for conflicts with an SSL_CTX's session cache it is necessary to compare the ssl_version at the same time (a conflict is defined courtesy of SSL_SESSION_cmp() as a matching id/id_length pair and a matching ssl_version) However the SSL_SESSION that will result from the current negotiation does not necessarily have the same ssl version as the "SSL_METHOD" in use by the SSL_CTX - part of the work in a handshake is to agree on an ssl version!
NOT BUG:This is fixed by having the check function accept an SSL pointer rather than the SSL_CTX it belongs to
NOT BUG:[Thanks to Lutz for illuminating the full extent of my stupidity]
NOT BUG:Define the right macro for Linux and other GNU-based systems to get a correct declaration of strdup()
BUG:e_os.h defines Getenv()
NOT BUG:CONF_METHOD is one of the few places where you find MS_FAR I can't really see why we need to define these function pointers with MS_FAR if it's not done cosistently everywhere
NOT BUG:If we decide to support MS_FAR modifiers it's better to have the named something more unique for OpenSSL and to define them in e_os2.h
NOT BUG:Define the OPENSSL_NO_* macros as NO_* macros for the sake of applications thathaven't yet been changed
NOT BUG:e_os.h problems have been solved in the main branch
NOT BUG:undo previous change: "e_os.h" is now the official name for the file to include (but the OpenSSL_0_9_6-stable branche still has inconsistencies)
NOT BUG:include e_os.h as "openssl/e_os.h" (as elsewhere)
NOT BUG:e_os.h does not belong with the exported headers Do not put it there and make all files the depend on it include it without prefixing it with openssl/
NOT BUG:This means that all Makefiles will have $(TOP) as one of the include directories
NOT BUG:Since RAND_file_name() uses strlen make sure the number that's compared to it has the type size_t Included the needed headers to make that happen
NOT BUG:Use e_os2.h rather than opensslconf.h since some needed macros are defined there
NOT BUG:Exported header files should not include e_os.h
NOT BUG:Since opensslconf.h might be included over and over undefine OPENSSL_UNISTD before redefining it to avoid compiler warnings
BUG:One indirection level too little compared to the pre-CRYPTO_MEM_LEAK_CB time
NOT BUG:Windows does not know of strigs.h or strcasecmp so when in Windows make strcasecmp a macro to _stricmp
NOT BUG:Always include opensslconf.h even if it's already been done before The reason is that some parts are only included when certain other include files have been included
BUG:Also it seems that the rest of the OpenSSL code assumes that all kinds of M$ Windows are MSDOS as well..
NOT BUG:When inside a #if 0..#endif do not define anything
NOT BUG:Since SSL_add_dir_cert_subjects_to_stack isn't impemented on VMS there's no point creating an alias for it
NOT BUG:Include e_os2.h instead of opensslconf.h SSL_add_dir_cert_subjects_to_stack is not implemented on WIN32 and VMS so declare it the same way
NOT BUG:Rebuild ASN1 error codes to remove unused function and reason codes
NOT BUG:If a callback is generating a new session ID for SSLv2 then upon exiting the ID will be padded out to 16 bytes if the callback attempted to generate a shorter one The problem is that the uniqueness checking function used in callbacks may mistakenly think a 9-byte ID is unique when in fact its padded 16-byte version is not This makes the checking function detect SSLv2 cases and ensures the padded form is checked rather than the shorter one passed by the callback
NOT BUG:Note changes re: session ID generation callbacks etc
NOT BUG:This adds command-line support to s_server for controlling the generation of session IDs Namely passing "-id_prefix <text>" will set a generate_session_id() callback that generates session IDs as random data with <text> block-copied over the top of the start of the ID This can be viewed by watching the session ID s_client's output when it connects
NOT BUG:This is mostly useful for testing any SSL/TLS code (eg proxies) that wish to deal with multiple servers when each of which might be generating a unique range of session IDs (eg with a certain prefix)
NOT BUG:This change allows a callback to be used to override the generation of SSL/TLS session IDs in a server According to RFC2246 the session ID is an arbitrary value chosen by the server It can be useful to have some control over this "arbitrary value" so as to choose it in ways that can aid in things like external session caching and balancing (eg clustering) The default session ID generation is to fill the ID with random data
NOT BUG:The callback used by default is built in to ssl_sess.c but registering a callback in an SSL_CTX or in a particular SSL overrides this BTW: SSL callbacks will override SSL_CTX callbacks and a new SSL structure inherits any callback set in its 'parent' SSL_CTX The header comments describe how this mechanism ticks and source code comments describe (hopefully) why it ticks the way it does
NOT BUG:Man pages are on the way ..
NOT BUG:[NB: Lutz was also hacking away and helping me to figure out how best to do this.]
NOT BUG:'make update'
NOT BUG:'make update'
NOT BUG:Modify mkdef.pl to recognise and parse prprocessor conditionals of the form '#if defined(...) || defined(...) || ...' and '#if !defined(...) && !defined(...) && ...' This also avoids the growing number of special cases it was previously handling (some of them wrongly)
NOT BUG:I had forgotten to change mkerr.pl to use the new macro system
BUG:strdup() is a X/Open extension
NOT BUG:With later version of DEC C on VMS some functions (strcmp() for example) are declared with some extra linkage information This generates a warning when using the function name as a value to a regular function pointer with the "correct" definition of the function Therefore use a macro to cast the appropriate function on VMS
NOT BUG:Some functions like strdup() and strcasecmp() are defined in strings.h according to X/Open
NOT BUG:I forgot there was a reason why the inclusions and definition of u_int was made in a certain sequence This change restores the earlier "chain of command"
NOT BUG:OpenVMS catches up
NOT BUG:The callbacks in the NAME_FUNCS structure are not used directly as LHASH callbacks and their prototypes were consistent as they were These casts need reversing
NOT BUG:Also I personally find line breaks during parameter lists (ie a line ending in a comma) easier to read at a glance than line breaks at the end of a function call and before a dereference on the return value (ie a line ending in a closed-bracket followed by a line starting with "->")
NOT BUG:make it a loop as in dsa
NOT BUG:Get e_os2.h to get all the system definitions correctly
NOT BUG:Get the right cast for lhash callback functions
NOT BUG:Include string.h so mem*() functions get properly declared
NOT BUG:Fix typo
NOT BUG:A new bunch of too long symbols to hack OCSP_CRLID_new and OCSP_crlID_new clash on case-insensitive systems
NOT BUG:DEC C on VMS is pedantic by definition
NOT BUG:Include OpenSSL header files earlier so macros like OPENSSL_SYS_VMS get a chance to be defined Make a batter file name translator (uhm no that's not the finished variant :-))
NOT BUG:Include OpenSSL header files earlier so macros like OPENSSL_SYS_VMS get a chance to be defined
NOT BUG:Include opensslconf.h or the like early to make sure system macros get correctly defined
NOT BUG:Let VMS catch up
NOT BUG:DEC C on VMS is pedantic by definition
NOT BUG:Use sk_*_new_null() instead of sk_*_new(NULL) That avoids getting lots of silly warnings from the compiler
BUG:honour '-no_tmp_rsa'
NOT BUG:Include string.h so mem* functions get properly declared
NOT BUG:Include OpenSSL header files earlier so macros like OPENSSL_SYS_VMS get a chance to be defined
NOT BUG:Include string.h so mem* functions get properly declared
NOT BUG:Use 0 instead of NULL at least for function casts since there are variants of stdio.h that define NULL in such a way that it's "unsafe" to use for function pointer casting
NOT BUG:update
NOT BUG:Use new-style system-id macros everywhere possible I hope I haven't missed any
NOT BUG:This compiles and runs on Linux and external applications have no problems with it The definite test will be to build this on VMS
NOT BUG:Fix BN_[pseudo_]rand: 'mask' must be used even if top=-1
NOT BUG:Mention BN_[pseudo_]rand with top=-1 in CHANGES
NOT BUG:Use new-style system-id macros
BUG:I'm sick of the warnings about long long..
NOT BUG:Use BN_rand_range()
NOT BUG:Fix warning
NOT BUG:BN_rand_range() needs a BN_rand() variant that doesn't set the MSB
NOT BUG:note OPENSSL_issetugid()
NOT BUG:Temporary fix for build break It's still inconsistent - probably better to undo the whole OPENSSL_NO_* thing
NOT BUG:Make sure time() is properly declared
NOT BUG:Use the new-style system-identity macros
NOT BUG:I forgot to document the system identification macros
NOT BUG:Make all configuration macros available for application by making sure they are available in opensslconf.h by giving them names starting with "OPENSSL_" to avoid conflicts with other packages and by making sure e_os2.h will cover all platform-specific cases together with opensslconf.h
NOT BUG:I've checked fairly well that nothing breaks with this (apart from external software that will adapt if they have used something like NO_KRB5) but I can't guarantee it completely so a review of this change would be a good thing
NOT BUG:Remove temporary files when done
NOT BUG:make update
NOT BUG:An obvious but hard-to-see cut'n'paste error corrected
NOT BUG:New -set_serial options to 'req' and 'x509'
NOT BUG:Remove the old broken bio read of serial numbers in the 'ca' index file This would choke if a revoked certificate was specified with a negative serial number
NOT BUG:Fix typo in uid.c
NOT BUG:Do not insert things in syms{} and kind{} when parsing the header files Instead insert proper information in the $def string which will be properly munged later on
NOT BUG:Make the choice of "makedepend" program choosable through a switch
NOT BUG:VMS follows suit
NOT BUG:Memory leak detection bugfixes for multi-threading
NOT BUG:Add uid.{c,o}
BUG:Perl code patch contributed by "Kurt J Pires" <kjpires@iat.com> His own words are:
NOT BUG:The patch adds no new functionality (other than a simple test package) to the libraries but it allows them to be compiled with Perl5.6.0 It has only been tested under "Red Hat Linux release 7.0 (Guinness)" with the unpatched verion of OpenSSL 0.9.6 released last September
NOT BUG:Make it possible to use gcc to generate the dependency tables
NOT BUG:ispell
NOT BUG:pod format error
NOT BUG:New options to 'ca' utility to support CRL entry extensions
NOT BUG:Add revelant new X509V3 extensions
NOT BUG:Add OIDs
NOT BUG:Fix ASN1 memory leak code to pop info if external allocation used
BUG:Move entry to match chronologic orderering
NOT BUG:Don't forget to mention minor change
NOT BUG:Add "-rand" option to s_client and s_server
NOT BUG:That was misleading The problem won't happen with 0.9.6a anyway
NOT BUG:Include the newly reported problem with bc on FreeBSD 4.2
NOT BUG:Option to disable standard block padding with EVP API
NOT BUG:Add -nopad option to enc command
NOT BUG:Update docs
NOT BUG:New function OPENSSL_issetugid() Needs more work
NOT BUG:Initial OCSP SSL support
NOT BUG:IRIX bugfix
NOT BUG:Finish first round of session cache documentation
NOT BUG:Update of linux-ppc Contributed by MATSUURA Takanori <t-matsuu@protein.osaka-u.ac.jp>
NOT BUG:New manual page: SSL_CTX_set_mode
NOT BUG:New function OCSP_parse_url() and -url option for ocsp utility
NOT BUG:Doesn't handle SSL URLs yet
NOT BUG:Modify OCSP nonce behaviour
NOT BUG:Work around for libsafe "error"
NOT BUG:Re-order a couple of static functions and "#if 0" out unused ones - this gets rid of gcc warnings
NOT BUG:This change was a quick experiment that I'd wanted to try that works quite well (and is a good demonstration of how encapsulating the SSL in a memory-based state machine can make it easier to apply to different situations)
NOT BUG:The change implements a new command-line switch "-flipped <0|1>" which if set to 1 reverses the usual interpretation of a client and server for SSL tunneling Normally an ssl client (ie "-server 0") accepts "cleartext" connections and conducts SSL/TLS over a proxied connection acting as an SSL client Likewise an ssl server (ie "-server 1") accepts connections and conducts SSL/TLS (as an SSL server) over them and passes "cleartext" over the proxied connection With "-flipped 1" an SSL client (specified with "-server 0") in fact accepts SSL connections and proxies clear whereas an SSL server ("-server 1") accepts clear and proxies SSL NB: most of this diff is command-line handling the actual meat of the change is simply the line or two that plugs "clean" and "dirty" file descriptors into the item that holds the state-machine - reverse them and you get the desired behaviour
NOT BUG:This allows a network server to be an SSL client and a network client to be an SSL server Apart from curiosity value there's a couple of possibly interesting applications - SSL/TLS is inherently vulnerable to trivial DoS attacks because the SSL server usually has to perform a private key operation first even if the client is authenticated With this scenario the network client is the SSL server and performs the first private key operation whereas the network server serves as the SSL client Another possible application is when client-only authentication is required (ie the underlying protocol handles (or doesn't care about) authenticating the server) Eg an SSL/TLS version of 'ssh' could be concocted where the client's signed certificate is used to validate login to a server system - whether or not the client needs to validate who the server is can be configured at the client end rather than at the server end (ie a complete inversion of what happens in normal SSL/TLS)
NOT BUG:NB: This is just an experiment/play-thing using "-flipped 1" probably creates something that is interoperable with exactly nothing :-)
NOT BUG:More about session caching
NOT BUG:Include information that automatic query is a new feature
NOT BUG:Update for 0.9.7 with SSL_OP_CIPHER_SERVER_PREFERENCE
NOT BUG:Manual page for SSL_CTX_set_options() Unfortunately for some of the options someone much longer working with OpenSSL/SSLeay is needed
NOT BUG:Oops: It's RegTP not RegPT ..
NOT BUG:Add German SiG root certificates (extracted from the official cert registry file http://www.nrca-ds.de/ftp/pkd.ttp which contains a total of 288 certificates issued by the RegPT so far)
NOT BUG:disable stdin buffering in load_cert
NOT BUG:use case-insensitive comparison in set_table_opts (similar to how arguments such as -inform/-outform specifications are treated)
NOT BUG:Fix CRL printing to correctly show when there are no revoked certificates
NOT BUG:Make ca.c correctly initialize the revocation date
NOT BUG:Make ASN1_UTCTIME_set_string() and ASN1_GENERALIZEDTIME_set_string() set the string type: so they can initialize ASN1_TIME structures properly
NOT BUG:Simplify BN_rand_range
NOT BUG:New Option SSL_OP_CIPHER_SERVER_PREFERENCE allows TLS/SSLv3 server to override the clients choice; in SSLv2 the client uses the server's preferences
NOT BUG:Typo
BUG:Fix "wierd" typo as submitted by Jeroen Ruigrok/Asmodai <asmodai@wxs.nl>
NOT BUG:Various Win32 related fixed Make no-krb5 work in mkdef.pl 
NOT BUG:Fix warning in apps/engine.c
NOT BUG:Remove definitions of deleted functions
NOT BUG:Add missing definition of X509_VAL
NOT BUG:Various updates to mkdef.pl to cope with new aes and ASN1 code
BUG:fix editing error
NOT BUG:add linux-s390 configuration (based on information submitted by Denis Beauchemin <Denis.Beauchemin@Courrier.USherb.ca>)
NOT BUG:Add missing \n's to ocsp usage message
NOT BUG:Allow various options to be included for signing and verify of OCSP responses
NOT BUG:Documentation to follow..
NOT BUG:Urgh. this conflicted with the -VAfile patch I hope I haven't broken it
NOT BUG:The check for request including a nonce and response not having it was inversed Corrected Hopefully this will make it work without dumping core
NOT BUG:Add the -VAfile option to 'openssl ocsp' This option will give the client code certificates to use to only check response signatures I'm not entirely sure if the way I just implemented the verification is the right way to do it and would be happy if someone would like to review this
NOT BUG:use <= instead of ==
BUG:point out that RAND_load_file() etc are only for seed files not for entropy devices or sockets
NOT BUG:Note that EGD is used automatically
NOT BUG:cleanup
NOT BUG:Another comment change (Previous comment does not apply for range = 11000000.. or range = 100000...)
BUG:Change comments (The expected number of iterations in BN_rand_range never exceeds 1.333...)
NOT BUG:oops -- remove observation code
BUG:Integrate my implementation of a countermeasure against Bleichenbacher's DSA attack With this implementation the expected number of iterations never exceeds 2
NOT BUG:New semantics for BN_rand_range(): BN_rand_range(r min range) now generates r such that min <= r < min+range (Previously BN_rand_range(r min max) generated r such that min <= r < max It is more convenient to have the range; also the previous prototype was misleading because max was larger than the actual maximum.)
NOT BUG:platform specific CFLAGS don't belong into this Makefile
NOT BUG:Update documentation to match the state at 0.9.6 _and_ the recent changes
BUG:Bleichenbacher's DSA attack
NOT BUG:Modify access to EGD socket to deal with EINTR etc that can appear during connect() and other calls First seen on Unixware-7
NOT BUG:Unify access to EGD-socket for all RAND_egd_*() methods
NOT BUG:Fix AES code
NOT BUG:Update Rijndael source to v3.0
NOT BUG:Add AES OIDs
NOT BUG:Change most references of Rijndael to AES
NOT BUG:Add new draft AES ciphersuites
BUG:Change preferences for sockets of EGD-style entropy daemons to a more reasonable selection
NOT BUG:Fix typo preventing correct usage of -out option
BUG:Rijdael CBC mode and partial undebugged SSL support
NOT BUG:Improve the state machine
NOT BUG:Avoid coredumps for CONF_get_...(NULL ...)
NOT BUG:don't dump core
NOT BUG:format strings
NOT BUG:Fix potential buffer overrun for EBCDIC
NOT BUG:Fix a memory leak in BIO_get_accept_socket() This leak was small and only happened when the port number wasn't parsable ot the host wasn't possible to convert to an IP address Contributed by Niko Baric <Niko.Baric@epost.de>
NOT BUG:Include string.h (whis is in all relevant standards) instead of memory.h (which is not)
NOT BUG:New function to copy nonce values from OCSP request to response
NOT BUG:Make depend
NOT BUG:BN assembler is no longer option on x86
BUG:Can't remember why this was needed?
NOT BUG:Fix a warning
NOT BUG:Documenting session caching 2nd step
NOT BUG:Fix ASN1_TIME_to_generlizedtime()
BUG:Add protoype for OCSP_response_create()
NOT BUG:Add OCSP_request_sign() and OCSP_basic_sign() private key and certificate checks and make OCSP_NOCERTS consistent with PKCS7_NOCERTS
NOT BUG:Various OCSP responder utility functions
NOT BUG:Delete obsolete OCSP functions
NOT BUG:Largely untested at present..
NOT BUG:Clarify why SSL_CTX_use_certificate_chain_file() should be preferred
NOT BUG:Typo: on my screen it nicely wrapped around at 80 :-)
NOT BUG:If the source has already been succesfully queried do not try to open it again as file
NOT BUG:Document session caching first step
NOT BUG:Various function for commmon operations
NOT BUG:Tidy up the mess in bss_sock.c and bss_fd.c by placing them socket/fd code in separate files rather than trying to have them both share the same one
NOT BUG:Tolerate some "variations" used in some certificates
BUG:One is a valid CA which has no basicConstraints but does have certSign keyUsage
BUG:Other is S/MIME signer with nonRepudiation but no digitalSignature
NOT BUG:New manual page for a hardly known but important item :-)
NOT BUG:Document the change
NOT BUG:Increase consistency of header data (some mail readers really do not like spaces before the semicolon and besides other parts of this file makes the values without those spaces) and move spacing of continuation lines to support BIO's that break lines after each write
NOT BUG:Remove serial number file during 'make clean'
NOT BUG:Comment and indentation
NOT BUG:Make sk_sort tolearate a NULL argument
NOT BUG:New OCSP response verify option OCSP_TRUSTOTHER
NOT BUG:Documentation language corrections contributed by Chris Pepper <pepper@mail.reppep.com>
NOT BUG:Zero the premaster secret after deriving the master secret in DH ciphersuites
BUG:Insert a missing space to stop pod2man giving stroppy "malformed" warnings
NOT BUG:update
NOT BUG:Add debugging info to new ASN1 code to trace memory leaks
NOT BUG:Fix PKCS7 and PKCS12 memory leaks
NOT BUG:Initialise encapsulated content type properly
NOT BUG:Update "OAEP reconsidered" comment
NOT BUG:new year
NOT BUG:EVP_add_digest_alias additions to SS_library_init
NOT BUG:There is no C version of bn_div_3_words
NOT BUG:For improved compatibility with 'strange' certificates add some digest aliases (as found in OpenSSL_add_all_digests)
NOT BUG:Use OpenSSL_add_all_algorithms instead of the backwards compatibility alias SSLeay_add_all_algorithms
NOT BUG:More on the e_os.h mess ..
NOT BUG:Copy over just written manpage to the ones still missing
NOT BUG:Add entries for new manpages..
NOT BUG:Definition of NO_KRB5 in ssl.h for external applications
NOT BUG:Use the correct number of arguments in the example
NOT BUG:Mention the ./config script fixes
NOT BUG:Documentation about SSL_get_ex_data_X509_STORE_CTX_idx and SSL_get_ex_new_index() functionality Extended verify_callback() example to show the usage
NOT BUG:Fix to stop X509_time_adj() using GeneralizedTime
NOT BUG:Update ocsp utility documentation
NOT BUG:Fixes to various ASN1_INTEGER routines for negative case
NOT BUG:Enhance s2i_ASN1_INTEGER()
NOT BUG:Fix openssl passwd -1
NOT BUG:Additional functionality in ocsp utility: print summary of status info Check nonce values Option to disable verify Update usage message
NOT BUG:Rename status to string functions and make them global
NOT BUG:Don't shadow
BUG:Implement remaining OCSP verify checks in accordance with RFC2560
NOT BUG:Make the change log on the RAND_poll change a bit more explicit Suggested by Bodo Moeller
NOT BUG:Keep up with Unix
NOT BUG:Initial OCSP certificate verify Not complete it just supports a "trusted OCSP global root CA"
NOT BUG:link to the new manpage
NOT BUG:New '-extfile' option for 'openssl ca' This allows keeping extensions in a separate configuration file
NOT BUG:Submitted by: Massimiliano Pala <madwolf@comune.modena.it>
NOT BUG:Update the LHASH man page
NOT BUG:* Correct some prototypes and macros with respect to "const"ness
NOT BUG:* Add the extra macros and examples due to the lh_doall[_arg] modifications made recently The existing example is also reworked for consistency
NOT BUG:* Rewrite tweak and supplement bits of the existing comments that seemed (IMHO) to be a little convoluted and misleading
NOT BUG:* Add a NOTE section that explains the use of macros and avoiding function casts (ie generate a wrapper as with the macros or prototype any callback functions exactly to not require casting) Also explain the "const" approach taken in LHASH for the purposes of API comprehensibility and also application code auditing
NOT BUG:Change PKCS#12 key derivation routines to cope with non null terminated passwords
NOT BUG:Fix warning in apps/ca.c
NOT BUG:Preliminary ocsp utility documentation
NOT BUG:Fix ocsp usage message
NOT BUG:New OCSP utility This can generate parse and print OCSP requests It can also query reponders and parse or print out responses
NOT BUG:Still needs some more work: OCSP response checks and of course documentation
BUG:Disable RegQueryValueEx() call Problem reported by "Wolfgang Marczy" <WMarczy@topcall.co.at> in a message to openssl-dev (19 Dec 2000 13:40:51 +0100)
NOT BUG:New 'openssl ca -status <serial>' and 'openssl ca -updatedb' commands
NOT BUG:Submitted by: Massimiliano Pala <madwolf@comune.modena.it>
BUG:isspace must be used only on *unsigned* chars
NOT BUG:note strncpy problem
NOT BUG:When we are waiting for user action we should say this explicitly
NOT BUG:Fix typo in OCSP ASN1 module this caused invalid format in OCSP request signatures
NOT BUG:Add spaces to OCSP HTTP header
NOT BUG:Change X509_NAME_set() there's no reason why it should return an error if the destination points to NULL.. though it should if the destination is NULL
NOT BUG:Remove "AVAILABLE PATCH" that has now been applied
NOT BUG:Move ex_data.c entry from "NEEDS PATCH" to "OPEN ISSUES"
NOT BUG:New -newreq-nodes option to CA.pl
NOT BUG:Submitted by: Damien Miller <djm@mindrot.org>
NOT BUG:Add configuration for GNU Hurd
NOT BUG:OCSP basic response verify Very incomplete but will verify the signatures on a response and locate the signers certifcate
NOT BUG:Still needs to implement a proper OCSP certificate verify
NOT BUG:Fix warning in RAND_egd()
NOT BUG:No functional change but slightly improved code clarity
NOT BUG:After discussion with Richard change the new API for extended memory allocation callbacks so that it is no longer visible to applications that these live at a different call level than conventional memory allocation callbacks
NOT BUG:It's silly to use a different default for PERL than in the top Makefile (The default is never actually used though because the top Makefile passes its value of PERL down to sub-Makefiles.)
NOT BUG:Pass ${PERL} down to the Makefile in sub-directory "test" in "make tests"
NOT BUG:Use $(PERL) in place of hard-coded perl
NOT BUG:Add new items: - 0.9.6a is under development - a couple of illegal includes of <openssl/e_os.h> should be purged - ex_data sucks
NOT BUG:Last time I asked no-one appeared to remember if these "NEEDS PATCH" entries are still current or what they are about:
NOT BUG:o non-blocking socket on AIX o $(PERL) in */Makefile.ssl
NOT BUG:So I'll remove them for now
NOT BUG:make indentation consistent
NOT BUG:Add SSLEAY_DIR argument code for SSLeay_version Add '-d' option for 'openssl version' (included in '-a')
NOT BUG:'char' argument to islower must be converted to 'unsigned char'
NOT BUG:Add a pointer to digest options in the description of -fingerprint
NOT BUG:Fix C code generate by 'openssl dsaparam -C'
NOT BUG:Change prototypes for new CRYPTO_..._mem_ex_functions functions so that they match the function definitions (namely remove file/line parameters from free_func)
NOT BUG:As response to a user request to be able to use external memory handling routines that need file name and line number information I've added a call level to our memory handling routines to allow that kind of hooking
NOT BUG:Fix uni2asc() so it can properly convert zero length unicode strings Certain PKCS#12 files contain these in BMPStrings and it used to crash on them
NOT BUG:rsa_num is not used with NO_RSA
NOT BUG:oops void functions shouldn't try and return a value Strangely gcc didn't even give a warning for this yet HPUX cc considered it an error Reported by Lutz(@openssl.org)
NOT BUG:Add automatic query of EGD sockets to RAND_poll() The EGD sockets are only queried when the /dev/[u]random devices did not return enough entropy Only the amount of entropy missing to reach the required minimum is queried as EGD may be drained Queried locations are: /etc/entropy /var/run/egd-pool
NOT BUG:It was correctly pointed out to me that my CHANGES entry was a little thin on details :-)
NOT BUG:Don't cheat: when only getting several bytes from each source n is incremented correctly but RAND_add(..,n) counts the increasing n several times Only RAND_add(..,n) once entropy collection is finished
NOT BUG:Move all the existing function pointer casts associated with LHASH's two "doall" functions to using type-safe wrappers As and where required this can be replaced by redeclaring the underlying callbacks to use the underlying "void"-based prototypes (eg if performance suffers from an extra level of function invocation)
NOT BUG:Get rid of the function pointer casting in the debugging memory code due to LHASH usage NB: The callback type used as been suctioned off into crypto.h as CRYPTO_MEM_LEAK_CB to improve clarity
NOT BUG:This adds macros to implement (and/or declare) type-safe wrapper functions around the callbacks required in the LHASH code for the "doall" functions
NOT BUG:Also - fix the evil function pointer casting in the two lh_doall functions by deferring to a static utility function Previously lh_doall() was invoking lh_doall_arg() by casting the callback to the 2-parameter prototype and passing in a NULL argument This appears to have been working thus far but it's not a hot idea If the extra level of indirection becomes a performance hit we can just provide two virtually identical implementations for each variant later on
NOT BUG:Whilst in the process of fixing outstanding function-pointer casts in the LHASH code this evil was uncovered The cast was obscuring the fact that the function was prototyped to take 2 parameters when in fact it is being used as a callback that should take only one Anyway the function itself ignores the second parameter (thankfully) A proper cure is on the way but for now this corrects the inconsistency
NOT BUG:Keep up with Unix code It's beginning to be time to rethink the VMS build system..
NOT BUG:Because /dev/urandom has a better chance of giving us a good and quick answer take that one first
NOT BUG:Add prototypes for new OCSP functions
NOT BUG:Fix bug in OCSP_find_status()
NOT BUG:Change RAND_poll for Unix to try a number of devices and only read them for a short period of time (actually poll them with select() then read() whatever is there) which is about 10ms (hard-coded value) each
NOT BUG:Separate Windows and Unixly code and start on a VMS variant that currently just returns 0
NOT BUG:Add set of OCSP client functions All experimental and subject to addition modifcation or deletion
NOT BUG:Add two OCSP nonce utility functions
NOT BUG:Fix typo in status code name
NOT BUG:Keep up with the Unixly changes
NOT BUG:Modify OCSP API to more closely reflect application needs
NOT BUG:Add OCSP library name to error code
NOT BUG:Fix typo in OCSP nonce extension
NOT BUG:Set correct type in ASN1_STRING for INTEGER and ENUMERATED types
NOT BUG:Make ASN1_INTEGER_get() and ASN1_ENUMERATED_get() return -1 for invalid type rather than 0 (which is often valid) -1 may also be valid but this is less likely
NOT BUG:Load OCSP error strings in ERR_load_crypto_strings()
NOT BUG:Update OCSP API
NOT BUG:Remove extensions argument from various functions because it is not needed with the new extension code
NOT BUG:New function OCSP_cert_to_id() to convert a pair of certificates into an OCSP_CERTID
NOT BUG:New simple OCSP HTTP function This is rather primitive but just about adequate to send OCSP requests and parse the response
NOT BUG:Fix typo in CRL distribution points extension
NOT BUG:Fix ASN1 code so it adds a final null to constructed strings
NOT BUG:Fix the S/MIME code so it now works again and uses the new ASN1 code
NOT BUG:Make the DSO code for VMS work again First attempt
NOT BUG:The option line may start with a space which gives an empty option Make sure those are purged..
NOT BUG:Look for no-krb5 and add the definition of NO_KRB5 if it's there I've no idea were the KRB5 header files and libraries are placed on Win32 When there's better knowledge we might be able to process the other KRB5-related arguments as well..
NOT BUG:Temporary measure: if no KRB5 is defined add "no-krb5" to the options This is so mk1mf.pl can pick it up from Makefile
NOT BUG:Since asn1.h gets included recursively from many places the easiest is to have asn1.h include e_os.h and e_os2.h Of course this makes the unofficial "non-export" status of e_os.h a bit delicate..
NOT BUG:Rewrite PKCS#12 code and remove some of the old horrible macros
NOT BUG:Fix two evil ASN1 bugs Attempt to use 'ctx' when NULL if input is indefinite length constructed in asn1_check_tlen() and invalid pointer to ASN1_TYPE when reusing existing structure (this took *ages* to find because the new PKCS#12 code triggered it)
NOT BUG:Remove RSAref-related things
NOT BUG:Document
NOT BUG:If OPENSSL_BUILD_SHLIBCRYPTO (for files that end up as libcrypto objects) or OPENSSL_BUILD_SHLIBSSL (for files that end up as libssl objects) is defined redefine OPENSSL_EXTERN to be OPENSSL_EXPORT This is actually only important on Win32 and can safely be ignored in all other cases at least for now
NOT BUG:Define OPENSSL_EXPORT and OPENSSL_IMPORT and give OPENSSL_EXTERN the default value OPENSSL_IMPORT Explain the use of all those macros
NOT BUG:Remove anything connected to RSAref since that's gone by now Add the C macros OPENSSL_BUILD_SHLIBCRYPTO and OPENSSL_BUILD_SHLIBSSL to the build of the object files as appropriate for each library
BUG:Uhmm the keyword TRUE does not exist of course..
NOT BUG:Delete PKCS#12 redundant files
NOT BUG:ASN1_ITEM versions of ASN1_d2i_{fp bio} and replacement of most of the old wrappers A few of the old versions remain because they are non standard and the corresponding ASN1 code has not been reimplemented yet
NOT BUG:Replace the old ASN1_dup() with ASN1_item_dup() and zap some evil function pointers casts along the way..
NOT BUG:Check for deselection of KRB5 In fact skip it completely on VMS for now..
NOT BUG:Correct a typo
NOT BUG:"make update" plus a rewrite of both .num files
NOT BUG:Enhancements to mkdef.pl:
NOT BUG:* detect "unknown" algorithms (any C macro starting with NO_ that is not explicitely mentioned in mkdef.pl as a known algorithm) and report * add a number of algorithms that can be deselected * look in ssl/kssl.h as well * accept multiple whitespace (not just one SPC) in preprocessor lines
NOT BUG:ASN1_ITEM version of ASN1_dup() Might want something more efficient later..
NOT BUG:Update VMS build procedures to match the current status
NOT BUG:Add NO_ASN1_OLD to remove some old style functions: currently OpenSSL itself wont compile with this set because some old style stuff remains
NOT BUG:Change old functions X509_sign() X509_verify() etc to use new item based functions
NOT BUG:Replace OCSP function declarations with DECLARE macros
NOT BUG:ASN1_ITEM versions of sign verify pack and unpack
NOT BUG:The old function pointer versions will eventually go away
NOT BUG:New OCSP extension functions
NOT BUG:Get rid of unused error code
NOT BUG:Avoid compiler warnings in hw_ubsec.c: unused static functions and signed/unsigned mismatch
NOT BUG:This will of course change if some of the unused functions suddenly get used..
NOT BUG:X509V3_add_i2d() needs to be able to allocate a STACK_OF(X509_EXTENSION) so it should be passed STACK_OF(X509_EXTENSION) ** in the first argument
NOT BUG:Modify wrappers appropriately
NOT BUG:Finish SSL_peek/SSL_pending fixes
NOT BUG:Fix SSL_peek and SSL_pending
NOT BUG:New function X509V3_add_i2d() this is used for encoding replacing and deleting extensions
NOT BUG:Fix X509V3_get_d2i() so it uses takes note of new critical behaviour
NOT BUG:Re-order the options in tunala and add command switches like s_server for disabling different SSL/TLS protocol versions
NOT BUG:Various Win32 related fixes Doesn't compile yet on Win32 but it is getting there..
NOT BUG:Update mkdef.pl to handle ASN1_ANY and fix headers
NOT BUG:Stop various VC++ warnings
NOT BUG:Include some fixes from "Peter 'Luna' Runestig" <peter@runestig.com>
NOT BUG:Remove external declaration for des_set_weak_key_flag: it doesn't exist
NOT BUG:This adds support to 'tunala' for supplying DH parameters (without which it will not support EDH cipher suites) The parameters can either be loaded from a file (via "-dh_file") generated by the application on start-up ("-dh_special generate") or be standard DH parameters (as used in s_server etc)
NOT BUG:Some minor changes to the "tunala" demo
BUG:* Seal off some buffer functions so that only the higher-level IO functions are exposed
NOT BUG:* Using the above change to buffer add support to tunala for displaying traffic totals when a tunnel closes Useful in debugging and analysis - you get to see the total encrypted traffic versus the total tunneled traffic This shows not only how much expansion your data suffers from SSL (a lot if you send/receive a few bytes at a time) but also the overhead of SSL handshaking relative to the payload sent through the tunnel This is controlled by the "-out_totals" switch to tunala
NOT BUG:* Fix and tweak some bits in the README
NOT BUG:Eg sample output of "-out_totals" from a tunnel client when tunneling a brief "telnet" session
NOT BUG:Tunnel closing traffic stats follow SSL (network) traffic to/from server; 7305 bytes in 3475 bytes out tunnelled data to/from server; 4295 bytes in 186 bytes out
NOT BUG:branches have been merged
NOT BUG:Stop build when an error occurs "Peter 'Luna' Runestig" <peter+openssl-dev@runestig.com>
NOT BUG:Don't access non-existing element buf[256] use buf[255] instead
NOT BUG:Submitted by: draslar <draslar@elray.ch>
NOT BUG:Split a CHANGES entry so that one of the halves matches the corresponding new entry in the OpenSSL_0_9_6-stable branch
NOT BUG:Fixes to OCSP print code
NOT BUG:Don't try to print request certificates if signature is not present
NOT BUG:Remove unnecessary test for certificates being NULL
NOT BUG:Fix typos in printed output
NOT BUG:Tidy up output
NOT BUG:Fix for typo in OCSP_SERVICELOC ASN1 template
NOT BUG:Also give a bit more info in CHANGES about the ASN1 revision
NOT BUG:fix indentation
BUG:Don't hold CRYPTO_LOCK_RSA during time-consuming operations
NOT BUG:Add a comment (intended change)
BUG:Import s2_pkt.c wbuf fixes from OpenSSL_0_9_6-stable branch
NOT BUG:Comment correction
NOT BUG:Obtain lock CRYPTO_LOCK_RSA before creating BN_MONT_CTX structures and setting rsa->_method_mod_{n,p,q}
NOT BUG:Submitted by: "Reddie Steven" <Steven.Reddie@ca.com>
NOT BUG:undo previous change: '-prexit' is already available in current versions of s_client
NOT BUG:Redo OCSP response printing Remove duplicate or obsolete code Delete some redundant files
NOT BUG:When mentioning features that don't exist in current releases of OpenSSL (such as the new undocumented '-prexit' option to s_client) the FAQ should point out that they don't: The FAQ is not just part of the release it's current version is also published on the web
NOT BUG:Simplify preprocessor statements
NOT BUG:Add OCSP service locator extension
NOT BUG:Do not poll DEVRANDOM if weäre building without an file pointer API Spotted by "David Schwartz" <davids@webmaster.com>
NOT BUG:Make sure each FAQ item has an index entry
NOT BUG:Add support for the noCheck OCSP extension This is just a NULL and appears in a certificate
NOT BUG:Make mkdef.pl parse some ASN1 IMPLEMENT macros
NOT BUG:Initial support for variables in DEF files
NOT BUG:Add a couple of FAQs
NOT BUG:"Andrew W Gray" <agray@iconsinc.com> says /GD is no longer a valid compiler switch
NOT BUG:If CONF_get_string returns NULL and we want to tolerate this (e.g. use a default) we have to call ERR_clear_error()
NOT BUG:Locking issues
NOT BUG:Implement some standard OCSP extensions in the v3 code These are all raw print only extensions at present
NOT BUG:The C version of bn_sub_part_words is needed not only in NO_ASM configurations
NOT BUG:Very few in the "README" is up-to-date
NOT BUG:Add OCSP nonce extension to supported extensions
NOT BUG:This is a little unusual because it can contain no structure i.e the extension OCTET STRING content octets do not contain a DER encoded structure
NOT BUG:Make a note of the new engine
NOT BUG:This is an engine contributed by Broadcom - it is meant to support the BCM5805 and BCM5820 units So far I've merely taken a skim over the code and changed a few things from their original contributed source (de-shadowing variables removing variables from the header and re-constifying some functions to remove warnings) If this gives compilation problems on any system please let me know We will hopefully know for sure whether this actually functions on a system with the relevant hardware in a day or two :-)
NOT BUG:New function X509V3_extensions_print() this removes extension duplication from the print routines
NOT BUG:Reorganisation of OCSP code: initial print routines in ocsp_prn.c Doesn't work fully because OCSP extensions aren't reimplemented yet
NOT BUG:Implement some ASN1 functions needed to compile OCSP code
NOT BUG:typo
NOT BUG:The BN_mul bug test apparently is no longer needed
NOT BUG:First step towards SSL_peek fix
NOT BUG:Update
NOT BUG:New function X509_signature_print() to remove some duplicate code from certificate CRL and request printing routines
NOT BUG:Change the PKCS7 structure to use SEQUENCE OF for the authenticated attributes: this is used to retain the original encoding and not break signatures
NOT BUG:Support for a SET OF which reorders the STACK when encoding a structure This will be used with the PKCS7 code
NOT BUG:c&p error spotted by Martin Forssen
NOT BUG:Replace the old style OCSP ASN1 module
NOT BUG:Constification of the data of a hash table This means the callback functions need to be constified and therefore meant a number of easy changes a little everywhere
NOT BUG:Now if someone could explain to me why OBJ_dup() cheats..
NOT BUG:Problem: bn_mul_normal() misbehaves if the size of b is 0 Solution: multiply a with 0 putting the result in r and return
NOT BUG:In bn_mul_recursive() make sure the comba routines are only called when both a and b are of the exact right size This may change to something better later
NOT BUG:When using -pedantic it's a good thing to define PEDANTIC as well Also define a second debugging configuration without assembler
NOT BUG:Stop extension creation code core dumping
NOT BUG:This was caused by no initialising the buffer to NULL when using the auto allocating version if i2d
NOT BUG:Rewrite the extension code to use an ASN1_ITEM structure for its ASN1 operations as well as the old style function pointers (i2d d2i new free) Change standard extensions to support this
NOT BUG:Fix a warning in BN_mul() bn_mul.c about uninitialised 'j'
NOT BUG:Add description of SSL_[CTX_]_check_private_key()
NOT BUG:SSL_new() may potentially add a certfificate Therefore wen duplicating the certificate that is in the original SSL remove the one that SSL_new() provided if any Spotted by: Mike Zeoli <zeoli@roguewave.com>
NOT BUG:Change/add comments
NOT BUG:Stop on bntest error
NOT BUG:*** empty log message ***
NOT BUG:Make TYPE_RSA the default type instead of just setting it when -new is given That also allows the arguments to come in any order (-new last for example)
NOT BUG:Use continuation lines in test/bctest as far as it is possible to dermine what the expression should look like Apparently CVS does not like lines longer than about 2^10 characters
NOT BUG:Don't throw away bctest's error messages
NOT BUG:Test for SCO bc bug
NOT BUG:Next step in tidying up the LHASH code
NOT BUG:DECLARE/IMPLEMENT macros now exist to create type (and prototype) safe wrapper functions that avoid the use of function pointer casting yet retain type-safety for type-specific callbacks However most of the usage within OpenSSL itself doesn't really require the extra function because the hash and compare callbacks are internal functions declared only for use by the hash table So this change catches all those cases and reimplements the functions using the base-level LHASH prototypes and does per-variable casting inside those functions to convert to the appropriate item type
NOT BUG:The exception so far is in ssl_lib.c where the hash and compare callbacks are not static - they're exposed in ssl.h so their prototypes should not be changed In this last case the IMPLEMENT_LHASH_*** macros have been left intact
NOT BUG:bn_part_sub_word prototype
NOT BUG:Merge from the ASN1 branch of new ASN1 code to main trunk
NOT BUG:Lets see if the makes it to openssl-cvs :-)
NOT BUG:Add manual pages for certficate/key loading and friends
NOT BUG:Placeholder for SCO bc bug detection
NOT BUG:Fix some things that look like bugs
NOT BUG:One problem that looked like a problem in bn_recp.c at first turned out to be a BN_mul bug An example is given in bn_recp.c; finding the bug responsible for this is left as an exercise
NOT BUG:TEST_MUL and TEST_SQR added
NOT BUG:Sign-related fixes (and tests)
NOT BUG:BN_mod_exp_mont does not work properly yet if modulus m is negative (we want computations to be carried out modulo |m|)
NOT BUG:Move 'q->neg = 0' to those places where it is needed (just in cases someone uses a negative modulus)
NOT BUG:BN_mod_sqrt documentation/comment
NOT BUG:Don't check for bc at all We can now run a meaningful test even if it is missing
NOT BUG:remove a comment that shouldn't have been there any more
NOT BUG:Faster BN_mod_sqrt algorithm for p == 5 (8)
NOT BUG:Printing "verify ..." should not be counted as a test for the "xxx tests passed" message
NOT BUG:During the self test we only want to know what bctest says on stderr..
NOT BUG:Have the self test use bctest to check that bc is sane
NOT BUG:Use bc's "print" feature whenever it is available not just on certain platforms
NOT BUG:Add a comment
NOT BUG:Workaround for broken (or missing) bc
BUG:remove useless instruction
NOT BUG:Intel assembler version for bn_sub_part_words() I haven't got reliable timings yet please try it out!
NOT BUG:another fix for the debug print
NOT BUG:test_mod_mul is useful let's run it more often
NOT BUG:move constants for debug functions to end of file
NOT BUG:Update the internal docs
NOT BUG:Typo and additional information about cert-chain building
NOT BUG:Add EXAMPLES for SSL_CIPHER_description() output
NOT BUG:Discuss http://www.shoup.net/papers/oaep.ps.Z
NOT BUG:On Windows Rainbow uses _stdcall convention under Windows Spotted by plin <plin@rainbow.com>
NOT BUG:push the flags too
NOT BUG:looks like it works now
NOT BUG:save registers in the debug output code (return value is overwritten too)
NOT BUG:more of the same: add printf() for perlasm
NOT BUG:minor modification to the previous change
NOT BUG:PERLASM - the wierdest programming language since Intercal
NOT BUG:add debug output facilities
NOT BUG:Use assert as in the rest of the BN library
NOT BUG:Improve formatting
NOT BUG:It's completely unnecessary to add a compression algorithm that is really undefined Spotted by Jeffrey Altman <jaltman@columbia.edu>
NOT BUG:Remove the last bn_wexpand()s that made us break constness Of course that means we need to handle the cases where the two arrays to bn_mul_recursive() and bn_mul_part_recursive() differ in size
NOT BUG:I haven't yet changed the comments that describe bn_mul_recursive() and bn_mul_part_recursive() I want this to be tested by more people before I consider this change final Please test away!
NOT BUG:Change error message to "bignum too long"
NOT BUG:Sync up with a minor change in lhash.h
NOT BUG:ANSI C doesn't allow trailing semi-colons after a function's closing brace so these macros probably shouldn't be used like that at all So this change removes the misleading comment and also adds an implicit trailing semi-colon to the DECLARE macros so they too don't require one
NOT BUG:Update the documentation to the current state of the LHASH changes There will probably be more when the lh_doall[_arg] callbacks are similarly tidied up but this 'pod' should now be current
NOT BUG:Make a note of the LHASH changes
NOT BUG:Make the remaining LHASH macro changes This should leave no remaining cases of function pointer casting in lh_new() calls - and leave only the lh_doall and lh_doall_arg cases to be finished
NOT BUG:Fix warnings
NOT BUG:include <limits.h>
NOT BUG:Don't allow BIGNUMs to become so large that computations with dmax might overflow
NOT BUG:Use the new LHASH macros to declare type-safe wrapper functions that can be used as the hash/compare callbacks without function pointer casting
NOT BUG:For now this is just happening in the apps/ directory whilst a few people check the approach The rest of the library will be moved across to the same idea if there's no problems with this
NOT BUG:Next step in tidying up the LHASH code This commit defines DECLARE and IMPLEMENT macros for defining wrapper functions for "hash" and "cmp" callbacks that are specific to the underlying item type in a hash-table This prevents function pointer casting altogether and also provides some type-safety because the macro does per-variable casting from the (void *) type used in LHASH itself to the type declared in the macro - and if that doesn't match the prototype expected by the "hash" or "cmp" function then a compiler error will result
NOT BUG:NB: IMPLEMENT macros are not required unless predeclared forms are required (either in a header file or further up in a C file than the implementation needs to be) The DECLARE macros must occur after the type-specific hash/cmp callbacks are declared Also the IMPLEMENT and DECLARE macros are such that they can be prefixed with "static" if desired and a trailing semi-colon should be appended (making it look more like a regular declaration and easier on auto-formatting text-editors too)
NOT BUG:Now that these macros are defined I will next be commiting changes to a number of places in the library where the casting was doing bad things After that the final step will be to make the analogous changes for the lh_doall and lh_doall_arg functions (more specifically their callback parameters)
NOT BUG:Add a comment to explain the purpose of bn_cmp_part_words()
NOT BUG:last commit was wrong Now it works :)
BUG:argl
BUG:remember the problem with ftime()
NOT BUG:forgot to remove the loop variable
NOT BUG:Loops like this one:
BUG:if (bp == NULL) for (j=0; j<10000; j++) BN_add(&c,&a,&b);
BUG:seem to be pretty useless and bp never is NULL anyway
NOT BUG:Move the rijndael "test" to the bf and cast tests
NOT BUG:Note the bntest change
NOT BUG:The *_part_words functions are not static
NOT BUG:New function BN_bntest_rand() to detect more BN library bugs
NOT BUG:The bn_cmp_part_words bug was only caught in the BN_mod_mul() test not in the BN_mul() test so apparently the choice of parameters in some cases is bad
NOT BUG:Fix bn_cmp_part_words() and move it to bn_lib.c
NOT BUG:remove unused static function
NOT BUG:First step in tidying up the LHASH code The callback prototypes (and casts) used in the lhash code are about as horrible and evil as they can be For starters the callback prototypes contain empty parameter lists Yuck
NOT BUG:This first change defines clearer prototypes - including "typedef"'d function pointer types to use as "hash" and "compare" callbacks as well as the callbacks passed to the lh_doall and lh_doall_arg iteration functions Now at least more explicit (and clear) casting is required in all of the dependant code - and that should be included in this commit
NOT BUG:The next step will be to hunt down and obliterate some of the function pointer casting being used when it's not necessary - a particularly evil variant exists in the implementation of lh_doall
NOT BUG:Write a first HOWTO on how to create certificates This is currently a draft
NOT BUG:Correct a mail address..
NOT BUG:Document the addition of Kerberos stuff
NOT BUG:Typo corrected
BUG:functionality for BN_mod_sqrt timings
NOT BUG:"make depend"
NOT BUG:update
NOT BUG:GPL FAQ
NOT BUG:I hope this adequately summarizes the results of all those disussions
NOT BUG:Borland C fix
NOT BUG:typo
NOT BUG:Recognise Darwin as well For now have it do exactly the same thing as for Rhapsody
NOT BUG:COMP_zlib should always be declared even if it is not functional
NOT BUG:Don't dump core in ssltest
NOT BUG:Fix the recently introduced test that checks if the result is 0
BUG:First tentative impementation of Kerberos 5 cryptos and keys for SSL/TLS Implemented by Vern Staats <staatsvr@asc.hpc.mil> further hacked and distributed by Jeffrey Altman <jaltnab@columbia.edu>
NOT BUG:Fix BN_rshift which caused lots of trouble
NOT BUG:Remove randomness from the test These constants give me a segment violation in test_kron on a 32 bit system
NOT BUG:BN_mod_exp(r,a,p,m,ctx) should not be called with r == p But even if this is avoided there are still segmentation violations (during one of the BN_free()s at the end of test_kron in some cases in other cases during BN_kronecker or later in BN_sqrt; choosing a different exponentiation algorithm in bntest.c appears to influence when the SIGSEGV takes place)
BUG:It's "#elif" not "#elsif"
NOT BUG:A few bug fixes for Windows
NOT BUG:Changes to Lenka's Montgomery implementation
NOT BUG:Submitted by: Lenka Fibikova
NOT BUG:New format for the FAQ We now have different sections for different types of questions Hopefully that'll make them easier to spot and specially easier to refer to
NOT BUG:Corrections to the comments in BN_mod_inverse
NOT BUG:The compression method may be undefined for some reason that has generated errors Therefore print whatever error there may be..
NOT BUG:Simplify and provide the possibility to clean a compression method
NOT BUG:comp_methods in a SSL_CTX points at an internal database Do *not* free that since it's shared by all SSL_CTX's present and future
NOT BUG:Turn off memory checking when loading new compression algorithms
NOT BUG:COMP_METHOD has a new argument since some time back..
NOT BUG:Make it possible to test SSL compression
NOT BUG:Change c_zlib further to allow loading a shared zlib on all operating systems where such an operation is supported
NOT BUG:BN_mod_exp problems ..
NOT BUG:Changes to c_zlib.c to make ZLIB.DLL dynamically loadable under Windows Really this should probably be done on Unix as well but that will be a later story..
NOT BUG:Move reduction step from BN_mod_exp to BN_mod_exp_mont_word Fix BN_mod_exp_simple for a==0 (mod m) Skip useless round in BN_mod_sqrt (1 is always a square no need to test BN_kronecker for it)
NOT BUG:* Fix a slight bug in the state-machine This caused the client end of a tunnel to not pro-actively close down when failing an SSL handshake
NOT BUG:* Change the cert-chain callback - originally this was the same one used in s_client and s_server but the output's as ugly as sin so I've prettied tunala's copy output up a bit (and made the output level configurable)
NOT BUG:* Remove the superfluous "errors" from the SSL state callback - these are just non-blocking side-effects
NOT BUG:bn_modfs.c is no longer needed a BN_sqrt implementation exists in bn_sqrt.c now
NOT BUG:Fix bntest.c problem -- one of the primes got lost
NOT BUG:Handle special cases correctly in exponentation functions
NOT BUG:test_bn still fails in the BN_sqrt test because small primes appear to turn into zero for no obvious reason leading to "div by zero" errors
BUG:BN_mod_sqrt
BUG:BN_sqrt
BUG:Add a warning about the usage of the montgomery functions (if the inputs are not reduced modulo m the outputs won't be either)
NOT BUG:Amend the original CHANGES log entry The ex_data handling has been similarly modified now on DH and DSA
NOT BUG:BN_legendre is no longer needed now that OpenSSL has BN_kronecker
NOT BUG:Do to DH and DSA what has already been done to RSA This involves moving the initialisation and cleanup of "ex_data" elements to before an init() handler and after a finish() handler respectively
NOT BUG:mark a bug
NOT BUG:Fix BN_kronecker so that it works correctly if 'a' is negative (we need the two's complement of BN_lsw then)
NOT BUG:More little changes to the tunala demo;
NOT BUG:* A little bit of code-cleanup * Reformat the usage string (not so wide) * Allow adding an alternative (usually DSA) cert/key pair (a la s_server) * Allow control over cert-chain verify depth
NOT BUG:BN_to_montgomery expects its inputs to be in the interval 0 . modulus-1 so we have to reduce the random numbers used in test_mont
NOT BUG:Before this change test_mont failed in [debug-]solaris-sparcv9-gcc configurations ("Montgomery multiplication test failed!" because the multiplication result obtained with Montgomery multiplication differed from the result obtained by BN_mod_mul) Substituing the old version of bn_gcd.c (BN_mod_inverse) did not avoid the problem
NOT BUG:The strange thing is that it I did not observe any problems when using debug-solaris-sparcv8-gcc and solaris-sparcv9-cc as well as when compiling OpenSSL 0.9.6 in the solaric-sparcv9-gcc configuration on the same system
NOT BUG:Log security relevant change
NOT BUG:fix for Borland C
NOT BUG:add missing braces
NOT BUG:Store verify_result with sessions to avoid potential security hole For the server side this was already done one year ago :-(
BUG:Fix warnings in expspeed.c (but the segmentation fault remains)
NOT BUG:Improve readability of bn_shift.c
NOT BUG:Add comment in bn_lib.c (why zero data between top and max?)
NOT BUG:Change bntest.c output for BN_kronecker test
BUG:BN_bin2bn did *not* contain an off-by-one error; I'm still investigating what caused the segementation fault (maybe "make clean; make" will cure it ...) But BN_bin2bn should always reset ret->neg
NOT BUG:Expand expspeed.c to make BN_kronecker timings This caused a segmentation fault in calls to malloc so I cleaned up bn_lib.c a little so that it is easier to see what is going on The bug turned out to be an off-by-one error in BN_bin2bn
NOT BUG:Implement BN_kronecker test
NOT BUG:Modify "CHANGES" entry for BN_mod_inverse (it's not just avoiding BN_div that increases performance avoiding BN_mul also helps)
BUG:avoid segmentation fault
NOT BUG:Make BN_mod_inverse a little faster
NOT BUG:Improve BN_mod_inverse performance
NOT BUG:Get the BN_mod_exp_mont bugfix (for handling negative inputs) correct this time
NOT BUG:Copy and paste error.. bn_add_part_words() should of course call bn_add_words() not bn_sub_words()..
NOT BUG:Make s_client/s_server-style cert verification output configurable by command line and make the peer-authentication similarly configurable
NOT BUG:use standard C
NOT BUG:Minor tweaks and improvements to the tunala demo
NOT BUG:- Add "-cipher" and "-out_state" command line arguments to control SSL cipher-suites and handshake debug output respectively
NOT BUG:- Implemented error handling for SSL handshakes that break down This uses a cheat - storing a non-NULL pointer as "app_data" in the SSL structure when the SSL should be killed
NOT BUG:A typo and a couple of logic errors fixed I think there may still be one or two kinks lurking around but it now appears to deal with the basic test cases ok
NOT BUG:Use BN_pseudo_rand instead of BN_rand
BUG:Timings
NOT BUG:Note that SSL_peek has been disabled
NOT BUG:Addapt to added files in the BIGNUM section
NOT BUG:Correct a bug in BN_kronecker
NOT BUG:Sketch the test for BN_kronecker
NOT BUG:Comments on SSL_peek deficiencies
NOT BUG:Disable SSL_peek until it is fixed
NOT BUG:Add test_kron function which will contain a test for BN_kronecker
NOT BUG:Add bn_kron.c (BN_kronecker) which I forgot in the previous commit
NOT BUG:Also add the next file in advance so that I can't forget this one :-)
NOT BUG:Undo previous commit which was an accident
NOT BUG:Fix BN_is_.. macros Fix BN_gcd Analyze BN_mod_inverse Add BN_kronecker "make update"
NOT BUG:Change submitted files so that they compile (in particular use BN_CTX_start/get/end instead of accessing ctx->tos)
NOT BUG:Change indentation to "EAY" style
NOT BUG:Change submitted files so that they compile (in particular use BN_CTX_start/get/end instead of accessing ctx->tos)
NOT BUG:Change indentation to "EAY" style
NOT BUG:It was a small change but it *could* conceivably affect people - so I'm making a note in the CHANGES file
NOT BUG:Ensure that the "ex_data" member of an RSA structure is initialised before the RSA_METHOD's "init()" handler is called and is cleaned up after the RSA_METHOD's "finish()" handler is called Custom RSA_METHODs may wish to initialise contexts and other specifics in the RSA structure upon creation and that was previously not possible - "ex_data" is where that stuff should go and it was being initialised too late for it to be used
NOT BUG:More BN_mod_.. functions
NOT BUG:Add bn_mod.c (should have happend in the previous commit ...)
NOT BUG:BN_swap manual page
BUG:modular arithmetics
NOT BUG:"make update"
BUG:Remove CR at line ends
NOT BUG:Elliptic curves over GF(p) new BIGNUM functions Montgomery re-implementation
NOT BUG:These new files will not be included literally in OpenSSL but I intend to integrate most of their contents Most file names will change and when the integration is done the superfluous files will be deleted
NOT BUG:Submitted by: Lenka Fibikova <fibikova@exp-math.uni-essen.de>
NOT BUG:Correct a number of syntax errors
NOT BUG:Addapt the VMS scripts to the changes in the Makefiles
NOT BUG:Remove RSAREF (not used)
NOT BUG:You can still get the code using tag "rsaref"
NOT BUG:Addapt the VMS scripts to the changes in the Makefiles
NOT BUG:Reimplement bn_div_words bn_add_words and bn_sub_words for VAX I'm a little bit nervous about bn_div_words as I don't know what it's supposed to return on overflow For now I trust the rest of the system to give it numbers that will not cause any overflow..
NOT BUG:Avoid getting warnings about unary - being used on unsigned integer
NOT BUG:Oops! Read a full buffer instead of some spurious number from elswhere
NOT BUG:'echo on' works better all over than 'echo=on' We had the same problem in some other file but I can't recall which
NOT BUG:Better handling of EVP names add EVP to speed
NOT BUG:Make sure bs is assigned NULL when it's free'd or there will be an (incorrect) attempt to free it once more..
NOT BUG:I wonder if I do too much..
NOT BUG:Add news items early Please fill in with what I have forgotten
NOT BUG:Remove two bn_wexpand() from BN_mul() which is a step toward getting BN_mul() correctly constified avoids two realloc()'s that aren't really necessary and saves memory to boot This required a small change in bn_mul_part_recursive() and the addition of variants of bn_cmp_words() bn_add_words() and bn_sub_words() that can take arrays with differing sizes
NOT BUG:The test results show a performance that very closely matches the original code from before my constification This may seem like a very small win from a performance point of view but if one remembers that the variants of bn_cmp_words() bn_add_words() and bn_sub_words() are not at all optimized for the moment (and there's no corresponding assembler code) and that their use may be just as non-optimal I'm pretty confident there are possibilities..
NOT BUG:This code needs reviewing!
NOT BUG:Remove a declaration for a function that does not exist
NOT BUG:Make the definition of bn_add_words() match the definition
NOT BUG:I might want to debug the assembler modules..
BUG:Increase permissible ClientKeyExchange message length
NOT BUG:include 'err' label only when it is actually used
NOT BUG:Make sure BN_DIV2W is not defining when defining it and remove the declarations of bn_add_part_words() and bn_sub_part_words() since they do not exist
NOT BUG:tag SSL_peek bugs
NOT BUG:Documentation on using the SSL library with non-blocking I/O
NOT BUG:Improve usability of 'openssl passwd' by including password verification where it makes sense
NOT BUG:Constify bn_dump1 implementation so that it matches the prototype in bn.h
NOT BUG:More constification of the BN library
NOT BUG:Make sure to print the BN counting (BN_COUNT) to stderr instead of stdout bc gets so confused by bean counts
BUG:Oops when I clean I should do it thoroughly
NOT BUG:I've checked again and again There really is no need to expand a to 4 times it's size when bn_sqr_recursive() won't look farther than the original length Thereby constification is no longer a problem
NOT BUG:/proc/cpuinfo can have several lines containing the word "type" We want the one that is "type" plain and simple Caught by Raoul Borenius <borenius@shuttle.de>
NOT BUG:I have no idea how this comment got there but it's certainly not applicable to ENGINE_ctrl()
NOT BUG:Many applications that use OpenSSL with ENGINE support might face a situation where they've initialised the ENGINE loaded keys (which are then linked to that ENGINE) and performed other checks (such as verifying certificate chains etc) At that point if the application goes multi-threaded or multi-process it creates problems for any ENGINE implementations that are either not thread/process safe or that perform optimally when they do not have to perform locking and other contention management tasks at "run-time"
NOT BUG:This defines a new ENGINE_ctrl() command that can be supported by engines at their discretion If ENGINE_ctrl(... ENGINE_CTRL_HUP,...) returns an error then the caller should check if the *_R_COMMAND_NOT_IMPLEMENTED error reason was set - it may just be that the engine doesn't support or need the HUP command or it could be that the attempted reinitialisation failed A crude alternative is to ignore the return value from ENGINE_ctrl() (and clear any errors with ERR_clear_error()) and perform a test operation immediately after the "HUP" Very crude indeed
NOT BUG:ENGINEs can support this command to close and reopen connections files handles or whatever as an alternative to run-time locking when such things would otherwise be needed In such a case it's advisable for the engine implementations to support locking by default but disable it after the arrival of a HUP command or any other indication by the application that locking is not required NB: This command exists to allow an ENGINE to reinitialise without the ENGINE's functional reference count having to sink down to zero and back up - which is what is normally required for the finish() and init() handlers to get invoked It would also be a bad idea for engine_lib to catch this command itself and interpret it by calling the engine's init() and finish() handlers directly because reinitialisation may need special handling on a case-by-case basis that is distinct from a finish/init pair - eg calling a finish() handler may invalidate the state stored inside individual keys that have already loaded for this engine
NOT BUG:Fill in missing information about the string returned from SSL_CIPHER_description() as there is no other API function to find out details about the cipher used besides the number of bits or protocol used
NOT BUG:ignore
NOT BUG:Modify () to (void) since that's what is actually defined in the engine structure and some ANSI C compilers will complain otherwise
NOT BUG:Two OCSP functions that aren't yet implemented
NOT BUG:make update
NOT BUG:Get the Rijndael function declarations
NOT BUG:Detect and mark functions that no longer exist
NOT BUG:Some platforms (namely HP-UX) require the 'x' bit set for shared libraries For performance reasons it is also recommended to make the (mmap'ed) shared library 'read-only' -> New permissions for installed shared libraries = 555
NOT BUG:This doesn't hurt anybody provided the installation is performed with 'cp -f' :-)
NOT BUG:Typo was "time" instead of "tim" Caught by Jeffrey Altman <jaltman@columbia.edu>
NOT BUG:Add Rijndael as things to look through
NOT BUG:HP-UX shared libraries do not build any longer as EX_LIBS contains "-Wl,+s" instead of +s: * Hardcoded necessary references to -ldld/-ldl into the build rules and removed EX_LIBS
NOT BUG:HP-UX records the pathnames of dependent libraries when the shared libs are built so that ./libcrypto.sl.. is recorded in libssl.sl... with "./" not being resolvable when running an application linked against -lssl: * Build libssl without explicit reference to libcrypto applications will be linked with "-lssl -lcrypto" anyway
NOT BUG:Document these informations in Makefile.org
NOT BUG:in some new file names the first 8 characters were not unique
NOT BUG:For a long time I've wanted to be able to easily run one or a few individual tests I finally got myself to implement it..
NOT BUG:Additional explanations for SSL_ERROR_WANT_READ/WRITE
NOT BUG:Enhance granularity on what I want to debug for the moment by changing LEVITTE_DEBUG to LEVITTE_DEBUG_MEM
NOT BUG:Update my own debugging configuration entry
NOT BUG:Make Rijndael work! Those long flights have some good points
NOT BUG:Make this stuff compile
NOT BUG:Point to SSL_set_bio(3) early because that manpage provides information that is essential for using BIO pairs
NOT BUG:add missing word
BUG:tmp2 is not used in BN_mod_mul_montgomery
NOT BUG:Really stupid glitch (a comment not properly ended) fixed
NOT BUG:Remove references to RSAref The glue library is but a memory to fade away now..
NOT BUG:BN_CTX-related fixes
NOT BUG:Constification of LHASH Contributed by "Paul D Smith" <psmith@gnu.org> I didn't apply all his patches yet since I have some hesitance about unconstifying To be pondered
NOT BUG:Document that the Nuron hardware has been added and remove the requirement for an engine utility since we now have that
NOT BUG:Constify DH-related code
NOT BUG:Constify DSA-related code
NOT BUG:Make sure ERR_get_error() is declared
NOT BUG:A few more constifications of some RSA routines that I forgot yesterday
NOT BUG:Lutz tells me HP cc uses the same syntax for flags that should be passed down to ld as GNU cc
NOT BUG:When ENGINE_by_id() couldn't find the given engine id it generates an error When checking like engine_add() is those errors are actually good so remove them
NOT BUG:shl_load() also needs to load along a path given through an environment variable SHLIB_PATH This change makes that possible
NOT BUG:Handle BN_copy failure after successful BN_new
NOT BUG:handle the case when BN_new returns NULL
NOT BUG:Document recent constifications
NOT BUG:Constification of CRYPTO_get_ex_data() needed for the sake of RSA_get_ext_data()
NOT BUG:The consequence of constification is that to pass the address to a pointer to a const double pointe parameter the pointer must point to const data as well
NOT BUG:Constify the RSAref glue code
NOT BUG:Constify the RSA parts of the ASN.1 library Note some ugly casts that are needed in the ASN.1 macros Hopefully we can get rid of those in an elegant way in the future
NOT BUG:Constify the RSA library
NOT BUG:Constify the RSA library
NOT BUG:As a consequence of the BIGNUM constification the ENGINE code needs a few small constifying changes and why not throw in a couple of extras while I'm at it?
NOT BUG:Make all engines available in the openssl application
NOT BUG:looks like a cut&paste error
NOT BUG:Constify the BIGNUM routines a bit more The only trouble were the two functions that did expansion on in parameters (BN_mul() and BN_sqr()) The problem was solved by making bn_dup_expand() which is a mix of bn_expand2() and BN_dup()
NOT BUG:mode used too early in EVP_PKEY_save_parameters Spotted by Ken Lalonde <ken@torus.ca>
NOT BUG:Make sure that shared libraries get the internal name engine with the full version number and not just 0 This should mark the shared libraries as not backward compatible Of course this should be changed again when we can guarantee backward binary compatibility
NOT BUG:Set the CryptoAPI randomness estimate back to 0 The randomness may not actually be very good (we don't know)
NOT BUG:increase the value a bit
NOT BUG:Richard moved hw_nuron.c over to DSO-land recently so this include isn't needed now
NOT BUG:Minor corrections (HPUX) From: Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:avoid memory leak
NOT BUG:Instead of just STACK use STACK_OF(ASN1_OBJECT)
NOT BUG:Update the standards list to the current status
NOT BUG:Change the engine library so the application writer has to explicitely load the "external" built-in engines (those that require DSO) This makes linking with libdl or other dso libraries non-mandatory
NOT BUG:Change 'openssl engine' accordingly
NOT BUG:Change the engine header files so some declarations (that differed at that!) aren't duplicated and make sure engine_int.h includes engine.h That way there should be no way of missing the needed info
NOT BUG:'openssl engine' can now list engine capabilities The current implementation is contained in the application and the capability string building part should really be part of the engine library This is therefore an experimental hack and will be changed in the near future
NOT BUG:Better error reporting in 'openssl engine'
NOT BUG:make update
BUG:Never call load_dh_param(NULL) because this leads to an illegal fopen(NULL)
NOT BUG:-t is supported so display some help about it
NOT BUG:oops remove comments that are no longer true
NOT BUG:Explanation tips etc
NOT BUG:This is a demo that performs SSL tunneling (client and/or server) and is built using an abstracted state machine with a non-blocking IP wrapper around it README will follow in the next commit
NOT BUG:Add application to enumerate list and test engines with
BUG:Add support for shared libraries under Irix Submitted by Albert Chin-A-Young <china@thewrittenword.com>
BUG:Rename true64 to the correct tru64 Suggested by Albert Chin-A-Young <china@thewrittenword.com>
NOT BUG:Improvements to openssl.spec Submitted by Damien Miller <djm@mindrot.org> This change has been CC:ed to crypt@bxa.doc.gov
NOT BUG:Add configuration option to build on Linux on both big-endian and little-endian MIPS Submitted by Ralf Baechle <ralf@uni-koblenz.de>
NOT BUG:Make flag variables int instead of char This avoids getting into trouble on systems where char is unsigned by default
NOT BUG:_lrotl() is a call to the C runtime library!
NOT BUG:DSO_load() should also work when it is passed a NULL - a new DSO is created automatically however some code was still referring to the original pointer rather than the internal one (and thus to NULL instead of the created pointer)
NOT BUG:Document the change
NOT BUG:Add the possibility to use keys handled by engines in more applications
NOT BUG:Small documentation change
NOT BUG:-engine is gone
BUG:NetBSD doesn't use ftime()
NOT BUG:Document the OCSP addition
NOT BUG:make update
NOT BUG:The majority of the OCSP code from CertCo
NOT BUG:Merge the engine branch into the main trunk All conflicts resolved At the same time add VMS support for Rijndael
NOT BUG:Add a note about the recent DSO changes in CHANGES
NOT BUG:On HP-UX at least when shl_* are used the libraries have the extension .sl instead of .so
NOT BUG:For the operating systems where it matters it is sometimes good to translate library names by only adding ".so" to them without prepending them with "lib" Add the flag DSO_FLAG_NAME_TRANSLATION_EXT_ONLY for that purpose
NOT BUG:This changes the behaviour of the DSO mechanism for determining an appropriate filename translation on the host system Apart from this point users should also note that there's a slight change in the API functions too The DSO now contains its own to-be-converted filename ("dso->filename") and at the time the DSO loads the "dso->loaded_filename" value is set to the translated form As such this also provides an impicit way of determining if the DSO is currently loaded or not Except perhaps VMS ... :-)
NOT BUG:The various DSO_METHODs have been updated for this mechanism except VMS which is deliberately broken for now Richard is going to look at how to fit it in (the source comments in there explain "the issue")
NOT BUG:Basically the new callback scheme allows the filename conversion to (a) be turned off altogether through the use of the DSO_FLAG_NO_NAME_TRANSLATION flag (b) be handled in the default way using the default DSO_METHOD's converter (c) overriden per-DSO by setting the override callback (d) a mix of (b) and (c) - eg implement an override callback that; (i) checks if we're win32 "if(strstr(dso->meth->name "win32"))..." and if so convert "blah" into "blah32.dll" (the default is otherwise to make it "blah.dll") (ii) default to the normal behaviour - eg we're not on win32 so finish with (return dso->meth->dso_name_converter(dso,NULL)) (e) be retried a number of times by writing a new DSO_METHOD where the "dso_load()" handler will call the converter repeatedly Then the custom converter could use state information in the DSO to suggest different conversions or paths each time it is invoked
NOT BUG:rsautl.c requires RSA
BUG:s_server not s_client
NOT BUG:Cert chain verification is useable by now Whether Steve is still working on 'proper' verification is up to him to decide ..
NOT BUG:Correction from Tani Hosokawa <unknown@riverstyx.net>
NOT BUG:internal_verify now does know about extensions
NOT BUG:Don't ever set 'seeded' if RAND_status() returned 0 (although maybe this static variable should be abolished totally it was introduced before RAND_status existed)
NOT BUG:When building shared libraries on HP-UX 10.20 and HP-UX 11.00 (32bit) ld warns that -Fl "may not be supported in future releases" We know that and are doing things in HP-UX 11 (64bit) so turn off that warning with +vnocompatwarnings
NOT BUG:It seems like grep isn't as capable as I thought on some Unix systems Use egrep instead
NOT BUG:Pointer error corrected
NOT BUG:If the functions get_dh*() are declared static they should be defined the same way
NOT BUG:On some operating systems MAX is defined Call ours OSSL_MAX instead
NOT BUG:Document
NOT BUG:There's no reason why app_RAND_load_file() should return 0 when RAND_status() hasn't Reported by Dale Stimson <dale@accentre.com>
BUG:Krister Walfridsson <cato@df.lth.se> tells us sysctl lives in /sbin since NetBSD 1.5
NOT BUG:FreeBSD-elf can do threads However there seems to be confusion if you should defined _THREAD_SAFE (I found that in an include file and that's what everybody tells me) or _THREADSAFE (that's what the gcc manual says in the FreeBSD-specific section) so I defined both just to be safe
NOT BUG:Add what's needed to get shared libraries on HP-UX
NOT BUG:N.B.: This has not been tested at all that's my next step
NOT BUG:make update
NOT BUG:Document the change to NCONF
NOT BUG:Fix for bug (?) in assembly language routines for SHA1 This causes MASM to complain and not produce valid debug info Hopefully this wont break anything else..
NOT BUG:Also fix typo in e_rd.c
NOT BUG:Move expired CA certificate
NOT BUG:give pseudo prototypes instead of macro definitions for better clarity
NOT BUG:"DESCRIPTION" is required
NOT BUG:correction from Lutz
NOT BUG:Keep binary backward compatibility by putting new method function pointers at the end of the structure
NOT BUG:Make it possible for methods to load from something other than a BIO by providing a function pointer that is given a name instead of a BIO For example this could be used to load configuration data from an LDAP server
NOT BUG:NCONF_get_number() has no error checking at all As a replacement NCONF_get_number_e() is defined (_e for "error checking") and is promoted strongly The old NCONF_get_number is kept around for binary backward compatibility
NOT BUG:Add short overview move header files section further down
NOT BUG:cosmetic changes
NOT BUG:cosmetic change
NOT BUG:John Denney <jdenney@ca.mdis.com> reports that we forgot to convert Free to OPENSSL_free in the SSL demos
NOT BUG:Two questions have been asked quite often lately
NOT BUG:Update test server certificate in apps/server.pem (it was expired)
NOT BUG:Always return a value
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:CRYPTO_get_ex_new_index would never return an error
NOT BUG:Fix for typo in certificate directory lookup code
NOT BUG:The experimental Rijndael code moved to the main trunk make update done
NOT BUG:Even when you don't want to create shared libraries it's a good idea to have the full extension information so residual shared libraries can be removed so the applications and test programs do not get linked against them by mistake..
NOT BUG:Rework the system to generate shared libraries:
NOT BUG:- Make note of the expected extension for the shared libraries and if there is a need for symbolic links from for example libcrypto.so.0 to libcrypto.so.0.9.7 There is extended info in Configure for that
NOT BUG:- Make as few rebuilds of the shared libraries as possible
NOT BUG:- Still avoid linking the OpenSSL programs with the shared libraries
NOT BUG:- When installing install the shared libraries separately from the static ones
NOT BUG:Bump the shared library version (should have been done a while ago)
NOT BUG:Make the new conf implementatoin bug-compatible with the old one Actually it's a feature that it goes looking at environment variables It's just a pity that it's at the cost of the error checking.. I'll see if I can come up with a better interface for this
NOT BUG:make update
NOT BUG:New docs and new facts in older docs Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:Make non blocking I/O work for accept BIOs
NOT BUG:fix problems in the selftest
NOT BUG:Do a favor to those who get weird compiles and report if RAND_pseudo_bytes returns -1..
NOT BUG:A few small corrections to the SSL documentation Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:BIO_sock_init() returns 1 for success and -1 for failure not 0; thus the condition '!BIO_sock_init()' doesn't make sense
NOT BUG:DSO_ctrl() changes have removed a couple of DSO_METHOD-specific functions so I've regenerated the error numbers and strings for the DSO functions
NOT BUG:Make sure ranlib is only used on .a libraries
NOT BUG:Make sure that shareable libraries are turned off if we don't know how to make them..
NOT BUG:None of the DSO_METHOD's were handling anything except generic messages These are now processed inside DSO_ctrl() itself
NOT BUG:Time to get rid of some rather silly code duplication - some DSO_ctrl() commands are common to all DSO_METHODs hence handle them at the top
NOT BUG:Linux on Alpha with gcc knows about shared libraries
NOT BUG:Linux on Alpha has the configuration name linux-alpha-gcc not linux-alpha
NOT BUG:More code for X509_print_ex() support
NOT BUG:Global DirectoryString mask fix
NOT BUG:Add support for X509_NAME_print_ex() in req
NOT BUG:Initial code for cutomizable X509 print routines
NOT BUG:More SSL functions documented Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:Document..
NOT BUG:Remove what was described by someone as "an EAY hack for compiling SSLeay with Colin Plumb's MD5 implementation instead of his one"
NOT BUG:Include arpa/inet.h since that's where htons() and friends are supposed to be defined according to XPG4.2 Found by Evan <n2xjk@ulster.net> for the MVS platform
NOT BUG:The des_modes manpage is in section 7
NOT BUG:A compiler warning removed Thanks to the folks at HP!
NOT BUG:Verbose output when installing manual pages so that you see that something is going on (and what)
NOT BUG:Add BUGS section
NOT BUG:Note read_ahead-flag related fixes
NOT BUG:Set s->read_ahead in SSL_new because SSL_clear no longer modifies it
NOT BUG:Don't modify s->read_ahead in SSL_clear which is called from accept/connect functions; those should not change the read_ahead setting of the SSL structure
NOT BUG:Fix SSL_CTX_set_read_ahead macro
NOT BUG:Submitted by: Anders Gertz <gertz@epact.se>
NOT BUG:Document the change
NOT BUG:Update
NOT BUG:When creating a .def file be a bit more selective so disabled algorithms do not get in..
BUG:echo=off works on NT but not on W2K
NOT BUG:'ranlib' doesn't always run on some systems That's actually acceptable since all that happens if it fails is a library with an index which makes linking slower but still working correctly
NOT BUG:Make the algorithm implementations depend on the corresponding selection macros
NOT BUG:typo
NOT BUG:Update the status and version number to 0.9.7-dev
NOT BUG:Forgot to change the STATUS file..
NOT BUG:Time to build the release Bump the version info accordingly
NOT BUG:make update
NOT BUG:Change the Windows building scripts to enable DSO_WIN32
NOT BUG:print the perlasm rule only for linux-elf (it seems it confuses some version of make for Mingw32) ---------------------------------------------------------------------- ----------------------------------------------------------------------
NOT BUG:spelling
NOT BUG:update info to match the README
BUG:stop perlpod from complaining
NOT BUG:more manpage links
BUG:tlhelp32.h
NOT BUG:Workaround for tlhelp32.h: place the missing header file in outinc
NOT BUG:Add some missing info
NOT BUG:tlhelp32.h is currently missing in Mingw32 (release 2.95.2 and 2.95.2-1)
NOT BUG:URL to "latest" Mingw release (which is almost a year old :()
NOT BUG:typo
BUG:Avoid protocol rollback
NOT BUG:Only use the new informational verify codes if we specifically ask for them
NOT BUG:Fix typo in docs
NOT BUG:Catch V_ASN1_NULL
NOT BUG:Problem on FreeBSD/Alpha fixed
BUG:Kris Kennaway <kris@FreeBSD.org> tells us that FreeBSD/Alpha shouldn't use an optimization higher than -O
NOT BUG:More reports
NOT BUG:More reports
NOT BUG:Fix ASN1_TYPE bug
NOT BUG:More reports
NOT BUG:Change IMPORTANT to WARNING for greater emphasis
NOT BUG:More reports
NOT BUG:Oops if the target only had USE_TOD an error message was issued..
NOT BUG:Ugly hack to make sure static libraries are usable Without this anything that just links with libeay32.lib or libssl32.lib will get an error saying the __imp__RegQueryValueEx is unresolved
NOT BUG:The right thing would really be to fix crypto/rand/rand_win.c to load ADVAPI32.DLL dynamically but that won't be done just before a release
NOT BUG:More reports
NOT BUG:Tests so far
NOT BUG:Tests so far
NOT BUG:Prepare STATUS for the beta 3 reports
NOT BUG:Time to build beta 3 Bump the version numbers accordingly
NOT BUG:make update
NOT BUG:I'm using GNU tar..
NOT BUG:Changes by Jeffrey Altman <jaltman@columbia.edu> to make RAND_poll() work better in Win32 Verified by zhu qun-ying <qyzhu@krdl.org.sg>
NOT BUG:Clarifications and new documents Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
BUG:Portability patch for HP MPE/iX Submitted by Mark Bixby <mark_bixby@hp.com>
NOT BUG:New documents Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:Mistakes corrected Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:Add news and a description of the ENGINE part and how it's currently distributed
NOT BUG:Additions for 0.9.6
NOT BUG:Reports about a few old systems Reported by Bernhard Simon <bs@bsws.zid.tuwien.ac.at>
NOT BUG:AIX doesn't like ftime() either
NOT BUG:Wrong variable used It's funny how some bugs take a long time getting triggered..
NOT BUG:On VMS stdout may very well lead to a file that is written to in a record-oriented fashion That means that every write() will write a separate record which will be read separately by the programs trying to read from it This can be very confusing
NOT BUG:The solution is to put a BIO filter in the way that will buffer text until a linefeed is reached and then write everything a line at a time so every record written will be an actual line not chunks of lines and not (usually doesn't happen but I've seen it once) several lines in one record Voila BIO_f_linebuffer() is born
NOT BUG:Since we're so close to release time I'm making this VMS-only for now just to make sure no code is needlessly broken by this After the release this BIO method will be enabled on all other platforms as well
NOT BUG:make update
NOT BUG:ispell
NOT BUG:Malloc() -> OPENSSL_malloc() etc
NOT BUG:The RSA patent will have expired when the next version is released..
NOT BUG:ispell
NOT BUG:Add docs for X509_get_ext_d2i() function
NOT BUG:Add some major changes to NEWS..
NOT BUG:Totally remove the supposedly 'faster' variant in BN_mod_mul_montgomery which calls bn_sqr_recursive without much preparation
NOT BUG:bn_sqr_recursive requires the length of its argument to be a power of 2 which is not always the case here There's no reason for not using BN_sqr -- if a simpler approach to squaring made sense then why not change BN_sqr? (Using BN_sqr should also speed up DH where g is chosen such that it becomes small [e.g. 2] when converted to Montgomery representation.)
BUG:Case closed :-)
BUG:BSDI only supports ftime() through libcompat which means it's better not to use it
NOT BUG:Document SSL_library_init() and it's aliases Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:Type correction Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:Extend the docs on setting the cipher list Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:Clarification about Montgomery problem
NOT BUG:Note about contribtions from the US
NOT BUG:Document BN_mod_mul_montgomery bug; make disabled code slightly more correct (this does not solve the problem though)
NOT BUG:Fix a typo in apps/pkcs12.c which was using the wrong part of ASN1_TYPE (though they are both ASN1_STRING so it didn't cause any problems)
NOT BUG:Make 'siglen' an int in apps/dgst.c so we can check the return value of BIO_read() etc
NOT BUG:Disable buggy code variant in BN_mod_mul_montgomery that was enabled in 0.9.6-beta1 and 0.9.6-beta2 and caused the BN_mont_exp_mont_word() failure (bug report "openssh 2.2.0p1 fails with openssl 0.9.6-beta1")
NOT BUG:It seems like all HP-UX are successes as soon as the -ldl vs -ldld quirk is fixed
BUG:FreeBSD only supports ftime() through libcompat which means it's better not to use it
NOT BUG:A few more HP-UX reports Reported by Kevin Steves <stevesk@sweden.hp.com>
NOT BUG:Reorder the Blowfish documentation so the low-level routines do not get so prominent and make sure to say out loud what they expect
NOT BUG:Clarify the BIO_seek() mess and related issues
NOT BUG:Buffering BIO docs
NOT BUG:ispell
BUG:Note the BN_mod_exp_word bug (Markus Friedl provided a test program.)
NOT BUG:A couple more reports
BUG:ftime() is not supported on SGI Reported by Steve Robb <steve@eu.c2.net>
NOT BUG:New documentation about things related to SSL_CIPHER Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:HP-UX 64-bit has dlfcn so let's use that instead of the old dl
NOT BUG:A few more reports
NOT BUG:No engine stuff in the main trunk
NOT BUG:A few more reports
NOT BUG:Work around for Netscape PKCS#7 signedData bug
NOT BUG:A few more reports
NOT BUG:Going through performance statistics sometimes generates an exception so disable that part Reported by Jeffrey Altman <jaltman@columbia.edu>
NOT BUG:cyclecount is only used when __GNUC__ isn't defined
NOT BUG:Disable the net statistics gathering code since different compilers disagree on the proper syntax and type names
NOT BUG:HP-UX didn't go through
NOT BUG:Typo in the added hpux targets -ldl should be -ldld
NOT BUG:The test status as it has been reported so far
NOT BUG:Unless we cast thorough compilers will complain
NOT BUG:Jeffrey Altman reminds us to initialize some variables and ercommends the use of LOadLibrary instead of GetModuleHandle
NOT BUG:Declare the availability of beta 2 in STATUS
NOT BUG:A new beta is being released Change the version numbers accordingly
NOT BUG:make update
NOT BUG:A patch from HP for better performance Submitted by Kevin Steves <ks@hp.se> 3 months ago..
NOT BUG:Restore the descriptions to conform with the rest of the documentation We'll work on better documents after the release of 0.9.6
NOT BUG:Jeffrey Altman <jaltman@columbia.edu> sent me a patch that fixes the problems with GetCursorInfo but also adds network statistics and performance statistics where available
NOT BUG:Use sk_*_new_null() instead of sk_*_new(NULL) since that takes care of complaints from the compiler about data pointers and function pointers not being compatible with each other
NOT BUG:siglen is unsigned so comparing it to less than 0 is silly and generates a compiler warning with Compaq C
NOT BUG:Oops no engine in the main trunk
NOT BUG:Tell users that a rewrite might be a good idea
NOT BUG:Some platforms define NULL as ((void *)0) Unfortunately a void* can't be used as a function pointer according the the standards Use a 0 instead and there will be no trouble
NOT BUG:A couple of more names need to be shortened for VMS on VAX
NOT BUG:Make sure Compaq C doesn'r complain about dollars and go around the incompatibility between function and data pointers
NOT BUG:Inform the VMS people that RSAref is no longer needed
NOT BUG:VMS didn't work out too well..
NOT BUG:Rename new BIO_set_shutdown_wr macro to just BIO_shutdown_wr (it's similar to the shutdown(... SHUT_WR) system call for sockets)
NOT BUG:Move text that isn't really descriptions of the functions in the page to the NOTES section and add references to the functions mentioned (and perhaps a few more)
NOT BUG:Add BIO_seek() and BIO_tell() to the BIO control functions manual
NOT BUG:New macro BIO_set_shutdown_wr()
NOT BUG:Update docs
NOT BUG:SSL => TLS/SSL
NOT BUG:TLS => TLS/SSL
NOT BUG:Change spelling back to "behaviour" and "flavour" instead of the American variants
NOT BUG:Clarification
NOT BUG:ispell and some other nit-picking
NOT BUG:Remove redundant manpages and references to them
NOT BUG:add links to the new BIO and SSL manpages to make them visible on the web
NOT BUG:BIO_f_ssl() docs
NOT BUG:Compile all dso files on VMS as well
NOT BUG:'make update'
NOT BUG:Make sure dso_vms.c compiles on other operating systems as well
NOT BUG:A DSO method for VMS was missing and I had the code lying around..
NOT BUG:Move up inclusion of conf.h so non-MONOLITH programs can benefit from it as well especially in apps.c
NOT BUG:Accept BIO docs
NOT BUG:'make update'
NOT BUG:Add a flag for OpenVMS
NOT BUG:Later Jeffrey changed his mind Apparently GetCursorInfo exists but doesn't quite work on WinNT 4 earlier than SP6 It works fine on Windows 98 and Windows 2000
NOT BUG:I'm disabling it for now What's really needed is some kind of check to see if GetCursorInfo is safe to call or alternatively GetCursor or GetCursorPos could be used according to Jeffrey
BUG:Jeffrey Altman points out that GetQueueStatus() crashes on NT
NOT BUG:Update BIO_s_connect()
NOT BUG:Some small clarifications
NOT BUG:In the name section all the functions described shoud be enumerated This will also make it much simpler to generate softlinks name like each function to man-pages containing the info
NOT BUG:Update the info on version numbering
NOT BUG:BIO_seed() and BIO_tell() were documented in two other documents which is redundant They are now in their own document
NOT BUG:Also in the name section all the functions described shoud be enumerated This will also make it much simpler to generate softlinks name like each function to man-pages containing the info
NOT BUG:BIO_seed() and BIO_tell() were documented in two other documents which is redundant Instead move them to their own page
NOT BUG:Items without a =over and a =back are ignored
NOT BUG:BIO_s_bio() manual page detailing BIO pair
NOT BUG:This combines several manual pages provided by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE> various comments by Bodo to the lists and a bit of source examination by me
NOT BUG:Bug fix: Montgomery multiplication could produce results with the wrong sign
NOT BUG:Remove engine stuff that was erroneously put in the main trunk
NOT BUG:Add Damien Miller's RPM specification file with a few modifications
NOT BUG:Remove indentation in the NAME section There's really no need to indent there especially since the pod2* scripts will regard that as preformated text In one case indent a code section one step
NOT BUG:Add a number of documentation files mostly for SSL routines but also for a few BIO routines Submitted by Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
BUG:Add a configuration for Sony News 4 Submitted by NAKAJI Hiroyuki <nakaji@tutrp.tut.ac.jp>
NOT BUG:Initial connect BIO docs
NOT BUG:Remove indentation in the NAME section There's really no need to indent there especially since the pod2* scripts will regard that as preformated text In one case indent a code section one step
NOT BUG:rsa_num2 is no longer used so remove it
NOT BUG:Jeffrey Altman convinced me this patch was really needed or there is no way to make sure GetCursorInfo will give us a valid answer
NOT BUG:Docs for socket BIO
NOT BUG:'make update'
NOT BUG:BIO_s_fd() manual page
NOT BUG:Point to Peter Gutmann's revised paper The copy at www.usenix.org is the old version
NOT BUG:One more passed test
NOT BUG:Update info on what has been fixed
NOT BUG:Update info on what has been fixed and switch format for failure data
NOT BUG:Make sure that Configure will defined DSO_WIN32 for the Win32 targets I feel a bit unsure if this should really be done for Mingw32 and CygWin32
NOT BUG:3 changes: - Make sure PCURSORINFO is defined even on systems that do not provide it - Change the reference to Peter Gutmann's paper - Make sure we don't walk the whole heap lists for performance reasons Jeffrey Altman suggests following Peter Gutmann's advice to keep it to 50 heap entries per heap list
NOT BUG:The other log message should have read "Note the DSA change"
NOT BUG:More Windows failures reported
NOT BUG:Not the DSA change
NOT BUG:Don't set the two top bits to one when generating a random number < q.:wq
NOT BUG:Clarify some of the I/O issues
NOT BUG:Add case of using select() and blocking I/O with BIOs and why you shouldn't (thanks Bodo!)
NOT BUG:A few more systems reported successfull
NOT BUG:New SSL API mode 'SSL_MODE_AUTO_RETRY' which disables the default behaviour that SSL_read may result in SSL_ERROR_WANT_READ
NOT BUG:bug: RAND_poll()
NOT BUG:Holger Reif reports a few more Solaris successes
NOT BUG:Note the failure on Win32
NOT BUG:FreeBSD and solaris with gcc passed
NOT BUG:Better error checking for RSA and DSA signature and verification speed tests This was required to not get mysterious errors when they wouldn't quite want to work
NOT BUG:Linux in Sparc v7 passed
NOT BUG:SCO 5.0.5 with both gcc and cc passed
NOT BUG:More BIO docs
NOT BUG:DSA_verify() and DSA_sign() might return -1..
NOT BUG:A couple more HP-UX targets tested
NOT BUG:debug-linux-elf and debug-linux-elf-efence need to be linked with libdl just as linux-elf..
NOT BUG:Failure on Solaris when using the CSwift card
NOT BUG:mkdef.pl still needed better logic Also the semantics of the platforms list is clarified (it's however not quite followed in the RSAREF case...)
NOT BUG:RSAREF is also checked now
NOT BUG:Document an old change
NOT BUG:mkdef.pl has erroneous conditions to check if a symbol is excluded from the given target Fixed I hope
NOT BUG:linux-elf passed
NOT BUG:OpenBSD doesn't support timeb
NOT BUG:Don't include e_os.h before the system headers
NOT BUG:Reports for OpenBSD 2.7 and HP-UX 10.20
BUG:Last minute update in time to make it to 0.9.6-beta1
NOT BUG:Time to release a beta Change the status accordingly
NOT BUG:Time to release a beta Change the version numbers and dates accordingly
NOT BUG:I started with a make update but a rewrite was actually needed Perhaps we should make rewrites the default thing to do?
NOT BUG:A cast is needed or Borland C will complain
NOT BUG:Docs for cipher and base64 BIOs
NOT BUG:More new BIO docs correct some old ones
NOT BUG:Marin Kraemer <Martin.Kraemer@MchP.Siemens.De> sent us patches to make the OpenSSL commands x50 and req work better on a EBCDIC system
NOT BUG:More preliminary BIO docs..
BUG:Incomplete and possibly inaccurate Hope somone is checking these :-)
BUG:More VMS synchronisation
NOT BUG:Fix some CygWin problems
NOT BUG:Really add BIO_read this time..
NOT BUG:Add BIO_read() (etc.) docs
BUG:Add an ASN1 FAQ because I'm sick of answering it :-)
NOT BUG:Clarify how one should behave when make fails The fault is not necessarely ours
NOT BUG:Synchronise the VMS build with the Unix one
NOT BUG:Two places where I forgot to change vms_idhacks to symhacks
NOT BUG:Update verify docs
NOT BUG:New option to verify program to print out diagnostics
NOT BUG:Two new PKCS#12 demo programs
NOT BUG:Update PKCS12_parse()
NOT BUG:Make the keyid in certificate aux info more usable
BUG:Ugh BIO_find_type() cannot be passed a NULL
NOT BUG:Fix doc example and fix BIO_find_type()
NOT BUG:Fix PKCS7_verify() It was using 'i' for both the loop variable and the verify return value
NOT BUG:Add docs for BIO_find_type() and friends
NOT BUG:Added function BIO_next() otherwise you can't traverse a chain without accessing BIO internals
NOT BUG:'make update'
NOT BUG:*.num rewitten to include the extra information
NOT BUG:Major hack of mkdef.pl There should be no more need to redo the process when some symbols are missing Instead all needed info is saved in the .num files including what conditions are needed for a specific symbol to exist
NOT BUG:This was needed for the work I'm doing with shared libraries under VMS
NOT BUG:It's not just VMS that needs some symbols to be hacked Let's centralise those hacks in crypto/symhacks.h and use it everywhere it's needed
NOT BUG:Another thing I'm working on
NOT BUG:clarification (source/sink BIOs are usually *both* source and sink)
NOT BUG:Change the printing mahine used by BIO_printf() and friends so it can handle an externally provided "static" buffer as well a a dynamic buffer The "static" buffer is filled first but if overflowed the dynamic buffer is used instead being allocated somewhere i the heap
NOT BUG:This combines the benefits of putting the output in a preallocated buffer (on the stack for example) and in a buffer that grows somewhere in the heap
NOT BUG:Some BIO docs incomplete more to follow
NOT BUG:Hmmm I didn't realise BIO_pop() did that: isn't source wonderful?
BUG:Use name ...-whatever-solaris2 instead of ...-sun-solaris2 (the middle string describes the architecture)
NOT BUG:Get rid of ASN1_UTCTIME_get which cannot work with time_t return type (on platforms where time_t is a 32 bit value)
NOT BUG:New function ASN1_UTCTIME_cmp_time_t as a replacement for use in apps/x509.c
NOT BUG:See RSA Security's press release at http://www.rsasecurity.com/news/pr/000906-1.html (September 6 2000): "RSA Security Releases RSA Encryption Algorithm into Public Domain"
NOT BUG:Another superfluous pair of parentheses
NOT BUG:Another round of indentation changes: Position braces consistently add some whitespace for 'if ()' 'for ()' 'while ()' to distinguish keywords from function names and finally remove parens around return values (why be stingy with whitespace but fill the source code with an abundance of parentheses that are not needed to structure expressions for readability?)
NOT BUG:More indentation consistency: for () while () if () return () usually get a space between keyword and opening paranthesis so that they don't look like function calls where no space is used
NOT BUG:Fix X509_STORE_CTX_init Make indentation more consistent Dump core less often
NOT BUG:'make update'
NOT BUG:Changes for QNX: there is no thread support and the previous configuration only worked with no-asm
NOT BUG:typo
NOT BUG:Add OAEP Seed the PRNG
NOT BUG:update
NOT BUG:Add rsautl
NOT BUG:Clarification for SSL_ERROR_ZERO_RETURN
NOT BUG:Fix typo in rsautl
NOT BUG:Add support for settable verify time in X509_verify_cert()
NOT BUG:Document rsautl utility
NOT BUG:Ignore executable
NOT BUG:Handle WANT_READ more correctly (thanks to Bodo)
NOT BUG:*BIG* verify code reorganisation
BUG:The old code was painfully primitive and couldn't handle distinct certificates using the same subject name
NOT BUG:The new code performs several tests on a candidate issuer certificate based on certificate extensions
NOT BUG:It also adds several callbacks to X509_VERIFY_CTX so its behaviour can be customised
NOT BUG:Unfortunately some hackery was needed to persuade X509_STORE to tolerate this This should go away when X509_STORE is replaced sometime..
NOT BUG:This must have broken something though :-(
BUG:Distinguish between assertions and conditions that should cause death
NOT BUG:Keep a not of original encoding in certificate requests
NOT BUG:Add new option to PKCS7_sign to exclude S/MIME capabilities
NOT BUG:Mention fix in bio_lib.c
NOT BUG:Increase print buffer (10K instead of just 2K)
NOT BUG:Ignore Makefile.save
NOT BUG:Remove silly test for b->references at the end of BIO_write: If some other thread deletes the BIO that one thread needs for BIO_write then there's a lot of trouble anyway; there's nothing special about calling the callback
NOT BUG:Consistency
NOT BUG:Use consistent indentation
NOT BUG:Avoid abort() throughout the library except when preprocessor symbols for debugging are defined
NOT BUG:Fix for BN_mul_word(a 0)
NOT BUG:-Wall insists that main return an int
BUG:Include MD4 in documentation
NOT BUG:Tell CVS to ignore 'lib'
NOT BUG:Add 'rsautl' low level RSA utility
NOT BUG:Add DER public key routines
NOT BUG:Add -passin argument to 'ca' utility
NOT BUG:Document sign and verify options to dgst
NOT BUG:Undo change from 1.7 to 1.8:
NOT BUG:Returning -1 for an attempt to read from an empty buffer is empty is not an error that should be signalled via the error queue it's a 'retry read' condition and is signalled as such
BUG:Use C syntax not FORTRAN or whatever that was :-)
BUG:QNX 4 support
BUG:-N option to diff is not essential and mentioning it is unnecessarily confusing to people whose diff doesn't implement it
NOT BUG:Add demo state machine
NOT BUG:Fix typo in i2d_ASN1_ENUMERATED
NOT BUG:Fix bug in read only memory BIOs so BIO_reset() works
NOT BUG:Add sign and verify options to dgst utility need to update docs
NOT BUG:Diagnose EOF on memory BIOs (or you just get mysterious errors with no error message)
NOT BUG:Use the passed buffer in ERR_error_string!
NOT BUG:Change PKCS#7 test data to take account of removal of indefinite length encoding
NOT BUG:New option to CA.pl to sign request using CA extensions This allows intermediate CAs to be created more easily
NOT BUG:PKCS12_create() now checks private key matches certificate
NOT BUG:Fix typo in x509 app
NOT BUG:Update docs
NOT BUG:New function ASN1_STRING_to_UTF8() converts any ASN1_STRING type to UTF8
NOT BUG:Add support for 'other' PKCS#7 content types
NOT BUG:max -> dmax in bn_check_top
NOT BUG:Fix ASN1_INTEGER_to_BN properly this time..
NOT BUG:Fixes to d2i_ASN1_OBJECT ASN1_INTEGER_to_BN and a_strex.c
NOT BUG:Various fixes..
NOT BUG:initialize ex_pathlen to -1 so it isn't checked if pathlen is not present
NOT BUG:set ucert to NULL in apps/pkcs12.c otherwise it gets freed twice
BUG:remove extraneous '\r' in MIME encoder
NOT BUG:Allow a NULL to be passed to X509_gmtime_adj()
NOT BUG:Make PKCS#7 code use definite length encoding rather then the indefinite stuff it used previously
NOT BUG:Added OIDs from RFC 2247 1155 and a few from 1700
NOT BUG:Assar wanted an address change
NOT BUG:Added BIO_vprintf() and BIO_vsnprintf() The former because I've found myself needing it a number of times the latter for completeness
NOT BUG:NULL is not an integer..
NOT BUG:Document the added diversity to the possible log levels
NOT BUG:Add more diversity to the possible log levels Now we have full coverage for all syslog level
NOT BUG:Added md4 to the VMS compilation
NOT BUG:make update
NOT BUG:New option 'ctestall' for mkdef.pl that makes it not only generate existing functions but really all functions that exist in libeay.num and ssleay.num This is a good check on how much we should actually clean up the number files
NOT BUG:Document the reconfiguratoin option for Configure
NOT BUG:Allow reconfiguration This can be useful if some source update requires that you configure again but you don't want to reenter all those configuration arguments again
NOT BUG:Correct the title This also fooled the automatic documentation builder that this was actually the pkcs7 document..
NOT BUG:IBMcxx complains that maxmem is as low as 2048 for certain modules (like all the digests) Setting maxmem to 16K seems to give the compiler enough space to do all the optimization it wants
NOT BUG:I forgot this file that Assar provided as well..
NOT BUG:MD4 implemented Assar Westerlund provided the digest code itself and the test utility I added the bits to get a EVP interface the command line utility and the speed test
NOT BUG:Memory leaks fix It now looks like all memory leaks at least around building complete chains are gone
NOT BUG:Memory leaks fix There seems to be more in other parts of OpenSSL..
NOT BUG:The pkcs12 had no way of getting a CA file or path to be used when building a complete chain Now added through the -CAfile and -CApath arguments
NOT BUG:Abdelilah Essiari <aes@george.lbl.gov> reports that for very small records EVP_EncodeUpdate() may misbehave This happens when there's a record boundary between the two ending b64 equal signs which makes EVP_EncodeUpdate think there has been more than one EOF and therefore add an extra NUL at the end of the output buffer This fix corrects that problem
NOT BUG:Duplicate names detected..
NOT BUG:Make sure that 'initialized' is zeroed as well when cleaning up
NOT BUG:Fix for bad sorting of object names
NOT BUG:Add warning print out if duplicate names found: should end up as a fatal error but a warning for now until they problems are fixed..
BUG:For n > 7 we might get uninitialized (unzeroed) data Spotted by "Kyoungho Jeon" <k.h.jeon@securesoft.co.kr>
BUG:Changes needed for Tandem NSK supplied by Scott Uroff (scott@xypro.com)
NOT BUG:Fix warnings with BIO_dump_indent()
NOT BUG:On Unicos shorts are 8 bytes so instead use a structure with 2 32-bit ints just as in destest.c
NOT BUG:On Unicos openlog() isn't constified so let's not do that in xopenlog()
NOT BUG:Unicos doesn't have sys/timeb.h Fix it by defining the TIMEB macro unless on Unicos
NOT BUG:*mumble* unicos 10.0.0.3 with Cray Standard C Version 6.2.0.0 has a syslog.h where the openlog() is declared like this:
NOT BUG:extern int openlog __((char *_Ident int _Logopt int _Facility));
NOT BUG:Include SKIP DH parameters with OpenSSL These have been created by a SHA.1 based procedure see http://www.skip-vpn.org/spec/numbers.html (These values are taken from that document I have not implemented the prime generator.)
NOT BUG:Added and corrected documentation for the 'shared' option
NOT BUG:We've now covered the shared library support for Solaris so the -shared hack in config is no longer needed
NOT BUG:It's probably a good idea to make the shared libraries depend in EX_LIBS
NOT BUG:"make update"
NOT BUG:I had completely forgotten that print_table_entry also needed to read the two "shared" variables on it's own..
NOT BUG:Add support for shared libraries on Solaris
NOT BUG:A few corrections with the shared library support:
NOT BUG:1 make sure libssl.so becomes dependent on libcrypto.so 2 correct a number of silly bugs in the solaris-shared target and make sure lib*.so also depends on libc.so
NOT BUG:Make it so we can dynamically enable memory allocation debugging through the environment variable OPENSSL_DEBUG_MEMORY (existence is sufficient) At the same time it makes sure that CRYPTO_malloc_debug_init() gets expanded some- where and thereby tested for compilation
NOT BUG:Remove casts that are no longer needed
NOT BUG:If a ip address is successfully parsed the WSA structure under Win32 wasn't properly initialised Fixed Bug reported by DeJuan Jackson <djackson@inverge.com>
NOT BUG:Update 'openssl passwd' documentation on selection of algorithms
NOT BUG:Document the new DN printing options
NOT BUG:Change a few names to be more meaningful
NOT BUG:Fix typos in CA.pl docs
BUG:Document rollback issues
NOT BUG:Fix SSL 2.0 rollback checking: The previous implementation of the test was never triggered due to an off-by-one error
NOT BUG:In s23_clnt.c don't use special rollback-attack detection padding (RSA_SSLV23_PADDING) if SSL 2.0 is the only protocol enabled in the client; similarly in s23_srvr.c don't do the rollback check if SSL 2.0 is the only protocol enabled in the server
NOT BUG:New ASN1_STRING_print_ex() and X509_NAME_print_ex() functions These are intended to be replacements for the ancient ASN1_STRING_print() and X509_NAME_print() functions
NOT BUG:The new functions support RFC2253 and various pretty printing options It is also possible to display international characters if the terminal properly handles UTF8 encoding (Linux seems to tolerate this if the "unicode_start" script is run)
NOT BUG:Still needs to be documented integrated into other utilities and extensively tested
NOT BUG:There's a slight possibility that a is 0 in BN_sub_word() and might therefore have unallocated parts Therefore a check for the 0 case is needed resulting with the same thing as when a is negative
BUG:In the case where a < 0 and |a| < w the result (assigned to a) from BN_add_word becomes wrongly negative.. This was discovered by Darrel Hankerson <dhankers@cacr.math.uwaterloo.ca>
NOT BUG:Looks like Win32 builds do not define THREADS However they're still supporting threads which means that th assertion is supperbly dangerous so make sure it's not compiled under Win32 period
NOT BUG:Add the possibility to get hexdumps of unprintable data when using 'openssl asn1parse' As a side effect the functions ASN1_parse_dump and BIO_dump_indent are added
NOT BUG:Fix a bug in the new i2d_{ENUMERATED,INTEGER} that didn't recognise NULL to mean 'don't output anything'
NOT BUG:When data are written out in very small blocks (less than 3 bytes in size) through the base64 filter b64_write() messes up it's parameters in such a way that instead of writing correct base64 output the first 4 characters of that output is repeated over and over This fix corrects that problem
NOT BUG:There's a deadlock when ssleay_rand_bytes is called the first time since it wants to stir the pool using ssleay_rand_add This fix provides the possibility to call ssleay_rand_add inside a locked state by simply telling it not to do any locking through a static variable This isn't the most elegant way one could do this but it does retain thread safety during the stirring process
NOT BUG:Fix warnings
NOT BUG:In crypto/err/err.c need to initialise p to NULL in case thread_hash is NULL Otherwise p will be uninitialized
NOT BUG:Make NEG_PUBKEY_BUG on by default
NOT BUG:ASN1_TIME fixes
NOT BUG:New function c2i_ASN1_OBJECT()
BUG:Darrel Hankerson <dhankers@cacr.math.uwaterloo.ca> correctly discovered that of the result pointer to bn_mul was the same as one of the two arguments That argument might have it's sign destroyed He provided this fix
NOT BUG:Avoid a race condition if another thread happens to remove the error state at the same time
NOT BUG:Add support for solaris shared libraries currently just experimental (there's no way to get it through configuration yet)
NOT BUG:Avoid loops and make sure that it's possible to still build shared libraries even if the "shared" configuration option wasn't chosen
NOT BUG:This isn't entirely necessary if you do everything right from the start but can save you some trouble Just ignore "shared" if it comes up among the given options at least for now..
NOT BUG:"make update"
NOT BUG:Add a note on installation under Win32
NOT BUG:Show the running line count and definition cont in debug mode That has helped me a bit when I ran into trouble
NOT BUG:Profiling option for mk1mf.pl
NOT BUG:crypto/err.c bugfix
NOT BUG:Redo and enhance the support for building shared libraries Currently there's support for building under Linux and True64 (using examples from the programming manuals) including versioning that is currently the same as OpenSSL versions but should really be a different series
NOT BUG:With this change it's up to the users to decide if they want shared libraries as well as the static ones This decision now has to be done at configuration time (well not really those who know what they do can still do it the same way as before)
NOT BUG:The OpenSSL programs (openssl and the test programs) are currently always linked statically but this may change in the future in a configurable manner The necessary makefile variables to enable this are in place
NOT BUG:Also note that I have done absolutely nothing about the Windows target to get something similar On the other hand DLLs are already the default there but without versioning and I've no idea what the possibilities for such a thing are there..
NOT BUG:Bugfix: use write locks not just read locks
NOT BUG:We do PKCS8 as well
NOT BUG:oops
NOT BUG:don't print debug output
NOT BUG:Move RNG initialization to RAND_poll() and shared definitions to rand_lcl.h
NOT BUG:Randomness polling function for Win9x
NOT BUG:Document -purpose option in usage string
NOT BUG:Make req seed the PRNG if signing with an already existing DSA key
NOT BUG:Document the new smime options
NOT BUG:FAQ about ar "missing" on Solaris
NOT BUG:Add an early reference to BN_CTX_new so that the usage of BN_CTX_start is easier to grasp
NOT BUG:Fix some typose in the i2d/d2i functions that call the i2c/c2i (they were not using the content length for the headers)
NOT BUG:Fix ASN1 long form tag encoding This never worked but it was never tested since it is only used for tags > 30
NOT BUG:New options to smime program to allow the PKCS#7 format to be specified and the content supplied externally
NOT BUG:Corrected small bug that could add ',L' when it shouldn't
NOT BUG:New ASN1 functions that just deal with content octets not tag+length
NOT BUG:More experiments show that you can set your data segment size soft limit higher and thereby get through compilation of sha_dgst.c
NOT BUG:Change the FAQ entry a bit giving the details as I observed them
NOT BUG:Document the change
NOT BUG:I got sick and tired of having to keep track of NIDs when such a thing could be done automagically much like the numbering in libeay.num and ssleay.num The solution works as follows:
NOT BUG:- New object identifiers are inserted in objects.txt following the syntax given in objects.README - objects.pl is used to process obj_mac.num and create a new obj_mac.h - obj_dat.pl is used to create a new obj_dat.h using the data in obj_mac.h
NOT BUG:This is currently kind of a hack and the perl code in objects.pl isn't very elegant but it works as I intended The simplest way to check that it worked correctly is to look in obj_dat.h and check the array nid_objs and make sure the objects haven't moved around (this is important!) Additions are OK as well as consistent name changes
NOT BUG:Beautification
BUG:Add a blurb on how to solve the problem with failing compiltaion of sha_dgst.c on Alpha True64 Unix
BUG:Add PRNGD link
NOT BUG:Update STATUS
NOT BUG:Return bignum '0' when BN_rand is asked for a 0 bit random number
NOT BUG:Fix code structure (if .. else if .. where both parts may be disabled by preprocessor symbols)
BUG:Don't dereference NULL pointers Submitted by: bowe@chip.ma.certco.com
NOT BUG:Don't let top go below zero!
NOT BUG:Use up-to-date functions
NOT BUG:Give the user the option to measure real time instead of user CPU time
NOT BUG:Undo the changes I just made I'm not sure what I was thinking of The message to everyone is "Do not hack OpenSSL when stressed"..
NOT BUG:Document my latest changes
NOT BUG:Make it possible for users of the openssl applications to specify the EGD should be used as seeding input and where the named socket is
NOT BUG:Make it possible for people to tell where the EGD socket is through the RANDEGD environment variable
NOT BUG:That's it I've seen questions about this one time too many for today Time to add extra info so the poor users know where to go with their troubles
NOT BUG:Make sure we use /usr/sbin/sysctl especially since /usr/sbin is not always in the users $PATH..
BUG:Added references to RFCs 1421 to 1424 that describe PEM Suggested by Randolph Bentson <bentson@grieg.holmsjoen.com>
NOT BUG:BSD-style MD5-based password algorithm in 'openssl passwd' (Still needs to be tested against the original using sample passwords of different length.)
NOT BUG:Steve fixed up some strange errors introduced into dso_win32.c and I'm just converting some spaces to tabs from his fix :-)
NOT BUG:Actually comment out the parts of BN_MOD_MUL_WORD that I inteded to comment out in the previous commit
NOT BUG:In BN_mod_exp_mont_word avoid one application of BN_MOD_MUL_WORD and for small 'a' also a couple of calls to BN_mod_mul_montgomery(r r r ...)
NOT BUG:Move add_oid_section to apps.c so it can be shared by several applications Also have it and the certificate and key loading functions take a BIO argument for error output
NOT BUG:Document the change in req
NOT BUG:Change req so the new parameter '-rand file' uses the given file in addition to the file given through the RANDFILE option or environment variable
NOT BUG:On case-insensitive systems the 'install' target gets matched against the 'INSTALL' file which means that 9 times of 10 the BlowFish headers won't get installed Avoid this in the same way it's done in crypto/des/Makefile.ssl where someone apparently has thought of this..
NOT BUG:Move the certificate and key loading functions to apps.c so they can be shared by several applications
NOT BUG:Forgot the self-documentation within req
NOT BUG:Document the change in req
NOT BUG:Small change to accept the command line parameter '-rand file' This parameter takes precedence over the RANDFILE option in the configuration file
NOT BUG:Change mkstack.pl so it now sorts each group into lexical order Previously it depended on the order of files in the directory
NOT BUG:This should now mean that all systems will agree on the order of safestack.h and will not change it needlessly and avoid massive needless commits to safestack.h in future
NOT BUG:It wont however avoid this one :-(
NOT BUG:use faster version
NOT BUG:* This adds some checking to the 'dlfcn' DSO_METHOD that at least lets it cope with OpenBSD which doesn't understand "RTLD_NOW" * Added the dso_scheme config string entry for OpenBSD-x86 to give it DSO support * 'make update' that has also absorbed some of Steve's mkstack changes for the ASN-related macros
NOT BUG:Fixes for Win32 build
BUG:This is mostly a work around for the old VC++ problem that it treats func() as func(void)
NOT BUG:Various prototypes had been added to 'compare' function pointers that triggered this This could be fixed by removing the prototype adding function pointer casts to every call or changing the passed function to use the expected arguments I mostly did the latter
NOT BUG:The mkdef.pl script was modified to remove the typesafe functions which no longer exist
NOT BUG:Oh and some functions called OPENSSL_freeLibrary() were changed back to FreeLibrary() wonder how that happened :-)
NOT BUG:Handle ASN1_SET_OF and PKCS12_STACK_OF using function casts in the same way as STACK_OF
NOT BUG:'make update'
NOT BUG:Avoid unnecessary links and incomplete program file in apps/
NOT BUG:'make update'
NOT BUG:Add the missing callback pointer handling functions Also make sure empty slots of the dynamic lock stack are used Actually I'm not really sure this is the right thing to do and may remove it with an endlessly growing stack as result..
NOT BUG:The dynamic thread API changed and so does the documentation
NOT BUG:Add OPENSSL_free at the end of CRYPTO_destroy_dynlockid
NOT BUG:Redo the support for dynamic locks First of all it was terribly insecure so a static lock is added to isolate the sensitive parts Also to avoid one thread freeing a lock that is used by another a reference counter is added
NOT BUG:With the new stack hack macros there's no need to shorten the names any more
NOT BUG:Modifications for VMS
NOT BUG:Add support for dynamically created and destroyed mutexes This will be needed in some ENGINE code and might serve elsewhere as well Note that it's implemented in such a way that the locking itself is done through the same CRYPTO_lock function as the static locks
NOT BUG:WARNING: This is currently experimental and untested code (it will get tested soon though :-))
NOT BUG:First of all with the current macros we should never get any type-specific stack function Second even when we don't build any of those functions DECLARE_STACK_OF lines should not find themselves into $def
NOT BUG:Using speaking "variable" names in macros so that e.g grepping for sk_whatever_insert and sk_whatever_set immediately reveals the subtle difference in parameter order
NOT BUG:Change mkstack.pl so that safestack.h is not rewritten when nothing has changed
NOT BUG:Safe stack reorganisation in terms of function casts
NOT BUG:After some messing around this seems to work but needs a few more tests Working out the syntax for sk_set_cmp_func() (cast it to a function that itself returns a function pointer) was painful :-(
NOT BUG:Needs some testing to see what other compilers think of this syntax
NOT BUG:Also needs similar stuff for ASN1_SET_OF etc etc
NOT BUG:Change to have a single library that works on both Win9x and WinNT As far as I understand it still needs to be compiled on NT.. Contributed by Arne Ansper <arne@ats.cyber.ee>
NOT BUG:typo
NOT BUG:In EVP_BytesToKey replace explicit "8" by "PKCS5_SALT_LEN"
NOT BUG:There are compilers that complain if a variable has the same name as a label (Reported by Alexei Bakharevski.)
NOT BUG:Currently the DSO_METHOD interface has one entry point to bind all "symbols" including functions (of all prototypes( and variables Whilst casting any function type to another violates ANSI C (I believe) it is a necessary evil in shared-library APIs However it is quite conceivable that functions in general and data symbols could very well be represented differently to each other on some systems as Bodo said;
NOT BUG:> Since the function/object distinction is a lot more likely to be > important on real-life platforms supporting DSO *and* it can be quite > easily done *and* it will silence compilers that don't like > assignments from void pointers to function pointer variables why > not do it?
NOT BUG:I agree So this change splits the "dso_bind" handler in DSO_METHOD into "dso_bind_var" and "dso_bind_func" Similarly the exported function DSO_bind() has been split in two I've also put together changes for the various DSO_METHOD implementations but so far only DSO_dlfcn() has been tested BTW: The prototype for dso_bind had been a bit strange so I've taken the opportunity to change its shape (in both variations)
NOT BUG:Also the README has been updated - particularly with a note about using customised native name-translation for shared libraries (and that you can't do it yet)
NOT BUG:Add support for the modified SGC key format used in IIS
NOT BUG:This seems to work better with enums..
BUG:Make sure that bs is not getting free'd again Reported by Robert Eiglmaier <robert.eiglmaier@ixos.de>
NOT BUG:Add info on what some other people are currently working on
NOT BUG:Report "error" (usually just "File exists" which is harmless) when symlink() fails
NOT BUG:This probably fixes a BN_rshift bug
NOT BUG:Use BN_CTX_end when exiting early from BN_mod_exp_mont_word because BN_mod_exp_atalla could be used
NOT BUG:The atalla functionality doesn't work with the "word" version of BN_mod_exp Call the regular atalla mod_exp operation instead
NOT BUG:Enable DSO support on alpha (OSF1) cc and gcc
NOT BUG:Also "make update" has added some missing functions to libeay.num updated the TABLE for the alpha changes and updated thousands of dependancies that have changed from recent commits
BUG:protoypes
NOT BUG:typo
NOT BUG:Fix evp_locl.h macros
NOT BUG:Documentation correction
NOT BUG:Make EVP_SealInit() and EVP_OpenInit() check EVP_EncryptInit() and EVP_DecryptInit() return values
NOT BUG:Update docs
NOT BUG:Document EVP routines Change EVP_SealInit() and EVP_OpenInit() to support multiple calls
NOT BUG:New function to retrieve email address from certificates and requests
NOT BUG:In longer tests with g=2 DH exchange does not become quite as fast as expected -- maybe it's the different processor maybe my previous timings were too inaccurate
NOT BUG:BN_mod_exp_mont_word entry: Don't give performance gain estimates that appear to be more precise than they really are especially when they are wrong (2/(1/1.15 + 1) = ca 1.0698)
NOT BUG:Comment about bcopy on SunOS 4.x
NOT BUG:Using checks of the existence of HEADER_{foo}_H in other header files was a really bad idea For example the following:
NOT BUG:#include <x509.h> #include <bio.h> #include <asn1.h>
NOT BUG:would make sure that things like ASN1_UTCTIME_print() wasn't defined unless you moved the inclusion of bio.h to above the inclusion of x509.h The reason is that x509.h includes asn1.h and the declaration of ASN1_UTCTIME_print() depended on the definition of HEADER_BIO_H That's what I call an obscure bug
NOT BUG:Instead this change makes sure that whatever header files are needed for the correct process of one header file are included automagically and that the definitions of for example BIO-related things are dependent on the absence of the NO_{foo} macros This is also consistent with the way parts of OpenSSL can be excluded at will
NOT BUG:Comment for increased code clarity
NOT BUG:Another attempt to allow compiling on SunOS 4.*
NOT BUG:Harmonize indentation
NOT BUG:Accept -F4 option in lower case which is what the usage information says one should use
NOT BUG:Slightly faster DSA verification (BN_mod_exp2_mont) marginally faster BN_mod_exp for 1024 bit exponents
NOT BUG:Add entry that Richard forgot
NOT BUG:Use the equivalent of a sliding window (without precomputation because we're only handling words anyway) in BN_mod_exp_mont_word making it a little faster for very small exponents and adjust the performance gain estimate in CHANGES according to slightly more thorough measurements (15% faster than BN_mod_exp_mont for "large" base 20% faster than BN_mod_exp_mont for small base.)
NOT BUG:Speed up DH with small generator
NOT BUG:No need to abort if c_rehash fails here (e.g because Perl is not where it is expected)
NOT BUG:use consistent indentation
NOT BUG:Option "no-symlinks" to configure without creating the links (e.g for use with makefile.one)
BUG:Compaq C warns that "the expression 'p=scan_esc(p)' modifies the variable 'p' more than once without an intervening sequence point This behavior is undefined." What it essentially complains about is 'p=p+=1' Now it's changed to 'p=p+1'..
NOT BUG:MT-support for IRIX 6.x and Alpha-Linux
NOT BUG:Increased consideration for stupid Linux users
NOT BUG:GCC 2.95.2 from IRIX 6.5 -mabi=64 compiler bug workaround:-(
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:int may be smaller than 32 bits
BUG:According to Gordon Atwood <gordon@cs.ualberta.ca> GNU C on SunOS 4.1.4 uses libiberty to define strtoul and strerror
BUG:According to Gordon Atwood <gordon@cs.ualberta.ca> stdlib.h is needed or size_t won't be defined on SunOS 4.1.4
NOT BUG:Typo..
NOT BUG:CygWin32 support
NOT BUG:Submitted by: John Jarvie <jjarvie@newsguy.com>
NOT BUG:Yet another bc FAQ
NOT BUG:EVP constification
NOT BUG:There have been a number of complaints from a number of sources that names like Malloc Realloc and especially Free conflict with already existing names on some operating systems or other packages That is reason enough to change the names of the OpenSSL memory allocation macros to something that has a better chance of being unique like prepending them with OPENSSL_
NOT BUG:This change includes all the name changes needed throughout all C files
NOT BUG:Use NO_FP_API
NOT BUG:Don't include <stdlib.h> In the NO_FP_API case don't include <stdio.h>
NOT BUG:Small documentation bug probably a cut'n'paste corrected
NOT BUG:Bug fix for 64 bit HP-UX
BUG:Submitted by: Karsten Spang <ks@bellesystems.com>
NOT BUG:Small fix to enable reading from stdin as well Contributed by Yoichiro Okabe <okabe@wizsoft.co.jp>
NOT BUG:"make update" + stripping the type-specific stack functions out of libeay.num and ssleay.num
NOT BUG:This change will cause builds (by default) to not use different STACK structures and functions for each stack type The previous behaviour can be enabled by configuring with the "-DDEBUG_SAFESTACK" option This will also cause "make update" (mkdef.pl in particular) to update the libeay.num and ssleay.num symbol tables with the number of extra functions DEBUG_SAFESTACK creates
NOT BUG:The way this change works is to accompany each DECLARE_STACK_OF() macro with a set of "#define"d versions of the sk_##type##_*** functions that ensures all the existing "type-safe" stack calls are precompiled into the underlying stack calls The presence or abscence of the DEBUG_SAFESTACK symbol controls whether this block of "#define"s or the DECLARE_STACK_OF() macro is taking effect The block of "#define"s is in turn generated and maintained by a perl script (util/mkstack.pl) that encompasses the block with delimiting C comments This works in a similar way to the auto-generated error codes and like the other such maintenance utilities is invoked by the "make update" target
NOT BUG:A long (but mundane) commit will follow this with the results of "make update" - this will include all the "#define" blocks for each DECLARE_STACK_OF() statement along with stripped down libeay.num and ssleay.num files
NOT BUG:The previous commit to crypto/stack/*.[ch] pulled the type-safety strings yet tighter and also put some heat on the rest of the library by insisting (correctly) that compare callbacks used in stacks are prototyped with "const" parameters This has led to a depth-first explosion of compiler warnings in the code where 1 constification has led to 3 or 4 more Fortunately these have all been resolved to completion and the code seems cleaner as a result - in particular many of the _cmp() functions should have been prototyped with "const"s and now are There was one little problem however;
NOT BUG:X509_cmp() should by rights compare "const X509 *" pointers and it is now declared as such However it's internal workings can involve recalculating hash values and extensions if they have not already been setup Someone with a more intricate understanding of the flow control of X509 might be able to tighten this up but for now - this seemed the obvious place to stop the "depth-first" constification of the code by using an evil cast (they have migrated all the way here from safestack.h)
BUG:Fortunately this is the only place in the code where this was required to complete these type-safety changes and it's reasonably clear and commented and seemed the least unacceptable of the options Trying to take the constification further ends up exploding out considerably and indeed leads directly into generalised ASN functions which are not likely to cooperate well with this
NOT BUG:This is the first of two commits (didn't want to dump them all into the same one) However the first will temporarily break things until the second comes through :-)
NOT BUG:The safestack.h handling was mapping compare callbacks that externally are of the type (int (*)(type **,type **)) into the underlying callback type used by stack.[ch] which is (int (*)(void *,void *)) After some degree of digging it appears that the callback type in the underlying stack code should use double pointers too - when the compare operations are invoked (from sk_find and sk_sort) they are being used by bsearch and qsort to compare two pointers to pointers This change corrects the prototyping (by only casting to the (void*,void*) form at the moment it is needed by bsearch and qsort) and makes the mapping in safestack.h more transparent It also changes from "void*" to "char*" to stay in keeping with stack.[ch]'s assumed base type of "char"
NOT BUG:Also - the "const" situation was that safestack.h was throwing away "const"s and to compound the problem - a close examination of stack.c showed that (const char **) is not really achieving what it is supposed to when the callback is being invoked what is needed is (const char * const *) So the underlying stack.[ch] and the mapping macros in safestack.h have all been altered to correct this
NOT BUG:What will follow are the vast quantities of "const" corrections required in stack-dependant code that was being let "slip" through when safestack.h was discarding "const"s These now all come up as compiler warnings
NOT BUG:is needed
NOT BUG:typo
NOT BUG:dh and gendh have been obsoleted by dhparam
NOT BUG:#include <stdio.h> not needed
NOT BUG:#include <stdlib.h> is not needed
NOT BUG:Result of "make update"
NOT BUG:This seems to become a FAQ..
NOT BUG:sk_***_new_null() seems to be there to avoid exactly this sort of thing which is a cast between NULL and a function pointer
NOT BUG:sk_value was also suffering from de-const-ification Also add in a couple of missing declarations in pkcs7 code
NOT BUG:config can now detect ARM Linux automagically Contributed by Jeremy Norris <jeremy.norris@rebel.com>
BUG:strtoul is not used anywhere
BUG:When compiling with /opt/SUNWspro/SC4.2/bin/cc on Solaris __svr4__ is not defined but __SVR4 is
NOT BUG:All the little functions created by the IMPLEMENT_STACK_OF() macro will cast their type-specific STACK into a real STACK and call the underlying sk_*** function The problem is that if the STACK_OF(..) parameter being passed in has a "const *" qualifier it is discarded by the cast
NOT BUG:I'm currently implementing a fix for this but in the mean-time this is one case I noticed (a few type-specific sk_**_num() functions pass in const type-specific stacks) If there are other errors in the code where consts are being discarded we will similarly not notice them yuck
NOT BUG:Move Windows seeding functions into a separate file They have nothing to do with the particular PRNG (md_rand.c)
NOT BUG:Add "FIXME" comment
NOT BUG:Improve PRNG robustness
NOT BUG:More EVP cipher revision
NOT BUG:Change EVP_SealInit() and EVP_OpenInit() to handle cipher parameters
NOT BUG:Make it possible to set RC2 and RC5 params
NOT BUG:Make RC2 ASN1 code use the effective key bits and not the key length
NOT BUG:TODO: document how new API works
NOT BUG:"make update"
NOT BUG:Also corrects the linux-elf-arm config string it was previously setting $des_obj = dlfcn :-)
NOT BUG:You must have an empty line between =item's
NOT BUG:Fourth phase EVP revision
NOT BUG:Declare ciphers in terms of macros This reduces the amount of code and places each block cipher EVP definition in a single file instead of being spread over 4 files
NOT BUG:Fourth phase EVP revision
NOT BUG:Declare ciphers in terms of macros This reduces the amount of code and places each block cipher EVP definition in a single file instead of being spread over 4 files
NOT BUG:Configuration for linux on ARM (contributed by Jeremy Norris <jeremy.norris@rebel.com>)
NOT BUG:Minor corrections to documentation
NOT BUG:* speed processes any/all options passed to it not just one * DH and DSA have no "_get_method()" functions only RSA does * typos
NOT BUG:another warning
BUG:It seems that mktime does what is required here Certainly timegm() can not be used because it is not available on all systems (most notably win32)
NOT BUG:This declaration seems to have been added into the header file accidently There's no trace of it being implemented and it doesn't seem to have been intended given that it is prototyped with a BIO yet there was a BIO- specific version added in at the same time
NOT BUG:oops
NOT BUG:Third phase of EVP cipher overhaul
NOT BUG:Remove duplicated code in EVP
NOT BUG:Bugfix: clear error queue after ignoring ssl_verify_cert_chain result
NOT BUG:Second phase of EVP cipher overhaul
NOT BUG:Change functions like EVP_EncryptUpdate() so they now return a value These normally have software only implementations which cannot fail so this was acceptable However ciphers can be implemented in hardware and these could return errors
NOT BUG:Beginnings of EVP cipher overhaul This should eventually enhance and tidy up the EVP interface
NOT BUG:This patch adds initial support for variable length ciphers and changes S/MIME code to use this
NOT BUG:Some other library functions need modifying to support use of modified cipher parameters
NOT BUG:Also need to change all the cipher functions that should return error codes but currenly don't
NOT BUG:And of course it needs extensive testing..
NOT BUG:cvs update
NOT BUG:typo
NOT BUG:Implement SSL_OP_TLS_ROLLBACK_BUG for servers
NOT BUG:Call dh_tmp_cb with correct 'is_export' flag
NOT BUG:Avoid tabs in CHANGES
NOT BUG:Add the target system linux-m68k
NOT BUG:Add DSA library string Workaround for IIS .key file invalid ASN1 encoding
NOT BUG:Fix Blowfish URL
NOT BUG:Submitted by: Arnaud De Timmerman <Arnaud.De.Timmerman@branchur.fr>
NOT BUG:Yet more typesafety
NOT BUG:Avoid sprintf
NOT BUG:Avoid sprintf
NOT BUG:Avoid sprintf and harmonize indentation
NOT BUG:Avoid sprintf
NOT BUG:'make update'
NOT BUG:Remove extra comma (creates a unnessecary null element right?)
NOT BUG:Add required cast
NOT BUG:Fix "FIXME" indentation :-)
NOT BUG:Add "FIXME" comment and adjust the indentation
BUG:Add a couple of macros that make OpenSSL compilable on SunOS 4.1.4 Contributed by SAKAI Kiyotaka <ksakai@kso.netwk.ntt-at.co.jp>
NOT BUG:typo
NOT BUG:Add a note about the new document
BUG:Add a new file where all the standards and other documents that we try to adhere to are listed It should be regarded as a complement to whatever is out on the web including the docs in http://www.openssl.org/
NOT BUG:Fix c_rehash script add -fingerprint option to crl
NOT BUG:Typesafety Thought Police last part
NOT BUG:Typesafety Thought Police part 5
NOT BUG:Typesafe Thought Police part 4
NOT BUG:Typesafety Thought Police part 3
NOT BUG:Typesafety Thought Police Part 2
NOT BUG:Typesafety thought police
NOT BUG:Get rid of more non-ANSI declarations
NOT BUG:prototype
NOT BUG:Make sure that NO-RSA applications etc can include evp.h
NOT BUG:Missing cases when no_rsa is defined
NOT BUG:Submitted by: Zeroknowledge
NOT BUG:MacOS changes
NOT BUG:Allow UTCTIME objects to be retrieved Check for imminent cert expiry
NOT BUG:When open()ing 'file' in RAND_write_file don't use O_EXCL This is superfluous now that we don't have to avoid creating multiple versions of the file on VMS (because older versions are now deleted)
BUG:Being sick and tired of the hogging Efence does on my laptop I decided to provide an alternative..
NOT BUG:Fix for SSL server purpose checking
NOT BUG:Make PKCS#12 code handle missing passwords
NOT BUG:Add a couple of FAQs
NOT BUG:Note apps/x509.c bugfixes
NOT BUG:Fix a memory leak and don't generate inappropriate error message when PEM_read_bio_X509_REQ fails
NOT BUG:Initialise
BUG:In Message-ID: <003201bfb332$14a07520$0801a8c0@janm.transactionsite.com> "Jan Mikkelsen" <janm@transactionsite.com> correctly states that the OpenSSL header files have #include's and extern "C"'s in an incorrect order Thusly fixed
NOT BUG:Also make the memory debugging routines defined and declared with prototypes and use void* instead of char* for memory blobs
NOT BUG:And last of all redo the ugly callback construct for elegance and better definition (with prototypes)
BUG:In Message-ID: <003201bfb332$14a07520$0801a8c0@janm.transactionsite.com> "Jan Mikkelsen" <janm@transactionsite.com> correctly states that the OpenSSL header files have #include's and extern "C"'s in an incorrect order Thusly fixed
BUG:In Message-ID: <003201bfb332$14a07520$0801a8c0@janm.transactionsite.com> "Jan Mikkelsen" <janm@transactionsite.com> correctly states that the OpenSSL header files have #include's and extern "C"'s in an incorrect order Thusly fixed
NOT BUG:Add missing #include
NOT BUG:Avoid leaking memory in thread_hash (and enable memory leak detection for it)
NOT BUG:linux-elf bugfix
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Stylistic changes: Don't use a macro for the malloc'ed length since it is not constant
NOT BUG:Warn about truncation also in the case when a single password is read using the password prompt
NOT BUG:Use CONFerr not RSAerr in the conf library..
NOT BUG:Clarifications and removal of double declaration..
NOT BUG:This case in the "dso_unload" handlers should not be reported as an error - if a DSO_load(NULL,...) operation fails it will have to call DSO_free() on the DSO structure it created and that will filter through to this "unload" call
NOT BUG:If the stack size is "< 1" then the library never actually loaded To keep things clean higher up I'll treat this as a vacuous case without an error It makes the error stack easier to follow real world cases and the error this ignores was only useful for catching bugs in internal code not mismatched calls from applications (which should be handled in the generic DSO layer)
NOT BUG:The handling of DSA_METHOD and DH_METHOD wasn't quite as problematic as with RSA_METHOD (the **_get_default_methods do set the default value if it's not set) However the code had some duplication and was a bit conter-intuitive
NOT BUG:Previously the default RSA_METHOD was NULL until the first RSA structure was initialised at which point an appropriate default was chosen This meant a call to RSA_get_default_method might have returned FALSE
NOT BUG:This change fixes that; now any called to RSA_new() RSA_new_method(NULL) or RSA_get_default_method() will ensure that a default is chosen if it wasn't already
NOT BUG:Thanks to "make update" ..
NOT BUG:This change facilitates name translation for shared libraries The technique used is far from perfect and alternatives are welcome Basically if the translation flag is set the string is not too long and there appears to be no path information in the string then it is converted to whatever the standard should be for the DSO_METHOD in question eg; blah --> libblah.so on *nix and blah --> blah.dll on win32
NOT BUG:This change also introduces the DSO_ctrl() function that is used by the name translation stuff
NOT BUG:Correction
NOT BUG:Ignore lib and Makefile.save
NOT BUG:New function ERR_error_string_n
NOT BUG:Minor corrections
NOT BUG:OpenVMS not OpenVSM..
NOT BUG:I forgot to update the change log
NOT BUG:"make update"
NOT BUG:I've always wanted to make the CONF library more adaptable Here's the result
NOT BUG:I have retained the old behavior of the CONF_* functions and have added a more "object oriented" interface through NCONF_* functions (New CONF you see :-)) working the same way as for example the BIO interface Really the CONF_* are rewritten so they use the NCONF_* functions internally
NOT BUG:In addition to that I've split the old conf.c code into two files conf_def.c and conf_api.c conf_def.c contains the default config object that reads a configuration file the standard OpenSSL way as well as configuration file with Win32 registry file syntax (I'm not sure I got that one right) conf_api.c provides an API to build other configuration file readers around (can you see a configuraion file in XML? I can :-))
NOT BUG:Finally I've changed the name conf_lcl.h to conf_def.h since it's made specifically for that "class" and none others
NOT BUG:"make update" for DSO additions
NOT BUG:In theory TLS v1 ciphersuites are not the same as SSL v3 ciphersuites
NOT BUG:Clarifications
NOT BUG:Avoid memory leak
NOT BUG:Constification and a silly mistake in the comments
NOT BUG:I forgot about $openssl_other_defines .. should probably do this for consistency Not sure though whether HAVE_DLFCN_H should be included too? If we go the autoconf route then this probably wouldn't be included
NOT BUG:This helps make the DSO stuff more portable; * "no-dso" option available in Configure so that all DSO methods will return NULL overriding any support the platform might otherwise have built * dlfcn_no_h config string now available rather than just dlfcn This is for platforms that have dlfcn.h functions but do not have (or need) the dlfcn.h header file
NOT BUG:Better make a note of what's going on .. :-)
NOT BUG:This commit ties the new DSO code (crypto/dso/) into the build for a variety of platforms A few are missing and they will be added in eventually but as this is new stuff it was better to not break lots of platforms in one go that we can't easily test The changes to "Configure" should illustrate how to add support to other systems if you feel like having a go
NOT BUG:NB: I'll add something shortly to allow you to add "dlfcn.h" support on those platforms that don't have (or need) a dlfcn.h header file (The symbol for Configure will probably by "dlfcn_no_h")
NOT BUG:Thanks to Richard Levitte who is responsible for the dso_dl.c support understanding the trickier aspects of the build process and giving great feedback on everything else
NOT BUG:[Don't use this stuff if you're easily offended by changes to the interface or behaviour - it's still work in progress.]
NOT BUG:PR:
NOT BUG:This is a set of startup code for the DSO support it's not yet linked into the build process (an upcoming commit no doubt) and is very much *new* code - what that means is that it compiles ok - usually It certainly doesn't mean it runs well or even properly yet Please don't muck round with this unless you're looking to help out and hunt bugs :-)
NOT BUG:Currently this code doesn't have any support for controlling the "load" behaviour (eg paths filename translations etc) That'll be handled using DSO_ctrl() and various flags once we work out a sensible set of flags
NOT BUG:Extend entry on ERR_print_errors
NOT BUG:Release done change status
NOT BUG:Tagging has now been done update to the next version (it's not quite as important to keep a low profile here :-))
NOT BUG:Tagging has now been done update to the next possible version (I keep a low profile so we don't get discontinuity in the numbering...)
BUG:Version and name changes and a last minute changelog
NOT BUG:Building version 0.9.5a
BUG:_lrotl and _lrotr are defined in MSVC but nowhere else that we know off
NOT BUG:Entry for ssleay_rand_status locking fix
BUG:'entropy >= ENTROPY_NEEDED' should be evaluated while the variables are locked
NOT BUG:Add a couple of FAQs
NOT BUG:Since ssleay_rand_initialize() unlocks then locks CRYPTO_LOCK_RAND it's a good thing if ssleay_rand_status() would do the corresponding lock and unlock as everyone else..
NOT BUG:Add pointer to EGD manpage Update the "randomness" section for the upcoming 0.9.5a release
NOT BUG:Add a default banner Contributed by Joon Radley <jradley@vps.co.za>
NOT BUG:Don't force the use of GNU make with Borland C++ Builder Contributed by Joon Radley <jradley@vps.co.za>
NOT BUG:Fix typo in -clrext option but add a compatibility hack because 0.9.5a should not break anything that works in 0.9.5
NOT BUG:Comments for SSL_get_peer_cert_chain inconsistency
NOT BUG:Removed especially since it conflicts with des.pod on case-insensitive file systems
NOT BUG:Fix for HMAC
NOT BUG:NeXT workaround
NOT BUG:Beautifying code
NOT BUG:List "no-..." option first because it's the most frequently needed one
BUG:Vi again
NOT BUG:Info on proposed release date
NOT BUG:Another VAX environment passed
NOT BUG:VI gave me 4-space tabs.. Corrected
NOT BUG:One VAX environment passed
NOT BUG:Update docs
NOT BUG:Explain configuration options more completely
NOT BUG:Update for new hpux-parisc-cc-o4 entry
NOT BUG:another one done
NOT BUG:More info in the Win32 test
NOT BUG:A couple of corrections concerning HPUX 10 and shared libraries Contributed by Lutz Jaenicke
NOT BUG:Geoff Thorpe reports a whole bunch of tests passing
NOT BUG:Another VMS/Alpha with a much more evil compiler passed as well..
NOT BUG:VMS on Alpha passed
NOT BUG:Add a few more FAQs
NOT BUG:Test results
NOT BUG:Surround the diff with the new snippage delimiters
NOT BUG:Update status
NOT BUG:Tagging has been done update to next probable version..
NOT BUG:I almost forgot..
NOT BUG:Time for version 0.9.5a beta2
BUG:I know it's earlier than announced The high amount of problems in beta1 warants this however
NOT BUG:New FAQ for the OpenSSH configuration problem
NOT BUG:I know this isn't really a OpenSSL issue but we keep getting questions about it so we might as well provide the solution..
NOT BUG:Clean up context even if an error occured
NOT BUG:ssize_t for Ultrix
BUG:Corrected It said before that ivec had to be initialised to zero which isn't true What is true however is that SSH assumes it is
NOT BUG:"make update"
NOT BUG:A quick hack to have ssize_t work with gcc under SunOS 4 (tested on SunOS 4.1.4)
NOT BUG:Update docs and remove old PKCS#7 README file
BUG:RAND_event()
NOT BUG:Fix a memory leak in PKCS12_parse Don't copy private key to X509 etc public key structures Fix for warning
NOT BUG:more failures
NOT BUG:More failures
NOT BUG:Ulf Möller reports OpenBSD-x86 and solaris-sparcv9-cc passed
NOT BUG:OpenBSD complains
NOT BUG:In some of the Makefiles CPP was not defined
NOT BUG:Jaenick Lutz reports that hpux-parisc-cc with +02 passed
NOT BUG:Ref: Message-ID: <20000320070111.A90876@wiz.Sendmail.COM>
NOT BUG:Problems with the Windows build
NOT BUG:Document pseudo-commands
NOT BUG:Mention the bug fixes
NOT BUG:I just got a not very pleasant report
NOT BUG:There are a few new features in 0.9.5a.. And I've probably forgotten a few
NOT BUG:New status
NOT BUG:Tagging done we move to the next possible
NOT BUG:Beta 1 of 0.9.5a building
NOT BUG:make update
NOT BUG:Change the version text it's time to release the first beta of 0.9.5a
BUG:Sample application using RAND_event() to collect entropy from mouse movements keyboard etc and write it to a seed file
NOT BUG:Bug fix: RAND_write_file() failed to write to files created by open() on Win32
NOT BUG:Make sure an error condition is returned if for some reason the file couldn't be opened
NOT BUG:oops don't use "entropy" directly
NOT BUG:New function RAND_event() collects entropy from Windows events
NOT BUG:FLAT_INC is not needed; we use -I. all the time
BUG:Integrate podd.h sk.h into set_key.c
NOT BUG:Change the notation and coding of the version to be able to contain both a patch level and a beta status IMHO it also makes more sense to have beta status be part of the development status than to have it be an alternate name for patch levels under special conditions
NOT BUG:Keep in sync with Unix code and prepare for a misfeature fix
NOT BUG:make update
NOT BUG:cleanup
NOT BUG:libdes manpage
NOT BUG:This may still contain a few errors from the old documentation but most of it should make sense
NOT BUG:des_quad_cksum() byte order bug fix See http://www.pdc.kth.se/kth-krb/
NOT BUG:Their solution for CRAY is somewhat awkward I'll assume that a "short" is 32 bits on CRAY to avoid the #ifdef _CRAY typedef struct { unsigned int a:32; unsigned int b:32; } XXX; #else typedef DES_LONG XXX; #endif
NOT BUG:add =cut
NOT BUG:DES in Perl was incomplete and not very useful
NOT BUG:superseded by des_modes.pod
NOT BUG:change manpages to pod Contents are not up to date!
NOT BUG:Eliminate memory leaks in mem_dbg.c
NOT BUG:Small bugs in the test scripts removed
NOT BUG:e_os.h: don't do double work with status codes openssl.c: make damn sure e_os.h knows about OPENSSL_C
NOT BUG:Make sure to complete the cleanup of names
NOT BUG:Bugs corrected
NOT BUG:The previous exit code handling was completely bogus for VMS
NOT BUG:Typo corrected
NOT BUG:Point out the PRNG usage bug affecting openssl rsa (Should we point to snapshots or directly give the one-line patch?)
NOT BUG:Remove CRYPTO_push/pop_info invocations to improve code readability -- I hope all memory leaks that may occur here have already been tracked down
NOT BUG:Avoid a warning
NOT BUG:SSL_ALLOW_ADH no longer has a meaning
NOT BUG:Insert a comment: This is one of the few files in this directory that is actually used (even though it may not appear so at first sight)
NOT BUG:Use correct function names in SSLerr macros
NOT BUG:Remove "Makefile.uni" files and some related stuff This was meant for building individual ciphers separately; but nothing of this is maintained it does not work because we rely on central configuration by the Configure utility with <openssl/opensslconf.h> etc. so the files are only wasting space and time
NOT BUG:Typos corrected
NOT BUG:Make it possible top build just a part of the crypto library
NOT BUG:Target added
NOT BUG:Bugs corrected and a couple of include files to get declarations for lib$-functions and sys$-functions
NOT BUG:Typo corrected
NOT BUG:bss_log has dollars so compile it with that warning flag disabled
NOT BUG:Typo corrected
NOT BUG:Make sure strcmp() gets declared
NOT BUG:Make V_ASN1_APP_CHOOSE work again
NOT BUG:another typo
NOT BUG:typo
NOT BUG:Synchronise with Unixly tests
NOT BUG:Correction
NOT BUG:Clarifications for 'no-XXX'
NOT BUG:Run test_ssl last -- it's the only test that really uses the SSL library in addition to the crypto library
NOT BUG:"openssl no-..." commands for avoiding the need to grep "openssl list-standard-commands"
NOT BUG:Include a timing test that works without RSA
NOT BUG:Corrections
NOT BUG:In testss use MD5 as digest algorithm so that the resulting certificates can be used for testssl with RSA
NOT BUG:Update usage info
NOT BUG:Update test suite so that 'make test' succeeds in 'no-rsa' configuration
NOT BUG:Synchronise with Unix
NOT BUG:Correct a potential bug
NOT BUG:Don't try to test the RSA command if it is not available
NOT BUG:Copy DH key (if available) in addition to the bare parameters in SSL_new If SSL_OP_SINGLE_DH_USE is set don't waste time in SSL_[CTX_]set_tmp_dh on computing a DH key that will be ignored anyway
NOT BUG:ssltest -dhe1024dsa (w/ 160-bit sub-prime) had an unfair performance advantage over -dhe1024 (safe prime): SSL_OP_SINGLE_DH_USE was effectively always enabled because SSL_new ignored the DH key set in the SSL_CTX Now -dhe1024 takes the server only about twice as long as -dhe1024dsa instead of three times as long (for 1024 bit RSA with 1024 bit DH)
BUG:Connection timings (using ISO C function clock())
NOT BUG:Remove Win32 assembler files They are always rebuilt (with some choice of parameters) when they are needed
NOT BUG:cleaning up a little
NOT BUG:asm workaround for SuSE Linux proposed by Holger Reif
NOT BUG:make update
BUG:Workaround for Windoze weirdness
NOT BUG:On NeXT ssize_t is int not long (see <sys/types.h> -- the definition is activated only when _POSIX_SOURCE is defined)
NOT BUG:NO_SYSLOG is defined for MSDOS anyway just don't include the Unix header..
BUG:ssize_t
NOT BUG:Use signed types where necessary and add missing functionality to make SSL_nread0 work
NOT BUG:Use L for all constants
NOT BUG:Don't generate asm files for no-asm
NOT BUG:Repair bss_log
NOT BUG:Curiously enough void functions don't return a value
NOT BUG:Mention -ign_eof
NOT BUG:Always use fixed DH parameters created with 'dhparam -C' don't dynamically create them This allows using ssltest for approximate performance comparisons: $ time ./ssltest -num 50 -tls1 -cert ../apps/server2.pem \ [-no_dhe|-dhe1024dsa|-dhe1024] (server2.pem contains a 1024 bit RSA key the default has only 512 bits.) Note that these timings contain both the server's and the client's computations they are not a good indicator for server workload in different configurations
NOT BUG:Add the possibility (with -ign_eof) to ignore end of file on input but still not be quiet Also make it clear that -quiet implicitely means -ign_eof as well
NOT BUG:Change to code generated by 'dhparam -C':
NOT BUG:- Move DH parameter components inside the function - Automatically #include the required header file if it has not already been #included
NOT BUG:another typo
NOT BUG:typo
NOT BUG:clarify
NOT BUG:bug fix Submitted by: "Yoram Meroz" <yoram@mail.idrive.com>
NOT BUG:Manual page installation did not work if INSTALL_PREFIX was a relative path
NOT BUG:Don't Free() password if it was read from config file
NOT BUG:Clarification
NOT BUG:Fix typo and make ca get the CA and request fields correct
NOT BUG:Manual pages for EVP_Open* and EVP_Seal*
BUG:Protect variables from potential misinterpretations for example a colon which may bite the lesser knowleged..
NOT BUG:Check that a password was actually passed or the user will just get mysterious crashes
NOT BUG:Manual pages for EVP signing and verifying
NOT BUG:spelling
NOT BUG:New compatability trust and purpose settings
NOT BUG:{NEXT,OPEN}STEP don't have pid_t
NOT BUG:Fix the PKCS#8 DSA code so it works again All the broken formats worked but the valid didn't :-(
NOT BUG:bug fix release planned
NOT BUG:Fix the indentation and avoid a compiler warning
BUG:Let's not lie to the people
NOT BUG:Add missing include (only MONOLITH builds were possible without it) Submitted by: Andrew W Gray
NOT BUG:Preserve reason strings in automatically build tables
NOT BUG:Beautifying Sorry but code that's slammed to the far left is not very readable in my opinion
NOT BUG:Let's care about the compiler warnings for both cases shall we?
NOT BUG:There is no reason to use downcase letters throughout in error reason strings it's just the default because it's usually ok
NOT BUG:Read complete seed files given in -rand options
NOT BUG:Get definition of ssize_t
NOT BUG:Change output text (ar is not a linker)
NOT BUG:Generate correct error reasons strings for SYSerr
NOT BUG:The selftest sometimes lacked important information
NOT BUG:new component
NOT BUG:gcc warnings
NOT BUG:Note about PRNG error message for openssl command line tool
NOT BUG:Add an #include
NOT BUG:Use signed type where -1 may be returned
NOT BUG:Avoid potential memory leak in code generated by 'openssl dhparam -C'
NOT BUG:New '-dsaparam' option for 'openssl dhparam' and related fixes
NOT BUG:Fix for previous patch: If RAND_pseudo_bytes returns 0 this is not an error
NOT BUG:Make name_funcs_stack static
NOT BUG:Move the 'file scope' argument in set_label to the third argument: the second was being used already
NOT BUG:Synchronise
BUG:Use RAND_pseudo_bytes not RAND_bytes for IVs/salts
BUG:Use RAND_pseudo_bytes not RAND_bytes for IVs/salts
NOT BUG:Update comment
NOT BUG:Add missing dependencies
NOT BUG:Use RAND_METHOD for implementing RAND_status
NOT BUG:Change comment
NOT BUG:Hack b_print.c to implement asprintf() functionality Not enabled by default yet I wanna play with it a bit more
NOT BUG:For those who don't know: asprintf() is an allocating sprintf The first argument to it is a double indirection to char instead of a single
NOT BUG:Make bss_log.c a bit more readable and implement it for VMS as well
NOT BUG:It started with finding a misplaced #endif Then I wanted to see the structure better I hope noone minds and that it still works Steve?
BUG:I'm experimenting with a hack in dopr() and friends b_printf.c to make it work like asprintf()
NOT BUG:Fix bug which would free up a public key twice if the verify callback tried to continue after a signature failure
NOT BUG:add comment
NOT BUG:Bug fix
NOT BUG:Note bug fix for the DSA infinite loop
NOT BUG:pseudo-seed for the PRNG before testing DSA
NOT BUG:add RAND_status() to title
NOT BUG:change info text (as on the web site)
NOT BUG:'rand'/'-rand' documentation
NOT BUG:Document the 'rand' application
NOT BUG:check for WIN32 (needed by Mingw32)
NOT BUG:Keep the references to other INSTALL files short These are the Unix instructions
NOT BUG:'rand' application for creating pseudo-random files
NOT BUG:Check BN_rand return value
NOT BUG:"make update"
NOT BUG:Point to INSTALL.MacOS for MacOS pre X
NOT BUG:some people can't read :)
NOT BUG:change wording
NOT BUG:how to recognize assembler problems
NOT BUG:Added configuration support for Linux/IA64
BUG:Submitted by: Rolf Haberrecker <rolf@suse.de>
NOT BUG:MacOS pseudo-random entropy collector
NOT BUG:Submitted by: Yoram Meroz <yoram@mail.idrive.com> Reviewed by: <appro>
NOT BUG:Bug fix
BUG:Pointed out by: Gisle Vanem <gvanem@eunet.no>
NOT BUG:Forgot to check correctly for the new options
NOT BUG:Mingw32 can now use assembler
NOT BUG:Switch for turning on the predictable "random" number generator
NOT BUG:Fix for non-monolithic build
NOT BUG:Submitted by: Andrew Gray <agray@iconsinc.com>
NOT BUG:Support assembler for Mingw32
NOT BUG:Shared library support for Solaris and HPUX by Lutz Behnke and by Lutz Jaenicke
NOT BUG:Hopefully we'll have a unified way of handling shared libraries when we move to autoconf..
NOT BUG:Switch to 0.9.6 and finally remove the annoying message about renamed header files
NOT BUG:Ouch! PKCS7_encrypt() was heading MIME text headers twice because it added them manually and as part of SMIME_crlf_copy() Removed the manual add
NOT BUG:Tagging has been done time to switch to 0.9.6-dev
NOT BUG:Time for a release
NOT BUG:A few more tests were reported
NOT BUG:Typo corrected
NOT BUG:Short is always promoted to int when passed as a function argument This is especially true when it's part of a '...'
NOT BUG:Include rand.h so RAND_pseudo_bytes may be declared Remove one ampersand so the compiler may complain less Make rand() static so it will not conflict with the C RTL Make bug() static too for good measure
NOT BUG:More platforms passed the test
NOT BUG:More tests passed
NOT BUG:works on solaris
NOT BUG:Update the OpenVMS/VAX status
BUG:IRIX6* tests passed
NOT BUG:MacOS tidbits Add new files to the project update config
NOT BUG:corrections
NOT BUG:Works with gcc 2.8.0 as well
NOT BUG:No the VAX is not a 64 bit architecture
NOT BUG:Use standard header file string.h for memset prototype (where "standard" refers to the C language probably there's also some standard that defines memory.h)
NOT BUG:Don't call BN_rand with zero bits in bntest.c
NOT BUG:Make sure to catch UnixWare 7 even if the version is 7.1.1 or something like that
NOT BUG:Update config for the unixware targets by looking at what was done in Apache's GuessOS (from Apache 1.3.1)
NOT BUG:Declare memset
NOT BUG:Typo
NOT BUG:AIX and HP-UX are passing the tests
NOT BUG:Warning about old gcc though (and I recall getting in trouble with gcc 2.8.0 I'll try that again)
NOT BUG:OpenSSL doesn't compile well on OpenVMS/VAX it seems
NOT BUG:I'm looking into it it's probably a simple script error
NOT BUG:One test passed for VMS
NOT BUG:A new beta has been released and one test is documented
NOT BUG:OpenVMS often has problems with files with more than on period in it Here's instructions on what to do if you get into trouble because of that
NOT BUG:remove obsolete BN_CTX info
NOT BUG:Add a comment
NOT BUG:For lack of a better name this is now called 0.9.5beta3-dev until the release
NOT BUG:Change version string to reflect the release of beta 2
NOT BUG:Stop logging all the files that are copied all over the place..
NOT BUG:New logical names to skip algorithms are now supported
NOT BUG:New logical names to skip algorithms are now supported Also on Alpha vms.mar is no longer used (it produced a lot of confusing messages) for BN Instead the assembler part of bn_lcl.h is used
NOT BUG:New "target": CONFIG This will build the opensslconf.h file from what is known about VAX and Alpha running VMS and from the opensslconf.h.in (in VMS often named OPENSSLCONF.H_IN) file
NOT BUG:Add and change docs for the changes that have been made
NOT BUG:put function names in the title
NOT BUG:Statement that it fails only on 32-bit architectures isn't true
BUG:Overly long lines look ugly in the DOS editor :)
NOT BUG:Bug fix!
NOT BUG:Fix so Win32 compiles again..
NOT BUG:Fix so Win32 assembly language works with MASM
NOT BUG:Add info about where to get MASM
NOT BUG:*** empty log message ***
NOT BUG:workaround no longer needed
NOT BUG:remove
NOT BUG:Reorganize bn_mul.c (no bugfix yet) remove obsolete files in BN library
NOT BUG:minor clarification
NOT BUG:Make ASN1 types real typedefs
NOT BUG:Rebuild error files
NOT BUG:BN_div_recp fix I've ran divtest for 10 mins and it didn't exhibit a single fault:-) Needless to mention that bnbug.c posted couple of days ago passes as well..
NOT BUG:A small script to compile mttest.c on VMS as well
NOT BUG:Make sure there's some entropy and log a few more errors
NOT BUG:More get0 et al changes Also provide fgrep targets in CHANGES where the new functions are mentioned
NOT BUG:make update
NOT BUG:Make sure that all test files are gone before starting the tests or backup will complain about some version not existing Perhaps
NOT BUG:Move to using the same perl code as Makefile.ssl
NOT BUG:Just as in Unix make sure to generate some kind of "random data"
NOT BUG:Typo corrected
NOT BUG:Don't include sys/types.h if NO_SYS_TYPES_H is defined
NOT BUG:The OpenVMS library is most definitely not built for anything but files unless it's all in unixly syntax We can't guarantee that right now so let's skip the whole test suit There are other places (like the open()) where errors are detected anyway
NOT BUG:Add support for Unixware 7 Thanks to Ron Record <rr@sco.com> for the patch
NOT BUG:Make clear which naming convention is meant
NOT BUG:Fix shadow warning
NOT BUG:ftruncate() and fileno() are not supported on all versions of OpenVMS (they don't really exist before version 7) so that solution was toast Instead let's do it the way it's done on Unix but then remove older versions of the file
NOT BUG:That new mechanism *may* fail for some unixly formated file spec although I wouldn't worry too much about it
NOT BUG:Rename functions for new convention
NOT BUG:Let's avoid compiler warnings over types
NOT BUG:Actually this should be resolved by using size_t a bit more but that'll be for later
NOT BUG:Compile rand_egd.c on VMS as well
NOT BUG:For safety check __VMS as well
NOT BUG:Correct small typo
NOT BUG:Since a stack with quite long name is declared here vms_idhacks.h is also needed to get around C compilers on VMS that set the symbol limit to 31 characters Bot the macros VMS and __VMS are checked since there's no real way to know if e_os.h has been included yet
NOT BUG:Small error fix
NOT BUG:Adjust all the old scripts to deal with the new location
NOT BUG:New script to compile on systems that already have pthreads in the system
NOT BUG:Update the two threads modules to conform to our recommendations (use CRYPTO_num_locks() instead of CRYPTO_NUM_LOCKS!) and correct all the inconsistencies with the rest of OpenSSL
NOT BUG:At least this compiles nicely on Linux using PTHREADS I've done no other tests so far
NOT BUG:Some time in history SSL_CTX_sessions() disappeared It is now restored but not as a macro this time..
NOT BUG:flush output Looks like it fails when b is a power of 2 but I never get incorrect results
NOT BUG:Another test passed
NOT BUG:Enhance consistency by using BIO_flush() instead of fflush()
NOT BUG:Changes to synchronise with Unix (actually much more is needed like a real config script)
NOT BUG:Test the division functions
NOT BUG:Apparently BN_div_recp reports an error for small divisors (1,2,4,8,40)
NOT BUG:I haven't got mismatches so far If you can please run the test program for a few days (nohup divtest >out& or something) and if it reports a mismatch post the output
NOT BUG:Status update
NOT BUG:Linux is almost the only one where getpid() == thread-id IRIX is another one but only if you stick to sproc(2)
NOT BUG:Use unsigned loop index to make compilers happy
NOT BUG:The main() return value is a program's exit code
NOT BUG:links
NOT BUG:There're two (incompatible) ways to write multi-threaded programs under IRIX one is to call sproc(2) when every thread does get own pid and POSIX threads when all the threads share same pid
NOT BUG:mention RAND_egd()
NOT BUG:The previous revision should have generated _more_ warnings not less .. The return value of handshake_func is signed not unsigned
NOT BUG:More VC++ pickiness (destest.c doesn't have a "return" and the usual signed/unsigned stuff in s3_pkt.c)
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Gets around VC++ compiler pickiness (long != double)
NOT BUG:PR:
NOT BUG:Add OpenSSL licen[cs]e
NOT BUG:mt contained an old copy of mttest.c remove it and move the other files to crypto/threads
NOT BUG:Fix off-by-one error :-)
NOT BUG:In "make clean" delete files created by "make report"
NOT BUG:Fix warnings by using unsigned int where appropriate
NOT BUG:Ignore files that well should be ignored
NOT BUG:VC++ problem
NOT BUG:*** empty log message ***
NOT BUG:EGD bugfix
NOT BUG:Submitted by: Lutz Jaenicke <Lutz.Jaenicke@aet.TU-Cottbus.DE>
NOT BUG:ispell
NOT BUG:linux-ppc
NOT BUG:Submitted by: Franz Sirl <Franz.Sirl-kernel@lauterbach.com>
NOT BUG:signed/unsigned mismatch (VC++)
NOT BUG:Submitted by: Peter 'Luna' Runestig" <peter+openssl-users@runestig.com>
BUG:different snprintf version
NOT BUG:Use threads for linux-ppc
NOT BUG:Clarification
NOT BUG:handle entropy estimate correctly
NOT BUG:Allow code which calls RSA temp key callback to cope with a failure
NOT BUG:Fix typos in some error codes
NOT BUG:divide the correct number..
NOT BUG:work around a bug in BN_div_recp or BN_reciprocal
NOT BUG:BIO_printf() change
NOT BUG:some test results
NOT BUG:Yet another "unixware" spelling
NOT BUG:Use public domain snprintf() implementation by Patrick Powell to avoid potential buffer overrun in BIO_printf() ---------------------------------------------------------------------- crypto/bio/b_print.c CVS: ----------------------------------------------------------------------
NOT BUG:Version 0.9.5beta2-dev (so that the next snapshot will not claim to be 0.9.5beta1)
BUG:(Are the version number examples correct -- the same numerical code for: * 0.9.3beta2-dev 0x00903002 * 0.9.3beta2 0x00903002 ?)
NOT BUG:Don't use buffered fread() to read from DEVRANDOM because this will drain the entropy pool
BUG:Do fflush(stdout) when there was an error
NOT BUG:mention that EGD is used in non-blocking mode
NOT BUG:Don't define platform-dependent preprocessor symbols for OPENSSL_THREAD_DEFINES
NOT BUG:"make update"
NOT BUG:EGD socket info
NOT BUG:remove some (apparently) obsolete entries please put them back in if they're still valid and remove others that are outdated
NOT BUG:Remove structures that are no longer used
BUG:nicer manpages
NOT BUG:Add missing prototypes for new functions
NOT BUG:Make gcc 2.95.2 happy here too
NOT BUG:Add an evil cast because POSIX/SUSv2 define connect(2) require the second argument to be of type ``struct sockaddr *''
NOT BUG:Avoid filename "test.c" because otherwise "make test" will invoke a default rule built into make
NOT BUG:Fix NO_RSA (misplaced #endif)
NOT BUG:EGD info as requested
NOT BUG:remove test "goto err"
NOT BUG:Support EGD
BUG:0.9.5beta1
NOT BUG:Make it possible to have differing tar versions
NOT BUG:Correct a couple of command errors
BUG:CRYPTO_num_locks()
NOT BUG:New make target "report" to run util/selftest.pl
NOT BUG:yet another faq
NOT BUG:make update
NOT BUG:Avoid saving any macros starting with a _ since that can create trouble if header files are included in some "impropper" order It's much better if the application programmer has to specify on his or her own if _REENTRANT shall be defined and when
NOT BUG:correct macro
NOT BUG:*** empty log message ***
NOT BUG:Run the test suite and generate a report
NOT BUG:add missing names
NOT BUG:Sync with Unix
NOT BUG:another faq
NOT BUG:threads mapage
NOT BUG:minor docs changes (added links is the openssl(1) text)
NOT BUG:Frequently asked questions
NOT BUG:Add PBE algorithms with ciphers not digests
NOT BUG:Allow ADH to be used but not present in the default cipher list
NOT BUG:Allow CERTIFICATE to be used in PEM headers for PKCS#7 structures: some CAs do this
NOT BUG:Make pkcs8 work again
NOT BUG:Make EVP_CIPHER_type() return NID_undef if the cipher has no ASN1 OID modify code to handle this
NOT BUG:Update docs
NOT BUG:warning
NOT BUG:Don't list prototypes for internal functions
NOT BUG:Check tlen size in all padding_check functions As called within the rsa library the output buffer always is large enough but if the tlen parameter is there it should be checked in the interest of clarity as proposed by David Sacerdote <das33@cornell.edu>
NOT BUG:Correction to RSA_padding_check_xxx() docs (this time for real)
NOT BUG:Correction for RSA_padding_check_xxx() documentation
NOT BUG:Change EVP_MD_CTX_type so it is more logical and add EVP_MD_CTX_md for the old functionality
NOT BUG:Various warning fixes
NOT BUG:Initial EVP symmetric cipher docs
NOT BUG:Workarounds to make broken programs happy (such as s_client and s_server)
NOT BUG:Fix some bugs and document others
NOT BUG:Move ssl3_do_write from s3_pkt.c to s3_both.c
NOT BUG:More news
NOT BUG:Move MAC computations for Finished from ssl3_read_bytes into ssl3_get_message which is more logical (and avoids a bug in addition to the one that I introduced yesterday :-) and makes Microsoft "fast SGC" less special MS SGC should still work now without an extra state of its own (it goes directly to SSL3_ST_SR_CLNT_HELLO_C which is the usual state for reading the body of a Client Hello message) however this should be tested to make sure and I don't have a MS SGC client
NOT BUG:Blowfish docs
NOT BUG:More compact Configure usage message
NOT BUG:Move the registration of callback functions to special functions designed for that This removes the potential error to mix data and function pointers
NOT BUG:Please note that I'm a little unsure how incorrect calls to the old ctrl functions should be handled in som cases I currently return 0 and that's it but it may be more correct to generate a genuine error in those cases
BUG:Workaround for irrelevant problem
NOT BUG:ignore Client Hellos when we're in handshake anyway
NOT BUG:Tolerate fragmentation and interleaving in the SSL 3/TLS record layer
NOT BUG:Document OPENSSL_VERSION_NUMBER
NOT BUG:Fix gcc warnings
NOT BUG:Change the 'other' structure in certificate aux info
NOT BUG:Allow for higher granularity of entropy estimates by using 'double' instead of 'unsigned' counters Seed PRNG in MacOS/GetHTTPS.src/GetHTTPS.cpp
NOT BUG:Partially submitted by Yoram Meroz <yoram@mail.idrive.com>
NOT BUG:Add -clrext option to 'x509'
NOT BUG:Keep variable names consistent with corresponding pre-processor symbols
NOT BUG:Make excluded cipher entry in opensslconf.h a bit more descriptive
NOT BUG:Change the example to show apr1 with an 8-character salt
BUG:Stay compatible to older Perl5 releases (see diff -r1.11 -r1.12)
NOT BUG:Avoid potential conflicts between #defines in opensslconf.h and defines when compiling applications and allow applications to select what #defines to enable -- OPENSSL_EXLUCDE_DEFINES enables the "#define NO_whatever" stuff only which avoids potential severe confusion caused by "#define _REENTRANT" when opensslconf.h is not the first header file #included
NOT BUG:add missing 'static'
NOT BUG:Make Configure add the configuration options that it was copmiled with
NOT BUG:Currently those defines are protected with a OPENSSL_EXCLUDED That may not be the best strategy but it will do for now
NOT BUG:Cosmetic change No openssl.h.in is not autogenerated :-)
NOT BUG:New functions and option to use NEW in certificate requests
NOT BUG:Make sure the return value of by_file_ctrl(... X509_L_FILE_LOAD ...) aka X509_LOOKUP_load_file(...) is always 0 or 1 not the counter returned from the recently introduced function X509_load_cert_crl_file X509_STORE_load_locations expects X509_LOOKUP_load_file to return 1 on success and possibly there's other software that relies on this too
NOT BUG:Casts now unnecessary because of changed prototype
NOT BUG:Get rid of evil cast
NOT BUG:Reflect API changes
NOT BUG:Add -pass argument to 'enc' Fix to make Win32 compile work again
NOT BUG:Pass phrase reorganisation
NOT BUG:Add support for Compaq Atalla crypto accelerator
NOT BUG:Move primes to read-only segment
NOT BUG:Fix signed/unsigned warnings
NOT BUG:Install manpages below OPENSSLDIR (I think it was meant to be this way?) New variable for man directory
NOT BUG:Create the man directories where the manpages will be put
NOT BUG:Move initial key to read-only segment
NOT BUG:Move CAST_S_tables to read-only segment
NOT BUG:Avoid GNU C assembler templates under Solaris x86
NOT BUG:New NO_INLINE_ASM macro Primary target for the moment is Solaris x86 which can't stand GNU C assembler templates
NOT BUG:Fix for Netscape "hang" bug
NOT BUG:test_mont was exercising 100-bit multiplication modulus X*I-bit where X is 5120 on 32-bit and 151552 on 64-bit architectures and I varies from 0 to 4 As result the test was *unreasonably* slow and virtually impossible to complete on 64-bit architectures (e.g IRIX bc couldn't even swallow such long lines)
NOT BUG:Remove the access() call altogether for VMS since it doesn't quite work for directory specifications (this will be reported as a bug to DEC^H^H^HCompaq) It could as well be removed for all others as well since stat() and open() will return appropriate errors as well but I leave that to someone else to decide
NOT BUG:Time ran away..
NOT BUG:Add a couple of forgotten $(PERL) and make the code to run pod2html a tad more readable
NOT BUG:Modernise 'selfsign.c' to use new X509_NAME code and add example of extension aliasing Also fix the extension aliasing because it didn't work :-)
NOT BUG:HP-UX tune-up: new unified configs HP C compiler bug workaround
NOT BUG:Make pkcs12 and smime applications seed random number generator (otherwise they don't work) and add -rand option Update docs
NOT BUG:A hack to make sure access() will give us the correct answer about the accessability of an "empty" directory Thsi *is* weird and a better solution will be provided in apps/ca.c when I get time to hack at it
NOT BUG:Corrections
NOT BUG:Update
NOT BUG:Implement MD5-based "apr1" password hash
BUG:Correct time in seconds instead of minutes
NOT BUG:Fix shadow
NOT BUG:Add compilation of the new passwd utility
NOT BUG:Add references to the new passwd utility
NOT BUG:Make gcc 2.95.2 happy again even under ``-Wall -Wshadow -Wpointer-arith -Wcast-align -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Winline''
NOT BUG:'passwd' tool
NOT BUG:16 * 8 = 128
NOT BUG:Move down the attributions
NOT BUG:Note about des_ncbc_encrypt
NOT BUG:Constify
NOT BUG:Update docs
NOT BUG:Add command line password options to the reamining utilities amend docs
NOT BUG:des_modes is a section 7 manual so let's make sure that's where it ends up
NOT BUG:First try at documenting the DES (and other algorithms) modes
NOT BUG:Rename the X509V3_*_d2i functions to X509_get_ext_d2i() etc This better reflects their behaviour
NOT BUG:"print" is GNU bc specific
NOT BUG:Refer to EVP_DigestInit() in the hash function descriptions
NOT BUG:A proposed freeze and release time has come up
NOT BUG:Document EVP digest operations
NOT BUG:BN bug fixes
NOT BUG:put missing line back in
NOT BUG:Improve bntest slightly and fix another bug in the BN library
NOT BUG:Support for MacOS X (Rhapsody) is added Also get rid of volatile qualifier in asm definitions as it prevents compiler from moving the instruction(s) during optimization pass
NOT BUG:Typo corrected..
NOT BUG:Memory leak
NOT BUG:BN_div bugfix The q-- loop should not be entered in the n0==d0 case
NOT BUG:Correction: openssl.c must get the long version of the apps_startup() macro
NOT BUG:Cosmetic changes
NOT BUG:Add support for some broken PKCS#8 formats
NOT BUG:Commit patch to bn.h that CVS decided to throw away during 'cvs update' and initialize too_many because memset(... 0 ...) is not used here
NOT BUG:Generate just one error code if iterated SSL_CTX_get() fails Avoid enabled 'assert()' in production library
NOT BUG:Use MONT_WORD macro to control if the word-based or the bignum algorithm is used
NOT BUG:New functions BN_CTX_start() BN_CTX_get() BN_CTX_end() to access temporary BIGNUMs BN_CTX still uses a fixed number of BIGNUMs but the BN_CTX implementation could now easily be changed
NOT BUG:md2 is documented in the md5 page lets see if this works..
NOT BUG:Document RC4
NOT BUG:Replace ridiculous libdes PRNG with RAND_bytes These functions are not used anywhere in OpenSSL but might be used by libdes applications
BUG:New xcbc_ok test vector is required after the parity bits in cbc2_key were fixed up The catch is that in the DESX test the cbc2_key is used as whitening key where *all* 64 bits are significant
NOT BUG:Rename SSLeay_add_all_algorithms() et al to OpenSSL_add_all_algorithms() Move these into separate files so they work properly
NOT BUG:Report progress as in dsatest.c when creating a DHE key
NOT BUG:Use correct not American spelling
NOT BUG:Correct spelling as it was done in the source
NOT BUG:*** empty log message ***
NOT BUG:a short page for "speed"
NOT BUG:ispell (and minor modifications)
NOT BUG:Document hash functions
NOT BUG:Add new -notext option to 'ca' -pubkey option to spkac
NOT BUG:Remove some "WTF??" casts from applications
NOT BUG:Fixes to keep VC++ happy and avoid warnings
NOT BUG:Docs tidy
NOT BUG:Some 'const's for BNs
NOT BUG:Include OpenSSL license
NOT BUG:Tolerate negative numbers in BN_is_prime
BUG:rndsort{Miller Rabin} primality test
NOT BUG:Support for "multiply high" instruction see BN_UMULT_HIGH comment in crypto/bn/bn_lcl.h for further details It should be noted that for the moment of this writing the code was tested only on Alpha If compiled with DEC C the C implementation exhibits 12% performance improvement over the crypto/bn/asm/alpha.s (on EV56 box running AlphaLinux) GNU C is (unfortunately) 8% behind the assembler implementation But it's OpenVMS Alpha users who *may* benefit most as 'apps/openssl speed rsa' exhibits 6 (six) times performance improvement over the original VMS bignum implementation Where "*may*" means "as soon as code is enabled though #define SIXTY_FOUR_BIT and crypto/bn/asm/vms.mar is skipped."
NOT BUG:Update docs
NOT BUG:Bug fix: BN_is_prime() would fail with a high probability for small primes (negligible for larger ones)
NOT BUG:match the prototype
BUG:Remove an =over that never ends
NOT BUG:link to SSL_get_error(3)
BUG:dhgen is gone
NOT BUG:Correct one link
NOT BUG:If n0 == d0 we must alway compute 'rem' "by hand"
NOT BUG:Typo in preprocessor symbol
NOT BUG:Pointer to important manual page that should be written
NOT BUG:Change log entry completed
NOT BUG:undo I keep confusing my directories :(
BUG:EBCDIC support
BUG:Submitted by: Martin Kraemer <martin.kraemer@mch.sni.de>
NOT BUG:Document ERR library
NOT BUG:spelling
NOT BUG:Print a reassuring message when Configure is done
NOT BUG:Reference for SHA-1
NOT BUG:Checked in some junk Sorry
NOT BUG:Note changes
BUG:Seek out and destroy another evil cast
NOT BUG:Typos
NOT BUG:Source code cleanups: Use void * rather than char * in lhash eliminate some of the -Wcast-qual warnings (debug-ben-strict target)
NOT BUG:Update docs: corrections turn buffer docs into manpage fold SHA1 pages into one for improved readability add lhash manpage
NOT BUG:Synchronise
NOT BUG:Documentation for BN_is_prime_fasttest
NOT BUG:Make output of "openssl dsaparam 1024" more interesting :-)
NOT BUG:Tiny changes to previous patch (the log message was meant to be "Make DSA_generate_parameters faster")
NOT BUG:Make DSA_generate_parameters and fix a couple of bug (including another problem in the s3_srvr.c state machine)
NOT BUG:Update docs
NOT BUG:Reimplement so only one synchronous stack is used The benefit is that function pointers are nicely tucker in their structure
NOT BUG:Finally found a form that I like..
NOT BUG:Fix CRL encoding bug
NOT BUG:more information on 0.9.5
NOT BUG:Synchronise with Unix code
NOT BUG:Put config in section 5 where it belongs
NOT BUG:Add CA.pl man page this time..
NOT BUG:New -pkcs12 option to CA.pl Document CA.pl script Initialise and free up the extra DH fields (nothing uses them yet though)
NOT BUG:fix link
NOT BUG:Declare BN_pseudo_rand()
NOT BUG:It works much better when you don't press shift at the wrong moment..
BUG:A couple of things were reversed for BN_pseudo_rand ..
NOT BUG:Added a configuration for myself..
NOT BUG:Use the pod2man that comes with OpenSSL Make it so config(5) really ends up in section 5
NOT BUG:Since pod2man is still evolving and some sites (among others dev.openssl.org) don't have a version that will handle the L<foo(1)|foo(1)> construct yet here is a copy from my laptop (slightly modifed to work independently of the place where perl itself resides)
NOT BUG:Update all links so they will be rendered better
NOT BUG:comment was wrong
NOT BUG:Update comment from bn.h
NOT BUG:Document DSA and SHA New function BN_pseudo_rand() Use BN_prime_checks_size(BN_num_bits(w)) rounds of Miller-Rabin when generating DSA primes (why not use BN_is_prime()?)
NOT BUG:New news
NOT BUG:Increase the year by one
NOT BUG:typo in a comment
NOT BUG:Update comments to provide a better approximation of reality
NOT BUG:Add a pointer to a paper (is the algorithm in section 4.2 the word-based algorithm we are using?)
NOT BUG:enable Montgomery test
NOT BUG:Update references
NOT BUG:Small correction
NOT BUG:Correct typos that ispell did not find
NOT BUG:Made link of reference
NOT BUG:New manpage
NOT BUG:Run ispell Clean up bn_mont.c
NOT BUG:Update all links so they will be rendered better
NOT BUG:Some comments added and slight code clean-ups
NOT BUG:Clarification
NOT BUG:New manual page
NOT BUG:Avoid a race condition
NOT BUG:Improve clarity
NOT BUG:Document RAND_load_file change
NOT BUG:Man page section forgotten..
NOT BUG:Give the correct e-mail address even though the message is not quite serious
NOT BUG:RAND_load_file(... -1) now means "read the complete file"; this is what we now use to read $RANDFILE / $HOME/.rnd (Previously after 'cat'ting lots of stuff into .rnd only the first MB would be looked at.)
NOT BUG:Bugfix for apps/enc.c: Continue if RAND_pseudo_bytes returns 0 (only -1 is an error)
NOT BUG:RAND_pseudo_bytes is good enough for encryption IVs we should not need RAND_bytes (and we cannot use the latter unless we load a seed file)
NOT BUG:The des_xcbc_encrypt apparently always fails Workaround so that "make test" continues anyway
NOT BUG:Add the PID to the output on Win32
NOT BUG:Let's make all the example formated the same shall we?
NOT BUG:Correct indentation
NOT BUG:Document how CRYPTO_EX_DATA stuff works for RSA structures Other structures behave in a similar way
NOT BUG:Documented in the RSA_print page
NOT BUG:RSA_print etc
NOT BUG:Rename asn1/pkcs8.c to asn1/p8_key.c to avoid name conflict
NOT BUG:Tidy up CRYPTO_EX_DATA structures
NOT BUG:Document the BN library
BUG:Under VMS ftruncate should be available
BUG:As ftruncate is not availabe on all platforms switch back to opening the output file with "wb" to truncate it except on VMS (where the file now keeps its original length because it is opened with "rb+" -- does VMS have ftruncate?)
NOT BUG:Make s_server s_client check cipher list return codes
NOT BUG:Update docs
NOT BUG:Minor patch: check only match @STRENGTH and remove eNULL comment
NOT BUG:Add documentation for the ciphers command including a full description of cipher lists
NOT BUG:update PRNG documentation/comments
NOT BUG:dh renamed to dhparam
NOT BUG:config string comment
NOT BUG:fail on all errors
NOT BUG:Document the DH library and make some minor changes along the way
NOT BUG:Add new program dhparam and update docs
NOT BUG:Gets Lutz Jaenicke's name right this time :-)
NOT BUG:Apologies to both concerned
NOT BUG:Apply Lutz Behnke's 56 bit cipher patch with a few minor changes
NOT BUG:Docs haven't been added at this stage They are probably best included in the 'ciphers' program docs
NOT BUG:Move ssl.pod to doc/ssl
NOT BUG:Use comment from md_rand.c (part 2 as well)
NOT BUG:Use comment from md_rand.c in rand.pod
NOT BUG:Docs for sess_id utility
NOT BUG:change comments
NOT BUG:Avoid integer overflow in entropy counter Slightly clarify the RAND_.. documentation
NOT BUG:Document RAND library
NOT BUG:Move ssl.pod to doc/ssl
NOT BUG:In RAND_write_file truncate the file to the no of bytes written (we're now using fopen(... "rb+") instead of fopen(... "wb") so the file is not truncated automatically)
NOT BUG:add ERR_print_errors after "end" label
NOT BUG:Don't "goto err" in client_master_key because no such label exists; just return -1 as in other error cases
NOT BUG:doc/man moved to doc/apps
NOT BUG:mention manual pages
NOT BUG:Make -CAcreateserial start from 1 instead of 0 for serial numbers
NOT BUG:Change the 'man' directory to 'apps' Yes I wish cvs could rename too :-(
NOT BUG:Check RAND_bytes() return value or use RAND_pseudo_bytes()
NOT BUG:Some more ifdefs for no-xxx options
NOT BUG:Don't build the testapps automatically because the openssl program now has s/mime functionality
BUG:AFAICS lst1 stands for "lshift test" not "list"
NOT BUG:WINDOWS is defined in e_os.h The problem was WIN32 (the new egcs uses _WIN32)
NOT BUG:Define WINDOWS in all Mingw32 cases
BUG:Rename lst1 to list1 to avoid name conflict on some platforms
NOT BUG:Define WINDOWS for Mingw32 and Cygwin
NOT BUG:Define WINDOWS
NOT BUG:Oops.. undo change to wrong prototype
NOT BUG:Finish off the X509_ATTRIBUTE string stuff
NOT BUG:Rename X509_att*() stuff to X509at_*() add X509_REQ wrappers
NOT BUG:Rename rsa_oaep_test to the more appropriate name rsa_test for the benefit of MS-DOS users
NOT BUG:Compaq C 6.2 for VMS will complain when we want to convert non-function pointers to function pointers and vice versa The current solution is to have unions that describe the conversion we want to do and gives us the ability to extract the type of data we want
NOT BUG:The current solution is a quick fix and can probably be made in a more general or elegant way
NOT BUG:Avoid converting void * to a function pointer when NULL is defined as ((void *)0) by have a 0 instead
NOT BUG:A test script to check on the header files
NOT BUG:Build the test apps after all of the library has been built
NOT BUG:SOCKETSHR is showing bad declarations again However a simple cast which does no harm fixes that problem
NOT BUG:Build the crypto test applications as well
NOT BUG:Prepare for a possible disabling of certain messages that DEC C spews out
NOT BUG:Give the user the possibility to ask for compilation of only the files that are directly in crypto/ and prepare for a possible disabling of certain messages that DEC C spews out
NOT BUG:It doesn't make sense to try see if these variables are negative since they're unsigned
NOT BUG:Beautification and a few entries added
NOT BUG:SSL_R_UNSUPPORTED_PROTOCOL (as in s23_clnt.c) for SSL 2 when NO_SSL2 is defined not SSL_R_UNKNOWN_PROTOCOL
NOT BUG:Add missing #ifndefs that caused missing symbols when building libssl as a shared library without RSA Use #ifndef NO_SSL2 instead of NO_RSA in ssl/s2*.c
BUG:Submitted by: Kris Kennaway <kris@hub.freebsd.org> Modified by Ulf Möller
NOT BUG:Header for RAND_seed()
NOT BUG:remove debug modification that I checked in accidentally
BUG:New function RAND_pseudo_bytes() generated pseudorandom numbers that are not guaranteed to be unpredictable
NOT BUG:In ssl3_read_n set rwstate to SSL_NOTHING when the requested number of bytes could be read
NOT BUG:Another name longer than 31 chars
NOT BUG:Cut'n'paste error
BUG:RAND_seed
NOT BUG:Synchronise with the makefiles
NOT BUG:Tell the truth about list separators
NOT BUG:add "randomness"
NOT BUG:RAND_bytes's return values is 0 for an error not -1
NOT BUG:Enable memory checking earlier (we correctly free everything except for the BIO through which we print the memory leak list and the leak printing function ignores this one block)
NOT BUG:Typo
NOT BUG:Typo..
NOT BUG:Delete "random" file .rnd in "make clean"
NOT BUG:Let "make test" survive without DEVRANDOM (and rename a target in test/Makefile.ssl to make it easier to guess the name of the file executed by it)
NOT BUG:In EVP_PKEY_assign[_...] return 0 for an error when they "key" is NULL
NOT BUG:- Pseudo-seed the PRNG in programs used for "make test" because otherwise BN_rand will fail unless DEVRANDOM works which causes the programs to dump core because they don't check the return value of BN_rand (and if they did we still couldn't test anything)
NOT BUG:- add comment to some files that appear not to be used at all
NOT BUG:Avoid some warnings and run "make update"
NOT BUG:Avoid shadowing variables and re-enable seeding with more data than read from DEVRANDOM -- just don't pretend it contains entropy
NOT BUG:minor change for the prng
NOT BUG:Use CRYPTO_push_info to track down memory leak (only the CRYPTO_push_info's in the apps/ directory are included in the CVS commit not all those I used in crypto/)
NOT BUG:slightly change usage information
NOT BUG:note about things still to do with RAND_bytes
NOT BUG:Use CRYPTO_push_info to find a memory leak in pkcs12.c
NOT BUG:Precautions against using the PRNG uninitialized: RAND_bytes() now returns int (1 = ok 0 = not seeded) New function RAND_add() is the same as RAND_seed() but takes an estimate of the entropy as an additional argument
NOT BUG:Note about CRYPTO_malloc_init
NOT BUG:PKCS#1 signatures don't use randomness Add a note about the padding functions
NOT BUG:corrections
NOT BUG:Turn BN_prime_checks into a macro
NOT BUG:Primes p where (p-1)/2 is prime too are called "safe" not "strong"
NOT BUG:add dependency and auto-generation rule for bn_prime.h (created by bn_prime.pl which now prints the copyright/license note as found in bn_prime.h)
NOT BUG:Dummy page superseded by crypto/crypto.pod
NOT BUG:Document the RSA library
NOT BUG:Added a comment about Win32
NOT BUG:Add more info to the memory allocation change log Suggested by Bodo
NOT BUG:Make sure that generated files are labeled as such (except in dofile() for now)
NOT BUG:add check for internal error
NOT BUG:The buffer in ss3_read_n cannot actually occur because it is never called with max > n when extend is set
NOT BUG:Clean up some of the SSL server code
BUG:dep/ directory is not needed
NOT BUG:Add missing =back
NOT BUG:Update docs
NOT BUG:New function X509_CTX_rget_chain() make SSL_SESSION_print() display return code Remove references to 'TXT' in -inform and -outform switches
NOT BUG:s_client and s_server now have their own man pages
NOT BUG:Man page for s_server
NOT BUG:Make NO_RSA compile with pedantic
NOT BUG:Add -prexit command to s_client and patch some BIO functions so it doesn't crash Document s_client
NOT BUG:superseded by doc/man/openssl.pod
NOT BUG:Unify doc/openssl.pod and doc/man/openssl.pod which were almost the same and now are identical The next step will be to delete doc/openssl.pod this is just to see the individual CVS deltas
NOT BUG:Use basename instead of complicated sed line
NOT BUG:Manpages for the DH utils and fix for a memory leak in dh program
NOT BUG:Add PKCS#12 manpage and use MAC iteration counts by default
NOT BUG:Install man pages
NOT BUG:Minor format changes
NOT BUG:CA.pl is now generated automatically (using CA.pl.in as input)
NOT BUG:apps/openssl.cnf and the documentation say it's "nombstr" but crypto/asn1/a_strnid.c had "nombchar"
NOT BUG:make no-des and no-rc2 work
NOT BUG:add V_CRYPTO_MDEBUG_ALL Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Honor the no-xxx Configure options when creating .DEF files
NOT BUG:#undef PKCS7_SIGNER_INFO for Win32 to avoid clashes
NOT BUG:Fix so CRLDistributionPoints relativeName option uses the correct type
NOT BUG:Remove obsolete SSLeay instructions
NOT BUG:ispell
NOT BUG:Add some newlines needed for pod2man and run ispell
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:More X509_ATTRIBUTE changes
NOT BUG:add "UnixWare" treated like "unixware"
NOT BUG:Submitted by: "Gary E Miller" <gem@rellim.com>
NOT BUG:Initial automation changes to 'req' and X509_ATTRIBUTE functions
NOT BUG:New functions SSL_get_finished SSL_get_peer_finished
NOT BUG:Add short state string for MS SGC
NOT BUG:Use less complicated arrangement for data strutures related to Finished messages
NOT BUG:Use separate arrays for certificate verify and for finished hashes
NOT BUG:Use prototypes
NOT BUG:Slight code cleanup for handling finished labels
NOT BUG:Further work on MacOS port See INSTALL.MacOS for details
NOT BUG:Rename CA.pl to CA.pl.in (no actual changes) and let Configure set the #! line with the path to Perl
BUG:Submitted by: Peter Jones
NOT BUG:Rhapsody 5.5 (a.k.a MacOS X) compiler bug workaround At the very least passes 'make test' now:-)
BUG:Metrowerks for Motorola tune-up
NOT BUG:Alpha Linux update companion
NOT BUG:Enhanced support for Alpha Linux See CHANGES for details
NOT BUG:Add support for MS "fast SGC"
NOT BUG:Fix some of the command line password stuff New function that can automatically determine the type of a DER encoded "traditional" format private key and change some of the d2i functions to use it instead of requiring the application to work out the key type
NOT BUG:Don't request client certificate in anonymous ciphersuites except when following the specs is bound to fail
NOT BUG:Fix SSL_CTX_add_session: When two SSL_SESSIONs have the same ID they can sometimes be different memory structures
NOT BUG:Delete NO_PROTO section (which apparently was just a typo for NOPROTO -- if anyone had actually ever needed that they should have fixed this typo)
NOT BUG:fix comment
NOT BUG:Add OIDs for idea and blowfish Unfortunately these are in the middle of the OID table so the diff is rather large :-(
NOT BUG:Simplify the trust structure: basically zap the bit strings and represent everything by OIDs
NOT BUG:MacOS updates Initial support for GUSI (MacOS socket implementation) is added
NOT BUG:New {i2d,d2i}_PrivateKey_{bio fp} functions
NOT BUG:Makefile clean-ups crypto/bn/asm/alpha.s compiles on Alpha Linux
NOT BUG:Allow passwords to be included on command line for a few more utilities
NOT BUG:Fixes so NO_RSA works again
NOT BUG:Add PKCS#8 utility functions and add PBE options
NOT BUG:Correct spelling and don't abuse grave accent as left quote (which was allowed by old ASCII definitions but is not compatible with ISO 8859-1 ISO 10646 etc.)
BUG:Synchronising
NOT BUG:Support for ASN1 NULL type
NOT BUG:Minor documentation update
NOT BUG:Even more late break-in MacOS tidbits (last for today)..
NOT BUG:Even more late break-in MacOS tidbits..
NOT BUG:Late break-in patch for MacOS support
NOT BUG:Initial support for MacOS is now available
BUG:Submitted by: Roy Woods <roy@centricsystems.ca> Reviewed by: Andy Polyakov
NOT BUG:MacOS updates
NOT BUG:Rename CRYPTO_add_info => CRYPTO_push_info CRYPTO_remove_info => CRYPTO_pop_info in the hope that these names are more descriptive; and "make update"
NOT BUG:fix typos and other little errors ..
NOT BUG:- Don't assume that int and size_t have the same representation (and that malloc can be called with an int argument) - Use proper prototypes (with argument list) for various function pointers avoid casts (however there are still many such cases left in these files) - Avoid collissions in app_info_cmp if sizeof int != sizeof long - Use CRYPTO_LOCK_MALLOC in mem_dbg.c
NOT BUG:Avoid shadowing p to make the compiler happy
NOT BUG:- Added more documentation in CHANGES - Made CRYPTO_MDEBUG even less used in crypto.h giving MemCheck_start() and MemCheck_stop() only one possible definition - Made the values of the debug function pointers in mem.c dependent on the existence of the CRYPTO_MDEBUG macro and made the rest of the code understand the NULL case
NOT BUG:That's it With this code the old behvior of the debug functionality is restored but you can still opt to have it on even when the library wasn't compiled with a defined CRYPTO_MDEBUG
NOT BUG:- Made sure some changed behavior is documented in CHANGES - Moved the handling of compile-time defaults from crypto.h to mem_dbg.c since it doesn't make sense for the library users to try to affect this without recompiling libcrypto - Made sure V_CRYPTO_MDEBUG_TIME and V_CRYPTO_MDEBUG_THREAD had clear and constant definitions - Aesthetic correction
NOT BUG:Point out that openssl-bugs is public
NOT BUG:Add a comment
NOT BUG:Add missing semicolon to make compiler happy and switch back from MemCheck_start() to CRYPTO_mem_ctrl(CRYPTO_MEM_CHECK_ON) because that is what applications should use (MemCheck_start/stop never really worked for applications unless CRYPTO_MDEBUG was defined both when compiling the library and when compiling the application so probably we should get rid of it)
NOT BUG:Clear out license confusion
NOT BUG:Rebuild of the OpenSSL memory allocation and deallocation routines With this change the following is provided and present at all times (meaning CRYPTO_MDEBUG is no longer required to get this functionality):
NOT BUG:- hooks to provide your own allocation and deallocation routines They have to have the same interface as malloc() realloc() and free() They are registered by calling CRYPTO_set_mem_functions() with the function pointers
NOT BUG:- hooks to provide your own memory debugging routines The have to have the same interface as as the CRYPTO_dbg_*() routines They are registered by calling CRYPTO_set_mem_debug_functions() with the function pointers
NOT BUG:I moved everything that was already built into OpenSSL and did memory debugging to a separate file (mem_dbg.c) to make it clear what is what
NOT BUG:With this the relevance of the CRYPTO_MDEBUG has changed The only thing in crypto/crypto.h that it affects is the definition of the MemCheck_start and MemCheck_stop macros
NOT BUG:Use MemCheck_start() instead of CRYPTO_mem_ctrl() and generate a small leak to test (conditional)
NOT BUG:Synchronise VMS scripts with Unix Makefiles
NOT BUG:Update contact information (openssl-bugs openssl-security)
NOT BUG:Delete an unused variable and make the PKCS#12 keygen debugging code work again
NOT BUG:Fix the S/MIME code to use canonical MIME format for encrypted mail Also update the smime docs
NOT BUG:Solaris x86 assembler problem is already addressed in ./config (bug reports keep coming in because that was still missing in 0.9.4)
NOT BUG:Various S/MIME fixes Fix for memory leak recipient list bug and not excluding parameters with DSA keys
NOT BUG:Fix a typo in a_enum.c
NOT BUG:Various S/MIME fixes
NOT BUG:Fix for crashing INTEGERs ENUMERATEDs and OBJECT IDENTIFIERs
NOT BUG:Also fix a memory leak in PKCS#7 routines
NOT BUG:Make the PKCS#7 S/MIME functions check for passed NULL pointers
NOT BUG:Fix the usage message of smime utility and sanitise the return codes
NOT BUG:Add some documentation
NOT BUG:Don't use inline assembler on x86 Solaris (would need a different syntax)
NOT BUG:Useless files deleted -- they were just copies of files of the same name in the apps/ directory (which were recently changed)
NOT BUG:Add i2d_ASN1_PRINTABLESTRING() function and do 'make update'
NOT BUG:Modify S/MIME application so the -signer option writes the signer(s) to a file if we are verifying
NOT BUG:Merge in my S/MIME library and utility
NOT BUG:CORE SDI proposed patch doesn't make any sense Undo
NOT BUG:Oops!
NOT BUG:Circumvent an exploitable buffer overrun error in RSA Security's RSAREF library See: http://www.CORE-SDI.COM/english/ssh/index.html
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Use des_set_key_unchecked not des_set_key
NOT BUG:Add functions des_set_key_checked des_set_key_unchecked Never use des_set_key (it depends on the global variable des_check_key) but usually des_set_key_unchecked Only destest.c bothered to look at the return values of des_set_key but it did not set des_check_key -- if it had done so most checks would have failed because of wrong parity and because of weak keys
NOT BUG:New function PKC12_newpass()
NOT BUG:Fix a bug in the modified purpose code: it wasn't updated to use the new purpose getting function
NOT BUG:Update the ca-cert.pem and pca-cert.pem "CA" certificates so they really are CA certificate: that is they have the appropriate extensions
NOT BUG:Change the trust and purpose code so it doesn't need init either and has a static and dynamic mix
NOT BUG:Modify the X509 V3 extension lookup code
NOT BUG:Make salting the default Fail gracefully if the input is not salted
NOT BUG:Document the extension tests performed by the -purpose test in the x509 utility
NOT BUG:Document all possible errors (and some impossible) from the verify program
NOT BUG:Remainder of SSL purpose and trust code: trust and purpose setting in SSL_CTX and SSL functions to set them and defaults if no values set
NOT BUG:Add part of chain verify SSL support code: not complete or doing anything yet
NOT BUG:Add a function X509_STORE_CTX_purpose_inherit() which implements the logic of "inheriting" purpose and trust from a parent structure and using a default: this will be used in the SSL code and possibly future S/MIME
NOT BUG:Partial documentation of the 'verify' utility Still need to document how all the extension checking works and the various error messages
NOT BUG:Add trust setting support to the verify code It now checks the trust settings of the root CA
NOT BUG:After a few fixes it seems to work OK
NOT BUG:Still need to add support to SSL and S/MIME code though
NOT BUG:Add compilation of x509_trs
NOT BUG:Oops! Commit died on me :-(
NOT BUG:Initial trust code: allow setting of trust checking functions in a table Doesn't do too much yet
NOT BUG:Make the -<digestname> options in 'x509' affect all relevant options
NOT BUG:Change the name of the 'notrust' options to 'reject' as this causes less confusion and is a better description of the effect
NOT BUG:A few constification changes
NOT BUG:New options to the -verify program which can be used for chain verification Extend the X509_PURPOSE structure to include shortnames for purposed and default trust ids
NOT BUG:Still need some extendable trust checking code and integration with the SSL and S/MIME code
NOT BUG:Initial chain verify code: not tested probably not working at present However nothing enables it yet so this doesn't matter :-)
NOT BUG:Support for authority information access extension
NOT BUG:Fix so EVP_PKEY_rset_*() check return codes
NOT BUG:Transparent support for PKCS#8 private keys in RSA/DSA
NOT BUG:New universal public key format
NOT BUG:Fix CRL+cert load problem in by_file.c
NOT BUG:Make verify report errors when loading files or dirs
BUG:Support for otherName in GeneralName
NOT BUG:Update dependencies
NOT BUG:Fix warning
NOT BUG:Restore traditional SSL_get_session behaviour so that s_client and s_server don't leak tons of memory
NOT BUG:Missing #ifdef NO_DES
NOT BUG:Modify verify code to handle self signed certificates
NOT BUG:Store verify_result with sessions to avoid potential security hole
NOT BUG:Fix for a bug in PKCS#7 code and non-detached data
NOT BUG:Remove rc4-64 from ciphers since it doesn't exist..
NOT BUG:Clarify docs
NOT BUG:Add a salt to the key derivation using the 'enc' program
NOT BUG:New function X509_cmp()
NOT BUG:This corrects the reference count handling in SSL_get_session Previously the returned SSL_SESSION didn't have its reference count incremented so the SSL_SESSION could be freed at any time causing seg-faults if the pointer was subsequently used Code that uses SSL_get_session must now make a corresponding SSL_SESSION_free() call when it is done to avoid memory leaks (or blocked up session caches)
BUG:Submitted By: Geoff Thorpe <geoff@eu.c2.net>
NOT BUG:'req' fixes Reinstate length check one request fields Fix to stop null being added to attributes Modify X509_LOOKUP X509_INFO to handle auxiliary info
NOT BUG:Add some examples to the enc man page
NOT BUG:Add support for the 40 and 64 bit RC2 and RC4 ciphers in 'enc' add documentation for 'enc'
NOT BUG:Add info about the header and footer lines used in PEM formats and add an nseq manpage
NOT BUG:Correct x509 manpaghe and add a crl manpage
NOT BUG:The info removal code was overcomplicated and error-prone (references being wrongly decreased) Fixed
NOT BUG:Avoid deadlock
NOT BUG:Add an spkac manual page and fix the pkcs7 manpage
NOT BUG:Avoid some silly compiler warnings and add the change log I forgot :-)
NOT BUG:Two changes have been made:
NOT BUG:1 Added code to the memory leak detecting code to give the user the possibility to add information thereby forming a traceback
NOT BUG:2 Make the memory leak detecting code multithread-safe
NOT BUG:The idea is that we're actually dealing with two separate critical sections one containing the hash tables with the information the other containing the current memory checking mode Those should not be handled with the same lock especially since their handling overlap Hence the added second lock
NOT BUG:Some crypto applications are now being built on Unix so they should on VMS as well Not by default however
NOT BUG:It's possible that considering the configuration file as a binary file works on Unix and MS-DOS/Windows It does not under VMS so open it as text
NOT BUG:Avoid silly compiler warnings about functions not being declared and an int missing
NOT BUG:Some new names in asn1.h are longer than 31 chars which disturbs the VMS C compilers..
NOT BUG:Adjust to changes in apps/openssl.cnf
NOT BUG:Adjust to changes in apps/Makefile.ssl
BUG:DIFFERENCE doesn't handle long (>255 chars) lines well Use BACKUP instead No I'm not joking
NOT BUG:adjust to changes in test/Makefile.ssl
NOT BUG:adjust to changes in test/testssl
NOT BUG:Make sure installed files are world readable
NOT BUG:Merge some common functionality in the apps delete the encryption option in the pkcs7 utility (they never did anything) and add a couple more options to pkcs7
NOT BUG:Oops forgot the S/MIME v3 RFC
NOT BUG:More docs and corrections/updates
NOT BUG:Add password command line options to some utils Fix and update man pages
NOT BUG:Fix a couple of outstanding issues: update STATUS file fix NO_FP_API problems
NOT BUG:Update docs change 'ca' to use the new callback parameter Now moved key_callback into app.c because some other utilities will use it soon
NOT BUG:Oops The pkcs8 man page wasn't finished: this is an updated version
NOT BUG:Very preliminary POD format documentation for some of the openssl utility commands..
NOT BUG:Undo silly change
NOT BUG:Fix (spurious) warnings
NOT BUG:Avoid some warnings
NOT BUG:Fix to the -revoke option in ca It was leaking memory crashing and just plain not working :-(
NOT BUG:Also fix some memory leaks in the new X509_NAME code
NOT BUG:Fix so new app_rand code doesn't crash 'x509' and move #include so it compiles under Win32
NOT BUG:Allow additional information to be attached to a certificate: currently this includes trust settings and a "friendly name"
NOT BUG:Fix assembler for Alpha (tested only on DEC OSF not Linux or *BSD) The problem was that one of the replacement routines had not been working since SSLeay releases For now the offending routine has been replaced with non-optimised assembler Even so this now gives around 95% performance improvement for 1024 bit RSA signs
NOT BUG:*** empty log message ***
NOT BUG:Fix to PKCS#7 routines so it can decrypt some oddball RC2 handling
NOT BUG:Continued multibyte character support
NOT BUG:Add a bunch of functions to simplify the creation of X509_NAME structures
NOT BUG:Change the X509_NAME_entry_add stuff in req/ca so it no longer uses X509_NAME_entry_count(): passing -1 has the same effect
NOT BUG:Always hash the pid in the first iteration in ssleay_rand_bytes don't try to detect fork()s by looking at getpid() The reason is that threads sharing the same memory can have different PIDs; it's inefficient to run RAND_seed each time a different thread calls RAND_bytes
NOT BUG:Make md_rand.c more robust
NOT BUG:Warn about RANDFILE being overwritten
BUG:Don't be overly paranoid
NOT BUG:New file app_rand.c with some functionality used in various openssl applications
NOT BUG:Various randomness handling bugfixes and improvements -- some utilities that should have used RANDFILE did not and -rand handling was broken except in genrsa
NOT BUG:Report an error from X509_STORE_load_locations when X509_LOOKUP_load_file or X509_LOOKUP_add_dir failed
NOT BUG:Update Borland C++ builder support
NOT BUG:Submitted by: Janez Jere <jj@void.si>
NOT BUG:Improve support for running everything as a monolithic application
BUG:Submitted by: Lennart Bång Bodo Möller
NOT BUG:Respect PEX_LIBS and EX_LIBS when building binaries (needed for RSAREF builds)
NOT BUG:More multibyte character support
NOT BUG:Functions to get keys from EVP_PKEY structures
NOT BUG:Constification
NOT BUG:Don't return stuff from void functions
NOT BUG:New function ASN1_mbstring_copy() to handle ASN1 string copying Ultimately this will be used to clear up the horrible DN mess
NOT BUG:Replace the macros in asn1.h with function equivalents Also make UTF8Strings tolerated in certificates
NOT BUG:Use of DEVRANDOM must be #ifdef'ed (the #ifdef was commented out between SSLeay 0.8.1b and 0.9.0b with no apparent reason) If we *want* an error when DEVRANDOM is not defined (it always is with the current e_os.h) we should use #error
NOT BUG:Initial support for certificate purpose checking: this will ultimately lead to certificate chain verification It is VERY EXPERIMENTAL at present though
NOT BUG:Add EX_DATA support to X509 Fix a bug in the X509_get_d2i() functions which didn't check if crit was NULL
NOT BUG:New functions to parse and get extensions
NOT BUG:More patches
NOT BUG:RC4 tune-up featuring 30-40% performance improvement on most RISC platforms See crypto/rc4/rc4_enc.c for further details
NOT BUG:RC4 tune-up featuring 30-40% performance improvement on most RISC platforms See crypto/rc4/rc4_enc.c for further details
NOT BUG:Fix incorrect usage messages in some commands
NOT BUG:Fix for bug in pkcs12 program and typo in ASN1_tag2str()
NOT BUG:Fix for bug in pkcs12 program and typo in ASN1_tag2str()
NOT BUG:New option -dhparam to s_server to allow the DH parameter file to be set explicitly Previously it couldn't be changed because it was hard coded as "server.pem"
NOT BUG:Add support for public key input and output in rsa and dsa utilities with some new DSA public key functions that were missing
NOT BUG:Also beginning of a cache for X509_EXTENSION structures: this will allow them to be accessed more quickly for things like certificate chain verification..
NOT BUG:Fix for d2i_ASN1_bytes and stop PKCS#7 routines crashing is signed message contains no certificates
NOT BUG:Also fix typo in RANLIB changes
NOT BUG:Add prototypes for new DSA functions Steve added recently
NOT BUG:Pass $(RANLIB) when doing "make install" in subdirectories; rsaref needs ist
NOT BUG:Submitted by: Will Day
NOT BUG:Fix warnings
NOT BUG:Fix for base64 BIO decoding bug
NOT BUG:Modify the 'speed' application so it now uses RSA_sign and RSA_verify instead of RSA_private_encrypt and RSA_public_decrypt
BUG:HPUX 11 flags Contributed by: Peter Huang <PETER_HUANG@HP-Cupertino-om8.om.hp.com>
NOT BUG:Cosmetic changes
NOT BUG:VC++ warning
NOT BUG:Generate obj_dat.h in "make update"
NOT BUG:"make update"
NOT BUG:new control code BIO_C_RESET_READ_REQUEST
NOT BUG:RC4 tune-up
NOT BUG:See comments in the code (after #if defined(RC4_CHUNK)) for more details
NOT BUG:Fix typo in error message
BUG:Submitted by: Alan Batie
NOT BUG:Honor BUFSIZZ definition in s_server don't use tiny 32 byte buffer (which leads to truncation of client cipher list)
NOT BUG:Bugfix: avoid opening CAfile when it's NULL
NOT BUG:Use a temporary file not a pipe for BN test because there are some broken bc's around
NOT BUG:Fix typo that I introduced when reformatting lines
NOT BUG:Fix warnings
NOT BUG:More patches
NOT BUG:(Are there any others that have been submitted but not yet reviewed/integrated?)
NOT BUG:typo
NOT BUG:Keep line lengths < 80 characters
NOT BUG:note a few things that need to be done
NOT BUG:Fix to make s_client and s_server work under Windows A bit of a hack but an improvement on not working at all
NOT BUG:Lots of evil casts to stop VC++ choking with "possible loss of data" warnings :-(
NOT BUG:Add new sign and verify members to RSA_METHOD and change SSL code to use sign and verify rather than direct encrypt/decrypt
NOT BUG:Various CRL enhancements tidies and workaround for broken CRLs
NOT BUG:Document -startdate and -enddate in usage summary
NOT BUG:Fix typo
NOT BUG:Update dependencies
NOT BUG:typo in a comment
NOT BUG:Add some debug-solaris-...-cc configurations
BUG:Set s->version correctly for "natural" SSL 3.0 client hello
NOT BUG:Initial support for MacOS
NOT BUG:This will soon be complemented with MacOS specific source code files and INSTALL.MacOS
NOT BUG:I (Andy) have decided to get rid of a number of #include <sys/types.h> I've verified it's ok (both by examining /usr/include/*.h and compiling) on a number of Unix platforms Unfortunately I don't have Windows box to verify this on I really appreciate if somebody could try to compile it and contact me a.s.a.p in case a problem occurs
NOT BUG:Submitted by: Roy Wood <roy@centricsystems.ca> Reviewed by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Fix yet another bug for client hello handling
NOT BUG:Repair another bug in s23_get_client_hello: tls1 did not survive to restarts so get rid of it
BUG:Parantheses not needed
NOT BUG:"make update"
NOT BUG:Use non-copying BIO interface in ssltest.c
NOT BUG:typo
NOT BUG:Correction for the testapps lines
NOT BUG:Truncate message about "new" include filenames
NOT BUG:Re-enable message about transition <foo.h> => <openssl/foo.h> because various programs are not updated that often and hence still expect header files names without the openssl/ prefix
NOT BUG:Correct warnings
NOT BUG:some more patches for avoiding problems with non-automatic variables
NOT BUG:Fix typo
NOT BUG:Oops.. forgot the other RSA_NULL patches..
NOT BUG:This is preliminary support for an "RSA null" cipher Unfortunately when OpenSSL is compiled with NO_RSA no RSA operations can be used: including key generation storage and display of RSA keys Since these operations are not covered by the RSA patent (my understanding is it only covers encrypt decrypt sign and verify) they can be included: this is an often requested feature attempts to use the patented operations return an error code
NOT BUG:This is enabled by setting RSA_NULL This means that if a particular application has its own legal US RSA implementation then it can use that instead by setting it as the default RSA method
NOT BUG:Still experimental and needs some fiddling of the other libraries so they have some options that don't attempt to use RSA if it isn't allowed
NOT BUG:Use proper flags to build the testapps (default CC value causes confusion on Solaris)
NOT BUG:Non-copying interface to BIO pairs It's still totally untested ..
NOT BUG:Correct address in a comment
NOT BUG:*** empty log message ***
NOT BUG:Check the as version on Solaris x86 People don't read INSTALL anyway :)
NOT BUG:New function to convert ASN1 tag values to strings Also fix typo in asn1.h
NOT BUG:Fix warnings
NOT BUG:Fix warnings
BUG:Reinitialize conf to NULL whenver ca application is started Submitted by: Lennart Bang
NOT BUG:SHA clean-up Intel assembler companion
BUG:I've chosen to nest two functions in order to save about 4K As a result s1-win32.asm doesn't look right (nested PROC/ENDP SEGMENT/ENDS) and it's probably impossible to compile I assume I have to reconsider.. But not today..
NOT BUG:SHA clean-up and (LP64) tune-up
NOT BUG:"Clean-up" stands for the fact that it's using common message digest template ../md32_common.h and sha[1_]dgst.c are reduced down to '#define SHA_[01]' and then '#include "sha_locl.h"' It stands "(LP64)" there because it's 64 bit platforms which benefit most from the tune-up The updated code exhibits 40% performance improvement on IRIX64 (sounds too good huh? I probably should double check if it's not some cache trashing that was holding it back before) 28% - on Alpha Linux and 12% - Solaris 7/64
NOT BUG:New UTF8 utility functions to parse/generate UTF8 strings
BUG:Reinitialize global variables when necessary (for monolith application)
NOT BUG:use explicit constant 11 just once
NOT BUG:Make previous bugfix actually work
NOT BUG:Fix server behaviour when facing backwards-compatible client hellos
NOT BUG:-no_dhe option for ssltest.c
NOT BUG:Use closesocket macro consistently not close directly for easier portability Submitted by: Lennart Bång
NOT BUG:Handle "#if 0" correctly (I hope)
NOT BUG:Add new 'spkac' utility and several SPKAC utility functions
NOT BUG:Make DH_free() free up any ex_data and also call the finish method
NOT BUG:RIPEMD160 shape-up Final touch
NOT BUG:RIPEMD160 shape-up Intel assembler companion Cycle counter benchmarks went down from 1050 to 921 cycles on Pentium II I haven't checked the figures on Pentium yet
NOT BUG:RIPEMD160 shape-up Major news are that it's operational on all platforms now and I'm putting it back to 'make test' later today
NOT BUG:make testapps after the library
BUG:md32_common.h update and accompanying MD5 update
NOT BUG:Allow the extension section specified in config files to be overridden on the command line for various utilities
NOT BUG:Allow the 1.OU="my OU" syntax in 'ca' for SPKACs
NOT BUG:Allow extensions to be added to certificate requests update the sample config file (change RAW to DER)
NOT BUG:make update
NOT BUG:Minor MIPS III/IV tune-up
NOT BUG:Fix for a bug which meant encrypting BIOs sometimes wouldn't read the final block
NOT BUG:Initial support for DH_METHOD Also added a DH lock A few changes made to DSA_METHOD to make it more consistent with RSA_METHOD
NOT BUG:Initial support for DSA_METHOD..
NOT BUG:Allow memory bios to be read only and change PKCS#7 routines to use them
NOT BUG:Fix horrible (and hard to track down) bug in ssl23_get_client_hello: In case of a restart v[0] and v[1] were incorrectly initialised This was interpreted by ssl3_get_client_key_exchange as an RSA decryption failure (don't ask me why) and caused it to create a _random_ master key instead (even weirder) which obviously led to incorrect input to ssl3_generate_master_secret and thus caused "block cipher pad is wrong" error messages from ssl3_enc for the client's Finished message Arrgh
NOT BUG:Really undo the base64 change so that make test survives
NOT BUG:Fix PKCS7_ENC_CONTENT_new() to include a sensible default content type and add support for encrypted content type in PKCS7_set_content()
NOT BUG:Return 0 for succesful exit when -noout is used
NOT BUG:Undo base64 decoding change (was not a bug fix)
BUG:editing error
NOT BUG:Honor $PERL environment variable in Configure
BUG:Submitted by: Even Holen <Even.Holen@itea.ntnu.no>
NOT BUG:Fix faulty base64 decoding of data that was 46 or 47 bytes long
BUG:Submitted by: Ivan Nejgebauer <ian@uns.ns.ac.yu>
NOT BUG:Add pkcs7 and des apps to "make all"
NOT BUG:Compile pkcs7 and des apps
NOT BUG:Disable the text about foo.h => openssl/foo.h Everyone should have got it by now
NOT BUG:Remove -DWINDOWS in debug configuration
NOT BUG:Submitted by: Erik Johannisson <erik@johannisson.se>
NOT BUG:Submitted by: Lidong Zhou <ldzhou@cs.cornell.edu>
NOT BUG:Add functions to allow extensions to be added to certificate requests
NOT BUG:Modify obj_dat.pl to take its files from the command line Usage is now perl obj_dat.pl objects.h obj_dat.h this should avoid redirection shell escape problems under Win32
NOT BUG:Fix typo
NOT BUG:Updates Prototypes and constant declarations for non-copying reads and writes for BIO pairs (which is totally untested as of now so I don't yet commit the actual source code but reserve the numbers to avoid conflicts)
NOT BUG:Support for parsing of certificate extensions in PKCS#10 requests: these are used by things like Xenroll Also include documentation for extendedKeyUsage extension
BUG:BIO_write and BIO_read could in theory return -2
NOT BUG:-crlf option
NOT BUG:Provide fixed seed for parameter generation to speed up -dhe1024
NOT BUG:Bump after tarball rolling Friends feel free to start again hacking for 0.9.5.. ;)
NOT BUG:Bump version to 0.9.4
NOT BUG:Ok I'll do a few more final platform tests and then I'll roll the 0.9.4 tarball baby for us PLEASE DO NOT COMMIT ANYTHING UNTIL YOU SEE MY FINAL COMMITS TO `STATUS' INDICATING THAT WE'VE REACHED 0.9.5-dev
NOT BUG:Ok final fix for `config' script to detect all flavors of FreeBSD in a more general way
NOT BUG:spelling
NOT BUG:Install libRSAglue.a when OpenSSL is build with RSAref This should now finally make the RSAref users happy..
NOT BUG:Comments
NOT BUG:add comments
NOT BUG:more consistent formatting
NOT BUG:*** empty log message ***
BUG:Backout the following change:
NOT BUG:| revision 1.109 | date: 1999/06/24 19:39:23; author: ulf; state: Exp; lines: +0 -1 | Use the same CPU recogition method for FreeBSD 3 as for the other FreeBSD | versions (The FreeBSD and FreeBSD-elf Configure entries were identical.)
NOT BUG:Because Ulf overlooked the ELF vs a.out difference i.e the two entries were _NOT_ identical! This way OpenSSL 0.9.4 at least compiles again under FreeBSD 2 and 3 For 0.9.5-dev I'll try to fix the stuff in a more general way to also allow FreeBSD 4 and other variants
BUG:0.9.4
NOT BUG:Fix two remaining prototype-related warnings
NOT BUG:Remove the perl stuff also optically from the build procedure because it could confuse people (which then send us bug reports)..
NOT BUG:Let us prepare for tomorrow..
NOT BUG:I don't think this is a real showstopper Our internal verify procedure lacks even more and I consider this more a useful feature request than a release showstopper
NOT BUG:A few more ``#ifndef NO_FP_API / #endif'' pairs for consistency Hint from: Andrija Antonijevic <TheAntony2@bigfoot.com>
NOT BUG:consistent style
NOT BUG:New option "-crlf" to s_client and s_server which tells them to convert LFs into CRLFs when forwarding data from stdin to the TLS connection This is necessary for properly talking HTTP Because of the code freeze this change is by default disabled for now; without -DAPPS_CRLF the code is exactly as before
NOT BUG:add some more entries for 0.9.4
NOT BUG:change formatting a bit
NOT BUG:Fix -startdate and -enddate arguments to 'ca' program Also update NEWS file with some 0.9.4 changes
NOT BUG:fix the bug
NOT BUG:Dont' assume that something starting with '-' is a filename -- "openssl gendsa -help" now prints the usage summary not error messages that now file -help was found
NOT BUG:typo while I poke around..
BUG:DSA_dup_DH
NOT BUG:New function DSA_dup_DH and fixes for bugs that were found while implementing and using it
NOT BUG:Add a wish
NOT BUG:Change all the -'s to _'s
NOT BUG:Configure fix for Windows: under Windows+perl "system" ends up going via the command shell which means that redirecttion needs backslashes in the paths
NOT BUG:improve clarity of instructions
BUG:0.9.4 won't be completed in July ..
NOT BUG:More diagnostics
NOT BUG:Make it compile under -pedantic
NOT BUG:comment
NOT BUG:Revert erroneous change
NOT BUG:automatically use no-mdc2 if no-des is requested
NOT BUG:Revert previous change -- it was an accident
NOT BUG:avoid some NO_<cipher> problems
NOT BUG:generate error message
NOT BUG:fix previous modification -- if ssl->cert is NULL don't follow the pointer
NOT BUG:avoid cast
NOT BUG:The SSL_CTX's cert structure is not relevant for the SSL (because now SSL_new makes a copy)
NOT BUG:SSL_shutdown was done too early
NOT BUG:don't prematurely shut down socket -- use SSL_shutdown
NOT BUG:Extra i386+gcc bn_div.c tune-up featuring inline division and saving the remainder left in %edx Here is the resulting performance improvement matrix (improvement as a result of this *and* previous tune-up committed two days ago) The results were obtained by profiling the "div" part of the crypto/bn/bnspeed.c
NOT BUG:CPU BN_div bn_div_words overall comment ------------------------------------------------------------------------ PII +16% accumulated by +2-3% PII multiplies damn fast! Taking inlining multiplication out of the loop didn't make too much difference Eliminating of the multiplication involved in remainder calculation is the major factor
BUG:Pentium +45% accumulated by +7-9% mull isn't that fast and replacing inlining multiplications with additions in the loop has more visible effect:-)
BUG:MIPS +75% +12% +20-25% In addition to the taking mults R10000 out of the loop (giving 12% in the asm/mips3.s) three mults were eliminated in BN_div
NOT BUG:Alpha +30% +50% +10-15% Same as above But remember that EV4 bn_div_words is a C implementation It takes 4 Alpha mults in C to do the same thing as 1 MIPS mult in assembler does So the effect (50%) is more impressive But not the overall one.. Well if Alpha bn_mul_add would be implemented in assembler overall improvement would be closer to MIPS..
NOT BUG:by request: let BN_dup(NULL) just return NULL
NOT BUG:Bignum division tune-up Idea is to move multiplications in front of loop body and replace 'em with addition/subtraction
NOT BUG:correct error signalling for opendir() failure
NOT BUG:Fix to PKCS#12 code to use the cipher block length when allocating a buffer for encrypted data rather than hard coding '8'
NOT BUG:Allow the PKCS#7 (S/MIME encrypt) application to support more than one recipient
NOT BUG:Tidy up pkcs12 application
NOT BUG:Avoid path separator problems
NOT BUG:No use in naming the cblock _; the structure still is incompatible to Kerberos
NOT BUG:*** empty log message ***
NOT BUG:obj_dat.h is autogenerated (it was in the CVS because old versions of Configure didn't generate the file in Windows builds)
NOT BUG:Always use buildinf.h which now includes the mk1mfinf.h data Using different files caused problems because the dependencies in the Makefiles produced by mk1mf.pl were for the standard case i.e mentioned buildinf.h and not mk1mfinf.h
BUG:Restore compability with kerberos/des.h (I had deleted some seemingly useless definitions such as C_Block earlier)
NOT BUG:VMS updates Submitted by: Richard Levitte <levitte@stacken.kth.se>
NOT BUG:New function OBJ_obj2txt()
NOT BUG:New RSA flag RSA_FLAG_EXT_PKEY to always call rsa_mod_exp
NOT BUG:when invoking bn_*_comba[48] result->top wasn't always set correctly
NOT BUG:close files
NOT BUG:Use correct CFLAG definition for makefile.one builds
NOT BUG:change CFLAGS to those given in Configure
BUG:-DPLATFORM and -DCFLAGS command line arguments are no longer used
NOT BUG:summary of Andy's changes to Configure
NOT BUG:SPARC Solaris config updates
NOT BUG:./config sences whole range of SPARC instruction sets Do note that it favors Sun C now if both gcc and cc 4.2 or later are present!
NOT BUG:SGI IRIX config updates
NOT BUG:Minor MD5 tune-up for WIN32 on Intel
NOT BUG:Added support for SPARC Linux
NOT BUG:GNU assembler (read SPARC Linux) support added
NOT BUG:- performance retunes v8plus bn_*_comba routines are reimplemented; - support for GNU assembler (read SPARC Linux);
NOT BUG:First cut for a proposed code freeze and release dates (from Steve and me) All OpenSSL developers: Please feel free to adjust the dates if they still do not fit into your personal scheduling
NOT BUG:Don't include x509.h when we just need asn1.h
NOT BUG:Remove obsolete files
NOT BUG:ignore r586unix.cpp
NOT BUG:date.h no longer to be deleted by "make clean"
NOT BUG:Make the perl module compile and eliminate some of the warnings Still doesn't work (the destructor on BIO and SSL is called immediately after creating the object Why that??)
NOT BUG:Torture weak compilers less by not automatically including x509.h where it is not needed
NOT BUG:additional argument for key_callback
NOT BUG:Additional user data argument to pem_password_cb function type and to lots of PEM_.. functions Submitted by: Damien Miller <dmiller@ilogic.com.au>
NOT BUG:avoid -DPLATFORM=\"...\" and -DCFLAGS=\"...\" command lines use new file buildinf.h instead
NOT BUG:slight clean-up
NOT BUG:Auto-generated file -- this should not be under version control (and the other */asm/*.cpp files are not)
NOT BUG:Get rid of redundant multiplications in bn_div_words
NOT BUG:"make TABLE" (to follow recent Configure change)
NOT BUG:MIPS III/IV assembler module is reimplemented
NOT BUG:crypto/bn/asm/mips3.s is moved to crypto/bn/asm/obsolete/
NOT BUG:crypto/bn/asm/mips3.s is obsolete I'm moving it to crypto/bn/asm/obsolete in order to replace it with a new version
NOT BUG:SSL_MODE_ENABLE_PARTIAL_WRITE and SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER work as intended both for SSLv2 and TLS
NOT BUG:New compile time option -DCRYPTO_MDEBUG_THREAD
NOT BUG:Have CRYPTO_MDEBUG_TIME automatically set CRYPTO_MDEBUG and make it the default for some debugging configurations
NOT BUG:Add optional (compile-time configurable) time to CRYPTO_mem_leaks output This is much more helpful than the counter when doing tests with the library interactively
NOT BUG:"make clean" has to delete date.h
NOT BUG:DES library changes
NOT BUG:Did not check the last SDIR line for excluded algorithms
NOT BUG:More DES library cleanups: remove references to srand/rand and delete an unused file
BUG:RSA private keys without dmp1/dmq1/iqmp are also valid (but slower)
BUG:NO_HMAC
NOT BUG:Fix option processing Submitted by: Sam Tetherow
NOT BUG:Judging from various messages on the OpenSSL mailing lists HP-UX 10 with cc (but not gcc) seems to work well with BN_LLONG; but -O4 is too much
NOT BUG:Eliminate a warning: BN_mod_inverse() returns a (BIGNUM *) and remove and unnecessary cast
NOT BUG:Continues NASM support This might work now Its still experimental but it passes all the tests Added documentation in INSTALL.W32
NOT BUG:cosmetic changes
NOT BUG:More NASM support code it still doesn't work but it doesn't work less than it didn't work before :-)
NOT BUG:fix memory leak in s3_clnt.c
NOT BUG:typo in string
NOT BUG:Looks like another memory leak ..
NOT BUG:Beginnings of experimental support for NASM assembler This is a free assembler for various X86 platforms including Win32 It can output object files that VC++ will tolerate so it could be used to provide assembly language support to Win32 without the need for MASM
NOT BUG:This is preliminary stuff: it doesn't even work yet
NOT BUG:correct error handling
NOT BUG:insert spaces in products that occur in error codes
NOT BUG:typo
NOT BUG:New function RSA_check_key
NOT BUG:New function RSA_check_key openssl rsa -check
NOT BUG:Various changes to stop VC++ choking under Win32
NOT BUG:Add a debugging option to PKCS#5 v2.0 key generation function
NOT BUG:Copy flags in ASN1_STRING_dup()
NOT BUG:Fix a bug in x509.c that omitted DSA parameters when they didn't match the signers parameters Changed it to never omit parameters
NOT BUG:SXnet code was freeing up the extension data rather than the temporary zone number
NOT BUG:Fix memory checking
NOT BUG:Obsolete/experimental code
NOT BUG:Provide CFLAGS and PLATFORM information on Windows platforms
BUG:remove editing artifacts
NOT BUG:Mention modification to Configure
NOT BUG:Don't confuse mk1mf.pl by combining multiple options into one
NOT BUG:Updated to reflect recent "Configure" modification
NOT BUG:Broken HPUX cc
NOT BUG:improve readability of #if conditions (ELF if defined supersedes BSDI [which we don't really define if ELF is defined but who knows])
NOT BUG:avoid confliction definitions of NDEBUG
NOT BUG:Disable asserts for standard configurations
NOT BUG:make debug-solaris-[u]sparc-gcc more useful
NOT BUG:typo
NOT BUG:typo
NOT BUG:New functions SSL[_CTX]_{set,get}_mode; the initial set of mode flags is SSL_MODE_ENABLE_PARTIAL_WRITE SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
BUG:Don't use ...-oldgcc for egcs compiler
NOT BUG:More no-xxx option tweaks
NOT BUG:Fix no-hmac and no-ripemd
NOT BUG:New functions to allow RSA_METHODs to be changed without poking round in RSA structure internals
NOT BUG:Use "long long" for all Win32 gcc ports
NOT BUG:With mingw32 use "long long" rather than "_int64" (the latter does not work at least the package mentioned in INSTALL.W32 does not know about it)
NOT BUG:Fix comments Submitted by: Anonymous
BUG:The Mingw32 configuration entry was missing one colon (found by "Zot O'Connor" <zot@ZotConsulting.com>) Also Windows probably does not need the warning about multi-threading
NOT BUG:configuration change for debugging
NOT BUG:Update TABLE
NOT BUG:Memory leak checks
NOT BUG:Close another memory hole
NOT BUG:Avoid some memory holes one of which was pointed out by "Chad C Mulligan" <mulligan@antipope.org>
NOT BUG:Use the same CPU recogition method for FreeBSD 3 as for the other FreeBSD versions (The FreeBSD and FreeBSD-elf Configure entries were identical.)
NOT BUG:Fix d2i_ASN1_INTEGER() and i2d_ASN1_INTEGER() so it correctly works out the length of negative integers
NOT BUG:Don't use inline assembler when configured for "no-asm"
NOT BUG:New function PKCS7_signatureVerify to allow the signing certificate to be explicitly stated with PKCS#7 verify
NOT BUG:Also fix for util/mkerr.pl: if the -nostatic option is being used this will be for an external library so the autogenerated C file should include the header file as: #include "any/path/to/header.h" rather than the internal library form: #include <openssl/header.h>
NOT BUG:Change the PEM_* function prototypes to use DECLARE_PEM macros and change util/mkdef.pl to handle this Also do a 'make update'
NOT BUG:Implement STACK_OF(ANS1_OBJECT) for extended key usage extension change the documentation to reflect the STACK_OF(CONF_VALUE) change to the CONF lib and use ANSI typedefs for X509V3_EXT_I2D and X509V3_EXT_FREE
NOT BUG:Make some debug-.. configurations more useful for debugging
NOT BUG:Perl variable names are case-sensitive ..
NOT BUG:Don't shadow
NOT BUG:"make update"
NOT BUG:Convert the CONF library to use a typesafe stack: a STACK_OF(CONF_VALUE) It seemed like a good idea at the time.. several hours later it was rather obvious that these are used all over the place making the changes rather extensive
NOT BUG:New functions CONF_load_bio() and CONF_load_fp() to load a configuration file from a bio or fp Added some more constification to the BN library
NOT BUG:Clarification
NOT BUG:"make update"
NOT BUG:New function CRYPTO_num_locks
NOT BUG:Use same name in the definition as in the header file declaration :-/ (the extra "get" makes the name quite long but otherwise it'd sound as if you could request something rather than obtain information about what the peer did)
NOT BUG:Don't access configuration files outside the source tree
NOT BUG:Typo
NOT BUG:Recognize CPU on BSD/OS
NOT BUG:Some people don't have /dev/fd/0 on Solaris so use - instead
NOT BUG:Don't try to use zero-byte buffers
NOT BUG:Obsolete
NOT BUG:long obsolete
BUG:Comment adjusted to reality
BUG:rc4_locl.h and bf_locl.h incorrectly defined _HEADER_...; opensslconf.h always expects HEADER_.. (no leading underscore)
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Provide fallback configurations for all hpux.. configurations (problems with BN_LLONG have been reported both for hpux-cc and for hpux10-gcc)
NOT BUG:Bugfix
NOT BUG:Avoid some warnings (on silly compilers)
NOT BUG:"make update"
NOT BUG:BIO pairs
BUG:Fix to i2d_DSAPublicKey() to return the correct length Submitted by: Jeon KyoungHo <khjeon@sds.samsung.co.kr>
NOT BUG:Changes for BSD/OS 4
NOT BUG:Don't use unquoted whitespace in "case" case
NOT BUG:Document the X509V3 code and change some of the extension function pointers to use 'void *' rather than 'char *' for an "arbitrary extension"
NOT BUG:NeXT 3.3 can handle -O3 (3.0 can't)
NOT BUG:Fix warnings
NOT BUG:hpux-cc (HPUX 9.x) does not work with BN_LLONG (floating point exceptions)
NOT BUG:Submitted by: Andreas Ley <andy@rz.uni-karlsruhe.de
NOT BUG:Try to detect NeXT 3.3 (working Configure entry for this still missing)
NOT BUG:Avoid warning
NOT BUG:Two new functions to write out PKCS#8 private keys Also fixes for some of the the PBE code and a new constant PKCS5_DEFAULT_ITER for the default iteration count if it is passed as zero
NOT BUG:Avoid warnings
NOT BUG:Fix determination of Perl interpreter: A perl or perl5 _directory_ in $PATH was also accepted as the interpreter
NOT BUG:Another <unistd.h> ..
NOT BUG:Reformat and "modernise" the sign.c demo
NOT BUG:Put SC5 warning back in future changes might trigger the compiler bug again
NOT BUG:tiny optical change
NOT BUG:Repair PEM_write_PrivateKey and PEM_write_bio_PrivateKey
NOT BUG:Oops I forgot to add the dependency "TABLE: Configure"
BUG:Circumvent bug in SC5 without patch #107357-01
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
BUG:Don't define _ANSI_SOURCE for NetBSD
BUG:Submitted by: Eric Ding <ericding@MIT.EDU>
NOT BUG:Change the PEM function implementation to use a common set of macros: this should make modifying them easier
NOT BUG:Fix the selfsign demo: it was rather ancient and used deleted functions
NOT BUG:Delete unnecessary newlines in TABLE
NOT BUG:des_cbc_encrypt / des_ncbc_encrypt issue
NOT BUG:Update dependencies
NOT BUG:Unify DES library: ncbc_enc.c wasn't used but its content was almost duplicated in cbc_enc.c (without IV updating) and in des_enc.c
NOT BUG:As pointed out by others on the openssl-dev list des_cbc_encrypt (without IV updating; defined in cbc_enc.c) exists only for historical reasons: des_ncbc_encrypt should be used instead (and the caller does not have to manually update the IV)
NOT BUG:If des_cbc_enrypt is not needed for backwards compatibility the definition of des_ncbc_encrypt should be put back into des_enc.c and both cbc_enc.c and ncbc_enc.c can be deleted
NOT BUG:If des_cbc_encrypt *is* needed for backwards compatibility its behaviour obviously should not change (i.e. don't add IV updating)
NOT BUG:"extern" is a C++ reserved word
NOT BUG:Pointed out by: Janez Jere <jj@void.si>
NOT BUG:Remove old libdes version number
NOT BUG:"make update" (added to top Makefile and applied)
NOT BUG:DES CBC change looks dubious to me
NOT BUG:Mention unistd.h
NOT BUG:Some pre-POSIX systems don't have unistd.h (but e.g lib.c) Allow configuring the name of that header file
NOT BUG:Oops Get rid of now incorrect comment
NOT BUG:I keep forgetting to fix this: update the IV! Most important!
NOT BUG:Make "make test" fail if bntest fails an internal selfcheck
NOT BUG:The des app
NOT BUG:Survive pedanticism
BUG:crypt() demos patched
NOT BUG:Call our crypt implementation des_crypt() crypt() now is a wrapper if there is no system crypt() available
NOT BUG:Casts
NOT BUG:Warnings and casts
NOT BUG:Don't #define _ and eliminate casts
NOT BUG:Fix to compile the des app
NOT BUG:Prevent name conflicts
NOT BUG:Submitted by: Janez Jere <jj@void.si>
NOT BUG:"request" added
NOT BUG:Use mkdir-p.pl more efficiently
NOT BUG:Don't make assumptions on what the path looks like
NOT BUG:Complete support for PKCS#5 v2.0 Still needs extensive testing
NOT BUG:Fix for BIO pairs
NOT BUG:Use locking in a way that makes more sense
NOT BUG:Use the same path to perl in all #! lines in util
NOT BUG:This is the main PKCS#5 v2.0 key generation function it parses the ASN1 structure and decides what key to generate (if any) Not currently added to the PBE algorithm list because it is largely untested
NOT BUG:treat init properly
NOT BUG:Don't mix real tabs with tabs expanded as 8 spaces -- that's a pain to read when using 4-space tabs
NOT BUG:Introduce "BIO pairs" which (when finished) will relay data so that the SSL library can be used for applications that have to handle all the actual I/O themselves
NOT BUG:Mention mkdir-p.pl
NOT BUG:mkdir -p is not fully portable (according to Marc Crispin NeXTstep creates a directory called -p); now mkdir-p.pl does its job
BUG:Use only -O not -O3 for NeXTstep:
NOT BUG:> The nextstep port uses the -O3 switch to gcc Support for -O3 didn't appear > until later (and buggier) versions of NeXTstep Use -O instead or have a > separate port
BUG:Submitted by: Mark Crispin <MRC@Panda.COM>
NOT BUG:Comments added
NOT BUG:linux-sparc
NOT BUG:"linux-sparc" configuration
NOT BUG:Submitted by: Christian Forster <fo@hawo.stw.uni-erlangen.de>
NOT BUG:More general definition for S_ISDIR (needed not only for VMS but also for NeXT)
NOT BUG:More PKCS#5 v2.0 development Add a function to setup a PKCS#5 v2.0 AlgorithmIdentifier and make various ASN1 fixes
NOT BUG:Change PBE handling a bit more: now the key and iv generator does calls EVP_CipherInit() this because the IV wont be easily available when doing PKCS#5 v2.0
NOT BUG:Rewrite PBE handling read to support PKCS#5 v2.0 and update the function list for Win32
NOT BUG:Change so PEM private key read routines can handle PKCS#8 transparently
NOT BUG:More PKCS#8 stuff Support for unencrypted forms of private key
NOT BUG:const/type fixes
NOT BUG:Add d2i,i2d bio and fp functions for PKCS#8 and add -inform and -outform arguments to pkcs8 application
NOT BUG:Add a 'pkcs8' application for initial PKCS#8 support Still needs lots more options to handle encrypted and unencrypted forms and DER format input and output
NOT BUG:The rest of the PKCS#5 PKCS#8 patch I forgot before :-)
NOT BUG:Add PKCS#5 v1.5 compatible algorithms and initial PKCS#8 support PKCS#8 needs more work: need an application and make the private key routines automatically handle PKCS#8
NOT BUG:Update
NOT BUG:Aha! That's how pkcs12 got missed from stackification
NOT BUG:Some constification and stacks that slipped through the cracks (how?)
BUG:Support the EBCDIC character set and BS2000/OSD-POSIX (work in progress)
NOT BUG:Submitted by: Martin Kraemer <Martin.Kraemer@MchP.Siemens.De>
NOT BUG:remove conflict indicator ..
BUG:Support the EBCDIC character set and BS2000/OSD-POSIX (work in progress)
NOT BUG:Submitted by: Martin Kraemer <Martin.Kraemer@MchP.Siemens.De>
NOT BUG:"linux-sparc64-gcc" configuration Submitted by: Ray Miller <ray.miller@oucs.ox.ac.uk>
BUG:Support the EBCDIC character set and BS2000/OSD-POSIX (work in progress)
NOT BUG:Submitted by: Martin Kraemer <Martin.Kraemer@MchP.Siemens.De>
NOT BUG:Generate no-xxx options for missing ciphers
NOT BUG:Test apps
NOT BUG:Hint about unresolved symbols when mixing compilers
NOT BUG:Avoid type conflict on Unix with DEC C
NOT BUG:Pointed out by Sergio Rabellino <Rabellino@di.unito.it>
NOT BUG:Define a macro to avoid name conflicts
NOT BUG:gcc dumps core on HPUX
NOT BUG:More evil cast removal
NOT BUG:Make samples compile
NOT BUG:stack
BUG:Evil cast extermination
NOT BUG:stack
NOT BUG:Move stack implementations to more natural places
NOT BUG:Stack
NOT BUG:Remove redundant line
NOT BUG:Labels longer than eight characters might cause problems
NOT BUG:Borland C fix
NOT BUG:Submitted by: Andy Polyakov
NOT BUG:more typesafe stacks ..
NOT BUG:More consistency
NOT BUG:stack
NOT BUG:Stack
NOT BUG:"BTW I no longer have a wish for this This was solved in other ways." Mats Nilsson <mats.nilsson@xware.se> <4.1.19990531095211.040bf2e0@berit.xware.se> to <openssl-dev@openssl.org>
BUG:Complain about deficiency of internal_verify
NOT BUG:More stack
NOT BUG:Adjust bsdi-elf-gcc to look more like FreeBSD-elf linux-elf and the like
NOT BUG:BSD/OS 4.x support (bsdi-elf-gcc)
NOT BUG:Yet another stack
NOT BUG:Another stack
NOT BUG:Another safe stack
NOT BUG:Another safe stack
NOT BUG:More safe stack
NOT BUG:Puhhh.. today is a very hot day
NOT BUG:And carry on with development..
NOT BUG:Oops!
NOT BUG:Prepare to release 0.9.3a
NOT BUG:Update dependencies
NOT BUG:Pass INSTALL_PREFIX to subdirectories of crypto
NOT BUG:Submitted by: strube@physik3.gwdg.de (Hans Werner Strube)
NOT BUG:Some assembler-related clean-ups
NOT BUG:sco5-gcc configuration
NOT BUG:Submitted by: David Greaves
NOT BUG:Include <stdio.h>
BUG:Updated C++ SSL demos Submitted (a month ago) by: Wade Scholine
BUG:Updated some demos Submitted by: Sean O Riordain <Sean.ORiordain@cyrona.com>
NOT BUG:*** empty log message ***
NOT BUG:Change function call according to current API
NOT BUG:Ignore directories created by "make -f makefile.one"
NOT BUG:Free up 'out' before exiting pkcs12 application Submitted by: Wu Zhigang <zhigangwu@yahoo.com>
NOT BUG:der_chop is now generated from der_chop.in
NOT BUG:I386_ONLY is defined in opensslconf.h so we need to include it Submitted by: John Keith <jtkeith@kavi.com>
NOT BUG:Circument egcs bug Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Fix for memory leak
NOT BUG:Update md5 assembly source for Win32
NOT BUG:Set #!.. path to Perl in apps/der_chop automatically
NOT BUG:Add closing parenthesis to usage output
NOT BUG:Temporary workaround for IRIX64 build Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Last minute VMS updates for 0.9.3 Submitted by: Richard Levitte
NOT BUG:Update for 0.9.3
NOT BUG:Final version for 0.9.3
NOT BUG:Move on to 0.9.4
NOT BUG:Here we go: prepare to roll 0.9.3
NOT BUG:Fix URL for perl in INSTALL.W32
NOT BUG:Move to beta 3
NOT BUG:Prepare for final(?) beta
NOT BUG:Don't use NULL-pointer :-/
NOT BUG:Detect linux-mips
NOT BUG:Comment about bug
NOT BUG:Let ssl_get_prev_session reliably work in multi-threaded settings
NOT BUG:Set ext_list to NULL after use
NOT BUG:Avoid memory hole when we don't like the session proposed by the client
NOT BUG:Fixup do_nt.bat for new mk1mf arg order
NOT BUG:Move the Win32 #undefs of X509_NAME and PKCS7_ISSUER_AND_SERIAL so they will always get included with the relevant files
NOT BUG:We need e_os.h here
NOT BUG:Remove traces of bad idea :-)
NOT BUG:Older versions of SINIX C development system inherited a bug from SGI' cc; enable workaround Submitted by: Martin Kraemer
NOT BUG:It was a very bad idea to use #include "../e_os.h" -- when this occurs in cryptlib.h (which is often included as "../cryptlib.h") then the question remains relative to which directory this is to be interpreted gcc went one further directory up as intended; but makedepend thinks differently and so probably do some C compilers So the ../ must go away; thus e_os.h goes back into include/openssl (but I now use #include "openssl/e_os.h" instead of <openssl/e_os.h> to make the point) -- and we have another huge bunch of dependency changes Argh
NOT BUG:Don't include top-level CVS directory
NOT BUG:The last argument in the d2i_XXX_fp and d2i_XXX_bio functions should be of type XXX ** not XXX *
NOT BUG:Add a kludge :-( There were problems with putting e_os.h just into the top directory because the test programs are compiled within test/ in the "standard" case in in their original directories in the makefile.one case; and in the latter symlinks may not be available
NOT BUG:Don't install e_os.h in include/openssl use it only as a local include file
NOT BUG:Bring VMS in sync with the recent changes
NOT BUG:Submitted by: Richard Levitte <levitte@stacken.kth.se>
BUG:On seconds thoughts the version number shoud _never_ decrease
NOT BUG:Revert
NOT BUG:Prepare for a beta release
BUG:NeXT doesn't have dirent
BUG:Pointed out by Juergen Moellenhoff <jurgen@oic.de>
NOT BUG:Detect Siemens platforms
NOT BUG:Submitted by: Martin Kraemer <Martin.Kraemer@MchP.Siemens.De>
NOT BUG:Some solaris-usparc MD5 fixes
NOT BUG:Avoid a warning
NOT BUG:Submitted by: Sylvain Robitaille <syl@alcor.concordia.ca>
NOT BUG:Declare test key data as static
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Change self-description (mklink.pl is not just faster than the last released version of mklink.sh -- the latter couldn't even handle the ../../include/openssl case)
NOT BUG:Bignum library bug fix IRIX 6 passes "make test" now! This also avoids the problems with SC4.2 and unpatched SC5
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Include some notes on basic extension usage and change openssl.cnf to usually do sensible things with extensions
BUG:Add -mv8 to solaris-usparc-oldgcc
NOT BUG:Typos
NOT BUG:Oops
NOT BUG:Small corrections
NOT BUG:Note that the numbering scheme used to be different
NOT BUG:Switch to new version numbering scheme
NOT BUG:Convert gcc version detection (for solaris-usparc-gcc) into a form better suited for finding what went wrong in case that some compiler versions create an output we can't parse
NOT BUG:Bugfix: GCCVAR contains two lines ("Reading specs ..." and the actual version) so we need echo $GCCVAR | sed .. instead of echo "$GCCVAR" | sed .. to process it as intended
NOT BUG:New functions sk_set sk_value and sk_num to replace existing macros: this is to minimise the effects on existing code
NOT BUG:For Solaris with old gcc versions (that don't understand -mcpu=ultrasparc) don't silently step to solaris-sparc-gcc which would unnecessarily use less efficient assembler code Instead use new configuration variant solaris-usparc-oldgcc; this also means that someone who reads the output of ./config will notice that it may be advantegeous to upgrade gcc
NOT BUG:gcc < 2.8 does not support ultrasparc
NOT BUG:Change default PKCS#12 iteration count to 2048 include rsa_oeap_test in the test batch file
NOT BUG:no-xxx options
NOT BUG:BSD alpha config
NOT BUG:Submitted by: Rich Bud <rbud@fortean.com>
NOT BUG:Get rid of some unnecessary casts and add a necessary one
NOT BUG:Spelling error
NOT BUG:Protect applications from failing to compile when they try to directly include opensslv.h
NOT BUG:Don't forget that it's freeze time now..
NOT BUG:BC now compiles crypto/des
NOT BUG:Move prototypes to the right place
NOT BUG:If we couldn't handle "-showcerts" (which happens with the current SSL2 implementation) show at least the server certificate
NOT BUG:Mention "make depend"
NOT BUG:Substitute spaces for tab
NOT BUG:Various clarifications to extension docs: change the name of literal extensions from RAW to DER to avoid confusion with raw extensions
NOT BUG:Update NEWS file
NOT BUG:Mention Andy's assembler stuff
NOT BUG:mk1mf.pl syntax has been changed
NOT BUG:Make MD5 work on Alpha and fix a bug Submitted by: Andy Polyakov
NOT BUG:Additional more descriptive error message for rejection of a session ID because of missing session ID context (so that application programmers are directly pointed to what they should do differently)
NOT BUG:gcc (in some versions) doesn't like the const_des_cblock typedef So omit it for now :-(
NOT BUG:Rename "openssl x509" option "-config" to "-extfile" because it doesn't have a default value like the "-config" options of other openssl subprograms
NOT BUG:Clarification
NOT BUG:Oops! Get the pmatch test the right way round
NOT BUG:Keep text lines less than 80 characters wide
NOT BUG:Fix various less obvious bugs in PKCS#7 handling: such as not zeroing the secret key before we've encrypted it and using the right NID for RC2-64 Add various arguments to the experimental programs 'dec' and 'enc' to make testing less painful
NOT BUG:This stuff has now been tested against Netscape Messenger and it can encrypt and decrypt S/MIME messages with RC2 (128 64 and 40 bit) DES and triple DES
NOT BUG:Its still experimental though..
NOT BUG:Typo
NOT BUG:DES changes
NOT BUG:Change type of various DES function arguments from des_cblock (meaning pointer to char) to des_cblock * (meaning pointer to array with 8 char elements) which allows the compiler to do more typechecking (The changed argument types were of type des_cblock * back in SSLeay and a lot of ugly casts were used then to turn them into pointers to elements; but it can be done without those casts.)
NOT BUG:Introduce new type const_des_cblock -- before the pointers rather than the elements pointed to were declared const and for some reason gcc did not complain about this (but some other compilers did)
NOT BUG:Added a comment pointing out the behaviour of "openssl x509 -conf ..." which cost me some time to find out about
BUG:Marked probable bug pointed out by Anonymous
NOT BUG:Convert void *
NOT BUG:Don't run "make depend" automatically
NOT BUG:Fix some obvious bugs in the PKCS#7 library handling It didn't try to find the right RecipientInfo based on the recipient certificate (so would fail a lot of the time) and fixup cipher structures to correctly (maybe) modify the AlgorithmIdentifiers Largely untested at present.. this will be fixed in due course Well the stuff was broken to begin with so if its broken now then you haven't lost anything :-)
NOT BUG:Various Win32 fixes Change args in do_ms.bat to put platform last Fix unsigned/signed cmp error in asn1parse Change various pem_all.c args to use pem_password_cb
NOT BUG:Get rid of casts
NOT BUG:Add actual testing to bntest..
NOT BUG:Use OPENSSL_GLOBAL OPENSSL_EXTERN instead of GLOBAL and EXTERN
BUG:OPENSSL_EXTERN
BUG:OPENSSL_EXTERN OPENSSL_GLOBAL
NOT BUG:Update dependencies
NOT BUG:Get rid of another cast
NOT BUG:Use e_os2.h not e_os.h in exported header file des.h
NOT BUG:e_os2.h is used for things that must be visible when external applications use (certain parts of) OpenSSL
NOT BUG:e_os* corrections
NOT BUG:Comment
NOT BUG:Bugfix (set shutdown only when we should) Submitted by: Oleg Girko
NOT BUG:Update
NOT BUG:Get rid of the cast
NOT BUG:Return 0 for an error 1 for no error from read_options; that's what the calling code seems to expect
NOT BUG:Comment
NOT BUG:A comment
NOT BUG:Avoid compiler warnings for x86
NOT BUG:The encoding of negative ASN1 INTEGERs and the conversion of BNs to negative integers was completely broken Also added a NEG_PUBKEY_BUG compilation option to compensate for public keys improperly encoded as negative integers
NOT BUG:Various bugfixes: Uses locking for some more of the stuff that is not thread-safe (where thread-safe counterparts are not available on all platforms) and don't memcpy to NULL-pointers Submitted by: Anonymous Reviewed by: Bodo Moeller
NOT BUG:Also clean up htons vs ntohs confusions
NOT BUG:Fix cryptlib.c Submitted by: Reviewed by: PR:
NOT BUG:Introduce and use function typedef pem_password_cb so that we don't call those functions without having a parameter list declaration (There are various similar cases left ...)
NOT BUG:*** empty log message ***
NOT BUG:Delete a wish
NOT BUG:Change cast in function calls to that which is I think the right one for those functions (is it?)
NOT BUG:Add release dates to the "CHANGES" file because that's an obvious place to look for them
NOT BUG:Missed one line
NOT BUG:Don't use reserved name "_encrypt" for parameters; instead I've picked "enc" because that's what's in the prototypes ("_encrypt" is reserved only as an external name but still using it in an application doesn't look like good style to me -- and it certainly isn't if the point is just avoiding shadowing which is apparently why the previous name "encrypt" was changed.)
NOT BUG:Update dependencies
NOT BUG:Cut&paste error
NOT BUG:Oops Close the file
NOT BUG:Avoid shadowing and a bit of constification while I'm at it
NOT BUG:Some tiny clean-ups related to the cert_st / sess_cert_st change
NOT BUG:New structure type SESS_CERT used instead of CERT inside SSL_SESSION While modifying the sources I found some inconsistencies on the use of s->cert vs s->session->sess_cert; I don't know if those could really have caused problems but possibly this is a proper bug-fix and not just a clean-up
NOT BUG:For solaris-usparc configurations avoid problems with GNU as which cannot handle all opcodes we need
NOT BUG:Remove redundant ifdef
NOT BUG:VMS support bug fixes
NOT BUG:VMS support
NOT BUG:Submitted by: Richard Levitte <richard@levitte.org>
BUG:Reorganize and speed up MD5
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:VMS support
NOT BUG:Submitted by: Richard Levitte <richard@levitte.org>
BUG:Spacing in comment corrected
NOT BUG:First tiny changes in preparation of changing of "sess_cert" handling Also I've subsituted real tabs for 8-spaces sequences in some lines so that things don't look that weird with a tab-width of 4
NOT BUG:mk1mf.pl and mkdef.pl read OPTIONS from toplevel Makefile Configure no longer changes files in place
NOT BUG:Several of the EVP_CIPHER structures had the get and set asn1 parameter functions transposed
NOT BUG:Add new -out option to asn1parse to allow the parsed data to be output Fixed -strparse option: it didn't work if used more than once (this was due to the d2i_ASN1_TYPE call parsing a freed buffer) On Win32 the file wincrypt.h #define's X509_NAME and PKCS7_SIGNER_INFO causing clashes so these are #undef'ed
NOT BUG:Caldera OpenLinux passes test now
NOT BUG:Missing argument in prototype
NOT BUG:Submitted by: Andreas Ley <ley@rz.uni-karlsruhe.de>
NOT BUG:Use ifndef PEDANTIC for all inline assembler
NOT BUG:Comment Submitted by: Reviewed by: PR:
NOT BUG:argc counting bug fixed Submitted by: Tomas Hulek Reviewed by: PR:
NOT BUG:Clarify comment Submitted by: Reviewed by: PR:
NOT BUG:Move openssl.cnf out of lib/
NOT BUG:Submitted by: Richard Levitte <levitte@stacken.kth.se>
NOT BUG:And I thought I could spell .. but in caps really everything looks the same Submitted by: Reviewed by: PR:
NOT BUG:Make SSL library a little more fool-proof by not requiring any longer that SSL_set_{accept,connect}_state be called before SSL_{accept,connect} may be used Submitted by: Reviewed by: PR:
NOT BUG:Various PKCS#7 related fixes,tidies and comments
NOT BUG:Move openssl.cnf out of lib/
NOT BUG:Update
NOT BUG:Fix for +xxx options
NOT BUG:Submitted by: Anonymous
NOT BUG:Ok give us more time...
NOT BUG:Changed a comment Submitted by: Reviewed by: PR:
NOT BUG:The various character predicates (isspace and the like) may not be used with negative char values so I've added casts to unsigned char Maybe what really should be done is change all those arrays and pointers to type unsigned char [] or unsigned char * respectively; but using plain char with those predicates is just wrong so something had to be done Submitted by: Reviewed by: PR:
NOT BUG:Moved some variable declarations inside blocks where they are needed so that warnings about unused variables (for certain -D.. constellations) are avoided; this corresponds to the earlier change for SHA1 Submitted by: Reviewed by: PR:
NOT BUG:New entry debug-solaris-usparc-gcc as debug-solaris-sparc-gcc no longer applies to usparc systems Submitted by: Reviewed by: PR:
NOT BUG:Fix various things to let OpenSSL even pass ``egcc -pipe -O2 -Wall -Wshadow -Wpointer-arith -Wcast-align -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Winline'' with EGCS 1.1.2+
BUG:Various PKCS#7 fixes to properly (maybe!) handle PKCS#7 enveloped data Containts elements of code by Sebastian Akerman <sak@parallelconsulting.com> and made a bit less "naughty" by Steve
NOT BUG:No actual change but the cert_st member of struct ssl_session_st is now called sess_cert instead of just cert This is in preparation of further changes: Probably often when s->session->sess_cert is used we should use s->cert instead; s->session->sess_cert should be a new structure containing only the stuff that is for just one connection (e.g the peer's certificate which the SSL client implementations currently store in s->session->[sess_]cert which is a very confusing thing to do) Submitted by: Reviewed by: PR:
NOT BUG:Create a duplicate of the SSL_CTX's CERT in SSL_new instead of copying pointers The cert_st handling is changed by this in various ways Submitted by: Reviewed by: PR:
NOT BUG:One comment was in the wrong line .. some others are new Submitted by: Reviewed by: PR:
NOT BUG:Kill evil casts fix PKCS#7 and add new X509V3 Function
NOT BUG:Makefile.save was missing here Submitted by: Reviewed by: PR:
NOT BUG:Some tiny changes to the source code to make future diffs smaller when restructuring the cert_st handling (removed unnused parts and the like) Submitted by: Reviewed by: PR:
NOT BUG:Move variable definitions into the blocks where they are really needed so that warnings about unused variables don't appear if those blocks are removed by the C preprocessor
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Use "const char *" instead of "char *" for filenames passed to functions
NOT BUG:Submitted by: Reviewed by: PR:
BUG:Various Win32 fixes Win95 doesn't support MoveFileEx() (which was used for a Win32 version of rename() ) There isn't a precise rename() equivalent under Win95: the standard rename() complains if the destination already exists so replaced with a combination of unlink() and MoveFile()
NOT BUG:Allows PKCS#12 password to be placed on command line and add allow config file name for 'ca' to come from the environment
NOT BUG:GeneralizedTime setting fixes
NOT BUG:no-xxx option to exclude ciphers
NOT BUG:The libssl32.dll definition file is called ssleay32.def (why?)
NOT BUG:Mingw32
NOT BUG:pass $PERL on make files
NOT BUG:Superseded by sparcv8.S and sparcv8plus.s
NOT BUG:This was an unused derivate of an old version of s_client.c that had been changed so that it almost could be used under Windows No one asked to keep it (and no one volunteered to bring it into useable state) so away with it Submitted by: Reviewed by: PR:
NOT BUG:Generate DLLs with Mingw32
NOT BUG:Get the Mingw32 makefiles right
NOT BUG:Make -pedantic work again
NOT BUG:Bodo didn't do that
NOT BUG:Restored path names that were changed by a previous "Configure" run (Rather than changing the files in places we really should use .in files.) Submitted by: Reviewed by: PR:
NOT BUG:Some comments
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:config is Unix specific
NOT BUG:Add missing semicolon
NOT BUG:Submitted by: Janez Jere <jj@void.si>
NOT BUG:Typo
NOT BUG:Borland C++ builder
NOT BUG:Submitted by: Janez Jere <jj@void.si>
NOT BUG:Support additional Win32 compilers
NOT BUG:Borland C submitted by: Janez Jere <jj@void.si>
BUG:Info on how to submit patches
NOT BUG:Remove unreachable return statements
NOT BUG:v8plus must be specified
NOT BUG:Note about required SC5.0 patches
NOT BUG:Use ANSI stdarg
NOT BUG:C++ bug fix
NOT BUG:Submitted by: Franco Papacella <franco@arpage.ch>
NOT BUG:Fix problem with /usr/ccs/lib/cpp
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:SHA-1 cleanups and performance enhancements
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Recognise Ultra Sparc and compiler version number
NOT BUG:solaris64 entry
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Andy Polyakov points out there are default rules in make in gmake for this
NOT BUG:Sparc v8plus assembler
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:c_rehash doesn't work at that point of the installation so don't even try
NOT BUG:Update HPUX config work around HPUX library incompatibility
NOT BUG:Submitted by: Anonymous
NOT BUG:Typo (You ought to trademark "Configurion" :)
NOT BUG:Add other people who've done stackification
NOT BUG:Bundle stack'ification entries on Bens request
NOT BUG:Add missing sk_<type>_unshift() function to safestack.h
NOT BUG:Convert casted X509_INFO stacks to type-safe STACK_OF(X509_INFO)
NOT BUG:PS: Feel free to move the IMPLEMENT_STACK_OF(X509_INFO) from crypto/asn1/x_info.c to any other place where you think it fits better X509_INFO is a structure slightly spreaded over ASN.1 X509 and PEM code so I found no definitive location for IMPLEMENT_STACK_OF(X509_INFO) In crypto/asn1/x_info.c it's at least now bundled with X509_INFO_new() and friends
NOT BUG:consistency cosmetics
NOT BUG:Some more stack stuff
NOT BUG:Yet another stack
NOT BUG:Annotate a bug
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Update dependencies
NOT BUG:Entry for resolved error macro confusion
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Another stack
NOT BUG:Another stack
NOT BUG:New function SSL_CTX_use_certificate_chain_file
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Another safe stack
NOT BUG:Better to not have blanks in .cvsignore files
NOT BUG:Start assembling some NEWS entries...
NOT BUG:Support verify_depth from the SSL API without need for user-defined callbacks
NOT BUG:Submitted by: Reviewed by: PR:
BUG:Point out the "rehashing skipped" is not a problem
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Add "static" to function definition
NOT BUG:Submitted by: Anonymous Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Use correct error macro so that error messages make sense
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Broken line that was too long
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Better Sun config
NOT BUG:Submitted by: Anonymous
NOT BUG:More information about installing
NOT BUG:New function SSL_CTX_set_session_id_context
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Hopefully improved compatibility with earlier versions of Perl5
NOT BUG:Submitted by: Reviewed by: PR:
BUG:Remove extra brace
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Fix a couple of cases where an attempt is made to lock an already locked mutex
NOT BUG:$perl should never be empty
NOT BUG:Typo
NOT BUG:Superseded by mklink.pl
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Unused file
NOT BUG:OAEP bug fix
NOT BUG:ignore Makefile.save
NOT BUG:Submitted by: Reviewed by: PR:
BUG:Support INSTALL_PREFIX for packagers
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Bug fix
NOT BUG:Close files
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:New Configure options "threads" and "no-threads" For Solaris and Linux "threads" (with proper compiler options) is the default Submitted by: Reviewed by: PR:
NOT BUG:Compare with BN_mod_exp_simple too
NOT BUG:Ignore Makefile.save
NOT BUG:Submitted by: Anonymous
NOT BUG:exptest dumps core Optimizer bug?
NOT BUG:Missing "else"
NOT BUG:Pass PERL to sub-Makefiles during "make links"
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Obey $(PERL) when running util/mklink.pl
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Fix make target "install"
BUG:Submitted by: Niels Poppe Reviewed by: PR:
NOT BUG:Typo fixed
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Change error message for consistency
NOT BUG:Use util/mklink.pl instead of util/mklink.sh
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Autogenerated files
NOT BUG:Ignore autogenerated assembler files
NOT BUG:Decrypt test vector data even if previous decryption failed to get better diagnostics
NOT BUG:Pass $PERL on make dclean
NOT BUG:A faster (and more general and better documented) replacement for mklink.sh
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Install various scripts to $(OPENSSLDIR)/misc instead of $(INSTALLTOP)/bin
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Linux shared libraries (now in Makefile.ssl)
NOT BUG:Linux shared libraries
NOT BUG:Do make rehash automatically at make test
NOT BUG:Don't shadow
NOT BUG:Remove autogenerated file
NOT BUG:Typo
NOT BUG:Pointed out by Nick Boyce <nick.boyce@eds.com>
NOT BUG:More portable blowfish macros
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:A new comment
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:*** empty log message ***
NOT BUG:Update NO_* macros
NOT BUG:Undo
NOT BUG:Message digest stuff
NOT BUG:New Configure option no-<cipher> (rsa idea rc5 ...)
NOT BUG:Add missing DEPFLAG
NOT BUG:Oops .. fix warning
NOT BUG:New Configure option no-<cipher> (rsa idea rc5 ...)
NOT BUG:Add PKCS#12 documentation and new option in x509 to add certificate extensions
NOT BUG:Remove NOPROTO-related macros
NOT BUG:Last week I proposed to increase the version number to 1.0 So far nobody complained..
NOT BUG:Ignore autogenerated file
NOT BUG:Submitted by: Anonymous
NOT BUG:Remove NOPROTO definitions and error code comments
NOT BUG:Extensively changed the DEF file generator mkdef.pl to use a modified version of Ulf's prototype parser also general tidying and fixing of several problems with the original Its still a bit of a hack but should work
NOT BUG:This is the last bit of the old code that uses the K&R prototypes: after some testing they can finally go away..
NOT BUG:Fixes so it will compile again under Win32
NOT BUG:Various header consistency fixes
NOT BUG:Fix mkerr.pl to find functions returning function pointers (thanks Ulf!) also add a few missing prototypes
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Fixed a typo
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Comment changed
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:exit on error
BUG:Removed traces of cryptall.h and did a "make depend"
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:*** empty log message ***
NOT BUG:New Configure option --openssldir to replace ssldir.pl
NOT BUG:New Configure option --openssldir to replace util/ssldir.pl
NOT BUG:cryptall.h is not needed for anything and cannot even be #include-d without producing error messages Submitted by: Reviewed by: PR:
NOT BUG:Fix header files so that any one can be included first
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Replaced by mkerr.pl
NOT BUG:Some instructions for how to handle the <foo.h> => <openssl/foo.h> transition
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Change the command line options of mkerr.pl so -static is now default and a -write option is needed to actually change anything Second attempt at getting rid of ERR ERRC definitions: it might even work this time :-)
NOT BUG:"perl util/mkerr.pl -static -recurse -rebuild" because the previous codebase apparently was inconsistent And crypto/Makefile.ssl *does* need an ERRC . Submitted by: Reviewed by: PR:
NOT BUG:Removed superfluous reference to ERRC
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Restore ERRC definitions that are needed to compile the library
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Avoid "incomprehensible" errors when required definitions are missing
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Delete the unnecessary ERR and ERRC lines in makefiles add some functionality to error code script: it can now find untranslatable function codes (usually because the function is static and not defined in a header: occasionally because of a typo...) and unreferenced function and reason codes To see this try: perl util/mkerr.pl -recurse -debug Also fixed some typos in crypto/pkcs12 that this found :-) Also tidy up some error calls that had to be all on one line: the old error script couldn't find codes unless the call was all on one line
NOT BUG:C indentation style definition for Emacs
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:ANSIfy fix typo in error message and remove redundant statement from my code
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Complete rewrite of the error code generation script It now runs as a single script translates function codes better and doesn't need the K&R function prototypes to work (NB the K&R prototypes can't be wiped just yet: they are still needed by the DEF generator...) I also ran the script with the -rewrite option to update all the header and source files
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:"make depend"
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Remove header files from .cvsignore
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Change #include filenames from <foo.h> to <openssl.h>
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:*.org files are gone for good
BUG:Andy Polyakov points out that BF_PTR2 is slower than the generic case
NOT BUG:Undo evil cast! <g>
BUG:Function didn't get ANSIfied because of unusual formatting
NOT BUG:Recognize CPU version on NetBSD and FreeBSD
BUG:NetBSD entry submitted by: Todd Vierling <tv@pobox.com>
NOT BUG:Work with -pedantic!
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Remove references to .org header file names
NOT BUG:Pass the $PROCESSOR variable through
NOT BUG:Set the 386 flag automatically when building on i386
NOT BUG:Be more specify about system requirements
NOT BUG:Ultrix compatibility
NOT BUG:Submitted by: Bernhard Simon <simon@zid.tuwien.ac.at>
NOT BUG:CVS confusion?
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Don't return 0 from ssl2_read when a packet with empty payload is received
NOT BUG:Submitted by: Reviewed by: PR:
BUG:Reverse unexplained change
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Fixed some race conditions
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Oops! Fixup CHANGES
NOT BUG:Suppport for CRL distribution points extension Also document some of this stuff
NOT BUG:New header file opensslconf.h contains the macros set by Configure
NOT BUG:The configuration process could use some more clean-ups
NOT BUG:Move all autogenerated header file parts to crypto/opensslconf.h
NOT BUG:Remove some unnecessary(?) casting
NOT BUG:Fix DES export ciphersuites
NOT BUG:Fix lots of warnings
NOT BUG:Submitted by: Richard Levitte <levitte@stacken.kth.se>
NOT BUG:Fix some warnings
NOT BUG:-Wall implies -Wuninitialized
NOT BUG:Problems with 64-bit long
NOT BUG:Pointed out by Andy Polyakov <appro@fy.chalmers.se>
BUG:Remove useless defines
NOT BUG:Problems with 64-bit long Pointed out by Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:Arguments are des_cblock
NOT BUG:Update dependencies
NOT BUG:Various fixes so Win32 compile may work Convert GeneralNames to use safe stack
NOT BUG:const correctness
NOT BUG:Missing #endif
NOT BUG:Change functions to ANSI C
NOT BUG:Finish off support for Certificate Policies extension
NOT BUG:Clean up prototypes (prepare for removing NOPROTO)
NOT BUG:Document additional Configure flags
NOT BUG:Error in comment
NOT BUG:Fix typos in error codes
NOT BUG:Definition did not match prototype
NOT BUG:Pointed out by: Bernhard Simon <simon@zid.tuwien.ac.at>
NOT BUG:Defunct assembler files removed; various cleanups
NOT BUG:New Ultrix and Alpha entries submitted by Bernhard Simon <simon@zid.tuwien.ac.at>
NOT BUG:SPARC v8 assembler BIGNUM code
NOT BUG:Submitted by: Andy Polyakov <appro@fy.chalmers.se>
NOT BUG:New "Configure" entry (Solaris with debug info)
NOT BUG:Submitted by: Reviewed by: PR:
BUG:Removed extra semicolons
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Pass $PERL on make errors
NOT BUG:Initial support for Certificate Policies extension: print out works but setting isn't fully implemented (yet)
NOT BUG:Fix const declarations
NOT BUG:Update dependencies
NOT BUG:Allow asn1parse to print out VISIBLESTRING and some code needed for certificate policies extension
NOT BUG:Massive constification
BUG:Add support for VISIBLESTRING and UTF8String
BUG:Another STACK bites the dust
NOT BUG:Add initial support for r2i RAW extensions which can access the config database add various X509V3_CTX helper functions and support for LHASH as the config database
NOT BUG:Fix some warnings Contributed by Anonymous
NOT BUG:Another bug
NOT BUG:Write random seed file in binary mode
NOT BUG:Submitted by: Richard Levitte <levitte@stacken.kth.se>
NOT BUG:Fix a horrible BN bug in bn_expand2 which caused BN_add_word() et al to fail when they cause the destination to expand
NOT BUG:To see how evil this is try this:
NOT BUG:#include <pem.h> main() { BIGNUM *bn = NULL; int i; bn = BN_new(); BN_hex2bn(&bn "FFFFFFFF"); BN_add_word(bn 1); printf("Value %s\n" BN_bn2hex(bn)); }
NOT BUG:This would typically fail before the patch
NOT BUG:It also screws up if you comment out the BN_hex2bn line above or in any situation where BN_add_word() causes the number of BN_ULONGs in the result to change (try doubling the number of FFs)
NOT BUG:Add new experimental ciphersuites Bring naming into line with RFC
NOT BUG:Just use an ANSI declaration instead
NOT BUG:/* Just some comments */
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Add some utilities to support SXNet extension also add support in DEF files generator to typesafe stacks
NOT BUG:Cleaning up Ben's clean-ups :-)
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Make Windows compilers happy
NOT BUG:Submitted by:Tom Titchener Reviewed by: PR:
NOT BUG:Some tiny fixes
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Typo
NOT BUG:Start with some plans..
NOT BUG:Delete all the old X509V3 pack and unpack stuff and various structures and files associated with them This stuff is all obsoleted by the new X509V3 code
NOT BUG:SSL_ALLOW_ENULL was renamed to SSL_FORBID_ENULL some time ago by Ben
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:New Configure option "rsaref"
NOT BUG:Don#t auto-generate crypto/pem/pem.h -- a fixed file is fine for it
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Add type-safe STACKs and SETs
NOT BUG:gcc claims this is a shadow though I can't find what it is shadowing..
NOT BUG:Add `openssl ca -revoke <certfile>' facility which revokes a certificate specified in <certfile> by updating the entry in the index.txt file This way one no longer has to edit the index.txt file manually for revoking a certificate The -revoke option does the gory details now
NOT BUG:Submitted by: Massimiliano Pala <madwolf@openca.org> Cleaned up and integrated by: Ralf S Engelschall
NOT BUG:Fix `openssl crl -noout -text' combination where `-noout' killed the `-text' option at all and this way the `-noout -text' combination was inconsistent in `openssl crl' with the friends in `openssl x509|rsa|dsa'
NOT BUG:Make sure a corresponding plain text error message exists for the X509_V_ERR_CERT_REVOKED/23 error number which can occur when a verify callback function determined that a certificate was revoked
NOT BUG:Obsoleted by new openssl command "list-cipher-commands" Submitted by: Reviewed by: PR:
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Fix a few typos and tabs while I'm poking around in ca.c..
NOT BUG:Rid the world of yet more evil casts
NOT BUG:Adjust renegotiation slightly
NOT BUG:Fix a typo in the X.509v3 docs: cRLSign instead of cRLCertSign is correct according to the sources... found by Steffen Dettmer <steffen@tfh-berlin.de>
NOT BUG:Rid the world of more evil casts
NOT BUG:Install signal handler if we are using sigaction
BUG:Bugfix: s_client occasionally would sleep in select() when it should have checked SSL_pending() first Submitted by: Reviewed by: PR:
NOT BUG:recent changes
NOT BUG:Test PKCS#1 v1.5 padding as well
NOT BUG:Use Perl 5 even if Perl 4 comes first in the search path
NOT BUG:Separate DSA functionality from ASN.1 encoding New functions DSA_do_sign and DSA_do_verify to provide access to the raw DSA values
NOT BUG:Preprocessor file to allow testenc to test only those ciphers that are available Submitted by: Reviewed by: PR:
NOT BUG:Tiny comment to improve code comprehensibility Submitted by: Reviewed by: PR:
NOT BUG:Add PKCS#5 v2.0 ASN1 structures
NOT BUG:Bugs
NOT BUG:New "open issue" (ERR_...)
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Avoid error message about missing gcc
BUG:Submitted by: Niels Poppe <niels@netbox.org>
BUG:Be more optimistic about the availability of termios for ~ECHO because sgtty emulation tends to fail on various systems Submitted by: Reviewed by: PR:
NOT BUG:Bad dependencies
NOT BUG:Test RSA after the BN library it is based on
NOT BUG:Submitted by: Anonymous <nobody@replay.com>
NOT BUG:Fix linux-mips entry
BUG:Submitted by: Niels Poppe <niels@netbox.org>
BUG:bn_div_words has been added to alpha.s (Hannes Reinecke's patch)
NOT BUG:More assembler problems; new OCSP patch; obsolete patches removed from list
NOT BUG:Bug fix for X.509 two-digit year
NOT BUG:Pointed out by Alexander Tyshlek <tyshlek@fuib.com> and Peter Gutmann <pgut001@cs.auckland.ac.nz>
NOT BUG:Remove obsolete files from SSLeay 0.8
NOT BUG:Don't shadow
BUG:Avoid EADDRINUSE for s_server
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Did a 'make errors' to update asn1 error codes now typo is fixed
NOT BUG:Delete some auto generated files and correct a typo in crypto/asn1/p5_pbe.c
NOT BUG:Include bn.h instead of defining BIGNUM as char
NOT BUG:Update dependencies
NOT BUG:Remove obsolete files
BUG:Pointer to Ariel Glenn's SSLeay documentation
NOT BUG:New Makefile variables $(RANLIB) and $(PERL)
NOT BUG:pre-0.9.3 development version
NOT BUG:Add .cvsignore in new pkcs12 directory
NOT BUG:Don't shadow
NOT BUG:New option to generate 80386 code
BUG:New option "-showcerts" for s_client
NOT BUG:Slight cleanup in ssl/
NOT BUG:Remove file that is to be auto-generated by sha1-586.pl
NOT BUG:PR:
NOT BUG:Typo
NOT BUG:PR:
NOT BUG:New switch "386" to generate 80386 code (emulate bswap)
NOT BUG:Remove deleted PKCS#12 functions from pkcs12.h get rid of object creation kludge remove CRs from ssl_ciph.c and update Win32 functions for PKCS#12 code It might compile under Win32 now ..
NOT BUG:Include pkcs12 program as part of openssl This completes most of the PKCS#12 integration
NOT BUG:Added comments to des_enc_{read,write} functions warning about their cryptographic weakness (IV reuse)
NOT BUG:Various PKCS#12 related tidies and fixes: it might even compile now :-)
NOT BUG:Yet more PKCS#12 integration: add lots of files under crypto/pkcs12 and add them to the build environment
NOT BUG:Further PKCS#12 integration PBE PKCS#8 additions
NOT BUG:This is the beginning of PKCS#12 integration This just adds the PKCS#12 objects to objects.h
NOT BUG:NOTE: during this integration it will not be possible to compile my PKCS#12 program against OpenSSL because there will be conflicts between the external functionality and that being added to the core code
BUG:extranet file added..
NOT BUG:Add initial support for Thawte strong extranet certificate extensions and include an 'indent' option to V3 stuff
NOT BUG:Linux PPC support
NOT BUG:Fix Alpha assembler remove redundant file
NOT BUG:Make sure the RSA OAEP test is skipped under -DRSAref because OAEP isn't supported when OpenSSL is built with RSAref
NOT BUG:Submitted by: Ulf Moeller <ulf@fitug.de> Reviewed by: Ralf S Engelschall
NOT BUG:Move definitions of IS_SET/IS_SEQUENCE inside crypto/asn1/asn1.h so they no longer are missing under -DNOPROTO
BUG:Submitted by: Soren S Jorvang <soren@t.dk> Reviewed by: Ralf S Engelschall
NOT BUG:Update after release..
NOT BUG:Typo
NOT BUG:Ops interrupted commit Fixed
NOT BUG:update list
NOT BUG:Merge ext-conf.txt and buffer.txt into a global openssl.txt because we shouldn't again start with thousend little text files or we quickly come back to the old SSLeay days ;-)
NOT BUG:Add two recently added functions
NOT BUG:function names recently changed - consistency
NOT BUG:One more 0.9.2b
NOT BUG:Final polishing for README file
NOT BUG:Add latest changes to NEWS file
NOT BUG:Bring style of INSTALL* documents in sync with README file and fix some inconsistencies
NOT BUG:Remove up_ver.pl call
NOT BUG:up_ver.pl is now obsolete
BUG:More 0.9.2 -> 0.9.2b
NOT BUG:Be consistent: 0.9.2b
NOT BUG:Remove obsolete references to SSLeay and change default PLATFORM from "FreeBSD" to the generic "dist" as it's done implicitly by "make dist"
NOT BUG:Print a little bit more information
BUG:Fix security hole
NOT BUG:Add missing pipe char to "make dist" target Found by Richard Levitte <levitte@stacken.kth.se>
NOT BUG:Remove confusing hint to non-existing file Instead make it clear that one shouldn't change it manually just here The util/ssldir.pl script does more and has to be used for this Pointed out by Jacques Supcik <supcik@inf.ethz.ch>
NOT BUG:Some more source tree cleanups (removed obsolete files crypto/bf/asm/bf586.pl test/test.txt and crypto/sha/asm/f.s; changed permission on "config" script to be executable) and a fix for the INSTALL document
NOT BUG:Submitted by: Ulf Moeller <ulf@fitug.de> Reviewed by: Ralf S Engelschall
NOT BUG:Comment out the lines that generated by mk1mf.pl include three separate rules that are equivalent to $(OUT_D) This was what was causing the 'too many rules' warning under VC++
NOT BUG:Using int for the digest length in EVP_DigestFinal() broke some compilers Changed to unsigned int: also need an evil cast in pk7_doit.c because a signed unsigned comparison chokes VC++
NOT BUG:Remove some references which called malloc and free instead of Malloc and Free
NOT BUG:Delete Win32 test with testreq.pem and req: there is already a test with testreq2.pem
NOT BUG:Fail if test fails
NOT BUG:Update dependencies
NOT BUG:Allow bsdi-gcc - see if it gets anyone anywhere
NOT BUG:Solaris shared library support
NOT BUG:This is now generated it seems
NOT BUG:Use the right compiler for ctx_size
NOT BUG:Delete NULL ciphers from 'ALL' in the cipher list aliases This means that NULL ciphers specifically have to be enabled with e.g "DEFAULT:eNULL" This prevents cipher lists from inadvertantly having NULL ciphers at the top of their list (e.g the default ones) because they didn't have to be taken into account before
NOT BUG:Fix for RSA private key encryption if p < q This took ***ages*** to track down
NOT BUG:Just cosmetics: replace a tab with a normal space because the tab always looked too estoeric to my eyes while building.. ;)
NOT BUG:Be less restrictive and allow also `perl util/perlpath.pl /path/to/bin/perl' in addition to `perl util/perlpath.pl /path/to/bin' because this way one can also use an interpreter named `perl5' (which is usually the name of Perl 5.xxx on platforms where an Perl 4.x is still installed as `perl')
NOT BUG:Submitted by: Matthias Loepfe <Matthias.Loepfe@adnovum.ch> Reviewed by: Ralf S Engelschall
NOT BUG:Let util/clean-depend.pl work also with older Perl 5.00x versions
NOT BUG:Submitted by: Matthias Loepfe <Matthias.Loepfe@adnovum.ch> Reviewed by: Ralf S Engelschall
NOT BUG:Fix couple of ANSI declarations and prototypes
NOT BUG:Update
NOT BUG:Update platform test list
NOT BUG:Two more things we should look at before release
NOT BUG:Make CC,CFLAG etc get passed to make links and various Win32 fixes
NOT BUG:Remove some hard coded paths from Win32 test stuff
NOT BUG:Remake cert links when the app is built
NOT BUG:Update to current state..
NOT BUG:Make it more clear what option -WWW to s_server does
NOT BUG:Fix quad checksum bug
NOT BUG:Go faster
NOT BUG:Correct English
NOT BUG:Comment out two unimplemented functions from bio.h Attempt to get the Win32 test batch file going again
NOT BUG:Add missing funtions from non ANSI section of header files and add missing ordinals to libeay.num
NOT BUG:test
NOT BUG:Various fixes to Win32 update ssleay.num libeay.num shuffle various #ifdefs around so more options appear in e_os.h
NOT BUG:Make links no longer needed
NOT BUG:Solaris 2.6 makes still problems Details were posted
NOT BUG:typo
NOT BUG:Make `openssl version' output lines consistent
NOT BUG:Start with some more tarball rolling preparation to make sure it's not overlooed next Monday: - rmlinks is no longer existing - use openssl as the name and not rse - don't roll the STATUS file into the tarball
NOT BUG:Let us start with some platform test list..
NOT BUG:Fix Win32 symbol export lists for BIO functions: Added BIO_get_ex_new_index BIO_get_ex_num BIO_get_ex_data and BIO_set_ex_data to ms/libeay{16,32}.def I'm not a Win32 hacker but I think I've done it correctly
NOT BUG:Steve or Ben: can you confirm that it's correct? I don't want to break any Win32 stuff
NOT BUG:Second round of fixing the OpenSSL perl/ stuff It now at least compiled fine under Unix and passes some trivial tests I've now added But the whole stuff is horribly incomplete so a README.1ST with a disclaimer was added to make sure no one expects that this stuff really works in the OpenSSL 0.9.2 release Additionally I've started to clean the XS sources up and fixed a few little bugs and inconsistencies in OpenSSL.{pm,xs} and openssl_bio.xs
NOT BUG:PS: I'm still not convinces whether we should try to make this finally running or kick it out and replace it with some other module...
NOT BUG:Two more .cvsignore files for the assembler stuff
NOT BUG:Notice freeze state and update my entry
NOT BUG:Delete obsolete old X509V3 files
NOT BUG:Don't make links in INSTALL doc - also work first time!
NOT BUG:Don't make links on Windoze
NOT BUG:Fix perl assembler
NOT BUG:Fix DWP when only given three parameters
NOT BUG:Linux MIPS support
NOT BUG:Always make links
NOT BUG:Fix a typo
NOT BUG:Added support for adding extensions to CRLs also fix a memory leak and make 'req' check the config file syntax before it adds extensions Added info in the documentation as well
NOT BUG:Add a useful kludge to allow package maintainers to specify compiler and other platforms details on the command line without having to patch the Configure script everytime: One now can use ``perl Configure <id>:<details>'' i.e platform ids are allowed to have details appended to them (seperated by colons) This is treated as there would be a static pre-configured entry in Configure's %table under key <id> with value <details> and ``perl Configure <id>'' is called So when you want to perform a quick test-compile under FreeBSD 3.1 with pgcc and without assembler stuff you can use ``perl Configure "FreeBSD-elf:pgcc:-O6:::"'' now which overrides the FreeBSD-elf entry on-the-fly
BUG:(PS: Notice that the same effect _cannot_ be achieved by using ``make CC=pgcc ..'' etc because you cannot override all things from there.)
NOT BUG:Disable new TLS1 ciphersuites
NOT BUG:Fix names of cert stack functions
NOT BUG:Typo :-)
NOT BUG:Allow DSO flags like -fpic -fPIC -KPIC etc to be specified on the `perl Configure ...' command line This way one can compile OpenSSL libraries with Position Independent Code (PIC) which is needed for linking it into DSOs
NOT BUG:Put the dependencies back
NOT BUG:Move the SSL_CTX_xxx defines at the top of ssl.h to the location of other SSL_CTX_xxx defines What was the reason to move them to the top even before the copyright and #ifdef HEADER_SSL_H? Hmmm.. when there was and still is a good reason feel free to reverse this patch but please document why it is needed this way
NOT BUG:Fix export ciphersuites again
NOT BUG:Reshape the README file out of the existing README stuff into a single file Need more cleanup for final release IMHO
NOT BUG:just a little typo
NOT BUG:Add a first cut for a NEWS document similar to what other packages (mostly GNU packages) provide The idea is that because of the large number of CHANGES entries this file summarizes the major changes for a brief overview
NOT BUG:Bring the README file in sync and shape a little bit more..
NOT BUG:Cleaned up the LICENSE document: The official contact for any license questions now is the OpenSSL core team under openssl-core@openssl.org And add a paragraph about the dual-license situation to make sure people recognize that _BOTH_ the OpenSSL license _AND_ the SSLeay license apply to the OpenSSL toolkit
NOT BUG:Ralf is now using FreeBSD 3.1 which runs ELF instead of a.out..
NOT BUG:General source tree makefile cleanups: Made `making xxx in yyy...' display consistent in the source tree and replaced `/bin/rm' by `rm' Additonally cleaned up the `make links' target: Remove unnecessary semicolons subsequent redundant removes inline point.sh into mklink.sh to speed processing and no longer clutter the display with confusing stuff Instead only the actually done links are displayed
NOT BUG:Permit null ciphers
NOT BUG:Fix GCC warning.. t_req.c: In function `X509_REQ_print': t_req.c:181: warning: suggest explicit braces to avoid ambiguous `else'
NOT BUG:Add an extra 'raw' function r2i to the extension code Nothing uses this yet and it is just a place holder for functionality to be added later Its been added now so the X509V3_EXT_METHOD structure shouldn't (hopefully) have to change after the release
NOT BUG:Fix the PKCS#7 stuff: signature verify could fail if attributes reordered the detached data encoding was wrong and free up public keys
NOT BUG:Workaround for a Win95 console bug triggered by the password read stuff
NOT BUG:Deleted my str_dup() function from X509V3: the same functionality is provided by BUF_MEM_strdup() Added text documentation to the BUF_MEM stuff
NOT BUG:Added the new `Includes OpenSSL Cryptography Software' button as doc/openssl_button.{gif,html} which is similar in style to the old SSLeay button and can be used by applications based on OpenSSL to show the relationship to the OpenSSL project
BUG:PS: This beast caused me three hours to create because of the size I had to hand-paint the 7pt fonts in Photoshop
NOT BUG:Remove confusing variables in function signatures in files ssl/ssl_lib.c and ssl/ssl.h At least the double ctx-variable confused some compilers
BUG:Submitted by: Lennart Bong <lob@kulthea.stacken.kth.se> Reviewed by: Ralf S Engelschall
NOT BUG:Don't install bss_file.c under PREFIX/include/ It was introduced by Eric between SSLeay 0.8 and 0.9 and just looks useless and confusing
BUG:Pointed out by: Lennart Bong <lob@kulthea.stacken.kth.se> Submitted by: Ralf S Engelschall
NOT BUG:Fix the Win32 compile environment and add various changes so it will now compile under Win32 (9X and NT) again Note: some signed/unsigned changes recently checked in were killing the Win32 compile
NOT BUG:Supper's cooking
NOT BUG:Add functions to add certs to stacks used for CA file/path stuff in servers
NOT BUG:More truth in declarations
NOT BUG:doxygen configuration file
NOT BUG:Experiment with doxygen documentation
NOT BUG:Update dependencies
BUG:Get rid of remaining C++-style comments which strict C compilers hate (Pointed out by Carlos Amengual)
NOT BUG:Ops the logic of the second argument has to be coupled with the != test to work correctly for the SSL_CTX_xxx situations too Now "make test" passes again fine
NOT BUG:Use consistent and existing addresses
NOT BUG:BN_RECURSION causes the stuff in bn_mont.c to fall over for large keys For now change it to BN_RECURSION_MONT so it isn't compiled in
NOT BUG:Perhaps if I do a tiny bit of docco others may follow?
NOT BUG:Remember one more wish from the users
NOT BUG:Add a bunch of SSL_xxx() functions for configuring the temporary RSA and DH private keys and/or callback functions which directly correspond to their SSL_CTX_xxx() counterparts but work on a per-connection basis This is needed for applications which have to configure certificates on a per-connection basis (e.g Apache+mod_ssl) instead of a per-context basis (e.g s_server)
NOT BUG:For the RSA certificate situation is makes no difference but for the DSA certificate situation this fixes the "no shared cipher" problem where the OpenSSL cipher selection procedure failed because the temporary keys were not overtaken from the context and the API provided no way to reconfigure them
NOT BUG:The new functions now let applications reconfigure the stuff and they are in detail: SSL_need_tmp_RSA SSL_set_tmp_rsa SSL_set_tmp_dh SSL_set_tmp_rsa_callback and SSL_set_tmp_dh_callback Additionally a new non-public-API function ssl_cert_instantiate() is used as a helper function and also to reduce code redundancy inside ssl_rsa.c
NOT BUG:Submitted by: Ralf S Engelschall Reviewed by: Ben Laurie
NOT BUG:Move s_server -dcert and -dkey options out of the undocumented feature area because they are useful for the DSA situation and should be recognized by the users Thanks to Steve for the original hint
NOT BUG:Typo
NOT BUG:Fix the cipher decision scheme for export ciphers: the export bits are *not* within SSL_MKEY_MASK or SSL_AUTH_MASK they are within SSL_EXP_MASK So the original variable has to be used instead of the already masked variable
NOT BUG:Submitted by: Richard Levitte <levitte@stacken.kth.se> Reviewed by: Ralf S Engelschall
NOT BUG:Fix 'port' variable from `int' to `unsigned int' in crypto/bio/b_sock.c
NOT BUG:Submitted by: Richard Levitte <levitte@stacken.kth.se> Reviewed by: Ralf S Engelschall
NOT BUG:Change type of another md_len variable in pk7_doit.c:PKCS7_dataFinal() from `int' to `unsigned int' because it's a length and initialized by EVP_DigestFinal() which expects an `unsigned int *'
NOT BUG:Submitted by: Richard Levitte <levitte@stacken.kth.se> Reviewed by: Ralf S Engelschall
NOT BUG:Fix clearly untested "clever" hack
NOT BUG:More CVS ignore stuff..
NOT BUG:Don't hard-code path to Perl interpreter on shebang line of Configure script Instead use the usual Shell->Perl transition trick
NOT BUG:Remember good pointers to Montgomery multiplication algorithm descriptions as pointed out by Dave Carman <carman@erols.com>
NOT BUG:Make `openssl x509 -noout -modulus' functional also for DSA certificates (in addition to RSA certificates) to match the behaviour of `openssl dsa -noout -modulus' as it's already the case for `openssl rsa -noout -modulus' For RSA the -modulus is the real "modulus" while for DSA currently the public key is printed (a decision which was already done by `openssl dsa -modulus' in the past) which serves a similar purpose Additionally the NO_RSA no longer completely removes the whole -modulus option; it now only avoids using the RSA stuff Same applies to NO_DSA now too
NOT BUG:Remove debugging fprintf from req.c and fix the code so it properly skips over the first leading XXX in the DN
NOT BUG:Code for reliable BIO
NOT BUG:Add reliable BIO
NOT BUG:Fix more warnings
NOT BUG:Get rid of a nasty debugging message which was forgotten here..
NOT BUG:Fix usage message on gendsa: 1 The dsaparam argument is mandatory and not optional 2 Add a little text what this actually is: a filename
NOT BUG:Make gcc -Wall happy ("might be used uninitialized...")
NOT BUG:Redo the way 'req' and 'ca' add objects: add support for oid_section
NOT BUG:Add syslogging BIO
NOT BUG:Various changes to make this stuff compile under Win32 and VC++ with and without -debug option to mk1mf.pl Change _export to is_export (_export is a reserved word under VC++) Add yucky function prototype function pointer casts Sanitise the included files in crypto/x509v3
NOT BUG:Also changed ssleay.exe target to openssl.exe
NOT BUG:More stuff for new TLS ciphersuites
NOT BUG:Undo a couple of kludges
NOT BUG:Add support for new TLS export ciphersuites
NOT BUG:Fix warning
NOT BUG:Add preliminary user level config documentation for extension stuff Programming info will come later..
NOT BUG:Feel free to reformat and tidy this up..
NOT BUG:Make RSA_NO_PADDING really use no padding
NOT BUG:Submitted by: Ulf Moeller <ulf@fitug.de>
NOT BUG:Remember some open issues and available patches
NOT BUG:Add more functionality to issuer alt name and subject alt name New options to include email addresses from DN and copy details from issuer certificate Include examples in openssl.cnf update Win32 ordinals
NOT BUG:Ok propose a release date of March 15th with a code freeze a few days before so we have enough time for final testing and tarball rolling
NOT BUG:Fix a warning
NOT BUG:Generate errors when public/private key check is done
NOT BUG:Preliminary support for reason code CRL extension
NOT BUG:Patch so the new crl stuff actually compiles this time :-) Also update the Win32 ordinals
NOT BUG:Overhaul 'crl' application add a proper X509_CRL_print function and start to support CRL extensions
NOT BUG:Fix case of new functions in error files
NOT BUG:Oops! Remeber to include the other patches this time..
NOT BUG:Fuller authority key id support partial support for private key usage extension and really fix the ASN.1 IMPLICIT bug this time :-)
NOT BUG:Add OAEP
NOT BUG:Added code to GENERAL_NAME with support for more options and preliminary support for assignment in config files
BUG:Updates to the new SSL compression code [Eric A Young (from changes to C2Net SSLeay integrated by Mark Cox)]
NOT BUG:Fix so that the version number in the master secret when passed via RSA checks that if TLS was proposed but we roll back to SSLv3 (because the server will not accept higher) that the version number is 0x03,0x01 not 0x03,0x00 [Eric A Young (from changes to C2Net SSLeay integrated by Mark Cox)]
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Fix various memory leaks in SSL apps and DSA
NOT BUG:Patch to Configure script For some reason the BN_ASM part was truncated to the first word which broke (at least) the Linux compile Hopefully this wont break other platforms
NOT BUG:Update error codes
NOT BUG:Add support for raw extensions This means that you can include the DER encoding of an arbitrary extension: e.g 1.3.4.5=critical,RAW:12:34:56 Using this technique currently unsupported extensions can be generated if you know their DER encoding Even if the extension is supported in future the raw extension will still work: that is the raw version can always be used even if it is a supported extension
NOT BUG:Make sure latest Perl versions don't interpret some generated C array as Perl array code in the crypto/err/err_genc.pl script
BUG:Submitted by: Lars Weber <3weber@informatik.uni-hamburg.de> Reviewed by: Ralf s Engelschall
BUG:Convert ms/do_ms.bat to DOS EOL format of DOS chokes on it
NOT BUG:More Win32 fixes and upsdate INSTALL.W32 documentation
NOT BUG:Oops.. add other changes this time too
NOT BUG:Modify configure script to generate some files that Win32 needs and new script that does the same as 'make files'
NOT BUG:Finally(?) fix DES stuff
NOT BUG:Update dependencies
NOT BUG:Fix ghastly DES declarations and all consequential warnings
NOT BUG:Fix typo in asn1.h (PRINTABLESTRING_STRING) and fix a bug in object creation perl script It failed if the OID had any zeros in it
NOT BUG:Add support for 3DES CBCM mode
NOT BUG:In the absence of feedback either way commit the fix that looks right for wrong keylength with export null ciphers
BUG:Whoops missed one
NOT BUG:Some cleanup
NOT BUG:Actually use BN when selected!
NOT BUG:Tidy up asm stuff
NOT BUG:Make the 'crypto' and 'ssl' options in the perl script mkdef.pl really work also add an 'update' option to automatically append any new functions to the ssleay.num and libeay.num files
NOT BUG:Delete a few unused files in apps restore CAST WIN32 ASM file to main tree
NOT BUG:Remove one more totally bogus source file This one is exactly the same as ssl_sess.c Thanks to Adam Goodman <adam@a-domain.com> for hint
NOT BUG:Remove three more bogus files (2x temp file 1x trash)
NOT BUG:What is on my ToDo list..
NOT BUG:Overhauled the Perl interface (perl/*):
NOT BUG:- ported BN stuff to OpenSSL's different BN library
NOT BUG:- made the perl/ source tree CVS-aware
NOT BUG:- renamed the package from SSLeay to OpenSSL (the files still contain their history because I've copied them in the repository)
NOT BUG:- removed obsolete files (the test scripts will be replaced by better Test::Harness variants in the future)
NOT BUG:Ignore mx86unix.cpp which is generated on Intel platforms
BUG:Remember the cleanup
NOT BUG:First cut for a very conservative source tree cleanup:
NOT BUG:1 merge various obsolete readme texts into doc/ssleay.txt where we collect the old documents and readme texts
NOT BUG:2 remove the first part of files where I'm already sure that we no longer need them because of three reasons: either they are just temporary files which were left by Eric or they are preserved original files where I've verified that the diff is also available in the CVS via "cvs diff -rSSLeay_0_8_1b" or they were renamed (as it was definitely the case for the crypto/md/ stuff)
NOT BUG:We've still a horrible mess under crypto/bn/asm/ There for a lot of files I'm sure whether we need them or not So when someone knows it better feel free to cleanup there
NOT BUG:Ops one more reference to 0.9.1c Make sure we don't forget it..
NOT BUG:Oops Forgot to do a 'make errors'
NOT BUG:More extension code Incomplete support for subject and issuer alt name issuer and authority key id Change the i2v function parameters and add an extra 'crl' parameter in the X509V3_CTX structure: guess what that's for :-) Fix to ASN1 macro which messed up IMPLICIT tag and add f_enum.c which adds a2i i2a for ENUMERATED
NOT BUG:Update dependencies
NOT BUG:More exactitude with function arguments
NOT BUG:Oops.. forgot to add new ENUMERATED file..
NOT BUG:Support for ASN1 ENUMERATED type This copies and duplicates the ASN1_INTEGER code and adds support to ASN1_TYPE and asn1parse
NOT BUG:Comment out def of currently unimplemented function to stop warning
NOT BUG:Minor tweaks to keep Perl 5.001 happy
NOT BUG:Fix filename in comment
NOT BUG:Add support for GeneralName and GeneralNames extensions Also preliminary support for subject and issuer alt name Add a new ASN1 macro and fix a nasty bug that left an ASN1 buffer modified on an error condition with IMPLICIT tagging
NOT BUG:Delete legacy file
NOT BUG:Slightly improved diagnostics
NOT BUG:Process extensions when they are there
NOT BUG:Diagnose errors
NOT BUG:Typo in arguments
NOT BUG:Clear error we don't care about
NOT BUG:Rename v3_bitstr.c to v3_bitst.c to fit in 8+3 Rebuild MINFO to reflect change
NOT BUG:add what I'm doing and a vote
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Oops! Restore ssleay.num: it got overwritten with libeay.num :-(
NOT BUG:Delete bogus V3 prototype and update the *.num files to include ordinals for the new functions Update MINFO
NOT BUG:More Win32 fixes The Configure script used to give *lots* of warnings about use of undefined variables: kludge so they all get initialised Also avoid use of POSIX module
NOT BUG:Fix various stuff: that VC++ 5.0 chokes on: 1 Add *lots* of missing prototypes for static ssl functions 2 VC++ doesn't understand the 'LL' suffix for 64 bits constants: change bn.org 3 Add a few missing prototypes in pem.org Fix mk1mf.pl so it outputs a Makefile that doesn't choke Win95 Fix mkdef.pl so it doesn't truncate longer names
NOT BUG:Yet more pissing about to get PEM built at the right moment
NOT BUG:Add new function EVP_MD_CTX_copy() to replace frequent use of memcpy
BUG:Submitted by: Eric A Young - from changes to C2Net SSLeay Reviewed by: Mark Cox PR:
NOT BUG:Reflect correct filename
NOT BUG:Update README file a little bit..
NOT BUG:Make sure `make rehash' target really finds the `openssl' program
NOT BUG:Fix some more typos
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:fix typo
NOT BUG:Submitted by: Reviewed by: PR:
NOT BUG:Squeeze a bit more speed out of MD5 assembler
NOT BUG:Update STATUS modify ssl.h so mkdef.pl will pick up prototypes and add x509v3.h to mkdef.pl list of include files
NOT BUG:More pissing about to get pem.h to behave properly
NOT BUG:Break circular dependency between pem and err
NOT BUG:Ignore crypto/x509v3/lib
NOT BUG:Update dependencies
NOT BUG:Add dependencies
NOT BUG:Update
NOT BUG:Update dependencies
NOT BUG:Change address now that we've the mailing lists established
NOT BUG:Add CygWin32 platform information to Configure script
BUG:Submitted by: Alan Batie <batie@aahz.jf.intel.com>
NOT BUG:Fixed ms/32all.bat script: `no_asm' -> `no-asm'
NOT BUG:Submitted by: Rainer W Gerling <gerling@mpg-gv.mpg.de> Reviewed by: Ralf S Engelschall
NOT BUG:New program 'nseq' added to apps to allow Netscape certificate sequences to be pulled apart and built
NOT BUG:Allow the -certfile argument to be used multiple times in crl2pkcs7 Also fix typos in the usage messages: "inout" instead of "input"
NOT BUG:Fill in more contents for the openssl(1) manpage
NOT BUG:One more incorrect name in usage page
NOT BUG:Fix names in usage page of s_time s_server and s_client
NOT BUG:Fixes to BN code Previously the default was to define BN_RECURSION but the BN code had some problems that would cause failures when doing certificate verification and some other functions
BUG:Submitted by: Eric A Young from a C2Net version of SSLeay Reviewed by: Mark J Cox PR:
NOT BUG:Remember to add the new file this time :-)
NOT BUG:Add ASN1 code for netscape certificate sequences
NOT BUG:Add a few extended key usage OIDs
NOT BUG:Still more X509 V3 stuff Modify ca.c to work with the new code and modify openssl.cnf for the new syntax
NOT BUG:Oops One header too many
NOT BUG:Update dependencies
NOT BUG:Declare correctly on FreeBSD
NOT BUG:Reduce header dependencies
NOT BUG:More X509 V3 stuff Add support for extensions in the 'req' application so that: openssl req -x509 -new -out cert.pem will take extensions from openssl.cnf a sample for a CA is included Also change the directory order so pem is nearer the end Otherwise 'make links' wont work because pem.h can't be built
NOT BUG:Add file x509v3.err
NOT BUG:Make sure people know when they need to rebuild the Makefile
NOT BUG:Minor constification
NOT BUG:Continuing adding X509 V3 support This starts to integrate the code with the main library but only with printing at present To see this try: openssl x509 -in cert.pem -text on a certificate with some extensions in it
NOT BUG:Initial addition of new X509 V3 files tidy of old files
NOT BUG:Start keeping track of wishes people make on our mailing lists to make sure we don't forget them and this way we have them bundled together
BUG:Correct bracketing error
NOT BUG:Continued patches so certificates and CRLs now can support and use GeneralizedTime
NOT BUG:This time get it right
NOT BUG:Finally lay dependencies to rest (I hope!)
NOT BUG:Spelling mistake
NOT BUG:This is the result of a "make errors" with the new error building functionality in place
NOT BUG:New err_code.pl script to retain old error codes This should allow the use of 'make errors' without causing huge re-organisations of files when a new code is added
NOT BUG:Ignore auto-generated programs
NOT BUG:Dispose of generated programs
NOT BUG:Fix major cockup with short keys in CAST-128
NOT BUG:Update CHANGES for GeneralizedTime info
NOT BUG:Correct Linux 1 recognition Contributed by: Ulf Möller <ulf@fitug.de>
NOT BUG:Oops Missing NULL frees
NOT BUG:Remove pointless MD5 hash Contributed by: Anonymous <nobody@replay.com>
NOT BUG:Generate an error on an invalid directory
NOT BUG:Time to blow up the source tree :-) This is the beginning of support for GeneralizedTime At several points PKIX specifies that GeneralizedTime can be used but OpenSSL doesn't currently support it This patch adds several files and a bunch of functions
NOT BUG:Of interest is the ASN1_TIME structure and its related functions At several points certificates CRLs et al specify that a time can be expressed as a choice of UTCTime and GeneralizedTime Currently OpenSSL interprets this (wrongly) as UTCTime because GeneralizedTime isn't supported The ASN1_TIME stuff provides this functionality
NOT BUG:Still todo is to trace which cert and CRL points need an ASN1_TIME and modify the utilities appropriately and of course fix all the bugs
NOT BUG:Note new OpenSSL copyright in the new file a_time.c I didn't put it in a_gentm.c because it is a minimally modified form a_utctm.c 
NOT BUG:Since this adds new files and error codes you will need to do a 'make errors' at the top level to add the new codes
NOT BUG:More prototypes
NOT BUG:More prototypes
NOT BUG:More prototypes
NOT BUG:More prototypes
NOT BUG:More prototypes
NOT BUG:More prototypes
NOT BUG:Fix parameters to dummy function BN_ref_mod_exp()
NOT BUG:Submitted by: Neil Costigan <neil.costigan@celocom.com> PR:
NOT BUG:Fix OBJ_txt2nid(): old function was broken when input used the "dot" form e.g 1.2.3.4  Also added new function OBJ_txt2obj()
NOT BUG:Add prototype fix parameter passing bug
NOT BUG:Fix comment
NOT BUG:Sort openssl functions by name
NOT BUG:Fix the gendsa program and add it to the app list The progs.h file is auto generated but not auto updated so it is included Also remove the encryption from the sample DSA keys
NOT BUG:Get rid of redundant files
NOT BUG:Accept NULL in *_free
NOT BUG:Fix DH key generation Contributed by: Anonymous <nobody@replay.com>
NOT BUG:Send the right CAs to the client
BUG:Fix numeric -newkey args Contributed by: Bodo Moeller <3moeller@informatik.uni-hamburg.de>
NOT BUG:Fix export tests
NOT BUG:Make the world a safer place (if people object to this kind of change speak up soon - I intend to do a lot of it!)
NOT BUG:Oops! update CHANGES file properly
NOT BUG:Fix things so DH_free() will be no-op when passed NULL like RSA_free() and DSA_free(): this was causing crashes when for example an attempt was made to handle a (currently) unsupported DH public key Also X509_PUBKEY_set()i wasn't checking errors from d2i_PublicKey()
NOT BUG:Free the right thing
NOT BUG:Only free if it ain't NULL
NOT BUG:Remove the bugfix that was really a bug Submitted by: Arne Ansper <arne@ats.cyber.ee>
NOT BUG:Pass on BIO_CTRL_FLUSH Submitted by: Arne Ansper <arne@ats.cyber.ee>
NOT BUG:The dir is named util/ and better to explicitly call the perl interpreter because not everyone has it in /usr/local/bin/perl
NOT BUG:More EVP_PKEY patches for new functionality
NOT BUG:Make sure the already existing X509_STORE->depth variable is initialized in X509_STORE_new() but document the fact that this variable is still unused in the certificate verification process
NOT BUG:The dir is named util/ and better to explicitly call the perl interpreter because not everyone has it in /usr/local/bin/perl
NOT BUG:More .cvsignore stuff to make CVS quiet on our generated files
NOT BUG:Remove one EVP_PKEY_free() that shouldn't be there
NOT BUG:Make sure applications free up pkey structures and add netscape extension handling to x509.c
BUG:Fix reference counting
BUG:Don't confuse matters by using the wrong library
NOT BUG:Fix tests for ssleay -> openssl
NOT BUG:A few train of thoughts about the build procedure mess
NOT BUG:Update scripts to use "openssl" instead of "ssleay"
NOT BUG:Reflect change from "ssleay" to "openssl" as the main binary name Also document "sh config" as an easier alternative to "./Configure system"
NOT BUG:Various ssleay to openssl fixups
NOT BUG:Binary is now apps/openssl not apps/ssleay so use the new name when rehashing the test certs
NOT BUG:A couple more ssleay.cnf to openssl.cnf changes
NOT BUG:Some more changes for renaming the binary from ssleay to openssl I wonder what eay.c is?
NOT BUG:First cut of a cleanup for apps/ First the `ssleay' program is now named `openssl' and second the shortcut symlinks for the `openssl <command>' are no longer created This way we have a single and consistent command line interface `openssl <command>' similar to `cvs <command>'
NOT BUG:Notice the openssl.cnf openssl.c and progs.pl files were changed after a repository copy i.e they still contain the complete file history
NOT BUG:Make GCC happy by removing an unused variable defintion
NOT BUG:Move DSA test in ca.c inside #ifdef and make pubkey BIT STRING always have zero unused bits
NOT BUG:Add extended key usage OID and update STATUS file
NOT BUG:cleanup of apps/ and an answer
NOT BUG:ssldir.pl did not correctly set the directory in utils/mk1mk.pl when perl5 was used
NOT BUG:Add votes
NOT BUG:Make the installation documentation easier to follow
NOT BUG:Makefiles updated to exit if an error occurs in a sub-directory make (including if user presses ^C)
NOT BUG:This is a quick hack conversion of the 'CA.sh' script to perl It fixes one bug in the original but is otherwise just as horrible :-)
NOT BUG:Remove more old temporary files from CVS
NOT BUG:Document recent changes
NOT BUG:Fix name delete problem
NOT BUG:Fix pem/err ordering
NOT BUG:A hint about the license
NOT BUG:Some issues for voting
NOT BUG:More structuring and sorting of the SSL API documentation And the first steps to descriptions in prosa
NOT BUG:Puhhh.. now we've documented the prototypes of all 214 API "functions" This is a pain to do because of the various macro definitions which I had to expand manually to get their prototype :-(
NOT BUG:What's now needed is a volunteer who wants to write down one or two sentences per API function to document it a little bit..
NOT BUG:Fix version stuff:
BUG:1 The already released version was 0.9.1c and not 0.9.1b
NOT BUG:2 The next release should be 0.9.2 and not 0.9.1d because first the changes are already too large second we should avoid any more 0.9.1x confusions and third the Apache version semantics of VERSION.REVISION.PATCHLEVEL for the version string is reasonable (and here .2 is already just a patchlevel and not major change) tVS: ----------------------------------------------------------------------
NOT BUG:Update CHANGES file for latest additions
NOT BUG:Fix for sk_insert bug: it never worked properly Allow explicit tag asn macros to handle indefinite length constructed stuff: without this certain "certificates" can't be read in
BUG:MIME encoding and ISO chars at the same time messes up the stuff
NOT BUG:Ops forgot to commit the changes entry in recent commit..
NOT BUG:Cleanup of doc/ directory: The old/obsolete SSLeay files are now assembled together in a ssleay.txt file
NOT BUG:fix pk7_doit.c for new i2d_ASN1_SET argument
NOT BUG:external error lib number now global and allow error lib to have a name
NOT BUG:Create a STATUS file to coordinate us Feel free to edit
NOT BUG:Replace AUTHOR with a better HISTORY as in FreeBSD's manpages
NOT BUG:Fix an error message
BUG:Fix incorrect DER encoding of SETs and all knock-ons from that
NOT BUG:Add prototypes Make Montgomery stuff explicitly for that purpose
NOT BUG:Import the first cut for manual pages
NOT BUG:They are written in Perl's POD format for two reasons: First Perl is already needed for SSLeay and second POD is easy to write and maintain _AND_ created nice looking NRoff manpages
NOT BUG:The idea is to have three manual pages:
NOT BUG:openssl(1) .. The manpage for the `openssl' program (formerly ssleay) crypto(3) ... The manpage for crypto.h/libcrypto.a ssl(3) ...... The manpage for ssl.h/libssl.a
NOT BUG:The openssl(1) should be very similar to cvs(1) i.e it should document all commands in a compact way And I've even created the first cut for an overview of all 243 functions of the SSL API for ssl.pod More to come..
NOT BUG:Make Configure work again after eliminating files
NOT BUG:Deal with generated files
NOT BUG:This is not a bug in NT Perl its a bug in Configure
NOT BUG:Require Perl 5
NOT BUG:Fix option listing
NOT BUG:Typo
NOT BUG:Autodetect FreeBSD 3
NOT BUG:Add strictness fix variable substition bugs
NOT BUG:Test remote CVS commit..
NOT BUG:Test for new CVS repository
NOT BUG:*** empty log message ***
NOT BUG:*** empty log message ***
NOT BUG:*** empty log message ***
NOT BUG:Add include dir
NOT BUG:Switch version string to SSLeay/OpenSSL
NOT BUG:*** empty log message ***
NOT BUG:Switch to OpenSSL name
NOT BUG:Fix unused variable warning of GCC
NOT BUG:*** empty log message ***
BUG:OpenTLS ready
BUG:Incorporation of RSEs assembled patches
NOT BUG:*** empty log message ***
NOT BUG:Various cleanups and fixed by Marc and Ralf to start the OpenTLS project
NOT BUG:Merge: 7dfb0b7 dfeab06
NOT BUG:This commit was generated by cvs2svn to track changes on a CVS vendor branch
BUG:Import of old SSLeay release: SSLeay 0.9.1b (unreleased)
NOT BUG:Merge: 78414a6 15403de
NOT BUG:This commit was generated by cvs2svn to track changes on a CVS vendor branch
BUG:Import of old SSLeay release: SSLeay 0.9.1b (unreleased)
BUG:Import of old SSLeay release: SSLeay 0.9.0b
NOT BUG:Merge: eda1f21 58964a4
NOT BUG:This commit was generated by cvs2svn to track changes on a CVS vendor branch
BUG:Import of old SSLeay release: SSLeay 0.9.0b
NOT BUG:Merge: b7896b3 c7e9169
NOT BUG:This commit was generated by cvs2svn to track changes on a CVS vendor branch
BUG:Import of old SSLeay release: SSLeay 0.8.1b
NOT BUG:Merge: 90718ac d02b48c
NOT BUG:This commit was generated by cvs2svn to track changes on a CVS vendor branch
BUG:Import of old SSLeay release: SSLeay 0.8.1b
